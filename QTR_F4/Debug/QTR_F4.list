
QTR_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fdc  08008fdc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe4  08008fe4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000aa0  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b1c  20000b1c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017a05  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000401c  00000000  00000000  00037af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001368  00000000  00000000  0003bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ecf  00000000  00000000  0003ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f12  00000000  00000000  0003dd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a1fa  00000000  00000000  00062c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7fae  00000000  00000000  0007ce53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000053d0  00000000  00000000  00154e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0015a1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fa0 	.word	0x08008fa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008fa0 	.word	0x08008fa0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_ADC_ConvCpltCallback>:
        adc_value = HAL_ADC_GetValue(hadc);

    HAL_ADC_Stop(hadc);
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc )
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	if(__HAL_ADC_GET_FLAG(&hadc1,ADC_FLAG_EOC) != RESET)
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <HAL_ADC_ConvCpltCallback+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d114      	bne.n	8000504 <HAL_ADC_ConvCpltCallback+0x40>
	{
		adc1_value[count] = HAL_ADC_GetValue(&hadc1);
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_ADC_ConvCpltCallback+0x68>)
 80004dc:	681c      	ldr	r4, [r3, #0]
 80004de:	4812      	ldr	r0, [pc, #72]	; (8000528 <HAL_ADC_ConvCpltCallback+0x64>)
 80004e0:	f001 f8fe 	bl	80016e0 <HAL_ADC_GetValue>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		count++;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_ADC_ConvCpltCallback+0x68>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_ADC_ConvCpltCallback+0x68>)
 80004f4:	6013      	str	r3, [r2, #0]
		/*
		 *    count = 0 => channel 1
		 *    count = 1 => channel 2
		 */
		if(count == 2)
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_ADC_ConvCpltCallback+0x68>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	d102      	bne.n	8000504 <HAL_ADC_ConvCpltCallback+0x40>
			count = 0;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_ADC_ConvCpltCallback+0x68>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]

	}
	if(__HAL_ADC_GET_FLAG(&hadc2,ADC_FLAG_EOC) != RESET)
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <HAL_ADC_ConvCpltCallback+0x70>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f003 0302 	and.w	r3, r3, #2
 800050e:	2b02      	cmp	r3, #2
 8000510:	d105      	bne.n	800051e <HAL_ADC_ConvCpltCallback+0x5a>
	{
		adc2_value = HAL_ADC_GetValue(&hadc2);
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <HAL_ADC_ConvCpltCallback+0x70>)
 8000514:	f001 f8e4 	bl	80016e0 <HAL_ADC_GetValue>
 8000518:	4603      	mov	r3, r0
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_ADC_ConvCpltCallback+0x74>)
 800051c:	6013      	str	r3, [r2, #0]
	}
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	bf00      	nop
 8000528:	20000098 	.word	0x20000098
 800052c:	200002e8 	.word	0x200002e8
 8000530:	200002dc 	.word	0x200002dc
 8000534:	200000e0 	.word	0x200000e0
 8000538:	200002e4 	.word	0x200002e4

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fe06 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f81e 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f9f8 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 f9ce 	bl	80008ec <MX_DMA_Init>
  MX_I2C1_Init();
 8000550:	f000 f938 	bl	80007c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000554:	f000 f964 	bl	8000820 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000558:	f000 f992 	bl	8000880 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800055c:	f008 f8cc 	bl	80086f8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000560:	f000 f87a 	bl	8000658 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000564:	f000 f8da 	bl	800071c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <main+0x40>)
 800056a:	f000 fecb 	bl	8001304 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <main+0x44>)
 8000570:	f000 fec8 	bl	8001304 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000574:	f008 f8e6 	bl	8008744 <MX_USB_HOST_Process>
 8000578:	e7fc      	b.n	8000574 <main+0x38>
 800057a:	bf00      	nop
 800057c:	20000098 	.word	0x20000098
 8000580:	200000e0 	.word	0x200000e0

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f008 fc74 	bl	8008e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fa52 	bl	8004ab4 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000616:	f000 faa7 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2105      	movs	r1, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fcb3 	bl	8004fa4 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000644:	f000 fa90 	bl	8000b68 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <MX_ADC1_Init+0xb8>)
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <MX_ADC1_Init+0xbc>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_ADC1_Init+0xb8>)
 8000672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_ADC1_Init+0xb8>)
 800067a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800067e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_ADC1_Init+0xb8>)
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_ADC1_Init+0xb8>)
 8000688:	2201      	movs	r2, #1
 800068a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_ADC1_Init+0xb8>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_ADC1_Init+0xb8>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_ADC1_Init+0xb8>)
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <MX_ADC1_Init+0xc0>)
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_ADC1_Init+0xb8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_ADC1_Init+0xb8>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_ADC1_Init+0xb8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_ADC1_Init+0xb8>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <MX_ADC1_Init+0xb8>)
 80006bc:	f000 fdde 	bl	800127c <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006c6:	f000 fa4f 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_ADC1_Init+0xb8>)
 80006dc:	f001 f822 	bl	8001724 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006e6:	f000 fa3f 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0xb8>)
 80006f8:	f001 f814 	bl	8001724 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000702:	f000 fa31 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000098 	.word	0x20000098
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001

0800071c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_ADC2_Init+0xa0>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ADC2_Init+0x9c>)
 800073e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000742:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_ADC2_Init+0x9c>)
 800074c:	2201      	movs	r2, #1
 800074e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_ADC2_Init+0x9c>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <MX_ADC2_Init+0xa4>)
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_ADC2_Init+0x9c>)
 800076c:	2201      	movs	r2, #1
 800076e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_ADC2_Init+0x9c>)
 800077a:	2201      	movs	r2, #1
 800077c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_ADC2_Init+0x9c>)
 8000780:	f000 fd7c 	bl	800127c <HAL_ADC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800078a:	f000 f9ed 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800078e:	2303      	movs	r3, #3
 8000790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_ADC2_Init+0x9c>)
 80007a0:	f000 ffc0 	bl	8001724 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80007aa:	f000 f9dd 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000e0 	.word	0x200000e0
 80007bc:	40012100 	.word	0x40012100
 80007c0:	0f000001 	.word	0x0f000001

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C1_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <MX_I2C1_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C1_Init+0x50>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_I2C1_Init+0x58>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_I2C1_Init+0x50>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_I2C1_Init+0x50>)
 8000802:	f003 fb73 	bl	8003eec <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f9ac 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200001e8 	.word	0x200001e8
 8000818:	40005400 	.word	0x40005400
 800081c:	000186a0 	.word	0x000186a0

08000820 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_I2S3_Init+0x54>)
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <MX_I2S3_Init+0x58>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2S3_Init+0x54>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_I2S3_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_I2S3_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_I2S3_Init+0x54>)
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <MX_I2S3_Init+0x5c>)
 800084a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_I2S3_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_I2S3_Init+0x54>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2S3_Init+0x54>)
 8000860:	f003 fc88 	bl	8004174 <HAL_I2S_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800086a:	f000 f97d 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000023c 	.word	0x2000023c
 8000878:	40003c00 	.word	0x40003c00
 800087c:	00017700 	.word	0x00017700

08000880 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_SPI1_Init+0x64>)
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <MX_SPI1_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008d2:	f004 feb3 	bl	800563c <HAL_SPI_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008dc:	f000 f944 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000284 	.word	0x20000284
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_DMA_Init+0x4c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <MX_DMA_Init+0x4c>)
 80008fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_DMA_Init+0x4c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2038      	movs	r0, #56	; 0x38
 8000914:	f001 fa09 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000918:	2038      	movs	r0, #56	; 0x38
 800091a:	f001 fa22 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	203a      	movs	r0, #58	; 0x3a
 8000924:	f001 fa01 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000928:	203a      	movs	r0, #58	; 0x3a
 800092a:	f001 fa1a 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b7e      	ldr	r3, [pc, #504]	; (8000b50 <MX_GPIO_Init+0x214>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a7d      	ldr	r2, [pc, #500]	; (8000b50 <MX_GPIO_Init+0x214>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b7b      	ldr	r3, [pc, #492]	; (8000b50 <MX_GPIO_Init+0x214>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b77      	ldr	r3, [pc, #476]	; (8000b50 <MX_GPIO_Init+0x214>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a76      	ldr	r2, [pc, #472]	; (8000b50 <MX_GPIO_Init+0x214>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b74      	ldr	r3, [pc, #464]	; (8000b50 <MX_GPIO_Init+0x214>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b70      	ldr	r3, [pc, #448]	; (8000b50 <MX_GPIO_Init+0x214>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a6f      	ldr	r2, [pc, #444]	; (8000b50 <MX_GPIO_Init+0x214>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b6d      	ldr	r3, [pc, #436]	; (8000b50 <MX_GPIO_Init+0x214>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b69      	ldr	r3, [pc, #420]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a68      	ldr	r2, [pc, #416]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b66      	ldr	r3, [pc, #408]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b62      	ldr	r3, [pc, #392]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a61      	ldr	r2, [pc, #388]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b5b      	ldr	r3, [pc, #364]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a5a      	ldr	r2, [pc, #360]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b58      	ldr	r3, [pc, #352]	; (8000b50 <MX_GPIO_Init+0x214>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4855      	ldr	r0, [pc, #340]	; (8000b54 <MX_GPIO_Init+0x218>)
 8000a00:	f001 fe50 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	4853      	ldr	r0, [pc, #332]	; (8000b58 <MX_GPIO_Init+0x21c>)
 8000a0a:	f001 fe4b 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2130      	movs	r1, #48	; 0x30
 8000a12:	4851      	ldr	r0, [pc, #324]	; (8000b58 <MX_GPIO_Init+0x21c>)
 8000a14:	f001 fe46 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Output3_GPIO_Port, Output3_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	484f      	ldr	r0, [pc, #316]	; (8000b5c <MX_GPIO_Init+0x220>)
 8000a1e:	f001 fe41 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a22:	2200      	movs	r2, #0
 8000a24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a28:	484d      	ldr	r0, [pc, #308]	; (8000b60 <MX_GPIO_Init+0x224>)
 8000a2a:	f001 fe3b 	bl	80026a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4843      	ldr	r0, [pc, #268]	; (8000b54 <MX_GPIO_Init+0x218>)
 8000a46:	f001 fc91 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Output1_Pin|Output2_Pin;
 8000a4a:	2331      	movs	r3, #49	; 0x31
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483d      	ldr	r0, [pc, #244]	; (8000b58 <MX_GPIO_Init+0x21c>)
 8000a62:	f001 fc83 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a76:	2305      	movs	r3, #5
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4835      	ldr	r0, [pc, #212]	; (8000b58 <MX_GPIO_Init+0x21c>)
 8000a82:	f001 fc73 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4832      	ldr	r0, [pc, #200]	; (8000b64 <MX_GPIO_Init+0x228>)
 8000a9c:	f001 fc66 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : Output3_Pin */
  GPIO_InitStruct.Pin = Output3_Pin;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Output3_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4829      	ldr	r0, [pc, #164]	; (8000b5c <MX_GPIO_Init+0x220>)
 8000ab8:	f001 fc58 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000abc:	2304      	movs	r3, #4
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4823      	ldr	r0, [pc, #140]	; (8000b5c <MX_GPIO_Init+0x220>)
 8000ad0:	f001 fc4c 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	481a      	ldr	r0, [pc, #104]	; (8000b5c <MX_GPIO_Init+0x220>)
 8000af2:	f001 fc3b 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000af6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000afa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_GPIO_Init+0x224>)
 8000b10:	f001 fc2c 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	480e      	ldr	r0, [pc, #56]	; (8000b60 <MX_GPIO_Init+0x224>)
 8000b28:	f001 fc20 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b30:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_GPIO_Init+0x218>)
 8000b42:	f001 fc13 	bl	800236c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b46:	bf00      	nop
 8000b48:	3730      	adds	r7, #48	; 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40020000 	.word	0x40020000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bb2:	2007      	movs	r0, #7
 8000bb4:	f001 f8ae 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	; 0x30
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a67      	ldr	r2, [pc, #412]	; (8000d80 <HAL_ADC_MspInit+0x1bc>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d161      	bne.n	8000caa <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	4b66      	ldr	r3, [pc, #408]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a65      	ldr	r2, [pc, #404]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b63      	ldr	r3, [pc, #396]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b5f      	ldr	r3, [pc, #380]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a5e      	ldr	r2, [pc, #376]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b5c      	ldr	r3, [pc, #368]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4855      	ldr	r0, [pc, #340]	; (8000d88 <HAL_ADC_MspInit+0x1c4>)
 8000c32:	f001 fb9b 	bl	800236c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c36:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c38:	4a55      	ldr	r2, [pc, #340]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c3c:	4b53      	ldr	r3, [pc, #332]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c42:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c74:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c76:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7c:	4843      	ldr	r0, [pc, #268]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c7e:	f001 f88b 	bl	8001d98 <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c88:	f7ff ff6e 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
 8000c92:	4a3e      	ldr	r2, [pc, #248]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2012      	movs	r0, #18
 8000c9e:	f001 f844 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f001 f85d 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ca8:	e066      	b.n	8000d78 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a39      	ldr	r2, [pc, #228]	; (8000d94 <HAL_ADC_MspInit+0x1d0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d161      	bne.n	8000d78 <HAL_ADC_MspInit+0x1b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cec:	2308      	movs	r3, #8
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4822      	ldr	r0, [pc, #136]	; (8000d88 <HAL_ADC_MspInit+0x1c4>)
 8000d00:	f001 fb34 	bl	800236c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d04:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d06:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <HAL_ADC_MspInit+0x1d8>)
 8000d08:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d10:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d24:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d2c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d34:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d44:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d4e:	f001 f823 	bl	8001d98 <HAL_DMA_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8000d58:	f7ff ff06 	bl	8000b68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
 8000d62:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <HAL_ADC_MspInit+0x1d4>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2012      	movs	r0, #18
 8000d6e:	f000 ffdc 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d72:	2012      	movs	r0, #18
 8000d74:	f000 fff5 	bl	8001d62 <HAL_NVIC_EnableIRQ>
}
 8000d78:	bf00      	nop
 8000d7a:	3730      	adds	r7, #48	; 0x30
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40012000 	.word	0x40012000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	20000128 	.word	0x20000128
 8000d90:	40026410 	.word	0x40026410
 8000d94:	40012100 	.word	0x40012100
 8000d98:	20000188 	.word	0x20000188
 8000d9c:	40026440 	.word	0x40026440

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_I2C_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12c      	bne.n	8000e1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dde:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df0:	2304      	movs	r3, #4
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <HAL_I2C_MspInit+0x8c>)
 8000dfc:	f001 fab6 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40005400 	.word	0x40005400
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400

08000e30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a31      	ldr	r2, [pc, #196]	; (8000f20 <HAL_I2S_MspInit+0xf0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d15a      	bne.n	8000f16 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e60:	2301      	movs	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e64:	23c0      	movs	r3, #192	; 0xc0
 8000e66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 faa3 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e7c:	f7ff fe74 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <HAL_I2S_MspInit+0xf8>)
 8000ef0:	f001 fa3c 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ef4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f06:	2306      	movs	r3, #6
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <HAL_I2S_MspInit+0xfc>)
 8000f12:	f001 fa2b 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3738      	adds	r7, #56	; 0x38
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40003c00 	.word	0x40003c00
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020800 	.word	0x40020800

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_SPI_MspInit+0x84>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d12b      	bne.n	8000faa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f8a:	23e0      	movs	r3, #224	; 0xe0
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000fa6:	f001 f9e1 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40013000 	.word	0x40013000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f8f2 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <ADC_IRQHandler+0x14>)
 800101a:	f000 fa51 	bl	80014c0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <ADC_IRQHandler+0x18>)
 8001020:	f000 fa4e 	bl	80014c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000098 	.word	0x20000098
 800102c:	200000e0 	.word	0x200000e0

08001030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA2_Stream0_IRQHandler+0x10>)
 8001036:	f000 ff5d 	bl	8001ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000128 	.word	0x20000128

08001044 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA2_Stream2_IRQHandler+0x10>)
 800104a:	f000 ff53 	bl	8001ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000188 	.word	0x20000188

08001058 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <OTG_FS_IRQHandler+0x10>)
 800105e:	f001 fda5 	bl	8002bac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200006d0 	.word	0x200006d0

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f007 ff08 	bl	8008eb0 <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20020000 	.word	0x20020000
 80010cc:	00000400 	.word	0x00000400
 80010d0:	200002ec 	.word	0x200002ec
 80010d4:	20000b20 	.word	0x20000b20

080010d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001102:	490e      	ldr	r1, [pc, #56]	; (800113c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001118:	4c0b      	ldr	r4, [pc, #44]	; (8001148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001126:	f7ff ffd7 	bl	80010d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f007 fec7 	bl	8008ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fa05 	bl	800053c <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001140:	08008fec 	.word	0x08008fec
  ldr r2, =_sbss
 8001144:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001148:	20000b1c 	.word	0x20000b1c

0800114c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <CAN1_RX0_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_Init+0x40>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_Init+0x40>)
 8001166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x40>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 fdcb 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fcf6 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fde3 	bl	8001d7e <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d0:	f000 fdab 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	200002f0 	.word	0x200002f0

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200002f0 	.word	0x200002f0

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e033      	b.n	80012fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fc92 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c2:	f023 0302 	bic.w	r3, r3, #2
 80012c6:	f043 0202 	orr.w	r2, r3, #2
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fb4a 	bl	8001968 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f023 0303 	bic.w	r3, r3, #3
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ea:	e001      	b.n	80012f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADC_Start_IT+0x1a>
 800131a:	2302      	movs	r3, #2
 800131c:	e0bd      	b.n	800149a <HAL_ADC_Start_IT+0x196>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d018      	beq.n	8001366 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_ADC_Start_IT+0x1a4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a58      	ldr	r2, [pc, #352]	; (80014ac <HAL_ADC_Start_IT+0x1a8>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9a      	lsrs	r2, r3, #18
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001358:	e002      	b.n	8001360 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b01      	cmp	r3, #1
 8001372:	f040 8085 	bne.w	8001480 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013b4:	d106      	bne.n	80013c4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f023 0206 	bic.w	r2, r3, #6
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
 80013c2:	e002      	b.n	80013ca <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <HAL_ADC_Start_IT+0x1ac>)
 80013d4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013de:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013ee:	f043 0320 	orr.w	r3, r3, #32
 80013f2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12a      	bne.n	8001456 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <HAL_ADC_Start_IT+0x1b0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d015      	beq.n	8001436 <HAL_ADC_Start_IT+0x132>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_ADC_Start_IT+0x1b4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d105      	bne.n	8001420 <HAL_ADC_Start_IT+0x11c>
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_ADC_Start_IT+0x1ac>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00a      	beq.n	8001436 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a25      	ldr	r2, [pc, #148]	; (80014bc <HAL_ADC_Start_IT+0x1b8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d136      	bne.n	8001498 <HAL_ADC_Start_IT+0x194>
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_ADC_Start_IT+0x1ac>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d130      	bne.n	8001498 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d129      	bne.n	8001498 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	e020      	b.n	8001498 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_ADC_Start_IT+0x1b0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d11b      	bne.n	8001498 <HAL_ADC_Start_IT+0x194>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d114      	bne.n	8001498 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	e00b      	b.n	8001498 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f043 0210 	orr.w	r2, r3, #16
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	40012300 	.word	0x40012300
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40012100 	.word	0x40012100
 80014bc:	40012200 	.word	0x40012200

080014c0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d049      	beq.n	800158a <HAL_ADC_IRQHandler+0xca>
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d046      	beq.n	800158a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d12b      	bne.n	800157a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d127      	bne.n	800157a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001542:	2b00      	cmp	r3, #0
 8001544:	d119      	bne.n	800157a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0220 	bic.w	r2, r2, #32
 8001554:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d105      	bne.n	800157a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe ffa2 	bl	80004c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f06f 0212 	mvn.w	r2, #18
 8001588:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001598:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d057      	beq.n	8001650 <HAL_ADC_IRQHandler+0x190>
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d054      	beq.n	8001650 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d139      	bne.n	8001640 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d12b      	bne.n	8001640 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d124      	bne.n	8001640 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001600:	2b00      	cmp	r3, #0
 8001602:	d11d      	bne.n	8001640 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001608:	2b00      	cmp	r3, #0
 800160a:	d119      	bne.n	8001640 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800161a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fa8d 	bl	8001b60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f06f 020c 	mvn.w	r2, #12
 800164e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d017      	beq.n	8001696 <HAL_ADC_IRQHandler+0x1d6>
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d014      	beq.n	8001696 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d10d      	bne.n	8001696 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f837 	bl	80016fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016a4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x218>
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d012      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0220 	mvn.w	r2, #32
 80016c6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f820 	bl	800170e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f06f 0220 	mvn.w	r2, #32
 80016d6:	601a      	str	r2, [r3, #0]
  }
}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1c>
 800173c:	2302      	movs	r3, #2
 800173e:	e105      	b.n	800194c <HAL_ADC_ConfigChannel+0x228>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b09      	cmp	r3, #9
 800174e:	d925      	bls.n	800179c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68d9      	ldr	r1, [r3, #12]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	3b1e      	subs	r3, #30
 8001766:	2207      	movs	r2, #7
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43da      	mvns	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	400a      	ands	r2, r1
 8001774:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68d9      	ldr	r1, [r3, #12]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	4603      	mov	r3, r0
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4403      	add	r3, r0
 800178e:	3b1e      	subs	r3, #30
 8001790:	409a      	lsls	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	e022      	b.n	80017e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6919      	ldr	r1, [r3, #16]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	2207      	movs	r2, #7
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	400a      	ands	r2, r1
 80017be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6919      	ldr	r1, [r3, #16]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4403      	add	r3, r0
 80017d8:	409a      	lsls	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d824      	bhi.n	8001834 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	3b05      	subs	r3, #5
 80017fc:	221f      	movs	r2, #31
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	400a      	ands	r2, r1
 800180a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3b05      	subs	r3, #5
 8001826:	fa00 f203 	lsl.w	r2, r0, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	635a      	str	r2, [r3, #52]	; 0x34
 8001832:	e04c      	b.n	80018ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	d824      	bhi.n	8001886 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3b23      	subs	r3, #35	; 0x23
 800184e:	221f      	movs	r2, #31
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43da      	mvns	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	400a      	ands	r2, r1
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	3b23      	subs	r3, #35	; 0x23
 8001878:	fa00 f203 	lsl.w	r2, r0, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
 8001884:	e023      	b.n	80018ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3b41      	subs	r3, #65	; 0x41
 8001898:	221f      	movs	r2, #31
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	400a      	ands	r2, r1
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	3b41      	subs	r3, #65	; 0x41
 80018c2:	fa00 f203 	lsl.w	r2, r0, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_ADC_ConfigChannel+0x234>)
 80018d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a21      	ldr	r2, [pc, #132]	; (800195c <HAL_ADC_ConfigChannel+0x238>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1cc>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b12      	cmp	r3, #18
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_ADC_ConfigChannel+0x238>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d123      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x21e>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d003      	beq.n	800190a <HAL_ADC_ConfigChannel+0x1e6>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b11      	cmp	r3, #17
 8001908:	d11b      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d111      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_ADC_ConfigChannel+0x23c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_ADC_ConfigChannel+0x240>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9a      	lsrs	r2, r3, #18
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001934:	e002      	b.n	800193c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40012300 	.word	0x40012300
 800195c:	40012000 	.word	0x40012000
 8001960:	20000000 	.word	0x20000000
 8001964:	431bde83 	.word	0x431bde83

08001968 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001970:	4b79      	ldr	r3, [pc, #484]	; (8001b58 <ADC_Init+0x1f0>)
 8001972:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	431a      	orrs	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800199c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	021a      	lsls	r2, r3, #8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6899      	ldr	r1, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <ADC_Init+0x1f4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d022      	beq.n	8001a46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6899      	ldr	r1, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6899      	ldr	r1, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	e00f      	b.n	8001a66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0202 	bic.w	r2, r2, #2
 8001a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6899      	ldr	r1, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7e1b      	ldrb	r3, [r3, #24]
 8001a80:	005a      	lsls	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6859      	ldr	r1, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	035a      	lsls	r2, r3, #13
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	e007      	b.n	8001adc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	051a      	lsls	r2, r3, #20
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6899      	ldr	r1, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b1e:	025a      	lsls	r2, r3, #9
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6899      	ldr	r1, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	029a      	lsls	r2, r3, #10
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40012300 	.word	0x40012300
 8001b5c:	0f000001 	.word	0x0f000001

08001b60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff29 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff3e 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff31 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff fa3a 	bl	800121c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e099      	b.n	8001ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd4:	e00f      	b.n	8001df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd6:	f7ff fa21 	bl	800121c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d908      	bls.n	8001df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e078      	b.n	8001ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e8      	bne.n	8001dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_DMA_Init+0x158>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d107      	bne.n	8001e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f023 0307 	bic.w	r3, r3, #7
 8001e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d117      	bne.n	8001eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f9e9 	bl	8002274 <DMA_CheckFifoParam>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e016      	b.n	8001ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f9a0 	bl	8002208 <DMA_CalcBaseAndBitshift>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	223f      	movs	r2, #63	; 0x3f
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	f010803f 	.word	0xf010803f

08001ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f00:	4b8e      	ldr	r3, [pc, #568]	; (800213c <HAL_DMA_IRQHandler+0x248>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a8e      	ldr	r2, [pc, #568]	; (8002140 <HAL_DMA_IRQHandler+0x24c>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0a9b      	lsrs	r3, r3, #10
 8001f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2208      	movs	r2, #8
 8001f20:	409a      	lsls	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01a      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	2201      	movs	r2, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d012      	beq.n	8001f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2201      	movs	r2, #1
 8001f84:	409a      	lsls	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d012      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00b      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2204      	movs	r2, #4
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d043      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d03c      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2210      	movs	r2, #16
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d018      	beq.n	8002036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d024      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
 8002022:	e01f      	b.n	8002064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
 8002034:	e016      	b.n	8002064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0208 	bic.w	r2, r2, #8
 8002052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2220      	movs	r2, #32
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 808f 	beq.w	8002194 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8087 	beq.w	8002194 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2220      	movs	r2, #32
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b05      	cmp	r3, #5
 800209c:	d136      	bne.n	800210c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0216 	bic.w	r2, r2, #22
 80020ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <HAL_DMA_IRQHandler+0x1da>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0208 	bic.w	r2, r2, #8
 80020dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	223f      	movs	r2, #63	; 0x3f
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d07e      	beq.n	8002200 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
        }
        return;
 800210a:	e079      	b.n	8002200 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01d      	beq.n	8002156 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	2b00      	cmp	r3, #0
 800212e:	d031      	beq.n	8002194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e02c      	b.n	8002194 <HAL_DMA_IRQHandler+0x2a0>
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000
 8002140:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d023      	beq.n	8002194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
 8002154:	e01e      	b.n	8002194 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10f      	bne.n	8002184 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0210 	bic.w	r2, r2, #16
 8002172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d032      	beq.n	8002202 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2205      	movs	r2, #5
 80021ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3301      	adds	r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d307      	bcc.n	80021dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f2      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x2cc>
 80021da:	e000      	b.n	80021de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
 80021fe:	e000      	b.n	8002202 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002200:	bf00      	nop
    }
  }
}
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	3b10      	subs	r3, #16
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <DMA_CalcBaseAndBitshift+0x64>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <DMA_CalcBaseAndBitshift+0x68>)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d909      	bls.n	800224a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223e:	f023 0303 	bic.w	r3, r3, #3
 8002242:	1d1a      	adds	r2, r3, #4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	659a      	str	r2, [r3, #88]	; 0x58
 8002248:	e007      	b.n	800225a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002252:	f023 0303 	bic.w	r3, r3, #3
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	aaaaaaab 	.word	0xaaaaaaab
 8002270:	08008fd4 	.word	0x08008fd4

08002274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11f      	bne.n	80022ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d856      	bhi.n	8002342 <DMA_CheckFifoParam+0xce>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <DMA_CheckFifoParam+0x28>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022bf 	.word	0x080022bf
 80022a4:	080022ad 	.word	0x080022ad
 80022a8:	08002343 	.word	0x08002343
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d046      	beq.n	8002346 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022bc:	e043      	b.n	8002346 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c6:	d140      	bne.n	800234a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022cc:	e03d      	b.n	800234a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d6:	d121      	bne.n	800231c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d837      	bhi.n	800234e <DMA_CheckFifoParam+0xda>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <DMA_CheckFifoParam+0x70>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	080022fb 	.word	0x080022fb
 80022ec:	080022f5 	.word	0x080022f5
 80022f0:	0800230d 	.word	0x0800230d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e030      	b.n	800235c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d025      	beq.n	8002352 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230a:	e022      	b.n	8002352 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002314:	d11f      	bne.n	8002356 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800231a:	e01c      	b.n	8002356 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d903      	bls.n	800232a <DMA_CheckFifoParam+0xb6>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d003      	beq.n	8002330 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002328:	e018      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      break;
 800232e:	e015      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      break;
 8002340:	e00b      	b.n	800235a <DMA_CheckFifoParam+0xe6>
      break;
 8002342:	bf00      	nop
 8002344:	e00a      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e008      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e006      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
 8002350:	e004      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
 8002354:	e002      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;   
 8002356:	bf00      	nop
 8002358:	e000      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 800235a:	bf00      	nop
    }
  } 
  
  return status; 
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e16b      	b.n	8002660 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 815a 	bne.w	800265a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d005      	beq.n	80023be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d130      	bne.n	8002420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b03      	cmp	r3, #3
 800242a:	d017      	beq.n	800245c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d123      	bne.n	80024b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0203 	and.w	r2, r3, #3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80b4 	beq.w	800265a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b60      	ldr	r3, [pc, #384]	; (8002678 <HAL_GPIO_Init+0x30c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a5f      	ldr	r2, [pc, #380]	; (8002678 <HAL_GPIO_Init+0x30c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_GPIO_Init+0x30c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250e:	4a5b      	ldr	r2, [pc, #364]	; (800267c <HAL_GPIO_Init+0x310>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_GPIO_Init+0x314>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_Init+0x226>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a51      	ldr	r2, [pc, #324]	; (8002684 <HAL_GPIO_Init+0x318>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x222>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a50      	ldr	r2, [pc, #320]	; (8002688 <HAL_GPIO_Init+0x31c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x21e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4f      	ldr	r2, [pc, #316]	; (800268c <HAL_GPIO_Init+0x320>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x21a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4e      	ldr	r2, [pc, #312]	; (8002690 <HAL_GPIO_Init+0x324>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x216>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4d      	ldr	r2, [pc, #308]	; (8002694 <HAL_GPIO_Init+0x328>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x212>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4c      	ldr	r2, [pc, #304]	; (8002698 <HAL_GPIO_Init+0x32c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x20e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4b      	ldr	r2, [pc, #300]	; (800269c <HAL_GPIO_Init+0x330>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x20a>
 8002572:	2307      	movs	r3, #7
 8002574:	e00e      	b.n	8002594 <HAL_GPIO_Init+0x228>
 8002576:	2308      	movs	r3, #8
 8002578:	e00c      	b.n	8002594 <HAL_GPIO_Init+0x228>
 800257a:	2306      	movs	r3, #6
 800257c:	e00a      	b.n	8002594 <HAL_GPIO_Init+0x228>
 800257e:	2305      	movs	r3, #5
 8002580:	e008      	b.n	8002594 <HAL_GPIO_Init+0x228>
 8002582:	2304      	movs	r3, #4
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x228>
 8002586:	2303      	movs	r3, #3
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x228>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x228>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x228>
 8002592:	2300      	movs	r3, #0
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_GPIO_Init+0x310>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_GPIO_Init+0x334>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d6:	4a32      	ldr	r2, [pc, #200]	; (80026a0 <HAL_GPIO_Init+0x334>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_GPIO_Init+0x334>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <HAL_GPIO_Init+0x334>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_GPIO_Init+0x334>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_GPIO_Init+0x334>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_GPIO_Init+0x334>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <HAL_GPIO_Init+0x334>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	f67f ae90 	bls.w	8002388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40013800 	.word	0x40013800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40021400 	.word	0x40021400
 8002698:	40021800 	.word	0x40021800
 800269c:	40021c00 	.word	0x40021c00
 80026a0:	40013c00 	.word	0x40013c00

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d8:	b08f      	sub	sp, #60	; 0x3c
 80026da:	af0a      	add	r7, sp, #40	; 0x28
 80026dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e054      	b.n	8002792 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f006 f856 	bl	80087b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2203      	movs	r2, #3
 800270c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 f883 	bl	8005832 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	687e      	ldr	r6, [r7, #4]
 8002734:	466d      	mov	r5, sp
 8002736:	f106 0410 	add.w	r4, r6, #16
 800273a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002746:	e885 0003 	stmia.w	r5, {r0, r1}
 800274a:	1d33      	adds	r3, r6, #4
 800274c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f002 fffd 	bl	800574e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f87a 	bl	8005854 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	687e      	ldr	r6, [r7, #4]
 8002768:	466d      	mov	r5, sp
 800276a:	f106 0410 	add.w	r4, r6, #16
 800276e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800277a:	e885 0003 	stmia.w	r5, {r0, r1}
 800277e:	1d33      	adds	r3, r6, #4
 8002780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f003 fa02 	bl	8005b8c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800279a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800279a:	b590      	push	{r4, r7, lr}
 800279c:	b089      	sub	sp, #36	; 0x24
 800279e:	af04      	add	r7, sp, #16
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	4608      	mov	r0, r1
 80027a4:	4611      	mov	r1, r2
 80027a6:	461a      	mov	r2, r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	70fb      	strb	r3, [r7, #3]
 80027ac:	460b      	mov	r3, r1
 80027ae:	70bb      	strb	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_HCD_HC_Init+0x28>
 80027be:	2302      	movs	r3, #2
 80027c0:	e076      	b.n	80028b0 <HAL_HCD_HC_Init+0x116>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	333d      	adds	r3, #61	; 0x3d
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3338      	adds	r3, #56	; 0x38
 80027ea:	787a      	ldrb	r2, [r7, #1]
 80027ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3340      	adds	r3, #64	; 0x40
 80027fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3339      	adds	r3, #57	; 0x39
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	333f      	adds	r3, #63	; 0x3f
 8002820:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	78ba      	ldrb	r2, [r7, #2]
 800282a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800282e:	b2d0      	uxtb	r0, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	333a      	adds	r3, #58	; 0x3a
 800283c:	4602      	mov	r2, r0
 800283e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002844:	2b00      	cmp	r3, #0
 8002846:	da09      	bge.n	800285c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	333b      	adds	r3, #59	; 0x3b
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e008      	b.n	800286e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	333b      	adds	r3, #59	; 0x3b
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	333c      	adds	r3, #60	; 0x3c
 800287c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002880:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	787c      	ldrb	r4, [r7, #1]
 8002888:	78ba      	ldrb	r2, [r7, #2]
 800288a:	78f9      	ldrb	r1, [r7, #3]
 800288c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800288e:	9302      	str	r3, [sp, #8]
 8002890:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4623      	mov	r3, r4
 800289e:	f003 fafb 	bl	8005e98 <USB_HC_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}

080028b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_HCD_HC_Halt+0x1e>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e00f      	b.n	80028f6 <HAL_HCD_HC_Halt+0x3e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fd4b 	bl	8006382 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	70fb      	strb	r3, [r7, #3]
 8002912:	460b      	mov	r3, r1
 8002914:	70bb      	strb	r3, [r7, #2]
 8002916:	4613      	mov	r3, r2
 8002918:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	333b      	adds	r3, #59	; 0x3b
 8002928:	78ba      	ldrb	r2, [r7, #2]
 800292a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	333f      	adds	r3, #63	; 0x3f
 800293a:	787a      	ldrb	r2, [r7, #1]
 800293c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800293e:	7c3b      	ldrb	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d112      	bne.n	800296a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3342      	adds	r3, #66	; 0x42
 8002952:	2203      	movs	r2, #3
 8002954:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	333d      	adds	r3, #61	; 0x3d
 8002964:	7f3a      	ldrb	r2, [r7, #28]
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e008      	b.n	800297c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3342      	adds	r3, #66	; 0x42
 8002978:	2202      	movs	r2, #2
 800297a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b03      	cmp	r3, #3
 8002980:	f200 80c6 	bhi.w	8002b10 <HAL_HCD_HC_SubmitRequest+0x210>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	08002afd 	.word	0x08002afd
 8002994:	08002a01 	.word	0x08002a01
 8002998:	08002a7f 	.word	0x08002a7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800299c:	7c3b      	ldrb	r3, [r7, #16]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	f040 80b8 	bne.w	8002b14 <HAL_HCD_HC_SubmitRequest+0x214>
 80029a4:	78bb      	ldrb	r3, [r7, #2]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 80b4 	bne.w	8002b14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80029ac:	8b3b      	ldrh	r3, [r7, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d108      	bne.n	80029c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3355      	adds	r3, #85	; 0x55
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3355      	adds	r3, #85	; 0x55
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3342      	adds	r3, #66	; 0x42
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029ea:	e093      	b.n	8002b14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3342      	adds	r3, #66	; 0x42
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
      break;
 80029fe:	e089      	b.n	8002b14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a00:	78bb      	ldrb	r3, [r7, #2]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11d      	bne.n	8002a42 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3355      	adds	r3, #85	; 0x55
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3342      	adds	r3, #66	; 0x42
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a2c:	e073      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3342      	adds	r3, #66	; 0x42
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
      break;
 8002a40:	e069      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3354      	adds	r3, #84	; 0x54
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3342      	adds	r3, #66	; 0x42
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
      break;
 8002a68:	e055      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3342      	adds	r3, #66	; 0x42
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
      break;
 8002a7c:	e04b      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a7e:	78bb      	ldrb	r3, [r7, #2]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11d      	bne.n	8002ac0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3355      	adds	r3, #85	; 0x55
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3342      	adds	r3, #66	; 0x42
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002aaa:	e034      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3342      	adds	r3, #66	; 0x42
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
      break;
 8002abe:	e02a      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3354      	adds	r3, #84	; 0x54
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3342      	adds	r3, #66	; 0x42
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
      break;
 8002ae6:	e016      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3342      	adds	r3, #66	; 0x42
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
      break;
 8002afa:	e00c      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3342      	adds	r3, #66	; 0x42
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002b14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3344      	adds	r3, #68	; 0x44
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	8b3a      	ldrh	r2, [r7, #24]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	202c      	movs	r0, #44	; 0x2c
 8002b30:	fb00 f303 	mul.w	r3, r0, r3
 8002b34:	440b      	add	r3, r1
 8002b36:	334c      	adds	r3, #76	; 0x4c
 8002b38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3339      	adds	r3, #57	; 0x39
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	222c      	movs	r2, #44	; 0x2c
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	3338      	adds	r3, #56	; 0x38
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	18d1      	adds	r1, r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f003 fa9e 	bl	80060dc <USB_HC_StartXfer>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop

08002bac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 ff9f 	bl	8005b06 <USB_GetMode>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	f040 80f6 	bne.w	8002dbc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 ff83 	bl	8005ae0 <USB_ReadInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80ec 	beq.w	8002dba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 ff7a 	bl	8005ae0 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf6:	d104      	bne.n	8002c02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 ff6a 	bl	8005ae0 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c16:	d104      	bne.n	8002c22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 ff5a 	bl	8005ae0 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c36:	d104      	bne.n	8002c42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 ff4a 	bl	8005ae0 <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d103      	bne.n	8002c5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 ff3c 	bl	8005ae0 <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c72:	d11c      	bne.n	8002cae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c8e:	2110      	movs	r1, #16
 8002c90:	6938      	ldr	r0, [r7, #16]
 8002c92:	f002 fe2b 	bl	80058ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c96:	6938      	ldr	r0, [r7, #16]
 8002c98:	f002 fe5c 	bl	8005954 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 f832 	bl	8005d0c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f005 fe01 	bl	80088b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 ff14 	bl	8005ae0 <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc2:	d102      	bne.n	8002cca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f001 f89e 	bl	8003e06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 ff06 	bl	8005ae0 <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d106      	bne.n	8002cec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f005 fdca 	bl	8008878 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2208      	movs	r2, #8
 8002cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fef5 	bl	8005ae0 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d101      	bne.n	8002d04 <HAL_HCD_IRQHandler+0x158>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_HCD_IRQHandler+0x15a>
 8002d04:	2300      	movs	r3, #0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0210 	bic.w	r2, r2, #16
 8002d18:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 ffa1 	bl	8003c62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0210 	orr.w	r2, r2, #16
 8002d2e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 fed3 	bl	8005ae0 <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d44:	d13a      	bne.n	8002dbc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fb08 	bl	8006360 <USB_HC_ReadInterrupt>
 8002d50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e025      	b.n	8002da4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d82:	d106      	bne.n	8002d92 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8ab 	bl	8002ee6 <HCD_HC_IN_IRQHandler>
 8002d90:	e005      	b.n	8002d9e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fbf9 	bl	8003590 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d3d4      	bcc.n	8002d58 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db6:	615a      	str	r2, [r3, #20]
 8002db8:	e000      	b.n	8002dbc <HAL_HCD_IRQHandler+0x210>
      return;
 8002dba:	bf00      	nop
    }
  }
}
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_HCD_Start+0x16>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e013      	b.n	8002e00 <HAL_HCD_Start+0x3e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fff4 	bl	8005dd4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fd0d 	bl	8005810 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_HCD_Stop+0x16>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e00d      	b.n	8002e3a <HAL_HCD_Stop+0x32>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fbe2 	bl	80065f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 ff96 	bl	8005d80 <USB_ResetPort>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3360      	adds	r3, #96	; 0x60
 8002e78:	781b      	ldrb	r3, [r3, #0]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3350      	adds	r3, #80	; 0x50
 8002ea0:	681b      	ldr	r3, [r3, #0]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 ffda 	bl	8005e74 <USB_GetCurrentFrame>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 ffb5 	bl	8005e46 <USB_GetHostSpeed>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d11a      	bne.n	8002f4c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	2304      	movs	r3, #4
 8002f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3361      	adds	r3, #97	; 0x61
 8002f36:	2206      	movs	r2, #6
 8002f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fa1c 	bl	8006382 <USB_HC_Halt>
 8002f4a:	e0af      	b.n	80030ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f62:	d11b      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3361      	adds	r3, #97	; 0x61
 8002f86:	2207      	movs	r2, #7
 8002f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 f9f4 	bl	8006382 <USB_HC_Halt>
 8002f9a:	e087      	b.n	80030ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d109      	bne.n	8002fc6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	6093      	str	r3, [r2, #8]
 8002fc4:	e072      	b.n	80030ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d11a      	bne.n	8003012 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2308      	movs	r3, #8
 8002fec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3361      	adds	r3, #97	; 0x61
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f003 f9b9 	bl	8006382 <USB_HC_Halt>
 8003010:	e04c      	b.n	80030ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003028:	d11b      	bne.n	8003062 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	461a      	mov	r2, r3
 8003038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3361      	adds	r3, #97	; 0x61
 800304c:	2208      	movs	r2, #8
 800304e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f003 f991 	bl	8006382 <USB_HC_Halt>
 8003060:	e024      	b.n	80030ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d119      	bne.n	80030ac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3361      	adds	r3, #97	; 0x61
 8003098:	2206      	movs	r2, #6
 800309a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 f96b 	bl	8006382 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c2:	d112      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 f957 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80030e8:	e24e      	b.n	8003588 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80df 	bne.w	80032c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d019      	beq.n	800313e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3348      	adds	r3, #72	; 0x48
 8003118:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0159      	lsls	r1, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	440b      	add	r3, r1
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800312c:	1ad2      	subs	r2, r2, r3
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	202c      	movs	r0, #44	; 0x2c
 8003134:	fb00 f303 	mul.w	r3, r0, r3
 8003138:	440b      	add	r3, r1
 800313a:	3350      	adds	r3, #80	; 0x50
 800313c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3361      	adds	r3, #97	; 0x61
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	335c      	adds	r3, #92	; 0x5c
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	2301      	movs	r3, #1
 8003172:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	333f      	adds	r3, #63	; 0x3f
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	333f      	adds	r3, #63	; 0x3f
 8003196:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003198:	2b02      	cmp	r3, #2
 800319a:	d111      	bne.n	80031c0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 f8eb 	bl	8006382 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	2310      	movs	r3, #16
 80031bc:	6093      	str	r3, [r2, #8]
 80031be:	e03a      	b.n	8003236 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	333f      	adds	r3, #63	; 0x3f
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d009      	beq.n	80031e8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	333f      	adds	r3, #63	; 0x3f
 80031e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d126      	bne.n	8003236 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	0151      	lsls	r1, r2, #5
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	440a      	add	r2, r1
 80031fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003202:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003206:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3360      	adds	r3, #96	; 0x60
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	b2d9      	uxtb	r1, r3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	202c      	movs	r0, #44	; 0x2c
 8003224:	fb00 f303 	mul.w	r3, r0, r3
 8003228:	4413      	add	r3, r2
 800322a:	3360      	adds	r3, #96	; 0x60
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f005 fb4b 	bl	80088cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d12b      	bne.n	8003296 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	3348      	adds	r3, #72	; 0x48
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	202c      	movs	r0, #44	; 0x2c
 8003254:	fb00 f202 	mul.w	r2, r0, r2
 8003258:	440a      	add	r2, r1
 800325a:	3240      	adds	r2, #64	; 0x40
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 818e 	beq.w	8003588 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3354      	adds	r3, #84	; 0x54
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2d8      	uxtb	r0, r3
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3354      	adds	r3, #84	; 0x54
 8003290:	4602      	mov	r2, r0
 8003292:	701a      	strb	r2, [r3, #0]
}
 8003294:	e178      	b.n	8003588 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3354      	adds	r3, #84	; 0x54
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2d8      	uxtb	r0, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3354      	adds	r3, #84	; 0x54
 80032ba:	4602      	mov	r2, r0
 80032bc:	701a      	strb	r2, [r3, #0]
}
 80032be:	e163      	b.n	8003588 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	f040 80f6 	bne.w	80034c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3361      	adds	r3, #97	; 0x61
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d109      	bne.n	8003300 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3360      	adds	r3, #96	; 0x60
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e0c9      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3361      	adds	r3, #97	; 0x61
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b05      	cmp	r3, #5
 8003312:	d109      	bne.n	8003328 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3360      	adds	r3, #96	; 0x60
 8003322:	2205      	movs	r2, #5
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e0b5      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3361      	adds	r3, #97	; 0x61
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d009      	beq.n	8003350 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3361      	adds	r3, #97	; 0x61
 800334a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800334c:	2b08      	cmp	r3, #8
 800334e:	d150      	bne.n	80033f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	335c      	adds	r3, #92	; 0x5c
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	202c      	movs	r0, #44	; 0x2c
 8003368:	fb00 f303 	mul.w	r3, r0, r3
 800336c:	440b      	add	r3, r1
 800336e:	335c      	adds	r3, #92	; 0x5c
 8003370:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	335c      	adds	r3, #92	; 0x5c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d912      	bls.n	80033ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	335c      	adds	r3, #92	; 0x5c
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3360      	adds	r3, #96	; 0x60
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033aa:	e073      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3360      	adds	r3, #96	; 0x60
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033f0:	e050      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3361      	adds	r3, #97	; 0x61
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d122      	bne.n	800344c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3360      	adds	r3, #96	; 0x60
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800342e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003436:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e023      	b.n	8003494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3361      	adds	r3, #97	; 0x61
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d119      	bne.n	8003494 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	335c      	adds	r3, #92	; 0x5c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	202c      	movs	r0, #44	; 0x2c
 8003478:	fb00 f303 	mul.w	r3, r0, r3
 800347c:	440b      	add	r3, r1
 800347e:	335c      	adds	r3, #92	; 0x5c
 8003480:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3360      	adds	r3, #96	; 0x60
 8003490:	2204      	movs	r2, #4
 8003492:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	461a      	mov	r2, r3
 80034a2:	2302      	movs	r3, #2
 80034a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	b2d9      	uxtb	r1, r3
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	202c      	movs	r0, #44	; 0x2c
 80034b0:	fb00 f303 	mul.w	r3, r0, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3360      	adds	r3, #96	; 0x60
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f005 fa05 	bl	80088cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034c2:	e061      	b.n	8003588 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d156      	bne.n	8003588 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	333f      	adds	r3, #63	; 0x3f
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d111      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f002 ff39 	bl	8006382 <USB_HC_Halt>
 8003510:	e031      	b.n	8003576 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	333f      	adds	r3, #63	; 0x3f
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	333f      	adds	r3, #63	; 0x3f
 8003534:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003536:	2b02      	cmp	r3, #2
 8003538:	d11d      	bne.n	8003576 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	335c      	adds	r3, #92	; 0x5c
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d110      	bne.n	8003576 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3361      	adds	r3, #97	; 0x61
 8003562:	2203      	movs	r2, #3
 8003564:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f002 ff06 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	461a      	mov	r2, r3
 8003584:	2310      	movs	r3, #16
 8003586:	6093      	str	r3, [r2, #8]
}
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11a      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	2304      	movs	r3, #4
 80035d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	212c      	movs	r1, #44	; 0x2c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	3361      	adds	r3, #97	; 0x61
 80035e0:	2206      	movs	r2, #6
 80035e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fec7 	bl	8006382 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80035f4:	e331      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b20      	cmp	r3, #32
 800360a:	d12e      	bne.n	800366a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2320      	movs	r3, #32
 800361c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	333d      	adds	r3, #61	; 0x3d
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	f040 8313 	bne.w	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	333d      	adds	r3, #61	; 0x3d
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3360      	adds	r3, #96	; 0x60
 8003654:	2202      	movs	r2, #2
 8003656:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f002 fe8d 	bl	8006382 <USB_HC_Halt>
}
 8003668:	e2f7      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d112      	bne.n	80036a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368e:	461a      	mov	r2, r3
 8003690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003694:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f002 fe6e 	bl	8006382 <USB_HC_Halt>
}
 80036a6:	e2d8      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d140      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	335c      	adds	r3, #92	; 0x5c
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d111      	bne.n	800370a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	333d      	adds	r3, #61	; 0x3d
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	2301      	movs	r3, #1
 800371a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	3361      	adds	r3, #97	; 0x61
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f002 fe22 	bl	8006382 <USB_HC_Halt>
}
 800373e:	e28c      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d12c      	bne.n	80037b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	3361      	adds	r3, #97	; 0x61
 8003764:	2204      	movs	r2, #4
 8003766:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	333d      	adds	r3, #61	; 0x3d
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	212c      	movs	r1, #44	; 0x2c
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	4413      	add	r3, r2
 8003786:	335c      	adds	r3, #92	; 0x5c
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f002 fdf3 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	461a      	mov	r2, r3
 80037aa:	2340      	movs	r3, #64	; 0x40
 80037ac:	6093      	str	r3, [r2, #8]
}
 80037ae:	e254      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11a      	bne.n	80037fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	2308      	movs	r3, #8
 80037d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3361      	adds	r3, #97	; 0x61
 80037e6:	2205      	movs	r2, #5
 80037e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f002 fdc4 	bl	8006382 <USB_HC_Halt>
}
 80037fa:	e22e      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d140      	bne.n	8003894 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	335c      	adds	r3, #92	; 0x5c
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3361      	adds	r3, #97	; 0x61
 8003832:	2203      	movs	r2, #3
 8003834:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	212c      	movs	r1, #44	; 0x2c
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	333d      	adds	r3, #61	; 0x3d
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d112      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	333c      	adds	r3, #60	; 0x3c
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d108      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	333d      	adds	r3, #61	; 0x3d
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f002 fd81 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	2310      	movs	r3, #16
 8003890:	6093      	str	r3, [r2, #8]
}
 8003892:	e1e2      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d164      	bne.n	8003974 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d111      	bne.n	80038d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3361      	adds	r3, #97	; 0x61
 80038c0:	2206      	movs	r2, #6
 80038c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 fd57 	bl	8006382 <USB_HC_Halt>
 80038d4:	e044      	b.n	8003960 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	335c      	adds	r3, #92	; 0x5c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	202c      	movs	r0, #44	; 0x2c
 80038ee:	fb00 f303 	mul.w	r3, r0, r3
 80038f2:	440b      	add	r3, r1
 80038f4:	335c      	adds	r3, #92	; 0x5c
 80038f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	335c      	adds	r3, #92	; 0x5c
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d920      	bls.n	800394e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	335c      	adds	r3, #92	; 0x5c
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	3360      	adds	r3, #96	; 0x60
 800392c:	2204      	movs	r2, #4
 800392e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	b2d9      	uxtb	r1, r3
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	202c      	movs	r0, #44	; 0x2c
 800393a:	fb00 f303 	mul.w	r3, r0, r3
 800393e:	4413      	add	r3, r2
 8003940:	3360      	adds	r3, #96	; 0x60
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f004 ffc0 	bl	80088cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800394c:	e008      	b.n	8003960 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	3360      	adds	r3, #96	; 0x60
 800395c:	2202      	movs	r2, #2
 800395e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	6093      	str	r3, [r2, #8]
}
 8003972:	e172      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398a:	d11b      	bne.n	80039c4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3361      	adds	r3, #97	; 0x61
 800399a:	2208      	movs	r2, #8
 800399c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 fcea 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	461a      	mov	r2, r3
 80039bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c0:	6093      	str	r3, [r2, #8]
}
 80039c2:	e14a      	b.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	f040 813f 	bne.w	8003c5a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3361      	adds	r3, #97	; 0x61
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d17d      	bne.n	8003aec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3360      	adds	r3, #96	; 0x60
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	333f      	adds	r3, #63	; 0x3f
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d00a      	beq.n	8003a2c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	333f      	adds	r3, #63	; 0x3f
 8003a24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	f040 8100 	bne.w	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d113      	bne.n	8003a5c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3355      	adds	r3, #85	; 0x55
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2d8      	uxtb	r0, r3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3355      	adds	r3, #85	; 0x55
 8003a58:	4602      	mov	r2, r0
 8003a5a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	f040 80e3 	bne.w	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	212c      	movs	r1, #44	; 0x2c
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	334c      	adds	r3, #76	; 0x4c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80d8 	beq.w	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	334c      	adds	r3, #76	; 0x4c
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	202c      	movs	r0, #44	; 0x2c
 8003a92:	fb00 f202 	mul.w	r2, r0, r2
 8003a96:	440a      	add	r2, r1
 8003a98:	3240      	adds	r2, #64	; 0x40
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	202c      	movs	r0, #44	; 0x2c
 8003aa6:	fb00 f202 	mul.w	r2, r0, r2
 8003aaa:	440a      	add	r2, r1
 8003aac:	3240      	adds	r2, #64	; 0x40
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80b5 	beq.w	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3355      	adds	r3, #85	; 0x55
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	f083 0301 	eor.w	r3, r3, #1
 8003ad6:	b2d8      	uxtb	r0, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3355      	adds	r3, #85	; 0x55
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e09f      	b.n	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	3361      	adds	r3, #97	; 0x61
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d109      	bne.n	8003b14 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3360      	adds	r3, #96	; 0x60
 8003b0e:	2202      	movs	r2, #2
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e08b      	b.n	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3361      	adds	r3, #97	; 0x61
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d109      	bne.n	8003b3c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3360      	adds	r3, #96	; 0x60
 8003b36:	2202      	movs	r2, #2
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e077      	b.n	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3361      	adds	r3, #97	; 0x61
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d109      	bne.n	8003b64 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3360      	adds	r3, #96	; 0x60
 8003b5e:	2205      	movs	r2, #5
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e063      	b.n	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3361      	adds	r3, #97	; 0x61
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d009      	beq.n	8003b8c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3361      	adds	r3, #97	; 0x61
 8003b86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d14f      	bne.n	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	335c      	adds	r3, #92	; 0x5c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	202c      	movs	r0, #44	; 0x2c
 8003ba4:	fb00 f303 	mul.w	r3, r0, r3
 8003ba8:	440b      	add	r3, r1
 8003baa:	335c      	adds	r3, #92	; 0x5c
 8003bac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	335c      	adds	r3, #92	; 0x5c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d912      	bls.n	8003be8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	3360      	adds	r3, #96	; 0x60
 8003be2:	2204      	movs	r2, #4
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e021      	b.n	8003c2c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3360      	adds	r3, #96	; 0x60
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	b2d9      	uxtb	r1, r3
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	202c      	movs	r0, #44	; 0x2c
 8003c48:	fb00 f303 	mul.w	r3, r0, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3360      	adds	r3, #96	; 0x60
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f004 fe39 	bl	80088cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c5a:	bf00      	nop
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08a      	sub	sp, #40	; 0x28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	0c5b      	lsrs	r3, r3, #17
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d004      	beq.n	8003ca8 <HCD_RXQLVL_IRQHandler+0x46>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b05      	cmp	r3, #5
 8003ca2:	f000 80a9 	beq.w	8003df8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ca6:	e0aa      	b.n	8003dfe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80a6 	beq.w	8003dfc <HCD_RXQLVL_IRQHandler+0x19a>
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3344      	adds	r3, #68	; 0x44
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 809b 	beq.w	8003dfc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3350      	adds	r3, #80	; 0x50
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	441a      	add	r2, r3
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	202c      	movs	r0, #44	; 0x2c
 8003ce0:	fb00 f303 	mul.w	r3, r0, r3
 8003ce4:	440b      	add	r3, r1
 8003ce6:	334c      	adds	r3, #76	; 0x4c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d87a      	bhi.n	8003de4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3344      	adds	r3, #68	; 0x44
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	b292      	uxth	r2, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	f001 fe92 	bl	8005a30 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3344      	adds	r3, #68	; 0x44
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	441a      	add	r2, r3
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	202c      	movs	r0, #44	; 0x2c
 8003d26:	fb00 f303 	mul.w	r3, r0, r3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3344      	adds	r3, #68	; 0x44
 8003d2e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	212c      	movs	r1, #44	; 0x2c
 8003d36:	fb01 f303 	mul.w	r3, r1, r3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3350      	adds	r3, #80	; 0x50
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	441a      	add	r2, r3
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	202c      	movs	r0, #44	; 0x2c
 8003d4a:	fb00 f303 	mul.w	r3, r0, r3
 8003d4e:	440b      	add	r3, r1
 8003d50:	3350      	adds	r3, #80	; 0x50
 8003d52:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	0cdb      	lsrs	r3, r3, #19
 8003d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3340      	adds	r3, #64	; 0x40
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d13c      	bne.n	8003dfc <HCD_RXQLVL_IRQHandler+0x19a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d039      	beq.n	8003dfc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003da6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3354      	adds	r3, #84	; 0x54
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2d8      	uxtb	r0, r3
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	3354      	adds	r3, #84	; 0x54
 8003dde:	4602      	mov	r2, r0
 8003de0:	701a      	strb	r2, [r3, #0]
      break;
 8003de2:	e00b      	b.n	8003dfc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	3360      	adds	r3, #96	; 0x60
 8003df2:	2204      	movs	r2, #4
 8003df4:	701a      	strb	r2, [r3, #0]
      break;
 8003df6:	e001      	b.n	8003dfc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003dfc:	bf00      	nop
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d10b      	bne.n	8003e56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d102      	bne.n	8003e4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f004 fd23 	bl	8008894 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d132      	bne.n	8003ec6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f043 0308 	orr.w	r3, r3, #8
 8003e66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d126      	bne.n	8003ec0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d113      	bne.n	8003ea2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e84:	d106      	bne.n	8003e94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 ff3d 	bl	8005d0c <USB_InitFSLSPClkSel>
 8003e92:	e011      	b.n	8003eb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 ff36 	bl	8005d0c <USB_InitFSLSPClkSel>
 8003ea0:	e00a      	b.n	8003eb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d106      	bne.n	8003eb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003eb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f004 fd15 	bl	80088e8 <HAL_HCD_PortEnabled_Callback>
 8003ebe:	e002      	b.n	8003ec6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f004 fd1f 	bl	8008904 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d103      	bne.n	8003ed8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f043 0320 	orr.w	r3, r3, #32
 8003ed6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e12b      	b.n	8004156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc ff44 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f50:	f001 fa20 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8003f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a81      	ldr	r2, [pc, #516]	; (8004160 <HAL_I2C_Init+0x274>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d807      	bhi.n	8003f70 <HAL_I2C_Init+0x84>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_I2C_Init+0x278>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	bf94      	ite	ls
 8003f68:	2301      	movls	r3, #1
 8003f6a:	2300      	movhi	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e006      	b.n	8003f7e <HAL_I2C_Init+0x92>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a7d      	ldr	r2, [pc, #500]	; (8004168 <HAL_I2C_Init+0x27c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bf94      	ite	ls
 8003f78:	2301      	movls	r3, #1
 8003f7a:	2300      	movhi	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0e7      	b.n	8004156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a78      	ldr	r2, [pc, #480]	; (800416c <HAL_I2C_Init+0x280>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	0c9b      	lsrs	r3, r3, #18
 8003f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a6a      	ldr	r2, [pc, #424]	; (8004160 <HAL_I2C_Init+0x274>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d802      	bhi.n	8003fc0 <HAL_I2C_Init+0xd4>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	e009      	b.n	8003fd4 <HAL_I2C_Init+0xe8>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	4a69      	ldr	r2, [pc, #420]	; (8004170 <HAL_I2C_Init+0x284>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	495c      	ldr	r1, [pc, #368]	; (8004160 <HAL_I2C_Init+0x274>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d819      	bhi.n	8004028 <HAL_I2C_Init+0x13c>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e59      	subs	r1, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004002:	1c59      	adds	r1, r3, #1
 8004004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004008:	400b      	ands	r3, r1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_I2C_Init+0x138>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1e59      	subs	r1, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fbb1 f3f3 	udiv	r3, r1, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	e051      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 8004024:	2304      	movs	r3, #4
 8004026:	e04f      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d111      	bne.n	8004054 <HAL_I2C_Init+0x168>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	440b      	add	r3, r1
 800403e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004042:	3301      	adds	r3, #1
 8004044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e012      	b.n	800407a <HAL_I2C_Init+0x18e>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e58      	subs	r0, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	0099      	lsls	r1, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	fbb0 f3f3 	udiv	r3, r0, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Init+0x196>
 800407e:	2301      	movs	r3, #1
 8004080:	e022      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10e      	bne.n	80040a8 <HAL_I2C_Init+0x1bc>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1e58      	subs	r0, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	460b      	mov	r3, r1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	440b      	add	r3, r1
 8004098:	fbb0 f3f3 	udiv	r3, r0, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	e00f      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1e58      	subs	r0, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	0099      	lsls	r1, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	6809      	ldr	r1, [r1, #0]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69da      	ldr	r2, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6911      	ldr	r1, [r2, #16]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	4311      	orrs	r1, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	000186a0 	.word	0x000186a0
 8004164:	001e847f 	.word	0x001e847f
 8004168:	003d08ff 	.word	0x003d08ff
 800416c:	431bde83 	.word	0x431bde83
 8004170:	10624dd3 	.word	0x10624dd3

08004174 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e128      	b.n	80043d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a90      	ldr	r2, [pc, #576]	; (80043e0 <HAL_I2S_Init+0x26c>)
 800419e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fc fe45 	bl	8000e30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041bc:	f023 030f 	bic.w	r3, r3, #15
 80041c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2202      	movs	r2, #2
 80041c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d060      	beq.n	8004294 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80041da:	2310      	movs	r3, #16
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e001      	b.n	80041e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d802      	bhi.n	80041f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f001 f9c4 	bl	8005580 <HAL_RCCEx_GetPeriphCLKFreq>
 80041f8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004202:	d125      	bne.n	8004250 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	fbb2 f2f3 	udiv	r2, r2, r3
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	461a      	mov	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	3305      	adds	r3, #5
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e01f      	b.n	800426e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	fbb2 f2f3 	udiv	r2, r2, r3
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	461a      	mov	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	3305      	adds	r3, #5
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e00e      	b.n	800426e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fbb2 f2f3 	udiv	r2, r2, r3
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	461a      	mov	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	3305      	adds	r3, #5
 800426c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4a5c      	ldr	r2, [pc, #368]	; (80043e4 <HAL_I2S_Init+0x270>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	08db      	lsrs	r3, r3, #3
 8004278:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e003      	b.n	800429c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004294:	2302      	movs	r3, #2
 8004296:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d902      	bls.n	80042a8 <HAL_I2S_Init+0x134>
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2bff      	cmp	r3, #255	; 0xff
 80042a6:	d907      	bls.n	80042b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	f043 0210 	orr.w	r2, r3, #16
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e08f      	b.n	80043d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	ea42 0103 	orr.w	r1, r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042d6:	f023 030f 	bic.w	r3, r3, #15
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6851      	ldr	r1, [r2, #4]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6892      	ldr	r2, [r2, #8]
 80042e2:	4311      	orrs	r1, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68d2      	ldr	r2, [r2, #12]
 80042e8:	4311      	orrs	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6992      	ldr	r2, [r2, #24]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d161      	bne.n	80043c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a38      	ldr	r2, [pc, #224]	; (80043e8 <HAL_I2S_Init+0x274>)
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a37      	ldr	r2, [pc, #220]	; (80043ec <HAL_I2S_Init+0x278>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_I2S_Init+0x1a4>
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <HAL_I2S_Init+0x27c>)
 8004316:	e001      	b.n	800431c <HAL_I2S_Init+0x1a8>
 8004318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	4932      	ldr	r1, [pc, #200]	; (80043ec <HAL_I2S_Init+0x278>)
 8004324:	428a      	cmp	r2, r1
 8004326:	d101      	bne.n	800432c <HAL_I2S_Init+0x1b8>
 8004328:	4a31      	ldr	r2, [pc, #196]	; (80043f0 <HAL_I2S_Init+0x27c>)
 800432a:	e001      	b.n	8004330 <HAL_I2S_Init+0x1bc>
 800432c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004330:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004334:	f023 030f 	bic.w	r3, r3, #15
 8004338:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <HAL_I2S_Init+0x278>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d101      	bne.n	8004348 <HAL_I2S_Init+0x1d4>
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_I2S_Init+0x27c>)
 8004346:	e001      	b.n	800434c <HAL_I2S_Init+0x1d8>
 8004348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800434c:	2202      	movs	r2, #2
 800434e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a25      	ldr	r2, [pc, #148]	; (80043ec <HAL_I2S_Init+0x278>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_I2S_Init+0x1ea>
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_I2S_Init+0x27c>)
 800435c:	e001      	b.n	8004362 <HAL_I2S_Init+0x1ee>
 800435e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436e:	d003      	beq.n	8004378 <HAL_I2S_Init+0x204>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e001      	b.n	8004384 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004380:	2300      	movs	r3, #0
 8004382:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800438e:	4313      	orrs	r3, r2
 8004390:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004398:	4313      	orrs	r3, r2
 800439a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <HAL_I2S_Init+0x278>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_I2S_Init+0x24c>
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <HAL_I2S_Init+0x27c>)
 80043be:	e001      	b.n	80043c4 <HAL_I2S_Init+0x250>
 80043c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c4:	897a      	ldrh	r2, [r7, #10]
 80043c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	080044eb 	.word	0x080044eb
 80043e4:	cccccccd 	.word	0xcccccccd
 80043e8:	08004601 	.word	0x08004601
 80043ec:	40003800 	.word	0x40003800
 80043f0:	40003400 	.word	0x40003400

080043f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	881a      	ldrh	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c9a      	adds	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10e      	bne.n	8004484 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004474:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff ffb8 	bl	80043f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	b292      	uxth	r2, r2
 80044a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10e      	bne.n	80044e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff93 	bl	8004408 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b04      	cmp	r3, #4
 8004504:	d13a      	bne.n	800457c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d109      	bne.n	8004524 <I2S_IRQHandler+0x3a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d102      	bne.n	8004524 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ffb4 	bl	800448c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d126      	bne.n	800457c <I2S_IRQHandler+0x92>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b20      	cmp	r3, #32
 800453a:	d11f      	bne.n	800457c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800454a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f043 0202 	orr.w	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff50 	bl	800441c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d136      	bne.n	80045f6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d109      	bne.n	80045a6 <I2S_IRQHandler+0xbc>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d102      	bne.n	80045a6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff45 	bl	8004430 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d122      	bne.n	80045f6 <I2S_IRQHandler+0x10c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d11b      	bne.n	80045f6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045cc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	f043 0204 	orr.w	r2, r3, #4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff13 	bl	800441c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a92      	ldr	r2, [pc, #584]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800461a:	4b92      	ldr	r3, [pc, #584]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800461c:	e001      	b.n	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a8b      	ldr	r2, [pc, #556]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d101      	bne.n	800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004638:	4b8a      	ldr	r3, [pc, #552]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800463a:	e001      	b.n	8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800463c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464c:	d004      	beq.n	8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 8099 	bne.w	800478a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d107      	bne.n	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f925 	bl	80048bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d107      	bne.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f9c8 	bl	8004a1c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d13a      	bne.n	800470c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d035      	beq.n	800470c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a6e      	ldr	r2, [pc, #440]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80046aa:	4b6e      	ldr	r3, [pc, #440]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046ac:	e001      	b.n	80046b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80046ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4969      	ldr	r1, [pc, #420]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ba:	428b      	cmp	r3, r1
 80046bc:	d101      	bne.n	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80046be:	4b69      	ldr	r3, [pc, #420]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c0:	e001      	b.n	80046c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fe88 	bl	800441c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b08      	cmp	r3, #8
 8004714:	f040 80c3 	bne.w	800489e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80bd 	beq.w	800489e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004732:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a49      	ldr	r2, [pc, #292]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800473e:	4b49      	ldr	r3, [pc, #292]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004740:	e001      	b.n	8004746 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4944      	ldr	r1, [pc, #272]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800474e:	428b      	cmp	r3, r1
 8004750:	d101      	bne.n	8004756 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004752:	4b44      	ldr	r3, [pc, #272]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004754:	e001      	b.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800475a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800475e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f043 0204 	orr.w	r2, r3, #4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff fe4a 	bl	800441c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004788:	e089      	b.n	800489e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d107      	bne.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8be 	bl	8004920 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8fd 	bl	80049b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d12f      	bne.n	8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02a      	beq.n	8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047ee:	e001      	b.n	80047f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4919      	ldr	r1, [pc, #100]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047fc:	428b      	cmp	r3, r1
 80047fe:	d101      	bne.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004800:	4b18      	ldr	r3, [pc, #96]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004802:	e001      	b.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800480c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f043 0202 	orr.w	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fdfa 	bl	800441c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b08      	cmp	r3, #8
 8004830:	d136      	bne.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d031      	beq.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a07      	ldr	r2, [pc, #28]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004848:	e001      	b.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800484a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4902      	ldr	r1, [pc, #8]	; (8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004856:	428b      	cmp	r3, r1
 8004858:	d106      	bne.n	8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800485a:	4b02      	ldr	r3, [pc, #8]	; (8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800485c:	e006      	b.n	800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800485e:	bf00      	nop
 8004860:	40003800 	.word	0x40003800
 8004864:	40003400 	.word	0x40003400
 8004868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800486c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004870:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004880:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fdc0 	bl	800441c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800489c:	e000      	b.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800489e:	bf00      	nop
}
 80048a0:	bf00      	nop
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c99      	adds	r1, r3, #2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6251      	str	r1, [r2, #36]	; 0x24
 80048ce:	881a      	ldrh	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d113      	bne.n	8004916 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ffc9 	bl	80048a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	1c99      	adds	r1, r3, #2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6251      	str	r1, [r2, #36]	; 0x24
 8004932:	8819      	ldrh	r1, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <I2SEx_TxISR_I2SExt+0x90>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <I2SEx_TxISR_I2SExt+0x22>
 800493e:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <I2SEx_TxISR_I2SExt+0x94>)
 8004940:	e001      	b.n	8004946 <I2SEx_TxISR_I2SExt+0x26>
 8004942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004946:	460a      	mov	r2, r1
 8004948:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d121      	bne.n	80049a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <I2SEx_TxISR_I2SExt+0x90>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <I2SEx_TxISR_I2SExt+0x50>
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <I2SEx_TxISR_I2SExt+0x94>)
 800496e:	e001      	b.n	8004974 <I2SEx_TxISR_I2SExt+0x54>
 8004970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	490d      	ldr	r1, [pc, #52]	; (80049b0 <I2SEx_TxISR_I2SExt+0x90>)
 800497c:	428b      	cmp	r3, r1
 800497e:	d101      	bne.n	8004984 <I2SEx_TxISR_I2SExt+0x64>
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <I2SEx_TxISR_I2SExt+0x94>)
 8004982:	e001      	b.n	8004988 <I2SEx_TxISR_I2SExt+0x68>
 8004984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004988:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800498c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff81 	bl	80048a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40003800 	.word	0x40003800
 80049b4:	40003400 	.word	0x40003400

080049b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68d8      	ldr	r0, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	1c99      	adds	r1, r3, #2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049d0:	b282      	uxth	r2, r0
 80049d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d113      	bne.n	8004a14 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff4a 	bl	80048a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a20      	ldr	r2, [pc, #128]	; (8004aac <I2SEx_RxISR_I2SExt+0x90>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <I2SEx_RxISR_I2SExt+0x16>
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <I2SEx_RxISR_I2SExt+0x94>)
 8004a30:	e001      	b.n	8004a36 <I2SEx_RxISR_I2SExt+0x1a>
 8004a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a36:	68d8      	ldr	r0, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	1c99      	adds	r1, r3, #2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a42:	b282      	uxth	r2, r0
 8004a44:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d121      	bne.n	8004aa2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a12      	ldr	r2, [pc, #72]	; (8004aac <I2SEx_RxISR_I2SExt+0x90>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <I2SEx_RxISR_I2SExt+0x50>
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <I2SEx_RxISR_I2SExt+0x94>)
 8004a6a:	e001      	b.n	8004a70 <I2SEx_RxISR_I2SExt+0x54>
 8004a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	490d      	ldr	r1, [pc, #52]	; (8004aac <I2SEx_RxISR_I2SExt+0x90>)
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	d101      	bne.n	8004a80 <I2SEx_RxISR_I2SExt+0x64>
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <I2SEx_RxISR_I2SExt+0x94>)
 8004a7e:	e001      	b.n	8004a84 <I2SEx_RxISR_I2SExt+0x68>
 8004a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a88:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff03 	bl	80048a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40003800 	.word	0x40003800
 8004ab0:	40003400 	.word	0x40003400

08004ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e267      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d075      	beq.n	8004bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ad2:	4b88      	ldr	r3, [pc, #544]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d00c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ade:	4b85      	ldr	r3, [pc, #532]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d112      	bne.n	8004b10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aea:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	4b7e      	ldr	r3, [pc, #504]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05b      	beq.n	8004bbc <HAL_RCC_OscConfig+0x108>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d157      	bne.n	8004bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e242      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d106      	bne.n	8004b28 <HAL_RCC_OscConfig+0x74>
 8004b1a:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a75      	ldr	r2, [pc, #468]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e01d      	b.n	8004b64 <HAL_RCC_OscConfig+0xb0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x98>
 8004b32:	4b70      	ldr	r3, [pc, #448]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a6f      	ldr	r2, [pc, #444]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b6d      	ldr	r3, [pc, #436]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a6c      	ldr	r2, [pc, #432]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0xb0>
 8004b4c:	4b69      	ldr	r3, [pc, #420]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a68      	ldr	r2, [pc, #416]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a65      	ldr	r2, [pc, #404]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d013      	beq.n	8004b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fc fb56 	bl	800121c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fc fb52 	bl	800121c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e207      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0xc0>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fc fb42 	bl	800121c <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fc fb3e 	bl	800121c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e1f3      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	4b51      	ldr	r3, [pc, #324]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0xe8>
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d063      	beq.n	8004c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bca:	4b4a      	ldr	r3, [pc, #296]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd6:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d11c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be2:	4b44      	ldr	r3, [pc, #272]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bee:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_RCC_OscConfig+0x152>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d001      	beq.n	8004c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e1c7      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1a:	e03a      	b.n	8004c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c24:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <HAL_RCC_OscConfig+0x244>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fc faf7 	bl	800121c <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c32:	f7fc faf3 	bl	800121c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e1a8      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c50:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4925      	ldr	r1, [pc, #148]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	600b      	str	r3, [r1, #0]
 8004c64:	e015      	b.n	8004c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCC_OscConfig+0x244>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fc fad6 	bl	800121c <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c74:	f7fc fad2 	bl	800121c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e187      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d036      	beq.n	8004d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_RCC_OscConfig+0x248>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cac:	f7fc fab6 	bl	800121c <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7fc fab2 	bl	800121c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e167      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x200>
 8004cd2:	e01b      	b.n	8004d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_RCC_OscConfig+0x248>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cda:	f7fc fa9f 	bl	800121c <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce0:	e00e      	b.n	8004d00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce2:	f7fc fa9b 	bl	800121c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d907      	bls.n	8004d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e150      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	42470000 	.word	0x42470000
 8004cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	4b88      	ldr	r3, [pc, #544]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ea      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8097 	beq.w	8004e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1e:	4b81      	ldr	r3, [pc, #516]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10f      	bne.n	8004d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	4b7d      	ldr	r3, [pc, #500]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a7c      	ldr	r2, [pc, #496]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b7a      	ldr	r3, [pc, #488]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4a:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d118      	bne.n	8004d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d56:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a73      	ldr	r2, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d62:	f7fc fa5b 	bl	800121c <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6a:	f7fc fa57 	bl	800121c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e10c      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	4b6a      	ldr	r3, [pc, #424]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x2ea>
 8004d90:	4b64      	ldr	r3, [pc, #400]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a63      	ldr	r2, [pc, #396]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9c:	e01c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x324>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x30c>
 8004da6:	4b5f      	ldr	r3, [pc, #380]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4a5e      	ldr	r2, [pc, #376]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	6713      	str	r3, [r2, #112]	; 0x70
 8004db2:	4b5c      	ldr	r3, [pc, #368]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	4a5b      	ldr	r2, [pc, #364]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x324>
 8004dc0:	4b58      	ldr	r3, [pc, #352]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a57      	ldr	r2, [pc, #348]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	4b55      	ldr	r3, [pc, #340]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a54      	ldr	r2, [pc, #336]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	f023 0304 	bic.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fc fa1c 	bl	800121c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fc fa18 	bl	800121c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0cb      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ee      	beq.n	8004de8 <HAL_RCC_OscConfig+0x334>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0c:	f7fc fa06 	bl	800121c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fc fa02 	bl	800121c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0b5      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ee      	bne.n	8004e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	4a38      	ldr	r2, [pc, #224]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80a1 	beq.w	8004f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e52:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d05c      	beq.n	8004f18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d141      	bne.n	8004eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_RCC_OscConfig+0x478>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fc f9d6 	bl	800121c <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fc f9d2 	bl	800121c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e087      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	491b      	ldr	r1, [pc, #108]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_RCC_OscConfig+0x478>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fc f9ab 	bl	800121c <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fc f9a7 	bl	800121c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e05c      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x416>
 8004ee8:	e054      	b.n	8004f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <HAL_RCC_OscConfig+0x478>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fc f994 	bl	800121c <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fc f990 	bl	800121c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e045      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x444>
 8004f16:	e03d      	b.n	8004f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e038      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
 8004f24:	40023800 	.word	0x40023800
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f30:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x4ec>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d028      	beq.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d121      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d11a      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d111      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800

08004fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0cc      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b68      	ldr	r3, [pc, #416]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d90c      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b65      	ldr	r3, [pc, #404]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0b8      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff8:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a52      	ldr	r2, [pc, #328]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800501a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	494d      	ldr	r1, [pc, #308]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d044      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d119      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e07f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d003      	beq.n	8005062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505e:	2b03      	cmp	r3, #3
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005062:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e06f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e067      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4934      	ldr	r1, [pc, #208]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005094:	f7fc f8c2 	bl	800121c <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fc f8be 	bl	800121c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e04f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 020c 	and.w	r2, r3, #12
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1eb      	bne.n	800509c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d20c      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b22      	ldr	r3, [pc, #136]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e032      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4916      	ldr	r1, [pc, #88]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	490e      	ldr	r1, [pc, #56]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800512a:	f000 f821 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800512e:	4602      	mov	r2, r0
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	490a      	ldr	r1, [pc, #40]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	5ccb      	ldrb	r3, [r1, r3]
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x1c8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fc f822 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40023c00 	.word	0x40023c00
 8005160:	40023800 	.word	0x40023800
 8005164:	08008fbc 	.word	0x08008fbc
 8005168:	20000000 	.word	0x20000000
 800516c:	20000004 	.word	0x20000004

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005174:	b094      	sub	sp, #80	; 0x50
 8005176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	647b      	str	r3, [r7, #68]	; 0x44
 800517c:	2300      	movs	r3, #0
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	2300      	movs	r3, #0
 8005182:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005188:	4b79      	ldr	r3, [pc, #484]	; (8005370 <HAL_RCC_GetSysClockFreq+0x200>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d00d      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005194:	2b08      	cmp	r3, #8
 8005196:	f200 80e1 	bhi.w	800535c <HAL_RCC_GetSysClockFreq+0x1ec>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x34>
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x3a>
 80051a2:	e0db      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a4:	4b73      	ldr	r3, [pc, #460]	; (8005374 <HAL_RCC_GetSysClockFreq+0x204>)
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051a8:	e0db      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051aa:	4b73      	ldr	r3, [pc, #460]	; (8005378 <HAL_RCC_GetSysClockFreq+0x208>)
 80051ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ae:	e0d8      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b0:	4b6f      	ldr	r3, [pc, #444]	; (8005370 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ba:	4b6d      	ldr	r3, [pc, #436]	; (8005370 <HAL_RCC_GetSysClockFreq+0x200>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d063      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c6:	4b6a      	ldr	r3, [pc, #424]	; (8005370 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	2200      	movs	r2, #0
 80051ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80051d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30
 80051da:	2300      	movs	r3, #0
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
 80051de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	f04f 0000 	mov.w	r0, #0
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	0159      	lsls	r1, r3, #5
 80051f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f4:	0150      	lsls	r0, r2, #5
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4621      	mov	r1, r4
 80051fc:	1a51      	subs	r1, r2, r1
 80051fe:	6139      	str	r1, [r7, #16]
 8005200:	4629      	mov	r1, r5
 8005202:	eb63 0301 	sbc.w	r3, r3, r1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005214:	4659      	mov	r1, fp
 8005216:	018b      	lsls	r3, r1, #6
 8005218:	4651      	mov	r1, sl
 800521a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800521e:	4651      	mov	r1, sl
 8005220:	018a      	lsls	r2, r1, #6
 8005222:	4651      	mov	r1, sl
 8005224:	ebb2 0801 	subs.w	r8, r2, r1
 8005228:	4659      	mov	r1, fp
 800522a:	eb63 0901 	sbc.w	r9, r3, r1
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800523a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800523e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005242:	4690      	mov	r8, r2
 8005244:	4699      	mov	r9, r3
 8005246:	4623      	mov	r3, r4
 8005248:	eb18 0303 	adds.w	r3, r8, r3
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	462b      	mov	r3, r5
 8005250:	eb49 0303 	adc.w	r3, r9, r3
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005262:	4629      	mov	r1, r5
 8005264:	024b      	lsls	r3, r1, #9
 8005266:	4621      	mov	r1, r4
 8005268:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800526c:	4621      	mov	r1, r4
 800526e:	024a      	lsls	r2, r1, #9
 8005270:	4610      	mov	r0, r2
 8005272:	4619      	mov	r1, r3
 8005274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005276:	2200      	movs	r2, #0
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
 800527a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800527c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005280:	f7fa ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4613      	mov	r3, r2
 800528a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528c:	e058      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528e:	4b38      	ldr	r3, [pc, #224]	; (8005370 <HAL_RCC_GetSysClockFreq+0x200>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	099b      	lsrs	r3, r3, #6
 8005294:	2200      	movs	r2, #0
 8005296:	4618      	mov	r0, r3
 8005298:	4611      	mov	r1, r2
 800529a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	2300      	movs	r3, #0
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	f04f 0000 	mov.w	r0, #0
 80052b0:	f04f 0100 	mov.w	r1, #0
 80052b4:	0159      	lsls	r1, r3, #5
 80052b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ba:	0150      	lsls	r0, r2, #5
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4641      	mov	r1, r8
 80052c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052c6:	4649      	mov	r1, r9
 80052c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052e0:	ebb2 040a 	subs.w	r4, r2, sl
 80052e4:	eb63 050b 	sbc.w	r5, r3, fp
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	00eb      	lsls	r3, r5, #3
 80052f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f6:	00e2      	lsls	r2, r4, #3
 80052f8:	4614      	mov	r4, r2
 80052fa:	461d      	mov	r5, r3
 80052fc:	4643      	mov	r3, r8
 80052fe:	18e3      	adds	r3, r4, r3
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	464b      	mov	r3, r9
 8005304:	eb45 0303 	adc.w	r3, r5, r3
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005316:	4629      	mov	r1, r5
 8005318:	028b      	lsls	r3, r1, #10
 800531a:	4621      	mov	r1, r4
 800531c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005320:	4621      	mov	r1, r4
 8005322:	028a      	lsls	r2, r1, #10
 8005324:	4610      	mov	r0, r2
 8005326:	4619      	mov	r1, r3
 8005328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532a:	2200      	movs	r2, #0
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	61fa      	str	r2, [r7, #28]
 8005330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005334:	f7fa ff48 	bl	80001c8 <__aeabi_uldivmod>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4613      	mov	r3, r2
 800533e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCC_GetSysClockFreq+0x200>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	3301      	adds	r3, #1
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800535a:	e002      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetSysClockFreq+0x204>)
 800535e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005364:	4618      	mov	r0, r3
 8005366:	3750      	adds	r7, #80	; 0x50
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800
 8005374:	00f42400 	.word	0x00f42400
 8005378:	007a1200 	.word	0x007a1200

0800537c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005380:	4b03      	ldr	r3, [pc, #12]	; (8005390 <HAL_RCC_GetHCLKFreq+0x14>)
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000000 	.word	0x20000000

08005394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005398:	f7ff fff0 	bl	800537c <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0a9b      	lsrs	r3, r3, #10
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	08008fcc 	.word	0x08008fcc

080053bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d035      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053e4:	4b62      	ldr	r3, [pc, #392]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ea:	f7fb ff17 	bl	800121c <HAL_GetTick>
 80053ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f0:	e008      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053f2:	f7fb ff13 	bl	800121c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e0b0      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005404:	4b5b      	ldr	r3, [pc, #364]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f0      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	019a      	lsls	r2, r3, #6
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	4955      	ldr	r1, [pc, #340]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005424:	4b52      	ldr	r3, [pc, #328]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800542a:	f7fb fef7 	bl	800121c <HAL_GetTick>
 800542e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005432:	f7fb fef3 	bl	800121c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e090      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005444:	4b4b      	ldr	r3, [pc, #300]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8083 	beq.w	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	4b44      	ldr	r3, [pc, #272]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a43      	ldr	r2, [pc, #268]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
 800546e:	4b41      	ldr	r3, [pc, #260]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800547a:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005486:	f7fb fec9 	bl	800121c <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800548e:	f7fb fec5 	bl	800121c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e062      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02f      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d028      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054d4:	4b29      	ldr	r3, [pc, #164]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054da:	4b28      	ldr	r3, [pc, #160]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054e0:	4a24      	ldr	r2, [pc, #144]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054e6:	4b23      	ldr	r3, [pc, #140]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d114      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054f2:	f7fb fe93 	bl	800121c <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f8:	e00a      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fa:	f7fb fe8f 	bl	800121c <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f241 3288 	movw	r2, #5000	; 0x1388
 8005508:	4293      	cmp	r3, r2
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e02a      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005510:	4b18      	ldr	r3, [pc, #96]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0ee      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005528:	d10d      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800552a:	4b12      	ldr	r3, [pc, #72]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800553a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553e:	490d      	ldr	r1, [pc, #52]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005540:	4313      	orrs	r3, r2
 8005542:	608b      	str	r3, [r1, #8]
 8005544:	e005      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800554c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005550:	6093      	str	r3, [r2, #8]
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555e:	4905      	ldr	r1, [pc, #20]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005560:	4313      	orrs	r3, r2
 8005562:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	42470068 	.word	0x42470068
 8005574:	40023800 	.word	0x40023800
 8005578:	40007000 	.word	0x40007000
 800557c:	42470e40 	.word	0x42470e40

08005580 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d13e      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800559e:	4b23      	ldr	r3, [pc, #140]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d12f      	bne.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055b6:	617b      	str	r3, [r7, #20]
          break;
 80055b8:	e02f      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055ba:	4b1c      	ldr	r3, [pc, #112]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c6:	d108      	bne.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055c8:	4b18      	ldr	r3, [pc, #96]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d0:	4a18      	ldr	r2, [pc, #96]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	e007      	b.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80055ea:	4b10      	ldr	r3, [pc, #64]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f0:	099b      	lsrs	r3, r3, #6
 80055f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	fb02 f303 	mul.w	r3, r2, r3
 80055fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005604:	0f1b      	lsrs	r3, r3, #28
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]
          break;
 8005612:	e002      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
          break;
 8005618:	bf00      	nop
        }
      }
      break;
 800561a:	bf00      	nop
    }
  }
  return frequency;
 800561c:	697b      	ldr	r3, [r7, #20]
}
 800561e:	4618      	mov	r0, r3
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800
 8005630:	00bb8000 	.word	0x00bb8000
 8005634:	007a1200 	.word	0x007a1200
 8005638:	00f42400 	.word	0x00f42400

0800563c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e07b      	b.n	8005746 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d108      	bne.n	8005668 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565e:	d009      	beq.n	8005674 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	61da      	str	r2, [r3, #28]
 8005666:	e005      	b.n	8005674 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fc4e 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f8:	ea42 0103 	orr.w	r1, r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	f003 0104 	and.w	r1, r3, #4
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	f003 0210 	and.w	r2, r3, #16
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005734:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800574e:	b084      	sub	sp, #16
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	f107 001c 	add.w	r0, r7, #28
 800575c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2b01      	cmp	r3, #1
 8005764:	d122      	bne.n	80057ac <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800577a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800578e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d105      	bne.n	80057a0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9bf 	bl	8005b24 <USB_CoreReset>
 80057a6:	4603      	mov	r3, r0
 80057a8:	73fb      	strb	r3, [r7, #15]
 80057aa:	e01a      	b.n	80057e2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f9b3 	bl	8005b24 <USB_CoreReset>
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
 80057d4:	e005      	b.n	80057e2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d10b      	bne.n	8005800 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f043 0206 	orr.w	r2, r3, #6
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800580c:	b004      	add	sp, #16
 800580e:	4770      	bx	lr

08005810 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f043 0201 	orr.w	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d115      	bne.n	80058a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005882:	2001      	movs	r0, #1
 8005884:	f7fb fcd6 	bl	8001234 <HAL_Delay>
      ms++;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3301      	adds	r3, #1
 800588c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f939 	bl	8005b06 <USB_GetMode>
 8005894:	4603      	mov	r3, r0
 8005896:	2b01      	cmp	r3, #1
 8005898:	d01e      	beq.n	80058d8 <USB_SetCurrentMode+0x84>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b31      	cmp	r3, #49	; 0x31
 800589e:	d9f0      	bls.n	8005882 <USB_SetCurrentMode+0x2e>
 80058a0:	e01a      	b.n	80058d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d115      	bne.n	80058d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7fb fcbd 	bl	8001234 <HAL_Delay>
      ms++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f920 	bl	8005b06 <USB_GetMode>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <USB_SetCurrentMode+0x84>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b31      	cmp	r3, #49	; 0x31
 80058d0:	d9f0      	bls.n	80058b4 <USB_SetCurrentMode+0x60>
 80058d2:	e001      	b.n	80058d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e005      	b.n	80058e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b32      	cmp	r3, #50	; 0x32
 80058dc:	d101      	bne.n	80058e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3301      	adds	r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4a13      	ldr	r2, [pc, #76]	; (8005950 <USB_FlushTxFifo+0x64>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e01b      	b.n	8005944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	daf2      	bge.n	80058fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	019b      	lsls	r3, r3, #6
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <USB_FlushTxFifo+0x64>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e006      	b.n	8005944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d0f0      	beq.n	8005924 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	00030d40 	.word	0x00030d40

08005954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4a11      	ldr	r2, [pc, #68]	; (80059b0 <USB_FlushRxFifo+0x5c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e018      	b.n	80059a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	daf2      	bge.n	8005960 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2210      	movs	r2, #16
 8005982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <USB_FlushRxFifo+0x5c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e006      	b.n	80059a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d0f0      	beq.n	8005984 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	00030d40 	.word	0x00030d40

080059b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b089      	sub	sp, #36	; 0x24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	460b      	mov	r3, r1
 80059c4:	71fb      	strb	r3, [r7, #7]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d123      	bne.n	8005a22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059da:	88bb      	ldrh	r3, [r7, #4]
 80059dc:	3303      	adds	r3, #3
 80059de:	089b      	lsrs	r3, r3, #2
 80059e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	e018      	b.n	8005a1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	031a      	lsls	r2, r3, #12
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f4:	461a      	mov	r2, r3
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3301      	adds	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	3301      	adds	r3, #1
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d3e2      	bcc.n	80059e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3724      	adds	r7, #36	; 0x24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b08b      	sub	sp, #44	; 0x2c
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	089b      	lsrs	r3, r3, #2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	e014      	b.n	8005a86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	3301      	adds	r3, #1
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	3301      	adds	r3, #1
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	3301      	adds	r3, #1
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d3e6      	bcc.n	8005a5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a8e:	8bfb      	ldrh	r3, [r7, #30]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01e      	beq.n	8005ad2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f107 0310 	add.w	r3, r7, #16
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	701a      	strb	r2, [r3, #0]
      i++;
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	3301      	adds	r3, #1
 8005abe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ac6:	8bfb      	ldrh	r3, [r7, #30]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005acc:	8bfb      	ldrh	r3, [r7, #30]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1ea      	bne.n	8005aa8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	372c      	adds	r7, #44	; 0x2c
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005af8:	68fb      	ldr	r3, [r7, #12]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0301 	and.w	r3, r3, #1
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <USB_CoreReset+0x64>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e01b      	b.n	8005b7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	daf2      	bge.n	8005b30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <USB_CoreReset+0x64>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e006      	b.n	8005b7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d0f0      	beq.n	8005b5a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	00030d40 	.word	0x00030d40

08005b8c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bac:	461a      	mov	r2, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10a      	bne.n	8005bfe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf6:	f043 0304 	orr.w	r3, r3, #4
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	e014      	b.n	8005c28 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c0c:	f023 0304 	bic.w	r3, r3, #4
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e009      	b.n	8005c28 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c22:	f023 0304 	bic.w	r3, r3, #4
 8005c26:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c28:	2110      	movs	r1, #16
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff fe5e 	bl	80058ec <USB_FlushTxFifo>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fe8a 	bl	8005954 <USB_FlushRxFifo>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e015      	b.n	8005c7c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c62:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d3e5      	bcc.n	8005c50 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c90:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <USB_HostInit+0x16c>)
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <USB_HostInit+0x170>)
 8005cb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005cb4:	e009      	b.n	8005cca <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <USB_HostInit+0x174>)
 8005cc0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a0f      	ldr	r2, [pc, #60]	; (8005d04 <USB_HostInit+0x178>)
 8005cc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f043 0210 	orr.w	r2, r3, #16
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <USB_HostInit+0x17c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cf4:	b004      	add	sp, #16
 8005cf6:	4770      	bx	lr
 8005cf8:	01000200 	.word	0x01000200
 8005cfc:	00e00300 	.word	0x00e00300
 8005d00:	00600080 	.word	0x00600080
 8005d04:	004000e0 	.word	0x004000e0
 8005d08:	a3200008 	.word	0xa3200008

08005d0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d107      	bne.n	8005d5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d54:	461a      	mov	r2, r3
 8005d56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d5a:	6053      	str	r3, [r2, #4]
 8005d5c:	e009      	b.n	8005d72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d106      	bne.n	8005d72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005da0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005db0:	2064      	movs	r0, #100	; 0x64
 8005db2:	f7fb fa3f 	bl	8001234 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005dc4:	200a      	movs	r0, #10
 8005dc6:	f7fb fa35 	bl	8001234 <HAL_Delay>

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005df8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <USB_DriveVbus+0x44>
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d106      	bne.n	8005e18 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e16:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d109      	bne.n	8005e38 <USB_DriveVbus+0x64>
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e36:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b085      	sub	sp, #20
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	0c5b      	lsrs	r3, r3, #17
 8005e64:	f003 0303 	and.w	r3, r3, #3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	b29b      	uxth	r3, r3
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	70fb      	strb	r3, [r7, #3]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	70bb      	strb	r3, [r7, #2]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ecc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ece:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d87e      	bhi.n	8005fd4 <USB_HC_Init+0x13c>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <USB_HC_Init+0x44>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005f97 	.word	0x08005f97
 8005ee4:	08005eed 	.word	0x08005eed
 8005ee8:	08005f59 	.word	0x08005f59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f240 439d 	movw	r3, #1181	; 0x49d
 8005efe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da10      	bge.n	8005f2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f26:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f28:	e057      	b.n	8005fda <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d051      	beq.n	8005fda <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f54:	60d3      	str	r3, [r2, #12]
      break;
 8005f56:	e040      	b.n	8005fda <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	461a      	mov	r2, r3
 8005f66:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da34      	bge.n	8005fde <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f92:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f94:	e023      	b.n	8005fde <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f240 2325 	movw	r3, #549	; 0x225
 8005fa8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005faa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da17      	bge.n	8005fe2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fcc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fd0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fd2:	e006      	b.n	8005fe2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77fb      	strb	r3, [r7, #31]
      break;
 8005fd8:	e004      	b.n	8005fe4 <USB_HC_Init+0x14c>
      break;
 8005fda:	bf00      	nop
 8005fdc:	e002      	b.n	8005fe4 <USB_HC_Init+0x14c>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e000      	b.n	8005fe4 <USB_HC_Init+0x14c>
      break;
 8005fe2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffe:	f043 0302 	orr.w	r3, r3, #2
 8006002:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	2101      	movs	r1, #1
 8006014:	fa01 f303 	lsl.w	r3, r1, r3
 8006018:	6939      	ldr	r1, [r7, #16]
 800601a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800601e:	4313      	orrs	r3, r2
 8006020:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800602e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006032:	2b00      	cmp	r3, #0
 8006034:	da03      	bge.n	800603e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	e001      	b.n	8006042 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff feff 	bl	8005e46 <USB_GetHostSpeed>
 8006048:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800604a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800604e:	2b02      	cmp	r3, #2
 8006050:	d106      	bne.n	8006060 <USB_HC_Init+0x1c8>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d003      	beq.n	8006060 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e001      	b.n	8006064 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006064:	787b      	ldrb	r3, [r7, #1]
 8006066:	059b      	lsls	r3, r3, #22
 8006068:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800606c:	78bb      	ldrb	r3, [r7, #2]
 800606e:	02db      	lsls	r3, r3, #11
 8006070:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006074:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006076:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800607a:	049b      	lsls	r3, r3, #18
 800607c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006080:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006082:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006084:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006088:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	0159      	lsls	r1, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	440b      	add	r3, r1
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060a0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d003      	beq.n	80060b2 <USB_HC_Init+0x21a>
 80060aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d10f      	bne.n	80060d2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08c      	sub	sp, #48	; 0x30
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80060f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d02d      	beq.n	8006162 <USB_HC_StartXfer+0x86>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	791b      	ldrb	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d129      	bne.n	8006162 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d117      	bne.n	8006144 <USB_HC_StartXfer+0x68>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	79db      	ldrb	r3, [r3, #7]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <USB_HC_StartXfer+0x48>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	79db      	ldrb	r3, [r3, #7]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d10f      	bne.n	8006144 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	6a3a      	ldr	r2, [r7, #32]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <USB_HC_StartXfer+0x86>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	795b      	ldrb	r3, [r3, #5]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	4619      	mov	r1, r3
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 fa0f 	bl	800657c <USB_DoPing>
      return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e0f8      	b.n	8006354 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d018      	beq.n	800619c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	8912      	ldrh	r2, [r2, #8]
 8006172:	4413      	add	r3, r2
 8006174:	3b01      	subs	r3, #1
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	8912      	ldrh	r2, [r2, #8]
 800617a:	fbb3 f3f2 	udiv	r3, r3, r2
 800617e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006180:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006182:	8b7b      	ldrh	r3, [r7, #26]
 8006184:	429a      	cmp	r2, r3
 8006186:	d90b      	bls.n	80061a0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006188:	8b7b      	ldrh	r3, [r7, #26]
 800618a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800618c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	8912      	ldrh	r2, [r2, #8]
 8006192:	fb03 f202 	mul.w	r2, r3, r2
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	611a      	str	r2, [r3, #16]
 800619a:	e001      	b.n	80061a0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800619c:	2301      	movs	r3, #1
 800619e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	78db      	ldrb	r3, [r3, #3]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	8912      	ldrh	r2, [r2, #8]
 80061ae:	fb03 f202 	mul.w	r2, r3, r2
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	611a      	str	r2, [r3, #16]
 80061b6:	e003      	b.n	80061c0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ca:	04d9      	lsls	r1, r3, #19
 80061cc:	4b63      	ldr	r3, [pc, #396]	; (800635c <USB_HC_StartXfer+0x280>)
 80061ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	7a9b      	ldrb	r3, [r3, #10]
 80061d6:	075b      	lsls	r3, r3, #29
 80061d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	0148      	lsls	r0, r1, #5
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	4401      	add	r1, r0
 80061e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68d9      	ldr	r1, [r3, #12]
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	460a      	mov	r2, r1
 8006204:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf0c      	ite	eq
 8006216:	2301      	moveq	r3, #1
 8006218:	2300      	movne	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	440a      	add	r2, r1
 8006234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006238:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800623c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	7e7b      	ldrb	r3, [r7, #25]
 800624e:	075b      	lsls	r3, r3, #29
 8006250:	69f9      	ldr	r1, [r7, #28]
 8006252:	0148      	lsls	r0, r1, #5
 8006254:	6a39      	ldr	r1, [r7, #32]
 8006256:	4401      	add	r1, r0
 8006258:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800625c:	4313      	orrs	r3, r2
 800625e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006276:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	e003      	b.n	8006292 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006290:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006298:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	461a      	mov	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e04e      	b.n	8006354 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d149      	bne.n	8006352 <USB_HC_StartXfer+0x276>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d045      	beq.n	8006352 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	79db      	ldrb	r3, [r3, #7]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d830      	bhi.n	8006330 <USB_HC_StartXfer+0x254>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <USB_HC_StartXfer+0x1f8>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	08006309 	.word	0x08006309
 80062dc:	080062e5 	.word	0x080062e5
 80062e0:	08006309 	.word	0x08006309
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	3303      	adds	r3, #3
 80062ea:	089b      	lsrs	r3, r3, #2
 80062ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80062ee:	8afa      	ldrh	r2, [r7, #22]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d91c      	bls.n	8006334 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f043 0220 	orr.w	r2, r3, #32
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	619a      	str	r2, [r3, #24]
        }
        break;
 8006306:	e015      	b.n	8006334 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	3303      	adds	r3, #3
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006312:	8afa      	ldrh	r2, [r7, #22]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	b29b      	uxth	r3, r3
 800631e:	429a      	cmp	r2, r3
 8006320:	d90a      	bls.n	8006338 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	619a      	str	r2, [r3, #24]
        }
        break;
 800632e:	e003      	b.n	8006338 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006330:	bf00      	nop
 8006332:	e002      	b.n	800633a <USB_HC_StartXfer+0x25e>
        break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <USB_HC_StartXfer+0x25e>
        break;
 8006338:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68d9      	ldr	r1, [r3, #12]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	785a      	ldrb	r2, [r3, #1]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	b29b      	uxth	r3, r3
 8006348:	2000      	movs	r0, #0
 800634a:	9000      	str	r0, [sp, #0]
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff fb31 	bl	80059b4 <USB_WritePacket>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3728      	adds	r7, #40	; 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	1ff80000 	.word	0x1ff80000

08006360 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	b29b      	uxth	r3, r3
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006382:	b480      	push	{r7}
 8006384:	b089      	sub	sp, #36	; 0x24
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	0c9b      	lsrs	r3, r3, #18
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	0fdb      	lsrs	r3, r3, #31
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d104      	bne.n	80063dc <USB_HC_Halt+0x5a>
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e0c8      	b.n	800656e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <USB_HC_Halt+0x66>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d163      	bne.n	80064b0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006406:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	f040 80ab 	bne.w	800656c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d133      	bne.n	800648a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	440a      	add	r2, r1
 8006438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800643c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006440:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	440a      	add	r2, r1
 8006458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006460:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646e:	d81d      	bhi.n	80064ac <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006486:	d0ec      	beq.n	8006462 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006488:	e070      	b.n	800656c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064aa:	e05f      	b.n	800656c <USB_HC_Halt+0x1ea>
            break;
 80064ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ae:	e05d      	b.n	800656c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d133      	bne.n	8006548 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800651e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800652c:	d81d      	bhi.n	800656a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006544:	d0ec      	beq.n	8006520 <USB_HC_Halt+0x19e>
 8006546:	e011      	b.n	800656c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	440a      	add	r2, r1
 800655e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e000      	b.n	800656c <USB_HC_Halt+0x1ea>
          break;
 800656a:	bf00      	nop
    }
  }

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3724      	adds	r7, #36	; 0x24
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006590:	2301      	movs	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	04da      	lsls	r2, r3, #19
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <USB_DoPing+0x74>)
 800659a:	4013      	ands	r3, r2
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	461a      	mov	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	1ff80000 	.word	0x1ff80000

080065f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff f912 	bl	8005832 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800660e:	2110      	movs	r1, #16
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff f96b 	bl	80058ec <USB_FlushTxFifo>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff f997 	bl	8005954 <USB_FlushRxFifo>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	e01f      	b.n	8006676 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	4413      	add	r3, r2
 800663e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800664c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006654:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800665c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666a:	461a      	mov	r2, r3
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	3301      	adds	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b0f      	cmp	r3, #15
 800667a:	d9dc      	bls.n	8006636 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800667c:	2300      	movs	r3, #0
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e034      	b.n	80066ec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006698:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	461a      	mov	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066c8:	d80c      	bhi.n	80066e4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e0:	d0ec      	beq.n	80066bc <USB_StopHost+0xc8>
 80066e2:	e000      	b.n	80066e6 <USB_StopHost+0xf2>
        break;
 80066e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	3301      	adds	r3, #1
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	d9c7      	bls.n	8006682 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066f8:	461a      	mov	r2, r3
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006706:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff f881 	bl	8005810 <USB_EnableGlobalInt>

  return ret;
 800670e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b089      	sub	sp, #36	; 0x24
 800671c:	af04      	add	r7, sp, #16
 800671e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006720:	2301      	movs	r3, #1
 8006722:	2202      	movs	r2, #2
 8006724:	2102      	movs	r1, #2
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fc66 	bl	8006ff8 <USBH_FindInterface>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2bff      	cmp	r3, #255	; 0xff
 8006734:	d002      	beq.n	800673c <USBH_CDC_InterfaceInit+0x24>
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d901      	bls.n	8006740 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800673c:	2302      	movs	r3, #2
 800673e:	e13d      	b.n	80069bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fc3b 	bl	8006fc0 <USBH_SelectInterface>
 800674a:	4603      	mov	r3, r0
 800674c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006754:	2302      	movs	r3, #2
 8006756:	e131      	b.n	80069bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800675e:	2050      	movs	r0, #80	; 0x50
 8006760:	f002 fad2 	bl	8008d08 <malloc>
 8006764:	4603      	mov	r3, r0
 8006766:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006778:	2302      	movs	r3, #2
 800677a:	e11f      	b.n	80069bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800677c:	2250      	movs	r2, #80	; 0x50
 800677e:	2100      	movs	r1, #0
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f002 fb7d 	bl	8008e80 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	211a      	movs	r1, #26
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	4413      	add	r3, r2
 8006792:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	b25b      	sxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	da15      	bge.n	80067ca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	211a      	movs	r1, #26
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	211a      	movs	r1, #26
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	4413      	add	r3, r2
 80067c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067c4:	881a      	ldrh	r2, [r3, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 ff2e 	bl	8008632 <USBH_AllocPipe>
 80067d6:	4603      	mov	r3, r0
 80067d8:	461a      	mov	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	7819      	ldrb	r1, [r3, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	7858      	ldrb	r0, [r3, #1]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	8952      	ldrh	r2, [r2, #10]
 80067f6:	9202      	str	r2, [sp, #8]
 80067f8:	2203      	movs	r2, #3
 80067fa:	9201      	str	r2, [sp, #4]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	4623      	mov	r3, r4
 8006800:	4602      	mov	r2, r0
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fee6 	bl	80085d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2200      	movs	r2, #0
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f002 f9f5 	bl	8008c00 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006816:	2300      	movs	r3, #0
 8006818:	2200      	movs	r2, #0
 800681a:	210a      	movs	r1, #10
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fbeb 	bl	8006ff8 <USBH_FindInterface>
 8006822:	4603      	mov	r3, r0
 8006824:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2bff      	cmp	r3, #255	; 0xff
 800682a:	d002      	beq.n	8006832 <USBH_CDC_InterfaceInit+0x11a>
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d901      	bls.n	8006836 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006832:	2302      	movs	r3, #2
 8006834:	e0c2      	b.n	80069bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	211a      	movs	r1, #26
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	4413      	add	r3, r2
 8006842:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	b25b      	sxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	da16      	bge.n	800687c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	211a      	movs	r1, #26
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	4413      	add	r3, r2
 800685a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	211a      	movs	r1, #26
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	4413      	add	r3, r2
 8006870:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006874:	881a      	ldrh	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	835a      	strh	r2, [r3, #26]
 800687a:	e015      	b.n	80068a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	211a      	movs	r1, #26
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	4413      	add	r3, r2
 8006888:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	211a      	movs	r1, #26
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068a2:	881a      	ldrh	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	211a      	movs	r1, #26
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	da16      	bge.n	80068ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	211a      	movs	r1, #26
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	211a      	movs	r1, #26
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068e6:	881a      	ldrh	r2, [r3, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	835a      	strh	r2, [r3, #26]
 80068ec:	e015      	b.n	800691a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	211a      	movs	r1, #26
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	211a      	movs	r1, #26
 800690a:	fb01 f303 	mul.w	r3, r1, r3
 800690e:	4413      	add	r3, r2
 8006910:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006914:	881a      	ldrh	r2, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	7b9b      	ldrb	r3, [r3, #14]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fe86 	bl	8008632 <USBH_AllocPipe>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	7bdb      	ldrb	r3, [r3, #15]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 fe7c 	bl	8008632 <USBH_AllocPipe>
 800693a:	4603      	mov	r3, r0
 800693c:	461a      	mov	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	7b59      	ldrb	r1, [r3, #13]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	7b98      	ldrb	r0, [r3, #14]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	8b12      	ldrh	r2, [r2, #24]
 800695a:	9202      	str	r2, [sp, #8]
 800695c:	2202      	movs	r2, #2
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	4623      	mov	r3, r4
 8006964:	4602      	mov	r2, r0
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fe34 	bl	80085d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	7b19      	ldrb	r1, [r3, #12]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	7bd8      	ldrb	r0, [r3, #15]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	8b52      	ldrh	r2, [r2, #26]
 8006984:	9202      	str	r2, [sp, #8]
 8006986:	2202      	movs	r2, #2
 8006988:	9201      	str	r2, [sp, #4]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4623      	mov	r3, r4
 800698e:	4602      	mov	r2, r0
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fe1f 	bl	80085d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	7b5b      	ldrb	r3, [r3, #13]
 80069a2:	2200      	movs	r2, #0
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f002 f92a 	bl	8008c00 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	7b1b      	ldrb	r3, [r3, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f002 f923 	bl	8008c00 <USBH_LL_SetToggle>

  return USBH_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd90      	pop	{r4, r7, pc}

080069c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fe14 	bl	8008612 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fe3f 	bl	8008674 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	7b1b      	ldrb	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	7b1b      	ldrb	r3, [r3, #12]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 fe01 	bl	8008612 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	7b1b      	ldrb	r3, [r3, #12]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fe2c 	bl	8008674 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	7b5b      	ldrb	r3, [r3, #13]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00e      	beq.n	8006a48 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	7b5b      	ldrb	r3, [r3, #13]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 fdee 	bl	8008612 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	7b5b      	ldrb	r3, [r3, #13]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fe19 	bl	8008674 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f002 f95b 	bl	8008d18 <free>
    phost->pActiveClass->pData = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a68:	2200      	movs	r2, #0
 8006a6a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3340      	adds	r3, #64	; 0x40
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f8b1 	bl	8006bf6 <GetLineCoding>
 8006a94:	4603      	mov	r3, r0
 8006a96:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d877      	bhi.n	8006bc8 <USBH_CDC_Process+0x114>
 8006ad8:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <USBH_CDC_Process+0x2c>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006af5 	.word	0x08006af5
 8006ae4:	08006afb 	.word	0x08006afb
 8006ae8:	08006b2b 	.word	0x08006b2b
 8006aec:	08006b9f 	.word	0x08006b9f
 8006af0:	08006bad 	.word	0x08006bad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]
      break;
 8006af8:	e06d      	b.n	8006bd6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f897 	bl	8006c34 <SetLineCoding>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b18:	e058      	b.n	8006bcc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d055      	beq.n	8006bcc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2204      	movs	r2, #4
 8006b24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b28:	e050      	b.n	8006bcc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	3340      	adds	r3, #64	; 0x40
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f860 	bl	8006bf6 <GetLineCoding>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d126      	bne.n	8006b8e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b52:	791b      	ldrb	r3, [r3, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d13b      	bne.n	8006bd0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b62:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d133      	bne.n	8006bd0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b72:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d12b      	bne.n	8006bd0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b80:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d124      	bne.n	8006bd0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f958 	bl	8006e3c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b8c:	e020      	b.n	8006bd0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d01d      	beq.n	8006bd0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2204      	movs	r2, #4
 8006b98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b9c:	e018      	b.n	8006bd0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f867 	bl	8006c72 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f8da 	bl	8006d5e <CDC_ProcessReception>
      break;
 8006baa:	e014      	b.n	8006bd6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bac:	2100      	movs	r1, #0
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 ffef 	bl	8007b92 <USBH_ClrFeature>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006bc6:	e005      	b.n	8006bd4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006bc8:	bf00      	nop
 8006bca:	e004      	b.n	8006bd6 <USBH_CDC_Process+0x122>
      break;
 8006bcc:	bf00      	nop
 8006bce:	e002      	b.n	8006bd6 <USBH_CDC_Process+0x122>
      break;
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <USBH_CDC_Process+0x122>
      break;
 8006bd4:	bf00      	nop

  }

  return status;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	22a1      	movs	r2, #161	; 0xa1
 8006c04:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2221      	movs	r2, #33	; 0x21
 8006c0a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2207      	movs	r2, #7
 8006c1c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2207      	movs	r2, #7
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fa83 	bl	8008130 <USBH_CtlReq>
 8006c2a:	4603      	mov	r3, r0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2221      	movs	r2, #33	; 0x21
 8006c42:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2207      	movs	r2, #7
 8006c5a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2207      	movs	r2, #7
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fa64 	bl	8008130 <USBH_CtlReq>
 8006c68:	4603      	mov	r3, r0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b086      	sub	sp, #24
 8006c76:	af02      	add	r7, sp, #8
 8006c78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d002      	beq.n	8006c98 <CDC_ProcessTransmission+0x26>
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d023      	beq.n	8006cde <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c96:	e05e      	b.n	8006d56 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	8b12      	ldrh	r2, [r2, #24]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d90b      	bls.n	8006cbc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8b1a      	ldrh	r2, [r3, #24]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	7b5b      	ldrb	r3, [r3, #13]
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	9000      	str	r0, [sp, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fc4a 	bl	800854e <USBH_BulkSendData>
 8006cba:	e00b      	b.n	8006cd4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	7b5b      	ldrb	r3, [r3, #13]
 8006cca:	2001      	movs	r0, #1
 8006ccc:	9000      	str	r0, [sp, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fc3d 	bl	800854e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cdc:	e03b      	b.n	8006d56 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	7b5b      	ldrb	r3, [r3, #13]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 ff61 	bl	8008bac <USBH_LL_GetURBState>
 8006cea:	4603      	mov	r3, r0
 8006cec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d128      	bne.n	8006d46 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	8b12      	ldrh	r2, [r2, #24]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d90e      	bls.n	8006d1e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	8b12      	ldrh	r2, [r2, #24]
 8006d08:	1a9a      	subs	r2, r3, r2
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	8b12      	ldrh	r2, [r2, #24]
 8006d16:	441a      	add	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	61da      	str	r2, [r3, #28]
 8006d1c:	e002      	b.n	8006d24 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d34:	e00e      	b.n	8006d54 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f868 	bl	8006e14 <USBH_CDC_TransmitCallback>
      break;
 8006d44:	e006      	b.n	8006d54 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d46:	7afb      	ldrb	r3, [r7, #11]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d103      	bne.n	8006d54 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d54:	bf00      	nop
  }
}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d002      	beq.n	8006d84 <CDC_ProcessReception+0x26>
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d00e      	beq.n	8006da0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d82:	e043      	b.n	8006e0c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	6a19      	ldr	r1, [r3, #32]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	8b5a      	ldrh	r2, [r3, #26]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	7b1b      	ldrb	r3, [r3, #12]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fc01 	bl	8008598 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2204      	movs	r2, #4
 8006d9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d9e:	e035      	b.n	8006e0c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	7b1b      	ldrb	r3, [r3, #12]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 ff00 	bl	8008bac <USBH_LL_GetURBState>
 8006dac:	4603      	mov	r3, r0
 8006dae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006db0:	7cfb      	ldrb	r3, [r7, #19]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d129      	bne.n	8006e0a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	7b1b      	ldrb	r3, [r3, #12]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 fe63 	bl	8008a88 <USBH_LL_GetLastXferSize>
 8006dc2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d016      	beq.n	8006dfc <CDC_ProcessReception+0x9e>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	8b5b      	ldrh	r3, [r3, #26]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d910      	bls.n	8006dfc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	441a      	add	r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2203      	movs	r2, #3
 8006df6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dfa:	e006      	b.n	8006e0a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f80f 	bl	8006e28 <USBH_CDC_ReceiveCallback>
      break;
 8006e0a:	bf00      	nop
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e64:	2302      	movs	r3, #2
 8006e66:	e029      	b.n	8006ebc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	79fa      	ldrb	r2, [r7, #7]
 8006e6c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f81f 	bl	8006ec4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f001 fd33 	bl	8008920 <USBH_LL_Init>

  return USBH_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e009      	b.n	8006eea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	33e0      	adds	r3, #224	; 0xe0
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b0f      	cmp	r3, #15
 8006eee:	d9f2      	bls.n	8006ed6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e009      	b.n	8006f0a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f00:	2200      	movs	r2, #0
 8006f02:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f10:	d3f1      	bcc.n	8006ef6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2240      	movs	r2, #64	; 0x40
 8006f36:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d016      	beq.n	8006fae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10e      	bne.n	8006fa8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f90:	1c59      	adds	r1, r3, #1
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	33de      	adds	r3, #222	; 0xde
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]
 8006fa6:	e004      	b.n	8006fb2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	73fb      	strb	r3, [r7, #15]
 8006fac:	e001      	b.n	8006fb2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fae:	2302      	movs	r3, #2
 8006fb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d204      	bcs.n	8006fe6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006fe4:	e001      	b.n	8006fea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	4608      	mov	r0, r1
 8007002:	4611      	mov	r1, r2
 8007004:	461a      	mov	r2, r3
 8007006:	4603      	mov	r3, r0
 8007008:	70fb      	strb	r3, [r7, #3]
 800700a:	460b      	mov	r3, r1
 800700c:	70bb      	strb	r3, [r7, #2]
 800700e:	4613      	mov	r3, r2
 8007010:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007020:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007022:	e025      	b.n	8007070 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	221a      	movs	r2, #26
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	3308      	adds	r3, #8
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	3302      	adds	r3, #2
 8007034:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	795b      	ldrb	r3, [r3, #5]
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	429a      	cmp	r2, r3
 800703e:	d002      	beq.n	8007046 <USBH_FindInterface+0x4e>
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	2bff      	cmp	r3, #255	; 0xff
 8007044:	d111      	bne.n	800706a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800704a:	78ba      	ldrb	r2, [r7, #2]
 800704c:	429a      	cmp	r2, r3
 800704e:	d002      	beq.n	8007056 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007050:	78bb      	ldrb	r3, [r7, #2]
 8007052:	2bff      	cmp	r3, #255	; 0xff
 8007054:	d109      	bne.n	800706a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800705a:	787a      	ldrb	r2, [r7, #1]
 800705c:	429a      	cmp	r2, r3
 800705e:	d002      	beq.n	8007066 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007060:	787b      	ldrb	r3, [r7, #1]
 8007062:	2bff      	cmp	r3, #255	; 0xff
 8007064:	d101      	bne.n	800706a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	e006      	b.n	8007078 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	3301      	adds	r3, #1
 800706e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d9d6      	bls.n	8007024 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007076:	23ff      	movs	r3, #255	; 0xff
}
 8007078:	4618      	mov	r0, r3
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fc83 	bl	8008998 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007092:	2101      	movs	r1, #1
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 fd9c 	bl	8008bd2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af04      	add	r7, sp, #16
 80070aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070ac:	2302      	movs	r3, #2
 80070ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d102      	bne.n	80070c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2203      	movs	r2, #3
 80070c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b0b      	cmp	r3, #11
 80070ce:	f200 81be 	bhi.w	800744e <USBH_Process+0x3aa>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <USBH_Process+0x34>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	08007109 	.word	0x08007109
 80070dc:	0800713b 	.word	0x0800713b
 80070e0:	080071a3 	.word	0x080071a3
 80070e4:	080073e9 	.word	0x080073e9
 80070e8:	0800744f 	.word	0x0800744f
 80070ec:	08007247 	.word	0x08007247
 80070f0:	0800738f 	.word	0x0800738f
 80070f4:	0800727d 	.word	0x0800727d
 80070f8:	0800729d 	.word	0x0800729d
 80070fc:	080072bd 	.word	0x080072bd
 8007100:	08007301 	.word	0x08007301
 8007104:	080073d1 	.word	0x080073d1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 819e 	beq.w	8007452 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800711c:	20c8      	movs	r0, #200	; 0xc8
 800711e:	f001 fd9f 	bl	8008c60 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fc95 	bl	8008a52 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007138:	e18b      	b.n	8007452 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007140:	2b01      	cmp	r3, #1
 8007142:	d107      	bne.n	8007154 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007152:	e18d      	b.n	8007470 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800715a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800715e:	d914      	bls.n	800718a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007166:	3301      	adds	r3, #1
 8007168:	b2da      	uxtb	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007176:	2b03      	cmp	r3, #3
 8007178:	d903      	bls.n	8007182 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	220d      	movs	r2, #13
 800717e:	701a      	strb	r2, [r3, #0]
      break;
 8007180:	e176      	b.n	8007470 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	701a      	strb	r2, [r3, #0]
      break;
 8007188:	e172      	b.n	8007470 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007190:	f103 020a 	add.w	r2, r3, #10
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800719a:	200a      	movs	r0, #10
 800719c:	f001 fd60 	bl	8008c60 <USBH_Delay>
      break;
 80071a0:	e166      	b.n	8007470 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071b2:	2104      	movs	r1, #4
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80071b8:	2064      	movs	r0, #100	; 0x64
 80071ba:	f001 fd51 	bl	8008c60 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fc20 	bl	8008a04 <USBH_LL_GetSpeed>
 80071c4:	4603      	mov	r3, r0
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2205      	movs	r2, #5
 80071d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80071d4:	2100      	movs	r1, #0
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fa2b 	bl	8008632 <USBH_AllocPipe>
 80071dc:	4603      	mov	r3, r0
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071e4:	2180      	movs	r1, #128	; 0x80
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fa23 	bl	8008632 <USBH_AllocPipe>
 80071ec:	4603      	mov	r3, r0
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7919      	ldrb	r1, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007208:	b292      	uxth	r2, r2
 800720a:	9202      	str	r2, [sp, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	9201      	str	r2, [sp, #4]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4603      	mov	r3, r0
 8007214:	2280      	movs	r2, #128	; 0x80
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f9dc 	bl	80085d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7959      	ldrb	r1, [r3, #5]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007230:	b292      	uxth	r2, r2
 8007232:	9202      	str	r2, [sp, #8]
 8007234:	2200      	movs	r2, #0
 8007236:	9201      	str	r2, [sp, #4]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4603      	mov	r3, r0
 800723c:	2200      	movs	r2, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f9c8 	bl	80085d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007244:	e114      	b.n	8007470 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f918 	bl	800747c <USBH_HandleEnum>
 800724c:	4603      	mov	r3, r0
 800724e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 80fe 	bne.w	8007456 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007268:	2b01      	cmp	r3, #1
 800726a:	d103      	bne.n	8007274 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2208      	movs	r2, #8
 8007270:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007272:	e0f0      	b.n	8007456 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2207      	movs	r2, #7
 8007278:	701a      	strb	r2, [r3, #0]
      break;
 800727a:	e0ec      	b.n	8007456 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80e9 	beq.w	800745a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800728e:	2101      	movs	r1, #1
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2208      	movs	r2, #8
 8007298:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800729a:	e0de      	b.n	800745a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fc2c 	bl	8007b04 <USBH_SetCfg>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f040 80d5 	bne.w	800745e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2209      	movs	r2, #9
 80072b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072ba:	e0d0      	b.n	800745e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d016      	beq.n	80072f8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80072ca:	2101      	movs	r1, #1
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc3c 	bl	8007b4a <USBH_SetFeature>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	220a      	movs	r2, #10
 80072e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072e4:	e0bd      	b.n	8007462 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	f040 80b9 	bne.w	8007462 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	220a      	movs	r2, #10
 80072f4:	701a      	strb	r2, [r3, #0]
      break;
 80072f6:	e0b4      	b.n	8007462 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	220a      	movs	r2, #10
 80072fc:	701a      	strb	r2, [r3, #0]
      break;
 80072fe:	e0b0      	b.n	8007462 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80ad 	beq.w	8007466 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
 8007318:	e016      	b.n	8007348 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800731a:	7bfa      	ldrb	r2, [r7, #15]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	32de      	adds	r2, #222	; 0xde
 8007320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007324:	791a      	ldrb	r2, [r3, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800732c:	429a      	cmp	r2, r3
 800732e:	d108      	bne.n	8007342 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007330:	7bfa      	ldrb	r2, [r7, #15]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32de      	adds	r2, #222	; 0xde
 8007336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007340:	e005      	b.n	800734e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	3301      	adds	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0e5      	beq.n	800731a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d016      	beq.n	8007386 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2206      	movs	r2, #6
 800736e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007376:	2103      	movs	r1, #3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800737c:	e073      	b.n	8007466 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	220d      	movs	r2, #13
 8007382:	701a      	strb	r2, [r3, #0]
      break;
 8007384:	e06f      	b.n	8007466 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	220d      	movs	r2, #13
 800738a:	701a      	strb	r2, [r3, #0]
      break;
 800738c:	e06b      	b.n	8007466 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d017      	beq.n	80073c8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
 80073a4:	4603      	mov	r3, r0
 80073a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	220b      	movs	r2, #11
 80073b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073b6:	e058      	b.n	800746a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d154      	bne.n	800746a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	220d      	movs	r2, #13
 80073c4:	701a      	strb	r2, [r3, #0]
      break;
 80073c6:	e050      	b.n	800746a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	220d      	movs	r2, #13
 80073cc:	701a      	strb	r2, [r3, #0]
      break;
 80073ce:	e04c      	b.n	800746a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d049      	beq.n	800746e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
      }
      break;
 80073e6:	e042      	b.n	800746e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fd67 	bl	8006ec4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d009      	beq.n	8007414 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007424:	2105      	movs	r1, #5
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b01      	cmp	r3, #1
 8007434:	d107      	bne.n	8007446 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fe20 	bl	8007084 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007444:	e014      	b.n	8007470 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 faa6 	bl	8008998 <USBH_LL_Start>
      break;
 800744c:	e010      	b.n	8007470 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800744e:	bf00      	nop
 8007450:	e00e      	b.n	8007470 <USBH_Process+0x3cc>
      break;
 8007452:	bf00      	nop
 8007454:	e00c      	b.n	8007470 <USBH_Process+0x3cc>
      break;
 8007456:	bf00      	nop
 8007458:	e00a      	b.n	8007470 <USBH_Process+0x3cc>
    break;
 800745a:	bf00      	nop
 800745c:	e008      	b.n	8007470 <USBH_Process+0x3cc>
      break;
 800745e:	bf00      	nop
 8007460:	e006      	b.n	8007470 <USBH_Process+0x3cc>
      break;
 8007462:	bf00      	nop
 8007464:	e004      	b.n	8007470 <USBH_Process+0x3cc>
      break;
 8007466:	bf00      	nop
 8007468:	e002      	b.n	8007470 <USBH_Process+0x3cc>
      break;
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <USBH_Process+0x3cc>
      break;
 800746e:	bf00      	nop
  }
  return USBH_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop

0800747c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af04      	add	r7, sp, #16
 8007482:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007488:	2301      	movs	r3, #1
 800748a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b07      	cmp	r3, #7
 8007492:	f200 81c1 	bhi.w	8007818 <USBH_HandleEnum+0x39c>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <USBH_HandleEnum+0x20>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074bd 	.word	0x080074bd
 80074a0:	0800757b 	.word	0x0800757b
 80074a4:	080075e5 	.word	0x080075e5
 80074a8:	08007673 	.word	0x08007673
 80074ac:	080076dd 	.word	0x080076dd
 80074b0:	0800774d 	.word	0x0800774d
 80074b4:	08007793 	.word	0x08007793
 80074b8:	080077d9 	.word	0x080077d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074bc:	2108      	movs	r1, #8
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa50 	bl	8007964 <USBH_Get_DevDesc>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d130      	bne.n	8007530 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7919      	ldrb	r1, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074f2:	b292      	uxth	r2, r2
 80074f4:	9202      	str	r2, [sp, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	9201      	str	r2, [sp, #4]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	4603      	mov	r3, r0
 80074fe:	2280      	movs	r2, #128	; 0x80
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 f867 	bl	80085d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7959      	ldrb	r1, [r3, #5]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800751a:	b292      	uxth	r2, r2
 800751c:	9202      	str	r2, [sp, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	9201      	str	r2, [sp, #4]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	4603      	mov	r3, r0
 8007526:	2200      	movs	r2, #0
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 f853 	bl	80085d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800752e:	e175      	b.n	800781c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b03      	cmp	r3, #3
 8007534:	f040 8172 	bne.w	800781c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800753e:	3301      	adds	r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800754e:	2b03      	cmp	r3, #3
 8007550:	d903      	bls.n	800755a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	220d      	movs	r2, #13
 8007556:	701a      	strb	r2, [r3, #0]
      break;
 8007558:	e160      	b.n	800781c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f887 	bl	8008674 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f881 	bl	8008674 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
      break;
 8007578:	e150      	b.n	800781c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800757a:	2112      	movs	r1, #18
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f9f1 	bl	8007964 <USBH_Get_DevDesc>
 8007582:	4603      	mov	r3, r0
 8007584:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007592:	e145      	b.n	8007820 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b03      	cmp	r3, #3
 8007598:	f040 8142 	bne.w	8007820 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075a2:	3301      	adds	r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d903      	bls.n	80075be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	220d      	movs	r2, #13
 80075ba:	701a      	strb	r2, [r3, #0]
      break;
 80075bc:	e130      	b.n	8007820 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	795b      	ldrb	r3, [r3, #5]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f855 	bl	8008674 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f84f 	bl	8008674 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
      break;
 80075e2:	e11d      	b.n	8007820 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075e4:	2101      	movs	r1, #1
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa68 	bl	8007abc <USBH_SetAddress>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d132      	bne.n	800765c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80075f6:	2002      	movs	r0, #2
 80075f8:	f001 fb32 	bl	8008c60 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2203      	movs	r2, #3
 8007608:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7919      	ldrb	r1, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800761e:	b292      	uxth	r2, r2
 8007620:	9202      	str	r2, [sp, #8]
 8007622:	2200      	movs	r2, #0
 8007624:	9201      	str	r2, [sp, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4603      	mov	r3, r0
 800762a:	2280      	movs	r2, #128	; 0x80
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 ffd1 	bl	80085d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	7959      	ldrb	r1, [r3, #5]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007646:	b292      	uxth	r2, r2
 8007648:	9202      	str	r2, [sp, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	9201      	str	r2, [sp, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4603      	mov	r3, r0
 8007652:	2200      	movs	r2, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 ffbd 	bl	80085d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800765a:	e0e3      	b.n	8007824 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b03      	cmp	r3, #3
 8007660:	f040 80e0 	bne.w	8007824 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	220d      	movs	r2, #13
 8007668:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	705a      	strb	r2, [r3, #1]
      break;
 8007670:	e0d8      	b.n	8007824 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007672:	2109      	movs	r1, #9
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f99d 	bl	80079b4 <USBH_Get_CfgDesc>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800768a:	e0cd      	b.n	8007828 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f040 80ca 	bne.w	8007828 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800769a:	3301      	adds	r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d903      	bls.n	80076b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	220d      	movs	r2, #13
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e0b8      	b.n	8007828 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	795b      	ldrb	r3, [r3, #5]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 ffd9 	bl	8008674 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 ffd3 	bl	8008674 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
      break;
 80076da:	e0a5      	b.n	8007828 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f965 	bl	80079b4 <USBH_Get_CfgDesc>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2205      	movs	r2, #5
 80076f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076fa:	e097      	b.n	800782c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f040 8094 	bne.w	800782c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800770a:	3301      	adds	r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800771a:	2b03      	cmp	r3, #3
 800771c:	d903      	bls.n	8007726 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	220d      	movs	r2, #13
 8007722:	701a      	strb	r2, [r3, #0]
      break;
 8007724:	e082      	b.n	800782c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	795b      	ldrb	r3, [r3, #5]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 ffa1 	bl	8008674 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	791b      	ldrb	r3, [r3, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ff9b 	bl	8008674 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
      break;
 800774a:	e06f      	b.n	800782c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007752:	2b00      	cmp	r3, #0
 8007754:	d019      	beq.n	800778a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007762:	23ff      	movs	r3, #255	; 0xff
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f949 	bl	80079fc <USBH_Get_StringDesc>
 800776a:	4603      	mov	r3, r0
 800776c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d103      	bne.n	800777c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2206      	movs	r2, #6
 8007778:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800777a:	e059      	b.n	8007830 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b03      	cmp	r3, #3
 8007780:	d156      	bne.n	8007830 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2206      	movs	r2, #6
 8007786:	705a      	strb	r2, [r3, #1]
      break;
 8007788:	e052      	b.n	8007830 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2206      	movs	r2, #6
 800778e:	705a      	strb	r2, [r3, #1]
      break;
 8007790:	e04e      	b.n	8007830 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007798:	2b00      	cmp	r3, #0
 800779a:	d019      	beq.n	80077d0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077a8:	23ff      	movs	r3, #255	; 0xff
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f926 	bl	80079fc <USBH_Get_StringDesc>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2207      	movs	r2, #7
 80077be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077c0:	e038      	b.n	8007834 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d135      	bne.n	8007834 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2207      	movs	r2, #7
 80077cc:	705a      	strb	r2, [r3, #1]
      break;
 80077ce:	e031      	b.n	8007834 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2207      	movs	r2, #7
 80077d4:	705a      	strb	r2, [r3, #1]
      break;
 80077d6:	e02d      	b.n	8007834 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d017      	beq.n	8007812 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077ee:	23ff      	movs	r3, #255	; 0xff
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f903 	bl	80079fc <USBH_Get_StringDesc>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007804:	e018      	b.n	8007838 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d115      	bne.n	8007838 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
      break;
 8007810:	e012      	b.n	8007838 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]
      break;
 8007816:	e00f      	b.n	8007838 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007818:	bf00      	nop
 800781a:	e00e      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 800781c:	bf00      	nop
 800781e:	e00c      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 8007820:	bf00      	nop
 8007822:	e00a      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 8007824:	bf00      	nop
 8007826:	e008      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 8007828:	bf00      	nop
 800782a:	e006      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 800782c:	bf00      	nop
 800782e:	e004      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 8007830:	bf00      	nop
 8007832:	e002      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 8007834:	bf00      	nop
 8007836:	e000      	b.n	800783a <USBH_HandleEnum+0x3be>
      break;
 8007838:	bf00      	nop
  }
  return Status;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f804 	bl	8007886 <USBH_HandleSof>
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b0b      	cmp	r3, #11
 8007896:	d10a      	bne.n	80078ae <USBH_HandleSof+0x28>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
  }
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80078c6:	bf00      	nop
}
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80078e2:	bf00      	nop
}
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 f846 	bl	80089ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	791b      	ldrb	r3, [r3, #4]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fe93 	bl	8008674 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	795b      	ldrb	r3, [r3, #5]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fe8d 	bl	8008674 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af02      	add	r7, sp, #8
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	b29b      	uxth	r3, r3
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4613      	mov	r3, r2
 800797e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f864 	bl	8007a52 <USBH_GetDescriptor>
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f203 3026 	addw	r0, r3, #806	; 0x326
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	b292      	uxth	r2, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	f000 f919 	bl	8007bdc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	331c      	adds	r3, #28
 80079c4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80079c6:	887b      	ldrh	r3, [r7, #2]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f83d 	bl	8007a52 <USBH_GetDescriptor>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d107      	bne.n	80079f2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80079e2:	887b      	ldrh	r3, [r7, #2]
 80079e4:	461a      	mov	r2, r3
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f989 	bl	8007d00 <USBH_ParseCfgDesc>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	607a      	str	r2, [r7, #4]
 8007a06:	461a      	mov	r2, r3
 8007a08:	460b      	mov	r3, r1
 8007a0a:	72fb      	strb	r3, [r7, #11]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a18:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a20:	893b      	ldrh	r3, [r7, #8]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	460b      	mov	r3, r1
 8007a26:	2100      	movs	r1, #0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f812 	bl	8007a52 <USBH_GetDescriptor>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d107      	bne.n	8007a48 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a3e:	893a      	ldrh	r2, [r7, #8]
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fb26 	bl	8008094 <USBH_ParseStringDesc>
  }

  return status;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	607b      	str	r3, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	72fb      	strb	r3, [r7, #11]
 8007a60:	4613      	mov	r3, r2
 8007a62:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	789b      	ldrb	r3, [r3, #2]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d11c      	bne.n	8007aa6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2206      	movs	r2, #6
 8007a7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	893a      	ldrh	r2, [r7, #8]
 8007a82:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a84:	893b      	ldrh	r3, [r7, #8]
 8007a86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a8e:	d104      	bne.n	8007a9a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f240 4209 	movw	r2, #1033	; 0x409
 8007a96:	829a      	strh	r2, [r3, #20]
 8007a98:	e002      	b.n	8007aa0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8b3a      	ldrh	r2, [r7, #24]
 8007aa4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007aa6:	8b3b      	ldrh	r3, [r7, #24]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fb3f 	bl	8008130 <USBH_CtlReq>
 8007ab2:	4603      	mov	r3, r0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	789b      	ldrb	r3, [r3, #2]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10f      	bne.n	8007af0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007af0:	2200      	movs	r2, #0
 8007af2:	2100      	movs	r1, #0
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb1b 	bl	8008130 <USBH_CtlReq>
 8007afa:	4603      	mov	r3, r0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	789b      	ldrb	r3, [r3, #2]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d10e      	bne.n	8007b36 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2209      	movs	r2, #9
 8007b22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	887a      	ldrh	r2, [r7, #2]
 8007b28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b36:	2200      	movs	r2, #0
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 faf8 	bl	8008130 <USBH_CtlReq>
 8007b40:	4603      	mov	r3, r0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	789b      	ldrb	r3, [r3, #2]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d10f      	bne.n	8007b7e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2203      	movs	r2, #3
 8007b68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fad4 	bl	8008130 <USBH_CtlReq>
 8007b88:	4603      	mov	r3, r0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	789b      	ldrb	r3, [r3, #2]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d10f      	bne.n	8007bc6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2100      	movs	r1, #0
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fab0 	bl	8008130 <USBH_CtlReq>
 8007bd0:	4603      	mov	r3, r0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	785a      	ldrb	r2, [r3, #1]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3303      	adds	r3, #3
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	791a      	ldrb	r2, [r3, #4]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	795a      	ldrb	r2, [r3, #5]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	799a      	ldrb	r2, [r3, #6]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	79da      	ldrb	r2, [r3, #7]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	79db      	ldrb	r3, [r3, #7]
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	dc0f      	bgt.n	8007c5e <USBH_ParseDevDesc+0x82>
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	db14      	blt.n	8007c6c <USBH_ParseDevDesc+0x90>
 8007c42:	3b08      	subs	r3, #8
 8007c44:	4a2d      	ldr	r2, [pc, #180]	; (8007cfc <USBH_ParseDevDesc+0x120>)
 8007c46:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <USBH_ParseDevDesc+0x86>
 8007c5c:	e006      	b.n	8007c6c <USBH_ParseDevDesc+0x90>
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d104      	bne.n	8007c6c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	79da      	ldrb	r2, [r3, #7]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	71da      	strb	r2, [r3, #7]
      break;
 8007c6a:	e003      	b.n	8007c74 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2240      	movs	r2, #64	; 0x40
 8007c70:	71da      	strb	r2, [r3, #7]
      break;
 8007c72:	bf00      	nop
  }

  if (length > 8U)
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	d939      	bls.n	8007cee <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	3309      	adds	r3, #9
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	330a      	adds	r3, #10
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	330b      	adds	r3, #11
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	4313      	orrs	r3, r2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	330d      	adds	r3, #13
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	7b9a      	ldrb	r2, [r3, #14]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	7bda      	ldrb	r2, [r3, #15]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	7c1a      	ldrb	r2, [r3, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	7c5a      	ldrb	r2, [r3, #17]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	745a      	strb	r2, [r3, #17]
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	01000101 	.word	0x01000101

08007d00 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08c      	sub	sp, #48	; 0x30
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d14:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	781a      	ldrb	r2, [r3, #0]
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	785a      	ldrb	r2, [r3, #1]
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	3302      	adds	r3, #2
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3303      	adds	r3, #3
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d5c:	bf28      	it	cs
 8007d5e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	791a      	ldrb	r2, [r3, #4]
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	795a      	ldrb	r2, [r3, #5]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	799a      	ldrb	r2, [r3, #6]
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	79da      	ldrb	r2, [r3, #7]
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	7a1a      	ldrb	r2, [r3, #8]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b09      	cmp	r3, #9
 8007d96:	d002      	beq.n	8007d9e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2209      	movs	r2, #9
 8007d9c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	2b09      	cmp	r3, #9
 8007da2:	f240 809d 	bls.w	8007ee0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007da6:	2309      	movs	r3, #9
 8007da8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dae:	e081      	b.n	8007eb4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007db0:	f107 0316 	add.w	r3, r7, #22
 8007db4:	4619      	mov	r1, r3
 8007db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db8:	f000 f99f 	bl	80080fa <USBH_GetNextDesc>
 8007dbc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d176      	bne.n	8007eb4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b09      	cmp	r3, #9
 8007dcc:	d002      	beq.n	8007dd4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	2209      	movs	r2, #9
 8007dd2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd8:	221a      	movs	r2, #26
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	3308      	adds	r3, #8
 8007de0:	6a3a      	ldr	r2, [r7, #32]
 8007de2:	4413      	add	r3, r2
 8007de4:	3302      	adds	r3, #2
 8007de6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dea:	69f8      	ldr	r0, [r7, #28]
 8007dec:	f000 f87e 	bl	8007eec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dfa:	e043      	b.n	8007e84 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007dfc:	f107 0316 	add.w	r3, r7, #22
 8007e00:	4619      	mov	r1, r3
 8007e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e04:	f000 f979 	bl	80080fa <USBH_GetNextDesc>
 8007e08:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	d138      	bne.n	8007e84 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	795b      	ldrb	r3, [r3, #5]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d10f      	bne.n	8007e3a <USBH_ParseCfgDesc+0x13a>
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	799b      	ldrb	r3, [r3, #6]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d10b      	bne.n	8007e3a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	79db      	ldrb	r3, [r3, #7]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10f      	bne.n	8007e4a <USBH_ParseCfgDesc+0x14a>
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b09      	cmp	r3, #9
 8007e30:	d00b      	beq.n	8007e4a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	2209      	movs	r2, #9
 8007e36:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e38:	e007      	b.n	8007e4a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b07      	cmp	r3, #7
 8007e40:	d004      	beq.n	8007e4c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	2207      	movs	r2, #7
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	e000      	b.n	8007e4c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e4a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e54:	3201      	adds	r2, #1
 8007e56:	00d2      	lsls	r2, r2, #3
 8007e58:	211a      	movs	r1, #26
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	4413      	add	r3, r2
 8007e60:	3308      	adds	r3, #8
 8007e62:	6a3a      	ldr	r2, [r7, #32]
 8007e64:	4413      	add	r3, r2
 8007e66:	3304      	adds	r3, #4
 8007e68:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e6c:	69b9      	ldr	r1, [r7, #24]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f86b 	bl	8007f4a <USBH_ParseEPDesc>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e7e:	3301      	adds	r3, #1
 8007e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	791b      	ldrb	r3, [r3, #4]
 8007e88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d204      	bcs.n	8007e9a <USBH_ParseCfgDesc+0x19a>
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	885a      	ldrh	r2, [r3, #2]
 8007e94:	8afb      	ldrh	r3, [r7, #22]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d8b0      	bhi.n	8007dfc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	791b      	ldrb	r3, [r3, #4]
 8007e9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d201      	bcs.n	8007eaa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e01c      	b.n	8007ee4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eae:	3301      	adds	r3, #1
 8007eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d805      	bhi.n	8007ec8 <USBH_ParseCfgDesc+0x1c8>
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	885a      	ldrh	r2, [r3, #2]
 8007ec0:	8afb      	ldrh	r3, [r7, #22]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	f63f af74 	bhi.w	8007db0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	791b      	ldrb	r3, [r3, #4]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	bf28      	it	cs
 8007ed0:	2302      	movcs	r3, #2
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d201      	bcs.n	8007ee0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e001      	b.n	8007ee4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3730      	adds	r7, #48	; 0x30
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785a      	ldrb	r2, [r3, #1]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	789a      	ldrb	r2, [r3, #2]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	78da      	ldrb	r2, [r3, #3]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	791a      	ldrb	r2, [r3, #4]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	795a      	ldrb	r2, [r3, #5]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	799a      	ldrb	r2, [r3, #6]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	79da      	ldrb	r2, [r3, #7]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	7a1a      	ldrb	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	721a      	strb	r2, [r3, #8]
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b087      	sub	sp, #28
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	785a      	ldrb	r2, [r3, #1]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	789a      	ldrb	r2, [r3, #2]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	78da      	ldrb	r2, [r3, #3]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3305      	adds	r3, #5
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	799a      	ldrb	r2, [r3, #6]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	889b      	ldrh	r3, [r3, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	75fb      	strb	r3, [r7, #23]
 8007faa:	e033      	b.n	8008014 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	889b      	ldrh	r3, [r3, #4]
 8007fb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007fb4:	f023 0307 	bic.w	r3, r3, #7
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	889b      	ldrh	r3, [r3, #4]
 8007fc2:	b21a      	sxth	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b299      	uxth	r1, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3305      	adds	r3, #5
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d110      	bne.n	8008006 <USBH_ParseEPDesc+0xbc>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b299      	uxth	r1, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3305      	adds	r3, #5
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	b21b      	sxth	r3, r3
 8007ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008002:	b21b      	sxth	r3, r3
 8008004:	e001      	b.n	800800a <USBH_ParseEPDesc+0xc0>
 8008006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800800a:	4313      	orrs	r3, r2
 800800c:	b21b      	sxth	r3, r3
 800800e:	b29a      	uxth	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800801a:	2b00      	cmp	r3, #0
 800801c:	d116      	bne.n	800804c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	78db      	ldrb	r3, [r3, #3]
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	2b01      	cmp	r3, #1
 8008028:	d005      	beq.n	8008036 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	78db      	ldrb	r3, [r3, #3]
 800802e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008032:	2b03      	cmp	r3, #3
 8008034:	d127      	bne.n	8008086 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	799b      	ldrb	r3, [r3, #6]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <USBH_ParseEPDesc+0xfc>
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	799b      	ldrb	r3, [r3, #6]
 8008042:	2b10      	cmp	r3, #16
 8008044:	d91f      	bls.n	8008086 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
 800804a:	e01c      	b.n	8008086 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	78db      	ldrb	r3, [r3, #3]
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	2b01      	cmp	r3, #1
 8008056:	d10a      	bne.n	800806e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	799b      	ldrb	r3, [r3, #6]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <USBH_ParseEPDesc+0x11e>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	799b      	ldrb	r3, [r3, #6]
 8008064:	2b10      	cmp	r3, #16
 8008066:	d90e      	bls.n	8008086 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008068:	2303      	movs	r3, #3
 800806a:	75fb      	strb	r3, [r7, #23]
 800806c:	e00b      	b.n	8008086 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b03      	cmp	r3, #3
 8008078:	d105      	bne.n	8008086 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	799b      	ldrb	r3, [r3, #6]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008082:	2303      	movs	r3, #3
 8008084:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
}
 8008088:	4618      	mov	r0, r3
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d120      	bne.n	80080ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	1e9a      	subs	r2, r3, #2
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	4293      	cmp	r3, r2
 80080b6:	bf28      	it	cs
 80080b8:	4613      	movcs	r3, r2
 80080ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3302      	adds	r3, #2
 80080c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080c2:	2300      	movs	r3, #0
 80080c4:	82fb      	strh	r3, [r7, #22]
 80080c6:	e00b      	b.n	80080e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080c8:	8afb      	ldrh	r3, [r7, #22]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4413      	add	r3, r2
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	3301      	adds	r3, #1
 80080d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80080da:	8afb      	ldrh	r3, [r7, #22]
 80080dc:	3302      	adds	r3, #2
 80080de:	82fb      	strh	r3, [r7, #22]
 80080e0:	8afa      	ldrh	r2, [r7, #22]
 80080e2:	8abb      	ldrh	r3, [r7, #20]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d3ef      	bcc.n	80080c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2200      	movs	r2, #0
 80080ec:	701a      	strb	r2, [r3, #0]
  }
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	881a      	ldrh	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	4413      	add	r3, r2
 8008110:	b29a      	uxth	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4413      	add	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008122:	68fb      	ldr	r3, [r7, #12]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	789b      	ldrb	r3, [r3, #2]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d002      	beq.n	8008150 <USBH_CtlReq+0x20>
 800814a:	2b02      	cmp	r3, #2
 800814c:	d00f      	beq.n	800816e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800814e:	e027      	b.n	80081a0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2202      	movs	r2, #2
 8008166:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
      break;
 800816c:	e018      	b.n	80081a0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f81c 	bl	80081ac <USBH_HandleControl>
 8008174:	4603      	mov	r3, r0
 8008176:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <USBH_CtlReq+0x54>
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	2b03      	cmp	r3, #3
 8008182:	d106      	bne.n	8008192 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	761a      	strb	r2, [r3, #24]
      break;
 8008190:	e005      	b.n	800819e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d102      	bne.n	800819e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	709a      	strb	r2, [r3, #2]
      break;
 800819e:	bf00      	nop
  }
  return status;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7e1b      	ldrb	r3, [r3, #24]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	2b0a      	cmp	r3, #10
 80081c4:	f200 8156 	bhi.w	8008474 <USBH_HandleControl+0x2c8>
 80081c8:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBH_HandleControl+0x24>)
 80081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ce:	bf00      	nop
 80081d0:	080081fd 	.word	0x080081fd
 80081d4:	08008217 	.word	0x08008217
 80081d8:	08008281 	.word	0x08008281
 80081dc:	080082a7 	.word	0x080082a7
 80081e0:	080082df 	.word	0x080082df
 80081e4:	08008309 	.word	0x08008309
 80081e8:	0800835b 	.word	0x0800835b
 80081ec:	0800837d 	.word	0x0800837d
 80081f0:	080083b9 	.word	0x080083b9
 80081f4:	080083df 	.word	0x080083df
 80081f8:	0800841d 	.word	0x0800841d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f103 0110 	add.w	r1, r3, #16
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	795b      	ldrb	r3, [r3, #5]
 8008206:	461a      	mov	r2, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f943 	bl	8008494 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	761a      	strb	r2, [r3, #24]
      break;
 8008214:	e139      	b.n	800848a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fcc5 	bl	8008bac <USBH_LL_GetURBState>
 8008222:	4603      	mov	r3, r0
 8008224:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d11e      	bne.n	800826a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7c1b      	ldrb	r3, [r3, #16]
 8008230:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008234:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8adb      	ldrh	r3, [r3, #22]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800823e:	7b7b      	ldrb	r3, [r7, #13]
 8008240:	2b80      	cmp	r3, #128	; 0x80
 8008242:	d103      	bne.n	800824c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2203      	movs	r2, #3
 8008248:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800824a:	e115      	b.n	8008478 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2205      	movs	r2, #5
 8008250:	761a      	strb	r2, [r3, #24]
      break;
 8008252:	e111      	b.n	8008478 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008254:	7b7b      	ldrb	r3, [r7, #13]
 8008256:	2b80      	cmp	r3, #128	; 0x80
 8008258:	d103      	bne.n	8008262 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2209      	movs	r2, #9
 800825e:	761a      	strb	r2, [r3, #24]
      break;
 8008260:	e10a      	b.n	8008478 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2207      	movs	r2, #7
 8008266:	761a      	strb	r2, [r3, #24]
      break;
 8008268:	e106      	b.n	8008478 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b04      	cmp	r3, #4
 800826e:	d003      	beq.n	8008278 <USBH_HandleControl+0xcc>
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b02      	cmp	r3, #2
 8008274:	f040 8100 	bne.w	8008478 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	220b      	movs	r2, #11
 800827c:	761a      	strb	r2, [r3, #24]
      break;
 800827e:	e0fb      	b.n	8008478 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6899      	ldr	r1, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	899a      	ldrh	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	791b      	ldrb	r3, [r3, #4]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f93a 	bl	8008512 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2204      	movs	r2, #4
 80082a2:	761a      	strb	r2, [r3, #24]
      break;
 80082a4:	e0f1      	b.n	800848a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	791b      	ldrb	r3, [r3, #4]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc7d 	bl	8008bac <USBH_LL_GetURBState>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d102      	bne.n	80082c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2209      	movs	r2, #9
 80082c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b05      	cmp	r3, #5
 80082c6:	d102      	bne.n	80082ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082c8:	2303      	movs	r3, #3
 80082ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082cc:	e0d6      	b.n	800847c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	f040 80d3 	bne.w	800847c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	220b      	movs	r2, #11
 80082da:	761a      	strb	r2, [r3, #24]
      break;
 80082dc:	e0ce      	b.n	800847c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6899      	ldr	r1, [r3, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	899a      	ldrh	r2, [r3, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	795b      	ldrb	r3, [r3, #5]
 80082ea:	2001      	movs	r0, #1
 80082ec:	9000      	str	r0, [sp, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f8ea 	bl	80084c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2206      	movs	r2, #6
 8008304:	761a      	strb	r2, [r3, #24]
      break;
 8008306:	e0c0      	b.n	800848a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	795b      	ldrb	r3, [r3, #5]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fc4c 	bl	8008bac <USBH_LL_GetURBState>
 8008314:	4603      	mov	r3, r0
 8008316:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d103      	bne.n	8008326 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2207      	movs	r2, #7
 8008322:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008324:	e0ac      	b.n	8008480 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b05      	cmp	r3, #5
 800832a:	d105      	bne.n	8008338 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	220c      	movs	r2, #12
 8008330:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008332:	2303      	movs	r3, #3
 8008334:	73fb      	strb	r3, [r7, #15]
      break;
 8008336:	e0a3      	b.n	8008480 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d103      	bne.n	8008346 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2205      	movs	r2, #5
 8008342:	761a      	strb	r2, [r3, #24]
      break;
 8008344:	e09c      	b.n	8008480 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b04      	cmp	r3, #4
 800834a:	f040 8099 	bne.w	8008480 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	220b      	movs	r2, #11
 8008352:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008354:	2302      	movs	r3, #2
 8008356:	73fb      	strb	r3, [r7, #15]
      break;
 8008358:	e092      	b.n	8008480 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	791b      	ldrb	r3, [r3, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	2100      	movs	r1, #0
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f8d5 	bl	8008512 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2208      	movs	r2, #8
 8008378:	761a      	strb	r2, [r3, #24]

      break;
 800837a:	e086      	b.n	800848a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	791b      	ldrb	r3, [r3, #4]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fc12 	bl	8008bac <USBH_LL_GetURBState>
 8008388:	4603      	mov	r3, r0
 800838a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d105      	bne.n	800839e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	220d      	movs	r2, #13
 8008396:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800839c:	e072      	b.n	8008484 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d103      	bne.n	80083ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	220b      	movs	r2, #11
 80083a8:	761a      	strb	r2, [r3, #24]
      break;
 80083aa:	e06b      	b.n	8008484 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d168      	bne.n	8008484 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083b2:	2303      	movs	r3, #3
 80083b4:	73fb      	strb	r3, [r7, #15]
      break;
 80083b6:	e065      	b.n	8008484 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	795b      	ldrb	r3, [r3, #5]
 80083bc:	2201      	movs	r2, #1
 80083be:	9200      	str	r2, [sp, #0]
 80083c0:	2200      	movs	r2, #0
 80083c2:	2100      	movs	r1, #0
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f87f 	bl	80084c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	220a      	movs	r2, #10
 80083da:	761a      	strb	r2, [r3, #24]
      break;
 80083dc:	e055      	b.n	800848a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	795b      	ldrb	r3, [r3, #5]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fbe1 	bl	8008bac <USBH_LL_GetURBState>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d105      	bne.n	8008400 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	220d      	movs	r2, #13
 80083fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083fe:	e043      	b.n	8008488 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d103      	bne.n	800840e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2209      	movs	r2, #9
 800840a:	761a      	strb	r2, [r3, #24]
      break;
 800840c:	e03c      	b.n	8008488 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b04      	cmp	r3, #4
 8008412:	d139      	bne.n	8008488 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220b      	movs	r2, #11
 8008418:	761a      	strb	r2, [r3, #24]
      break;
 800841a:	e035      	b.n	8008488 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7e5b      	ldrb	r3, [r3, #25]
 8008420:	3301      	adds	r3, #1
 8008422:	b2da      	uxtb	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	765a      	strb	r2, [r3, #25]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7e5b      	ldrb	r3, [r3, #25]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d806      	bhi.n	800843e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800843c:	e025      	b.n	800848a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008444:	2106      	movs	r1, #6
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	795b      	ldrb	r3, [r3, #5]
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f90c 	bl	8008674 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	791b      	ldrb	r3, [r3, #4]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f906 	bl	8008674 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800846e:	2302      	movs	r3, #2
 8008470:	73fb      	strb	r3, [r7, #15]
      break;
 8008472:	e00a      	b.n	800848a <USBH_HandleControl+0x2de>

    default:
      break;
 8008474:	bf00      	nop
 8008476:	e008      	b.n	800848a <USBH_HandleControl+0x2de>
      break;
 8008478:	bf00      	nop
 800847a:	e006      	b.n	800848a <USBH_HandleControl+0x2de>
      break;
 800847c:	bf00      	nop
 800847e:	e004      	b.n	800848a <USBH_HandleControl+0x2de>
      break;
 8008480:	bf00      	nop
 8008482:	e002      	b.n	800848a <USBH_HandleControl+0x2de>
      break;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <USBH_HandleControl+0x2de>
      break;
 8008488:	bf00      	nop
  }

  return status;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af04      	add	r7, sp, #16
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084a2:	79f9      	ldrb	r1, [r7, #7]
 80084a4:	2300      	movs	r3, #0
 80084a6:	9303      	str	r3, [sp, #12]
 80084a8:	2308      	movs	r3, #8
 80084aa:	9302      	str	r3, [sp, #8]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	2300      	movs	r3, #0
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	2200      	movs	r2, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fb46 	bl	8008b4a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af04      	add	r7, sp, #16
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4611      	mov	r1, r2
 80084d4:	461a      	mov	r2, r3
 80084d6:	460b      	mov	r3, r1
 80084d8:	80fb      	strh	r3, [r7, #6]
 80084da:	4613      	mov	r3, r2
 80084dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084ec:	7979      	ldrb	r1, [r7, #5]
 80084ee:	7e3b      	ldrb	r3, [r7, #24]
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	88fb      	ldrh	r3, [r7, #6]
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	2301      	movs	r3, #1
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	2300      	movs	r3, #0
 8008500:	2200      	movs	r2, #0
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 fb21 	bl	8008b4a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b088      	sub	sp, #32
 8008516:	af04      	add	r7, sp, #16
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	4611      	mov	r1, r2
 800851e:	461a      	mov	r2, r3
 8008520:	460b      	mov	r3, r1
 8008522:	80fb      	strh	r3, [r7, #6]
 8008524:	4613      	mov	r3, r2
 8008526:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008528:	7979      	ldrb	r1, [r7, #5]
 800852a:	2300      	movs	r3, #0
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	9302      	str	r3, [sp, #8]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	2301      	movs	r3, #1
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	2300      	movs	r3, #0
 800853c:	2201      	movs	r2, #1
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fb03 	bl	8008b4a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008544:	2300      	movs	r3, #0

}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b088      	sub	sp, #32
 8008552:	af04      	add	r7, sp, #16
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	4611      	mov	r1, r2
 800855a:	461a      	mov	r2, r3
 800855c:	460b      	mov	r3, r1
 800855e:	80fb      	strh	r3, [r7, #6]
 8008560:	4613      	mov	r3, r2
 8008562:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008572:	7979      	ldrb	r1, [r7, #5]
 8008574:	7e3b      	ldrb	r3, [r7, #24]
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	2301      	movs	r3, #1
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	2302      	movs	r3, #2
 8008586:	2200      	movs	r2, #0
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fade 	bl	8008b4a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af04      	add	r7, sp, #16
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4611      	mov	r1, r2
 80085a4:	461a      	mov	r2, r3
 80085a6:	460b      	mov	r3, r1
 80085a8:	80fb      	strh	r3, [r7, #6]
 80085aa:	4613      	mov	r3, r2
 80085ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085ae:	7979      	ldrb	r1, [r7, #5]
 80085b0:	2300      	movs	r3, #0
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	9302      	str	r3, [sp, #8]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	2301      	movs	r3, #1
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	2302      	movs	r3, #2
 80085c2:	2201      	movs	r2, #1
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 fac0 	bl	8008b4a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af04      	add	r7, sp, #16
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	4608      	mov	r0, r1
 80085de:	4611      	mov	r1, r2
 80085e0:	461a      	mov	r2, r3
 80085e2:	4603      	mov	r3, r0
 80085e4:	70fb      	strb	r3, [r7, #3]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70bb      	strb	r3, [r7, #2]
 80085ea:	4613      	mov	r3, r2
 80085ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80085ee:	7878      	ldrb	r0, [r7, #1]
 80085f0:	78ba      	ldrb	r2, [r7, #2]
 80085f2:	78f9      	ldrb	r1, [r7, #3]
 80085f4:	8b3b      	ldrh	r3, [r7, #24]
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	7d3b      	ldrb	r3, [r7, #20]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	7c3b      	ldrb	r3, [r7, #16]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	4603      	mov	r3, r0
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa53 	bl	8008aae <USBH_LL_OpenPipe>

  return USBH_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	460b      	mov	r3, r1
 800861c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa72 	bl	8008b0c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f836 	bl	80086b0 <USBH_GetFreePipe>
 8008644:	4603      	mov	r3, r0
 8008646:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008648:	89fb      	ldrh	r3, [r7, #14]
 800864a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800864e:	4293      	cmp	r3, r2
 8008650:	d00a      	beq.n	8008668 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	89fb      	ldrh	r3, [r7, #14]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	33e0      	adds	r3, #224	; 0xe0
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008668:	89fb      	ldrh	r3, [r7, #14]
 800866a:	b2db      	uxtb	r3, r3
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	2b0f      	cmp	r3, #15
 8008684:	d80d      	bhi.n	80086a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	33e0      	adds	r3, #224	; 0xe0
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	33e0      	adds	r3, #224	; 0xe0
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e00f      	b.n	80086e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	33e0      	adds	r3, #224	; 0xe0
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	e007      	b.n	80086ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	3301      	adds	r3, #1
 80086e0:	73fb      	strb	r3, [r7, #15]
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b0f      	cmp	r3, #15
 80086e6:	d9ec      	bls.n	80086c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80086e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80086fc:	2201      	movs	r2, #1
 80086fe:	490e      	ldr	r1, [pc, #56]	; (8008738 <MX_USB_HOST_Init+0x40>)
 8008700:	480e      	ldr	r0, [pc, #56]	; (800873c <MX_USB_HOST_Init+0x44>)
 8008702:	f7fe fba5 	bl	8006e50 <USBH_Init>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800870c:	f7f8 fa2c 	bl	8000b68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008710:	490b      	ldr	r1, [pc, #44]	; (8008740 <MX_USB_HOST_Init+0x48>)
 8008712:	480a      	ldr	r0, [pc, #40]	; (800873c <MX_USB_HOST_Init+0x44>)
 8008714:	f7fe fc2a 	bl	8006f6c <USBH_RegisterClass>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800871e:	f7f8 fa23 	bl	8000b68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008722:	4806      	ldr	r0, [pc, #24]	; (800873c <MX_USB_HOST_Init+0x44>)
 8008724:	f7fe fcae 	bl	8007084 <USBH_Start>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800872e:	f7f8 fa1b 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008732:	bf00      	nop
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	08008759 	.word	0x08008759
 800873c:	200002f4 	.word	0x200002f4
 8008740:	2000000c 	.word	0x2000000c

08008744 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008748:	4802      	ldr	r0, [pc, #8]	; (8008754 <MX_USB_HOST_Process+0x10>)
 800874a:	f7fe fcab 	bl	80070a4 <USBH_Process>
}
 800874e:	bf00      	nop
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	200002f4 	.word	0x200002f4

08008758 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	3b01      	subs	r3, #1
 8008768:	2b04      	cmp	r3, #4
 800876a:	d819      	bhi.n	80087a0 <USBH_UserProcess+0x48>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <USBH_UserProcess+0x1c>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	080087a1 	.word	0x080087a1
 8008778:	08008791 	.word	0x08008791
 800877c:	080087a1 	.word	0x080087a1
 8008780:	08008799 	.word	0x08008799
 8008784:	08008789 	.word	0x08008789
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008788:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <USBH_UserProcess+0x58>)
 800878a:	2203      	movs	r2, #3
 800878c:	701a      	strb	r2, [r3, #0]
  break;
 800878e:	e008      	b.n	80087a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <USBH_UserProcess+0x58>)
 8008792:	2202      	movs	r2, #2
 8008794:	701a      	strb	r2, [r3, #0]
  break;
 8008796:	e004      	b.n	80087a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <USBH_UserProcess+0x58>)
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
  break;
 800879e:	e000      	b.n	80087a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80087a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200006cc 	.word	0x200006cc

080087b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087bc:	f107 0314 	add.w	r3, r7, #20
 80087c0:	2200      	movs	r2, #0
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	605a      	str	r2, [r3, #4]
 80087c6:	609a      	str	r2, [r3, #8]
 80087c8:	60da      	str	r2, [r3, #12]
 80087ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087d4:	d147      	bne.n	8008866 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087d6:	2300      	movs	r3, #0
 80087d8:	613b      	str	r3, [r7, #16]
 80087da:	4b25      	ldr	r3, [pc, #148]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	4a24      	ldr	r2, [pc, #144]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 80087e0:	f043 0301 	orr.w	r3, r3, #1
 80087e4:	6313      	str	r3, [r2, #48]	; 0x30
 80087e6:	4b22      	ldr	r3, [pc, #136]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80087f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087f8:	2300      	movs	r3, #0
 80087fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008800:	f107 0314 	add.w	r3, r7, #20
 8008804:	4619      	mov	r1, r3
 8008806:	481b      	ldr	r0, [pc, #108]	; (8008874 <HAL_HCD_MspInit+0xc0>)
 8008808:	f7f9 fdb0 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800880c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008812:	2302      	movs	r3, #2
 8008814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800881a:	2300      	movs	r3, #0
 800881c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800881e:	230a      	movs	r3, #10
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008822:	f107 0314 	add.w	r3, r7, #20
 8008826:	4619      	mov	r1, r3
 8008828:	4812      	ldr	r0, [pc, #72]	; (8008874 <HAL_HCD_MspInit+0xc0>)
 800882a:	f7f9 fd9f 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800882e:	4b10      	ldr	r3, [pc, #64]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 8008834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008838:	6353      	str	r3, [r2, #52]	; 0x34
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 8008840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008842:	4a0b      	ldr	r2, [pc, #44]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 8008844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008848:	6453      	str	r3, [r2, #68]	; 0x44
 800884a:	4b09      	ldr	r3, [pc, #36]	; (8008870 <HAL_HCD_MspInit+0xbc>)
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	2043      	movs	r0, #67	; 0x43
 800885c:	f7f9 fa65 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008860:	2043      	movs	r0, #67	; 0x43
 8008862:	f7f9 fa7e 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008866:	bf00      	nop
 8008868:	3728      	adds	r7, #40	; 0x28
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	40023800 	.word	0x40023800
 8008874:	40020000 	.word	0x40020000

08008878 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe ffeb 	bl	8007862 <USBH_LL_IncTimer>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff f823 	bl	80078ee <USBH_LL_Connect>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff f82c 	bl	800791c <USBH_LL_Disconnect>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
 80088d8:	4613      	mov	r3, r2
 80088da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe ffdd 	bl	80078b6 <USBH_LL_PortEnabled>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe ffdd 	bl	80078d2 <USBH_LL_PortDisabled>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800892e:	2b01      	cmp	r3, #1
 8008930:	d12a      	bne.n	8008988 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008932:	4a18      	ldr	r2, [pc, #96]	; (8008994 <USBH_LL_Init+0x74>)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a15      	ldr	r2, [pc, #84]	; (8008994 <USBH_LL_Init+0x74>)
 800893e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008942:	4b14      	ldr	r3, [pc, #80]	; (8008994 <USBH_LL_Init+0x74>)
 8008944:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008948:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800894a:	4b12      	ldr	r3, [pc, #72]	; (8008994 <USBH_LL_Init+0x74>)
 800894c:	2208      	movs	r2, #8
 800894e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008950:	4b10      	ldr	r3, [pc, #64]	; (8008994 <USBH_LL_Init+0x74>)
 8008952:	2201      	movs	r2, #1
 8008954:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008956:	4b0f      	ldr	r3, [pc, #60]	; (8008994 <USBH_LL_Init+0x74>)
 8008958:	2200      	movs	r2, #0
 800895a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800895c:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <USBH_LL_Init+0x74>)
 800895e:	2202      	movs	r2, #2
 8008960:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <USBH_LL_Init+0x74>)
 8008964:	2200      	movs	r2, #0
 8008966:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008968:	480a      	ldr	r0, [pc, #40]	; (8008994 <USBH_LL_Init+0x74>)
 800896a:	f7f9 feb4 	bl	80026d6 <HAL_HCD_Init>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008974:	f7f8 f8f8 	bl	8000b68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008978:	4806      	ldr	r0, [pc, #24]	; (8008994 <USBH_LL_Init+0x74>)
 800897a:	f7fa fa98 	bl	8002eae <HAL_HCD_GetCurrentFrame>
 800897e:	4603      	mov	r3, r0
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7fe ff5e 	bl	8007844 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200006d0 	.word	0x200006d0

08008998 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fa fa07 	bl	8002dc2 <HAL_HCD_Start>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f95c 	bl	8008c78 <USBH_Get_USB_Status>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fa fa0f 	bl	8002e08 <HAL_HCD_Stop>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 f941 	bl	8008c78 <USBH_Get_USB_Status>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fa fa57 	bl	8002eca <HAL_HCD_GetCurrentSpeed>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d00c      	beq.n	8008a3c <USBH_LL_GetSpeed+0x38>
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d80d      	bhi.n	8008a42 <USBH_LL_GetSpeed+0x3e>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <USBH_LL_GetSpeed+0x2c>
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d003      	beq.n	8008a36 <USBH_LL_GetSpeed+0x32>
 8008a2e:	e008      	b.n	8008a42 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
    break;
 8008a34:	e008      	b.n	8008a48 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a36:	2301      	movs	r3, #1
 8008a38:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3a:	e005      	b.n	8008a48 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a40:	e002      	b.n	8008a48 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a42:	2301      	movs	r3, #1
 8008a44:	73fb      	strb	r3, [r7, #15]
    break;
 8008a46:	bf00      	nop
  }
  return  speed;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fa f9ea 	bl	8002e42 <HAL_HCD_ResetPort>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f8ff 	bl	8008c78 <USBH_Get_USB_Status>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fa f9f1 	bl	8002e86 <HAL_HCD_HC_GetXferCount>
 8008aa4:	4603      	mov	r3, r0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008aae:	b590      	push	{r4, r7, lr}
 8008ab0:	b089      	sub	sp, #36	; 0x24
 8008ab2:	af04      	add	r7, sp, #16
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	461a      	mov	r2, r3
 8008abc:	4603      	mov	r3, r0
 8008abe:	70fb      	strb	r3, [r7, #3]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70bb      	strb	r3, [r7, #2]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ad6:	787c      	ldrb	r4, [r7, #1]
 8008ad8:	78ba      	ldrb	r2, [r7, #2]
 8008ada:	78f9      	ldrb	r1, [r7, #3]
 8008adc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ade:	9302      	str	r3, [sp, #8]
 8008ae0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4623      	mov	r3, r4
 8008aee:	f7f9 fe54 	bl	800279a <HAL_HCD_HC_Init>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f8bd 	bl	8008c78 <USBH_Get_USB_Status>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd90      	pop	{r4, r7, pc}

08008b0c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f9 fec4 	bl	80028b8 <HAL_HCD_HC_Halt>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f89e 	bl	8008c78 <USBH_Get_USB_Status>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b4a:	b590      	push	{r4, r7, lr}
 8008b4c:	b089      	sub	sp, #36	; 0x24
 8008b4e:	af04      	add	r7, sp, #16
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	461a      	mov	r2, r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	70fb      	strb	r3, [r7, #3]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70bb      	strb	r3, [r7, #2]
 8008b60:	4613      	mov	r3, r2
 8008b62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b72:	787c      	ldrb	r4, [r7, #1]
 8008b74:	78ba      	ldrb	r2, [r7, #2]
 8008b76:	78f9      	ldrb	r1, [r7, #3]
 8008b78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b7c:	9303      	str	r3, [sp, #12]
 8008b7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b80:	9302      	str	r3, [sp, #8]
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	f7f9 feb7 	bl	8002900 <HAL_HCD_HC_SubmitRequest>
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f86d 	bl	8008c78 <USBH_Get_USB_Status>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd90      	pop	{r4, r7, pc}

08008bac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fa f94b 	bl	8002e5e <HAL_HCD_HC_GetURBState>
 8008bc8:	4603      	mov	r3, r0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d103      	bne.n	8008bf0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f870 	bl	8008cd0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008bf0:	20c8      	movs	r0, #200	; 0xc8
 8008bf2:	f7f8 fb1f 	bl	8001234 <HAL_Delay>
  return USBH_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c16:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c18:	78fb      	ldrb	r3, [r7, #3]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	212c      	movs	r1, #44	; 0x2c
 8008c1e:	fb01 f303 	mul.w	r3, r1, r3
 8008c22:	4413      	add	r3, r2
 8008c24:	333b      	adds	r3, #59	; 0x3b
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	212c      	movs	r1, #44	; 0x2c
 8008c32:	fb01 f303 	mul.w	r3, r1, r3
 8008c36:	4413      	add	r3, r2
 8008c38:	3354      	adds	r3, #84	; 0x54
 8008c3a:	78ba      	ldrb	r2, [r7, #2]
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e008      	b.n	8008c52 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	212c      	movs	r1, #44	; 0x2c
 8008c46:	fb01 f303 	mul.w	r3, r1, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3355      	adds	r3, #85	; 0x55
 8008c4e:	78ba      	ldrb	r2, [r7, #2]
 8008c50:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7f8 fae3 	bl	8001234 <HAL_Delay>
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d817      	bhi.n	8008cbc <USBH_Get_USB_Status+0x44>
 8008c8c:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <USBH_Get_USB_Status+0x1c>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008ca5 	.word	0x08008ca5
 8008c98:	08008cab 	.word	0x08008cab
 8008c9c:	08008cb1 	.word	0x08008cb1
 8008ca0:	08008cb7 	.word	0x08008cb7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	e00b      	b.n	8008cc2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008caa:	2302      	movs	r3, #2
 8008cac:	73fb      	strb	r3, [r7, #15]
    break;
 8008cae:	e008      	b.n	8008cc2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb4:	e005      	b.n	8008cc2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cba:	e002      	b.n	8008cc2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc0:	bf00      	nop
  }
  return usb_status;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d102      	bne.n	8008cea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
 8008ce8:	e001      	b.n	8008cee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008cea:	2301      	movs	r3, #1
 8008cec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4803      	ldr	r0, [pc, #12]	; (8008d04 <MX_DriverVbusFS+0x34>)
 8008cf6:	f7f9 fcd5 	bl	80026a4 <HAL_GPIO_WritePin>
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40020800 	.word	0x40020800

08008d08 <malloc>:
 8008d08:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <malloc+0xc>)
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	f000 b82b 	b.w	8008d68 <_malloc_r>
 8008d12:	bf00      	nop
 8008d14:	20000078 	.word	0x20000078

08008d18 <free>:
 8008d18:	4b02      	ldr	r3, [pc, #8]	; (8008d24 <free+0xc>)
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	f000 b8f3 	b.w	8008f08 <_free_r>
 8008d22:	bf00      	nop
 8008d24:	20000078 	.word	0x20000078

08008d28 <sbrk_aligned>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	4e0e      	ldr	r6, [pc, #56]	; (8008d64 <sbrk_aligned+0x3c>)
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	6831      	ldr	r1, [r6, #0]
 8008d30:	4605      	mov	r5, r0
 8008d32:	b911      	cbnz	r1, 8008d3a <sbrk_aligned+0x12>
 8008d34:	f000 f8ac 	bl	8008e90 <_sbrk_r>
 8008d38:	6030      	str	r0, [r6, #0]
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f000 f8a7 	bl	8008e90 <_sbrk_r>
 8008d42:	1c43      	adds	r3, r0, #1
 8008d44:	d00a      	beq.n	8008d5c <sbrk_aligned+0x34>
 8008d46:	1cc4      	adds	r4, r0, #3
 8008d48:	f024 0403 	bic.w	r4, r4, #3
 8008d4c:	42a0      	cmp	r0, r4
 8008d4e:	d007      	beq.n	8008d60 <sbrk_aligned+0x38>
 8008d50:	1a21      	subs	r1, r4, r0
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 f89c 	bl	8008e90 <_sbrk_r>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d101      	bne.n	8008d60 <sbrk_aligned+0x38>
 8008d5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008d60:	4620      	mov	r0, r4
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	200009d8 	.word	0x200009d8

08008d68 <_malloc_r>:
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	1ccd      	adds	r5, r1, #3
 8008d6e:	f025 0503 	bic.w	r5, r5, #3
 8008d72:	3508      	adds	r5, #8
 8008d74:	2d0c      	cmp	r5, #12
 8008d76:	bf38      	it	cc
 8008d78:	250c      	movcc	r5, #12
 8008d7a:	2d00      	cmp	r5, #0
 8008d7c:	4607      	mov	r7, r0
 8008d7e:	db01      	blt.n	8008d84 <_malloc_r+0x1c>
 8008d80:	42a9      	cmp	r1, r5
 8008d82:	d905      	bls.n	8008d90 <_malloc_r+0x28>
 8008d84:	230c      	movs	r3, #12
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	2600      	movs	r6, #0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e64 <_malloc_r+0xfc>
 8008d94:	f000 f868 	bl	8008e68 <__malloc_lock>
 8008d98:	f8d8 3000 	ldr.w	r3, [r8]
 8008d9c:	461c      	mov	r4, r3
 8008d9e:	bb5c      	cbnz	r4, 8008df8 <_malloc_r+0x90>
 8008da0:	4629      	mov	r1, r5
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7ff ffc0 	bl	8008d28 <sbrk_aligned>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	4604      	mov	r4, r0
 8008dac:	d155      	bne.n	8008e5a <_malloc_r+0xf2>
 8008dae:	f8d8 4000 	ldr.w	r4, [r8]
 8008db2:	4626      	mov	r6, r4
 8008db4:	2e00      	cmp	r6, #0
 8008db6:	d145      	bne.n	8008e44 <_malloc_r+0xdc>
 8008db8:	2c00      	cmp	r4, #0
 8008dba:	d048      	beq.n	8008e4e <_malloc_r+0xe6>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	eb04 0903 	add.w	r9, r4, r3
 8008dc6:	f000 f863 	bl	8008e90 <_sbrk_r>
 8008dca:	4581      	cmp	r9, r0
 8008dcc:	d13f      	bne.n	8008e4e <_malloc_r+0xe6>
 8008dce:	6821      	ldr	r1, [r4, #0]
 8008dd0:	1a6d      	subs	r5, r5, r1
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7ff ffa7 	bl	8008d28 <sbrk_aligned>
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d037      	beq.n	8008e4e <_malloc_r+0xe6>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	442b      	add	r3, r5
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	f8d8 3000 	ldr.w	r3, [r8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d038      	beq.n	8008e5e <_malloc_r+0xf6>
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	42a2      	cmp	r2, r4
 8008df0:	d12b      	bne.n	8008e4a <_malloc_r+0xe2>
 8008df2:	2200      	movs	r2, #0
 8008df4:	605a      	str	r2, [r3, #4]
 8008df6:	e00f      	b.n	8008e18 <_malloc_r+0xb0>
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	1b52      	subs	r2, r2, r5
 8008dfc:	d41f      	bmi.n	8008e3e <_malloc_r+0xd6>
 8008dfe:	2a0b      	cmp	r2, #11
 8008e00:	d917      	bls.n	8008e32 <_malloc_r+0xca>
 8008e02:	1961      	adds	r1, r4, r5
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	6025      	str	r5, [r4, #0]
 8008e08:	bf18      	it	ne
 8008e0a:	6059      	strne	r1, [r3, #4]
 8008e0c:	6863      	ldr	r3, [r4, #4]
 8008e0e:	bf08      	it	eq
 8008e10:	f8c8 1000 	streq.w	r1, [r8]
 8008e14:	5162      	str	r2, [r4, r5]
 8008e16:	604b      	str	r3, [r1, #4]
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f104 060b 	add.w	r6, r4, #11
 8008e1e:	f000 f829 	bl	8008e74 <__malloc_unlock>
 8008e22:	f026 0607 	bic.w	r6, r6, #7
 8008e26:	1d23      	adds	r3, r4, #4
 8008e28:	1af2      	subs	r2, r6, r3
 8008e2a:	d0ae      	beq.n	8008d8a <_malloc_r+0x22>
 8008e2c:	1b9b      	subs	r3, r3, r6
 8008e2e:	50a3      	str	r3, [r4, r2]
 8008e30:	e7ab      	b.n	8008d8a <_malloc_r+0x22>
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	6862      	ldr	r2, [r4, #4]
 8008e36:	d1dd      	bne.n	8008df4 <_malloc_r+0x8c>
 8008e38:	f8c8 2000 	str.w	r2, [r8]
 8008e3c:	e7ec      	b.n	8008e18 <_malloc_r+0xb0>
 8008e3e:	4623      	mov	r3, r4
 8008e40:	6864      	ldr	r4, [r4, #4]
 8008e42:	e7ac      	b.n	8008d9e <_malloc_r+0x36>
 8008e44:	4634      	mov	r4, r6
 8008e46:	6876      	ldr	r6, [r6, #4]
 8008e48:	e7b4      	b.n	8008db4 <_malloc_r+0x4c>
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	e7cc      	b.n	8008de8 <_malloc_r+0x80>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	603b      	str	r3, [r7, #0]
 8008e52:	4638      	mov	r0, r7
 8008e54:	f000 f80e 	bl	8008e74 <__malloc_unlock>
 8008e58:	e797      	b.n	8008d8a <_malloc_r+0x22>
 8008e5a:	6025      	str	r5, [r4, #0]
 8008e5c:	e7dc      	b.n	8008e18 <_malloc_r+0xb0>
 8008e5e:	605b      	str	r3, [r3, #4]
 8008e60:	deff      	udf	#255	; 0xff
 8008e62:	bf00      	nop
 8008e64:	200009d4 	.word	0x200009d4

08008e68 <__malloc_lock>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__malloc_lock+0x8>)
 8008e6a:	f000 b84b 	b.w	8008f04 <__retarget_lock_acquire_recursive>
 8008e6e:	bf00      	nop
 8008e70:	20000b18 	.word	0x20000b18

08008e74 <__malloc_unlock>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__malloc_unlock+0x8>)
 8008e76:	f000 b846 	b.w	8008f06 <__retarget_lock_release_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	20000b18 	.word	0x20000b18

08008e80 <memset>:
 8008e80:	4402      	add	r2, r0
 8008e82:	4603      	mov	r3, r0
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d100      	bne.n	8008e8a <memset+0xa>
 8008e88:	4770      	bx	lr
 8008e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8e:	e7f9      	b.n	8008e84 <memset+0x4>

08008e90 <_sbrk_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d06      	ldr	r5, [pc, #24]	; (8008eac <_sbrk_r+0x1c>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	602b      	str	r3, [r5, #0]
 8008e9c:	f7f8 f8e6 	bl	800106c <_sbrk>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_sbrk_r+0x1a>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_sbrk_r+0x1a>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	20000b14 	.word	0x20000b14

08008eb0 <__errno>:
 8008eb0:	4b01      	ldr	r3, [pc, #4]	; (8008eb8 <__errno+0x8>)
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000078 	.word	0x20000078

08008ebc <__libc_init_array>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4d0d      	ldr	r5, [pc, #52]	; (8008ef4 <__libc_init_array+0x38>)
 8008ec0:	4c0d      	ldr	r4, [pc, #52]	; (8008ef8 <__libc_init_array+0x3c>)
 8008ec2:	1b64      	subs	r4, r4, r5
 8008ec4:	10a4      	asrs	r4, r4, #2
 8008ec6:	2600      	movs	r6, #0
 8008ec8:	42a6      	cmp	r6, r4
 8008eca:	d109      	bne.n	8008ee0 <__libc_init_array+0x24>
 8008ecc:	4d0b      	ldr	r5, [pc, #44]	; (8008efc <__libc_init_array+0x40>)
 8008ece:	4c0c      	ldr	r4, [pc, #48]	; (8008f00 <__libc_init_array+0x44>)
 8008ed0:	f000 f866 	bl	8008fa0 <_init>
 8008ed4:	1b64      	subs	r4, r4, r5
 8008ed6:	10a4      	asrs	r4, r4, #2
 8008ed8:	2600      	movs	r6, #0
 8008eda:	42a6      	cmp	r6, r4
 8008edc:	d105      	bne.n	8008eea <__libc_init_array+0x2e>
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee4:	4798      	blx	r3
 8008ee6:	3601      	adds	r6, #1
 8008ee8:	e7ee      	b.n	8008ec8 <__libc_init_array+0xc>
 8008eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eee:	4798      	blx	r3
 8008ef0:	3601      	adds	r6, #1
 8008ef2:	e7f2      	b.n	8008eda <__libc_init_array+0x1e>
 8008ef4:	08008fe4 	.word	0x08008fe4
 8008ef8:	08008fe4 	.word	0x08008fe4
 8008efc:	08008fe4 	.word	0x08008fe4
 8008f00:	08008fe8 	.word	0x08008fe8

08008f04 <__retarget_lock_acquire_recursive>:
 8008f04:	4770      	bx	lr

08008f06 <__retarget_lock_release_recursive>:
 8008f06:	4770      	bx	lr

08008f08 <_free_r>:
 8008f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0a:	2900      	cmp	r1, #0
 8008f0c:	d044      	beq.n	8008f98 <_free_r+0x90>
 8008f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f12:	9001      	str	r0, [sp, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f1a1 0404 	sub.w	r4, r1, #4
 8008f1a:	bfb8      	it	lt
 8008f1c:	18e4      	addlt	r4, r4, r3
 8008f1e:	f7ff ffa3 	bl	8008e68 <__malloc_lock>
 8008f22:	4a1e      	ldr	r2, [pc, #120]	; (8008f9c <_free_r+0x94>)
 8008f24:	9801      	ldr	r0, [sp, #4]
 8008f26:	6813      	ldr	r3, [r2, #0]
 8008f28:	b933      	cbnz	r3, 8008f38 <_free_r+0x30>
 8008f2a:	6063      	str	r3, [r4, #4]
 8008f2c:	6014      	str	r4, [r2, #0]
 8008f2e:	b003      	add	sp, #12
 8008f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f34:	f7ff bf9e 	b.w	8008e74 <__malloc_unlock>
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d908      	bls.n	8008f4e <_free_r+0x46>
 8008f3c:	6825      	ldr	r5, [r4, #0]
 8008f3e:	1961      	adds	r1, r4, r5
 8008f40:	428b      	cmp	r3, r1
 8008f42:	bf01      	itttt	eq
 8008f44:	6819      	ldreq	r1, [r3, #0]
 8008f46:	685b      	ldreq	r3, [r3, #4]
 8008f48:	1949      	addeq	r1, r1, r5
 8008f4a:	6021      	streq	r1, [r4, #0]
 8008f4c:	e7ed      	b.n	8008f2a <_free_r+0x22>
 8008f4e:	461a      	mov	r2, r3
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	b10b      	cbz	r3, 8008f58 <_free_r+0x50>
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	d9fa      	bls.n	8008f4e <_free_r+0x46>
 8008f58:	6811      	ldr	r1, [r2, #0]
 8008f5a:	1855      	adds	r5, r2, r1
 8008f5c:	42a5      	cmp	r5, r4
 8008f5e:	d10b      	bne.n	8008f78 <_free_r+0x70>
 8008f60:	6824      	ldr	r4, [r4, #0]
 8008f62:	4421      	add	r1, r4
 8008f64:	1854      	adds	r4, r2, r1
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	6011      	str	r1, [r2, #0]
 8008f6a:	d1e0      	bne.n	8008f2e <_free_r+0x26>
 8008f6c:	681c      	ldr	r4, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	6053      	str	r3, [r2, #4]
 8008f72:	440c      	add	r4, r1
 8008f74:	6014      	str	r4, [r2, #0]
 8008f76:	e7da      	b.n	8008f2e <_free_r+0x26>
 8008f78:	d902      	bls.n	8008f80 <_free_r+0x78>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	6003      	str	r3, [r0, #0]
 8008f7e:	e7d6      	b.n	8008f2e <_free_r+0x26>
 8008f80:	6825      	ldr	r5, [r4, #0]
 8008f82:	1961      	adds	r1, r4, r5
 8008f84:	428b      	cmp	r3, r1
 8008f86:	bf04      	itt	eq
 8008f88:	6819      	ldreq	r1, [r3, #0]
 8008f8a:	685b      	ldreq	r3, [r3, #4]
 8008f8c:	6063      	str	r3, [r4, #4]
 8008f8e:	bf04      	itt	eq
 8008f90:	1949      	addeq	r1, r1, r5
 8008f92:	6021      	streq	r1, [r4, #0]
 8008f94:	6054      	str	r4, [r2, #4]
 8008f96:	e7ca      	b.n	8008f2e <_free_r+0x26>
 8008f98:	b003      	add	sp, #12
 8008f9a:	bd30      	pop	{r4, r5, pc}
 8008f9c:	200009d4 	.word	0x200009d4

08008fa0 <_init>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr

08008fac <_fini>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr
