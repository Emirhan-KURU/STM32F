
DC_Motor_Ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001908c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  08019220  08019220  00029220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e1c  08019e1c  00030130  2**0
                  CONTENTS
  4 .ARM          00000008  08019e1c  08019e1c  00029e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e24  08019e24  00030130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019e24  08019e24  00029e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019e2c  08019e2c  00029e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08019e30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030130  2**0
                  CONTENTS
 10 .bss          0000e394  20000130  20000130  00030130  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000e4c4  2000e4c4  00030130  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY
 13 .comment      00000076  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b5c5  00000000  00000000  000301d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006532  00000000  00000000  0005b79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023f0  00000000  00000000  00061cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001bd8  00000000  00000000  000640c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000cc18  00000000  00000000  00065c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e5da  00000000  00000000  000728b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f76ad  00000000  00000000  000a0e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a658  00000000  00000000  00198538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001a2b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000130 	.word	0x20000130
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019204 	.word	0x08019204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000134 	.word	0x20000134
 80001cc:	08019204 	.word	0x08019204

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bb 	b.w	8000638 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b970 	b.w	8000638 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	460d      	mov	r5, r1
 8000378:	4604      	mov	r4, r0
 800037a:	460f      	mov	r7, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4694      	mov	ip, r2
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0xe2>
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	b143      	cbz	r3, 800039e <__udivmoddi4+0x2e>
 800038c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000390:	f1c3 0220 	rsb	r2, r3, #32
 8000394:	409f      	lsls	r7, r3
 8000396:	fa20 f202 	lsr.w	r2, r0, r2
 800039a:	4317      	orrs	r7, r2
 800039c:	409c      	lsls	r4, r3
 800039e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a2:	fa1f f58c 	uxth.w	r5, ip
 80003a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003aa:	0c22      	lsrs	r2, r4, #16
 80003ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80003b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003b4:	fb01 f005 	mul.w	r0, r1, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003c4:	f080 811c 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003c8:	4290      	cmp	r0, r2
 80003ca:	f240 8119 	bls.w	8000600 <__udivmoddi4+0x290>
 80003ce:	3902      	subs	r1, #2
 80003d0:	4462      	add	r2, ip
 80003d2:	1a12      	subs	r2, r2, r0
 80003d4:	b2a4      	uxth	r4, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e2:	fb00 f505 	mul.w	r5, r0, r5
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d90a      	bls.n	8000400 <__udivmoddi4+0x90>
 80003ea:	eb1c 0404 	adds.w	r4, ip, r4
 80003ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f2:	f080 8107 	bcs.w	8000604 <__udivmoddi4+0x294>
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	f240 8104 	bls.w	8000604 <__udivmoddi4+0x294>
 80003fc:	4464      	add	r4, ip
 80003fe:	3802      	subs	r0, #2
 8000400:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	2100      	movs	r1, #0
 8000408:	b11e      	cbz	r6, 8000412 <__udivmoddi4+0xa2>
 800040a:	40dc      	lsrs	r4, r3
 800040c:	2300      	movs	r3, #0
 800040e:	e9c6 4300 	strd	r4, r3, [r6]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0xbc>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80ed 	beq.w	80005fa <__udivmoddi4+0x28a>
 8000420:	2100      	movs	r1, #0
 8000422:	e9c6 0500 	strd	r0, r5, [r6]
 8000426:	4608      	mov	r0, r1
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	fab3 f183 	clz	r1, r3
 8000430:	2900      	cmp	r1, #0
 8000432:	d149      	bne.n	80004c8 <__udivmoddi4+0x158>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d302      	bcc.n	800043e <__udivmoddi4+0xce>
 8000438:	4282      	cmp	r2, r0
 800043a:	f200 80f8 	bhi.w	800062e <__udivmoddi4+0x2be>
 800043e:	1a84      	subs	r4, r0, r2
 8000440:	eb65 0203 	sbc.w	r2, r5, r3
 8000444:	2001      	movs	r0, #1
 8000446:	4617      	mov	r7, r2
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0e2      	beq.n	8000412 <__udivmoddi4+0xa2>
 800044c:	e9c6 4700 	strd	r4, r7, [r6]
 8000450:	e7df      	b.n	8000412 <__udivmoddi4+0xa2>
 8000452:	b902      	cbnz	r2, 8000456 <__udivmoddi4+0xe6>
 8000454:	deff      	udf	#255	; 0xff
 8000456:	fab2 f382 	clz	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8090 	bne.w	8000580 <__udivmoddi4+0x210>
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000466:	fa1f fe8c 	uxth.w	lr, ip
 800046a:	2101      	movs	r1, #1
 800046c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000470:	fb07 2015 	mls	r0, r7, r5, r2
 8000474:	0c22      	lsrs	r2, r4, #16
 8000476:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800047a:	fb0e f005 	mul.w	r0, lr, r5
 800047e:	4290      	cmp	r0, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x124>
 8000482:	eb1c 0202 	adds.w	r2, ip, r2
 8000486:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4290      	cmp	r0, r2
 800048e:	f200 80cb 	bhi.w	8000628 <__udivmoddi4+0x2b8>
 8000492:	4645      	mov	r5, r8
 8000494:	1a12      	subs	r2, r2, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb2 f0f7 	udiv	r0, r2, r7
 800049c:	fb07 2210 	mls	r2, r7, r0, r2
 80004a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004a4:	fb0e fe00 	mul.w	lr, lr, r0
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x14e>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x14c>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f200 80bb 	bhi.w	8000632 <__udivmoddi4+0x2c2>
 80004bc:	4610      	mov	r0, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004c6:	e79f      	b.n	8000408 <__udivmoddi4+0x98>
 80004c8:	f1c1 0720 	rsb	r7, r1, #32
 80004cc:	408b      	lsls	r3, r1
 80004ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80004d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004d6:	fa05 f401 	lsl.w	r4, r5, r1
 80004da:	fa20 f307 	lsr.w	r3, r0, r7
 80004de:	40fd      	lsrs	r5, r7
 80004e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	fb09 5518 	mls	r5, r9, r8, r5
 80004f2:	0c1c      	lsrs	r4, r3, #16
 80004f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004f8:	fb08 f50e 	mul.w	r5, r8, lr
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000502:	fa00 f001 	lsl.w	r0, r0, r1
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000510:	f080 8088 	bcs.w	8000624 <__udivmoddi4+0x2b4>
 8000514:	42a5      	cmp	r5, r4
 8000516:	f240 8085 	bls.w	8000624 <__udivmoddi4+0x2b4>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	4464      	add	r4, ip
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	b29d      	uxth	r5, r3
 8000524:	fbb4 f3f9 	udiv	r3, r4, r9
 8000528:	fb09 4413 	mls	r4, r9, r3, r4
 800052c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000530:	fb03 fe0e 	mul.w	lr, r3, lr
 8000534:	45a6      	cmp	lr, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000540:	d26c      	bcs.n	800061c <__udivmoddi4+0x2ac>
 8000542:	45a6      	cmp	lr, r4
 8000544:	d96a      	bls.n	800061c <__udivmoddi4+0x2ac>
 8000546:	3b02      	subs	r3, #2
 8000548:	4464      	add	r4, ip
 800054a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054e:	fba3 9502 	umull	r9, r5, r3, r2
 8000552:	eba4 040e 	sub.w	r4, r4, lr
 8000556:	42ac      	cmp	r4, r5
 8000558:	46c8      	mov	r8, r9
 800055a:	46ae      	mov	lr, r5
 800055c:	d356      	bcc.n	800060c <__udivmoddi4+0x29c>
 800055e:	d053      	beq.n	8000608 <__udivmoddi4+0x298>
 8000560:	b156      	cbz	r6, 8000578 <__udivmoddi4+0x208>
 8000562:	ebb0 0208 	subs.w	r2, r0, r8
 8000566:	eb64 040e 	sbc.w	r4, r4, lr
 800056a:	fa04 f707 	lsl.w	r7, r4, r7
 800056e:	40ca      	lsrs	r2, r1
 8000570:	40cc      	lsrs	r4, r1
 8000572:	4317      	orrs	r7, r2
 8000574:	e9c6 7400 	strd	r7, r4, [r6]
 8000578:	4618      	mov	r0, r3
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	f1c3 0120 	rsb	r1, r3, #32
 8000584:	fa02 fc03 	lsl.w	ip, r2, r3
 8000588:	fa20 f201 	lsr.w	r2, r0, r1
 800058c:	fa25 f101 	lsr.w	r1, r5, r1
 8000590:	409d      	lsls	r5, r3
 8000592:	432a      	orrs	r2, r5
 8000594:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a0:	fb07 1510 	mls	r5, r7, r0, r1
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005aa:	fb00 f50e 	mul.w	r5, r0, lr
 80005ae:	428d      	cmp	r5, r1
 80005b0:	fa04 f403 	lsl.w	r4, r4, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x258>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005be:	d22f      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d92d      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005c4:	3802      	subs	r0, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1b49      	subs	r1, r1, r5
 80005ca:	b292      	uxth	r2, r2
 80005cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005d0:	fb07 1115 	mls	r1, r7, r5, r1
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	fb05 f10e 	mul.w	r1, r5, lr
 80005dc:	4291      	cmp	r1, r2
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x282>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005e8:	d216      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 80005ea:	4291      	cmp	r1, r2
 80005ec:	d914      	bls.n	8000618 <__udivmoddi4+0x2a8>
 80005ee:	3d02      	subs	r5, #2
 80005f0:	4462      	add	r2, ip
 80005f2:	1a52      	subs	r2, r2, r1
 80005f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005f8:	e738      	b.n	800046c <__udivmoddi4+0xfc>
 80005fa:	4631      	mov	r1, r6
 80005fc:	4630      	mov	r0, r6
 80005fe:	e708      	b.n	8000412 <__udivmoddi4+0xa2>
 8000600:	4639      	mov	r1, r7
 8000602:	e6e6      	b.n	80003d2 <__udivmoddi4+0x62>
 8000604:	4610      	mov	r0, r2
 8000606:	e6fb      	b.n	8000400 <__udivmoddi4+0x90>
 8000608:	4548      	cmp	r0, r9
 800060a:	d2a9      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 800060c:	ebb9 0802 	subs.w	r8, r9, r2
 8000610:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000614:	3b01      	subs	r3, #1
 8000616:	e7a3      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000618:	4645      	mov	r5, r8
 800061a:	e7ea      	b.n	80005f2 <__udivmoddi4+0x282>
 800061c:	462b      	mov	r3, r5
 800061e:	e794      	b.n	800054a <__udivmoddi4+0x1da>
 8000620:	4640      	mov	r0, r8
 8000622:	e7d1      	b.n	80005c8 <__udivmoddi4+0x258>
 8000624:	46d0      	mov	r8, sl
 8000626:	e77b      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000628:	3d02      	subs	r5, #2
 800062a:	4462      	add	r2, ip
 800062c:	e732      	b.n	8000494 <__udivmoddi4+0x124>
 800062e:	4608      	mov	r0, r1
 8000630:	e70a      	b.n	8000448 <__udivmoddi4+0xd8>
 8000632:	4464      	add	r4, ip
 8000634:	3802      	subs	r0, #2
 8000636:	e742      	b.n	80004be <__udivmoddi4+0x14e>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000648:	f00c fccc 	bl	800cfe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800064c:	4b58      	ldr	r3, [pc, #352]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000654:	f000 f980 	bl	8000958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000658:	4b56      	ldr	r3, [pc, #344]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	f040 808e 	bne.w	8000782 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01d      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800066c:	2208      	movs	r2, #8
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	2b00      	cmp	r3, #0
 800067c:	d014      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 0307 	bic.w	r3, r3, #7
 8000684:	3308      	adds	r3, #8
 8000686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00a      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d069      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d864      	bhi.n	8000782 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c2:	e004      	b.n	80006ce <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d903      	bls.n	80006e0 <pvPortMallocMicroROS+0xa4>
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f1      	bne.n	80006c4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d04b      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2208      	movs	r2, #8
 80006f0:	4413      	add	r3, r2
 80006f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1ad2      	subs	r2, r2, r3
 8000704:	2308      	movs	r3, #8
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	429a      	cmp	r2, r3
 800070a:	d91f      	bls.n	800074c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800070c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00a      	beq.n	8000734 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f3bf 8f6f 	isb	sy
 800072a:	f3bf 8f4f 	dsb	sy
 800072e:	613b      	str	r3, [r7, #16]
}
 8000730:	bf00      	nop
 8000732:	e7fe      	b.n	8000732 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000746:	69b8      	ldr	r0, [r7, #24]
 8000748:	f000 f968 	bl	8000a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d203      	bcs.n	800076e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 800076c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	431a      	orrs	r2, r3
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000782:	f00c fc3d 	bl	800d000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	60fb      	str	r3, [r7, #12]
}
 80007a2:	bf00      	nop
 80007a4:	e7fe      	b.n	80007a4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007a6:	69fb      	ldr	r3, [r7, #28]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20003d54 	.word	0x20003d54
 80007b4:	20003d60 	.word	0x20003d60
 80007b8:	20003d58 	.word	0x20003d58
 80007bc:	20003d4c 	.word	0x20003d4c
 80007c0:	20003d5c 	.word	0x20003d5c

080007c4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d048      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d6:	2308      	movs	r3, #8
 80007d8:	425b      	negs	r3, r3
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <vPortFreeMicroROS+0xac>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <vPortFreeMicroROS+0x44>
	__asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	60fb      	str	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00a      	beq.n	8000826 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	f3bf 8f6f 	isb	sy
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	60bb      	str	r3, [r7, #8]
}
 8000822:	bf00      	nop
 8000824:	e7fe      	b.n	8000824 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <vPortFreeMicroROS+0xac>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <vPortFreeMicroROS+0xac>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800084c:	f00c fbca 	bl	800cfe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <vPortFreeMicroROS+0xb0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <vPortFreeMicroROS+0xb0>)
 800085c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f000 f8dc 	bl	8000a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000864:	f00c fbcc 	bl	800d000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20003d60 	.word	0x20003d60
 8000874:	20003d58 	.word	0x20003d58

08000878 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000884:	2308      	movs	r3, #8
 8000886:	425b      	negs	r3, r3
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <getBlockSize+0x38>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	return count;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20003d60 	.word	0x20003d60

080008b4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008be:	f00c fb91 	bl	800cfe4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff feba 	bl	800063c <pvPortMallocMicroROS>
 80008c8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffce 	bl	8000878 <getBlockSize>
 80008dc:	4603      	mov	r3, r0
 80008de:	2208      	movs	r2, #8
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d201      	bcs.n	80008f0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f017 fd8d 	bl	8018414 <memcpy>

		vPortFreeMicroROS(pv);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff62 	bl	80007c4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000900:	f00c fb7e 	bl	800d000 <xTaskResumeAll>

	return newmem;
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000918:	f00c fb64 	bl	800cfe4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff fe88 	bl	800063c <pvPortMallocMicroROS>
 800092c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000932:	e004      	b.n	800093e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	617a      	str	r2, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000948:	f00c fb5a 	bl	800d000 <xTaskResumeAll>
  	return mem;
 800094c:	68fb      	ldr	r3, [r7, #12]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <prvHeapInit+0xac>)
 8000966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3307      	adds	r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <prvHeapInit+0xac>)
 8000988:	4413      	add	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <prvHeapInit+0xb0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <prvHeapInit+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009a4:	2208      	movs	r2, #8
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <prvHeapInit+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <prvHeapInit+0xb4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <prvHeapInit+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <prvHeapInit+0xb4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <prvHeapInit+0xb8>)
 80009e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <prvHeapInit+0xbc>)
 80009ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <prvHeapInit+0xc0>)
 80009f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	2000014c 	.word	0x2000014c
 8000a08:	20003d4c 	.word	0x20003d4c
 8000a0c:	20003d54 	.word	0x20003d54
 8000a10:	20003d5c 	.word	0x20003d5c
 8000a14:	20003d58 	.word	0x20003d58
 8000a18:	20003d60 	.word	0x20003d60

08000a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <prvInsertBlockIntoFreeList+0xac>)
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <prvInsertBlockIntoFreeList+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d108      	bne.n	8000a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	441a      	add	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d118      	bne.n	8000aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00d      	beq.n	8000a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e008      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e003      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20003d4c 	.word	0x20003d4c
 8000acc:	20003d54 	.word	0x20003d54

08000ad0 <Read_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t Read_ADC()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <Read_ADC+0x30>)
 8000ad6:	f001 fb03 	bl	80020e0 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000)==HAL_OK)
 8000ada:	490a      	ldr	r1, [pc, #40]	; (8000b04 <Read_ADC+0x34>)
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <Read_ADC+0x30>)
 8000ade:	f001 fbd1 	bl	8002284 <HAL_ADC_PollForConversion>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d106      	bne.n	8000af6 <Read_ADC+0x26>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <Read_ADC+0x30>)
 8000aea:	f001 fc56 	bl	800239a <HAL_ADC_GetValue>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <Read_ADC+0x38>)
 8000af4:	801a      	strh	r2, [r3, #0]
	return adc_value;
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <Read_ADC+0x38>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b21b      	sxth	r3, r3
	HAL_ADC_Stop(&hadc1);
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20003d68 	.word	0x20003d68
 8000b04:	000186a0 	.word	0x000186a0
 8000b08:	20003d64 	.word	0x20003d64

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f001 fa0c 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f82e 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 fa5e 	bl	8000fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1c:	f000 fa34 	bl	8000f88 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b20:	f000 f8e4 	bl	8000cec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b24:	f000 f910 	bl	8000d48 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b28:	f000 f93e 	bl	8000da8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000b2c:	f000 f88c 	bl	8000c48 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b30:	f000 f970 	bl	8000e14 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000b34:	f000 f9fe 	bl	8000f34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b38:	f00a ff62 	bl	800ba00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <main+0x58>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <main+0x5c>)
 8000b42:	f00a ffa7 	bl	800ba94 <osThreadNew>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <main+0x60>)
 8000b4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//PWM sinyalleri baslatildi.
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <main+0x64>)
 8000b50:	f005 fdb6 	bl	80066c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b54:	2104      	movs	r1, #4
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <main+0x64>)
 8000b58:	f005 fdb2 	bl	80066c0 <HAL_TIM_PWM_Start>
  // NOT!!!
  // PWM ler oskernelstart() fonksiyonundan sonra yazilirsa calismiyor.
  osKernelStart();
 8000b5c:	f00a ff74 	bl	800ba48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <main+0x54>
 8000b62:	bf00      	nop
 8000b64:	080192c8 	.word	0x080192c8
 8000b68:	080011d5 	.word	0x080011d5
 8000b6c:	20003ff0 	.word	0x20003ff0
 8000b70:	20003ea4 	.word	0x20003ea4

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2230      	movs	r2, #48	; 0x30
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f017 fb7e 	bl	8018284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <SystemClock_Config+0xcc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a27      	ldr	r2, [pc, #156]	; (8000c40 <SystemClock_Config+0xcc>)
 8000ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemClock_Config+0xcc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <SystemClock_Config+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <SystemClock_Config+0xd0>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <SystemClock_Config+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be4:	2308      	movs	r3, #8
 8000be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000be8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 0320 	add.w	r3, r7, #32
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 feb0 	bl	8005960 <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c06:	f000 fb99 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	2105      	movs	r1, #5
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f005 f911 	bl	8005e50 <HAL_RCC_ClockConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c34:	f000 fb82 	bl	800133c <Error_Handler>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3750      	adds	r7, #80	; 0x50
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40007000 	.word	0x40007000

08000c48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <MX_ADC1_Init+0x9c>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <MX_ADC1_Init+0xa0>)
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000caa:	f001 f9d5 	bl	8002058 <HAL_ADC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cb4:	f000 fb42 	bl	800133c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000cca:	f001 fb73 	bl	80023b4 <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cd4:	f000 fb32 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20003d68 	.word	0x20003d68
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	0f000001 	.word	0x0f000001

08000cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <MX_I2C1_Init+0x54>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x58>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d2a:	f004 f835 	bl	8004d98 <HAL_I2C_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d34:	f000 fb02 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20003db0 	.word	0x20003db0
 8000d40:	40005400 	.word	0x40005400
 8000d44:	000186a0 	.word	0x000186a0

08000d48 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <MX_I2S3_Init+0x58>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <MX_I2S3_Init+0x5c>)
 8000d72:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_I2S3_Init+0x54>)
 8000d88:	f004 f94a 	bl	8005020 <HAL_I2S_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d92:	f000 fad3 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20003e04 	.word	0x20003e04
 8000da0:	40003c00 	.word	0x40003c00
 8000da4:	00017700 	.word	0x00017700

08000da8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <MX_SPI1_Init+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000df4:	220a      	movs	r2, #10
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dfa:	f005 fb89 	bl	8006510 <HAL_SPI_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e04:	f000 fa9a 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20003e4c 	.word	0x20003e4c
 8000e10:	40013000 	.word	0x40013000

08000e14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b092      	sub	sp, #72	; 0x48
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f017 fa20 	bl	8018284 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e44:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e46:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <MX_TIM1_Init+0x11c>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 825;
 8000e4a:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e4c:	f240 3239 	movw	r2, #825	; 0x339
 8000e50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4094;
 8000e58:	4b34      	ldr	r3, [pc, #208]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e5a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e60:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e66:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e72:	482e      	ldr	r0, [pc, #184]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e74:	f005 fbd5 	bl	8006622 <HAL_TIM_PWM_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 fa5d 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4826      	ldr	r0, [pc, #152]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000e92:	f006 f815 	bl	8006ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000e9c:	f000 fa4e 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea0:	2360      	movs	r3, #96	; 0x60
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4819      	ldr	r0, [pc, #100]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000ec6:	f005 fcc3 	bl	8006850 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ed0:	f000 fa34 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	2204      	movs	r2, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000ede:	f005 fcb7 	bl	8006850 <HAL_TIM_PWM_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000ee8:	f000 fa28 	bl	800133c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000f10:	f006 f852 	bl	8006fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000f1a:	f000 fa0f 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MX_TIM1_Init+0x118>)
 8000f20:	f000 fd18 	bl	8001954 <HAL_TIM_MspPostInit>

}
 8000f24:	bf00      	nop
 8000f26:	3748      	adds	r7, #72	; 0x48
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20003ea4 	.word	0x20003ea4
 8000f30:	40010000 	.word	0x40010000

08000f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART2_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	f006 f876 	bl	800705c <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f000 f9e1 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20003eec 	.word	0x20003eec
 8000f84:	40004400 	.word	0x40004400

08000f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_DMA_Init+0x4c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <MX_DMA_Init+0x4c>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_DMA_Init+0x4c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2105      	movs	r1, #5
 8000fae:	2010      	movs	r0, #16
 8000fb0:	f001 fcf9 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fb4:	2010      	movs	r0, #16
 8000fb6:	f001 fd12 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f001 fcf1 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fc4:	2011      	movs	r0, #17
 8000fc6:	f001 fd0a 	bl	80029de <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	4b72      	ldr	r3, [pc, #456]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a71      	ldr	r2, [pc, #452]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b6f      	ldr	r3, [pc, #444]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a6a      	ldr	r2, [pc, #424]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b68      	ldr	r3, [pc, #416]	; (80011bc <MX_GPIO_Init+0x1e4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b64      	ldr	r3, [pc, #400]	; (80011bc <MX_GPIO_Init+0x1e4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a63      	ldr	r2, [pc, #396]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b61      	ldr	r3, [pc, #388]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a5c      	ldr	r2, [pc, #368]	; (80011bc <MX_GPIO_Init+0x1e4>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <MX_GPIO_Init+0x1e4>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <MX_GPIO_Init+0x1e4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2108      	movs	r1, #8
 800109a:	4849      	ldr	r0, [pc, #292]	; (80011c0 <MX_GPIO_Init+0x1e8>)
 800109c:	f002 fa58 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2101      	movs	r1, #1
 80010a4:	4847      	ldr	r0, [pc, #284]	; (80011c4 <MX_GPIO_Init+0x1ec>)
 80010a6:	f002 fa53 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010aa:	2200      	movs	r2, #0
 80010ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010b0:	4845      	ldr	r0, [pc, #276]	; (80011c8 <MX_GPIO_Init+0x1f0>)
 80010b2:	f002 fa4d 	bl	8003550 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010b6:	2308      	movs	r3, #8
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	483c      	ldr	r0, [pc, #240]	; (80011c0 <MX_GPIO_Init+0x1e8>)
 80010ce:	f002 f8a3 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4836      	ldr	r0, [pc, #216]	; (80011c4 <MX_GPIO_Init+0x1ec>)
 80010ea:	f002 f895 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010ee:	2308      	movs	r3, #8
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fe:	2305      	movs	r3, #5
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	482e      	ldr	r0, [pc, #184]	; (80011c4 <MX_GPIO_Init+0x1ec>)
 800110a:	f002 f885 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001112:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	482a      	ldr	r0, [pc, #168]	; (80011cc <MX_GPIO_Init+0x1f4>)
 8001124:	f002 f878 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001128:	2304      	movs	r3, #4
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4825      	ldr	r0, [pc, #148]	; (80011d0 <MX_GPIO_Init+0x1f8>)
 800113c:	f002 f86c 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001152:	2305      	movs	r3, #5
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	481c      	ldr	r0, [pc, #112]	; (80011d0 <MX_GPIO_Init+0x1f8>)
 800115e:	f002 f85b 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001162:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001166:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <MX_GPIO_Init+0x1f0>)
 800117c:	f002 f84c 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001180:	2320      	movs	r3, #32
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_GPIO_Init+0x1f0>)
 8001194:	f002 f840 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800119c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_GPIO_Init+0x1e8>)
 80011ae:	f002 f833 	bl	8003218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400

080011d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b0aa      	sub	sp, #168	; 0xa8
 80011d8:	af02      	add	r7, sp, #8
 80011da:	61f8      	str	r0, [r7, #28]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80011dc:	f00d fb6e 	bl	800e8bc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 80011e0:	4b47      	ldr	r3, [pc, #284]	; (8001300 <StartDefaultTask+0x12c>)
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <StartDefaultTask+0x130>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4b47      	ldr	r3, [pc, #284]	; (8001308 <StartDefaultTask+0x134>)
 80011ea:	4a48      	ldr	r2, [pc, #288]	; (800130c <StartDefaultTask+0x138>)
 80011ec:	4948      	ldr	r1, [pc, #288]	; (8001310 <StartDefaultTask+0x13c>)
 80011ee:	2001      	movs	r0, #1
 80011f0:	f00e f896 	bl	800f320 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80011f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00e f811 	bl	800f220 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80011fe:	4b45      	ldr	r3, [pc, #276]	; (8001314 <StartDefaultTask+0x140>)
 8001200:	67fb      	str	r3, [r7, #124]	; 0x7c
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001202:	4b45      	ldr	r3, [pc, #276]	; (8001318 <StartDefaultTask+0x144>)
 8001204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001208:	4b44      	ldr	r3, [pc, #272]	; (800131c <StartDefaultTask+0x148>)
 800120a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800120e:	4b44      	ldr	r3, [pc, #272]	; (8001320 <StartDefaultTask+0x14c>)
 8001210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001214:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001218:	4618      	mov	r0, r3
 800121a:	f00e f80f 	bl	800f23c <rcutils_set_default_allocator>
 800121e:	4603      	mov	r3, r0
 8001220:	f083 0301 	eor.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 800122a:	f44f 7125 	mov.w	r1, #660	; 0x294
 800122e:	483d      	ldr	r0, [pc, #244]	; (8001324 <StartDefaultTask+0x150>)
 8001230:	f016 ff66 	bl	8018100 <iprintf>
  std_msgs__msg__Int32 msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 8001234:	463b      	mov	r3, r7
 8001236:	4618      	mov	r0, r3
 8001238:	f00e f81e 	bl	800f278 <rcutils_get_default_allocator>
 800123c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001240:	463d      	mov	r5, r7
 8001242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	f00d ff21 	bl	800f09c <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 800125a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800125e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001262:	4a31      	ldr	r2, [pc, #196]	; (8001328 <StartDefaultTask+0x154>)
 8001264:	4931      	ldr	r1, [pc, #196]	; (800132c <StartDefaultTask+0x158>)
 8001266:	f00d ff63 	bl	800f130 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 800126a:	f00e fcdf 	bl	800fc2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800126e:	4602      	mov	r2, r0
 8001270:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001274:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <StartDefaultTask+0x15c>)
 800127a:	f00d ff95 	bl	800f1a8 <rclc_publisher_init_default>

  //msg.data = Read_ADC();

  for(;;)
  {
	  	msg.data = Read_ADC();
 800127e:	f7ff fc27 	bl	8000ad0 <Read_ADC>
 8001282:	4603      	mov	r3, r0
 8001284:	677b      	str	r3, [r7, #116]	; 0x74
	    int sensorValue = Read_ADC();
 8001286:	f7ff fc23 	bl	8000ad0 <Read_ADC>
 800128a:	4603      	mov	r3, r0
 800128c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    if (sensorValue < 2047) // okunan değer / 2 sonucu 2047 bulundu (pot max 4095)
 8001290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001294:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8001298:	4293      	cmp	r3, r2
 800129a:	dc0d      	bgt.n	80012b8 <StartDefaultTask+0xe4>
	     {
	     // reverse rotation
	     int reversePWM = -(sensorValue - 2047) *2; // - (value / (değer/2)) *2
 800129c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012a0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 80012a4:	3307      	adds	r3, #7
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	     //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);  //LPWM
	     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,reversePWM);  //RPWM
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <StartDefaultTask+0x160>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
 80012b6:	e00b      	b.n	80012d0 <StartDefaultTask+0xfc>

	     }
	    else
	     {
	     // forward rotation
	     int forwardPWM = (sensorValue - 2046) * 2; //(value / (değer/2)) *2
 80012b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012bc:	f2a3 73fe 	subw	r3, r3, #2046	; 0x7fe
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,forwardPWM);  //LPWM
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <StartDefaultTask+0x160>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
	     //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);  //RPWM
	     }
    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80012d0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80012d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012d8:	2200      	movs	r2, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f00d feba 	bl	800f054 <rcl_publish>
 80012e0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if (ret != RCL_RET_OK)
 80012e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <StartDefaultTask+0x122>
    {
      printf("Error publishing (line %d)\n", __LINE__);
 80012ec:	f240 21c6 	movw	r1, #710	; 0x2c6
 80012f0:	4811      	ldr	r0, [pc, #68]	; (8001338 <StartDefaultTask+0x164>)
 80012f2:	f016 ff05 	bl	8018100 <iprintf>
    }


    osDelay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f00a fc5e 	bl	800bbb8 <osDelay>
  {
 80012fc:	e7bf      	b.n	800127e <StartDefaultTask+0xaa>
 80012fe:	bf00      	nop
 8001300:	08001e31 	.word	0x08001e31
 8001304:	08001dc9 	.word	0x08001dc9
 8001308:	08001da9 	.word	0x08001da9
 800130c:	08001d7d 	.word	0x08001d7d
 8001310:	20003eec 	.word	0x20003eec
 8001314:	08001349 	.word	0x08001349
 8001318:	0800138d 	.word	0x0800138d
 800131c:	080013c5 	.word	0x080013c5
 8001320:	08001431 	.word	0x08001431
 8001324:	0801922c 	.word	0x0801922c
 8001328:	08019254 	.word	0x08019254
 800132c:	08019258 	.word	0x08019258
 8001330:	08019264 	.word	0x08019264
 8001334:	20003ea4 	.word	0x20003ea4
 8001338:	08019278 	.word	0x08019278

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <microros_allocate+0x3c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <microros_allocate+0x3c>)
 8001360:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <microros_allocate+0x40>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <microros_allocate+0x40>)
 8001370:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff f962 	bl	800063c <pvPortMallocMicroROS>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20003ff4 	.word	0x20003ff4
 8001388:	20003ff8 	.word	0x20003ff8

0800138c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00c      	beq.n	80013b6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fa6b 	bl	8000878 <getBlockSize>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <microros_deallocate+0x34>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <microros_deallocate+0x34>)
 80013ae:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fa07 	bl	80007c4 <vPortFreeMicroROS>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20003ff8 	.word	0x20003ff8

080013c4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <microros_reallocate+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	4413      	add	r3, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <microros_reallocate+0x64>)
 80013de:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <microros_reallocate+0x68>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	4413      	add	r3, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <microros_reallocate+0x68>)
 80013ee:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d104      	bne.n	8001400 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f7ff f920 	bl	800063c <pvPortMallocMicroROS>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e00e      	b.n	800141e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fa39 	bl	8000878 <getBlockSize>
 8001406:	4603      	mov	r3, r0
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <microros_reallocate+0x68>)
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	461a      	mov	r2, r3
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <microros_reallocate+0x68>)
 8001412:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff fa4c 	bl	80008b4 <pvPortReallocMicroROS>
 800141c:	4603      	mov	r3, r0
  }
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20003ff4 	.word	0x20003ff4
 800142c:	20003ff8 	.word	0x20003ff8

08001430 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <microros_zero_allocate+0x48>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4413      	add	r3, r2
 800144a:	461a      	mov	r2, r3
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <microros_zero_allocate+0x48>)
 800144e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <microros_zero_allocate+0x4c>)
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4413      	add	r3, r2
 800145e:	461a      	mov	r2, r3
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <microros_zero_allocate+0x4c>)
 8001462:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fa51 	bl	800090e <pvPortCallocMicroROS>
 800146c:	4603      	mov	r3, r0
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20003ff4 	.word	0x20003ff4
 800147c:	20003ff8 	.word	0x20003ff8

08001480 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001496:	a320      	add	r3, pc, #128	; (adr r3, 8001518 <UTILS_NanosecondsToTimespec+0x98>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7fe ff00 	bl	80002a0 <__aeabi_ldivmod>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80014aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ae:	a31a      	add	r3, pc, #104	; (adr r3, 8001518 <UTILS_NanosecondsToTimespec+0x98>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7fe fef4 	bl	80002a0 <__aeabi_ldivmod>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da20      	bge.n	8001506 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <UTILS_NanosecondsToTimespec+0x90>)
 80014ca:	fb82 1203 	smull	r1, r2, r2, r3
 80014ce:	1712      	asrs	r2, r2, #28
 80014d0:	17db      	asrs	r3, r3, #31
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	17c8      	asrs	r0, r1, #31
 80014e2:	460c      	mov	r4, r1
 80014e4:	4605      	mov	r5, r0
 80014e6:	ebb2 0804 	subs.w	r8, r2, r4
 80014ea:	eb63 0905 	sbc.w	r9, r3, r5
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4906      	ldr	r1, [pc, #24]	; (8001514 <UTILS_NanosecondsToTimespec+0x94>)
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	441a      	add	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]
    }
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001510:	44b82fa1 	.word	0x44b82fa1
 8001514:	3b9aca00 	.word	0x3b9aca00
 8001518:	3b9aca00 	.word	0x3b9aca00
 800151c:	00000000 	.word	0x00000000

08001520 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001524:	b08e      	sub	sp, #56	; 0x38
 8001526:	af00      	add	r7, sp, #0
 8001528:	6278      	str	r0, [r7, #36]	; 0x24
 800152a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800152c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001530:	2300      	movs	r3, #0
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	4618      	mov	r0, r3
 8001548:	f00b ffd4 	bl	800d4f4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	17da      	asrs	r2, r3, #31
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	61fa      	str	r2, [r7, #28]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	69b9      	ldr	r1, [r7, #24]
 800155e:	000b      	movs	r3, r1
 8001560:	2200      	movs	r2, #0
 8001562:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	2200      	movs	r2, #0
 800156a:	461c      	mov	r4, r3
 800156c:	4615      	mov	r5, r2
 800156e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001572:	1911      	adds	r1, r2, r4
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	416b      	adcs	r3, r5
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800157e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001582:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	f04f 0400 	mov.w	r4, #0
 800158e:	f04f 0500 	mov.w	r5, #0
 8001592:	015d      	lsls	r5, r3, #5
 8001594:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001598:	0154      	lsls	r4, r2, #5
 800159a:	4622      	mov	r2, r4
 800159c:	462b      	mov	r3, r5
 800159e:	ebb2 0800 	subs.w	r8, r2, r0
 80015a2:	eb63 0901 	sbc.w	r9, r3, r1
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80015b2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80015b6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80015ba:	4690      	mov	r8, r2
 80015bc:	4699      	mov	r9, r3
 80015be:	eb18 0a00 	adds.w	sl, r8, r0
 80015c2:	eb49 0b01 	adc.w	fp, r9, r1
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015da:	ebb2 040a 	subs.w	r4, r2, sl
 80015de:	603c      	str	r4, [r7, #0]
 80015e0:	eb63 030b 	sbc.w	r3, r3, fp
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ea:	4623      	mov	r3, r4
 80015ec:	181b      	adds	r3, r3, r0
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	462b      	mov	r3, r5
 80015f2:	eb41 0303 	adc.w	r3, r1, r3
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015fe:	f7ff ff3f 	bl	8001480 <UTILS_NanosecondsToTimespec>

    return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	4618      	mov	r0, r3
 8001606:	3738      	adds	r7, #56	; 0x38
 8001608:	46bd      	mov	sp, r7
 800160a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x54>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_MspInit+0x54>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x54>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_MspInit+0x54>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_MspInit+0x54>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_MspInit+0x54>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	210f      	movs	r1, #15
 8001652:	f06f 0001 	mvn.w	r0, #1
 8001656:	f001 f9a6 	bl	80029a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_ADC_MspInit+0x7c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d127      	bne.n	80016da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_ADC_MspInit+0x80>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <HAL_ADC_MspInit+0x80>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_ADC_MspInit+0x80>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_ADC_MspInit+0x80>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_ADC_MspInit+0x80>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_ADC_MspInit+0x80>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016c2:	2302      	movs	r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_ADC_MspInit+0x84>)
 80016d6:	f001 fd9f 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012000 	.word	0x40012000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_I2C_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12c      	bne.n	800176c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0x88>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800172e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001740:	2304      	movs	r3, #4
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	480c      	ldr	r0, [pc, #48]	; (800177c <HAL_I2C_MspInit+0x8c>)
 800174c:	f001 fd64 	bl	8003218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_I2C_MspInit+0x88>)
 800175a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40005400 	.word	0x40005400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <HAL_I2S_MspInit+0xf0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d15a      	bne.n	8001866 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017b0:	2301      	movs	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80017b4:	23c0      	movs	r3, #192	; 0xc0
 80017b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fd65 	bl	8006290 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80017cc:	f7ff fdb6 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a26      	ldr	r2, [pc, #152]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 80017da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6313      	str	r3, [r2, #48]	; 0x30
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <HAL_I2S_MspInit+0xf4>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001824:	2310      	movs	r3, #16
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001834:	2306      	movs	r3, #6
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	480e      	ldr	r0, [pc, #56]	; (8001878 <HAL_I2S_MspInit+0xf8>)
 8001840:	f001 fcea 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001844:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001856:	2306      	movs	r3, #6
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <HAL_I2S_MspInit+0xfc>)
 8001862:	f001 fcd9 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3738      	adds	r7, #56	; 0x38
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40003c00 	.word	0x40003c00
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020800 	.word	0x40020800

08001880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_SPI_MspInit+0x84>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d12b      	bne.n	80018fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_SPI_MspInit+0x88>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_SPI_MspInit+0x88>)
 80018ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_SPI_MspInit+0x88>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_SPI_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_SPI_MspInit+0x88>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_SPI_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018da:	23e0      	movs	r3, #224	; 0xe0
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ea:	2305      	movs	r3, #5
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_SPI_MspInit+0x8c>)
 80018f6:	f001 fc8f 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40013000 	.word	0x40013000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_TIM_PWM_MspInit+0x3c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10d      	bne.n	800193e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_TIM_PWM_MspInit+0x40>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_TIM_PWM_MspInit+0x40>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_TIM_PWM_MspInit+0x40>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40010000 	.word	0x40010000
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_TIM_MspPostInit+0x68>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d11e      	bne.n	80019b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001992:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_TIM_MspPostInit+0x70>)
 80019b0:	f001 fc32 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <HAL_UART_MspInit+0x150>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	f040 8092 	bne.w	8001b10 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_UART_MspInit+0x154>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <HAL_UART_MspInit+0x154>)
 80019f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_UART_MspInit+0x154>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_UART_MspInit+0x154>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <HAL_UART_MspInit+0x154>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6313      	str	r3, [r2, #48]	; 0x30
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <HAL_UART_MspInit+0x154>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a24:	230c      	movs	r3, #12
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a34:	2307      	movs	r3, #7
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4838      	ldr	r0, [pc, #224]	; (8001b20 <HAL_UART_MspInit+0x158>)
 8001a40:	f001 fbea 	bl	8003218 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a44:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a46:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <HAL_UART_MspInit+0x160>)
 8001a48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a50:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a58:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a64:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a72:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a86:	4827      	ldr	r0, [pc, #156]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a88:	f000 ffc4 	bl	8002a14 <HAL_DMA_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001a92:	f7ff fc53 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <HAL_UART_MspInit+0x15c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001aa4:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <HAL_UART_MspInit+0x168>)
 8001aa6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001ad8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001adc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ae4:	4811      	ldr	r0, [pc, #68]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001ae6:	f000 ff95 	bl	8002a14 <HAL_DMA_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001af0:	f7ff fc24 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_UART_MspInit+0x164>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2105      	movs	r1, #5
 8001b04:	2026      	movs	r0, #38	; 0x26
 8001b06:	f000 ff4e 	bl	80029a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b0a:	2026      	movs	r0, #38	; 0x26
 8001b0c:	f000 ff67 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	20003f30 	.word	0x20003f30
 8001b28:	40026088 	.word	0x40026088
 8001b2c:	20003f90 	.word	0x20003f90
 8001b30:	400260a0 	.word	0x400260a0

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b64:	f000 fa34 	bl	8001fd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b68:	f00b fe44 	bl	800d7f4 <xTaskGetSchedulerState>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b72:	f00c fc29 	bl	800e3c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA1_Stream5_IRQHandler+0x10>)
 8001b82:	f001 f8df 	bl	8002d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20003f30 	.word	0x20003f30

08001b90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <DMA1_Stream6_IRQHandler+0x10>)
 8001b96:	f001 f8d5 	bl	8002d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20003f90 	.word	0x20003f90

08001ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <USART2_IRQHandler+0x10>)
 8001baa:	f005 fbd3 	bl	8007354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20003eec 	.word	0x20003eec

08001bb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <OTG_FS_IRQHandler+0x10>)
 8001bbe:	f001 ff4b 	bl	8003a58 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000956c 	.word	0x2000956c

08001bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_kill>:

int _kill(int pid, int sig)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001be6:	f016 fbe1 	bl	80183ac <__errno>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2216      	movs	r2, #22
 8001bee:	601a      	str	r2, [r3, #0]
  return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_exit>:

void _exit (int status)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffe7 	bl	8001bdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c0e:	e7fe      	b.n	8001c0e <_exit+0x12>

08001c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e00a      	b.n	8001c38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c22:	f3af 8000 	nop.w
 8001c26:	4601      	mov	r1, r0
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	60ba      	str	r2, [r7, #8]
 8001c2e:	b2ca      	uxtb	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbf0      	blt.n	8001c22 <_read+0x12>
  }

  return len;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e009      	b.n	8001c70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60ba      	str	r2, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf1      	blt.n	8001c5c <_write+0x12>
  }
  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_close>:

int _close(int file)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001caa:	605a      	str	r2, [r3, #4]
  return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_isatty>:

int _isatty(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f016 fb46 	bl	80183ac <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20020000 	.word	0x20020000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20004000 	.word	0x20004000
 8001d54:	2000e4c8 	.word	0x2000e4c8

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d8a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <cubemx_transport_open+0x28>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f005 fa2e 	bl	80071f4 <HAL_UART_Receive_DMA>
    return true;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20004004 	.word	0x20004004

08001da8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001db6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f005 fa4b 	bl	8007254 <HAL_UART_DMAStop>
    return true;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ddc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d11c      	bne.n	8001e24 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f005 f980 	bl	80070f8 <HAL_UART_Transmit_DMA>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001dfc:	e002      	b.n	8001e04 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f009 feda 	bl	800bbb8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <cubemx_transport_write+0x4e>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d1f3      	bne.n	8001dfe <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <cubemx_transport_write+0x58>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	e002      	b.n	8001e26 <cubemx_transport_write+0x5e>
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001e24:	2300      	movs	r3, #0
    }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e44:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4a:	b672      	cpsid	i
}
 8001e4c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <cubemx_transport_read+0x9c>)
 8001e5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e5e:	b662      	cpsie	i
}
 8001e60:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f009 fea5 	bl	800bbb8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <cubemx_transport_read+0xa0>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <cubemx_transport_read+0x9c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d103      	bne.n	8001e82 <cubemx_transport_read+0x52>
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dbe3      	blt.n	8001e4a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e86:	e011      	b.n	8001eac <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <cubemx_transport_read+0xa0>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	440b      	add	r3, r1
 8001e92:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <cubemx_transport_read+0xa4>)
 8001e94:	5c8a      	ldrb	r2, [r1, r2]
 8001e96:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <cubemx_transport_read+0xa0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <cubemx_transport_read+0xa0>)
 8001ea4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <cubemx_transport_read+0xa0>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <cubemx_transport_read+0x9c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d003      	beq.n	8001ec0 <cubemx_transport_read+0x90>
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3e3      	bcc.n	8001e88 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20004808 	.word	0x20004808
 8001ed0:	20004804 	.word	0x20004804
 8001ed4:	20004004 	.word	0x20004004

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ff29 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f016 fa57 	bl	80183b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe fdff 	bl	8000b0c <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001f1c:	08019e30 	.word	0x08019e30
  ldr r2, =_sbss
 8001f20:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001f24:	2000e4c4 	.word	0x2000e4c4

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_Init+0x40>)
 8001f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_Init+0x40>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x40>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 fd1b 	bl	8002990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f000 f808 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fb56 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x54>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fd33 	bl	80029fa <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fac:	f000 fcfb 	bl	80029a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x5c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	2000000c 	.word	0x2000000c
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	2000480c 	.word	0x2000480c

08001ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_GetTick+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	2000480c 	.word	0x2000480c

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff ffee 	bl	8001ff8 <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffde 	bl	8001ff8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c

08002058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e033      	b.n	80020d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff faf6 	bl	8001668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800209e:	f023 0302 	bic.w	r3, r3, #2
 80020a2:	f043 0202 	orr.w	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 faa4 	bl	80025f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f023 0303 	bic.w	r3, r3, #3
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
 80020c6:	e001      	b.n	80020cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Start+0x1a>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e0b2      	b.n	8002260 <HAL_ADC_Start+0x180>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d018      	beq.n	8002142 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002120:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_ADC_Start+0x18c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_ADC_Start+0x190>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0c9a      	lsrs	r2, r3, #18
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002134:	e002      	b.n	800213c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b01      	subs	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d17a      	bne.n	8002246 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800217a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218e:	d106      	bne.n	800219e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f023 0206 	bic.w	r2, r3, #6
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44
 800219c:	e002      	b.n	80021a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_ADC_Start+0x194>)
 80021ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d12a      	bne.n	800221c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <HAL_ADC_Start+0x198>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d015      	beq.n	80021fc <HAL_ADC_Start+0x11c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <HAL_ADC_Start+0x19c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_Start+0x106>
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_ADC_Start+0x194>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a25      	ldr	r2, [pc, #148]	; (8002280 <HAL_ADC_Start+0x1a0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d136      	bne.n	800225e <HAL_ADC_Start+0x17e>
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_ADC_Start+0x194>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d130      	bne.n	800225e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d129      	bne.n	800225e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	e020      	b.n	800225e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_ADC_Start+0x198>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d11b      	bne.n	800225e <HAL_ADC_Start+0x17e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d114      	bne.n	800225e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e00b      	b.n	800225e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	20000004 	.word	0x20000004
 8002270:	431bde83 	.word	0x431bde83
 8002274:	40012300 	.word	0x40012300
 8002278:	40012000 	.word	0x40012000
 800227c:	40012100 	.word	0x40012100
 8002280:	40012200 	.word	0x40012200

08002284 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a0:	d113      	bne.n	80022ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b0:	d10b      	bne.n	80022ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f043 0220 	orr.w	r2, r3, #32
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e063      	b.n	8002392 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80022ca:	f7ff fe95 	bl	8001ff8 <HAL_GetTick>
 80022ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d0:	e021      	b.n	8002316 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d8:	d01d      	beq.n	8002316 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_ADC_PollForConversion+0x6c>
 80022e0:	f7ff fe8a 	bl	8001ff8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d212      	bcs.n	8002316 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d00b      	beq.n	8002316 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e03d      	b.n	8002392 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d1d6      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0212 	mvn.w	r2, #18
 800232c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d123      	bne.n	8002390 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	d11f      	bne.n	8002390 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x1c>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e105      	b.n	80025dc <HAL_ADC_ConfigChannel+0x228>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b09      	cmp	r3, #9
 80023de:	d925      	bls.n	800242c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68d9      	ldr	r1, [r3, #12]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	3b1e      	subs	r3, #30
 80023f6:	2207      	movs	r2, #7
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43da      	mvns	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	400a      	ands	r2, r1
 8002404:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68d9      	ldr	r1, [r3, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4618      	mov	r0, r3
 8002418:	4603      	mov	r3, r0
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4403      	add	r3, r0
 800241e:	3b1e      	subs	r3, #30
 8002420:	409a      	lsls	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	e022      	b.n	8002472 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6919      	ldr	r1, [r3, #16]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	2207      	movs	r2, #7
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	400a      	ands	r2, r1
 800244e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6919      	ldr	r1, [r3, #16]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	4603      	mov	r3, r0
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4403      	add	r3, r0
 8002468:	409a      	lsls	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b06      	cmp	r3, #6
 8002478:	d824      	bhi.n	80024c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	3b05      	subs	r3, #5
 800248c:	221f      	movs	r2, #31
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	400a      	ands	r2, r1
 800249a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b05      	subs	r3, #5
 80024b6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34
 80024c2:	e04c      	b.n	800255e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d824      	bhi.n	8002516 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b23      	subs	r3, #35	; 0x23
 80024de:	221f      	movs	r2, #31
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43da      	mvns	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	400a      	ands	r2, r1
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	3b23      	subs	r3, #35	; 0x23
 8002508:	fa00 f203 	lsl.w	r2, r0, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
 8002514:	e023      	b.n	800255e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b41      	subs	r3, #65	; 0x41
 8002528:	221f      	movs	r2, #31
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b41      	subs	r3, #65	; 0x41
 8002552:	fa00 f203 	lsl.w	r2, r0, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_ADC_ConfigChannel+0x234>)
 8002560:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <HAL_ADC_ConfigChannel+0x238>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d109      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1cc>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b12      	cmp	r3, #18
 8002572:	d105      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_ADC_ConfigChannel+0x238>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d123      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x21e>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d003      	beq.n	800259a <HAL_ADC_ConfigChannel+0x1e6>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b11      	cmp	r3, #17
 8002598:	d11b      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d111      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_ADC_ConfigChannel+0x23c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_ADC_ConfigChannel+0x240>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	0c9a      	lsrs	r2, r3, #18
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025c4:	e002      	b.n	80025cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f9      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40012300 	.word	0x40012300
 80025ec:	40012000 	.word	0x40012000
 80025f0:	20000004 	.word	0x20000004
 80025f4:	431bde83 	.word	0x431bde83

080025f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002600:	4b79      	ldr	r3, [pc, #484]	; (80027e8 <ADC_Init+0x1f0>)
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	021a      	lsls	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	4a58      	ldr	r2, [pc, #352]	; (80027ec <ADC_Init+0x1f4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d022      	beq.n	80026d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800269e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6899      	ldr	r1, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	e00f      	b.n	80026f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0202 	bic.w	r2, r2, #2
 8002704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7e1b      	ldrb	r3, [r3, #24]
 8002710:	005a      	lsls	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002732:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002742:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	3b01      	subs	r3, #1
 8002750:	035a      	lsls	r2, r3, #13
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e007      	b.n	800276c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	3b01      	subs	r3, #1
 8002788:	051a      	lsls	r2, r3, #20
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027ae:	025a      	lsls	r2, r3, #9
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	029a      	lsls	r2, r3, #10
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40012300 	.word	0x40012300
 80027ec:	0f000001 	.word	0x0f000001

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4907      	ldr	r1, [pc, #28]	; (800288c <__NVIC_EnableIRQ+0x38>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db0a      	blt.n	80028ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <__NVIC_SetPriority+0x4c>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	440b      	add	r3, r1
 80028b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b8:	e00a      	b.n	80028d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4908      	ldr	r1, [pc, #32]	; (80028e0 <__NVIC_SetPriority+0x50>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	440b      	add	r3, r1
 80028ce:	761a      	strb	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	2b04      	cmp	r3, #4
 8002900:	bf28      	it	cs
 8002902:	2304      	movcs	r3, #4
 8002904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3304      	adds	r3, #4
 800290a:	2b06      	cmp	r3, #6
 800290c:	d902      	bls.n	8002914 <NVIC_EncodePriority+0x30>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3b03      	subs	r3, #3
 8002912:	e000      	b.n	8002916 <NVIC_EncodePriority+0x32>
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43d9      	mvns	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	4313      	orrs	r3, r2
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295c:	d301      	bcc.n	8002962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <SysTick_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296a:	210f      	movs	r1, #15
 800296c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002970:	f7ff ff8e 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <SysTick_Config+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <SysTick_Config+0x40>)
 800297c:	2207      	movs	r2, #7
 800297e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff29 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff3e 	bl	8002838 <__NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff8e 	bl	80028e4 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff5d 	bl	8002890 <__NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff31 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffa2 	bl	800294c <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff faea 	bl	8001ff8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e099      	b.n	8002b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a50:	e00f      	b.n	8002a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a52:	f7ff fad1 	bl	8001ff8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d908      	bls.n	8002a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e078      	b.n	8002b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e8      	bne.n	8002a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_DMA_Init+0x158>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d107      	bne.n	8002adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0307 	bic.w	r3, r3, #7
 8002af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d117      	bne.n	8002b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fb01 	bl	8003120 <DMA_CheckFifoParam>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b32:	2301      	movs	r3, #1
 8002b34:	e016      	b.n	8002b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fab8 	bl	80030b4 <DMA_CalcBaseAndBitshift>
 8002b44:	4603      	mov	r3, r0
 8002b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	223f      	movs	r2, #63	; 0x3f
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	f010803f 	.word	0xf010803f

08002b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA_Start_IT+0x26>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e040      	b.n	8002c18 <HAL_DMA_Start_IT+0xa8>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d12f      	bne.n	8002c0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fa4a 	bl	8003058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	223f      	movs	r2, #63	; 0x3f
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0216 	orr.w	r2, r2, #22
 8002bde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e005      	b.n	8002c16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
 8002c14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7ff f9e3 	bl	8001ff8 <HAL_GetTick>
 8002c32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d008      	beq.n	8002c52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e052      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_Abort+0x62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca2:	e013      	b.n	8002ccc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca4:	f7ff f9a8 	bl	8001ff8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d90c      	bls.n	8002ccc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e015      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e4      	bne.n	8002ca4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	223f      	movs	r2, #63	; 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00c      	b.n	8002d38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2205      	movs	r2, #5
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d50:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <HAL_DMA_IRQHandler+0x248>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a8e      	ldr	r2, [pc, #568]	; (8002f90 <HAL_DMA_IRQHandler+0x24c>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	0a9b      	lsrs	r3, r3, #10
 8002d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2208      	movs	r2, #8
 8002d70:	409a      	lsls	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0204 	bic.w	r2, r2, #4
 8002d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	2201      	movs	r2, #1
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	2204      	movs	r2, #4
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d012      	beq.n	8002e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2204      	movs	r2, #4
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	2210      	movs	r2, #16
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d043      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03c      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	2210      	movs	r2, #16
 8002e40:	409a      	lsls	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d024      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
 8002e72:	e01f      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
 8002e84:	e016      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0208 	bic.w	r2, r2, #8
 8002ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2220      	movs	r2, #32
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 808f 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8087 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	2220      	movs	r2, #32
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d136      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0216 	bic.w	r2, r2, #22
 8002efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x1da>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0208 	bic.w	r2, r2, #8
 8002f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	223f      	movs	r2, #63	; 0x3f
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d07e      	beq.n	8003050 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
        }
        return;
 8002f5a:	e079      	b.n	8003050 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d031      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e02c      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
 8002f8a:	bf00      	nop
 8002f8c:	20000004 	.word	0x20000004
 8002f90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d023      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
 8002fa4:	e01e      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0210 	bic.w	r2, r2, #16
 8002fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d032      	beq.n	8003052 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d022      	beq.n	800303e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2205      	movs	r2, #5
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3301      	adds	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	d307      	bcc.n	800302c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f2      	bne.n	8003010 <HAL_DMA_IRQHandler+0x2cc>
 800302a:	e000      	b.n	800302e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800302c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	e000      	b.n	8003052 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003050:	bf00      	nop
    }
  }
}
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d108      	bne.n	8003098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003096:	e007      	b.n	80030a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3b10      	subs	r3, #16
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <DMA_CalcBaseAndBitshift+0x64>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <DMA_CalcBaseAndBitshift+0x68>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d909      	bls.n	80030f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	659a      	str	r2, [r3, #88]	; 0x58
 80030f4:	e007      	b.n	8003106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	aaaaaaab 	.word	0xaaaaaaab
 800311c:	08019304 	.word	0x08019304

08003120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11f      	bne.n	800317a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d856      	bhi.n	80031ee <DMA_CheckFifoParam+0xce>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <DMA_CheckFifoParam+0x28>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	0800316b 	.word	0x0800316b
 8003150:	08003159 	.word	0x08003159
 8003154:	080031ef 	.word	0x080031ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d046      	beq.n	80031f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003168:	e043      	b.n	80031f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003172:	d140      	bne.n	80031f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003178:	e03d      	b.n	80031f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d121      	bne.n	80031c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d837      	bhi.n	80031fa <DMA_CheckFifoParam+0xda>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <DMA_CheckFifoParam+0x70>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031a7 	.word	0x080031a7
 8003198:	080031a1 	.word	0x080031a1
 800319c:	080031b9 	.word	0x080031b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e030      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d025      	beq.n	80031fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b6:	e022      	b.n	80031fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031c6:	e01c      	b.n	8003202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d903      	bls.n	80031d6 <DMA_CheckFifoParam+0xb6>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031d4:	e018      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      break;
 80031da:	e015      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e00b      	b.n	8003206 <DMA_CheckFifoParam+0xe6>
      break;
 80031ee:	bf00      	nop
 80031f0:	e00a      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e008      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e006      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e004      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;   
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
    }
  } 
  
  return status; 
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	e16b      	b.n	800350c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003234:	2201      	movs	r2, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 815a 	bne.w	8003506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d005      	beq.n	800326a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003266:	2b02      	cmp	r3, #2
 8003268:	d130      	bne.n	80032cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 0201 	and.w	r2, r3, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d017      	beq.n	8003308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d123      	bne.n	800335c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80b4 	beq.w	8003506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b60      	ldr	r3, [pc, #384]	; (8003524 <HAL_GPIO_Init+0x30c>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a5f      	ldr	r2, [pc, #380]	; (8003524 <HAL_GPIO_Init+0x30c>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <HAL_GPIO_Init+0x30c>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ba:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_GPIO_Init+0x310>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_GPIO_Init+0x314>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <HAL_GPIO_Init+0x226>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_GPIO_Init+0x318>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d025      	beq.n	800343a <HAL_GPIO_Init+0x222>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a50      	ldr	r2, [pc, #320]	; (8003534 <HAL_GPIO_Init+0x31c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4f      	ldr	r2, [pc, #316]	; (8003538 <HAL_GPIO_Init+0x320>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d019      	beq.n	8003432 <HAL_GPIO_Init+0x21a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4e      	ldr	r2, [pc, #312]	; (800353c <HAL_GPIO_Init+0x324>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_GPIO_Init+0x216>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4d      	ldr	r2, [pc, #308]	; (8003540 <HAL_GPIO_Init+0x328>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_GPIO_Init+0x212>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4c      	ldr	r2, [pc, #304]	; (8003544 <HAL_GPIO_Init+0x32c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <HAL_GPIO_Init+0x20e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <HAL_GPIO_Init+0x330>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_GPIO_Init+0x20a>
 800341e:	2307      	movs	r3, #7
 8003420:	e00e      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003422:	2308      	movs	r3, #8
 8003424:	e00c      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003426:	2306      	movs	r3, #6
 8003428:	e00a      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800342a:	2305      	movs	r3, #5
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800342e:	2304      	movs	r3, #4
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800343e:	2300      	movs	r3, #0
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f002 0203 	and.w	r2, r2, #3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003450:	4935      	ldr	r1, [pc, #212]	; (8003528 <HAL_GPIO_Init+0x310>)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_GPIO_Init+0x334>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003482:	4a32      	ldr	r2, [pc, #200]	; (800354c <HAL_GPIO_Init+0x334>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003488:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_GPIO_Init+0x334>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034ac:	4a27      	ldr	r2, [pc, #156]	; (800354c <HAL_GPIO_Init+0x334>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_GPIO_Init+0x334>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <HAL_GPIO_Init+0x334>)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_GPIO_Init+0x334>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003500:	4a12      	ldr	r2, [pc, #72]	; (800354c <HAL_GPIO_Init+0x334>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f ae90 	bls.w	8003234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	; 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40013800 	.word	0x40013800
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00
 800353c:	40021000 	.word	0x40021000
 8003540:	40021400 	.word	0x40021400
 8003544:	40021800 	.word	0x40021800
 8003548:	40021c00 	.word	0x40021c00
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003584:	b08f      	sub	sp, #60	; 0x3c
 8003586:	af0a      	add	r7, sp, #40	; 0x28
 8003588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e054      	b.n	800363e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f00b f9d8 	bl	800e964 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2203      	movs	r2, #3
 80035b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f005 f824 	bl	8008620 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	687e      	ldr	r6, [r7, #4]
 80035e0:	466d      	mov	r5, sp
 80035e2:	f106 0410 	add.w	r4, r6, #16
 80035e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035f6:	1d33      	adds	r3, r6, #4
 80035f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	f004 ff9e 	bl	800853c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f005 f81b 	bl	8008642 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	687e      	ldr	r6, [r7, #4]
 8003614:	466d      	mov	r5, sp
 8003616:	f106 0410 	add.w	r4, r6, #16
 800361a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003626:	e885 0003 	stmia.w	r5, {r0, r1}
 800362a:	1d33      	adds	r3, r6, #4
 800362c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362e:	6838      	ldr	r0, [r7, #0]
 8003630:	f005 f9a4 	bl	800897c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003646 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003646:	b590      	push	{r4, r7, lr}
 8003648:	b089      	sub	sp, #36	; 0x24
 800364a:	af04      	add	r7, sp, #16
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	4608      	mov	r0, r1
 8003650:	4611      	mov	r1, r2
 8003652:	461a      	mov	r2, r3
 8003654:	4603      	mov	r3, r0
 8003656:	70fb      	strb	r3, [r7, #3]
 8003658:	460b      	mov	r3, r1
 800365a:	70bb      	strb	r3, [r7, #2]
 800365c:	4613      	mov	r3, r2
 800365e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_HCD_HC_Init+0x28>
 800366a:	2302      	movs	r3, #2
 800366c:	e076      	b.n	800375c <HAL_HCD_HC_Init+0x116>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	333d      	adds	r3, #61	; 0x3d
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	3338      	adds	r3, #56	; 0x38
 8003696:	787a      	ldrb	r2, [r7, #1]
 8003698:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	3340      	adds	r3, #64	; 0x40
 80036a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	3339      	adds	r3, #57	; 0x39
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	333f      	adds	r3, #63	; 0x3f
 80036cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80036d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	78ba      	ldrb	r2, [r7, #2]
 80036d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036da:	b2d0      	uxtb	r0, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	333a      	adds	r3, #58	; 0x3a
 80036e8:	4602      	mov	r2, r0
 80036ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80036ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	da09      	bge.n	8003708 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	333b      	adds	r3, #59	; 0x3b
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e008      	b.n	800371a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	333b      	adds	r3, #59	; 0x3b
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	333c      	adds	r3, #60	; 0x3c
 8003728:	f897 2020 	ldrb.w	r2, [r7, #32]
 800372c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	787c      	ldrb	r4, [r7, #1]
 8003734:	78ba      	ldrb	r2, [r7, #2]
 8003736:	78f9      	ldrb	r1, [r7, #3]
 8003738:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800373a:	9302      	str	r3, [sp, #8]
 800373c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4623      	mov	r3, r4
 800374a:	f005 fa9d 	bl	8008c88 <USB_HC_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}

08003764 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_HCD_HC_Halt+0x1e>
 800377e:	2302      	movs	r3, #2
 8003780:	e00f      	b.n	80037a2 <HAL_HCD_HC_Halt+0x3e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f005 fced 	bl	8009172 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	461a      	mov	r2, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	70fb      	strb	r3, [r7, #3]
 80037be:	460b      	mov	r3, r1
 80037c0:	70bb      	strb	r3, [r7, #2]
 80037c2:	4613      	mov	r3, r2
 80037c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	333b      	adds	r3, #59	; 0x3b
 80037d4:	78ba      	ldrb	r2, [r7, #2]
 80037d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	333f      	adds	r3, #63	; 0x3f
 80037e6:	787a      	ldrb	r2, [r7, #1]
 80037e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037ea:	7c3b      	ldrb	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d112      	bne.n	8003816 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3342      	adds	r3, #66	; 0x42
 80037fe:	2203      	movs	r2, #3
 8003800:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	333d      	adds	r3, #61	; 0x3d
 8003810:	7f3a      	ldrb	r2, [r7, #28]
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e008      	b.n	8003828 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	3342      	adds	r3, #66	; 0x42
 8003824:	2202      	movs	r2, #2
 8003826:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003828:	787b      	ldrb	r3, [r7, #1]
 800382a:	2b03      	cmp	r3, #3
 800382c:	f200 80c6 	bhi.w	80039bc <HAL_HCD_HC_SubmitRequest+0x210>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003849 	.word	0x08003849
 800383c:	080039a9 	.word	0x080039a9
 8003840:	080038ad 	.word	0x080038ad
 8003844:	0800392b 	.word	0x0800392b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003848:	7c3b      	ldrb	r3, [r7, #16]
 800384a:	2b01      	cmp	r3, #1
 800384c:	f040 80b8 	bne.w	80039c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003850:	78bb      	ldrb	r3, [r7, #2]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 80b4 	bne.w	80039c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003858:	8b3b      	ldrh	r3, [r7, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d108      	bne.n	8003870 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	3355      	adds	r3, #85	; 0x55
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3355      	adds	r3, #85	; 0x55
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3342      	adds	r3, #66	; 0x42
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003896:	e093      	b.n	80039c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3342      	adds	r3, #66	; 0x42
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]
      break;
 80038aa:	e089      	b.n	80039c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038ac:	78bb      	ldrb	r3, [r7, #2]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11d      	bne.n	80038ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3355      	adds	r3, #85	; 0x55
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3342      	adds	r3, #66	; 0x42
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038d8:	e073      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3342      	adds	r3, #66	; 0x42
 80038e8:	2202      	movs	r2, #2
 80038ea:	701a      	strb	r2, [r3, #0]
      break;
 80038ec:	e069      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3354      	adds	r3, #84	; 0x54
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	3342      	adds	r3, #66	; 0x42
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
      break;
 8003914:	e055      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3342      	adds	r3, #66	; 0x42
 8003924:	2202      	movs	r2, #2
 8003926:	701a      	strb	r2, [r3, #0]
      break;
 8003928:	e04b      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800392a:	78bb      	ldrb	r3, [r7, #2]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11d      	bne.n	800396c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3355      	adds	r3, #85	; 0x55
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3342      	adds	r3, #66	; 0x42
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003956:	e034      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	3342      	adds	r3, #66	; 0x42
 8003966:	2202      	movs	r2, #2
 8003968:	701a      	strb	r2, [r3, #0]
      break;
 800396a:	e02a      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3354      	adds	r3, #84	; 0x54
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3342      	adds	r3, #66	; 0x42
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
      break;
 8003992:	e016      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3342      	adds	r3, #66	; 0x42
 80039a2:	2202      	movs	r2, #2
 80039a4:	701a      	strb	r2, [r3, #0]
      break;
 80039a6:	e00c      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3342      	adds	r3, #66	; 0x42
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80039c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3344      	adds	r3, #68	; 0x44
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	8b3a      	ldrh	r2, [r7, #24]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	202c      	movs	r0, #44	; 0x2c
 80039dc:	fb00 f303 	mul.w	r3, r0, r3
 80039e0:	440b      	add	r3, r1
 80039e2:	334c      	adds	r3, #76	; 0x4c
 80039e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039e6:	78fb      	ldrb	r3, [r7, #3]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3360      	adds	r3, #96	; 0x60
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3350      	adds	r3, #80	; 0x50
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	3339      	adds	r3, #57	; 0x39
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3361      	adds	r3, #97	; 0x61
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	222c      	movs	r2, #44	; 0x2c
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	3338      	adds	r3, #56	; 0x38
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	18d1      	adds	r1, r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	f005 fa40 	bl	8008ecc <USB_HC_StartXfer>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop

08003a58 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 ff41 	bl	80088f6 <USB_GetMode>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	f040 80f6 	bne.w	8003c68 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 ff25 	bl	80088d0 <USB_ReadInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80ec 	beq.w	8003c66 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 ff1c 	bl	80088d0 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aa2:	d104      	bne.n	8003aae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003aac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 ff0c 	bl	80088d0 <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac2:	d104      	bne.n	8003ace <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003acc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 fefc 	bl	80088d0 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ae2:	d104      	bne.n	8003aee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f004 feec 	bl	80088d0 <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d103      	bne.n	8003b0a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2202      	movs	r2, #2
 8003b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 fede 	bl	80088d0 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b1e:	d11c      	bne.n	8003b5a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b28:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b3a:	2110      	movs	r1, #16
 8003b3c:	6938      	ldr	r0, [r7, #16]
 8003b3e:	f004 fdcd 	bl	80086dc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b42:	6938      	ldr	r0, [r7, #16]
 8003b44:	f004 fdfe 	bl	8008744 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 ffd4 	bl	8008afc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f00a ff83 	bl	800ea60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 feb6 	bl	80088d0 <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b6e:	d102      	bne.n	8003b76 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f001 f89e 	bl	8004cb2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fea8 	bl	80088d0 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d106      	bne.n	8003b98 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f00a ff4c 	bl	800ea28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2208      	movs	r2, #8
 8003b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 fe97 	bl	80088d0 <USB_ReadInterrupts>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d101      	bne.n	8003bb0 <HAL_HCD_IRQHandler+0x158>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_HCD_IRQHandler+0x15a>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0210 	bic.w	r2, r2, #16
 8003bc4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 ffa1 	bl	8004b0e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0210 	orr.w	r2, r2, #16
 8003bda:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f004 fe75 	bl	80088d0 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf0:	d13a      	bne.n	8003c68 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f005 faaa 	bl	8009150 <USB_HC_ReadInterrupt>
 8003bfc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e025      	b.n	8003c50 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d018      	beq.n	8003c4a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2e:	d106      	bne.n	8003c3e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8ab 	bl	8003d92 <HCD_HC_IN_IRQHandler>
 8003c3c:	e005      	b.n	8003c4a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fbf9 	bl	800443c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3d4      	bcc.n	8003c04 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c62:	615a      	str	r2, [r3, #20]
 8003c64:	e000      	b.n	8003c68 <HAL_HCD_IRQHandler+0x210>
      return;
 8003c66:	bf00      	nop
    }
  }
}
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_HCD_Start+0x16>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e013      	b.n	8003cac <HAL_HCD_Start+0x3e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 ff96 	bl	8008bc4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f004 fcae 	bl	80085fe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_HCD_Stop+0x16>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e00d      	b.n	8003ce6 <HAL_HCD_Stop+0x32>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f005 fb84 	bl	80093e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f004 ff38 	bl	8008b70 <USB_ResetPort>
 8003d00:	4603      	mov	r3, r0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	3360      	adds	r3, #96	; 0x60
 8003d24:	781b      	ldrb	r3, [r3, #0]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	212c      	movs	r1, #44	; 0x2c
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	4413      	add	r3, r2
 8003d4a:	3350      	adds	r3, #80	; 0x50
 8003d4c:	681b      	ldr	r3, [r3, #0]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 ff7c 	bl	8008c64 <USB_GetCurrentFrame>
 8003d6c:	4603      	mov	r3, r0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f004 ff57 	bl	8008c36 <USB_GetHostSpeed>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d11a      	bne.n	8003df8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3361      	adds	r3, #97	; 0x61
 8003de2:	2206      	movs	r2, #6
 8003de4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f005 f9be 	bl	8009172 <USB_HC_Halt>
 8003df6:	e0af      	b.n	8003f58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0e:	d11b      	bne.n	8003e48 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	3361      	adds	r3, #97	; 0x61
 8003e32:	2207      	movs	r2, #7
 8003e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 f996 	bl	8009172 <USB_HC_Halt>
 8003e46:	e087      	b.n	8003f58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d109      	bne.n	8003e72 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	6093      	str	r3, [r2, #8]
 8003e70:	e072      	b.n	8003f58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d11a      	bne.n	8003ebe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	461a      	mov	r2, r3
 8003e96:	2308      	movs	r3, #8
 8003e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3361      	adds	r3, #97	; 0x61
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f005 f95b 	bl	8009172 <USB_HC_Halt>
 8003ebc:	e04c      	b.n	8003f58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d11b      	bne.n	8003f0e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3361      	adds	r3, #97	; 0x61
 8003ef8:	2208      	movs	r2, #8
 8003efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f005 f933 	bl	8009172 <USB_HC_Halt>
 8003f0c:	e024      	b.n	8003f58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d119      	bne.n	8003f58 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	3361      	adds	r3, #97	; 0x61
 8003f44:	2206      	movs	r2, #6
 8003f46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f005 f90d 	bl	8009172 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6e:	d112      	bne.n	8003f96 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f005 f8f9 	bl	8009172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f92:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003f94:	e24e      	b.n	8004434 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	f040 80df 	bne.w	800416c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3348      	adds	r3, #72	; 0x48
 8003fc4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003fd8:	1ad2      	subs	r2, r2, r3
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	202c      	movs	r0, #44	; 0x2c
 8003fe0:	fb00 f303 	mul.w	r3, r0, r3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3350      	adds	r3, #80	; 0x50
 8003fe8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3361      	adds	r3, #97	; 0x61
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	335c      	adds	r3, #92	; 0x5c
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401a:	461a      	mov	r2, r3
 800401c:	2301      	movs	r3, #1
 800401e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	333f      	adds	r3, #63	; 0x3f
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	333f      	adds	r3, #63	; 0x3f
 8004042:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004044:	2b02      	cmp	r3, #2
 8004046:	d111      	bne.n	800406c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f005 f88d 	bl	8009172 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004064:	461a      	mov	r2, r3
 8004066:	2310      	movs	r3, #16
 8004068:	6093      	str	r3, [r2, #8]
 800406a:	e03a      	b.n	80040e2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	333f      	adds	r3, #63	; 0x3f
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b03      	cmp	r3, #3
 800407e:	d009      	beq.n	8004094 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	333f      	adds	r3, #63	; 0x3f
 800408e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004090:	2b01      	cmp	r3, #1
 8004092:	d126      	bne.n	80040e2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	0151      	lsls	r1, r2, #5
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	440a      	add	r2, r1
 80040aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	3360      	adds	r3, #96	; 0x60
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	b2d9      	uxtb	r1, r3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	202c      	movs	r0, #44	; 0x2c
 80040d0:	fb00 f303 	mul.w	r3, r0, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	3360      	adds	r3, #96	; 0x60
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f00a fccd 	bl	800ea7c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d12b      	bne.n	8004142 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3348      	adds	r3, #72	; 0x48
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	202c      	movs	r0, #44	; 0x2c
 8004100:	fb00 f202 	mul.w	r2, r0, r2
 8004104:	440a      	add	r2, r1
 8004106:	3240      	adds	r2, #64	; 0x40
 8004108:	8812      	ldrh	r2, [r2, #0]
 800410a:	fbb3 f3f2 	udiv	r3, r3, r2
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 818e 	beq.w	8004434 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3354      	adds	r3, #84	; 0x54
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f083 0301 	eor.w	r3, r3, #1
 800412c:	b2d8      	uxtb	r0, r3
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	3354      	adds	r3, #84	; 0x54
 800413c:	4602      	mov	r2, r0
 800413e:	701a      	strb	r2, [r3, #0]
}
 8004140:	e178      	b.n	8004434 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3354      	adds	r3, #84	; 0x54
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f083 0301 	eor.w	r3, r3, #1
 8004156:	b2d8      	uxtb	r0, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3354      	adds	r3, #84	; 0x54
 8004166:	4602      	mov	r2, r0
 8004168:	701a      	strb	r2, [r3, #0]
}
 800416a:	e163      	b.n	8004434 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	f040 80f6 	bne.w	8004370 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3361      	adds	r3, #97	; 0x61
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d109      	bne.n	80041ac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3360      	adds	r3, #96	; 0x60
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e0c9      	b.n	8004340 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3361      	adds	r3, #97	; 0x61
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d109      	bne.n	80041d4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3360      	adds	r3, #96	; 0x60
 80041ce:	2205      	movs	r2, #5
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	e0b5      	b.n	8004340 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	212c      	movs	r1, #44	; 0x2c
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	3361      	adds	r3, #97	; 0x61
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d009      	beq.n	80041fc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	3361      	adds	r3, #97	; 0x61
 80041f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d150      	bne.n	800429e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	335c      	adds	r3, #92	; 0x5c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	202c      	movs	r0, #44	; 0x2c
 8004214:	fb00 f303 	mul.w	r3, r0, r3
 8004218:	440b      	add	r3, r1
 800421a:	335c      	adds	r3, #92	; 0x5c
 800421c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	335c      	adds	r3, #92	; 0x5c
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d912      	bls.n	8004258 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3360      	adds	r3, #96	; 0x60
 8004252:	2204      	movs	r2, #4
 8004254:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004256:	e073      	b.n	8004340 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3360      	adds	r3, #96	; 0x60
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004280:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004288:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4413      	add	r3, r2
 8004292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800429c:	e050      	b.n	8004340 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	212c      	movs	r1, #44	; 0x2c
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	3361      	adds	r3, #97	; 0x61
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d122      	bne.n	80042f8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3360      	adds	r3, #96	; 0x60
 80042c0:	2202      	movs	r2, #2
 80042c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f0:	461a      	mov	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e023      	b.n	8004340 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3361      	adds	r3, #97	; 0x61
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b07      	cmp	r3, #7
 800430a:	d119      	bne.n	8004340 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	335c      	adds	r3, #92	; 0x5c
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	202c      	movs	r0, #44	; 0x2c
 8004324:	fb00 f303 	mul.w	r3, r0, r3
 8004328:	440b      	add	r3, r1
 800432a:	335c      	adds	r3, #92	; 0x5c
 800432c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3360      	adds	r3, #96	; 0x60
 800433c:	2204      	movs	r2, #4
 800433e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434c:	461a      	mov	r2, r3
 800434e:	2302      	movs	r3, #2
 8004350:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	b2d9      	uxtb	r1, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	202c      	movs	r0, #44	; 0x2c
 800435c:	fb00 f303 	mul.w	r3, r0, r3
 8004360:	4413      	add	r3, r2
 8004362:	3360      	adds	r3, #96	; 0x60
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f00a fb87 	bl	800ea7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800436e:	e061      	b.n	8004434 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b10      	cmp	r3, #16
 8004384:	d156      	bne.n	8004434 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	333f      	adds	r3, #63	; 0x3f
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d111      	bne.n	80043be <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	335c      	adds	r3, #92	; 0x5c
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f004 fedb 	bl	8009172 <USB_HC_Halt>
 80043bc:	e031      	b.n	8004422 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	212c      	movs	r1, #44	; 0x2c
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	4413      	add	r3, r2
 80043ca:	333f      	adds	r3, #63	; 0x3f
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	333f      	adds	r3, #63	; 0x3f
 80043e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d11d      	bne.n	8004422 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	335c      	adds	r3, #92	; 0x5c
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d110      	bne.n	8004422 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3361      	adds	r3, #97	; 0x61
 800440e:	2203      	movs	r2, #3
 8004410:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f004 fea8 	bl	8009172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	461a      	mov	r2, r3
 8004430:	2310      	movs	r3, #16
 8004432:	6093      	str	r3, [r2, #8]
}
 8004434:	bf00      	nop
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d11a      	bne.n	80044a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4413      	add	r3, r2
 8004474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004478:	461a      	mov	r2, r3
 800447a:	2304      	movs	r3, #4
 800447c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	3361      	adds	r3, #97	; 0x61
 800448c:	2206      	movs	r2, #6
 800448e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fe69 	bl	8009172 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80044a0:	e331      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d12e      	bne.n	8004516 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c4:	461a      	mov	r2, r3
 80044c6:	2320      	movs	r3, #32
 80044c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	212c      	movs	r1, #44	; 0x2c
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	333d      	adds	r3, #61	; 0x3d
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	f040 8313 	bne.w	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	333d      	adds	r3, #61	; 0x3d
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3360      	adds	r3, #96	; 0x60
 8004500:	2202      	movs	r2, #2
 8004502:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f004 fe2f 	bl	8009172 <USB_HC_Halt>
}
 8004514:	e2f7      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	4413      	add	r3, r2
 800451e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452c:	d112      	bne.n	8004554 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	461a      	mov	r2, r3
 800453c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004540:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f004 fe10 	bl	8009172 <USB_HC_Halt>
}
 8004552:	e2d8      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d140      	bne.n	80045ec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	335c      	adds	r3, #92	; 0x5c
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d111      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	212c      	movs	r1, #44	; 0x2c
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	333d      	adds	r3, #61	; 0x3d
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b0:	461a      	mov	r2, r3
 80045b2:	2340      	movs	r3, #64	; 0x40
 80045b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	461a      	mov	r2, r3
 80045c4:	2301      	movs	r3, #1
 80045c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	3361      	adds	r3, #97	; 0x61
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f004 fdc4 	bl	8009172 <USB_HC_Halt>
}
 80045ea:	e28c      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d12c      	bne.n	800465c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	3361      	adds	r3, #97	; 0x61
 8004610:	2204      	movs	r2, #4
 8004612:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	333d      	adds	r3, #61	; 0x3d
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	212c      	movs	r1, #44	; 0x2c
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	335c      	adds	r3, #92	; 0x5c
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f004 fd95 	bl	8009172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	4413      	add	r3, r2
 8004650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004654:	461a      	mov	r2, r3
 8004656:	2340      	movs	r3, #64	; 0x40
 8004658:	6093      	str	r3, [r2, #8]
}
 800465a:	e254      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11a      	bne.n	80046a8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467e:	461a      	mov	r2, r3
 8004680:	2308      	movs	r3, #8
 8004682:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	3361      	adds	r3, #97	; 0x61
 8004692:	2205      	movs	r2, #5
 8004694:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f004 fd66 	bl	8009172 <USB_HC_Halt>
}
 80046a6:	e22e      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d140      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	212c      	movs	r1, #44	; 0x2c
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4413      	add	r3, r2
 80046ca:	335c      	adds	r3, #92	; 0x5c
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	212c      	movs	r1, #44	; 0x2c
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	4413      	add	r3, r2
 80046dc:	3361      	adds	r3, #97	; 0x61
 80046de:	2203      	movs	r2, #3
 80046e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	212c      	movs	r1, #44	; 0x2c
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	333d      	adds	r3, #61	; 0x3d
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d112      	bne.n	800471c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	212c      	movs	r1, #44	; 0x2c
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	4413      	add	r3, r2
 8004702:	333c      	adds	r3, #60	; 0x3c
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d108      	bne.n	800471c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	333d      	adds	r3, #61	; 0x3d
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f004 fd23 	bl	8009172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	461a      	mov	r2, r3
 800473a:	2310      	movs	r3, #16
 800473c:	6093      	str	r3, [r2, #8]
}
 800473e:	e1e2      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b80      	cmp	r3, #128	; 0x80
 8004754:	d164      	bne.n	8004820 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d111      	bne.n	8004782 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	3361      	adds	r3, #97	; 0x61
 800476c:	2206      	movs	r2, #6
 800476e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f004 fcf9 	bl	8009172 <USB_HC_Halt>
 8004780:	e044      	b.n	800480c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	335c      	adds	r3, #92	; 0x5c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	202c      	movs	r0, #44	; 0x2c
 800479a:	fb00 f303 	mul.w	r3, r0, r3
 800479e:	440b      	add	r3, r1
 80047a0:	335c      	adds	r3, #92	; 0x5c
 80047a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	335c      	adds	r3, #92	; 0x5c
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d920      	bls.n	80047fa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	335c      	adds	r3, #92	; 0x5c
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	212c      	movs	r1, #44	; 0x2c
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	4413      	add	r3, r2
 80047d6:	3360      	adds	r3, #96	; 0x60
 80047d8:	2204      	movs	r2, #4
 80047da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	b2d9      	uxtb	r1, r3
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	202c      	movs	r0, #44	; 0x2c
 80047e6:	fb00 f303 	mul.w	r3, r0, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	3360      	adds	r3, #96	; 0x60
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f00a f942 	bl	800ea7c <HAL_HCD_HC_NotifyURBChange_Callback>
 80047f8:	e008      	b.n	800480c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	3360      	adds	r3, #96	; 0x60
 8004808:	2202      	movs	r2, #2
 800480a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	461a      	mov	r2, r3
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	6093      	str	r3, [r2, #8]
}
 800481e:	e172      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d11b      	bne.n	8004870 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3361      	adds	r3, #97	; 0x61
 8004846:	2208      	movs	r2, #8
 8004848:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f004 fc8c 	bl	8009172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004866:	461a      	mov	r2, r3
 8004868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486c:	6093      	str	r3, [r2, #8]
}
 800486e:	e14a      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	f040 813f 	bne.w	8004b06 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3361      	adds	r3, #97	; 0x61
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d17d      	bne.n	8004998 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3360      	adds	r3, #96	; 0x60
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	333f      	adds	r3, #63	; 0x3f
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d00a      	beq.n	80048d8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	333f      	adds	r3, #63	; 0x3f
 80048d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	f040 8100 	bne.w	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d113      	bne.n	8004908 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	212c      	movs	r1, #44	; 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	3355      	adds	r3, #85	; 0x55
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2d8      	uxtb	r0, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	3355      	adds	r3, #85	; 0x55
 8004904:	4602      	mov	r2, r0
 8004906:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b01      	cmp	r3, #1
 800490e:	f040 80e3 	bne.w	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	212c      	movs	r1, #44	; 0x2c
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	4413      	add	r3, r2
 800491e:	334c      	adds	r3, #76	; 0x4c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80d8 	beq.w	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	334c      	adds	r3, #76	; 0x4c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	202c      	movs	r0, #44	; 0x2c
 800493e:	fb00 f202 	mul.w	r2, r0, r2
 8004942:	440a      	add	r2, r1
 8004944:	3240      	adds	r2, #64	; 0x40
 8004946:	8812      	ldrh	r2, [r2, #0]
 8004948:	4413      	add	r3, r2
 800494a:	3b01      	subs	r3, #1
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	202c      	movs	r0, #44	; 0x2c
 8004952:	fb00 f202 	mul.w	r2, r0, r2
 8004956:	440a      	add	r2, r1
 8004958:	3240      	adds	r2, #64	; 0x40
 800495a:	8812      	ldrh	r2, [r2, #0]
 800495c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80b5 	beq.w	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	212c      	movs	r1, #44	; 0x2c
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	3355      	adds	r3, #85	; 0x55
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	f083 0301 	eor.w	r3, r3, #1
 8004982:	b2d8      	uxtb	r0, r3
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	212c      	movs	r1, #44	; 0x2c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	4413      	add	r3, r2
 8004990:	3355      	adds	r3, #85	; 0x55
 8004992:	4602      	mov	r2, r0
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e09f      	b.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	3361      	adds	r3, #97	; 0x61
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d109      	bne.n	80049c0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	212c      	movs	r1, #44	; 0x2c
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	3360      	adds	r3, #96	; 0x60
 80049ba:	2202      	movs	r2, #2
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e08b      	b.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	212c      	movs	r1, #44	; 0x2c
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	3361      	adds	r3, #97	; 0x61
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d109      	bne.n	80049e8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	212c      	movs	r1, #44	; 0x2c
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	3360      	adds	r3, #96	; 0x60
 80049e2:	2202      	movs	r2, #2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e077      	b.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	212c      	movs	r1, #44	; 0x2c
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3361      	adds	r3, #97	; 0x61
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d109      	bne.n	8004a10 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	212c      	movs	r1, #44	; 0x2c
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	3360      	adds	r3, #96	; 0x60
 8004a0a:	2205      	movs	r2, #5
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e063      	b.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	212c      	movs	r1, #44	; 0x2c
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3361      	adds	r3, #97	; 0x61
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d009      	beq.n	8004a38 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3361      	adds	r3, #97	; 0x61
 8004a32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d14f      	bne.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	335c      	adds	r3, #92	; 0x5c
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	202c      	movs	r0, #44	; 0x2c
 8004a50:	fb00 f303 	mul.w	r3, r0, r3
 8004a54:	440b      	add	r3, r1
 8004a56:	335c      	adds	r3, #92	; 0x5c
 8004a58:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	212c      	movs	r1, #44	; 0x2c
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	335c      	adds	r3, #92	; 0x5c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d912      	bls.n	8004a94 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	212c      	movs	r1, #44	; 0x2c
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	335c      	adds	r3, #92	; 0x5c
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	212c      	movs	r1, #44	; 0x2c
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3360      	adds	r3, #96	; 0x60
 8004a8e:	2204      	movs	r2, #4
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e021      	b.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3360      	adds	r3, #96	; 0x60
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004abc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ac4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	b2d9      	uxtb	r1, r3
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	202c      	movs	r0, #44	; 0x2c
 8004af4:	fb00 f303 	mul.w	r3, r0, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	3360      	adds	r3, #96	; 0x60
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f009 ffbb 	bl	800ea7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b06:	bf00      	nop
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b08a      	sub	sp, #40	; 0x28
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	0c5b      	lsrs	r3, r3, #17
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b42:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d004      	beq.n	8004b54 <HCD_RXQLVL_IRQHandler+0x46>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	f000 80a9 	beq.w	8004ca4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b52:	e0aa      	b.n	8004caa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80a6 	beq.w	8004ca8 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	212c      	movs	r1, #44	; 0x2c
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	3344      	adds	r3, #68	; 0x44
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 809b 	beq.w	8004ca8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	212c      	movs	r1, #44	; 0x2c
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3350      	adds	r3, #80	; 0x50
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	441a      	add	r2, r3
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	202c      	movs	r0, #44	; 0x2c
 8004b8c:	fb00 f303 	mul.w	r3, r0, r3
 8004b90:	440b      	add	r3, r1
 8004b92:	334c      	adds	r3, #76	; 0x4c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d87a      	bhi.n	8004c90 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	212c      	movs	r1, #44	; 0x2c
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	3344      	adds	r3, #68	; 0x44
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	b292      	uxth	r2, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f003 fe34 	bl	8008820 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3344      	adds	r3, #68	; 0x44
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	441a      	add	r2, r3
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	202c      	movs	r0, #44	; 0x2c
 8004bd2:	fb00 f303 	mul.w	r3, r0, r3
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3344      	adds	r3, #68	; 0x44
 8004bda:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3350      	adds	r3, #80	; 0x50
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	441a      	add	r2, r3
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	202c      	movs	r0, #44	; 0x2c
 8004bf6:	fb00 f303 	mul.w	r3, r0, r3
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3350      	adds	r3, #80	; 0x50
 8004bfe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	0cdb      	lsrs	r3, r3, #19
 8004c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c14:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	3340      	adds	r3, #64	; 0x40
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d13c      	bne.n	8004ca8 <HCD_RXQLVL_IRQHandler+0x19a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d039      	beq.n	8004ca8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c4a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c52:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	212c      	movs	r1, #44	; 0x2c
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	3354      	adds	r3, #84	; 0x54
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	f083 0301 	eor.w	r3, r3, #1
 8004c7a:	b2d8      	uxtb	r0, r3
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3354      	adds	r3, #84	; 0x54
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	701a      	strb	r2, [r3, #0]
      break;
 8004c8e:	e00b      	b.n	8004ca8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3360      	adds	r3, #96	; 0x60
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	701a      	strb	r2, [r3, #0]
      break;
 8004ca2:	e001      	b.n	8004ca8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004ca4:	bf00      	nop
 8004ca6:	e000      	b.n	8004caa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004ca8:	bf00      	nop
  }
}
 8004caa:	bf00      	nop
 8004cac:	3728      	adds	r7, #40	; 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cde:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d10b      	bne.n	8004d02 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f009 fea5 	bl	800ea44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f043 0302 	orr.w	r3, r3, #2
 8004d00:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d132      	bne.n	8004d72 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f043 0308 	orr.w	r3, r3, #8
 8004d12:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d126      	bne.n	8004d6c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d113      	bne.n	8004d4e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d30:	d106      	bne.n	8004d40 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f003 fedf 	bl	8008afc <USB_InitFSLSPClkSel>
 8004d3e:	e011      	b.n	8004d64 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2101      	movs	r1, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 fed8 	bl	8008afc <USB_InitFSLSPClkSel>
 8004d4c:	e00a      	b.n	8004d64 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d106      	bne.n	8004d64 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004d62:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f009 fe9b 	bl	800eaa0 <HAL_HCD_PortEnabled_Callback>
 8004d6a:	e002      	b.n	8004d72 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f009 fea5 	bl	800eabc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d103      	bne.n	8004d84 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f043 0320 	orr.w	r3, r3, #32
 8004d82:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6013      	str	r3, [r2, #0]
}
 8004d90:	bf00      	nop
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e12b      	b.n	8005002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fc fc96 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f001 fa20 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 8004e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4a81      	ldr	r2, [pc, #516]	; (800500c <HAL_I2C_Init+0x274>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d807      	bhi.n	8004e1c <HAL_I2C_Init+0x84>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a80      	ldr	r2, [pc, #512]	; (8005010 <HAL_I2C_Init+0x278>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bf94      	ite	ls
 8004e14:	2301      	movls	r3, #1
 8004e16:	2300      	movhi	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e006      	b.n	8004e2a <HAL_I2C_Init+0x92>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a7d      	ldr	r2, [pc, #500]	; (8005014 <HAL_I2C_Init+0x27c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	bf94      	ite	ls
 8004e24:	2301      	movls	r3, #1
 8004e26:	2300      	movhi	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0e7      	b.n	8005002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a78      	ldr	r2, [pc, #480]	; (8005018 <HAL_I2C_Init+0x280>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0c9b      	lsrs	r3, r3, #18
 8004e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a6a      	ldr	r2, [pc, #424]	; (800500c <HAL_I2C_Init+0x274>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d802      	bhi.n	8004e6c <HAL_I2C_Init+0xd4>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	e009      	b.n	8004e80 <HAL_I2C_Init+0xe8>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	4a69      	ldr	r2, [pc, #420]	; (800501c <HAL_I2C_Init+0x284>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	3301      	adds	r3, #1
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	495c      	ldr	r1, [pc, #368]	; (800500c <HAL_I2C_Init+0x274>)
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	d819      	bhi.n	8004ed4 <HAL_I2C_Init+0x13c>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1e59      	subs	r1, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eae:	1c59      	adds	r1, r3, #1
 8004eb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_I2C_Init+0x138>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1e59      	subs	r1, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ece:	e051      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	e04f      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <HAL_I2C_Init+0x168>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1e58      	subs	r0, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	440b      	add	r3, r1
 8004eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	e012      	b.n	8004f26 <HAL_I2C_Init+0x18e>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1e58      	subs	r0, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	0099      	lsls	r1, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f16:	3301      	adds	r3, #1
 8004f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Init+0x196>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e022      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10e      	bne.n	8004f54 <HAL_I2C_Init+0x1bc>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1e58      	subs	r0, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	440b      	add	r3, r1
 8004f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f52:	e00f      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1e58      	subs	r0, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	0099      	lsls	r1, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	6809      	ldr	r1, [r1, #0]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6911      	ldr	r1, [r2, #16]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	4311      	orrs	r1, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	000186a0 	.word	0x000186a0
 8005010:	001e847f 	.word	0x001e847f
 8005014:	003d08ff 	.word	0x003d08ff
 8005018:	431bde83 	.word	0x431bde83
 800501c:	10624dd3 	.word	0x10624dd3

08005020 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e128      	b.n	8005284 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a90      	ldr	r2, [pc, #576]	; (800528c <HAL_I2S_Init+0x26c>)
 800504a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fc fb97 	bl	8001780 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005068:	f023 030f 	bic.w	r3, r3, #15
 800506c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2202      	movs	r2, #2
 8005074:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d060      	beq.n	8005140 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005086:	2310      	movs	r3, #16
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e001      	b.n	8005090 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800508c:	2320      	movs	r3, #32
 800508e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b20      	cmp	r3, #32
 8005096:	d802      	bhi.n	800509e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800509e:	2001      	movs	r0, #1
 80050a0:	f001 f9d8 	bl	8006454 <HAL_RCCEx_GetPeriphCLKFreq>
 80050a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ae:	d125      	bne.n	80050fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d010      	beq.n	80050da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	fbb2 f2f3 	udiv	r2, r2, r3
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	3305      	adds	r3, #5
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e01f      	b.n	800511a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	3305      	adds	r3, #5
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e00e      	b.n	800511a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	fbb2 f2f3 	udiv	r2, r2, r3
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	461a      	mov	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	3305      	adds	r3, #5
 8005118:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4a5c      	ldr	r2, [pc, #368]	; (8005290 <HAL_I2S_Init+0x270>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	08db      	lsrs	r3, r3, #3
 8005124:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e003      	b.n	8005148 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005140:	2302      	movs	r3, #2
 8005142:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d902      	bls.n	8005154 <HAL_I2S_Init+0x134>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	2bff      	cmp	r3, #255	; 0xff
 8005152:	d907      	bls.n	8005164 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	f043 0210 	orr.w	r2, r3, #16
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e08f      	b.n	8005284 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	ea42 0103 	orr.w	r1, r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	430a      	orrs	r2, r1
 8005176:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005182:	f023 030f 	bic.w	r3, r3, #15
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6851      	ldr	r1, [r2, #4]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6892      	ldr	r2, [r2, #8]
 800518e:	4311      	orrs	r1, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68d2      	ldr	r2, [r2, #12]
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6992      	ldr	r2, [r2, #24]
 800519a:	430a      	orrs	r2, r1
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d161      	bne.n	8005274 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a38      	ldr	r2, [pc, #224]	; (8005294 <HAL_I2S_Init+0x274>)
 80051b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a37      	ldr	r2, [pc, #220]	; (8005298 <HAL_I2S_Init+0x278>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_I2S_Init+0x1a4>
 80051c0:	4b36      	ldr	r3, [pc, #216]	; (800529c <HAL_I2S_Init+0x27c>)
 80051c2:	e001      	b.n	80051c8 <HAL_I2S_Init+0x1a8>
 80051c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	4932      	ldr	r1, [pc, #200]	; (8005298 <HAL_I2S_Init+0x278>)
 80051d0:	428a      	cmp	r2, r1
 80051d2:	d101      	bne.n	80051d8 <HAL_I2S_Init+0x1b8>
 80051d4:	4a31      	ldr	r2, [pc, #196]	; (800529c <HAL_I2S_Init+0x27c>)
 80051d6:	e001      	b.n	80051dc <HAL_I2S_Init+0x1bc>
 80051d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80051dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80051e0:	f023 030f 	bic.w	r3, r3, #15
 80051e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2b      	ldr	r2, [pc, #172]	; (8005298 <HAL_I2S_Init+0x278>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d101      	bne.n	80051f4 <HAL_I2S_Init+0x1d4>
 80051f0:	4b2a      	ldr	r3, [pc, #168]	; (800529c <HAL_I2S_Init+0x27c>)
 80051f2:	e001      	b.n	80051f8 <HAL_I2S_Init+0x1d8>
 80051f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051f8:	2202      	movs	r2, #2
 80051fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a25      	ldr	r2, [pc, #148]	; (8005298 <HAL_I2S_Init+0x278>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_I2S_Init+0x1ea>
 8005206:	4b25      	ldr	r3, [pc, #148]	; (800529c <HAL_I2S_Init+0x27c>)
 8005208:	e001      	b.n	800520e <HAL_I2S_Init+0x1ee>
 800520a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800521a:	d003      	beq.n	8005224 <HAL_I2S_Init+0x204>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	e001      	b.n	8005230 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800522c:	2300      	movs	r3, #0
 800522e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800523a:	4313      	orrs	r3, r2
 800523c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005244:	4313      	orrs	r3, r2
 8005246:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800524e:	4313      	orrs	r3, r2
 8005250:	b29a      	uxth	r2, r3
 8005252:	897b      	ldrh	r3, [r7, #10]
 8005254:	4313      	orrs	r3, r2
 8005256:	b29b      	uxth	r3, r3
 8005258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800525c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a0d      	ldr	r2, [pc, #52]	; (8005298 <HAL_I2S_Init+0x278>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_I2S_Init+0x24c>
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <HAL_I2S_Init+0x27c>)
 800526a:	e001      	b.n	8005270 <HAL_I2S_Init+0x250>
 800526c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005270:	897a      	ldrh	r2, [r7, #10]
 8005272:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	08005397 	.word	0x08005397
 8005290:	cccccccd 	.word	0xcccccccd
 8005294:	080054ad 	.word	0x080054ad
 8005298:	40003800 	.word	0x40003800
 800529c:	40003400 	.word	0x40003400

080052a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	881a      	ldrh	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10e      	bne.n	8005330 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005320:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ffb8 	bl	80052a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	b292      	uxth	r2, r2
 800534c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	1c9a      	adds	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10e      	bne.n	800538e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800537e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff93 	bl	80052b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d13a      	bne.n	8005428 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d109      	bne.n	80053d0 <I2S_IRQHandler+0x3a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d102      	bne.n	80053d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ffb4 	bl	8005338 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d126      	bne.n	8005428 <I2S_IRQHandler+0x92>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d11f      	bne.n	8005428 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	f043 0202 	orr.w	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ff50 	bl	80052c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b03      	cmp	r3, #3
 8005432:	d136      	bne.n	80054a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b02      	cmp	r3, #2
 800543c:	d109      	bne.n	8005452 <I2S_IRQHandler+0xbc>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b80      	cmp	r3, #128	; 0x80
 800544a:	d102      	bne.n	8005452 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ff45 	bl	80052dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b08      	cmp	r3, #8
 800545a:	d122      	bne.n	80054a2 <I2S_IRQHandler+0x10c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b20      	cmp	r3, #32
 8005468:	d11b      	bne.n	80054a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005478:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	f043 0204 	orr.w	r2, r3, #4
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ff13 	bl	80052c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a92      	ldr	r2, [pc, #584]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80054c6:	4b92      	ldr	r3, [pc, #584]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054c8:	e001      	b.n	80054ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80054ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a8b      	ldr	r2, [pc, #556]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d101      	bne.n	80054e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80054e4:	4b8a      	ldr	r3, [pc, #552]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054e6:	e001      	b.n	80054ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80054e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d004      	beq.n	8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 8099 	bne.w	8005636 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d107      	bne.n	800551e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f925 	bl	8005768 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b01      	cmp	r3, #1
 8005526:	d107      	bne.n	8005538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9c8 	bl	80058c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d13a      	bne.n	80055b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d035      	beq.n	80055b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6e      	ldr	r2, [pc, #440]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d101      	bne.n	800555a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005556:	4b6e      	ldr	r3, [pc, #440]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005558:	e001      	b.n	800555e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800555a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4969      	ldr	r1, [pc, #420]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005566:	428b      	cmp	r3, r1
 8005568:	d101      	bne.n	800556e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800556a:	4b69      	ldr	r3, [pc, #420]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800556c:	e001      	b.n	8005572 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800556e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005576:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005586:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f043 0202 	orr.w	r2, r3, #2
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fe88 	bl	80052c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b08      	cmp	r3, #8
 80055c0:	f040 80c3 	bne.w	800574a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80bd 	beq.w	800574a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a49      	ldr	r2, [pc, #292]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d101      	bne.n	80055ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80055ea:	4b49      	ldr	r3, [pc, #292]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055ec:	e001      	b.n	80055f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80055ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4944      	ldr	r1, [pc, #272]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055fa:	428b      	cmp	r3, r1
 80055fc:	d101      	bne.n	8005602 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055fe:	4b44      	ldr	r3, [pc, #272]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005600:	e001      	b.n	8005606 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800560a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800560c:	2300      	movs	r3, #0
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f043 0204 	orr.w	r2, r3, #4
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fe4a 	bl	80052c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005634:	e089      	b.n	800574a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d107      	bne.n	8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8be 	bl	80057cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8fd 	bl	8005864 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d12f      	bne.n	80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d02a      	beq.n	80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800568c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005698:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800569a:	e001      	b.n	80056a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800569c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4919      	ldr	r1, [pc, #100]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056a8:	428b      	cmp	r3, r1
 80056aa:	d101      	bne.n	80056b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80056ac:	4b18      	ldr	r3, [pc, #96]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ae:	e001      	b.n	80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80056b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f043 0202 	orr.w	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fdfa 	bl	80052c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d136      	bne.n	800574c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d031      	beq.n	800574c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a07      	ldr	r2, [pc, #28]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056f4:	e001      	b.n	80056fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80056f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4902      	ldr	r1, [pc, #8]	; (800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005702:	428b      	cmp	r3, r1
 8005704:	d106      	bne.n	8005714 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005706:	4b02      	ldr	r3, [pc, #8]	; (8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005708:	e006      	b.n	8005718 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800570a:	bf00      	nop
 800570c:	40003800 	.word	0x40003800
 8005710:	40003400 	.word	0x40003400
 8005714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800571c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800572c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fdc0 	bl	80052c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005748:	e000      	b.n	800574c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800574a:	bf00      	nop
}
 800574c:	bf00      	nop
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c99      	adds	r1, r3, #2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6251      	str	r1, [r2, #36]	; 0x24
 800577a:	881a      	ldrh	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d113      	bne.n	80057c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ffc9 	bl	8005754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	1c99      	adds	r1, r3, #2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6251      	str	r1, [r2, #36]	; 0x24
 80057de:	8819      	ldrh	r1, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1d      	ldr	r2, [pc, #116]	; (800585c <I2SEx_TxISR_I2SExt+0x90>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <I2SEx_TxISR_I2SExt+0x22>
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <I2SEx_TxISR_I2SExt+0x94>)
 80057ec:	e001      	b.n	80057f2 <I2SEx_TxISR_I2SExt+0x26>
 80057ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057f2:	460a      	mov	r2, r1
 80057f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d121      	bne.n	8005852 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a12      	ldr	r2, [pc, #72]	; (800585c <I2SEx_TxISR_I2SExt+0x90>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d101      	bne.n	800581c <I2SEx_TxISR_I2SExt+0x50>
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <I2SEx_TxISR_I2SExt+0x94>)
 800581a:	e001      	b.n	8005820 <I2SEx_TxISR_I2SExt+0x54>
 800581c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	490d      	ldr	r1, [pc, #52]	; (800585c <I2SEx_TxISR_I2SExt+0x90>)
 8005828:	428b      	cmp	r3, r1
 800582a:	d101      	bne.n	8005830 <I2SEx_TxISR_I2SExt+0x64>
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <I2SEx_TxISR_I2SExt+0x94>)
 800582e:	e001      	b.n	8005834 <I2SEx_TxISR_I2SExt+0x68>
 8005830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005834:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005838:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ff81 	bl	8005754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40003800 	.word	0x40003800
 8005860:	40003400 	.word	0x40003400

08005864 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68d8      	ldr	r0, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	1c99      	adds	r1, r3, #2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800587c:	b282      	uxth	r2, r0
 800587e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d113      	bne.n	80058c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff4a 	bl	8005754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a20      	ldr	r2, [pc, #128]	; (8005958 <I2SEx_RxISR_I2SExt+0x90>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <I2SEx_RxISR_I2SExt+0x16>
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <I2SEx_RxISR_I2SExt+0x94>)
 80058dc:	e001      	b.n	80058e2 <I2SEx_RxISR_I2SExt+0x1a>
 80058de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058e2:	68d8      	ldr	r0, [r3, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	1c99      	adds	r1, r3, #2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80058ee:	b282      	uxth	r2, r0
 80058f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d121      	bne.n	800594e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <I2SEx_RxISR_I2SExt+0x90>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <I2SEx_RxISR_I2SExt+0x50>
 8005914:	4b11      	ldr	r3, [pc, #68]	; (800595c <I2SEx_RxISR_I2SExt+0x94>)
 8005916:	e001      	b.n	800591c <I2SEx_RxISR_I2SExt+0x54>
 8005918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	490d      	ldr	r1, [pc, #52]	; (8005958 <I2SEx_RxISR_I2SExt+0x90>)
 8005924:	428b      	cmp	r3, r1
 8005926:	d101      	bne.n	800592c <I2SEx_RxISR_I2SExt+0x64>
 8005928:	4b0c      	ldr	r3, [pc, #48]	; (800595c <I2SEx_RxISR_I2SExt+0x94>)
 800592a:	e001      	b.n	8005930 <I2SEx_RxISR_I2SExt+0x68>
 800592c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005930:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005934:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff03 	bl	8005754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40003800 	.word	0x40003800
 800595c:	40003400 	.word	0x40003400

08005960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e267      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d075      	beq.n	8005a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800597e:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
 8005986:	2b04      	cmp	r3, #4
 8005988:	d00c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800598a:	4b85      	ldr	r3, [pc, #532]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005992:	2b08      	cmp	r3, #8
 8005994:	d112      	bne.n	80059bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005996:	4b82      	ldr	r3, [pc, #520]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a2:	d10b      	bne.n	80059bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a4:	4b7e      	ldr	r3, [pc, #504]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d05b      	beq.n	8005a68 <HAL_RCC_OscConfig+0x108>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d157      	bne.n	8005a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e242      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d106      	bne.n	80059d4 <HAL_RCC_OscConfig+0x74>
 80059c6:	4b76      	ldr	r3, [pc, #472]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a75      	ldr	r2, [pc, #468]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e01d      	b.n	8005a10 <HAL_RCC_OscConfig+0xb0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCC_OscConfig+0x98>
 80059de:	4b70      	ldr	r3, [pc, #448]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a6f      	ldr	r2, [pc, #444]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	4b6d      	ldr	r3, [pc, #436]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a6c      	ldr	r2, [pc, #432]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e00b      	b.n	8005a10 <HAL_RCC_OscConfig+0xb0>
 80059f8:	4b69      	ldr	r3, [pc, #420]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a68      	ldr	r2, [pc, #416]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	4b66      	ldr	r3, [pc, #408]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a65      	ldr	r2, [pc, #404]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d013      	beq.n	8005a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fc faee 	bl	8001ff8 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fc faea 	bl	8001ff8 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	; 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e207      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a32:	4b5b      	ldr	r3, [pc, #364]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0xc0>
 8005a3e:	e014      	b.n	8005a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a40:	f7fc fada 	bl	8001ff8 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fc fad6 	bl	8001ff8 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e1f3      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5a:	4b51      	ldr	r3, [pc, #324]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0xe8>
 8005a66:	e000      	b.n	8005a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d063      	beq.n	8005b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a76:	4b4a      	ldr	r3, [pc, #296]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a82:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d11c      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8e:	4b44      	ldr	r3, [pc, #272]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d116      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a9a:	4b41      	ldr	r3, [pc, #260]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x152>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e1c7      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	4937      	ldr	r1, [pc, #220]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac6:	e03a      	b.n	8005b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d020      	beq.n	8005b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad0:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <HAL_RCC_OscConfig+0x244>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad6:	f7fc fa8f 	bl	8001ff8 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ade:	f7fc fa8b 	bl	8001ff8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e1a8      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af0:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afc:	4b28      	ldr	r3, [pc, #160]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4925      	ldr	r1, [pc, #148]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]
 8005b10:	e015      	b.n	8005b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCC_OscConfig+0x244>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b18:	f7fc fa6e 	bl	8001ff8 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b20:	f7fc fa6a 	bl	8001ff8 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e187      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b32:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d036      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_RCC_OscConfig+0x248>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b58:	f7fc fa4e 	bl	8001ff8 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b60:	f7fc fa4a 	bl	8001ff8 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e167      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0x200>
 8005b7e:	e01b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_OscConfig+0x248>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b86:	f7fc fa37 	bl	8001ff8 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b8c:	e00e      	b.n	8005bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b8e:	f7fc fa33 	bl	8001ff8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d907      	bls.n	8005bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e150      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	42470000 	.word	0x42470000
 8005ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bac:	4b88      	ldr	r3, [pc, #544]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ea      	bne.n	8005b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8097 	beq.w	8005cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bca:	4b81      	ldr	r3, [pc, #516]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10f      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	4b7d      	ldr	r3, [pc, #500]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	4a7c      	ldr	r2, [pc, #496]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6413      	str	r3, [r2, #64]	; 0x40
 8005be6:	4b7a      	ldr	r3, [pc, #488]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf6:	4b77      	ldr	r3, [pc, #476]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d118      	bne.n	8005c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c02:	4b74      	ldr	r3, [pc, #464]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a73      	ldr	r2, [pc, #460]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0e:	f7fc f9f3 	bl	8001ff8 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c16:	f7fc f9ef 	bl	8001ff8 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e10c      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d106      	bne.n	8005c4a <HAL_RCC_OscConfig+0x2ea>
 8005c3c:	4b64      	ldr	r3, [pc, #400]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	4a63      	ldr	r2, [pc, #396]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	6713      	str	r3, [r2, #112]	; 0x70
 8005c48:	e01c      	b.n	8005c84 <HAL_RCC_OscConfig+0x324>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCC_OscConfig+0x30c>
 8005c52:	4b5f      	ldr	r3, [pc, #380]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c56:	4a5e      	ldr	r2, [pc, #376]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c58:	f043 0304 	orr.w	r3, r3, #4
 8005c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5e:	4b5c      	ldr	r3, [pc, #368]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	4a5b      	ldr	r2, [pc, #364]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6a:	e00b      	b.n	8005c84 <HAL_RCC_OscConfig+0x324>
 8005c6c:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a57      	ldr	r2, [pc, #348]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	4b55      	ldr	r3, [pc, #340]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	4a54      	ldr	r2, [pc, #336]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c7e:	f023 0304 	bic.w	r3, r3, #4
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8c:	f7fc f9b4 	bl	8001ff8 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c92:	e00a      	b.n	8005caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c94:	f7fc f9b0 	bl	8001ff8 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e0cb      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005caa:	4b49      	ldr	r3, [pc, #292]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0ee      	beq.n	8005c94 <HAL_RCC_OscConfig+0x334>
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb8:	f7fc f99e 	bl	8001ff8 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc0:	f7fc f99a 	bl	8001ff8 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e0b5      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd6:	4b3e      	ldr	r3, [pc, #248]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ee      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce8:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	4a38      	ldr	r2, [pc, #224]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80a1 	beq.w	8005e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cfe:	4b34      	ldr	r3, [pc, #208]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d05c      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d141      	bne.n	8005d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d12:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <HAL_RCC_OscConfig+0x478>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fc f96e 	bl	8001ff8 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d20:	f7fc f96a 	bl	8001ff8 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e087      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d32:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	019b      	lsls	r3, r3, #6
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	3b01      	subs	r3, #1
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	491b      	ldr	r1, [pc, #108]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d68:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <HAL_RCC_OscConfig+0x478>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6e:	f7fc f943 	bl	8001ff8 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d76:	f7fc f93f 	bl	8001ff8 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e05c      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCC_OscConfig+0x416>
 8005d94:	e054      	b.n	8005e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <HAL_RCC_OscConfig+0x478>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fc f92c 	bl	8001ff8 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da4:	f7fc f928 	bl	8001ff8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e045      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0x444>
 8005dc2:	e03d      	b.n	8005e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d107      	bne.n	8005ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e038      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <HAL_RCC_OscConfig+0x4ec>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d028      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d121      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d11a      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d111      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	3b01      	subs	r3, #1
 8005e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d107      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40023800 	.word	0x40023800

08005e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0cc      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e64:	4b68      	ldr	r3, [pc, #416]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d90c      	bls.n	8005e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e72:	4b65      	ldr	r3, [pc, #404]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7a:	4b63      	ldr	r3, [pc, #396]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d001      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0b8      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d020      	beq.n	8005eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ea4:	4b59      	ldr	r3, [pc, #356]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4a58      	ldr	r2, [pc, #352]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ebc:	4b53      	ldr	r3, [pc, #332]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a52      	ldr	r2, [pc, #328]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec8:	4b50      	ldr	r3, [pc, #320]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	494d      	ldr	r1, [pc, #308]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d044      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d107      	bne.n	8005efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	4b47      	ldr	r3, [pc, #284]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d119      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e07f      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d003      	beq.n	8005f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0e:	4b3f      	ldr	r3, [pc, #252]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e06f      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1e:	4b3b      	ldr	r3, [pc, #236]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e067      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f2e:	4b37      	ldr	r3, [pc, #220]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f023 0203 	bic.w	r2, r3, #3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4934      	ldr	r1, [pc, #208]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f40:	f7fc f85a 	bl	8001ff8 <HAL_GetTick>
 8005f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f46:	e00a      	b.n	8005f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f48:	f7fc f856 	bl	8001ff8 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e04f      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5e:	4b2b      	ldr	r3, [pc, #172]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 020c 	and.w	r2, r3, #12
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d1eb      	bne.n	8005f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f70:	4b25      	ldr	r3, [pc, #148]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d20c      	bcs.n	8005f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e032      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fa4:	4b19      	ldr	r3, [pc, #100]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4916      	ldr	r1, [pc, #88]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	490e      	ldr	r1, [pc, #56]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fd6:	f000 f821 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	490a      	ldr	r1, [pc, #40]	; (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe8:	5ccb      	ldrb	r3, [r1, r3]
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ff2:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fb ffba 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40023c00 	.word	0x40023c00
 800600c:	40023800 	.word	0x40023800
 8006010:	080192ec 	.word	0x080192ec
 8006014:	20000004 	.word	0x20000004
 8006018:	20000008 	.word	0x20000008

0800601c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800601c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006020:	b094      	sub	sp, #80	; 0x50
 8006022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	647b      	str	r3, [r7, #68]	; 0x44
 8006028:	2300      	movs	r3, #0
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800602c:	2300      	movs	r3, #0
 800602e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006034:	4b79      	ldr	r3, [pc, #484]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 030c 	and.w	r3, r3, #12
 800603c:	2b08      	cmp	r3, #8
 800603e:	d00d      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0x40>
 8006040:	2b08      	cmp	r3, #8
 8006042:	f200 80e1 	bhi.w	8006208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x34>
 800604a:	2b04      	cmp	r3, #4
 800604c:	d003      	beq.n	8006056 <HAL_RCC_GetSysClockFreq+0x3a>
 800604e:	e0db      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006050:	4b73      	ldr	r3, [pc, #460]	; (8006220 <HAL_RCC_GetSysClockFreq+0x204>)
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006054:	e0db      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006056:	4b73      	ldr	r3, [pc, #460]	; (8006224 <HAL_RCC_GetSysClockFreq+0x208>)
 8006058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800605a:	e0d8      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800605c:	4b6f      	ldr	r3, [pc, #444]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006066:	4b6d      	ldr	r3, [pc, #436]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d063      	beq.n	800613a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006072:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	2200      	movs	r2, #0
 800607a:	63bb      	str	r3, [r7, #56]	; 0x38
 800607c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006084:	633b      	str	r3, [r7, #48]	; 0x30
 8006086:	2300      	movs	r3, #0
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
 800608a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f04f 0100 	mov.w	r1, #0
 800609a:	0159      	lsls	r1, r3, #5
 800609c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a0:	0150      	lsls	r0, r2, #5
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4621      	mov	r1, r4
 80060a8:	1a51      	subs	r1, r2, r1
 80060aa:	6139      	str	r1, [r7, #16]
 80060ac:	4629      	mov	r1, r5
 80060ae:	eb63 0301 	sbc.w	r3, r3, r1
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060c0:	4659      	mov	r1, fp
 80060c2:	018b      	lsls	r3, r1, #6
 80060c4:	4651      	mov	r1, sl
 80060c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060ca:	4651      	mov	r1, sl
 80060cc:	018a      	lsls	r2, r1, #6
 80060ce:	4651      	mov	r1, sl
 80060d0:	ebb2 0801 	subs.w	r8, r2, r1
 80060d4:	4659      	mov	r1, fp
 80060d6:	eb63 0901 	sbc.w	r9, r3, r1
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ee:	4690      	mov	r8, r2
 80060f0:	4699      	mov	r9, r3
 80060f2:	4623      	mov	r3, r4
 80060f4:	eb18 0303 	adds.w	r3, r8, r3
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	462b      	mov	r3, r5
 80060fc:	eb49 0303 	adc.w	r3, r9, r3
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800610e:	4629      	mov	r1, r5
 8006110:	024b      	lsls	r3, r1, #9
 8006112:	4621      	mov	r1, r4
 8006114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006118:	4621      	mov	r1, r4
 800611a:	024a      	lsls	r2, r1, #9
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006122:	2200      	movs	r2, #0
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
 8006126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612c:	f7fa f908 	bl	8000340 <__aeabi_uldivmod>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4613      	mov	r3, r2
 8006136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006138:	e058      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613a:	4b38      	ldr	r3, [pc, #224]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	2200      	movs	r2, #0
 8006142:	4618      	mov	r0, r3
 8006144:	4611      	mov	r1, r2
 8006146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800614a:	623b      	str	r3, [r7, #32]
 800614c:	2300      	movs	r3, #0
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
 8006150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	f04f 0000 	mov.w	r0, #0
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	0159      	lsls	r1, r3, #5
 8006162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006166:	0150      	lsls	r0, r2, #5
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4641      	mov	r1, r8
 800616e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006172:	4649      	mov	r1, r9
 8006174:	eb63 0b01 	sbc.w	fp, r3, r1
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800618c:	ebb2 040a 	subs.w	r4, r2, sl
 8006190:	eb63 050b 	sbc.w	r5, r3, fp
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	00eb      	lsls	r3, r5, #3
 800619e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a2:	00e2      	lsls	r2, r4, #3
 80061a4:	4614      	mov	r4, r2
 80061a6:	461d      	mov	r5, r3
 80061a8:	4643      	mov	r3, r8
 80061aa:	18e3      	adds	r3, r4, r3
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	464b      	mov	r3, r9
 80061b0:	eb45 0303 	adc.w	r3, r5, r3
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061c2:	4629      	mov	r1, r5
 80061c4:	028b      	lsls	r3, r1, #10
 80061c6:	4621      	mov	r1, r4
 80061c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061cc:	4621      	mov	r1, r4
 80061ce:	028a      	lsls	r2, r1, #10
 80061d0:	4610      	mov	r0, r2
 80061d2:	4619      	mov	r1, r3
 80061d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d6:	2200      	movs	r2, #0
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	61fa      	str	r2, [r7, #28]
 80061dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061e0:	f7fa f8ae 	bl	8000340 <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4613      	mov	r3, r2
 80061ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	3301      	adds	r3, #1
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006206:	e002      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCC_GetSysClockFreq+0x204>)
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800620c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800620e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006210:	4618      	mov	r0, r3
 8006212:	3750      	adds	r7, #80	; 0x50
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621a:	bf00      	nop
 800621c:	40023800 	.word	0x40023800
 8006220:	00f42400 	.word	0x00f42400
 8006224:	007a1200 	.word	0x007a1200

08006228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800622c:	4b03      	ldr	r3, [pc, #12]	; (800623c <HAL_RCC_GetHCLKFreq+0x14>)
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	4618      	mov	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000004 	.word	0x20000004

08006240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006244:	f7ff fff0 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0a9b      	lsrs	r3, r3, #10
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4903      	ldr	r1, [pc, #12]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40023800 	.word	0x40023800
 8006264:	080192fc 	.word	0x080192fc

08006268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800626c:	f7ff ffdc 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0b5b      	lsrs	r3, r3, #13
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4903      	ldr	r1, [pc, #12]	; (800628c <HAL_RCC_GetPCLK2Freq+0x24>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	080192fc 	.word	0x080192fc

08006290 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d035      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062b8:	4b62      	ldr	r3, [pc, #392]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062be:	f7fb fe9b 	bl	8001ff8 <HAL_GetTick>
 80062c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062c4:	e008      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062c6:	f7fb fe97 	bl	8001ff8 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0b0      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062d8:	4b5b      	ldr	r3, [pc, #364]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f0      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	019a      	lsls	r2, r3, #6
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	071b      	lsls	r3, r3, #28
 80062f0:	4955      	ldr	r1, [pc, #340]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062f8:	4b52      	ldr	r3, [pc, #328]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062fe:	f7fb fe7b 	bl	8001ff8 <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006304:	e008      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006306:	f7fb fe77 	bl	8001ff8 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e090      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006318:	4b4b      	ldr	r3, [pc, #300]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0f0      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8083 	beq.w	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	4b44      	ldr	r3, [pc, #272]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	4a43      	ldr	r2, [pc, #268]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800633c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006340:	6413      	str	r3, [r2, #64]	; 0x40
 8006342:	4b41      	ldr	r3, [pc, #260]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800634e:	4b3f      	ldr	r3, [pc, #252]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a3e      	ldr	r2, [pc, #248]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006358:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800635a:	f7fb fe4d 	bl	8001ff8 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006362:	f7fb fe49 	bl	8001ff8 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e062      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006374:	4b35      	ldr	r3, [pc, #212]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006380:	4b31      	ldr	r3, [pc, #196]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006388:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d02f      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	429a      	cmp	r2, r3
 800639c:	d028      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800639e:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063a8:	4b29      	ldr	r3, [pc, #164]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ae:	4b28      	ldr	r3, [pc, #160]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063b4:	4a24      	ldr	r2, [pc, #144]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d114      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063c6:	f7fb fe17 	bl	8001ff8 <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063cc:	e00a      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ce:	f7fb fe13 	bl	8001ff8 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063dc:	4293      	cmp	r3, r2
 80063de:	d901      	bls.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e02a      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e4:	4b18      	ldr	r3, [pc, #96]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0ee      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fc:	d10d      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800640e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006412:	490d      	ldr	r1, [pc, #52]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006414:	4313      	orrs	r3, r2
 8006416:	608b      	str	r3, [r1, #8]
 8006418:	e005      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800641a:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4a0a      	ldr	r2, [pc, #40]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006420:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006424:	6093      	str	r3, [r2, #8]
 8006426:	4b08      	ldr	r3, [pc, #32]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006428:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006432:	4905      	ldr	r1, [pc, #20]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006434:	4313      	orrs	r3, r2
 8006436:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	42470068 	.word	0x42470068
 8006448:	40023800 	.word	0x40023800
 800644c:	40007000 	.word	0x40007000
 8006450:	42470e40 	.word	0x42470e40

08006454 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d13e      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d12f      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006488:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800648a:	617b      	str	r3, [r7, #20]
          break;
 800648c:	e02f      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800648e:	4b1c      	ldr	r3, [pc, #112]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800649a:	d108      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800649c:	4b18      	ldr	r3, [pc, #96]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	e007      	b.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064ae:	4b14      	ldr	r3, [pc, #80]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b6:	4a15      	ldr	r2, [pc, #84]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c4:	099b      	lsrs	r3, r3, #6
 80064c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d8:	0f1b      	lsrs	r3, r3, #28
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
          break;
 80064e6:	e002      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
          break;
 80064ec:	bf00      	nop
        }
      }
      break;
 80064ee:	bf00      	nop
    }
  }
  return frequency;
 80064f0:	697b      	ldr	r3, [r7, #20]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40023800 	.word	0x40023800
 8006504:	00bb8000 	.word	0x00bb8000
 8006508:	007a1200 	.word	0x007a1200
 800650c:	00f42400 	.word	0x00f42400

08006510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e07b      	b.n	800661a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d108      	bne.n	800653c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006532:	d009      	beq.n	8006548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	61da      	str	r2, [r3, #28]
 800653a:	e005      	b.n	8006548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb f98c 	bl	8001880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800657e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	ea42 0103 	orr.w	r1, r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	0c1b      	lsrs	r3, r3, #16
 80065e6:	f003 0104 	and.w	r1, r3, #4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	f003 0210 	and.w	r2, r3, #16
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e041      	b.n	80066b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fb f961 	bl	8001910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f000 f9b7 	bl	80069d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <HAL_TIM_PWM_Start+0x24>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	bf14      	ite	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	2300      	moveq	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	e022      	b.n	800672a <HAL_TIM_PWM_Start+0x6a>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d109      	bne.n	80066fe <HAL_TIM_PWM_Start+0x3e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	bf14      	ite	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	2300      	moveq	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	e015      	b.n	800672a <HAL_TIM_PWM_Start+0x6a>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b08      	cmp	r3, #8
 8006702:	d109      	bne.n	8006718 <HAL_TIM_PWM_Start+0x58>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e008      	b.n	800672a <HAL_TIM_PWM_Start+0x6a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e07c      	b.n	800682c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <HAL_TIM_PWM_Start+0x82>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006740:	e013      	b.n	800676a <HAL_TIM_PWM_Start+0xaa>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b04      	cmp	r3, #4
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Start+0x92>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006750:	e00b      	b.n	800676a <HAL_TIM_PWM_Start+0xaa>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b08      	cmp	r3, #8
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Start+0xa2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006760:	e003      	b.n	800676a <HAL_TIM_PWM_Start+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2201      	movs	r2, #1
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb7e 	bl	8006e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a2d      	ldr	r2, [pc, #180]	; (8006834 <HAL_TIM_PWM_Start+0x174>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d004      	beq.n	800678c <HAL_TIM_PWM_Start+0xcc>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a2c      	ldr	r2, [pc, #176]	; (8006838 <HAL_TIM_PWM_Start+0x178>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d101      	bne.n	8006790 <HAL_TIM_PWM_Start+0xd0>
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <HAL_TIM_PWM_Start+0xd2>
 8006790:	2300      	movs	r3, #0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a22      	ldr	r2, [pc, #136]	; (8006834 <HAL_TIM_PWM_Start+0x174>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d022      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x136>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b8:	d01d      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x136>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1f      	ldr	r2, [pc, #124]	; (800683c <HAL_TIM_PWM_Start+0x17c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d018      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x136>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <HAL_TIM_PWM_Start+0x180>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x136>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <HAL_TIM_PWM_Start+0x184>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x136>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIM_PWM_Start+0x178>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x136>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a18      	ldr	r2, [pc, #96]	; (8006848 <HAL_TIM_PWM_Start+0x188>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x136>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a16      	ldr	r2, [pc, #88]	; (800684c <HAL_TIM_PWM_Start+0x18c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d111      	bne.n	800681a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b06      	cmp	r3, #6
 8006806:	d010      	beq.n	800682a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006818:	e007      	b.n	800682a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0201 	orr.w	r2, r2, #1
 8006828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40010000 	.word	0x40010000
 8006838:	40010400 	.word	0x40010400
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40014000 	.word	0x40014000
 800684c:	40001800 	.word	0x40001800

08006850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800686a:	2302      	movs	r3, #2
 800686c:	e0ae      	b.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b0c      	cmp	r3, #12
 800687a:	f200 809f 	bhi.w	80069bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068b9 	.word	0x080068b9
 8006888:	080069bd 	.word	0x080069bd
 800688c:	080069bd 	.word	0x080069bd
 8006890:	080069bd 	.word	0x080069bd
 8006894:	080068f9 	.word	0x080068f9
 8006898:	080069bd 	.word	0x080069bd
 800689c:	080069bd 	.word	0x080069bd
 80068a0:	080069bd 	.word	0x080069bd
 80068a4:	0800693b 	.word	0x0800693b
 80068a8:	080069bd 	.word	0x080069bd
 80068ac:	080069bd 	.word	0x080069bd
 80068b0:	080069bd 	.word	0x080069bd
 80068b4:	0800697b 	.word	0x0800697b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f928 	bl	8006b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0204 	bic.w	r2, r2, #4
 80068e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6999      	ldr	r1, [r3, #24]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	619a      	str	r2, [r3, #24]
      break;
 80068f6:	e064      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 f978 	bl	8006bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6999      	ldr	r1, [r3, #24]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	021a      	lsls	r2, r3, #8
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	619a      	str	r2, [r3, #24]
      break;
 8006938:	e043      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 f9cd 	bl	8006ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0208 	orr.w	r2, r2, #8
 8006954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0204 	bic.w	r2, r2, #4
 8006964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69d9      	ldr	r1, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	61da      	str	r2, [r3, #28]
      break;
 8006978:	e023      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fa21 	bl	8006dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69d9      	ldr	r1, [r3, #28]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	021a      	lsls	r2, r3, #8
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	61da      	str	r2, [r3, #28]
      break;
 80069ba:	e002      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
      break;
 80069c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a40      	ldr	r2, [pc, #256]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d00f      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3d      	ldr	r2, [pc, #244]	; (8006aec <TIM_Base_SetConfig+0x118>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3c      	ldr	r2, [pc, #240]	; (8006af0 <TIM_Base_SetConfig+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d007      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3b      	ldr	r2, [pc, #236]	; (8006af4 <TIM_Base_SetConfig+0x120>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3a      	ldr	r2, [pc, #232]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d108      	bne.n	8006a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2f      	ldr	r2, [pc, #188]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d02b      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a34:	d027      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2c      	ldr	r2, [pc, #176]	; (8006aec <TIM_Base_SetConfig+0x118>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d023      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2b      	ldr	r2, [pc, #172]	; (8006af0 <TIM_Base_SetConfig+0x11c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01f      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <TIM_Base_SetConfig+0x120>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01b      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a29      	ldr	r2, [pc, #164]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d017      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a28      	ldr	r2, [pc, #160]	; (8006afc <TIM_Base_SetConfig+0x128>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <TIM_Base_SetConfig+0x12c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00f      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a26      	ldr	r2, [pc, #152]	; (8006b04 <TIM_Base_SetConfig+0x130>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00b      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a25      	ldr	r2, [pc, #148]	; (8006b08 <TIM_Base_SetConfig+0x134>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d007      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <TIM_Base_SetConfig+0x138>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a23      	ldr	r2, [pc, #140]	; (8006b10 <TIM_Base_SetConfig+0x13c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d108      	bne.n	8006a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_Base_SetConfig+0xf8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800
 8006b08:	40001800 	.word	0x40001800
 8006b0c:	40001c00 	.word	0x40001c00
 8006b10:	40002000 	.word	0x40002000

08006b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f023 0201 	bic.w	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 0302 	bic.w	r3, r3, #2
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a20      	ldr	r2, [pc, #128]	; (8006bec <TIM_OC1_SetConfig+0xd8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_OC1_SetConfig+0x64>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a1f      	ldr	r2, [pc, #124]	; (8006bf0 <TIM_OC1_SetConfig+0xdc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d10c      	bne.n	8006b92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f023 0308 	bic.w	r3, r3, #8
 8006b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 0304 	bic.w	r3, r3, #4
 8006b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a15      	ldr	r2, [pc, #84]	; (8006bec <TIM_OC1_SetConfig+0xd8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC1_SetConfig+0x8e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a14      	ldr	r2, [pc, #80]	; (8006bf0 <TIM_OC1_SetConfig+0xdc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d111      	bne.n	8006bc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40010400 	.word	0x40010400

08006bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0210 	bic.w	r2, r3, #16
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0320 	bic.w	r3, r3, #32
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a22      	ldr	r2, [pc, #136]	; (8006cd8 <TIM_OC2_SetConfig+0xe4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC2_SetConfig+0x68>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a21      	ldr	r2, [pc, #132]	; (8006cdc <TIM_OC2_SetConfig+0xe8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10d      	bne.n	8006c78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a17      	ldr	r2, [pc, #92]	; (8006cd8 <TIM_OC2_SetConfig+0xe4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC2_SetConfig+0x94>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <TIM_OC2_SetConfig+0xe8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d113      	bne.n	8006cb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40010400 	.word	0x40010400

08006ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a21      	ldr	r2, [pc, #132]	; (8006dc0 <TIM_OC3_SetConfig+0xe0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC3_SetConfig+0x66>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a20      	ldr	r2, [pc, #128]	; (8006dc4 <TIM_OC3_SetConfig+0xe4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d10d      	bne.n	8006d62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <TIM_OC3_SetConfig+0xe0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <TIM_OC3_SetConfig+0x92>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <TIM_OC3_SetConfig+0xe4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d113      	bne.n	8006d9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	621a      	str	r2, [r3, #32]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40010400 	.word	0x40010400

08006dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	031b      	lsls	r3, r3, #12
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a12      	ldr	r2, [pc, #72]	; (8006e6c <TIM_OC4_SetConfig+0xa4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC4_SetConfig+0x68>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a11      	ldr	r2, [pc, #68]	; (8006e70 <TIM_OC4_SetConfig+0xa8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d109      	bne.n	8006e44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	019b      	lsls	r3, r3, #6
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40010400 	.word	0x40010400

08006e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	2201      	movs	r2, #1
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	401a      	ands	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a1a      	ldr	r2, [r3, #32]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e05a      	b.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a21      	ldr	r2, [pc, #132]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d022      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f24:	d01d      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1d      	ldr	r2, [pc, #116]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d018      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1b      	ldr	r2, [pc, #108]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d013      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a1a      	ldr	r2, [pc, #104]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00e      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a18      	ldr	r2, [pc, #96]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d009      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a17      	ldr	r2, [pc, #92]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d004      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10c      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40000400 	.word	0x40000400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40000c00 	.word	0x40000c00
 8006fac:	40010400 	.word	0x40010400
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	40001800 	.word	0x40001800

08006fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e03d      	b.n	8007050 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e03f      	b.n	80070ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fa fca0 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	; 0x24
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800709e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 ffd7 	bl	8008054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08c      	sub	sp, #48	; 0x30
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b20      	cmp	r3, #32
 8007110:	d165      	bne.n	80071de <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_UART_Transmit_DMA+0x26>
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e05e      	b.n	80071e0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_UART_Transmit_DMA+0x38>
 800712c:	2302      	movs	r3, #2
 800712e:	e057      	b.n	80071e0 <HAL_UART_Transmit_DMA+0xe8>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	88fa      	ldrh	r2, [r7, #6]
 8007142:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2221      	movs	r2, #33	; 0x21
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	4a22      	ldr	r2, [pc, #136]	; (80071e8 <HAL_UART_Transmit_DMA+0xf0>)
 800715e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	4a21      	ldr	r2, [pc, #132]	; (80071ec <HAL_UART_Transmit_DMA+0xf4>)
 8007166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	4a20      	ldr	r2, [pc, #128]	; (80071f0 <HAL_UART_Transmit_DMA+0xf8>)
 800716e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	2200      	movs	r2, #0
 8007176:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007178:	f107 0308 	add.w	r3, r7, #8
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3304      	adds	r3, #4
 800718c:	461a      	mov	r2, r3
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	f7fb fcee 	bl	8002b70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800719c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3314      	adds	r3, #20
 80071ac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	617b      	str	r3, [r7, #20]
   return(result);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3314      	adds	r3, #20
 80071c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c6:	627a      	str	r2, [r7, #36]	; 0x24
 80071c8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6a39      	ldr	r1, [r7, #32]
 80071cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80071de:	2302      	movs	r3, #2
  }
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3730      	adds	r7, #48	; 0x30
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	080078ed 	.word	0x080078ed
 80071ec:	08007987 	.word	0x08007987
 80071f0:	08007aff 	.word	0x08007aff

080071f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b20      	cmp	r3, #32
 800720c:	d11d      	bne.n	800724a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_Receive_DMA+0x26>
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e016      	b.n	800724c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_UART_Receive_DMA+0x38>
 8007228:	2302      	movs	r3, #2
 800722a:	e00f      	b.n	800724c <HAL_UART_Receive_DMA+0x58>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	461a      	mov	r2, r3
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fca7 	bl	8007b94 <UART_Start_Receive_DMA>
 8007246:	4603      	mov	r3, r0
 8007248:	e000      	b.n	800724c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800724a:	2302      	movs	r3, #2
  }
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b090      	sub	sp, #64	; 0x40
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800725c:	2300      	movs	r3, #0
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	bf0c      	ite	eq
 800726e:	2301      	moveq	r3, #1
 8007270:	2300      	movne	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b21      	cmp	r3, #33	; 0x21
 8007280:	d128      	bne.n	80072d4 <HAL_UART_DMAStop+0x80>
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d025      	beq.n	80072d4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3314      	adds	r3, #20
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	623b      	str	r3, [r7, #32]
   return(result);
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3314      	adds	r3, #20
 80072a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a8:	633a      	str	r2, [r7, #48]	; 0x30
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e5      	bne.n	8007288 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fb fca9 	bl	8002c20 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fcfe 	bl	8007cd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	bf0c      	ite	eq
 80072e2:	2301      	moveq	r3, #1
 80072e4:	2300      	movne	r3, #0
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b22      	cmp	r3, #34	; 0x22
 80072f4:	d128      	bne.n	8007348 <HAL_UART_DMAStop+0xf4>
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d025      	beq.n	8007348 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3314      	adds	r3, #20
 8007302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	60fb      	str	r3, [r7, #12]
   return(result);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3314      	adds	r3, #20
 800731a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800731c:	61fa      	str	r2, [r7, #28]
 800731e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69b9      	ldr	r1, [r7, #24]
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	617b      	str	r3, [r7, #20]
   return(result);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	4618      	mov	r0, r3
 800733e:	f7fb fc6f 	bl	8002c20 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fcec 	bl	8007d20 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3740      	adds	r7, #64	; 0x40
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b0ba      	sub	sp, #232	; 0xe8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800737a:	2300      	movs	r3, #0
 800737c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007380:	2300      	movs	r3, #0
 8007382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <HAL_UART_IRQHandler+0x66>
 80073a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fd93 	bl	8007ede <UART_Receive_IT>
      return;
 80073b8:	e256      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80de 	beq.w	8007580 <HAL_UART_IRQHandler+0x22c>
 80073c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80d1 	beq.w	8007580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_UART_IRQHandler+0xae>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0201 	orr.w	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_UART_IRQHandler+0xd2>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0202 	orr.w	r2, r3, #2
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <HAL_UART_IRQHandler+0xf6>
 8007432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f043 0204 	orr.w	r2, r3, #4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <HAL_UART_IRQHandler+0x126>
 8007456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d105      	bne.n	800746e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f043 0208 	orr.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 81ed 	beq.w	800785e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_UART_IRQHandler+0x14e>
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fd1e 	bl	8007ede <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	bf0c      	ite	eq
 80074b0:	2301      	moveq	r3, #1
 80074b2:	2300      	movne	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <HAL_UART_IRQHandler+0x17a>
 80074c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d04f      	beq.n	800756e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fc26 	bl	8007d20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d141      	bne.n	8007566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3314      	adds	r3, #20
 80074e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3314      	adds	r3, #20
 800750a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800750e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800751a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1d9      	bne.n	80074e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	2b00      	cmp	r3, #0
 8007534:	d013      	beq.n	800755e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	4a7d      	ldr	r2, [pc, #500]	; (8007730 <HAL_UART_IRQHandler+0x3dc>)
 800753c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	4618      	mov	r0, r3
 8007544:	f7fb fbdc 	bl	8002d00 <HAL_DMA_Abort_IT>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	e00e      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f9ae 	bl	80078c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	e00a      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9aa 	bl	80078c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756c:	e006      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f9a6 	bl	80078c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800757a:	e170      	b.n	800785e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	bf00      	nop
    return;
 800757e:	e16e      	b.n	800785e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	2b01      	cmp	r3, #1
 8007586:	f040 814a 	bne.w	800781e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8143 	beq.w	800781e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 813c 	beq.w	800781e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	f040 80b4 	bne.w	8007734 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8140 	beq.w	8007862 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ea:	429a      	cmp	r2, r3
 80075ec:	f080 8139 	bcs.w	8007862 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007602:	f000 8088 	beq.w	8007716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800761c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800763e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800764a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1d9      	bne.n	8007606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007664:	f023 0301 	bic.w	r3, r3, #1
 8007668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3314      	adds	r3, #20
 8007672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800767a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800767e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e1      	bne.n	8007652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3314      	adds	r3, #20
 8007694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800769e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3314      	adds	r3, #20
 80076ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e3      	bne.n	800768e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e6:	f023 0310 	bic.w	r3, r3, #16
 80076ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80076fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e3      	bne.n	80076d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	4618      	mov	r0, r3
 8007712:	f7fb fa85 	bl	8002c20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800771e:	b29b      	uxth	r3, r3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	b29b      	uxth	r3, r3
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f8d4 	bl	80078d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800772c:	e099      	b.n	8007862 <HAL_UART_IRQHandler+0x50e>
 800772e:	bf00      	nop
 8007730:	08007de7 	.word	0x08007de7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800773c:	b29b      	uxth	r3, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 808b 	beq.w	8007866 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8086 	beq.w	8007866 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800777e:	647a      	str	r2, [r7, #68]	; 0x44
 8007780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e3      	bne.n	800775a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3314      	adds	r3, #20
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	623b      	str	r3, [r7, #32]
   return(result);
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3314      	adds	r3, #20
 80077b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077b6:	633a      	str	r2, [r7, #48]	; 0x30
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e3      	bne.n	8007792 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0310 	bic.w	r3, r3, #16
 80077ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	330c      	adds	r3, #12
 80077f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077fc:	61fa      	str	r2, [r7, #28]
 80077fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	69b9      	ldr	r1, [r7, #24]
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	617b      	str	r3, [r7, #20]
   return(result);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e3      	bne.n	80077d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f85c 	bl	80078d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800781c:	e023      	b.n	8007866 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_UART_IRQHandler+0x4ea>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fae9 	bl	8007e0e <UART_Transmit_IT>
    return;
 800783c:	e014      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <HAL_UART_IRQHandler+0x514>
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d008      	beq.n	8007868 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fb29 	bl	8007eae <UART_EndTransmit_IT>
    return;
 800785c:	e004      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
    return;
 800785e:	bf00      	nop
 8007860:	e002      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
      return;
 8007862:	bf00      	nop
 8007864:	e000      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
      return;
 8007866:	bf00      	nop
  }
}
 8007868:	37e8      	adds	r7, #232	; 0xe8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b090      	sub	sp, #64	; 0x40
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d137      	bne.n	8007978 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800790a:	2200      	movs	r2, #0
 800790c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800790e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3314      	adds	r3, #20
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	623b      	str	r3, [r7, #32]
   return(result);
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38
 8007926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3314      	adds	r3, #20
 800792c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800792e:	633a      	str	r2, [r7, #48]	; 0x30
 8007930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e5      	bne.n	800790e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	330c      	adds	r3, #12
 8007948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	60fb      	str	r3, [r7, #12]
   return(result);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
 800795a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	330c      	adds	r3, #12
 8007960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007962:	61fa      	str	r2, [r7, #28]
 8007964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	69b9      	ldr	r1, [r7, #24]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	617b      	str	r3, [r7, #20]
   return(result);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e5      	bne.n	8007942 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007976:	e002      	b.n	800797e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007978:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800797a:	f7ff ff79 	bl	8007870 <HAL_UART_TxCpltCallback>
}
 800797e:	bf00      	nop
 8007980:	3740      	adds	r7, #64	; 0x40
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff ff75 	bl	8007884 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b09c      	sub	sp, #112	; 0x70
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d172      	bne.n	8007aa4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80079be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c0:	2200      	movs	r2, #0
 80079c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079da:	66bb      	str	r3, [r7, #104]	; 0x68
 80079dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80079e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e5      	bne.n	80079c4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0a:	f023 0301 	bic.w	r3, r3, #1
 8007a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8007a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3314      	adds	r3, #20
 8007a16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a18:	647a      	str	r2, [r7, #68]	; 0x44
 8007a1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e5      	bne.n	80079f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3314      	adds	r3, #20
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a42:	663b      	str	r3, [r7, #96]	; 0x60
 8007a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3314      	adds	r3, #20
 8007a4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a4c:	633a      	str	r2, [r7, #48]	; 0x30
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d119      	bne.n	8007aa4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0310 	bic.w	r3, r3, #16
 8007a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a90:	61fa      	str	r2, [r7, #28]
 8007a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	69b9      	ldr	r1, [r7, #24]
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d106      	bne.n	8007aba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ab4:	f7ff ff0e 	bl	80078d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ab8:	e002      	b.n	8007ac0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007aba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007abc:	f7ff feec 	bl	8007898 <HAL_UART_RxCpltCallback>
}
 8007ac0:	bf00      	nop
 8007ac2:	3770      	adds	r7, #112	; 0x70
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d108      	bne.n	8007af0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fef3 	bl	80078d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007aee:	e002      	b.n	8007af6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff fedb 	bl	80078ac <HAL_UART_RxHalfCpltCallback>
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b80      	cmp	r3, #128	; 0x80
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b21      	cmp	r3, #33	; 0x21
 8007b30:	d108      	bne.n	8007b44 <UART_DMAError+0x46>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007b3e:	68b8      	ldr	r0, [r7, #8]
 8007b40:	f000 f8c6 	bl	8007cd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4e:	2b40      	cmp	r3, #64	; 0x40
 8007b50:	bf0c      	ite	eq
 8007b52:	2301      	moveq	r3, #1
 8007b54:	2300      	movne	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b22      	cmp	r3, #34	; 0x22
 8007b64:	d108      	bne.n	8007b78 <UART_DMAError+0x7a>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007b72:	68b8      	ldr	r0, [r7, #8]
 8007b74:	f000 f8d4 	bl	8007d20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	f043 0210 	orr.w	r2, r3, #16
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b84:	68b8      	ldr	r0, [r7, #8]
 8007b86:	f7ff fe9b 	bl	80078c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b098      	sub	sp, #96	; 0x60
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	88fa      	ldrh	r2, [r7, #6]
 8007bac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2222      	movs	r2, #34	; 0x22
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	4a40      	ldr	r2, [pc, #256]	; (8007cc4 <UART_Start_Receive_DMA+0x130>)
 8007bc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	4a3f      	ldr	r2, [pc, #252]	; (8007cc8 <UART_Start_Receive_DMA+0x134>)
 8007bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	4a3e      	ldr	r2, [pc, #248]	; (8007ccc <UART_Start_Receive_DMA+0x138>)
 8007bd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	2200      	movs	r2, #0
 8007bda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3304      	adds	r3, #4
 8007bec:	4619      	mov	r1, r3
 8007bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	f7fa ffbc 	bl	8002b70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	613b      	str	r3, [r7, #16]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d019      	beq.n	8007c52 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	330c      	adds	r3, #12
 8007c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007c40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e5      	bne.n	8007c1e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3314      	adds	r3, #20
 8007c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	657b      	str	r3, [r7, #84]	; 0x54
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3314      	adds	r3, #20
 8007c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c72:	63ba      	str	r2, [r7, #56]	; 0x38
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e5      	bne.n	8007c52 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3314      	adds	r3, #20
 8007c8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	617b      	str	r3, [r7, #20]
   return(result);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3314      	adds	r3, #20
 8007ca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8007ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6a39      	ldr	r1, [r7, #32]
 8007cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e5      	bne.n	8007c86 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3760      	adds	r7, #96	; 0x60
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	080079a3 	.word	0x080079a3
 8007cc8:	08007ac9 	.word	0x08007ac9
 8007ccc:	08007aff 	.word	0x08007aff

08007cd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b089      	sub	sp, #36	; 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	61ba      	str	r2, [r7, #24]
 8007cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6979      	ldr	r1, [r7, #20]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	613b      	str	r3, [r7, #16]
   return(result);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e5      	bne.n	8007cd8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d14:	bf00      	nop
 8007d16:	3724      	adds	r7, #36	; 0x24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b095      	sub	sp, #84	; 0x54
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d48:	643a      	str	r2, [r7, #64]	; 0x40
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e5      	bne.n	8007d28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3314      	adds	r3, #20
 8007d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3314      	adds	r3, #20
 8007d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d119      	bne.n	8007dcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	330c      	adds	r3, #12
 8007d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f023 0310 	bic.w	r3, r3, #16
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007db8:	61ba      	str	r2, [r7, #24]
 8007dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6979      	ldr	r1, [r7, #20]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007dda:	bf00      	nop
 8007ddc:	3754      	adds	r7, #84	; 0x54
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff fd5d 	bl	80078c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b085      	sub	sp, #20
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b21      	cmp	r3, #33	; 0x21
 8007e20:	d13e      	bne.n	8007ea0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2a:	d114      	bne.n	8007e56 <UART_Transmit_IT+0x48>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d110      	bne.n	8007e56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	1c9a      	adds	r2, r3, #2
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	621a      	str	r2, [r3, #32]
 8007e54:	e008      	b.n	8007e68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	1c59      	adds	r1, r3, #1
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6211      	str	r1, [r2, #32]
 8007e60:	781a      	ldrb	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	4619      	mov	r1, r3
 8007e76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10f      	bne.n	8007e9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e000      	b.n	8007ea2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ea0:	2302      	movs	r3, #2
  }
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff fcce 	bl	8007870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b08c      	sub	sp, #48	; 0x30
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b22      	cmp	r3, #34	; 0x22
 8007ef0:	f040 80ab 	bne.w	800804a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efc:	d117      	bne.n	8007f2e <UART_Receive_IT+0x50>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d113      	bne.n	8007f2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	1c9a      	adds	r2, r3, #2
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8007f2c:	e026      	b.n	8007f7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f40:	d007      	beq.n	8007f52 <UART_Receive_IT+0x74>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <UART_Receive_IT+0x82>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	e008      	b.n	8007f72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d15a      	bne.n	8008046 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0220 	bic.w	r2, r2, #32
 8007f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	695a      	ldr	r2, [r3, #20]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0201 	bic.w	r2, r2, #1
 8007fbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d135      	bne.n	800803c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f023 0310 	bic.w	r3, r3, #16
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	330c      	adds	r3, #12
 8007ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff6:	623a      	str	r2, [r7, #32]
 8007ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	69f9      	ldr	r1, [r7, #28]
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	61bb      	str	r3, [r7, #24]
   return(result);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b10      	cmp	r3, #16
 8008016:	d10a      	bne.n	800802e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fc4d 	bl	80078d4 <HAL_UARTEx_RxEventCallback>
 800803a:	e002      	b.n	8008042 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff fc2b 	bl	8007898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	e002      	b.n	800804c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	e000      	b.n	800804c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800804a:	2302      	movs	r3, #2
  }
}
 800804c:	4618      	mov	r0, r3
 800804e:	3730      	adds	r7, #48	; 0x30
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008058:	b0c0      	sub	sp, #256	; 0x100
 800805a:	af00      	add	r7, sp, #0
 800805c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008070:	68d9      	ldr	r1, [r3, #12]
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	ea40 0301 	orr.w	r3, r0, r1
 800807c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800807e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	431a      	orrs	r2, r3
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	431a      	orrs	r2, r3
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080ac:	f021 010c 	bic.w	r1, r1, #12
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080ba:	430b      	orrs	r3, r1
 80080bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ce:	6999      	ldr	r1, [r3, #24]
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	ea40 0301 	orr.w	r3, r0, r1
 80080da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b8f      	ldr	r3, [pc, #572]	; (8008320 <UART_SetConfig+0x2cc>)
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d005      	beq.n	80080f4 <UART_SetConfig+0xa0>
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	4b8d      	ldr	r3, [pc, #564]	; (8008324 <UART_SetConfig+0x2d0>)
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d104      	bne.n	80080fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080f4:	f7fe f8b8 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 80080f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080fc:	e003      	b.n	8008106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080fe:	f7fe f89f 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 8008102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008110:	f040 810c 	bne.w	800832c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008118:	2200      	movs	r2, #0
 800811a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800811e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008126:	4622      	mov	r2, r4
 8008128:	462b      	mov	r3, r5
 800812a:	1891      	adds	r1, r2, r2
 800812c:	65b9      	str	r1, [r7, #88]	; 0x58
 800812e:	415b      	adcs	r3, r3
 8008130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008136:	4621      	mov	r1, r4
 8008138:	eb12 0801 	adds.w	r8, r2, r1
 800813c:	4629      	mov	r1, r5
 800813e:	eb43 0901 	adc.w	r9, r3, r1
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800814e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008156:	4690      	mov	r8, r2
 8008158:	4699      	mov	r9, r3
 800815a:	4623      	mov	r3, r4
 800815c:	eb18 0303 	adds.w	r3, r8, r3
 8008160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008164:	462b      	mov	r3, r5
 8008166:	eb49 0303 	adc.w	r3, r9, r3
 800816a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800817a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800817e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008182:	460b      	mov	r3, r1
 8008184:	18db      	adds	r3, r3, r3
 8008186:	653b      	str	r3, [r7, #80]	; 0x50
 8008188:	4613      	mov	r3, r2
 800818a:	eb42 0303 	adc.w	r3, r2, r3
 800818e:	657b      	str	r3, [r7, #84]	; 0x54
 8008190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008198:	f7f8 f8d2 	bl	8000340 <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4b61      	ldr	r3, [pc, #388]	; (8008328 <UART_SetConfig+0x2d4>)
 80081a2:	fba3 2302 	umull	r2, r3, r3, r2
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	011c      	lsls	r4, r3, #4
 80081aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081bc:	4642      	mov	r2, r8
 80081be:	464b      	mov	r3, r9
 80081c0:	1891      	adds	r1, r2, r2
 80081c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80081c4:	415b      	adcs	r3, r3
 80081c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081cc:	4641      	mov	r1, r8
 80081ce:	eb12 0a01 	adds.w	sl, r2, r1
 80081d2:	4649      	mov	r1, r9
 80081d4:	eb43 0b01 	adc.w	fp, r3, r1
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081ec:	4692      	mov	sl, r2
 80081ee:	469b      	mov	fp, r3
 80081f0:	4643      	mov	r3, r8
 80081f2:	eb1a 0303 	adds.w	r3, sl, r3
 80081f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081fa:	464b      	mov	r3, r9
 80081fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008210:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008218:	460b      	mov	r3, r1
 800821a:	18db      	adds	r3, r3, r3
 800821c:	643b      	str	r3, [r7, #64]	; 0x40
 800821e:	4613      	mov	r3, r2
 8008220:	eb42 0303 	adc.w	r3, r2, r3
 8008224:	647b      	str	r3, [r7, #68]	; 0x44
 8008226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800822a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800822e:	f7f8 f887 	bl	8000340 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4611      	mov	r1, r2
 8008238:	4b3b      	ldr	r3, [pc, #236]	; (8008328 <UART_SetConfig+0x2d4>)
 800823a:	fba3 2301 	umull	r2, r3, r3, r1
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	2264      	movs	r2, #100	; 0x64
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	1acb      	subs	r3, r1, r3
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800824e:	4b36      	ldr	r3, [pc, #216]	; (8008328 <UART_SetConfig+0x2d4>)
 8008250:	fba3 2302 	umull	r2, r3, r3, r2
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800825c:	441c      	add	r4, r3
 800825e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008262:	2200      	movs	r2, #0
 8008264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800826c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	1891      	adds	r1, r2, r2
 8008276:	63b9      	str	r1, [r7, #56]	; 0x38
 8008278:	415b      	adcs	r3, r3
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800827c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008280:	4641      	mov	r1, r8
 8008282:	1851      	adds	r1, r2, r1
 8008284:	6339      	str	r1, [r7, #48]	; 0x30
 8008286:	4649      	mov	r1, r9
 8008288:	414b      	adcs	r3, r1
 800828a:	637b      	str	r3, [r7, #52]	; 0x34
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008298:	4659      	mov	r1, fp
 800829a:	00cb      	lsls	r3, r1, #3
 800829c:	4651      	mov	r1, sl
 800829e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082a2:	4651      	mov	r1, sl
 80082a4:	00ca      	lsls	r2, r1, #3
 80082a6:	4610      	mov	r0, r2
 80082a8:	4619      	mov	r1, r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	4642      	mov	r2, r8
 80082ae:	189b      	adds	r3, r3, r2
 80082b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082b4:	464b      	mov	r3, r9
 80082b6:	460a      	mov	r2, r1
 80082b8:	eb42 0303 	adc.w	r3, r2, r3
 80082bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80082d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082d4:	460b      	mov	r3, r1
 80082d6:	18db      	adds	r3, r3, r3
 80082d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082da:	4613      	mov	r3, r2
 80082dc:	eb42 0303 	adc.w	r3, r2, r3
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082ea:	f7f8 f829 	bl	8000340 <__aeabi_uldivmod>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <UART_SetConfig+0x2d4>)
 80082f4:	fba3 1302 	umull	r1, r3, r3, r2
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	2164      	movs	r1, #100	; 0x64
 80082fc:	fb01 f303 	mul.w	r3, r1, r3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	3332      	adds	r3, #50	; 0x32
 8008306:	4a08      	ldr	r2, [pc, #32]	; (8008328 <UART_SetConfig+0x2d4>)
 8008308:	fba2 2303 	umull	r2, r3, r2, r3
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	f003 0207 	and.w	r2, r3, #7
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4422      	add	r2, r4
 800831a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800831c:	e106      	b.n	800852c <UART_SetConfig+0x4d8>
 800831e:	bf00      	nop
 8008320:	40011000 	.word	0x40011000
 8008324:	40011400 	.word	0x40011400
 8008328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008330:	2200      	movs	r2, #0
 8008332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800833a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800833e:	4642      	mov	r2, r8
 8008340:	464b      	mov	r3, r9
 8008342:	1891      	adds	r1, r2, r2
 8008344:	6239      	str	r1, [r7, #32]
 8008346:	415b      	adcs	r3, r3
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
 800834a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800834e:	4641      	mov	r1, r8
 8008350:	1854      	adds	r4, r2, r1
 8008352:	4649      	mov	r1, r9
 8008354:	eb43 0501 	adc.w	r5, r3, r1
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	00eb      	lsls	r3, r5, #3
 8008362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008366:	00e2      	lsls	r2, r4, #3
 8008368:	4614      	mov	r4, r2
 800836a:	461d      	mov	r5, r3
 800836c:	4643      	mov	r3, r8
 800836e:	18e3      	adds	r3, r4, r3
 8008370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008374:	464b      	mov	r3, r9
 8008376:	eb45 0303 	adc.w	r3, r5, r3
 800837a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800838a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800838e:	f04f 0200 	mov.w	r2, #0
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800839a:	4629      	mov	r1, r5
 800839c:	008b      	lsls	r3, r1, #2
 800839e:	4621      	mov	r1, r4
 80083a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083a4:	4621      	mov	r1, r4
 80083a6:	008a      	lsls	r2, r1, #2
 80083a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083ac:	f7f7 ffc8 	bl	8000340 <__aeabi_uldivmod>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4b60      	ldr	r3, [pc, #384]	; (8008538 <UART_SetConfig+0x4e4>)
 80083b6:	fba3 2302 	umull	r2, r3, r3, r2
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	011c      	lsls	r4, r3, #4
 80083be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80083cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	1891      	adds	r1, r2, r2
 80083d6:	61b9      	str	r1, [r7, #24]
 80083d8:	415b      	adcs	r3, r3
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083e0:	4641      	mov	r1, r8
 80083e2:	1851      	adds	r1, r2, r1
 80083e4:	6139      	str	r1, [r7, #16]
 80083e6:	4649      	mov	r1, r9
 80083e8:	414b      	adcs	r3, r1
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083f8:	4659      	mov	r1, fp
 80083fa:	00cb      	lsls	r3, r1, #3
 80083fc:	4651      	mov	r1, sl
 80083fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008402:	4651      	mov	r1, sl
 8008404:	00ca      	lsls	r2, r1, #3
 8008406:	4610      	mov	r0, r2
 8008408:	4619      	mov	r1, r3
 800840a:	4603      	mov	r3, r0
 800840c:	4642      	mov	r2, r8
 800840e:	189b      	adds	r3, r3, r2
 8008410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008414:	464b      	mov	r3, r9
 8008416:	460a      	mov	r2, r1
 8008418:	eb42 0303 	adc.w	r3, r2, r3
 800841c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	67bb      	str	r3, [r7, #120]	; 0x78
 800842a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800842c:	f04f 0200 	mov.w	r2, #0
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008438:	4649      	mov	r1, r9
 800843a:	008b      	lsls	r3, r1, #2
 800843c:	4641      	mov	r1, r8
 800843e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008442:	4641      	mov	r1, r8
 8008444:	008a      	lsls	r2, r1, #2
 8008446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800844a:	f7f7 ff79 	bl	8000340 <__aeabi_uldivmod>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4611      	mov	r1, r2
 8008454:	4b38      	ldr	r3, [pc, #224]	; (8008538 <UART_SetConfig+0x4e4>)
 8008456:	fba3 2301 	umull	r2, r3, r3, r1
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	2264      	movs	r2, #100	; 0x64
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	1acb      	subs	r3, r1, r3
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	3332      	adds	r3, #50	; 0x32
 8008468:	4a33      	ldr	r2, [pc, #204]	; (8008538 <UART_SetConfig+0x4e4>)
 800846a:	fba2 2303 	umull	r2, r3, r2, r3
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008474:	441c      	add	r4, r3
 8008476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800847a:	2200      	movs	r2, #0
 800847c:	673b      	str	r3, [r7, #112]	; 0x70
 800847e:	677a      	str	r2, [r7, #116]	; 0x74
 8008480:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008484:	4642      	mov	r2, r8
 8008486:	464b      	mov	r3, r9
 8008488:	1891      	adds	r1, r2, r2
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	415b      	adcs	r3, r3
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008494:	4641      	mov	r1, r8
 8008496:	1851      	adds	r1, r2, r1
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	4649      	mov	r1, r9
 800849c:	414b      	adcs	r3, r1
 800849e:	607b      	str	r3, [r7, #4]
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084ac:	4659      	mov	r1, fp
 80084ae:	00cb      	lsls	r3, r1, #3
 80084b0:	4651      	mov	r1, sl
 80084b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084b6:	4651      	mov	r1, sl
 80084b8:	00ca      	lsls	r2, r1, #3
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	4603      	mov	r3, r0
 80084c0:	4642      	mov	r2, r8
 80084c2:	189b      	adds	r3, r3, r2
 80084c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80084c6:	464b      	mov	r3, r9
 80084c8:	460a      	mov	r2, r1
 80084ca:	eb42 0303 	adc.w	r3, r2, r3
 80084ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	663b      	str	r3, [r7, #96]	; 0x60
 80084da:	667a      	str	r2, [r7, #100]	; 0x64
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084e8:	4649      	mov	r1, r9
 80084ea:	008b      	lsls	r3, r1, #2
 80084ec:	4641      	mov	r1, r8
 80084ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084f2:	4641      	mov	r1, r8
 80084f4:	008a      	lsls	r2, r1, #2
 80084f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084fa:	f7f7 ff21 	bl	8000340 <__aeabi_uldivmod>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <UART_SetConfig+0x4e4>)
 8008504:	fba3 1302 	umull	r1, r3, r3, r2
 8008508:	095b      	lsrs	r3, r3, #5
 800850a:	2164      	movs	r1, #100	; 0x64
 800850c:	fb01 f303 	mul.w	r3, r1, r3
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	3332      	adds	r3, #50	; 0x32
 8008516:	4a08      	ldr	r2, [pc, #32]	; (8008538 <UART_SetConfig+0x4e4>)
 8008518:	fba2 2303 	umull	r2, r3, r2, r3
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	f003 020f 	and.w	r2, r3, #15
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4422      	add	r2, r4
 800852a:	609a      	str	r2, [r3, #8]
}
 800852c:	bf00      	nop
 800852e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008532:	46bd      	mov	sp, r7
 8008534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008538:	51eb851f 	.word	0x51eb851f

0800853c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800853c:	b084      	sub	sp, #16
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	f107 001c 	add.w	r0, r7, #28
 800854a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2b01      	cmp	r3, #1
 8008552:	d122      	bne.n	800859a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800857c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d105      	bne.n	800858e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f9c0 	bl	8008914 <USB_CoreReset>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
 8008598:	e01a      	b.n	80085d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f9b4 	bl	8008914 <USB_CoreReset>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80085b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
 80085c2:	e005      	b.n	80085d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d10b      	bne.n	80085ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f043 0206 	orr.w	r2, r3, #6
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f043 0220 	orr.w	r2, r3, #32
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085fa:	b004      	add	sp, #16
 80085fc:	4770      	bx	lr

080085fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f043 0201 	orr.w	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f023 0201 	bic.w	r2, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d115      	bne.n	8008690 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008670:	2001      	movs	r0, #1
 8008672:	f7f9 fccd 	bl	8002010 <HAL_Delay>
      ms++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f93a 	bl	80088f6 <USB_GetMode>
 8008682:	4603      	mov	r3, r0
 8008684:	2b01      	cmp	r3, #1
 8008686:	d01e      	beq.n	80086c6 <USB_SetCurrentMode+0x84>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b31      	cmp	r3, #49	; 0x31
 800868c:	d9f0      	bls.n	8008670 <USB_SetCurrentMode+0x2e>
 800868e:	e01a      	b.n	80086c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d115      	bne.n	80086c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086a2:	2001      	movs	r0, #1
 80086a4:	f7f9 fcb4 	bl	8002010 <HAL_Delay>
      ms++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f921 	bl	80088f6 <USB_GetMode>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <USB_SetCurrentMode+0x84>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b31      	cmp	r3, #49	; 0x31
 80086be:	d9f0      	bls.n	80086a2 <USB_SetCurrentMode+0x60>
 80086c0:	e001      	b.n	80086c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e005      	b.n	80086d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b32      	cmp	r3, #50	; 0x32
 80086ca:	d101      	bne.n	80086d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e000      	b.n	80086d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3301      	adds	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4a13      	ldr	r2, [pc, #76]	; (8008740 <USB_FlushTxFifo+0x64>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d901      	bls.n	80086fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e01b      	b.n	8008734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	daf2      	bge.n	80086ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	019b      	lsls	r3, r3, #6
 800870c:	f043 0220 	orr.w	r2, r3, #32
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4a08      	ldr	r2, [pc, #32]	; (8008740 <USB_FlushTxFifo+0x64>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d901      	bls.n	8008726 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e006      	b.n	8008734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b20      	cmp	r3, #32
 8008730:	d0f0      	beq.n	8008714 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	00030d40 	.word	0x00030d40

08008744 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3301      	adds	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4a11      	ldr	r2, [pc, #68]	; (80087a0 <USB_FlushRxFifo+0x5c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d901      	bls.n	8008762 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e018      	b.n	8008794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	daf2      	bge.n	8008750 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2210      	movs	r2, #16
 8008772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <USB_FlushRxFifo+0x5c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d901      	bls.n	8008786 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e006      	b.n	8008794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f003 0310 	and.w	r3, r3, #16
 800878e:	2b10      	cmp	r3, #16
 8008790:	d0f0      	beq.n	8008774 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	00030d40 	.word	0x00030d40

080087a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b089      	sub	sp, #36	; 0x24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4611      	mov	r1, r2
 80087b0:	461a      	mov	r2, r3
 80087b2:	460b      	mov	r3, r1
 80087b4:	71fb      	strb	r3, [r7, #7]
 80087b6:	4613      	mov	r3, r2
 80087b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80087c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d123      	bne.n	8008812 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80087ca:	88bb      	ldrh	r3, [r7, #4]
 80087cc:	3303      	adds	r3, #3
 80087ce:	089b      	lsrs	r3, r3, #2
 80087d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80087d2:	2300      	movs	r3, #0
 80087d4:	61bb      	str	r3, [r7, #24]
 80087d6:	e018      	b.n	800880a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	031a      	lsls	r2, r3, #12
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e4:	461a      	mov	r2, r3
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3301      	adds	r3, #1
 80087f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	3301      	adds	r3, #1
 80087f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	3301      	adds	r3, #1
 80087fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	3301      	adds	r3, #1
 8008802:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	3301      	adds	r3, #1
 8008808:	61bb      	str	r3, [r7, #24]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	429a      	cmp	r2, r3
 8008810:	d3e2      	bcc.n	80087d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3724      	adds	r7, #36	; 0x24
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008820:	b480      	push	{r7}
 8008822:	b08b      	sub	sp, #44	; 0x2c
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	089b      	lsrs	r3, r3, #2
 800883a:	b29b      	uxth	r3, r3
 800883c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800883e:	88fb      	ldrh	r3, [r7, #6]
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008846:	2300      	movs	r3, #0
 8008848:	623b      	str	r3, [r7, #32]
 800884a:	e014      	b.n	8008876 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	601a      	str	r2, [r3, #0]
    pDest++;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	3301      	adds	r3, #1
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	3301      	adds	r3, #1
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	3301      	adds	r3, #1
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	3301      	adds	r3, #1
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	3301      	adds	r3, #1
 8008874:	623b      	str	r3, [r7, #32]
 8008876:	6a3a      	ldr	r2, [r7, #32]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	429a      	cmp	r2, r3
 800887c:	d3e6      	bcc.n	800884c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800887e:	8bfb      	ldrh	r3, [r7, #30]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d01e      	beq.n	80088c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888e:	461a      	mov	r2, r3
 8008890:	f107 0310 	add.w	r3, r7, #16
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	701a      	strb	r2, [r3, #0]
      i++;
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	3301      	adds	r3, #1
 80088ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	3301      	adds	r3, #1
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80088b6:	8bfb      	ldrh	r3, [r7, #30]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80088bc:	8bfb      	ldrh	r3, [r7, #30]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1ea      	bne.n	8008898 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	372c      	adds	r7, #44	; 0x2c
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4013      	ands	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088e8:	68fb      	ldr	r3, [r7, #12]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f003 0301 	and.w	r3, r3, #1
}
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
	...

08008914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3301      	adds	r3, #1
 8008924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4a13      	ldr	r2, [pc, #76]	; (8008978 <USB_CoreReset+0x64>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d901      	bls.n	8008932 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e01b      	b.n	800896a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	daf2      	bge.n	8008920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	f043 0201 	orr.w	r2, r3, #1
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a09      	ldr	r2, [pc, #36]	; (8008978 <USB_CoreReset+0x64>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d901      	bls.n	800895c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e006      	b.n	800896a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b01      	cmp	r3, #1
 8008966:	d0f0      	beq.n	800894a <USB_CoreReset+0x36>

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	00030d40 	.word	0x00030d40

0800897c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800897c:	b084      	sub	sp, #16
 800897e:	b580      	push	{r7, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800898a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800899c:	461a      	mov	r2, r3
 800899e:	2300      	movs	r3, #0
 80089a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d018      	beq.n	8008a04 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d10a      	bne.n	80089ee <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089e6:	f043 0304 	orr.w	r3, r3, #4
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	e014      	b.n	8008a18 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089fc:	f023 0304 	bic.w	r3, r3, #4
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	e009      	b.n	8008a18 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a12:	f023 0304 	bic.w	r3, r3, #4
 8008a16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a18:	2110      	movs	r1, #16
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff fe5e 	bl	80086dc <USB_FlushTxFifo>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fe8a 	bl	8008744 <USB_FlushRxFifo>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e015      	b.n	8008a6c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a60:	461a      	mov	r2, r3
 8008a62:	2300      	movs	r3, #0
 8008a64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d3e5      	bcc.n	8008a40 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a80:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a13      	ldr	r2, [pc, #76]	; (8008ae8 <USB_HostInit+0x16c>)
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a13      	ldr	r2, [pc, #76]	; (8008aec <USB_HostInit+0x170>)
 8008aa0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008aa4:	e009      	b.n	8008aba <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2280      	movs	r2, #128	; 0x80
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <USB_HostInit+0x174>)
 8008ab0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <USB_HostInit+0x178>)
 8008ab6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f043 0210 	orr.w	r2, r3, #16
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699a      	ldr	r2, [r3, #24]
 8008ad0:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <USB_HostInit+0x17c>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr
 8008ae8:	01000200 	.word	0x01000200
 8008aec:	00e00300 	.word	0x00e00300
 8008af0:	00600080 	.word	0x00600080
 8008af4:	004000e0 	.word	0x004000e0
 8008af8:	a3200008 	.word	0xa3200008

08008afc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b1a:	f023 0303 	bic.w	r3, r3, #3
 8008b1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b34:	4313      	orrs	r3, r2
 8008b36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d107      	bne.n	8008b4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b44:	461a      	mov	r2, r3
 8008b46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008b4a:	6053      	str	r3, [r2, #4]
 8008b4c:	e009      	b.n	8008b62 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d106      	bne.n	8008b62 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b60:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ba0:	2064      	movs	r0, #100	; 0x64
 8008ba2:	f7f9 fa35 	bl	8002010 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008bb4:	200a      	movs	r0, #10
 8008bb6:	f7f9 fa2b 	bl	8002010 <HAL_Delay>

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008be8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d109      	bne.n	8008c08 <USB_DriveVbus+0x44>
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d106      	bne.n	8008c08 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008c02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c06:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c12:	d109      	bne.n	8008c28 <USB_DriveVbus+0x64>
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c26:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	0c5b      	lsrs	r3, r3, #17
 8008c54:	f003 0303 	and.w	r3, r3, #3
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	b29b      	uxth	r3, r3
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	4608      	mov	r0, r1
 8008c92:	4611      	mov	r1, r2
 8008c94:	461a      	mov	r2, r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	70fb      	strb	r3, [r7, #3]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70bb      	strb	r3, [r7, #2]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cbc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008cbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d87e      	bhi.n	8008dc4 <USB_HC_Init+0x13c>
 8008cc6:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <USB_HC_Init+0x44>)
 8008cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008d87 	.word	0x08008d87
 8008cd4:	08008cdd 	.word	0x08008cdd
 8008cd8:	08008d49 	.word	0x08008d49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f240 439d 	movw	r3, #1181	; 0x49d
 8008cee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008cf0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da10      	bge.n	8008d1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008d18:	e057      	b.n	8008dca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d051      	beq.n	8008dca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	0151      	lsls	r1, r2, #5
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	440a      	add	r2, r1
 8008d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008d44:	60d3      	str	r3, [r2, #12]
      break;
 8008d46:	e040      	b.n	8008dca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d54:	461a      	mov	r2, r3
 8008d56:	f240 639d 	movw	r3, #1693	; 0x69d
 8008d5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da34      	bge.n	8008dce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008d84:	e023      	b.n	8008dce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d92:	461a      	mov	r2, r3
 8008d94:	f240 2325 	movw	r3, #549	; 0x225
 8008d98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	da17      	bge.n	8008dd2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dbc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008dc0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008dc2:	e006      	b.n	8008dd2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	77fb      	strb	r3, [r7, #31]
      break;
 8008dc8:	e004      	b.n	8008dd4 <USB_HC_Init+0x14c>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e002      	b.n	8008dd4 <USB_HC_Init+0x14c>
      break;
 8008dce:	bf00      	nop
 8008dd0:	e000      	b.n	8008dd4 <USB_HC_Init+0x14c>
      break;
 8008dd2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	78fa      	ldrb	r2, [r7, #3]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dee:	f043 0302 	orr.w	r3, r3, #2
 8008df2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	2101      	movs	r1, #1
 8008e04:	fa01 f303 	lsl.w	r3, r1, r3
 8008e08:	6939      	ldr	r1, [r7, #16]
 8008e0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008e1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da03      	bge.n	8008e2e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	e001      	b.n	8008e32 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff feff 	bl	8008c36 <USB_GetHostSpeed>
 8008e38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d106      	bne.n	8008e50 <USB_HC_Init+0x1c8>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d003      	beq.n	8008e50 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	e001      	b.n	8008e54 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e54:	787b      	ldrb	r3, [r7, #1]
 8008e56:	059b      	lsls	r3, r3, #22
 8008e58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e5c:	78bb      	ldrb	r3, [r7, #2]
 8008e5e:	02db      	lsls	r3, r3, #11
 8008e60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e6a:	049b      	lsls	r3, r3, #18
 8008e6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	0159      	lsls	r1, r3, #5
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	440b      	add	r3, r1
 8008e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e90:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008e92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d003      	beq.n	8008ea2 <USB_HC_Init+0x21a>
 8008e9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d10f      	bne.n	8008ec2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	78fa      	ldrb	r2, [r7, #3]
 8008eb2:	0151      	lsls	r1, r2, #5
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ec0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08c      	sub	sp, #48	; 0x30
 8008ed0:	af02      	add	r7, sp, #8
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d02d      	beq.n	8008f52 <USB_HC_StartXfer+0x86>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	791b      	ldrb	r3, [r3, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d129      	bne.n	8008f52 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d117      	bne.n	8008f34 <USB_HC_StartXfer+0x68>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	79db      	ldrb	r3, [r3, #7]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <USB_HC_StartXfer+0x48>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	79db      	ldrb	r3, [r3, #7]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d10f      	bne.n	8008f34 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	6a3a      	ldr	r2, [r7, #32]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10b      	bne.n	8008f52 <USB_HC_StartXfer+0x86>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	795b      	ldrb	r3, [r3, #5]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d107      	bne.n	8008f52 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	4619      	mov	r1, r3
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fa0f 	bl	800936c <USB_DoPing>
      return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e0f8      	b.n	8009144 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d018      	beq.n	8008f8c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	8912      	ldrh	r2, [r2, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	3b01      	subs	r3, #1
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	8912      	ldrh	r2, [r2, #8]
 8008f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f6e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008f70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f72:	8b7b      	ldrh	r3, [r7, #26]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d90b      	bls.n	8008f90 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008f78:	8b7b      	ldrh	r3, [r7, #26]
 8008f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	8912      	ldrh	r2, [r2, #8]
 8008f82:	fb03 f202 	mul.w	r2, r3, r2
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	611a      	str	r2, [r3, #16]
 8008f8a:	e001      	b.n	8008f90 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	78db      	ldrb	r3, [r3, #3]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d007      	beq.n	8008fa8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	8912      	ldrh	r2, [r2, #8]
 8008f9e:	fb03 f202 	mul.w	r2, r3, r2
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	611a      	str	r2, [r3, #16]
 8008fa6:	e003      	b.n	8008fb0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	695a      	ldr	r2, [r3, #20]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008fb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008fba:	04d9      	lsls	r1, r3, #19
 8008fbc:	4b63      	ldr	r3, [pc, #396]	; (800914c <USB_HC_StartXfer+0x280>)
 8008fbe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008fc0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	7a9b      	ldrb	r3, [r3, #10]
 8008fc6:	075b      	lsls	r3, r3, #29
 8008fc8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008fcc:	69f9      	ldr	r1, [r7, #28]
 8008fce:	0148      	lsls	r0, r1, #5
 8008fd0:	6a39      	ldr	r1, [r7, #32]
 8008fd2:	4401      	add	r1, r0
 8008fd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008fd8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008fda:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	68d9      	ldr	r1, [r3, #12]
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff2:	460a      	mov	r2, r1
 8008ff4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	bf0c      	ite	eq
 8009006:	2301      	moveq	r3, #1
 8009008:	2300      	movne	r3, #0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	4413      	add	r3, r2
 8009016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	0151      	lsls	r1, r2, #5
 8009020:	6a3a      	ldr	r2, [r7, #32]
 8009022:	440a      	add	r2, r1
 8009024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800902c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	4413      	add	r3, r2
 8009036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	7e7b      	ldrb	r3, [r7, #25]
 800903e:	075b      	lsls	r3, r3, #29
 8009040:	69f9      	ldr	r1, [r7, #28]
 8009042:	0148      	lsls	r0, r1, #5
 8009044:	6a39      	ldr	r1, [r7, #32]
 8009046:	4401      	add	r1, r0
 8009048:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800904c:	4313      	orrs	r3, r2
 800904e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009066:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	78db      	ldrb	r3, [r3, #3]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d004      	beq.n	800907a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009076:	613b      	str	r3, [r7, #16]
 8009078:	e003      	b.n	8009082 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009080:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009088:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	4413      	add	r3, r2
 8009092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009096:	461a      	mov	r2, r3
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e04e      	b.n	8009144 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	78db      	ldrb	r3, [r3, #3]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d149      	bne.n	8009142 <USB_HC_StartXfer+0x276>
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d045      	beq.n	8009142 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	79db      	ldrb	r3, [r3, #7]
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d830      	bhi.n	8009120 <USB_HC_StartXfer+0x254>
 80090be:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <USB_HC_StartXfer+0x1f8>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	080090d5 	.word	0x080090d5
 80090c8:	080090f9 	.word	0x080090f9
 80090cc:	080090d5 	.word	0x080090d5
 80090d0:	080090f9 	.word	0x080090f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	3303      	adds	r3, #3
 80090da:	089b      	lsrs	r3, r3, #2
 80090dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80090de:	8afa      	ldrh	r2, [r7, #22]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d91c      	bls.n	8009124 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	f043 0220 	orr.w	r2, r3, #32
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80090f6:	e015      	b.n	8009124 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	3303      	adds	r3, #3
 80090fe:	089b      	lsrs	r3, r3, #2
 8009100:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009102:	8afa      	ldrh	r2, [r7, #22]
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	b29b      	uxth	r3, r3
 800910e:	429a      	cmp	r2, r3
 8009110:	d90a      	bls.n	8009128 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	619a      	str	r2, [r3, #24]
        }
        break;
 800911e:	e003      	b.n	8009128 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009120:	bf00      	nop
 8009122:	e002      	b.n	800912a <USB_HC_StartXfer+0x25e>
        break;
 8009124:	bf00      	nop
 8009126:	e000      	b.n	800912a <USB_HC_StartXfer+0x25e>
        break;
 8009128:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	68d9      	ldr	r1, [r3, #12]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	785a      	ldrb	r2, [r3, #1]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	b29b      	uxth	r3, r3
 8009138:	2000      	movs	r0, #0
 800913a:	9000      	str	r0, [sp, #0]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7ff fb31 	bl	80087a4 <USB_WritePacket>
  }

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3728      	adds	r7, #40	; 0x28
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	1ff80000 	.word	0x1ff80000

08009150 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	b29b      	uxth	r3, r3
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009172:	b480      	push	{r7}
 8009174:	b089      	sub	sp, #36	; 0x24
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	0c9b      	lsrs	r3, r3, #18
 800919a:	f003 0303 	and.w	r3, r3, #3
 800919e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	0fdb      	lsrs	r3, r3, #31
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b20      	cmp	r3, #32
 80091c0:	d104      	bne.n	80091cc <USB_HC_Halt+0x5a>
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e0c8      	b.n	800935e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <USB_HC_Halt+0x66>
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d163      	bne.n	80092a0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	0151      	lsls	r1, r2, #5
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	440a      	add	r2, r1
 80091ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	f040 80ab 	bne.w	800935c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d133      	bne.n	800927a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	440a      	add	r2, r1
 8009228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800922c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009230:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	440a      	add	r2, r1
 8009248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800924c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009250:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800925e:	d81d      	bhi.n	800929c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	4413      	add	r3, r2
 8009268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009276:	d0ec      	beq.n	8009252 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009278:	e070      	b.n	800935c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	440a      	add	r2, r1
 8009290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009298:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800929a:	e05f      	b.n	800935c <USB_HC_Halt+0x1ea>
            break;
 800929c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800929e:	e05d      	b.n	800935c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	69fa      	ldr	r2, [r7, #28]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d133      	bne.n	8009338 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	0151      	lsls	r1, r2, #5
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	440a      	add	r2, r1
 80092e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	440a      	add	r2, r1
 8009306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800930a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800930e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3301      	adds	r3, #1
 8009314:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800931c:	d81d      	bhi.n	800935a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009334:	d0ec      	beq.n	8009310 <USB_HC_Halt+0x19e>
 8009336:	e011      	b.n	800935c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	4413      	add	r3, r2
 8009340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	0151      	lsls	r1, r2, #5
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	440a      	add	r2, r1
 800934e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	e000      	b.n	800935c <USB_HC_Halt+0x1ea>
          break;
 800935a:	bf00      	nop
    }
  }

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3724      	adds	r7, #36	; 0x24
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009380:	2301      	movs	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	04da      	lsls	r2, r3, #19
 8009388:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <USB_DoPing+0x74>)
 800938a:	4013      	ands	r3, r2
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	0151      	lsls	r1, r2, #5
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	440a      	add	r2, r1
 8009394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800939c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ca:	461a      	mov	r2, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	1ff80000 	.word	0x1ff80000

080093e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff f911 	bl	8008620 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093fe:	2110      	movs	r1, #16
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff f96b 	bl	80086dc <USB_FlushTxFifo>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff f997 	bl	8008744 <USB_FlushRxFifo>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009420:	2300      	movs	r3, #0
 8009422:	61bb      	str	r3, [r7, #24]
 8009424:	e01f      	b.n	8009466 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	4413      	add	r3, r2
 800942e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800943c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009444:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800944c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	4413      	add	r3, r2
 8009456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945a:	461a      	mov	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	3301      	adds	r3, #1
 8009464:	61bb      	str	r3, [r7, #24]
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b0f      	cmp	r3, #15
 800946a:	d9dc      	bls.n	8009426 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800946c:	2300      	movs	r3, #0
 800946e:	61bb      	str	r3, [r7, #24]
 8009470:	e034      	b.n	80094dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	4413      	add	r3, r2
 800947a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009488:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009490:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009498:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a6:	461a      	mov	r2, r3
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094b8:	d80c      	bhi.n	80094d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094d0:	d0ec      	beq.n	80094ac <USB_StopHost+0xc8>
 80094d2:	e000      	b.n	80094d6 <USB_StopHost+0xf2>
        break;
 80094d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	3301      	adds	r3, #1
 80094da:	61bb      	str	r3, [r7, #24]
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	2b0f      	cmp	r3, #15
 80094e0:	d9c7      	bls.n	8009472 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094e8:	461a      	mov	r2, r3
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff f880 	bl	80085fe <USB_EnableGlobalInt>

  return ret;
 80094fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009508:	b590      	push	{r4, r7, lr}
 800950a:	b089      	sub	sp, #36	; 0x24
 800950c:	af04      	add	r7, sp, #16
 800950e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009510:	2301      	movs	r3, #1
 8009512:	2202      	movs	r2, #2
 8009514:	2102      	movs	r1, #2
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fcb2 	bl	8009e80 <USBH_FindInterface>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2bff      	cmp	r3, #255	; 0xff
 8009524:	d002      	beq.n	800952c <USBH_CDC_InterfaceInit+0x24>
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d901      	bls.n	8009530 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800952c:	2302      	movs	r3, #2
 800952e:	e13d      	b.n	80097ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fc87 	bl	8009e48 <USBH_SelectInterface>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009544:	2302      	movs	r3, #2
 8009546:	e131      	b.n	80097ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800954e:	2050      	movs	r0, #80	; 0x50
 8009550:	f00e fb4a 	bl	8017be8 <malloc>
 8009554:	4603      	mov	r3, r0
 8009556:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009568:	2302      	movs	r3, #2
 800956a:	e11f      	b.n	80097ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800956c:	2250      	movs	r2, #80	; 0x50
 800956e:	2100      	movs	r1, #0
 8009570:	68b8      	ldr	r0, [r7, #8]
 8009572:	f00e fe87 	bl	8018284 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	211a      	movs	r1, #26
 800957c:	fb01 f303 	mul.w	r3, r1, r3
 8009580:	4413      	add	r3, r2
 8009582:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	b25b      	sxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	da15      	bge.n	80095ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	211a      	movs	r1, #26
 8009594:	fb01 f303 	mul.w	r3, r1, r3
 8009598:	4413      	add	r3, r2
 800959a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800959e:	781a      	ldrb	r2, [r3, #0]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	211a      	movs	r1, #26
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80095b4:	881a      	ldrh	r2, [r3, #0]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	785b      	ldrb	r3, [r3, #1]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f002 f986 	bl	800b8d2 <USBH_AllocPipe>
 80095c6:	4603      	mov	r3, r0
 80095c8:	461a      	mov	r2, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	7819      	ldrb	r1, [r3, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	7858      	ldrb	r0, [r3, #1]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	8952      	ldrh	r2, [r2, #10]
 80095e6:	9202      	str	r2, [sp, #8]
 80095e8:	2203      	movs	r2, #3
 80095ea:	9201      	str	r2, [sp, #4]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	4623      	mov	r3, r4
 80095f0:	4602      	mov	r2, r0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f002 f93e 	bl	800b874 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2200      	movs	r2, #0
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f005 fbd9 	bl	800edb8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009606:	2300      	movs	r3, #0
 8009608:	2200      	movs	r2, #0
 800960a:	210a      	movs	r1, #10
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fc37 	bl	8009e80 <USBH_FindInterface>
 8009612:	4603      	mov	r3, r0
 8009614:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2bff      	cmp	r3, #255	; 0xff
 800961a:	d002      	beq.n	8009622 <USBH_CDC_InterfaceInit+0x11a>
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d901      	bls.n	8009626 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009622:	2302      	movs	r3, #2
 8009624:	e0c2      	b.n	80097ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	211a      	movs	r1, #26
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	4413      	add	r3, r2
 8009632:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	b25b      	sxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	da16      	bge.n	800966c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	211a      	movs	r1, #26
 8009644:	fb01 f303 	mul.w	r3, r1, r3
 8009648:	4413      	add	r3, r2
 800964a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800964e:	781a      	ldrb	r2, [r3, #0]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	211a      	movs	r1, #26
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	4413      	add	r3, r2
 8009660:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009664:	881a      	ldrh	r2, [r3, #0]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	835a      	strh	r2, [r3, #26]
 800966a:	e015      	b.n	8009698 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	211a      	movs	r1, #26
 8009672:	fb01 f303 	mul.w	r3, r1, r3
 8009676:	4413      	add	r3, r2
 8009678:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800967c:	781a      	ldrb	r2, [r3, #0]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	211a      	movs	r1, #26
 8009688:	fb01 f303 	mul.w	r3, r1, r3
 800968c:	4413      	add	r3, r2
 800968e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009692:	881a      	ldrh	r2, [r3, #0]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	211a      	movs	r1, #26
 800969e:	fb01 f303 	mul.w	r3, r1, r3
 80096a2:	4413      	add	r3, r2
 80096a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	b25b      	sxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	da16      	bge.n	80096de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	211a      	movs	r1, #26
 80096b6:	fb01 f303 	mul.w	r3, r1, r3
 80096ba:	4413      	add	r3, r2
 80096bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80096c0:	781a      	ldrb	r2, [r3, #0]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	211a      	movs	r1, #26
 80096cc:	fb01 f303 	mul.w	r3, r1, r3
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80096d6:	881a      	ldrh	r2, [r3, #0]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	835a      	strh	r2, [r3, #26]
 80096dc:	e015      	b.n	800970a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	211a      	movs	r1, #26
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	4413      	add	r3, r2
 80096ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80096ee:	781a      	ldrb	r2, [r3, #0]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	211a      	movs	r1, #26
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	4413      	add	r3, r2
 8009700:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009704:	881a      	ldrh	r2, [r3, #0]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	7b9b      	ldrb	r3, [r3, #14]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f002 f8de 	bl	800b8d2 <USBH_AllocPipe>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	7bdb      	ldrb	r3, [r3, #15]
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f002 f8d4 	bl	800b8d2 <USBH_AllocPipe>
 800972a:	4603      	mov	r3, r0
 800972c:	461a      	mov	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	7b59      	ldrb	r1, [r3, #13]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	7b98      	ldrb	r0, [r3, #14]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	8b12      	ldrh	r2, [r2, #24]
 800974a:	9202      	str	r2, [sp, #8]
 800974c:	2202      	movs	r2, #2
 800974e:	9201      	str	r2, [sp, #4]
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	4623      	mov	r3, r4
 8009754:	4602      	mov	r2, r0
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f002 f88c 	bl	800b874 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	7b19      	ldrb	r1, [r3, #12]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	7bd8      	ldrb	r0, [r3, #15]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	8b52      	ldrh	r2, [r2, #26]
 8009774:	9202      	str	r2, [sp, #8]
 8009776:	2202      	movs	r2, #2
 8009778:	9201      	str	r2, [sp, #4]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	4623      	mov	r3, r4
 800977e:	4602      	mov	r2, r0
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f002 f877 	bl	800b874 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	7b5b      	ldrb	r3, [r3, #13]
 8009792:	2200      	movs	r2, #0
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f005 fb0e 	bl	800edb8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	7b1b      	ldrb	r3, [r3, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f005 fb07 	bl	800edb8 <USBH_LL_SetToggle>

  return USBH_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd90      	pop	{r4, r7, pc}

080097b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00e      	beq.n	80097ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 f86c 	bl	800b8b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f002 f897 	bl	800b914 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	7b1b      	ldrb	r3, [r3, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00e      	beq.n	8009812 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	7b1b      	ldrb	r3, [r3, #12]
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f002 f859 	bl	800b8b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	7b1b      	ldrb	r3, [r3, #12]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f002 f884 	bl	800b914 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	7b5b      	ldrb	r3, [r3, #13]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00e      	beq.n	8009838 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	7b5b      	ldrb	r3, [r3, #13]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f002 f846 	bl	800b8b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	7b5b      	ldrb	r3, [r3, #13]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f002 f871 	bl	800b914 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	4618      	mov	r0, r3
 800984e:	f00e f9d3 	bl	8017bf8 <free>
    phost->pActiveClass->pData = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009858:	2200      	movs	r2, #0
 800985a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3340      	adds	r3, #64	; 0x40
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f8b1 	bl	80099e6 <GetLineCoding>
 8009884:	4603      	mov	r3, r0
 8009886:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009888:	7afb      	ldrb	r3, [r7, #11]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d105      	bne.n	800989a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009894:	2102      	movs	r1, #2
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800989a:	7afb      	ldrb	r3, [r7, #11]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80098ac:	2301      	movs	r3, #1
 80098ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d877      	bhi.n	80099b8 <USBH_CDC_Process+0x114>
 80098c8:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <USBH_CDC_Process+0x2c>)
 80098ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ce:	bf00      	nop
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	080098eb 	.word	0x080098eb
 80098d8:	0800991b 	.word	0x0800991b
 80098dc:	0800998f 	.word	0x0800998f
 80098e0:	0800999d 	.word	0x0800999d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73fb      	strb	r3, [r7, #15]
      break;
 80098e8:	e06d      	b.n	80099c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f897 	bl	8009a24 <SetLineCoding>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009908:	e058      	b.n	80099bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d055      	beq.n	80099bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2204      	movs	r2, #4
 8009914:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009918:	e050      	b.n	80099bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	3340      	adds	r3, #64	; 0x40
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f860 	bl	80099e6 <GetLineCoding>
 8009926:	4603      	mov	r3, r0
 8009928:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d126      	bne.n	800997e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009942:	791b      	ldrb	r3, [r3, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d13b      	bne.n	80099c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009952:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009954:	429a      	cmp	r2, r3
 8009956:	d133      	bne.n	80099c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009962:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009964:	429a      	cmp	r2, r3
 8009966:	d12b      	bne.n	80099c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009970:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009972:	429a      	cmp	r2, r3
 8009974:	d124      	bne.n	80099c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f982 	bl	8009c80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800997c:	e020      	b.n	80099c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d01d      	beq.n	80099c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2204      	movs	r2, #4
 8009988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800998c:	e018      	b.n	80099c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f867 	bl	8009a62 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f8f6 	bl	8009b86 <CDC_ProcessReception>
      break;
 800999a:	e014      	b.n	80099c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800999c:	2100      	movs	r1, #0
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 f957 	bl	800ac52 <USBH_ClrFeature>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80099b6:	e005      	b.n	80099c4 <USBH_CDC_Process+0x120>

    default:
      break;
 80099b8:	bf00      	nop
 80099ba:	e004      	b.n	80099c6 <USBH_CDC_Process+0x122>
      break;
 80099bc:	bf00      	nop
 80099be:	e002      	b.n	80099c6 <USBH_CDC_Process+0x122>
      break;
 80099c0:	bf00      	nop
 80099c2:	e000      	b.n	80099c6 <USBH_CDC_Process+0x122>
      break;
 80099c4:	bf00      	nop

  }

  return status;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	22a1      	movs	r2, #161	; 0xa1
 80099f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2221      	movs	r2, #33	; 0x21
 80099fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2207      	movs	r2, #7
 8009a0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2207      	movs	r2, #7
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 fbeb 	bl	800b1f0 <USBH_CtlReq>
 8009a1a:	4603      	mov	r3, r0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2221      	movs	r2, #33	; 0x21
 8009a32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2207      	movs	r2, #7
 8009a4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2207      	movs	r2, #7
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fbcc 	bl	800b1f0 <USBH_CtlReq>
 8009a58:	4603      	mov	r3, r0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af02      	add	r7, sp, #8
 8009a68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d002      	beq.n	8009a88 <CDC_ProcessTransmission+0x26>
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d023      	beq.n	8009ace <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009a86:	e07a      	b.n	8009b7e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	8b12      	ldrh	r2, [r2, #24]
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d90b      	bls.n	8009aac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	69d9      	ldr	r1, [r3, #28]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	8b1a      	ldrh	r2, [r3, #24]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	7b5b      	ldrb	r3, [r3, #13]
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	9000      	str	r0, [sp, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fea2 	bl	800b7ee <USBH_BulkSendData>
 8009aaa:	e00b      	b.n	8009ac4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	7b5b      	ldrb	r3, [r3, #13]
 8009aba:	2001      	movs	r0, #1
 8009abc:	9000      	str	r0, [sp, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 fe95 	bl	800b7ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009acc:	e057      	b.n	8009b7e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	7b5b      	ldrb	r3, [r3, #13]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f005 f945 	bl	800ed64 <USBH_LL_GetURBState>
 8009ada:	4603      	mov	r3, r0
 8009adc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d136      	bne.n	8009b52 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	8b12      	ldrh	r2, [r2, #24]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d90e      	bls.n	8009b0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	8b12      	ldrh	r2, [r2, #24]
 8009af8:	1a9a      	subs	r2, r3, r2
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	8b12      	ldrh	r2, [r2, #24]
 8009b06:	441a      	add	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	61da      	str	r2, [r3, #28]
 8009b0c:	e002      	b.n	8009b14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d004      	beq.n	8009b26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009b24:	e006      	b.n	8009b34 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f892 	bl	8009c58 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2204      	movs	r2, #4
 8009b38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f002 f8c2 	bl	800bcd4 <osMessageQueuePut>
      break;
 8009b50:	e014      	b.n	8009b7c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009b52:	7afb      	ldrb	r3, [r7, #11]
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d111      	bne.n	8009b7c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2204      	movs	r2, #4
 8009b64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009b74:	2300      	movs	r3, #0
 8009b76:	2200      	movs	r2, #0
 8009b78:	f002 f8ac 	bl	800bcd4 <osMessageQueuePut>
      break;
 8009b7c:	bf00      	nop
  }
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d002      	beq.n	8009bac <CDC_ProcessReception+0x26>
 8009ba6:	2b04      	cmp	r3, #4
 8009ba8:	d00e      	beq.n	8009bc8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009baa:	e051      	b.n	8009c50 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	6a19      	ldr	r1, [r3, #32]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	8b5a      	ldrh	r2, [r3, #26]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	7b1b      	ldrb	r3, [r3, #12]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 fe3d 	bl	800b838 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009bc6:	e043      	b.n	8009c50 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	7b1b      	ldrb	r3, [r3, #12]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f005 f8c8 	bl	800ed64 <USBH_LL_GetURBState>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009bd8:	7cfb      	ldrb	r3, [r7, #19]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d137      	bne.n	8009c4e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	7b1b      	ldrb	r3, [r3, #12]
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f005 f82b 	bl	800ec40 <USBH_LL_GetLastXferSize>
 8009bea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d016      	beq.n	8009c24 <CDC_ProcessReception+0x9e>
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	8b5b      	ldrh	r3, [r3, #26]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d910      	bls.n	8009c24 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	1ad2      	subs	r2, r2, r3
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	6a1a      	ldr	r2, [r3, #32]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	441a      	add	r2, r3
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2203      	movs	r2, #3
 8009c1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009c22:	e006      	b.n	8009c32 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f81d 	bl	8009c6c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2204      	movs	r2, #4
 8009c36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c46:	2300      	movs	r3, #0
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f002 f843 	bl	800bcd4 <osMessageQueuePut>
      break;
 8009c4e:	bf00      	nop
  }
}
 8009c50:	bf00      	nop
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e044      	b.n	8009d36 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	79fa      	ldrb	r2, [r7, #7]
 8009cb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f841 	bl	8009d4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d003      	beq.n	8009cf8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	2104      	movs	r1, #4
 8009cfc:	2010      	movs	r0, #16
 8009cfe:	f001 ff76 	bl	800bbee <osMessageQueueNew>
 8009d02:	4602      	mov	r2, r0
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <USBH_Init+0xac>)
 8009d0c:	4a0d      	ldr	r2, [pc, #52]	; (8009d44 <USBH_Init+0xb0>)
 8009d0e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009d10:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <USBH_Init+0xac>)
 8009d12:	2280      	movs	r2, #128	; 0x80
 8009d14:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009d16:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <USBH_Init+0xac>)
 8009d18:	2218      	movs	r2, #24
 8009d1a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009d1c:	4a08      	ldr	r2, [pc, #32]	; (8009d40 <USBH_Init+0xac>)
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	4809      	ldr	r0, [pc, #36]	; (8009d48 <USBH_Init+0xb4>)
 8009d22:	f001 feb7 	bl	800ba94 <osThreadNew>
 8009d26:	4602      	mov	r2, r0
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f004 fed2 	bl	800ead8 <USBH_LL_Init>

  return USBH_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20004810 	.word	0x20004810
 8009d44:	08019298 	.word	0x08019298
 8009d48:	0800a9c9 	.word	0x0800a9c9

08009d4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e009      	b.n	8009d72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	33e0      	adds	r3, #224	; 0xe0
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	2200      	movs	r2, #0
 8009d6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b0f      	cmp	r3, #15
 8009d76:	d9f2      	bls.n	8009d5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	e009      	b.n	8009d92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d88:	2200      	movs	r2, #0
 8009d8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d98:	d3f1      	bcc.n	8009d7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2240      	movs	r2, #64	; 0x40
 8009dbe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d016      	beq.n	8009e36 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10e      	bne.n	8009e30 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e18:	1c59      	adds	r1, r3, #1
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	33de      	adds	r3, #222	; 0xde
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]
 8009e2e:	e004      	b.n	8009e3a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009e30:	2302      	movs	r3, #2
 8009e32:	73fb      	strb	r3, [r7, #15]
 8009e34:	e001      	b.n	8009e3a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009e36:	2302      	movs	r3, #2
 8009e38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d204      	bcs.n	8009e6e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	78fa      	ldrb	r2, [r7, #3]
 8009e68:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009e6c:	e001      	b.n	8009e72 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009e6e:	2302      	movs	r3, #2
 8009e70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	4608      	mov	r0, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	70fb      	strb	r3, [r7, #3]
 8009e92:	460b      	mov	r3, r1
 8009e94:	70bb      	strb	r3, [r7, #2]
 8009e96:	4613      	mov	r3, r2
 8009e98:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009ea8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009eaa:	e025      	b.n	8009ef8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	221a      	movs	r2, #26
 8009eb0:	fb02 f303 	mul.w	r3, r2, r3
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4413      	add	r3, r2
 8009eba:	3302      	adds	r3, #2
 8009ebc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	795b      	ldrb	r3, [r3, #5]
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d002      	beq.n	8009ece <USBH_FindInterface+0x4e>
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	2bff      	cmp	r3, #255	; 0xff
 8009ecc:	d111      	bne.n	8009ef2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009ed2:	78ba      	ldrb	r2, [r7, #2]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d002      	beq.n	8009ede <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ed8:	78bb      	ldrb	r3, [r7, #2]
 8009eda:	2bff      	cmp	r3, #255	; 0xff
 8009edc:	d109      	bne.n	8009ef2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ee2:	787a      	ldrb	r2, [r7, #1]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d002      	beq.n	8009eee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ee8:	787b      	ldrb	r3, [r7, #1]
 8009eea:	2bff      	cmp	r3, #255	; 0xff
 8009eec:	d101      	bne.n	8009ef2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	e006      	b.n	8009f00 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d9d6      	bls.n	8009eac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009efe:	23ff      	movs	r3, #255	; 0xff
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	371c      	adds	r7, #28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f004 fe1b 	bl	800eb50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f004 ff34 	bl	800ed8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b088      	sub	sp, #32
 8009f30:	af04      	add	r7, sp, #16
 8009f32:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009f34:	2302      	movs	r3, #2
 8009f36:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d102      	bne.n	8009f4e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2203      	movs	r2, #3
 8009f4c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b0b      	cmp	r3, #11
 8009f56:	f200 8247 	bhi.w	800a3e8 <USBH_Process+0x4bc>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <USBH_Process+0x34>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f91 	.word	0x08009f91
 8009f64:	08009fdf 	.word	0x08009fdf
 8009f68:	0800a063 	.word	0x0800a063
 8009f6c:	0800a367 	.word	0x0800a367
 8009f70:	0800a3e9 	.word	0x0800a3e9
 8009f74:	0800a123 	.word	0x0800a123
 8009f78:	0800a2f1 	.word	0x0800a2f1
 8009f7c:	0800a175 	.word	0x0800a175
 8009f80:	0800a1b1 	.word	0x0800a1b1
 8009f84:	0800a1eb 	.word	0x0800a1eb
 8009f88:	0800a249 	.word	0x0800a249
 8009f8c:	0800a34f 	.word	0x0800a34f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8227 	beq.w	800a3ec <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009fa4:	20c8      	movs	r0, #200	; 0xc8
 8009fa6:	f004 ff37 	bl	800ee18 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f004 fe2d 	bl	800ec0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f001 fe7c 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009fdc:	e206      	b.n	800a3ec <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d107      	bne.n	8009ff8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e025      	b.n	800a044 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a002:	d914      	bls.n	800a02e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a00a:	3301      	adds	r3, #1
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d903      	bls.n	800a026 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	220d      	movs	r2, #13
 800a022:	701a      	strb	r2, [r3, #0]
 800a024:	e00e      	b.n	800a044 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	701a      	strb	r2, [r3, #0]
 800a02c:	e00a      	b.n	800a044 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a034:	f103 020a 	add.w	r2, r3, #10
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a03e:	200a      	movs	r0, #10
 800a040:	f004 feea 	bl	800ee18 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a058:	2300      	movs	r3, #0
 800a05a:	2200      	movs	r2, #0
 800a05c:	f001 fe3a 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      break;
 800a060:	e1cb      	b.n	800a3fa <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a072:	2104      	movs	r1, #4
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a078:	2064      	movs	r0, #100	; 0x64
 800a07a:	f004 fecd 	bl	800ee18 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f004 fd9c 	bl	800ebbc <USBH_LL_GetSpeed>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2205      	movs	r2, #5
 800a092:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a094:	2100      	movs	r1, #0
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 fc1b 	bl	800b8d2 <USBH_AllocPipe>
 800a09c:	4603      	mov	r3, r0
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a0a4:	2180      	movs	r1, #128	; 0x80
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 fc13 	bl	800b8d2 <USBH_AllocPipe>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	7919      	ldrb	r1, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a0c8:	b292      	uxth	r2, r2
 800a0ca:	9202      	str	r2, [sp, #8]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	9201      	str	r2, [sp, #4]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2280      	movs	r2, #128	; 0x80
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f001 fbcc 	bl	800b874 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7959      	ldrb	r1, [r3, #5]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a0f0:	b292      	uxth	r2, r2
 800a0f2:	9202      	str	r2, [sp, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	9201      	str	r2, [sp, #4]
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 fbb8 	bl	800b874 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a118:	2300      	movs	r3, #0
 800a11a:	2200      	movs	r2, #0
 800a11c:	f001 fdda 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      break;
 800a120:	e16b      	b.n	800a3fa <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f96e 	bl	800a404 <USBH_HandleEnum>
 800a128:	4603      	mov	r3, r0
 800a12a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	f040 815d 	bne.w	800a3f0 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a144:	2b01      	cmp	r3, #1
 800a146:	d103      	bne.n	800a150 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2208      	movs	r2, #8
 800a14c:	701a      	strb	r2, [r3, #0]
 800a14e:	e002      	b.n	800a156 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2207      	movs	r2, #7
 800a154:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2205      	movs	r2, #5
 800a15a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a16a:	2300      	movs	r3, #0
 800a16c:	2200      	movs	r2, #0
 800a16e:	f001 fdb1 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a172:	e13d      	b.n	800a3f0 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 813a 	beq.w	800a3f4 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a186:	2101      	movs	r1, #1
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2208      	movs	r2, #8
 800a190:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2205      	movs	r2, #5
 800a196:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f001 fd93 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a1ae:	e121      	b.n	800a3f4 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fd02 	bl	800abc4 <USBH_SetCfg>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d102      	bne.n	800a1cc <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2209      	movs	r2, #9
 800a1ca:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f001 fd76 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      break;
 800a1e8:	e107      	b.n	800a3fa <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a1f0:	f003 0320 	and.w	r3, r3, #32
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d015      	beq.n	800a224 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fd05 	bl	800ac0a <USBH_SetFeature>
 800a200:	4603      	mov	r3, r0
 800a202:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	220a      	movs	r2, #10
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	e00a      	b.n	800a22a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a214:	7bbb      	ldrb	r3, [r7, #14]
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d106      	bne.n	800a22a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	220a      	movs	r2, #10
 800a220:	701a      	strb	r2, [r3, #0]
 800a222:	e002      	b.n	800a22a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	220a      	movs	r2, #10
 800a228:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a23e:	2300      	movs	r3, #0
 800a240:	2200      	movs	r2, #0
 800a242:	f001 fd47 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      break;
 800a246:	e0d8      	b.n	800a3fa <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d03f      	beq.n	800a2d2 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a25a:	2300      	movs	r3, #0
 800a25c:	73fb      	strb	r3, [r7, #15]
 800a25e:	e016      	b.n	800a28e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a260:	7bfa      	ldrb	r2, [r7, #15]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	32de      	adds	r2, #222	; 0xde
 800a266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26a:	791a      	ldrb	r2, [r3, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a272:	429a      	cmp	r2, r3
 800a274:	d108      	bne.n	800a288 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a276:	7bfa      	ldrb	r2, [r7, #15]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	32de      	adds	r2, #222	; 0xde
 800a27c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a286:	e005      	b.n	800a294 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	3301      	adds	r3, #1
 800a28c:	73fb      	strb	r3, [r7, #15]
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0e5      	beq.n	800a260 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d016      	beq.n	800a2cc <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d109      	bne.n	800a2c4 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2206      	movs	r2, #6
 800a2b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2bc:	2103      	movs	r1, #3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	4798      	blx	r3
 800a2c2:	e006      	b.n	800a2d2 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	220d      	movs	r2, #13
 800a2c8:	701a      	strb	r2, [r3, #0]
 800a2ca:	e002      	b.n	800a2d2 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	220d      	movs	r2, #13
 800a2d0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2205      	movs	r2, #5
 800a2d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f001 fcf3 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      break;
 800a2ee:	e084      	b.n	800a3fa <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d017      	beq.n	800a32a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	4798      	blx	r3
 800a306:	4603      	mov	r3, r0
 800a308:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a30a:	7bbb      	ldrb	r3, [r7, #14]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	220b      	movs	r2, #11
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	e00a      	b.n	800a330 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d106      	bne.n	800a330 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	220d      	movs	r2, #13
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	e002      	b.n	800a330 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	220d      	movs	r2, #13
 800a32e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2205      	movs	r2, #5
 800a334:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a344:	2300      	movs	r3, #0
 800a346:	2200      	movs	r2, #0
 800a348:	f001 fcc4 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      break;
 800a34c:	e055      	b.n	800a3fa <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d04f      	beq.n	800a3f8 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
      }
      break;
 800a364:	e048      	b.n	800a3f8 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff fcec 	bl	8009d4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d009      	beq.n	800a392 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d005      	beq.n	800a3a8 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3a2:	2105      	movs	r1, #5
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d107      	bne.n	800a3c4 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff fda5 	bl	8009f0c <USBH_Start>
 800a3c2:	e002      	b.n	800a3ca <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f004 fbc3 	bl	800eb50 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f001 fc77 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      break;
 800a3e6:	e008      	b.n	800a3fa <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800a3e8:	bf00      	nop
 800a3ea:	e006      	b.n	800a3fa <USBH_Process+0x4ce>
      break;
 800a3ec:	bf00      	nop
 800a3ee:	e004      	b.n	800a3fa <USBH_Process+0x4ce>
      break;
 800a3f0:	bf00      	nop
 800a3f2:	e002      	b.n	800a3fa <USBH_Process+0x4ce>
    break;
 800a3f4:	bf00      	nop
 800a3f6:	e000      	b.n	800a3fa <USBH_Process+0x4ce>
      break;
 800a3f8:	bf00      	nop
  }
  return USBH_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af04      	add	r7, sp, #16
 800a40a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a410:	2301      	movs	r3, #1
 800a412:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	785b      	ldrb	r3, [r3, #1]
 800a418:	2b07      	cmp	r3, #7
 800a41a:	f200 8208 	bhi.w	800a82e <USBH_HandleEnum+0x42a>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <USBH_HandleEnum+0x20>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a445 	.word	0x0800a445
 800a428:	0800a503 	.word	0x0800a503
 800a42c:	0800a56d 	.word	0x0800a56d
 800a430:	0800a5fb 	.word	0x0800a5fb
 800a434:	0800a665 	.word	0x0800a665
 800a438:	0800a6d5 	.word	0x0800a6d5
 800a43c:	0800a771 	.word	0x0800a771
 800a440:	0800a7ef 	.word	0x0800a7ef
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a444:	2108      	movs	r1, #8
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 faec 	bl	800aa24 <USBH_Get_DevDesc>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d130      	bne.n	800a4b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7919      	ldrb	r1, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a47a:	b292      	uxth	r2, r2
 800a47c:	9202      	str	r2, [sp, #8]
 800a47e:	2200      	movs	r2, #0
 800a480:	9201      	str	r2, [sp, #4]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	4603      	mov	r3, r0
 800a486:	2280      	movs	r2, #128	; 0x80
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 f9f3 	bl	800b874 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	7959      	ldrb	r1, [r3, #5]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4a2:	b292      	uxth	r2, r2
 800a4a4:	9202      	str	r2, [sp, #8]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	9201      	str	r2, [sp, #4]
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 f9df 	bl	800b874 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a4b6:	e1bc      	b.n	800a832 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	f040 81b9 	bne.w	800a832 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d903      	bls.n	800a4e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	220d      	movs	r2, #13
 800a4de:	701a      	strb	r2, [r3, #0]
      break;
 800a4e0:	e1a7      	b.n	800a832 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	795b      	ldrb	r3, [r3, #5]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 fa13 	bl	800b914 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	791b      	ldrb	r3, [r3, #4]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 fa0d 	bl	800b914 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
      break;
 800a500:	e197      	b.n	800a832 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a502:	2112      	movs	r1, #18
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa8d 	bl	800aa24 <USBH_Get_DevDesc>
 800a50a:	4603      	mov	r3, r0
 800a50c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d103      	bne.n	800a51c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a51a:	e18c      	b.n	800a836 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	2b03      	cmp	r3, #3
 800a520:	f040 8189 	bne.w	800a836 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a52a:	3301      	adds	r3, #1
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d903      	bls.n	800a546 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	220d      	movs	r2, #13
 800a542:	701a      	strb	r2, [r3, #0]
      break;
 800a544:	e177      	b.n	800a836 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	795b      	ldrb	r3, [r3, #5]
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 f9e1 	bl	800b914 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	791b      	ldrb	r3, [r3, #4]
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 f9db 	bl	800b914 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	701a      	strb	r2, [r3, #0]
      break;
 800a56a:	e164      	b.n	800a836 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a56c:	2101      	movs	r1, #1
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fb04 	bl	800ab7c <USBH_SetAddress>
 800a574:	4603      	mov	r3, r0
 800a576:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d132      	bne.n	800a5e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a57e:	2002      	movs	r0, #2
 800a580:	f004 fc4a 	bl	800ee18 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2203      	movs	r2, #3
 800a590:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	7919      	ldrb	r1, [r3, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5a6:	b292      	uxth	r2, r2
 800a5a8:	9202      	str	r2, [sp, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	9201      	str	r2, [sp, #4]
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2280      	movs	r2, #128	; 0x80
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f001 f95d 	bl	800b874 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7959      	ldrb	r1, [r3, #5]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	9202      	str	r2, [sp, #8]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	9201      	str	r2, [sp, #4]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2200      	movs	r2, #0
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 f949 	bl	800b874 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a5e2:	e12a      	b.n	800a83a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	f040 8127 	bne.w	800a83a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	220d      	movs	r2, #13
 800a5f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	705a      	strb	r2, [r3, #1]
      break;
 800a5f8:	e11f      	b.n	800a83a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a5fa:	2109      	movs	r1, #9
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fa39 	bl	800aa74 <USBH_Get_CfgDesc>
 800a602:	4603      	mov	r3, r0
 800a604:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2204      	movs	r2, #4
 800a610:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a612:	e114      	b.n	800a83e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	2b03      	cmp	r3, #3
 800a618:	f040 8111 	bne.w	800a83e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a622:	3301      	adds	r3, #1
 800a624:	b2da      	uxtb	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a632:	2b03      	cmp	r3, #3
 800a634:	d903      	bls.n	800a63e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	220d      	movs	r2, #13
 800a63a:	701a      	strb	r2, [r3, #0]
      break;
 800a63c:	e0ff      	b.n	800a83e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	795b      	ldrb	r3, [r3, #5]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 f965 	bl	800b914 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 f95f 	bl	800b914 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
      break;
 800a662:	e0ec      	b.n	800a83e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa01 	bl	800aa74 <USBH_Get_CfgDesc>
 800a672:	4603      	mov	r3, r0
 800a674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2205      	movs	r2, #5
 800a680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a682:	e0de      	b.n	800a842 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	2b03      	cmp	r3, #3
 800a688:	f040 80db 	bne.w	800a842 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a692:	3301      	adds	r3, #1
 800a694:	b2da      	uxtb	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d903      	bls.n	800a6ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	220d      	movs	r2, #13
 800a6aa:	701a      	strb	r2, [r3, #0]
      break;
 800a6ac:	e0c9      	b.n	800a842 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	795b      	ldrb	r3, [r3, #5]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 f92d 	bl	800b914 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 f927 	bl	800b914 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	701a      	strb	r2, [r3, #0]
      break;
 800a6d2:	e0b6      	b.n	800a842 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d036      	beq.n	800a74c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a6ea:	23ff      	movs	r3, #255	; 0xff
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f9e5 	bl	800aabc <USBH_Get_StringDesc>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d111      	bne.n	800a720 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2206      	movs	r2, #6
 800a700:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2205      	movs	r2, #5
 800a706:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a716:	2300      	movs	r3, #0
 800a718:	2200      	movs	r2, #0
 800a71a:	f001 fadb 	bl	800bcd4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a71e:	e092      	b.n	800a846 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	2b03      	cmp	r3, #3
 800a724:	f040 808f 	bne.w	800a846 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2206      	movs	r2, #6
 800a72c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2205      	movs	r2, #5
 800a732:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	f001 fac5 	bl	800bcd4 <osMessageQueuePut>
      break;
 800a74a:	e07c      	b.n	800a846 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2206      	movs	r2, #6
 800a750:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2205      	movs	r2, #5
 800a756:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a766:	2300      	movs	r3, #0
 800a768:	2200      	movs	r2, #0
 800a76a:	f001 fab3 	bl	800bcd4 <osMessageQueuePut>
      break;
 800a76e:	e06a      	b.n	800a846 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a776:	2b00      	cmp	r3, #0
 800a778:	d027      	beq.n	800a7ca <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a786:	23ff      	movs	r3, #255	; 0xff
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f997 	bl	800aabc <USBH_Get_StringDesc>
 800a78e:	4603      	mov	r3, r0
 800a790:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d103      	bne.n	800a7a0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2207      	movs	r2, #7
 800a79c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a79e:	e054      	b.n	800a84a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d151      	bne.n	800a84a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2207      	movs	r2, #7
 800a7aa:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2205      	movs	r2, #5
 800a7b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f001 fa86 	bl	800bcd4 <osMessageQueuePut>
      break;
 800a7c8:	e03f      	b.n	800a84a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2207      	movs	r2, #7
 800a7ce:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2205      	movs	r2, #5
 800a7d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f001 fa74 	bl	800bcd4 <osMessageQueuePut>
      break;
 800a7ec:	e02d      	b.n	800a84a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d017      	beq.n	800a828 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a804:	23ff      	movs	r3, #255	; 0xff
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f958 	bl	800aabc <USBH_Get_StringDesc>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d102      	bne.n	800a81c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a81a:	e018      	b.n	800a84e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d115      	bne.n	800a84e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
      break;
 800a826:	e012      	b.n	800a84e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]
      break;
 800a82c:	e00f      	b.n	800a84e <USBH_HandleEnum+0x44a>

    default:
      break;
 800a82e:	bf00      	nop
 800a830:	e00e      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a832:	bf00      	nop
 800a834:	e00c      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a836:	bf00      	nop
 800a838:	e00a      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a83a:	bf00      	nop
 800a83c:	e008      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a83e:	bf00      	nop
 800a840:	e006      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a842:	bf00      	nop
 800a844:	e004      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a846:	bf00      	nop
 800a848:	e002      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a84a:	bf00      	nop
 800a84c:	e000      	b.n	800a850 <USBH_HandleEnum+0x44c>
      break;
 800a84e:	bf00      	nop
  }
  return Status;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop

0800a85c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	683a      	ldr	r2, [r7, #0]
 800a86a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f804 	bl	800a89e <USBH_HandleSof>
}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b0b      	cmp	r3, #11
 800a8ae:	d10a      	bne.n	800a8c6 <USBH_HandleSof+0x28>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
  }
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f001 f9ed 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif

  return;
 800a8fa:	bf00      	nop
}
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a912:	bf00      	nop
}
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a952:	2300      	movs	r3, #0
 800a954:	2200      	movs	r2, #0
 800a956:	f001 f9bd 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f004 f8fe 	bl	800eb86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	791b      	ldrb	r3, [r3, #4]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 ffbf 	bl	800b914 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	795b      	ldrb	r3, [r3, #5]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 ffb9 	bl	800b914 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f001 f98b 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f001 f9d7 	bl	800bd94 <osMessageQueueGet>
 800a9e6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1f0      	bne.n	800a9d0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7ff fa9c 	bl	8009f2c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a9f4:	e7ec      	b.n	800a9d0 <USBH_Process_OS+0x8>

0800a9f6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa12:	2300      	movs	r3, #0
 800aa14:	2200      	movs	r2, #0
 800aa16:	f001 f95d 	bl	800bcd4 <osMessageQueuePut>
#endif

  return USBH_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aa36:	78fb      	ldrb	r3, [r7, #3]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa42:	2100      	movs	r1, #0
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f864 	bl	800ab12 <USBH_GetDescriptor>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10a      	bne.n	800aa6a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa60:	78fa      	ldrb	r2, [r7, #3]
 800aa62:	b292      	uxth	r2, r2
 800aa64:	4619      	mov	r1, r3
 800aa66:	f000 f919 	bl	800ac9c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af02      	add	r7, sp, #8
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	331c      	adds	r3, #28
 800aa84:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aa86:	887b      	ldrh	r3, [r7, #2]
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa90:	2100      	movs	r1, #0
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f83d 	bl	800ab12 <USBH_GetDescriptor>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d107      	bne.n	800aab2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aaa2:	887b      	ldrh	r3, [r7, #2]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f989 	bl	800adc0 <USBH_ParseCfgDesc>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b088      	sub	sp, #32
 800aac0:	af02      	add	r7, sp, #8
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	607a      	str	r2, [r7, #4]
 800aac6:	461a      	mov	r2, r3
 800aac8:	460b      	mov	r3, r1
 800aaca:	72fb      	strb	r3, [r7, #11]
 800aacc:	4613      	mov	r3, r2
 800aace:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aad8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aae0:	893b      	ldrh	r3, [r7, #8]
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	460b      	mov	r3, r1
 800aae6:	2100      	movs	r1, #0
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f000 f812 	bl	800ab12 <USBH_GetDescriptor>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d107      	bne.n	800ab08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aafe:	893a      	ldrh	r2, [r7, #8]
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fb26 	bl	800b154 <USBH_ParseStringDesc>
  }

  return status;
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	607b      	str	r3, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	72fb      	strb	r3, [r7, #11]
 800ab20:	4613      	mov	r3, r2
 800ab22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	789b      	ldrb	r3, [r3, #2]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d11c      	bne.n	800ab66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2206      	movs	r2, #6
 800ab3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	893a      	ldrh	r2, [r7, #8]
 800ab42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ab44:	893b      	ldrh	r3, [r7, #8]
 800ab46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab4e:	d104      	bne.n	800ab5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f240 4209 	movw	r2, #1033	; 0x409
 800ab56:	829a      	strh	r2, [r3, #20]
 800ab58:	e002      	b.n	800ab60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	8b3a      	ldrh	r2, [r7, #24]
 800ab64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ab66:	8b3b      	ldrh	r3, [r7, #24]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 fb3f 	bl	800b1f0 <USBH_CtlReq>
 800ab72:	4603      	mov	r3, r0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	789b      	ldrb	r3, [r3, #2]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d10f      	bne.n	800abb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2205      	movs	r2, #5
 800ab9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abb0:	2200      	movs	r2, #0
 800abb2:	2100      	movs	r1, #0
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fb1b 	bl	800b1f0 <USBH_CtlReq>
 800abba:	4603      	mov	r3, r0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	789b      	ldrb	r3, [r3, #2]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d10e      	bne.n	800abf6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2209      	movs	r2, #9
 800abe2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	887a      	ldrh	r2, [r7, #2]
 800abe8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abf6:	2200      	movs	r2, #0
 800abf8:	2100      	movs	r1, #0
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 faf8 	bl	800b1f0 <USBH_CtlReq>
 800ac00:	4603      	mov	r3, r0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	789b      	ldrb	r3, [r3, #2]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d10f      	bne.n	800ac3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2203      	movs	r2, #3
 800ac28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2100      	movs	r1, #0
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fad4 	bl	800b1f0 <USBH_CtlReq>
 800ac48:	4603      	mov	r3, r0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	789b      	ldrb	r3, [r3, #2]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d10f      	bne.n	800ac86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ac86:	2200      	movs	r2, #0
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fab0 	bl	800b1f0 <USBH_CtlReq>
 800ac90:	4603      	mov	r3, r0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	4613      	mov	r3, r2
 800aca8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	781a      	ldrb	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	785a      	ldrb	r2, [r3, #1]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	3302      	adds	r3, #2
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	3303      	adds	r3, #3
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	b29b      	uxth	r3, r3
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	b29b      	uxth	r3, r3
 800acce:	4313      	orrs	r3, r2
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	791a      	ldrb	r2, [r3, #4]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	795a      	ldrb	r2, [r3, #5]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	799a      	ldrb	r2, [r3, #6]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	79da      	ldrb	r2, [r3, #7]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	79db      	ldrb	r3, [r3, #7]
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	dc0f      	bgt.n	800ad1e <USBH_ParseDevDesc+0x82>
 800acfe:	2b08      	cmp	r3, #8
 800ad00:	db14      	blt.n	800ad2c <USBH_ParseDevDesc+0x90>
 800ad02:	3b08      	subs	r3, #8
 800ad04:	4a2d      	ldr	r2, [pc, #180]	; (800adbc <USBH_ParseDevDesc+0x120>)
 800ad06:	fa22 f303 	lsr.w	r3, r2, r3
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	bf14      	ite	ne
 800ad12:	2301      	movne	r3, #1
 800ad14:	2300      	moveq	r3, #0
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <USBH_ParseDevDesc+0x86>
 800ad1c:	e006      	b.n	800ad2c <USBH_ParseDevDesc+0x90>
 800ad1e:	2b40      	cmp	r3, #64	; 0x40
 800ad20:	d104      	bne.n	800ad2c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	79da      	ldrb	r2, [r3, #7]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	71da      	strb	r2, [r3, #7]
      break;
 800ad2a:	e003      	b.n	800ad34 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2240      	movs	r2, #64	; 0x40
 800ad30:	71da      	strb	r2, [r3, #7]
      break;
 800ad32:	bf00      	nop
  }

  if (length > 8U)
 800ad34:	88fb      	ldrh	r3, [r7, #6]
 800ad36:	2b08      	cmp	r3, #8
 800ad38:	d939      	bls.n	800adae <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	3309      	adds	r3, #9
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	330a      	adds	r3, #10
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	330b      	adds	r3, #11
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	330c      	adds	r3, #12
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	330d      	adds	r3, #13
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	021b      	lsls	r3, r3, #8
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4313      	orrs	r3, r2
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	7b9a      	ldrb	r2, [r3, #14]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	7bda      	ldrb	r2, [r3, #15]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	7c1a      	ldrb	r2, [r3, #16]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	7c5a      	ldrb	r2, [r3, #17]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	745a      	strb	r2, [r3, #17]
  }
}
 800adae:	bf00      	nop
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	01000101 	.word	0x01000101

0800adc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08c      	sub	sp, #48	; 0x30
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800add4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	781a      	ldrb	r2, [r3, #0]
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	785a      	ldrb	r2, [r3, #1]
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	3302      	adds	r3, #2
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	3303      	adds	r3, #3
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae1c:	bf28      	it	cs
 800ae1e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	791a      	ldrb	r2, [r3, #4]
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	795a      	ldrb	r2, [r3, #5]
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	799a      	ldrb	r2, [r3, #6]
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	79da      	ldrb	r2, [r3, #7]
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	7a1a      	ldrb	r2, [r3, #8]
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b09      	cmp	r3, #9
 800ae56:	d002      	beq.n	800ae5e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	2209      	movs	r2, #9
 800ae5c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	2b09      	cmp	r3, #9
 800ae62:	f240 809d 	bls.w	800afa0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ae66:	2309      	movs	r3, #9
 800ae68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae6e:	e081      	b.n	800af74 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae70:	f107 0316 	add.w	r3, r7, #22
 800ae74:	4619      	mov	r1, r3
 800ae76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae78:	f000 f99f 	bl	800b1ba <USBH_GetNextDesc>
 800ae7c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	785b      	ldrb	r3, [r3, #1]
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d176      	bne.n	800af74 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b09      	cmp	r3, #9
 800ae8c:	d002      	beq.n	800ae94 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	2209      	movs	r2, #9
 800ae92:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ae94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae98:	221a      	movs	r2, #26
 800ae9a:	fb02 f303 	mul.w	r3, r2, r3
 800ae9e:	3308      	adds	r3, #8
 800aea0:	6a3a      	ldr	r2, [r7, #32]
 800aea2:	4413      	add	r3, r2
 800aea4:	3302      	adds	r3, #2
 800aea6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeaa:	69f8      	ldr	r0, [r7, #28]
 800aeac:	f000 f87e 	bl	800afac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aeba:	e043      	b.n	800af44 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aebc:	f107 0316 	add.w	r3, r7, #22
 800aec0:	4619      	mov	r1, r3
 800aec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec4:	f000 f979 	bl	800b1ba <USBH_GetNextDesc>
 800aec8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	2b05      	cmp	r3, #5
 800aed0:	d138      	bne.n	800af44 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	795b      	ldrb	r3, [r3, #5]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d10f      	bne.n	800aefa <USBH_ParseCfgDesc+0x13a>
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	799b      	ldrb	r3, [r3, #6]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d10b      	bne.n	800aefa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	79db      	ldrb	r3, [r3, #7]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10f      	bne.n	800af0a <USBH_ParseCfgDesc+0x14a>
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b09      	cmp	r3, #9
 800aef0:	d00b      	beq.n	800af0a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	2209      	movs	r2, #9
 800aef6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aef8:	e007      	b.n	800af0a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b07      	cmp	r3, #7
 800af00:	d004      	beq.n	800af0c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	2207      	movs	r2, #7
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	e000      	b.n	800af0c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af0a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800af0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af14:	3201      	adds	r2, #1
 800af16:	00d2      	lsls	r2, r2, #3
 800af18:	211a      	movs	r1, #26
 800af1a:	fb01 f303 	mul.w	r3, r1, r3
 800af1e:	4413      	add	r3, r2
 800af20:	3308      	adds	r3, #8
 800af22:	6a3a      	ldr	r2, [r7, #32]
 800af24:	4413      	add	r3, r2
 800af26:	3304      	adds	r3, #4
 800af28:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800af2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af2c:	69b9      	ldr	r1, [r7, #24]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f000 f86b 	bl	800b00a <USBH_ParseEPDesc>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800af3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af3e:	3301      	adds	r3, #1
 800af40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	791b      	ldrb	r3, [r3, #4]
 800af48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d204      	bcs.n	800af5a <USBH_ParseCfgDesc+0x19a>
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	885a      	ldrh	r2, [r3, #2]
 800af54:	8afb      	ldrh	r3, [r7, #22]
 800af56:	429a      	cmp	r2, r3
 800af58:	d8b0      	bhi.n	800aebc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	791b      	ldrb	r3, [r3, #4]
 800af5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af62:	429a      	cmp	r2, r3
 800af64:	d201      	bcs.n	800af6a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800af66:	2303      	movs	r3, #3
 800af68:	e01c      	b.n	800afa4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800af6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af6e:	3301      	adds	r3, #1
 800af70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d805      	bhi.n	800af88 <USBH_ParseCfgDesc+0x1c8>
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	885a      	ldrh	r2, [r3, #2]
 800af80:	8afb      	ldrh	r3, [r7, #22]
 800af82:	429a      	cmp	r2, r3
 800af84:	f63f af74 	bhi.w	800ae70 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	791b      	ldrb	r3, [r3, #4]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	bf28      	it	cs
 800af90:	2302      	movcs	r3, #2
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af98:	429a      	cmp	r2, r3
 800af9a:	d201      	bcs.n	800afa0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e001      	b.n	800afa4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800afa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3730      	adds	r7, #48	; 0x30
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	785a      	ldrb	r2, [r3, #1]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	789a      	ldrb	r2, [r3, #2]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	78da      	ldrb	r2, [r3, #3]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	791a      	ldrb	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	795a      	ldrb	r2, [r3, #5]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	799a      	ldrb	r2, [r3, #6]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	79da      	ldrb	r2, [r3, #7]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	7a1a      	ldrb	r2, [r3, #8]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	721a      	strb	r2, [r3, #8]
}
 800affe:	bf00      	nop
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b087      	sub	sp, #28
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	781a      	ldrb	r2, [r3, #0]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	785a      	ldrb	r2, [r3, #1]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	789a      	ldrb	r2, [r3, #2]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	78da      	ldrb	r2, [r3, #3]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	3304      	adds	r3, #4
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	b29a      	uxth	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3305      	adds	r3, #5
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	021b      	lsls	r3, r3, #8
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	4313      	orrs	r3, r2
 800b050:	b29a      	uxth	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	799a      	ldrb	r2, [r3, #6]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	889b      	ldrh	r3, [r3, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d102      	bne.n	800b06c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b066:	2303      	movs	r3, #3
 800b068:	75fb      	strb	r3, [r7, #23]
 800b06a:	e033      	b.n	800b0d4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	889b      	ldrh	r3, [r3, #4]
 800b070:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b074:	f023 0307 	bic.w	r3, r3, #7
 800b078:	b29a      	uxth	r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	889b      	ldrh	r3, [r3, #4]
 800b082:	b21a      	sxth	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3304      	adds	r3, #4
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	b299      	uxth	r1, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3305      	adds	r3, #5
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b29b      	uxth	r3, r3
 800b094:	021b      	lsls	r3, r3, #8
 800b096:	b29b      	uxth	r3, r3
 800b098:	430b      	orrs	r3, r1
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d110      	bne.n	800b0c6 <USBH_ParseEPDesc+0xbc>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b299      	uxth	r1, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	3305      	adds	r3, #5
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	b21b      	sxth	r3, r3
 800b0be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0c2:	b21b      	sxth	r3, r3
 800b0c4:	e001      	b.n	800b0ca <USBH_ParseEPDesc+0xc0>
 800b0c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	b21b      	sxth	r3, r3
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d116      	bne.n	800b10c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	78db      	ldrb	r3, [r3, #3]
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d005      	beq.n	800b0f6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	78db      	ldrb	r3, [r3, #3]
 800b0ee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d127      	bne.n	800b146 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	799b      	ldrb	r3, [r3, #6]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <USBH_ParseEPDesc+0xfc>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	799b      	ldrb	r3, [r3, #6]
 800b102:	2b10      	cmp	r3, #16
 800b104:	d91f      	bls.n	800b146 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b106:	2303      	movs	r3, #3
 800b108:	75fb      	strb	r3, [r7, #23]
 800b10a:	e01c      	b.n	800b146 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	78db      	ldrb	r3, [r3, #3]
 800b110:	f003 0303 	and.w	r3, r3, #3
 800b114:	2b01      	cmp	r3, #1
 800b116:	d10a      	bne.n	800b12e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	799b      	ldrb	r3, [r3, #6]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <USBH_ParseEPDesc+0x11e>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	799b      	ldrb	r3, [r3, #6]
 800b124:	2b10      	cmp	r3, #16
 800b126:	d90e      	bls.n	800b146 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b128:	2303      	movs	r3, #3
 800b12a:	75fb      	strb	r3, [r7, #23]
 800b12c:	e00b      	b.n	800b146 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	78db      	ldrb	r3, [r3, #3]
 800b132:	f003 0303 	and.w	r3, r3, #3
 800b136:	2b03      	cmp	r3, #3
 800b138:	d105      	bne.n	800b146 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	799b      	ldrb	r3, [r3, #6]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b142:	2303      	movs	r3, #3
 800b144:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	371c      	adds	r7, #28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	4613      	mov	r3, r2
 800b160:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3301      	adds	r3, #1
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d120      	bne.n	800b1ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	1e9a      	subs	r2, r3, #2
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	4293      	cmp	r3, r2
 800b176:	bf28      	it	cs
 800b178:	4613      	movcs	r3, r2
 800b17a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3302      	adds	r3, #2
 800b180:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b182:	2300      	movs	r3, #0
 800b184:	82fb      	strh	r3, [r7, #22]
 800b186:	e00b      	b.n	800b1a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b188:	8afb      	ldrh	r3, [r7, #22]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	4413      	add	r3, r2
 800b18e:	781a      	ldrb	r2, [r3, #0]
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	3301      	adds	r3, #1
 800b198:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b19a:	8afb      	ldrh	r3, [r7, #22]
 800b19c:	3302      	adds	r3, #2
 800b19e:	82fb      	strh	r3, [r7, #22]
 800b1a0:	8afa      	ldrh	r2, [r7, #22]
 800b1a2:	8abb      	ldrh	r3, [r7, #20]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d3ef      	bcc.n	800b188 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	701a      	strb	r2, [r3, #0]
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	371c      	adds	r7, #28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	881a      	ldrh	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	4413      	add	r3, r2
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4413      	add	r3, r2
 800b1e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b1fe:	2301      	movs	r3, #1
 800b200:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	789b      	ldrb	r3, [r3, #2]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d002      	beq.n	800b210 <USBH_CtlReq+0x20>
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d01d      	beq.n	800b24a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b20e:	e043      	b.n	800b298 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	88fa      	ldrh	r2, [r7, #6]
 800b21a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2201      	movs	r2, #1
 800b220:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2202      	movs	r2, #2
 800b226:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b228:	2301      	movs	r3, #1
 800b22a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2203      	movs	r2, #3
 800b230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b240:	2300      	movs	r3, #0
 800b242:	2200      	movs	r2, #0
 800b244:	f000 fd46 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b248:	e026      	b.n	800b298 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 f82a 	bl	800b2a4 <USBH_HandleControl>
 800b250:	4603      	mov	r3, r0
 800b252:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <USBH_CtlReq+0x70>
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d106      	bne.n	800b26e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2201      	movs	r2, #1
 800b264:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	761a      	strb	r2, [r3, #24]
 800b26c:	e005      	b.n	800b27a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d102      	bne.n	800b27a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2203      	movs	r2, #3
 800b27e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b28e:	2300      	movs	r3, #0
 800b290:	2200      	movs	r2, #0
 800b292:	f000 fd1f 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b296:	bf00      	nop
  }
  return status;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
	...

0800b2a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b086      	sub	sp, #24
 800b2a8:	af02      	add	r7, sp, #8
 800b2aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	7e1b      	ldrb	r3, [r3, #24]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	2b0a      	cmp	r3, #10
 800b2bc:	f200 8229 	bhi.w	800b712 <USBH_HandleControl+0x46e>
 800b2c0:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <USBH_HandleControl+0x24>)
 800b2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c6:	bf00      	nop
 800b2c8:	0800b2f5 	.word	0x0800b2f5
 800b2cc:	0800b30f 	.word	0x0800b30f
 800b2d0:	0800b3b1 	.word	0x0800b3b1
 800b2d4:	0800b3d7 	.word	0x0800b3d7
 800b2d8:	0800b463 	.word	0x0800b463
 800b2dc:	0800b48d 	.word	0x0800b48d
 800b2e0:	0800b54f 	.word	0x0800b54f
 800b2e4:	0800b571 	.word	0x0800b571
 800b2e8:	0800b603 	.word	0x0800b603
 800b2ec:	0800b629 	.word	0x0800b629
 800b2f0:	0800b6bb 	.word	0x0800b6bb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f103 0110 	add.w	r1, r3, #16
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	795b      	ldrb	r3, [r3, #5]
 800b2fe:	461a      	mov	r2, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa17 	bl	800b734 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2202      	movs	r2, #2
 800b30a:	761a      	strb	r2, [r3, #24]
      break;
 800b30c:	e20c      	b.n	800b728 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	795b      	ldrb	r3, [r3, #5]
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f003 fd25 	bl	800ed64 <USBH_LL_GetURBState>
 800b31a:	4603      	mov	r3, r0
 800b31c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d12c      	bne.n	800b37e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7c1b      	ldrb	r3, [r3, #16]
 800b328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b32c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	8adb      	ldrh	r3, [r3, #22]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b336:	7b7b      	ldrb	r3, [r7, #13]
 800b338:	2b80      	cmp	r3, #128	; 0x80
 800b33a:	d103      	bne.n	800b344 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2203      	movs	r2, #3
 800b340:	761a      	strb	r2, [r3, #24]
 800b342:	e00d      	b.n	800b360 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2205      	movs	r2, #5
 800b348:	761a      	strb	r2, [r3, #24]
 800b34a:	e009      	b.n	800b360 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b34c:	7b7b      	ldrb	r3, [r7, #13]
 800b34e:	2b80      	cmp	r3, #128	; 0x80
 800b350:	d103      	bne.n	800b35a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2209      	movs	r2, #9
 800b356:	761a      	strb	r2, [r3, #24]
 800b358:	e002      	b.n	800b360 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2207      	movs	r2, #7
 800b35e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2203      	movs	r2, #3
 800b364:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b374:	2300      	movs	r3, #0
 800b376:	2200      	movs	r2, #0
 800b378:	f000 fcac 	bl	800bcd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b37c:	e1cb      	b.n	800b716 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b04      	cmp	r3, #4
 800b382:	d003      	beq.n	800b38c <USBH_HandleControl+0xe8>
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	2b02      	cmp	r3, #2
 800b388:	f040 81c5 	bne.w	800b716 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	220b      	movs	r2, #11
 800b390:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2203      	movs	r2, #3
 800b396:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f000 fc93 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b3ae:	e1b2      	b.n	800b716 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6899      	ldr	r1, [r3, #8]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	899a      	ldrh	r2, [r3, #12]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	791b      	ldrb	r3, [r3, #4]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f9f2 	bl	800b7b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2204      	movs	r2, #4
 800b3d2:	761a      	strb	r2, [r3, #24]
      break;
 800b3d4:	e1a8      	b.n	800b728 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	791b      	ldrb	r3, [r3, #4]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f003 fcc1 	bl	800ed64 <USBH_LL_GetURBState>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d110      	bne.n	800b40e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2209      	movs	r2, #9
 800b3f0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2203      	movs	r2, #3
 800b3f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b406:	2300      	movs	r3, #0
 800b408:	2200      	movs	r2, #0
 800b40a:	f000 fc63 	bl	800bcd4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	2b05      	cmp	r3, #5
 800b412:	d110      	bne.n	800b436 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b414:	2303      	movs	r3, #3
 800b416:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2203      	movs	r2, #3
 800b41c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b42c:	2300      	movs	r3, #0
 800b42e:	2200      	movs	r2, #0
 800b430:	f000 fc50 	bl	800bcd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b434:	e171      	b.n	800b71a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	2b04      	cmp	r3, #4
 800b43a:	f040 816e 	bne.w	800b71a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	220b      	movs	r2, #11
 800b442:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2203      	movs	r2, #3
 800b448:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b458:	2300      	movs	r3, #0
 800b45a:	2200      	movs	r2, #0
 800b45c:	f000 fc3a 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b460:	e15b      	b.n	800b71a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6899      	ldr	r1, [r3, #8]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	899a      	ldrh	r2, [r3, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	795b      	ldrb	r3, [r3, #5]
 800b46e:	2001      	movs	r0, #1
 800b470:	9000      	str	r0, [sp, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f978 	bl	800b768 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b47e:	b29a      	uxth	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2206      	movs	r2, #6
 800b488:	761a      	strb	r2, [r3, #24]
      break;
 800b48a:	e14d      	b.n	800b728 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	795b      	ldrb	r3, [r3, #5]
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f003 fc66 	bl	800ed64 <USBH_LL_GetURBState>
 800b498:	4603      	mov	r3, r0
 800b49a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d111      	bne.n	800b4c6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2207      	movs	r2, #7
 800b4a6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2203      	movs	r2, #3
 800b4ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b4bc:	2300      	movs	r3, #0
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f000 fc08 	bl	800bcd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4c4:	e12b      	b.n	800b71e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	2b05      	cmp	r3, #5
 800b4ca:	d113      	bne.n	800b4f4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	220c      	movs	r2, #12
 800b4d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2203      	movs	r2, #3
 800b4da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f000 fbf1 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b4f2:	e114      	b.n	800b71e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d111      	bne.n	800b51e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2205      	movs	r2, #5
 800b4fe:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2203      	movs	r2, #3
 800b504:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b514:	2300      	movs	r3, #0
 800b516:	2200      	movs	r2, #0
 800b518:	f000 fbdc 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b51c:	e0ff      	b.n	800b71e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b51e:	7bbb      	ldrb	r3, [r7, #14]
 800b520:	2b04      	cmp	r3, #4
 800b522:	f040 80fc 	bne.w	800b71e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	220b      	movs	r2, #11
 800b52a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b52c:	2302      	movs	r3, #2
 800b52e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2203      	movs	r2, #3
 800b534:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b544:	2300      	movs	r3, #0
 800b546:	2200      	movs	r2, #0
 800b548:	f000 fbc4 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b54c:	e0e7      	b.n	800b71e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	791b      	ldrb	r3, [r3, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f92b 	bl	800b7b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b562:	b29a      	uxth	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2208      	movs	r2, #8
 800b56c:	761a      	strb	r2, [r3, #24]

      break;
 800b56e:	e0db      	b.n	800b728 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	791b      	ldrb	r3, [r3, #4]
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f003 fbf4 	bl	800ed64 <USBH_LL_GetURBState>
 800b57c:	4603      	mov	r3, r0
 800b57e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d113      	bne.n	800b5ae <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	220d      	movs	r2, #13
 800b58a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2203      	movs	r2, #3
 800b594:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f000 fb94 	bl	800bcd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5ac:	e0b9      	b.n	800b722 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d111      	bne.n	800b5d8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	220b      	movs	r2, #11
 800b5b8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2203      	movs	r2, #3
 800b5be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f000 fb7f 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b5d6:	e0a4      	b.n	800b722 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	2b05      	cmp	r3, #5
 800b5dc:	f040 80a1 	bne.w	800b722 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2203      	movs	r2, #3
 800b5e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f000 fb6a 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b600:	e08f      	b.n	800b722 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	795b      	ldrb	r3, [r3, #5]
 800b606:	2201      	movs	r2, #1
 800b608:	9200      	str	r2, [sp, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	2100      	movs	r1, #0
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f8aa 	bl	800b768 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	220a      	movs	r2, #10
 800b624:	761a      	strb	r2, [r3, #24]
      break;
 800b626:	e07f      	b.n	800b728 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	795b      	ldrb	r3, [r3, #5]
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f003 fb98 	bl	800ed64 <USBH_LL_GetURBState>
 800b634:	4603      	mov	r3, r0
 800b636:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d113      	bne.n	800b666 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	220d      	movs	r2, #13
 800b646:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2203      	movs	r2, #3
 800b64c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b65c:	2300      	movs	r3, #0
 800b65e:	2200      	movs	r2, #0
 800b660:	f000 fb38 	bl	800bcd4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b664:	e05f      	b.n	800b726 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d111      	bne.n	800b690 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2209      	movs	r2, #9
 800b670:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2203      	movs	r2, #3
 800b676:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b686:	2300      	movs	r3, #0
 800b688:	2200      	movs	r2, #0
 800b68a:	f000 fb23 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b68e:	e04a      	b.n	800b726 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b690:	7bbb      	ldrb	r3, [r7, #14]
 800b692:	2b04      	cmp	r3, #4
 800b694:	d147      	bne.n	800b726 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	220b      	movs	r2, #11
 800b69a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2203      	movs	r2, #3
 800b6a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f000 fb0e 	bl	800bcd4 <osMessageQueuePut>
      break;
 800b6b8:	e035      	b.n	800b726 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	7e5b      	ldrb	r3, [r3, #25]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	765a      	strb	r2, [r3, #25]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	7e5b      	ldrb	r3, [r3, #25]
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d806      	bhi.n	800b6dc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b6da:	e025      	b.n	800b728 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6e2:	2106      	movs	r1, #6
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	795b      	ldrb	r3, [r3, #5]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f90d 	bl	800b914 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	791b      	ldrb	r3, [r3, #4]
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f907 	bl	800b914 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b70c:	2302      	movs	r3, #2
 800b70e:	73fb      	strb	r3, [r7, #15]
      break;
 800b710:	e00a      	b.n	800b728 <USBH_HandleControl+0x484>

    default:
      break;
 800b712:	bf00      	nop
 800b714:	e008      	b.n	800b728 <USBH_HandleControl+0x484>
      break;
 800b716:	bf00      	nop
 800b718:	e006      	b.n	800b728 <USBH_HandleControl+0x484>
      break;
 800b71a:	bf00      	nop
 800b71c:	e004      	b.n	800b728 <USBH_HandleControl+0x484>
      break;
 800b71e:	bf00      	nop
 800b720:	e002      	b.n	800b728 <USBH_HandleControl+0x484>
      break;
 800b722:	bf00      	nop
 800b724:	e000      	b.n	800b728 <USBH_HandleControl+0x484>
      break;
 800b726:	bf00      	nop
  }

  return status;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop

0800b734 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b088      	sub	sp, #32
 800b738:	af04      	add	r7, sp, #16
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4613      	mov	r3, r2
 800b740:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b742:	79f9      	ldrb	r1, [r7, #7]
 800b744:	2300      	movs	r3, #0
 800b746:	9303      	str	r3, [sp, #12]
 800b748:	2308      	movs	r3, #8
 800b74a:	9302      	str	r3, [sp, #8]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	2300      	movs	r3, #0
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	2300      	movs	r3, #0
 800b756:	2200      	movs	r2, #0
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f003 fad2 	bl	800ed02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af04      	add	r7, sp, #16
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	4611      	mov	r1, r2
 800b774:	461a      	mov	r2, r3
 800b776:	460b      	mov	r3, r1
 800b778:	80fb      	strh	r3, [r7, #6]
 800b77a:	4613      	mov	r3, r2
 800b77c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b78c:	7979      	ldrb	r1, [r7, #5]
 800b78e:	7e3b      	ldrb	r3, [r7, #24]
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	88fb      	ldrh	r3, [r7, #6]
 800b794:	9302      	str	r3, [sp, #8]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	2301      	movs	r3, #1
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f003 faad 	bl	800ed02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b088      	sub	sp, #32
 800b7b6:	af04      	add	r7, sp, #16
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	4611      	mov	r1, r2
 800b7be:	461a      	mov	r2, r3
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	80fb      	strh	r3, [r7, #6]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b7c8:	7979      	ldrb	r1, [r7, #5]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9303      	str	r3, [sp, #12]
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	9302      	str	r3, [sp, #8]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	2201      	movs	r2, #1
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f003 fa8f 	bl	800ed02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b7e4:	2300      	movs	r3, #0

}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b088      	sub	sp, #32
 800b7f2:	af04      	add	r7, sp, #16
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	80fb      	strh	r3, [r7, #6]
 800b800:	4613      	mov	r3, r2
 800b802:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b80e:	2300      	movs	r3, #0
 800b810:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b812:	7979      	ldrb	r1, [r7, #5]
 800b814:	7e3b      	ldrb	r3, [r7, #24]
 800b816:	9303      	str	r3, [sp, #12]
 800b818:	88fb      	ldrh	r3, [r7, #6]
 800b81a:	9302      	str	r3, [sp, #8]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	2301      	movs	r3, #1
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	2302      	movs	r3, #2
 800b826:	2200      	movs	r2, #0
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f003 fa6a 	bl	800ed02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af04      	add	r7, sp, #16
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	4611      	mov	r1, r2
 800b844:	461a      	mov	r2, r3
 800b846:	460b      	mov	r3, r1
 800b848:	80fb      	strh	r3, [r7, #6]
 800b84a:	4613      	mov	r3, r2
 800b84c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b84e:	7979      	ldrb	r1, [r7, #5]
 800b850:	2300      	movs	r3, #0
 800b852:	9303      	str	r3, [sp, #12]
 800b854:	88fb      	ldrh	r3, [r7, #6]
 800b856:	9302      	str	r3, [sp, #8]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	2301      	movs	r3, #1
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	2302      	movs	r3, #2
 800b862:	2201      	movs	r2, #1
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f003 fa4c 	bl	800ed02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af04      	add	r7, sp, #16
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	4608      	mov	r0, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	461a      	mov	r2, r3
 800b882:	4603      	mov	r3, r0
 800b884:	70fb      	strb	r3, [r7, #3]
 800b886:	460b      	mov	r3, r1
 800b888:	70bb      	strb	r3, [r7, #2]
 800b88a:	4613      	mov	r3, r2
 800b88c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b88e:	7878      	ldrb	r0, [r7, #1]
 800b890:	78ba      	ldrb	r2, [r7, #2]
 800b892:	78f9      	ldrb	r1, [r7, #3]
 800b894:	8b3b      	ldrh	r3, [r7, #24]
 800b896:	9302      	str	r3, [sp, #8]
 800b898:	7d3b      	ldrb	r3, [r7, #20]
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	7c3b      	ldrb	r3, [r7, #16]
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f003 f9df 	bl	800ec66 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b082      	sub	sp, #8
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b8be:	78fb      	ldrb	r3, [r7, #3]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f003 f9fe 	bl	800ecc4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f836 	bl	800b950 <USBH_GetFreePipe>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b8e8:	89fb      	ldrh	r3, [r7, #14]
 800b8ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00a      	beq.n	800b908 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b8f2:	78fa      	ldrb	r2, [r7, #3]
 800b8f4:	89fb      	ldrh	r3, [r7, #14]
 800b8f6:	f003 030f 	and.w	r3, r3, #15
 800b8fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8fe:	6879      	ldr	r1, [r7, #4]
 800b900:	33e0      	adds	r3, #224	; 0xe0
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	440b      	add	r3, r1
 800b906:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b908:	89fb      	ldrh	r3, [r7, #14]
 800b90a:	b2db      	uxtb	r3, r3
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	2b0f      	cmp	r3, #15
 800b924:	d80d      	bhi.n	800b942 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	33e0      	adds	r3, #224	; 0xe0
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	78fb      	ldrb	r3, [r7, #3]
 800b934:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b938:	6879      	ldr	r1, [r7, #4]
 800b93a:	33e0      	adds	r3, #224	; 0xe0
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
 800b960:	e00f      	b.n	800b982 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	33e0      	adds	r3, #224	; 0xe0
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	e007      	b.n	800b98c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	3301      	adds	r3, #1
 800b980:	73fb      	strb	r3, [r7, #15]
 800b982:	7bfb      	ldrb	r3, [r7, #15]
 800b984:	2b0f      	cmp	r3, #15
 800b986:	d9ec      	bls.n	800b962 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b988:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <__NVIC_SetPriority>:
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6039      	str	r1, [r7, #0]
 800b9a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	db0a      	blt.n	800b9c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	490c      	ldr	r1, [pc, #48]	; (800b9e4 <__NVIC_SetPriority+0x4c>)
 800b9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9b6:	0112      	lsls	r2, r2, #4
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	440b      	add	r3, r1
 800b9bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b9c0:	e00a      	b.n	800b9d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4908      	ldr	r1, [pc, #32]	; (800b9e8 <__NVIC_SetPriority+0x50>)
 800b9c8:	79fb      	ldrb	r3, [r7, #7]
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	3b04      	subs	r3, #4
 800b9d0:	0112      	lsls	r2, r2, #4
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	440b      	add	r3, r1
 800b9d6:	761a      	strb	r2, [r3, #24]
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	e000e100 	.word	0xe000e100
 800b9e8:	e000ed00 	.word	0xe000ed00

0800b9ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	f06f 0004 	mvn.w	r0, #4
 800b9f6:	f7ff ffcf 	bl	800b998 <__NVIC_SetPriority>
#endif
}
 800b9fa:	bf00      	nop
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba06:	f3ef 8305 	mrs	r3, IPSR
 800ba0a:	603b      	str	r3, [r7, #0]
  return(result);
 800ba0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d003      	beq.n	800ba1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ba12:	f06f 0305 	mvn.w	r3, #5
 800ba16:	607b      	str	r3, [r7, #4]
 800ba18:	e00c      	b.n	800ba34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ba1a:	4b0a      	ldr	r3, [pc, #40]	; (800ba44 <osKernelInitialize+0x44>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d105      	bne.n	800ba2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ba22:	4b08      	ldr	r3, [pc, #32]	; (800ba44 <osKernelInitialize+0x44>)
 800ba24:	2201      	movs	r2, #1
 800ba26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	607b      	str	r3, [r7, #4]
 800ba2c:	e002      	b.n	800ba34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ba2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba34:	687b      	ldr	r3, [r7, #4]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20004834 	.word	0x20004834

0800ba48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba4e:	f3ef 8305 	mrs	r3, IPSR
 800ba52:	603b      	str	r3, [r7, #0]
  return(result);
 800ba54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ba5a:	f06f 0305 	mvn.w	r3, #5
 800ba5e:	607b      	str	r3, [r7, #4]
 800ba60:	e010      	b.n	800ba84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba62:	4b0b      	ldr	r3, [pc, #44]	; (800ba90 <osKernelStart+0x48>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d109      	bne.n	800ba7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba6a:	f7ff ffbf 	bl	800b9ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba6e:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <osKernelStart+0x48>)
 800ba70:	2202      	movs	r2, #2
 800ba72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba74:	f001 fa50 	bl	800cf18 <vTaskStartScheduler>
      stat = osOK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	607b      	str	r3, [r7, #4]
 800ba7c:	e002      	b.n	800ba84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba84:	687b      	ldr	r3, [r7, #4]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20004834 	.word	0x20004834

0800ba94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08e      	sub	sp, #56	; 0x38
 800ba98:	af04      	add	r7, sp, #16
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800baa0:	2300      	movs	r3, #0
 800baa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baa4:	f3ef 8305 	mrs	r3, IPSR
 800baa8:	617b      	str	r3, [r7, #20]
  return(result);
 800baaa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800baac:	2b00      	cmp	r3, #0
 800baae:	d17e      	bne.n	800bbae <osThreadNew+0x11a>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d07b      	beq.n	800bbae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bab6:	2380      	movs	r3, #128	; 0x80
 800bab8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800baba:	2318      	movs	r3, #24
 800babc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bac6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d045      	beq.n	800bb5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <osThreadNew+0x48>
        name = attr->name;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d008      	beq.n	800bb02 <osThreadNew+0x6e>
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	2b38      	cmp	r3, #56	; 0x38
 800baf4:	d805      	bhi.n	800bb02 <osThreadNew+0x6e>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <osThreadNew+0x72>
        return (NULL);
 800bb02:	2300      	movs	r3, #0
 800bb04:	e054      	b.n	800bbb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	089b      	lsrs	r3, r3, #2
 800bb14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00e      	beq.n	800bb3c <osThreadNew+0xa8>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	2b5b      	cmp	r3, #91	; 0x5b
 800bb24:	d90a      	bls.n	800bb3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d006      	beq.n	800bb3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <osThreadNew+0xa8>
        mem = 1;
 800bb36:	2301      	movs	r3, #1
 800bb38:	61bb      	str	r3, [r7, #24]
 800bb3a:	e010      	b.n	800bb5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10c      	bne.n	800bb5e <osThreadNew+0xca>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d108      	bne.n	800bb5e <osThreadNew+0xca>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d104      	bne.n	800bb5e <osThreadNew+0xca>
          mem = 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	61bb      	str	r3, [r7, #24]
 800bb58:	e001      	b.n	800bb5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d110      	bne.n	800bb86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb6c:	9202      	str	r2, [sp, #8]
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	6a3a      	ldr	r2, [r7, #32]
 800bb78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f000 fff6 	bl	800cb6c <xTaskCreateStatic>
 800bb80:	4603      	mov	r3, r0
 800bb82:	613b      	str	r3, [r7, #16]
 800bb84:	e013      	b.n	800bbae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d110      	bne.n	800bbae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb8c:	6a3b      	ldr	r3, [r7, #32]
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	f107 0310 	add.w	r3, r7, #16
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f001 f841 	bl	800cc26 <xTaskCreate>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d001      	beq.n	800bbae <osThreadNew+0x11a>
            hTask = NULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bbae:	693b      	ldr	r3, [r7, #16]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3728      	adds	r7, #40	; 0x28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbc0:	f3ef 8305 	mrs	r3, IPSR
 800bbc4:	60bb      	str	r3, [r7, #8]
  return(result);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d003      	beq.n	800bbd4 <osDelay+0x1c>
    stat = osErrorISR;
 800bbcc:	f06f 0305 	mvn.w	r3, #5
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	e007      	b.n	800bbe4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f001 f966 	bl	800ceb0 <vTaskDelay>
    }
  }

  return (stat);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b08a      	sub	sp, #40	; 0x28
 800bbf2:	af02      	add	r7, sp, #8
 800bbf4:	60f8      	str	r0, [r7, #12]
 800bbf6:	60b9      	str	r1, [r7, #8]
 800bbf8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbfe:	f3ef 8305 	mrs	r3, IPSR
 800bc02:	613b      	str	r3, [r7, #16]
  return(result);
 800bc04:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d15f      	bne.n	800bcca <osMessageQueueNew+0xdc>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d05c      	beq.n	800bcca <osMessageQueueNew+0xdc>
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d059      	beq.n	800bcca <osMessageQueueNew+0xdc>
    mem = -1;
 800bc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d029      	beq.n	800bc76 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d012      	beq.n	800bc50 <osMessageQueueNew+0x62>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	2b4f      	cmp	r3, #79	; 0x4f
 800bc30:	d90e      	bls.n	800bc50 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00a      	beq.n	800bc50 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	695a      	ldr	r2, [r3, #20]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	68b9      	ldr	r1, [r7, #8]
 800bc42:	fb01 f303 	mul.w	r3, r1, r3
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d302      	bcc.n	800bc50 <osMessageQueueNew+0x62>
        mem = 1;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	61bb      	str	r3, [r7, #24]
 800bc4e:	e014      	b.n	800bc7a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d110      	bne.n	800bc7a <osMessageQueueNew+0x8c>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10c      	bne.n	800bc7a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d108      	bne.n	800bc7a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d104      	bne.n	800bc7a <osMessageQueueNew+0x8c>
          mem = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	61bb      	str	r3, [r7, #24]
 800bc74:	e001      	b.n	800bc7a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d10b      	bne.n	800bc98 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	2100      	movs	r1, #0
 800bc8a:	9100      	str	r1, [sp, #0]
 800bc8c:	68b9      	ldr	r1, [r7, #8]
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 fa2e 	bl	800c0f0 <xQueueGenericCreateStatic>
 800bc94:	61f8      	str	r0, [r7, #28]
 800bc96:	e008      	b.n	800bcaa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d105      	bne.n	800bcaa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bc9e:	2200      	movs	r2, #0
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 fa9c 	bl	800c1e0 <xQueueGenericCreate>
 800bca8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00c      	beq.n	800bcca <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <osMessageQueueNew+0xd0>
        name = attr->name;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e001      	b.n	800bcc2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bcc2:	6979      	ldr	r1, [r7, #20]
 800bcc4:	69f8      	ldr	r0, [r7, #28]
 800bcc6:	f000 fef3 	bl	800cab0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bcca:	69fb      	ldr	r3, [r7, #28]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3720      	adds	r7, #32
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	603b      	str	r3, [r7, #0]
 800bce0:	4613      	mov	r3, r2
 800bce2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcec:	f3ef 8305 	mrs	r3, IPSR
 800bcf0:	617b      	str	r3, [r7, #20]
  return(result);
 800bcf2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d028      	beq.n	800bd4a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d005      	beq.n	800bd0a <osMessageQueuePut+0x36>
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d002      	beq.n	800bd0a <osMessageQueuePut+0x36>
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bd0a:	f06f 0303 	mvn.w	r3, #3
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	e038      	b.n	800bd84 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bd16:	f107 0210 	add.w	r2, r7, #16
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	68b9      	ldr	r1, [r7, #8]
 800bd1e:	69b8      	ldr	r0, [r7, #24]
 800bd20:	f000 fbba 	bl	800c498 <xQueueGenericSendFromISR>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d003      	beq.n	800bd32 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bd2a:	f06f 0302 	mvn.w	r3, #2
 800bd2e:	61fb      	str	r3, [r7, #28]
 800bd30:	e028      	b.n	800bd84 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d025      	beq.n	800bd84 <osMessageQueuePut+0xb0>
 800bd38:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <osMessageQueuePut+0xbc>)
 800bd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3e:	601a      	str	r2, [r3, #0]
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	e01c      	b.n	800bd84 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <osMessageQueuePut+0x82>
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d103      	bne.n	800bd5e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bd56:	f06f 0303 	mvn.w	r3, #3
 800bd5a:	61fb      	str	r3, [r7, #28]
 800bd5c:	e012      	b.n	800bd84 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd5e:	2300      	movs	r3, #0
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	68b9      	ldr	r1, [r7, #8]
 800bd64:	69b8      	ldr	r0, [r7, #24]
 800bd66:	f000 fa99 	bl	800c29c <xQueueGenericSend>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d009      	beq.n	800bd84 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bd76:	f06f 0301 	mvn.w	r3, #1
 800bd7a:	61fb      	str	r3, [r7, #28]
 800bd7c:	e002      	b.n	800bd84 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bd7e:	f06f 0302 	mvn.w	r3, #2
 800bd82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bd84:	69fb      	ldr	r3, [r7, #28]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3720      	adds	r7, #32
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b088      	sub	sp, #32
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdaa:	f3ef 8305 	mrs	r3, IPSR
 800bdae:	617b      	str	r3, [r7, #20]
  return(result);
 800bdb0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d028      	beq.n	800be08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d005      	beq.n	800bdc8 <osMessageQueueGet+0x34>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <osMessageQueueGet+0x34>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d003      	beq.n	800bdd0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bdc8:	f06f 0303 	mvn.w	r3, #3
 800bdcc:	61fb      	str	r3, [r7, #28]
 800bdce:	e037      	b.n	800be40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bdd4:	f107 0310 	add.w	r3, r7, #16
 800bdd8:	461a      	mov	r2, r3
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	69b8      	ldr	r0, [r7, #24]
 800bdde:	f000 fcd7 	bl	800c790 <xQueueReceiveFromISR>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d003      	beq.n	800bdf0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bde8:	f06f 0302 	mvn.w	r3, #2
 800bdec:	61fb      	str	r3, [r7, #28]
 800bdee:	e027      	b.n	800be40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d024      	beq.n	800be40 <osMessageQueueGet+0xac>
 800bdf6:	4b15      	ldr	r3, [pc, #84]	; (800be4c <osMessageQueueGet+0xb8>)
 800bdf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	e01b      	b.n	800be40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <osMessageQueueGet+0x80>
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d103      	bne.n	800be1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800be14:	f06f 0303 	mvn.w	r3, #3
 800be18:	61fb      	str	r3, [r7, #28]
 800be1a:	e011      	b.n	800be40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	68b9      	ldr	r1, [r7, #8]
 800be20:	69b8      	ldr	r0, [r7, #24]
 800be22:	f000 fbd5 	bl	800c5d0 <xQueueReceive>
 800be26:	4603      	mov	r3, r0
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d009      	beq.n	800be40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800be32:	f06f 0301 	mvn.w	r3, #1
 800be36:	61fb      	str	r3, [r7, #28]
 800be38:	e002      	b.n	800be40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800be3a:	f06f 0302 	mvn.w	r3, #2
 800be3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800be40:	69fb      	ldr	r3, [r7, #28]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3720      	adds	r7, #32
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	e000ed04 	.word	0xe000ed04

0800be50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4a07      	ldr	r2, [pc, #28]	; (800be7c <vApplicationGetIdleTaskMemory+0x2c>)
 800be60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	4a06      	ldr	r2, [pc, #24]	; (800be80 <vApplicationGetIdleTaskMemory+0x30>)
 800be66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2280      	movs	r2, #128	; 0x80
 800be6c:	601a      	str	r2, [r3, #0]
}
 800be6e:	bf00      	nop
 800be70:	3714      	adds	r7, #20
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	20004838 	.word	0x20004838
 800be80:	20004894 	.word	0x20004894

0800be84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	4a07      	ldr	r2, [pc, #28]	; (800beb0 <vApplicationGetTimerTaskMemory+0x2c>)
 800be94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	4a06      	ldr	r2, [pc, #24]	; (800beb4 <vApplicationGetTimerTaskMemory+0x30>)
 800be9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bea2:	601a      	str	r2, [r3, #0]
}
 800bea4:	bf00      	nop
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	20004a94 	.word	0x20004a94
 800beb4:	20004af0 	.word	0x20004af0

0800beb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f103 0208 	add.w	r2, r3, #8
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f103 0208 	add.w	r2, r3, #8
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f103 0208 	add.w	r2, r3, #8
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf06:	bf00      	nop
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf12:	b480      	push	{r7}
 800bf14:	b085      	sub	sp, #20
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	689a      	ldr	r2, [r3, #8]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	601a      	str	r2, [r3, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b085      	sub	sp, #20
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf70:	d103      	bne.n	800bf7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	e00c      	b.n	800bf94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	e002      	b.n	800bf88 <vListInsert+0x2e>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d2f6      	bcs.n	800bf82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	601a      	str	r2, [r3, #0]
}
 800bfc0:	bf00      	nop
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	6892      	ldr	r2, [r2, #8]
 800bfe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	6852      	ldr	r2, [r2, #4]
 800bfec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d103      	bne.n	800c000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689a      	ldr	r2, [r3, #8]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1e5a      	subs	r2, r3, #1
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xQueueGenericReset+0x2a>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	60bb      	str	r3, [r7, #8]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c04a:	f002 f92b 	bl	800e2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c056:	68f9      	ldr	r1, [r7, #12]
 800c058:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c05a:	fb01 f303 	mul.w	r3, r1, r3
 800c05e:	441a      	add	r2, r3
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07a:	3b01      	subs	r3, #1
 800c07c:	68f9      	ldr	r1, [r7, #12]
 800c07e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c080:	fb01 f303 	mul.w	r3, r1, r3
 800c084:	441a      	add	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	22ff      	movs	r2, #255	; 0xff
 800c08e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	22ff      	movs	r2, #255	; 0xff
 800c096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d114      	bne.n	800c0ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d01a      	beq.n	800c0de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3310      	adds	r3, #16
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f001 f9bd 	bl	800d42c <xTaskRemoveFromEventList>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d012      	beq.n	800c0de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0b8:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <xQueueGenericReset+0xcc>)
 800c0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	e009      	b.n	800c0de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3310      	adds	r3, #16
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff fef2 	bl	800beb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3324      	adds	r3, #36	; 0x24
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff feed 	bl	800beb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0de:	f002 f911 	bl	800e304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0e2:	2301      	movs	r3, #1
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	e000ed04 	.word	0xe000ed04

0800c0f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08e      	sub	sp, #56	; 0x38
 800c0f4:	af02      	add	r7, sp, #8
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c116:	bf00      	nop
 800c118:	e7fe      	b.n	800c118 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10a      	bne.n	800c136 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d002      	beq.n	800c142 <xQueueGenericCreateStatic+0x52>
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <xQueueGenericCreateStatic+0x56>
 800c142:	2301      	movs	r3, #1
 800c144:	e000      	b.n	800c148 <xQueueGenericCreateStatic+0x58>
 800c146:	2300      	movs	r3, #0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	623b      	str	r3, [r7, #32]
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d102      	bne.n	800c16e <xQueueGenericCreateStatic+0x7e>
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <xQueueGenericCreateStatic+0x82>
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <xQueueGenericCreateStatic+0x84>
 800c172:	2300      	movs	r3, #0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10a      	bne.n	800c18e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	61fb      	str	r3, [r7, #28]
}
 800c18a:	bf00      	nop
 800c18c:	e7fe      	b.n	800c18c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c18e:	2350      	movs	r3, #80	; 0x50
 800c190:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2b50      	cmp	r3, #80	; 0x50
 800c196:	d00a      	beq.n	800c1ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	61bb      	str	r3, [r7, #24]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00d      	beq.n	800c1d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	68b9      	ldr	r1, [r7, #8]
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 f83f 	bl	800c254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3730      	adds	r7, #48	; 0x30
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08a      	sub	sp, #40	; 0x28
 800c1e4:	af02      	add	r7, sp, #8
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10a      	bne.n	800c20a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	613b      	str	r3, [r7, #16]
}
 800c206:	bf00      	nop
 800c208:	e7fe      	b.n	800c208 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	fb02 f303 	mul.w	r3, r2, r3
 800c212:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	3350      	adds	r3, #80	; 0x50
 800c218:	4618      	mov	r0, r3
 800c21a:	f002 f965 	bl	800e4e8 <pvPortMalloc>
 800c21e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d011      	beq.n	800c24a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	3350      	adds	r3, #80	; 0x50
 800c22e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c238:	79fa      	ldrb	r2, [r7, #7]
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	4613      	mov	r3, r2
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 f805 	bl	800c254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c24a:	69bb      	ldr	r3, [r7, #24]
	}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3720      	adds	r7, #32
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d103      	bne.n	800c270 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	69ba      	ldr	r2, [r7, #24]
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e002      	b.n	800c276 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c282:	2101      	movs	r1, #1
 800c284:	69b8      	ldr	r0, [r7, #24]
 800c286:	f7ff fecb 	bl	800c020 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	78fa      	ldrb	r2, [r7, #3]
 800c28e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08e      	sub	sp, #56	; 0x38
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10a      	bne.n	800c2ce <xQueueGenericSend+0x32>
	__asm volatile
 800c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2ca:	bf00      	nop
 800c2cc:	e7fe      	b.n	800c2cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d103      	bne.n	800c2dc <xQueueGenericSend+0x40>
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <xQueueGenericSend+0x44>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e000      	b.n	800c2e2 <xQueueGenericSend+0x46>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <xQueueGenericSend+0x60>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d103      	bne.n	800c30a <xQueueGenericSend+0x6e>
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c306:	2b01      	cmp	r3, #1
 800c308:	d101      	bne.n	800c30e <xQueueGenericSend+0x72>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e000      	b.n	800c310 <xQueueGenericSend+0x74>
 800c30e:	2300      	movs	r3, #0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10a      	bne.n	800c32a <xQueueGenericSend+0x8e>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	623b      	str	r3, [r7, #32]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c32a:	f001 fa63 	bl	800d7f4 <xTaskGetSchedulerState>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d102      	bne.n	800c33a <xQueueGenericSend+0x9e>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <xQueueGenericSend+0xa2>
 800c33a:	2301      	movs	r3, #1
 800c33c:	e000      	b.n	800c340 <xQueueGenericSend+0xa4>
 800c33e:	2300      	movs	r3, #0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10a      	bne.n	800c35a <xQueueGenericSend+0xbe>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	61fb      	str	r3, [r7, #28]
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c35a:	f001 ffa3 	bl	800e2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c366:	429a      	cmp	r2, r3
 800c368:	d302      	bcc.n	800c370 <xQueueGenericSend+0xd4>
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d129      	bne.n	800c3c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c370:	683a      	ldr	r2, [r7, #0]
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c376:	f000 fa8b 	bl	800c890 <prvCopyDataToQueue>
 800c37a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c380:	2b00      	cmp	r3, #0
 800c382:	d010      	beq.n	800c3a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	3324      	adds	r3, #36	; 0x24
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 f84f 	bl	800d42c <xTaskRemoveFromEventList>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d013      	beq.n	800c3bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c394:	4b3f      	ldr	r3, [pc, #252]	; (800c494 <xQueueGenericSend+0x1f8>)
 800c396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c39a:	601a      	str	r2, [r3, #0]
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	e00a      	b.n	800c3bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d007      	beq.n	800c3bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3ac:	4b39      	ldr	r3, [pc, #228]	; (800c494 <xQueueGenericSend+0x1f8>)
 800c3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3bc:	f001 ffa2 	bl	800e304 <vPortExitCritical>
				return pdPASS;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e063      	b.n	800c48c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d103      	bne.n	800c3d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3ca:	f001 ff9b 	bl	800e304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e05c      	b.n	800c48c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d106      	bne.n	800c3e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3d8:	f107 0314 	add.w	r3, r7, #20
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f001 f8af 	bl	800d540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3e6:	f001 ff8d 	bl	800e304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3ea:	f000 fdfb 	bl	800cfe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3ee:	f001 ff59 	bl	800e2a4 <vPortEnterCritical>
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3f8:	b25b      	sxtb	r3, r3
 800c3fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3fe:	d103      	bne.n	800c408 <xQueueGenericSend+0x16c>
 800c400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c402:	2200      	movs	r2, #0
 800c404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c40e:	b25b      	sxtb	r3, r3
 800c410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c414:	d103      	bne.n	800c41e <xQueueGenericSend+0x182>
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c41e:	f001 ff71 	bl	800e304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c422:	1d3a      	adds	r2, r7, #4
 800c424:	f107 0314 	add.w	r3, r7, #20
 800c428:	4611      	mov	r1, r2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f001 f89e 	bl	800d56c <xTaskCheckForTimeOut>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d124      	bne.n	800c480 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c438:	f000 fb22 	bl	800ca80 <prvIsQueueFull>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d018      	beq.n	800c474 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	3310      	adds	r3, #16
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	4611      	mov	r1, r2
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 ff9e 	bl	800d38c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c452:	f000 faad 	bl	800c9b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c456:	f000 fdd3 	bl	800d000 <xTaskResumeAll>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f47f af7c 	bne.w	800c35a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c462:	4b0c      	ldr	r3, [pc, #48]	; (800c494 <xQueueGenericSend+0x1f8>)
 800c464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	e772      	b.n	800c35a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c476:	f000 fa9b 	bl	800c9b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c47a:	f000 fdc1 	bl	800d000 <xTaskResumeAll>
 800c47e:	e76c      	b.n	800c35a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c482:	f000 fa95 	bl	800c9b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c486:	f000 fdbb 	bl	800d000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c48a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3738      	adds	r7, #56	; 0x38
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	e000ed04 	.word	0xe000ed04

0800c498 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b090      	sub	sp, #64	; 0x40
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
 800c4a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <xQueueGenericSendFromISR+0x3c>
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <xQueueGenericSendFromISR+0x40>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e000      	b.n	800c4da <xQueueGenericSendFromISR+0x42>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10a      	bne.n	800c4f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d103      	bne.n	800c502 <xQueueGenericSendFromISR+0x6a>
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d101      	bne.n	800c506 <xQueueGenericSendFromISR+0x6e>
 800c502:	2301      	movs	r3, #1
 800c504:	e000      	b.n	800c508 <xQueueGenericSendFromISR+0x70>
 800c506:	2300      	movs	r3, #0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10a      	bne.n	800c522 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	623b      	str	r3, [r7, #32]
}
 800c51e:	bf00      	nop
 800c520:	e7fe      	b.n	800c520 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c522:	f001 ffa1 	bl	800e468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c526:	f3ef 8211 	mrs	r2, BASEPRI
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	61fa      	str	r2, [r7, #28]
 800c53c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c53e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c540:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d302      	bcc.n	800c554 <xQueueGenericSendFromISR+0xbc>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b02      	cmp	r3, #2
 800c552:	d12f      	bne.n	800c5b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c562:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	68b9      	ldr	r1, [r7, #8]
 800c568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c56a:	f000 f991 	bl	800c890 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c56e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c576:	d112      	bne.n	800c59e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d016      	beq.n	800c5ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	3324      	adds	r3, #36	; 0x24
 800c584:	4618      	mov	r0, r3
 800c586:	f000 ff51 	bl	800d42c <xTaskRemoveFromEventList>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00e      	beq.n	800c5ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00b      	beq.n	800c5ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	e007      	b.n	800c5ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c59e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	b25a      	sxtb	r2, r3
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c5b2:	e001      	b.n	800c5b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3740      	adds	r7, #64	; 0x40
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
	...

0800c5d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08c      	sub	sp, #48	; 0x30
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <xQueueReceive+0x30>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	623b      	str	r3, [r7, #32]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d103      	bne.n	800c60e <xQueueReceive+0x3e>
 800c606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <xQueueReceive+0x42>
 800c60e:	2301      	movs	r3, #1
 800c610:	e000      	b.n	800c614 <xQueueReceive+0x44>
 800c612:	2300      	movs	r3, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <xQueueReceive+0x5e>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	61fb      	str	r3, [r7, #28]
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c62e:	f001 f8e1 	bl	800d7f4 <xTaskGetSchedulerState>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <xQueueReceive+0x6e>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <xQueueReceive+0x72>
 800c63e:	2301      	movs	r3, #1
 800c640:	e000      	b.n	800c644 <xQueueReceive+0x74>
 800c642:	2300      	movs	r3, #0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10a      	bne.n	800c65e <xQueueReceive+0x8e>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	61bb      	str	r3, [r7, #24]
}
 800c65a:	bf00      	nop
 800c65c:	e7fe      	b.n	800c65c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c65e:	f001 fe21 	bl	800e2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c666:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d01f      	beq.n	800c6ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c66e:	68b9      	ldr	r1, [r7, #8]
 800c670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c672:	f000 f977 	bl	800c964 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	1e5a      	subs	r2, r3, #1
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00f      	beq.n	800c6a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c688:	3310      	adds	r3, #16
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fece 	bl	800d42c <xTaskRemoveFromEventList>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d007      	beq.n	800c6a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c696:	4b3d      	ldr	r3, [pc, #244]	; (800c78c <xQueueReceive+0x1bc>)
 800c698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6a6:	f001 fe2d 	bl	800e304 <vPortExitCritical>
				return pdPASS;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e069      	b.n	800c782 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d103      	bne.n	800c6bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6b4:	f001 fe26 	bl	800e304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e062      	b.n	800c782 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d106      	bne.n	800c6d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6c2:	f107 0310 	add.w	r3, r7, #16
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 ff3a 	bl	800d540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6d0:	f001 fe18 	bl	800e304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6d4:	f000 fc86 	bl	800cfe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6d8:	f001 fde4 	bl	800e2a4 <vPortEnterCritical>
 800c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6e2:	b25b      	sxtb	r3, r3
 800c6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6e8:	d103      	bne.n	800c6f2 <xQueueReceive+0x122>
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6f8:	b25b      	sxtb	r3, r3
 800c6fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6fe:	d103      	bne.n	800c708 <xQueueReceive+0x138>
 800c700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c708:	f001 fdfc 	bl	800e304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c70c:	1d3a      	adds	r2, r7, #4
 800c70e:	f107 0310 	add.w	r3, r7, #16
 800c712:	4611      	mov	r1, r2
 800c714:	4618      	mov	r0, r3
 800c716:	f000 ff29 	bl	800d56c <xTaskCheckForTimeOut>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d123      	bne.n	800c768 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c722:	f000 f997 	bl	800ca54 <prvIsQueueEmpty>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d017      	beq.n	800c75c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	3324      	adds	r3, #36	; 0x24
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	4611      	mov	r1, r2
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fe29 	bl	800d38c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c73c:	f000 f938 	bl	800c9b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c740:	f000 fc5e 	bl	800d000 <xTaskResumeAll>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d189      	bne.n	800c65e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c74a:	4b10      	ldr	r3, [pc, #64]	; (800c78c <xQueueReceive+0x1bc>)
 800c74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	e780      	b.n	800c65e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c75e:	f000 f927 	bl	800c9b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c762:	f000 fc4d 	bl	800d000 <xTaskResumeAll>
 800c766:	e77a      	b.n	800c65e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c76a:	f000 f921 	bl	800c9b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c76e:	f000 fc47 	bl	800d000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c774:	f000 f96e 	bl	800ca54 <prvIsQueueEmpty>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f43f af6f 	beq.w	800c65e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c782:	4618      	mov	r0, r3
 800c784:	3730      	adds	r7, #48	; 0x30
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	e000ed04 	.word	0xe000ed04

0800c790 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b08e      	sub	sp, #56	; 0x38
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	623b      	str	r3, [r7, #32]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d103      	bne.n	800c7ca <xQueueReceiveFromISR+0x3a>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <xQueueReceiveFromISR+0x3e>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e000      	b.n	800c7d0 <xQueueReceiveFromISR+0x40>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	61fb      	str	r3, [r7, #28]
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ea:	f001 fe3d 	bl	800e468 <vPortValidateInterruptPriority>
	__asm volatile
 800c7ee:	f3ef 8211 	mrs	r2, BASEPRI
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	61ba      	str	r2, [r7, #24]
 800c804:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c806:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	2b00      	cmp	r3, #0
 800c814:	d02f      	beq.n	800c876 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c824:	f000 f89e 	bl	800c964 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	1e5a      	subs	r2, r3, #1
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c838:	d112      	bne.n	800c860 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d016      	beq.n	800c870 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	3310      	adds	r3, #16
 800c846:	4618      	mov	r0, r3
 800c848:	f000 fdf0 	bl	800d42c <xTaskRemoveFromEventList>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00e      	beq.n	800c870 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e007      	b.n	800c870 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c864:	3301      	adds	r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	b25a      	sxtb	r2, r3
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c870:	2301      	movs	r3, #1
 800c872:	637b      	str	r3, [r7, #52]	; 0x34
 800c874:	e001      	b.n	800c87a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c876:	2300      	movs	r3, #0
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	f383 8811 	msr	BASEPRI, r3
}
 800c884:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3738      	adds	r7, #56	; 0x38
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c89c:	2300      	movs	r3, #0
 800c89e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10d      	bne.n	800c8ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d14d      	bne.n	800c952 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 ffb8 	bl	800d830 <xTaskPriorityDisinherit>
 800c8c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	609a      	str	r2, [r3, #8]
 800c8c8:	e043      	b.n	800c952 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d119      	bne.n	800c904 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6858      	ldr	r0, [r3, #4]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	461a      	mov	r2, r3
 800c8da:	68b9      	ldr	r1, [r7, #8]
 800c8dc:	f00b fd9a 	bl	8018414 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e8:	441a      	add	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d32b      	bcc.n	800c952 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	605a      	str	r2, [r3, #4]
 800c902:	e026      	b.n	800c952 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	68d8      	ldr	r0, [r3, #12]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90c:	461a      	mov	r2, r3
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	f00b fd80 	bl	8018414 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	425b      	negs	r3, r3
 800c91e:	441a      	add	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68da      	ldr	r2, [r3, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d207      	bcs.n	800c940 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c938:	425b      	negs	r3, r3
 800c93a:	441a      	add	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b02      	cmp	r3, #2
 800c944:	d105      	bne.n	800c952 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	3b01      	subs	r3, #1
 800c950:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c95a:	697b      	ldr	r3, [r7, #20]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c972:	2b00      	cmp	r3, #0
 800c974:	d018      	beq.n	800c9a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97e:	441a      	add	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d303      	bcc.n	800c998 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68d9      	ldr	r1, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	6838      	ldr	r0, [r7, #0]
 800c9a4:	f00b fd36 	bl	8018414 <memcpy>
	}
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9b8:	f001 fc74 	bl	800e2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9c4:	e011      	b.n	800c9ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d012      	beq.n	800c9f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3324      	adds	r3, #36	; 0x24
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fd2a 	bl	800d42c <xTaskRemoveFromEventList>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9de:	f000 fe27 	bl	800d630 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	dce9      	bgt.n	800c9c6 <prvUnlockQueue+0x16>
 800c9f2:	e000      	b.n	800c9f6 <prvUnlockQueue+0x46>
					break;
 800c9f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	22ff      	movs	r2, #255	; 0xff
 800c9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c9fe:	f001 fc81 	bl	800e304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca02:	f001 fc4f 	bl	800e2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca0e:	e011      	b.n	800ca34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d012      	beq.n	800ca3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	3310      	adds	r3, #16
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fd05 	bl	800d42c <xTaskRemoveFromEventList>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca28:	f000 fe02 	bl	800d630 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dce9      	bgt.n	800ca10 <prvUnlockQueue+0x60>
 800ca3c:	e000      	b.n	800ca40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	22ff      	movs	r2, #255	; 0xff
 800ca44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca48:	f001 fc5c 	bl	800e304 <vPortExitCritical>
}
 800ca4c:	bf00      	nop
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca5c:	f001 fc22 	bl	800e2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	e001      	b.n	800ca72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca72:	f001 fc47 	bl	800e304 <vPortExitCritical>

	return xReturn;
 800ca76:	68fb      	ldr	r3, [r7, #12]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca88:	f001 fc0c 	bl	800e2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d102      	bne.n	800ca9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	e001      	b.n	800caa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800caa2:	f001 fc2f 	bl	800e304 <vPortExitCritical>

	return xReturn;
 800caa6:	68fb      	ldr	r3, [r7, #12]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	e014      	b.n	800caea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cac0:	4a0f      	ldr	r2, [pc, #60]	; (800cb00 <vQueueAddToRegistry+0x50>)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10b      	bne.n	800cae4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cacc:	490c      	ldr	r1, [pc, #48]	; (800cb00 <vQueueAddToRegistry+0x50>)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cad6:	4a0a      	ldr	r2, [pc, #40]	; (800cb00 <vQueueAddToRegistry+0x50>)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	4413      	add	r3, r2
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cae2:	e006      	b.n	800caf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3301      	adds	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b07      	cmp	r3, #7
 800caee:	d9e7      	bls.n	800cac0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800caf0:	bf00      	nop
 800caf2:	bf00      	nop
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20004ef0 	.word	0x20004ef0

0800cb04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b086      	sub	sp, #24
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb14:	f001 fbc6 	bl	800e2a4 <vPortEnterCritical>
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb1e:	b25b      	sxtb	r3, r3
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb24:	d103      	bne.n	800cb2e <vQueueWaitForMessageRestricted+0x2a>
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb34:	b25b      	sxtb	r3, r3
 800cb36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb3a:	d103      	bne.n	800cb44 <vQueueWaitForMessageRestricted+0x40>
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb44:	f001 fbde 	bl	800e304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d106      	bne.n	800cb5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	3324      	adds	r3, #36	; 0x24
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	68b9      	ldr	r1, [r7, #8]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 fc3b 	bl	800d3d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb5e:	6978      	ldr	r0, [r7, #20]
 800cb60:	f7ff ff26 	bl	800c9b0 <prvUnlockQueue>
	}
 800cb64:	bf00      	nop
 800cb66:	3718      	adds	r7, #24
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b08e      	sub	sp, #56	; 0x38
 800cb70:	af04      	add	r7, sp, #16
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
 800cb78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10a      	bne.n	800cb96 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	623b      	str	r3, [r7, #32]
}
 800cb92:	bf00      	nop
 800cb94:	e7fe      	b.n	800cb94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	61fb      	str	r3, [r7, #28]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbb2:	235c      	movs	r3, #92	; 0x5c
 800cbb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	2b5c      	cmp	r3, #92	; 0x5c
 800cbba:	d00a      	beq.n	800cbd2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	61bb      	str	r3, [r7, #24]
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01e      	beq.n	800cc18 <xTaskCreateStatic+0xac>
 800cbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d01b      	beq.n	800cc18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	2202      	movs	r2, #2
 800cbee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	9303      	str	r3, [sp, #12]
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	f107 0314 	add.w	r3, r7, #20
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	68b9      	ldr	r1, [r7, #8]
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f000 f850 	bl	800ccb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc12:	f000 f8dd 	bl	800cdd0 <prvAddNewTaskToReadyList>
 800cc16:	e001      	b.n	800cc1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc1c:	697b      	ldr	r3, [r7, #20]
	}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3728      	adds	r7, #40	; 0x28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b08c      	sub	sp, #48	; 0x30
 800cc2a:	af04      	add	r7, sp, #16
 800cc2c:	60f8      	str	r0, [r7, #12]
 800cc2e:	60b9      	str	r1, [r7, #8]
 800cc30:	603b      	str	r3, [r7, #0]
 800cc32:	4613      	mov	r3, r2
 800cc34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc36:	88fb      	ldrh	r3, [r7, #6]
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f001 fc54 	bl	800e4e8 <pvPortMalloc>
 800cc40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00e      	beq.n	800cc66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc48:	205c      	movs	r0, #92	; 0x5c
 800cc4a:	f001 fc4d 	bl	800e4e8 <pvPortMalloc>
 800cc4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d003      	beq.n	800cc5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	697a      	ldr	r2, [r7, #20]
 800cc5a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc5c:	e005      	b.n	800cc6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc5e:	6978      	ldr	r0, [r7, #20]
 800cc60:	f001 fd0e 	bl	800e680 <vPortFree>
 800cc64:	e001      	b.n	800cc6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d017      	beq.n	800cca0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc78:	88fa      	ldrh	r2, [r7, #6]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	9303      	str	r3, [sp, #12]
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	9302      	str	r3, [sp, #8]
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	9301      	str	r3, [sp, #4]
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f000 f80e 	bl	800ccb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc94:	69f8      	ldr	r0, [r7, #28]
 800cc96:	f000 f89b 	bl	800cdd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	61bb      	str	r3, [r7, #24]
 800cc9e:	e002      	b.n	800cca6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cca4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cca6:	69bb      	ldr	r3, [r7, #24]
	}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3720      	adds	r7, #32
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b088      	sub	sp, #32
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
 800ccbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	21a5      	movs	r1, #165	; 0xa5
 800ccca:	f00b fadb 	bl	8018284 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f023 0307 	bic.w	r3, r3, #7
 800cce6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	f003 0307 	and.w	r3, r3, #7
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00a      	beq.n	800cd08 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	617b      	str	r3, [r7, #20]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d01f      	beq.n	800cd4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd0e:	2300      	movs	r3, #0
 800cd10:	61fb      	str	r3, [r7, #28]
 800cd12:	e012      	b.n	800cd3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	4413      	add	r3, r2
 800cd1a:	7819      	ldrb	r1, [r3, #0]
 800cd1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	4413      	add	r3, r2
 800cd22:	3334      	adds	r3, #52	; 0x34
 800cd24:	460a      	mov	r2, r1
 800cd26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd28:	68ba      	ldr	r2, [r7, #8]
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d006      	beq.n	800cd42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	3301      	adds	r3, #1
 800cd38:	61fb      	str	r3, [r7, #28]
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	2b0f      	cmp	r3, #15
 800cd3e:	d9e9      	bls.n	800cd14 <prvInitialiseNewTask+0x64>
 800cd40:	e000      	b.n	800cd44 <prvInitialiseNewTask+0x94>
			{
				break;
 800cd42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd4c:	e003      	b.n	800cd56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd58:	2b37      	cmp	r3, #55	; 0x37
 800cd5a:	d901      	bls.n	800cd60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd5c:	2337      	movs	r3, #55	; 0x37
 800cd5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	2200      	movs	r2, #0
 800cd70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	3304      	adds	r3, #4
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff f8be 	bl	800bef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	3318      	adds	r3, #24
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff f8b9 	bl	800bef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	2200      	movs	r2, #0
 800cda0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	68f9      	ldr	r1, [r7, #12]
 800cdae:	69b8      	ldr	r0, [r7, #24]
 800cdb0:	f001 f94e 	bl	800e050 <pxPortInitialiseStack>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdc6:	bf00      	nop
 800cdc8:	3720      	adds	r7, #32
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdd8:	f001 fa64 	bl	800e2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cddc:	4b2d      	ldr	r3, [pc, #180]	; (800ce94 <prvAddNewTaskToReadyList+0xc4>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3301      	adds	r3, #1
 800cde2:	4a2c      	ldr	r2, [pc, #176]	; (800ce94 <prvAddNewTaskToReadyList+0xc4>)
 800cde4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cde6:	4b2c      	ldr	r3, [pc, #176]	; (800ce98 <prvAddNewTaskToReadyList+0xc8>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d109      	bne.n	800ce02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdee:	4a2a      	ldr	r2, [pc, #168]	; (800ce98 <prvAddNewTaskToReadyList+0xc8>)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdf4:	4b27      	ldr	r3, [pc, #156]	; (800ce94 <prvAddNewTaskToReadyList+0xc4>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d110      	bne.n	800ce1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cdfc:	f000 fc3c 	bl	800d678 <prvInitialiseTaskLists>
 800ce00:	e00d      	b.n	800ce1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce02:	4b26      	ldr	r3, [pc, #152]	; (800ce9c <prvAddNewTaskToReadyList+0xcc>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d109      	bne.n	800ce1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce0a:	4b23      	ldr	r3, [pc, #140]	; (800ce98 <prvAddNewTaskToReadyList+0xc8>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d802      	bhi.n	800ce1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce18:	4a1f      	ldr	r2, [pc, #124]	; (800ce98 <prvAddNewTaskToReadyList+0xc8>)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce1e:	4b20      	ldr	r3, [pc, #128]	; (800cea0 <prvAddNewTaskToReadyList+0xd0>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	4a1e      	ldr	r2, [pc, #120]	; (800cea0 <prvAddNewTaskToReadyList+0xd0>)
 800ce26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce28:	4b1d      	ldr	r3, [pc, #116]	; (800cea0 <prvAddNewTaskToReadyList+0xd0>)
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce34:	4b1b      	ldr	r3, [pc, #108]	; (800cea4 <prvAddNewTaskToReadyList+0xd4>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d903      	bls.n	800ce44 <prvAddNewTaskToReadyList+0x74>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce40:	4a18      	ldr	r2, [pc, #96]	; (800cea4 <prvAddNewTaskToReadyList+0xd4>)
 800ce42:	6013      	str	r3, [r2, #0]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce48:	4613      	mov	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4a15      	ldr	r2, [pc, #84]	; (800cea8 <prvAddNewTaskToReadyList+0xd8>)
 800ce52:	441a      	add	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3304      	adds	r3, #4
 800ce58:	4619      	mov	r1, r3
 800ce5a:	4610      	mov	r0, r2
 800ce5c:	f7ff f859 	bl	800bf12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce60:	f001 fa50 	bl	800e304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce64:	4b0d      	ldr	r3, [pc, #52]	; (800ce9c <prvAddNewTaskToReadyList+0xcc>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00e      	beq.n	800ce8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce6c:	4b0a      	ldr	r3, [pc, #40]	; (800ce98 <prvAddNewTaskToReadyList+0xc8>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d207      	bcs.n	800ce8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce7a:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <prvAddNewTaskToReadyList+0xdc>)
 800ce7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce8a:	bf00      	nop
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	20005404 	.word	0x20005404
 800ce98:	20004f30 	.word	0x20004f30
 800ce9c:	20005410 	.word	0x20005410
 800cea0:	20005420 	.word	0x20005420
 800cea4:	2000540c 	.word	0x2000540c
 800cea8:	20004f34 	.word	0x20004f34
 800ceac:	e000ed04 	.word	0xe000ed04

0800ceb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d017      	beq.n	800cef2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cec2:	4b13      	ldr	r3, [pc, #76]	; (800cf10 <vTaskDelay+0x60>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <vTaskDelay+0x30>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	60bb      	str	r3, [r7, #8]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cee0:	f000 f880 	bl	800cfe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cee4:	2100      	movs	r1, #0
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fd10 	bl	800d90c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ceec:	f000 f888 	bl	800d000 <xTaskResumeAll>
 800cef0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d107      	bne.n	800cf08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <vTaskDelay+0x64>)
 800cefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf08:	bf00      	nop
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	2000542c 	.word	0x2000542c
 800cf14:	e000ed04 	.word	0xe000ed04

0800cf18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08a      	sub	sp, #40	; 0x28
 800cf1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf22:	2300      	movs	r3, #0
 800cf24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf26:	463a      	mov	r2, r7
 800cf28:	1d39      	adds	r1, r7, #4
 800cf2a:	f107 0308 	add.w	r3, r7, #8
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe ff8e 	bl	800be50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	9202      	str	r2, [sp, #8]
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	2300      	movs	r3, #0
 800cf44:	460a      	mov	r2, r1
 800cf46:	4921      	ldr	r1, [pc, #132]	; (800cfcc <vTaskStartScheduler+0xb4>)
 800cf48:	4821      	ldr	r0, [pc, #132]	; (800cfd0 <vTaskStartScheduler+0xb8>)
 800cf4a:	f7ff fe0f 	bl	800cb6c <xTaskCreateStatic>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	4a20      	ldr	r2, [pc, #128]	; (800cfd4 <vTaskStartScheduler+0xbc>)
 800cf52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf54:	4b1f      	ldr	r3, [pc, #124]	; (800cfd4 <vTaskStartScheduler+0xbc>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	617b      	str	r3, [r7, #20]
 800cf60:	e001      	b.n	800cf66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d102      	bne.n	800cf72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf6c:	f000 fd22 	bl	800d9b4 <xTimerCreateTimerTask>
 800cf70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d116      	bne.n	800cfa6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	613b      	str	r3, [r7, #16]
}
 800cf8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf8c:	4b12      	ldr	r3, [pc, #72]	; (800cfd8 <vTaskStartScheduler+0xc0>)
 800cf8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf94:	4b11      	ldr	r3, [pc, #68]	; (800cfdc <vTaskStartScheduler+0xc4>)
 800cf96:	2201      	movs	r2, #1
 800cf98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf9a:	4b11      	ldr	r3, [pc, #68]	; (800cfe0 <vTaskStartScheduler+0xc8>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfa0:	f001 f8de 	bl	800e160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfa4:	e00e      	b.n	800cfc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfac:	d10a      	bne.n	800cfc4 <vTaskStartScheduler+0xac>
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	60fb      	str	r3, [r7, #12]
}
 800cfc0:	bf00      	nop
 800cfc2:	e7fe      	b.n	800cfc2 <vTaskStartScheduler+0xaa>
}
 800cfc4:	bf00      	nop
 800cfc6:	3718      	adds	r7, #24
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	080192a4 	.word	0x080192a4
 800cfd0:	0800d649 	.word	0x0800d649
 800cfd4:	20005428 	.word	0x20005428
 800cfd8:	20005424 	.word	0x20005424
 800cfdc:	20005410 	.word	0x20005410
 800cfe0:	20005408 	.word	0x20005408

0800cfe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cfe8:	4b04      	ldr	r3, [pc, #16]	; (800cffc <vTaskSuspendAll+0x18>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3301      	adds	r3, #1
 800cfee:	4a03      	ldr	r2, [pc, #12]	; (800cffc <vTaskSuspendAll+0x18>)
 800cff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cff2:	bf00      	nop
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	2000542c 	.word	0x2000542c

0800d000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d006:	2300      	movs	r3, #0
 800d008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d00a:	2300      	movs	r3, #0
 800d00c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d00e:	4b42      	ldr	r3, [pc, #264]	; (800d118 <xTaskResumeAll+0x118>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10a      	bne.n	800d02c <xTaskResumeAll+0x2c>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	603b      	str	r3, [r7, #0]
}
 800d028:	bf00      	nop
 800d02a:	e7fe      	b.n	800d02a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d02c:	f001 f93a 	bl	800e2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d030:	4b39      	ldr	r3, [pc, #228]	; (800d118 <xTaskResumeAll+0x118>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3b01      	subs	r3, #1
 800d036:	4a38      	ldr	r2, [pc, #224]	; (800d118 <xTaskResumeAll+0x118>)
 800d038:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d03a:	4b37      	ldr	r3, [pc, #220]	; (800d118 <xTaskResumeAll+0x118>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d162      	bne.n	800d108 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d042:	4b36      	ldr	r3, [pc, #216]	; (800d11c <xTaskResumeAll+0x11c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d05e      	beq.n	800d108 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d04a:	e02f      	b.n	800d0ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d04c:	4b34      	ldr	r3, [pc, #208]	; (800d120 <xTaskResumeAll+0x120>)
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3318      	adds	r3, #24
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe ffb7 	bl	800bfcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3304      	adds	r3, #4
 800d062:	4618      	mov	r0, r3
 800d064:	f7fe ffb2 	bl	800bfcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06c:	4b2d      	ldr	r3, [pc, #180]	; (800d124 <xTaskResumeAll+0x124>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	429a      	cmp	r2, r3
 800d072:	d903      	bls.n	800d07c <xTaskResumeAll+0x7c>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d078:	4a2a      	ldr	r2, [pc, #168]	; (800d124 <xTaskResumeAll+0x124>)
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d080:	4613      	mov	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	4413      	add	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4a27      	ldr	r2, [pc, #156]	; (800d128 <xTaskResumeAll+0x128>)
 800d08a:	441a      	add	r2, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	3304      	adds	r3, #4
 800d090:	4619      	mov	r1, r3
 800d092:	4610      	mov	r0, r2
 800d094:	f7fe ff3d 	bl	800bf12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09c:	4b23      	ldr	r3, [pc, #140]	; (800d12c <xTaskResumeAll+0x12c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d302      	bcc.n	800d0ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d0a6:	4b22      	ldr	r3, [pc, #136]	; (800d130 <xTaskResumeAll+0x130>)
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0ac:	4b1c      	ldr	r3, [pc, #112]	; (800d120 <xTaskResumeAll+0x120>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1cb      	bne.n	800d04c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d001      	beq.n	800d0be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0ba:	f000 fb7b 	bl	800d7b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0be:	4b1d      	ldr	r3, [pc, #116]	; (800d134 <xTaskResumeAll+0x134>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d010      	beq.n	800d0ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0ca:	f000 f847 	bl	800d15c <xTaskIncrementTick>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d0d4:	4b16      	ldr	r3, [pc, #88]	; (800d130 <xTaskResumeAll+0x130>)
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1f1      	bne.n	800d0ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d0e6:	4b13      	ldr	r3, [pc, #76]	; (800d134 <xTaskResumeAll+0x134>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0ec:	4b10      	ldr	r3, [pc, #64]	; (800d130 <xTaskResumeAll+0x130>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d009      	beq.n	800d108 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0f8:	4b0f      	ldr	r3, [pc, #60]	; (800d138 <xTaskResumeAll+0x138>)
 800d0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d108:	f001 f8fc 	bl	800e304 <vPortExitCritical>

	return xAlreadyYielded;
 800d10c:	68bb      	ldr	r3, [r7, #8]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	2000542c 	.word	0x2000542c
 800d11c:	20005404 	.word	0x20005404
 800d120:	200053c4 	.word	0x200053c4
 800d124:	2000540c 	.word	0x2000540c
 800d128:	20004f34 	.word	0x20004f34
 800d12c:	20004f30 	.word	0x20004f30
 800d130:	20005418 	.word	0x20005418
 800d134:	20005414 	.word	0x20005414
 800d138:	e000ed04 	.word	0xe000ed04

0800d13c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d142:	4b05      	ldr	r3, [pc, #20]	; (800d158 <xTaskGetTickCount+0x1c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d148:	687b      	ldr	r3, [r7, #4]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	370c      	adds	r7, #12
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	20005408 	.word	0x20005408

0800d15c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d166:	4b4f      	ldr	r3, [pc, #316]	; (800d2a4 <xTaskIncrementTick+0x148>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f040 808f 	bne.w	800d28e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d170:	4b4d      	ldr	r3, [pc, #308]	; (800d2a8 <xTaskIncrementTick+0x14c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3301      	adds	r3, #1
 800d176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d178:	4a4b      	ldr	r2, [pc, #300]	; (800d2a8 <xTaskIncrementTick+0x14c>)
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d120      	bne.n	800d1c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d184:	4b49      	ldr	r3, [pc, #292]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00a      	beq.n	800d1a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	603b      	str	r3, [r7, #0]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <xTaskIncrementTick+0x46>
 800d1a4:	4b41      	ldr	r3, [pc, #260]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	60fb      	str	r3, [r7, #12]
 800d1aa:	4b41      	ldr	r3, [pc, #260]	; (800d2b0 <xTaskIncrementTick+0x154>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a3f      	ldr	r2, [pc, #252]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	4a3f      	ldr	r2, [pc, #252]	; (800d2b0 <xTaskIncrementTick+0x154>)
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	4b3e      	ldr	r3, [pc, #248]	; (800d2b4 <xTaskIncrementTick+0x158>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	4a3d      	ldr	r2, [pc, #244]	; (800d2b4 <xTaskIncrementTick+0x158>)
 800d1c0:	6013      	str	r3, [r2, #0]
 800d1c2:	f000 faf7 	bl	800d7b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1c6:	4b3c      	ldr	r3, [pc, #240]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d349      	bcc.n	800d264 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1d0:	4b36      	ldr	r3, [pc, #216]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d104      	bne.n	800d1e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1da:	4b37      	ldr	r3, [pc, #220]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d1dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1e0:	601a      	str	r2, [r3, #0]
					break;
 800d1e2:	e03f      	b.n	800d264 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e4:	4b31      	ldr	r3, [pc, #196]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1f4:	693a      	ldr	r2, [r7, #16]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d203      	bcs.n	800d204 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1fc:	4a2e      	ldr	r2, [pc, #184]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d202:	e02f      	b.n	800d264 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	3304      	adds	r3, #4
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fe fedf 	bl	800bfcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d212:	2b00      	cmp	r3, #0
 800d214:	d004      	beq.n	800d220 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	3318      	adds	r3, #24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fed6 	bl	800bfcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d224:	4b25      	ldr	r3, [pc, #148]	; (800d2bc <xTaskIncrementTick+0x160>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d903      	bls.n	800d234 <xTaskIncrementTick+0xd8>
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d230:	4a22      	ldr	r2, [pc, #136]	; (800d2bc <xTaskIncrementTick+0x160>)
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d238:	4613      	mov	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4a1f      	ldr	r2, [pc, #124]	; (800d2c0 <xTaskIncrementTick+0x164>)
 800d242:	441a      	add	r2, r3
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	3304      	adds	r3, #4
 800d248:	4619      	mov	r1, r3
 800d24a:	4610      	mov	r0, r2
 800d24c:	f7fe fe61 	bl	800bf12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d254:	4b1b      	ldr	r3, [pc, #108]	; (800d2c4 <xTaskIncrementTick+0x168>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d3b8      	bcc.n	800d1d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d25e:	2301      	movs	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d262:	e7b5      	b.n	800d1d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d264:	4b17      	ldr	r3, [pc, #92]	; (800d2c4 <xTaskIncrementTick+0x168>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26a:	4915      	ldr	r1, [pc, #84]	; (800d2c0 <xTaskIncrementTick+0x164>)
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	440b      	add	r3, r1
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d901      	bls.n	800d280 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d27c:	2301      	movs	r3, #1
 800d27e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d280:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <xTaskIncrementTick+0x16c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d007      	beq.n	800d298 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d288:	2301      	movs	r3, #1
 800d28a:	617b      	str	r3, [r7, #20]
 800d28c:	e004      	b.n	800d298 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d28e:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <xTaskIncrementTick+0x170>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3301      	adds	r3, #1
 800d294:	4a0d      	ldr	r2, [pc, #52]	; (800d2cc <xTaskIncrementTick+0x170>)
 800d296:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d298:	697b      	ldr	r3, [r7, #20]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3718      	adds	r7, #24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	2000542c 	.word	0x2000542c
 800d2a8:	20005408 	.word	0x20005408
 800d2ac:	200053bc 	.word	0x200053bc
 800d2b0:	200053c0 	.word	0x200053c0
 800d2b4:	2000541c 	.word	0x2000541c
 800d2b8:	20005424 	.word	0x20005424
 800d2bc:	2000540c 	.word	0x2000540c
 800d2c0:	20004f34 	.word	0x20004f34
 800d2c4:	20004f30 	.word	0x20004f30
 800d2c8:	20005418 	.word	0x20005418
 800d2cc:	20005414 	.word	0x20005414

0800d2d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2d6:	4b28      	ldr	r3, [pc, #160]	; (800d378 <vTaskSwitchContext+0xa8>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d003      	beq.n	800d2e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2de:	4b27      	ldr	r3, [pc, #156]	; (800d37c <vTaskSwitchContext+0xac>)
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2e4:	e041      	b.n	800d36a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d2e6:	4b25      	ldr	r3, [pc, #148]	; (800d37c <vTaskSwitchContext+0xac>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ec:	4b24      	ldr	r3, [pc, #144]	; (800d380 <vTaskSwitchContext+0xb0>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	60fb      	str	r3, [r7, #12]
 800d2f2:	e010      	b.n	800d316 <vTaskSwitchContext+0x46>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10a      	bne.n	800d310 <vTaskSwitchContext+0x40>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	607b      	str	r3, [r7, #4]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <vTaskSwitchContext+0x3e>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3b01      	subs	r3, #1
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	491b      	ldr	r1, [pc, #108]	; (800d384 <vTaskSwitchContext+0xb4>)
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	440b      	add	r3, r1
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0e4      	beq.n	800d2f4 <vTaskSwitchContext+0x24>
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4613      	mov	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4a13      	ldr	r2, [pc, #76]	; (800d384 <vTaskSwitchContext+0xb4>)
 800d336:	4413      	add	r3, r2
 800d338:	60bb      	str	r3, [r7, #8]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	605a      	str	r2, [r3, #4]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	685a      	ldr	r2, [r3, #4]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	3308      	adds	r3, #8
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d104      	bne.n	800d35a <vTaskSwitchContext+0x8a>
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	685a      	ldr	r2, [r3, #4]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	605a      	str	r2, [r3, #4]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	4a09      	ldr	r2, [pc, #36]	; (800d388 <vTaskSwitchContext+0xb8>)
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	4a06      	ldr	r2, [pc, #24]	; (800d380 <vTaskSwitchContext+0xb0>)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6013      	str	r3, [r2, #0]
}
 800d36a:	bf00      	nop
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	2000542c 	.word	0x2000542c
 800d37c:	20005418 	.word	0x20005418
 800d380:	2000540c 	.word	0x2000540c
 800d384:	20004f34 	.word	0x20004f34
 800d388:	20004f30 	.word	0x20004f30

0800d38c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10a      	bne.n	800d3b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	60fb      	str	r3, [r7, #12]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3b2:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <vTaskPlaceOnEventList+0x44>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3318      	adds	r3, #24
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7fe fdcd 	bl	800bf5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	6838      	ldr	r0, [r7, #0]
 800d3c4:	f000 faa2 	bl	800d90c <prvAddCurrentTaskToDelayedList>
}
 800d3c8:	bf00      	nop
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	20004f30 	.word	0x20004f30

0800d3d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10a      	bne.n	800d3fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ea:	f383 8811 	msr	BASEPRI, r3
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	617b      	str	r3, [r7, #20]
}
 800d3f8:	bf00      	nop
 800d3fa:	e7fe      	b.n	800d3fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3fc:	4b0a      	ldr	r3, [pc, #40]	; (800d428 <vTaskPlaceOnEventListRestricted+0x54>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3318      	adds	r3, #24
 800d402:	4619      	mov	r1, r3
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7fe fd84 	bl	800bf12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d414:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d416:	6879      	ldr	r1, [r7, #4]
 800d418:	68b8      	ldr	r0, [r7, #8]
 800d41a:	f000 fa77 	bl	800d90c <prvAddCurrentTaskToDelayedList>
	}
 800d41e:	bf00      	nop
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20004f30 	.word	0x20004f30

0800d42c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10a      	bne.n	800d458 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	60fb      	str	r3, [r7, #12]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	3318      	adds	r3, #24
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fe fdb5 	bl	800bfcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d462:	4b1e      	ldr	r3, [pc, #120]	; (800d4dc <xTaskRemoveFromEventList+0xb0>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d11d      	bne.n	800d4a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	3304      	adds	r3, #4
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fe fdac 	bl	800bfcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d478:	4b19      	ldr	r3, [pc, #100]	; (800d4e0 <xTaskRemoveFromEventList+0xb4>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d903      	bls.n	800d488 <xTaskRemoveFromEventList+0x5c>
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d484:	4a16      	ldr	r2, [pc, #88]	; (800d4e0 <xTaskRemoveFromEventList+0xb4>)
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d48c:	4613      	mov	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4a13      	ldr	r2, [pc, #76]	; (800d4e4 <xTaskRemoveFromEventList+0xb8>)
 800d496:	441a      	add	r2, r3
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	3304      	adds	r3, #4
 800d49c:	4619      	mov	r1, r3
 800d49e:	4610      	mov	r0, r2
 800d4a0:	f7fe fd37 	bl	800bf12 <vListInsertEnd>
 800d4a4:	e005      	b.n	800d4b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	3318      	adds	r3, #24
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	480e      	ldr	r0, [pc, #56]	; (800d4e8 <xTaskRemoveFromEventList+0xbc>)
 800d4ae:	f7fe fd30 	bl	800bf12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b6:	4b0d      	ldr	r3, [pc, #52]	; (800d4ec <xTaskRemoveFromEventList+0xc0>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d905      	bls.n	800d4cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4c4:	4b0a      	ldr	r3, [pc, #40]	; (800d4f0 <xTaskRemoveFromEventList+0xc4>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	601a      	str	r2, [r3, #0]
 800d4ca:	e001      	b.n	800d4d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4d0:	697b      	ldr	r3, [r7, #20]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2000542c 	.word	0x2000542c
 800d4e0:	2000540c 	.word	0x2000540c
 800d4e4:	20004f34 	.word	0x20004f34
 800d4e8:	200053c4 	.word	0x200053c4
 800d4ec:	20004f30 	.word	0x20004f30
 800d4f0:	20005418 	.word	0x20005418

0800d4f4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	60fb      	str	r3, [r7, #12]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d518:	f000 fec4 	bl	800e2a4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d51c:	4b06      	ldr	r3, [pc, #24]	; (800d538 <vTaskSetTimeOutState+0x44>)
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d524:	4b05      	ldr	r3, [pc, #20]	; (800d53c <vTaskSetTimeOutState+0x48>)
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d52c:	f000 feea 	bl	800e304 <vPortExitCritical>
}
 800d530:	bf00      	nop
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	2000541c 	.word	0x2000541c
 800d53c:	20005408 	.word	0x20005408

0800d540 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d548:	4b06      	ldr	r3, [pc, #24]	; (800d564 <vTaskInternalSetTimeOutState+0x24>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <vTaskInternalSetTimeOutState+0x28>)
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	605a      	str	r2, [r3, #4]
}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	2000541c 	.word	0x2000541c
 800d568:	20005408 	.word	0x20005408

0800d56c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10a      	bne.n	800d592 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d580:	f383 8811 	msr	BASEPRI, r3
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	613b      	str	r3, [r7, #16]
}
 800d58e:	bf00      	nop
 800d590:	e7fe      	b.n	800d590 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10a      	bne.n	800d5ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	60fb      	str	r3, [r7, #12]
}
 800d5aa:	bf00      	nop
 800d5ac:	e7fe      	b.n	800d5ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d5ae:	f000 fe79 	bl	800e2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5b2:	4b1d      	ldr	r3, [pc, #116]	; (800d628 <xTaskCheckForTimeOut+0xbc>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	69ba      	ldr	r2, [r7, #24]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5ca:	d102      	bne.n	800d5d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	61fb      	str	r3, [r7, #28]
 800d5d0:	e023      	b.n	800d61a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	4b15      	ldr	r3, [pc, #84]	; (800d62c <xTaskCheckForTimeOut+0xc0>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d007      	beq.n	800d5ee <xTaskCheckForTimeOut+0x82>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	69ba      	ldr	r2, [r7, #24]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d302      	bcc.n	800d5ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	61fb      	str	r3, [r7, #28]
 800d5ec:	e015      	b.n	800d61a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	697a      	ldr	r2, [r7, #20]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d20b      	bcs.n	800d610 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	1ad2      	subs	r2, r2, r3
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ff9b 	bl	800d540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	61fb      	str	r3, [r7, #28]
 800d60e:	e004      	b.n	800d61a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	2200      	movs	r2, #0
 800d614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d616:	2301      	movs	r3, #1
 800d618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d61a:	f000 fe73 	bl	800e304 <vPortExitCritical>

	return xReturn;
 800d61e:	69fb      	ldr	r3, [r7, #28]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3720      	adds	r7, #32
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20005408 	.word	0x20005408
 800d62c:	2000541c 	.word	0x2000541c

0800d630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d630:	b480      	push	{r7}
 800d632:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d634:	4b03      	ldr	r3, [pc, #12]	; (800d644 <vTaskMissedYield+0x14>)
 800d636:	2201      	movs	r2, #1
 800d638:	601a      	str	r2, [r3, #0]
}
 800d63a:	bf00      	nop
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr
 800d644:	20005418 	.word	0x20005418

0800d648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d650:	f000 f852 	bl	800d6f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d654:	4b06      	ldr	r3, [pc, #24]	; (800d670 <prvIdleTask+0x28>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d9f9      	bls.n	800d650 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d65c:	4b05      	ldr	r3, [pc, #20]	; (800d674 <prvIdleTask+0x2c>)
 800d65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d66c:	e7f0      	b.n	800d650 <prvIdleTask+0x8>
 800d66e:	bf00      	nop
 800d670:	20004f34 	.word	0x20004f34
 800d674:	e000ed04 	.word	0xe000ed04

0800d678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d67e:	2300      	movs	r3, #0
 800d680:	607b      	str	r3, [r7, #4]
 800d682:	e00c      	b.n	800d69e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	4613      	mov	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4413      	add	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4a12      	ldr	r2, [pc, #72]	; (800d6d8 <prvInitialiseTaskLists+0x60>)
 800d690:	4413      	add	r3, r2
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe fc10 	bl	800beb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	3301      	adds	r3, #1
 800d69c:	607b      	str	r3, [r7, #4]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b37      	cmp	r3, #55	; 0x37
 800d6a2:	d9ef      	bls.n	800d684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6a4:	480d      	ldr	r0, [pc, #52]	; (800d6dc <prvInitialiseTaskLists+0x64>)
 800d6a6:	f7fe fc07 	bl	800beb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6aa:	480d      	ldr	r0, [pc, #52]	; (800d6e0 <prvInitialiseTaskLists+0x68>)
 800d6ac:	f7fe fc04 	bl	800beb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6b0:	480c      	ldr	r0, [pc, #48]	; (800d6e4 <prvInitialiseTaskLists+0x6c>)
 800d6b2:	f7fe fc01 	bl	800beb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6b6:	480c      	ldr	r0, [pc, #48]	; (800d6e8 <prvInitialiseTaskLists+0x70>)
 800d6b8:	f7fe fbfe 	bl	800beb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6bc:	480b      	ldr	r0, [pc, #44]	; (800d6ec <prvInitialiseTaskLists+0x74>)
 800d6be:	f7fe fbfb 	bl	800beb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6c2:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <prvInitialiseTaskLists+0x78>)
 800d6c4:	4a05      	ldr	r2, [pc, #20]	; (800d6dc <prvInitialiseTaskLists+0x64>)
 800d6c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6c8:	4b0a      	ldr	r3, [pc, #40]	; (800d6f4 <prvInitialiseTaskLists+0x7c>)
 800d6ca:	4a05      	ldr	r2, [pc, #20]	; (800d6e0 <prvInitialiseTaskLists+0x68>)
 800d6cc:	601a      	str	r2, [r3, #0]
}
 800d6ce:	bf00      	nop
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20004f34 	.word	0x20004f34
 800d6dc:	20005394 	.word	0x20005394
 800d6e0:	200053a8 	.word	0x200053a8
 800d6e4:	200053c4 	.word	0x200053c4
 800d6e8:	200053d8 	.word	0x200053d8
 800d6ec:	200053f0 	.word	0x200053f0
 800d6f0:	200053bc 	.word	0x200053bc
 800d6f4:	200053c0 	.word	0x200053c0

0800d6f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6fe:	e019      	b.n	800d734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d700:	f000 fdd0 	bl	800e2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d704:	4b10      	ldr	r3, [pc, #64]	; (800d748 <prvCheckTasksWaitingTermination+0x50>)
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	3304      	adds	r3, #4
 800d710:	4618      	mov	r0, r3
 800d712:	f7fe fc5b 	bl	800bfcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d716:	4b0d      	ldr	r3, [pc, #52]	; (800d74c <prvCheckTasksWaitingTermination+0x54>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	4a0b      	ldr	r2, [pc, #44]	; (800d74c <prvCheckTasksWaitingTermination+0x54>)
 800d71e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <prvCheckTasksWaitingTermination+0x58>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3b01      	subs	r3, #1
 800d726:	4a0a      	ldr	r2, [pc, #40]	; (800d750 <prvCheckTasksWaitingTermination+0x58>)
 800d728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d72a:	f000 fdeb 	bl	800e304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f810 	bl	800d754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d734:	4b06      	ldr	r3, [pc, #24]	; (800d750 <prvCheckTasksWaitingTermination+0x58>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e1      	bne.n	800d700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d73c:	bf00      	nop
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	200053d8 	.word	0x200053d8
 800d74c:	20005404 	.word	0x20005404
 800d750:	200053ec 	.word	0x200053ec

0800d754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d762:	2b00      	cmp	r3, #0
 800d764:	d108      	bne.n	800d778 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 ff88 	bl	800e680 <vPortFree>
				vPortFree( pxTCB );
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 ff85 	bl	800e680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d776:	e018      	b.n	800d7aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d103      	bne.n	800d78a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 ff7c 	bl	800e680 <vPortFree>
	}
 800d788:	e00f      	b.n	800d7aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d790:	2b02      	cmp	r3, #2
 800d792:	d00a      	beq.n	800d7aa <prvDeleteTCB+0x56>
	__asm volatile
 800d794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	60fb      	str	r3, [r7, #12]
}
 800d7a6:	bf00      	nop
 800d7a8:	e7fe      	b.n	800d7a8 <prvDeleteTCB+0x54>
	}
 800d7aa:	bf00      	nop
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7ba:	4b0c      	ldr	r3, [pc, #48]	; (800d7ec <prvResetNextTaskUnblockTime+0x38>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d104      	bne.n	800d7ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7c4:	4b0a      	ldr	r3, [pc, #40]	; (800d7f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d7c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7cc:	e008      	b.n	800d7e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ce:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <prvResetNextTaskUnblockTime+0x38>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4a04      	ldr	r2, [pc, #16]	; (800d7f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d7de:	6013      	str	r3, [r2, #0]
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	200053bc 	.word	0x200053bc
 800d7f0:	20005424 	.word	0x20005424

0800d7f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <xTaskGetSchedulerState+0x34>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d802:	2301      	movs	r3, #1
 800d804:	607b      	str	r3, [r7, #4]
 800d806:	e008      	b.n	800d81a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d808:	4b08      	ldr	r3, [pc, #32]	; (800d82c <xTaskGetSchedulerState+0x38>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d102      	bne.n	800d816 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d810:	2302      	movs	r3, #2
 800d812:	607b      	str	r3, [r7, #4]
 800d814:	e001      	b.n	800d81a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d816:	2300      	movs	r3, #0
 800d818:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d81a:	687b      	ldr	r3, [r7, #4]
	}
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	20005410 	.word	0x20005410
 800d82c:	2000542c 	.word	0x2000542c

0800d830 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d83c:	2300      	movs	r3, #0
 800d83e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d056      	beq.n	800d8f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d846:	4b2e      	ldr	r3, [pc, #184]	; (800d900 <xTaskPriorityDisinherit+0xd0>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d00a      	beq.n	800d866 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	60fb      	str	r3, [r7, #12]
}
 800d862:	bf00      	nop
 800d864:	e7fe      	b.n	800d864 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60bb      	str	r3, [r7, #8]
}
 800d880:	bf00      	nop
 800d882:	e7fe      	b.n	800d882 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d888:	1e5a      	subs	r2, r3, #1
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d896:	429a      	cmp	r2, r3
 800d898:	d02c      	beq.n	800d8f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d128      	bne.n	800d8f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe fb90 	bl	800bfcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c4:	4b0f      	ldr	r3, [pc, #60]	; (800d904 <xTaskPriorityDisinherit+0xd4>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d903      	bls.n	800d8d4 <xTaskPriorityDisinherit+0xa4>
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d0:	4a0c      	ldr	r2, [pc, #48]	; (800d904 <xTaskPriorityDisinherit+0xd4>)
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4a09      	ldr	r2, [pc, #36]	; (800d908 <xTaskPriorityDisinherit+0xd8>)
 800d8e2:	441a      	add	r2, r3
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fe fb11 	bl	800bf12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8f4:	697b      	ldr	r3, [r7, #20]
	}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20004f30 	.word	0x20004f30
 800d904:	2000540c 	.word	0x2000540c
 800d908:	20004f34 	.word	0x20004f34

0800d90c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d916:	4b21      	ldr	r3, [pc, #132]	; (800d99c <prvAddCurrentTaskToDelayedList+0x90>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d91c:	4b20      	ldr	r3, [pc, #128]	; (800d9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	3304      	adds	r3, #4
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe fb52 	bl	800bfcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d92e:	d10a      	bne.n	800d946 <prvAddCurrentTaskToDelayedList+0x3a>
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d007      	beq.n	800d946 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d936:	4b1a      	ldr	r3, [pc, #104]	; (800d9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3304      	adds	r3, #4
 800d93c:	4619      	mov	r1, r3
 800d93e:	4819      	ldr	r0, [pc, #100]	; (800d9a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d940:	f7fe fae7 	bl	800bf12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d944:	e026      	b.n	800d994 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4413      	add	r3, r2
 800d94c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d94e:	4b14      	ldr	r3, [pc, #80]	; (800d9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d209      	bcs.n	800d972 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d95e:	4b12      	ldr	r3, [pc, #72]	; (800d9a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	4b0f      	ldr	r3, [pc, #60]	; (800d9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3304      	adds	r3, #4
 800d968:	4619      	mov	r1, r3
 800d96a:	4610      	mov	r0, r2
 800d96c:	f7fe faf5 	bl	800bf5a <vListInsert>
}
 800d970:	e010      	b.n	800d994 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d972:	4b0e      	ldr	r3, [pc, #56]	; (800d9ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	4b0a      	ldr	r3, [pc, #40]	; (800d9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3304      	adds	r3, #4
 800d97c:	4619      	mov	r1, r3
 800d97e:	4610      	mov	r0, r2
 800d980:	f7fe faeb 	bl	800bf5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d984:	4b0a      	ldr	r3, [pc, #40]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d202      	bcs.n	800d994 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d98e:	4a08      	ldr	r2, [pc, #32]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	6013      	str	r3, [r2, #0]
}
 800d994:	bf00      	nop
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	20005408 	.word	0x20005408
 800d9a0:	20004f30 	.word	0x20004f30
 800d9a4:	200053f0 	.word	0x200053f0
 800d9a8:	200053c0 	.word	0x200053c0
 800d9ac:	200053bc 	.word	0x200053bc
 800d9b0:	20005424 	.word	0x20005424

0800d9b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08a      	sub	sp, #40	; 0x28
 800d9b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d9be:	f000 fb07 	bl	800dfd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d9c2:	4b1c      	ldr	r3, [pc, #112]	; (800da34 <xTimerCreateTimerTask+0x80>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d021      	beq.n	800da0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9d2:	1d3a      	adds	r2, r7, #4
 800d9d4:	f107 0108 	add.w	r1, r7, #8
 800d9d8:	f107 030c 	add.w	r3, r7, #12
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fe fa51 	bl	800be84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	9202      	str	r2, [sp, #8]
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	2302      	movs	r3, #2
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	460a      	mov	r2, r1
 800d9f4:	4910      	ldr	r1, [pc, #64]	; (800da38 <xTimerCreateTimerTask+0x84>)
 800d9f6:	4811      	ldr	r0, [pc, #68]	; (800da3c <xTimerCreateTimerTask+0x88>)
 800d9f8:	f7ff f8b8 	bl	800cb6c <xTaskCreateStatic>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	4a10      	ldr	r2, [pc, #64]	; (800da40 <xTimerCreateTimerTask+0x8c>)
 800da00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da02:	4b0f      	ldr	r3, [pc, #60]	; (800da40 <xTimerCreateTimerTask+0x8c>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d001      	beq.n	800da0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da0a:	2301      	movs	r3, #1
 800da0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10a      	bne.n	800da2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	613b      	str	r3, [r7, #16]
}
 800da26:	bf00      	nop
 800da28:	e7fe      	b.n	800da28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da2a:	697b      	ldr	r3, [r7, #20]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3718      	adds	r7, #24
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	20005460 	.word	0x20005460
 800da38:	080192ac 	.word	0x080192ac
 800da3c:	0800db79 	.word	0x0800db79
 800da40:	20005464 	.word	0x20005464

0800da44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b08a      	sub	sp, #40	; 0x28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da52:	2300      	movs	r3, #0
 800da54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <xTimerGenericCommand+0x2e>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	623b      	str	r3, [r7, #32]
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da72:	4b1a      	ldr	r3, [pc, #104]	; (800dadc <xTimerGenericCommand+0x98>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d02a      	beq.n	800dad0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b05      	cmp	r3, #5
 800da8a:	dc18      	bgt.n	800dabe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da8c:	f7ff feb2 	bl	800d7f4 <xTaskGetSchedulerState>
 800da90:	4603      	mov	r3, r0
 800da92:	2b02      	cmp	r3, #2
 800da94:	d109      	bne.n	800daaa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da96:	4b11      	ldr	r3, [pc, #68]	; (800dadc <xTimerGenericCommand+0x98>)
 800da98:	6818      	ldr	r0, [r3, #0]
 800da9a:	f107 0110 	add.w	r1, r7, #16
 800da9e:	2300      	movs	r3, #0
 800daa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa2:	f7fe fbfb 	bl	800c29c <xQueueGenericSend>
 800daa6:	6278      	str	r0, [r7, #36]	; 0x24
 800daa8:	e012      	b.n	800dad0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800daaa:	4b0c      	ldr	r3, [pc, #48]	; (800dadc <xTimerGenericCommand+0x98>)
 800daac:	6818      	ldr	r0, [r3, #0]
 800daae:	f107 0110 	add.w	r1, r7, #16
 800dab2:	2300      	movs	r3, #0
 800dab4:	2200      	movs	r2, #0
 800dab6:	f7fe fbf1 	bl	800c29c <xQueueGenericSend>
 800daba:	6278      	str	r0, [r7, #36]	; 0x24
 800dabc:	e008      	b.n	800dad0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dabe:	4b07      	ldr	r3, [pc, #28]	; (800dadc <xTimerGenericCommand+0x98>)
 800dac0:	6818      	ldr	r0, [r3, #0]
 800dac2:	f107 0110 	add.w	r1, r7, #16
 800dac6:	2300      	movs	r3, #0
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	f7fe fce5 	bl	800c498 <xQueueGenericSendFromISR>
 800dace:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3728      	adds	r7, #40	; 0x28
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20005460 	.word	0x20005460

0800dae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daea:	4b22      	ldr	r3, [pc, #136]	; (800db74 <prvProcessExpiredTimer+0x94>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	3304      	adds	r3, #4
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe fa67 	bl	800bfcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db04:	f003 0304 	and.w	r3, r3, #4
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d022      	beq.n	800db52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	699a      	ldr	r2, [r3, #24]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	18d1      	adds	r1, r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	6978      	ldr	r0, [r7, #20]
 800db1a:	f000 f8d1 	bl	800dcc0 <prvInsertTimerInActiveList>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01f      	beq.n	800db64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db24:	2300      	movs	r3, #0
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	2300      	movs	r3, #0
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	2100      	movs	r1, #0
 800db2e:	6978      	ldr	r0, [r7, #20]
 800db30:	f7ff ff88 	bl	800da44 <xTimerGenericCommand>
 800db34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d113      	bne.n	800db64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	60fb      	str	r3, [r7, #12]
}
 800db4e:	bf00      	nop
 800db50:	e7fe      	b.n	800db50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db58:	f023 0301 	bic.w	r3, r3, #1
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	6a1b      	ldr	r3, [r3, #32]
 800db68:	6978      	ldr	r0, [r7, #20]
 800db6a:	4798      	blx	r3
}
 800db6c:	bf00      	nop
 800db6e:	3718      	adds	r7, #24
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	20005458 	.word	0x20005458

0800db78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db80:	f107 0308 	add.w	r3, r7, #8
 800db84:	4618      	mov	r0, r3
 800db86:	f000 f857 	bl	800dc38 <prvGetNextExpireTime>
 800db8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	4619      	mov	r1, r3
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 f803 	bl	800db9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db96:	f000 f8d5 	bl	800dd44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db9a:	e7f1      	b.n	800db80 <prvTimerTask+0x8>

0800db9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dba6:	f7ff fa1d 	bl	800cfe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbaa:	f107 0308 	add.w	r3, r7, #8
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 f866 	bl	800dc80 <prvSampleTimeNow>
 800dbb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d130      	bne.n	800dc1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <prvProcessTimerOrBlockTask+0x3c>
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d806      	bhi.n	800dbd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dbca:	f7ff fa19 	bl	800d000 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dbce:	68f9      	ldr	r1, [r7, #12]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7ff ff85 	bl	800dae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dbd6:	e024      	b.n	800dc22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d008      	beq.n	800dbf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbde:	4b13      	ldr	r3, [pc, #76]	; (800dc2c <prvProcessTimerOrBlockTask+0x90>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d101      	bne.n	800dbec <prvProcessTimerOrBlockTask+0x50>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e000      	b.n	800dbee <prvProcessTimerOrBlockTask+0x52>
 800dbec:	2300      	movs	r3, #0
 800dbee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbf0:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <prvProcessTimerOrBlockTask+0x94>)
 800dbf2:	6818      	ldr	r0, [r3, #0]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	f7fe ff81 	bl	800cb04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc02:	f7ff f9fd 	bl	800d000 <xTaskResumeAll>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10a      	bne.n	800dc22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc0c:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <prvProcessTimerOrBlockTask+0x98>)
 800dc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	f3bf 8f6f 	isb	sy
}
 800dc1c:	e001      	b.n	800dc22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc1e:	f7ff f9ef 	bl	800d000 <xTaskResumeAll>
}
 800dc22:	bf00      	nop
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	2000545c 	.word	0x2000545c
 800dc30:	20005460 	.word	0x20005460
 800dc34:	e000ed04 	.word	0xe000ed04

0800dc38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc40:	4b0e      	ldr	r3, [pc, #56]	; (800dc7c <prvGetNextExpireTime+0x44>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <prvGetNextExpireTime+0x16>
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	e000      	b.n	800dc50 <prvGetNextExpireTime+0x18>
 800dc4e:	2200      	movs	r2, #0
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d105      	bne.n	800dc68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc5c:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <prvGetNextExpireTime+0x44>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	60fb      	str	r3, [r7, #12]
 800dc66:	e001      	b.n	800dc6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	20005458 	.word	0x20005458

0800dc80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc88:	f7ff fa58 	bl	800d13c <xTaskGetTickCount>
 800dc8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc8e:	4b0b      	ldr	r3, [pc, #44]	; (800dcbc <prvSampleTimeNow+0x3c>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d205      	bcs.n	800dca4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc98:	f000 f936 	bl	800df08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	601a      	str	r2, [r3, #0]
 800dca2:	e002      	b.n	800dcaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dcaa:	4a04      	ldr	r2, [pc, #16]	; (800dcbc <prvSampleTimeNow+0x3c>)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	20005468 	.word	0x20005468

0800dcc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
 800dccc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d812      	bhi.n	800dd0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	1ad2      	subs	r2, r2, r3
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d302      	bcc.n	800dcfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	617b      	str	r3, [r7, #20]
 800dcf8:	e01b      	b.n	800dd32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dcfa:	4b10      	ldr	r3, [pc, #64]	; (800dd3c <prvInsertTimerInActiveList+0x7c>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3304      	adds	r3, #4
 800dd02:	4619      	mov	r1, r3
 800dd04:	4610      	mov	r0, r2
 800dd06:	f7fe f928 	bl	800bf5a <vListInsert>
 800dd0a:	e012      	b.n	800dd32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d206      	bcs.n	800dd22 <prvInsertTimerInActiveList+0x62>
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d302      	bcc.n	800dd22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	617b      	str	r3, [r7, #20]
 800dd20:	e007      	b.n	800dd32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd22:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <prvInsertTimerInActiveList+0x80>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3304      	adds	r3, #4
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	4610      	mov	r0, r2
 800dd2e:	f7fe f914 	bl	800bf5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd32:	697b      	ldr	r3, [r7, #20]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3718      	adds	r7, #24
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	2000545c 	.word	0x2000545c
 800dd40:	20005458 	.word	0x20005458

0800dd44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08e      	sub	sp, #56	; 0x38
 800dd48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd4a:	e0ca      	b.n	800dee2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	da18      	bge.n	800dd84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd52:	1d3b      	adds	r3, r7, #4
 800dd54:	3304      	adds	r3, #4
 800dd56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d10a      	bne.n	800dd74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	61fb      	str	r3, [r7, #28]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd7a:	6850      	ldr	r0, [r2, #4]
 800dd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd7e:	6892      	ldr	r2, [r2, #8]
 800dd80:	4611      	mov	r1, r2
 800dd82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f2c0 80ab 	blt.w	800dee2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d004      	beq.n	800dda2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fe f915 	bl	800bfcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dda2:	463b      	mov	r3, r7
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff ff6b 	bl	800dc80 <prvSampleTimeNow>
 800ddaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b09      	cmp	r3, #9
 800ddb0:	f200 8096 	bhi.w	800dee0 <prvProcessReceivedCommands+0x19c>
 800ddb4:	a201      	add	r2, pc, #4	; (adr r2, 800ddbc <prvProcessReceivedCommands+0x78>)
 800ddb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddba:	bf00      	nop
 800ddbc:	0800dde5 	.word	0x0800dde5
 800ddc0:	0800dde5 	.word	0x0800dde5
 800ddc4:	0800dde5 	.word	0x0800dde5
 800ddc8:	0800de59 	.word	0x0800de59
 800ddcc:	0800de6d 	.word	0x0800de6d
 800ddd0:	0800deb7 	.word	0x0800deb7
 800ddd4:	0800dde5 	.word	0x0800dde5
 800ddd8:	0800dde5 	.word	0x0800dde5
 800dddc:	0800de59 	.word	0x0800de59
 800dde0:	0800de6d 	.word	0x0800de6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddea:	f043 0301 	orr.w	r3, r3, #1
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	699b      	ldr	r3, [r3, #24]
 800ddfc:	18d1      	adds	r1, r2, r3
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de04:	f7ff ff5c 	bl	800dcc0 <prvInsertTimerInActiveList>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d069      	beq.n	800dee2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de10:	6a1b      	ldr	r3, [r3, #32]
 800de12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	2b00      	cmp	r3, #0
 800de22:	d05e      	beq.n	800dee2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	441a      	add	r2, r3
 800de2c:	2300      	movs	r3, #0
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	2300      	movs	r3, #0
 800de32:	2100      	movs	r1, #0
 800de34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de36:	f7ff fe05 	bl	800da44 <xTimerGenericCommand>
 800de3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d14f      	bne.n	800dee2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	61bb      	str	r3, [r7, #24]
}
 800de54:	bf00      	nop
 800de56:	e7fe      	b.n	800de56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de5e:	f023 0301 	bic.w	r3, r3, #1
 800de62:	b2da      	uxtb	r2, r3
 800de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de6a:	e03a      	b.n	800dee2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de72:	f043 0301 	orr.w	r3, r3, #1
 800de76:	b2da      	uxtb	r2, r3
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d10a      	bne.n	800dea2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	617b      	str	r3, [r7, #20]
}
 800de9e:	bf00      	nop
 800dea0:	e7fe      	b.n	800dea0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea4:	699a      	ldr	r2, [r3, #24]
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	18d1      	adds	r1, r2, r3
 800deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deb0:	f7ff ff06 	bl	800dcc0 <prvInsertTimerInActiveList>
					break;
 800deb4:	e015      	b.n	800dee2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800debc:	f003 0302 	and.w	r3, r3, #2
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d103      	bne.n	800decc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dec6:	f000 fbdb 	bl	800e680 <vPortFree>
 800deca:	e00a      	b.n	800dee2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800decc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ded2:	f023 0301 	bic.w	r3, r3, #1
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dede:	e000      	b.n	800dee2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800dee0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dee2:	4b08      	ldr	r3, [pc, #32]	; (800df04 <prvProcessReceivedCommands+0x1c0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	1d39      	adds	r1, r7, #4
 800dee8:	2200      	movs	r2, #0
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe fb70 	bl	800c5d0 <xQueueReceive>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	f47f af2a 	bne.w	800dd4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800def8:	bf00      	nop
 800defa:	bf00      	nop
 800defc:	3730      	adds	r7, #48	; 0x30
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	20005460 	.word	0x20005460

0800df08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b088      	sub	sp, #32
 800df0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df0e:	e048      	b.n	800dfa2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df10:	4b2d      	ldr	r3, [pc, #180]	; (800dfc8 <prvSwitchTimerLists+0xc0>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df1a:	4b2b      	ldr	r3, [pc, #172]	; (800dfc8 <prvSwitchTimerLists+0xc0>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3304      	adds	r3, #4
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fe f84f 	bl	800bfcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	2b00      	cmp	r3, #0
 800df42:	d02e      	beq.n	800dfa2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	699b      	ldr	r3, [r3, #24]
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	4413      	add	r3, r2
 800df4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	429a      	cmp	r2, r3
 800df54:	d90e      	bls.n	800df74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df62:	4b19      	ldr	r3, [pc, #100]	; (800dfc8 <prvSwitchTimerLists+0xc0>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3304      	adds	r3, #4
 800df6a:	4619      	mov	r1, r3
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7fd fff4 	bl	800bf5a <vListInsert>
 800df72:	e016      	b.n	800dfa2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df74:	2300      	movs	r3, #0
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	2300      	movs	r3, #0
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	2100      	movs	r1, #0
 800df7e:	68f8      	ldr	r0, [r7, #12]
 800df80:	f7ff fd60 	bl	800da44 <xTimerGenericCommand>
 800df84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10a      	bne.n	800dfa2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	603b      	str	r3, [r7, #0]
}
 800df9e:	bf00      	nop
 800dfa0:	e7fe      	b.n	800dfa0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfa2:	4b09      	ldr	r3, [pc, #36]	; (800dfc8 <prvSwitchTimerLists+0xc0>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1b1      	bne.n	800df10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dfac:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <prvSwitchTimerLists+0xc0>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dfb2:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <prvSwitchTimerLists+0xc4>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a04      	ldr	r2, [pc, #16]	; (800dfc8 <prvSwitchTimerLists+0xc0>)
 800dfb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dfba:	4a04      	ldr	r2, [pc, #16]	; (800dfcc <prvSwitchTimerLists+0xc4>)
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	6013      	str	r3, [r2, #0]
}
 800dfc0:	bf00      	nop
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	20005458 	.word	0x20005458
 800dfcc:	2000545c 	.word	0x2000545c

0800dfd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dfd6:	f000 f965 	bl	800e2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfda:	4b15      	ldr	r3, [pc, #84]	; (800e030 <prvCheckForValidListAndQueue+0x60>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d120      	bne.n	800e024 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dfe2:	4814      	ldr	r0, [pc, #80]	; (800e034 <prvCheckForValidListAndQueue+0x64>)
 800dfe4:	f7fd ff68 	bl	800beb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dfe8:	4813      	ldr	r0, [pc, #76]	; (800e038 <prvCheckForValidListAndQueue+0x68>)
 800dfea:	f7fd ff65 	bl	800beb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dfee:	4b13      	ldr	r3, [pc, #76]	; (800e03c <prvCheckForValidListAndQueue+0x6c>)
 800dff0:	4a10      	ldr	r2, [pc, #64]	; (800e034 <prvCheckForValidListAndQueue+0x64>)
 800dff2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dff4:	4b12      	ldr	r3, [pc, #72]	; (800e040 <prvCheckForValidListAndQueue+0x70>)
 800dff6:	4a10      	ldr	r2, [pc, #64]	; (800e038 <prvCheckForValidListAndQueue+0x68>)
 800dff8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dffa:	2300      	movs	r3, #0
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	4b11      	ldr	r3, [pc, #68]	; (800e044 <prvCheckForValidListAndQueue+0x74>)
 800e000:	4a11      	ldr	r2, [pc, #68]	; (800e048 <prvCheckForValidListAndQueue+0x78>)
 800e002:	2110      	movs	r1, #16
 800e004:	200a      	movs	r0, #10
 800e006:	f7fe f873 	bl	800c0f0 <xQueueGenericCreateStatic>
 800e00a:	4603      	mov	r3, r0
 800e00c:	4a08      	ldr	r2, [pc, #32]	; (800e030 <prvCheckForValidListAndQueue+0x60>)
 800e00e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <prvCheckForValidListAndQueue+0x60>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d005      	beq.n	800e024 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e018:	4b05      	ldr	r3, [pc, #20]	; (800e030 <prvCheckForValidListAndQueue+0x60>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	490b      	ldr	r1, [pc, #44]	; (800e04c <prvCheckForValidListAndQueue+0x7c>)
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fd46 	bl	800cab0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e024:	f000 f96e 	bl	800e304 <vPortExitCritical>
}
 800e028:	bf00      	nop
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20005460 	.word	0x20005460
 800e034:	20005430 	.word	0x20005430
 800e038:	20005444 	.word	0x20005444
 800e03c:	20005458 	.word	0x20005458
 800e040:	2000545c 	.word	0x2000545c
 800e044:	2000550c 	.word	0x2000550c
 800e048:	2000546c 	.word	0x2000546c
 800e04c:	080192b4 	.word	0x080192b4

0800e050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3b04      	subs	r3, #4
 800e060:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3b04      	subs	r3, #4
 800e06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	f023 0201 	bic.w	r2, r3, #1
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3b04      	subs	r3, #4
 800e07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e080:	4a0c      	ldr	r2, [pc, #48]	; (800e0b4 <pxPortInitialiseStack+0x64>)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3b14      	subs	r3, #20
 800e08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3b04      	subs	r3, #4
 800e096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f06f 0202 	mvn.w	r2, #2
 800e09e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	3b20      	subs	r3, #32
 800e0a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	0800e0b9 	.word	0x0800e0b9

0800e0b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0c2:	4b12      	ldr	r3, [pc, #72]	; (800e10c <prvTaskExitError+0x54>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ca:	d00a      	beq.n	800e0e2 <prvTaskExitError+0x2a>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	60fb      	str	r3, [r7, #12]
}
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <prvTaskExitError+0x28>
	__asm volatile
 800e0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e6:	f383 8811 	msr	BASEPRI, r3
 800e0ea:	f3bf 8f6f 	isb	sy
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	60bb      	str	r3, [r7, #8]
}
 800e0f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0f6:	bf00      	nop
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0fc      	beq.n	800e0f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0fe:	bf00      	nop
 800e100:	bf00      	nop
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	20000030 	.word	0x20000030

0800e110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e110:	4b07      	ldr	r3, [pc, #28]	; (800e130 <pxCurrentTCBConst2>)
 800e112:	6819      	ldr	r1, [r3, #0]
 800e114:	6808      	ldr	r0, [r1, #0]
 800e116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11a:	f380 8809 	msr	PSP, r0
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f04f 0000 	mov.w	r0, #0
 800e126:	f380 8811 	msr	BASEPRI, r0
 800e12a:	4770      	bx	lr
 800e12c:	f3af 8000 	nop.w

0800e130 <pxCurrentTCBConst2>:
 800e130:	20004f30 	.word	0x20004f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e134:	bf00      	nop
 800e136:	bf00      	nop

0800e138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e138:	4808      	ldr	r0, [pc, #32]	; (800e15c <prvPortStartFirstTask+0x24>)
 800e13a:	6800      	ldr	r0, [r0, #0]
 800e13c:	6800      	ldr	r0, [r0, #0]
 800e13e:	f380 8808 	msr	MSP, r0
 800e142:	f04f 0000 	mov.w	r0, #0
 800e146:	f380 8814 	msr	CONTROL, r0
 800e14a:	b662      	cpsie	i
 800e14c:	b661      	cpsie	f
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	df00      	svc	0
 800e158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e15a:	bf00      	nop
 800e15c:	e000ed08 	.word	0xe000ed08

0800e160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e166:	4b46      	ldr	r3, [pc, #280]	; (800e280 <xPortStartScheduler+0x120>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a46      	ldr	r2, [pc, #280]	; (800e284 <xPortStartScheduler+0x124>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d10a      	bne.n	800e186 <xPortStartScheduler+0x26>
	__asm volatile
 800e170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e174:	f383 8811 	msr	BASEPRI, r3
 800e178:	f3bf 8f6f 	isb	sy
 800e17c:	f3bf 8f4f 	dsb	sy
 800e180:	613b      	str	r3, [r7, #16]
}
 800e182:	bf00      	nop
 800e184:	e7fe      	b.n	800e184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e186:	4b3e      	ldr	r3, [pc, #248]	; (800e280 <xPortStartScheduler+0x120>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a3f      	ldr	r2, [pc, #252]	; (800e288 <xPortStartScheduler+0x128>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d10a      	bne.n	800e1a6 <xPortStartScheduler+0x46>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	60fb      	str	r3, [r7, #12]
}
 800e1a2:	bf00      	nop
 800e1a4:	e7fe      	b.n	800e1a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e1a6:	4b39      	ldr	r3, [pc, #228]	; (800e28c <xPortStartScheduler+0x12c>)
 800e1a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	22ff      	movs	r2, #255	; 0xff
 800e1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1c0:	78fb      	ldrb	r3, [r7, #3]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	4b31      	ldr	r3, [pc, #196]	; (800e290 <xPortStartScheduler+0x130>)
 800e1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1ce:	4b31      	ldr	r3, [pc, #196]	; (800e294 <xPortStartScheduler+0x134>)
 800e1d0:	2207      	movs	r2, #7
 800e1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1d4:	e009      	b.n	800e1ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e1d6:	4b2f      	ldr	r3, [pc, #188]	; (800e294 <xPortStartScheduler+0x134>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	4a2d      	ldr	r2, [pc, #180]	; (800e294 <xPortStartScheduler+0x134>)
 800e1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1e0:	78fb      	ldrb	r3, [r7, #3]
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1ea:	78fb      	ldrb	r3, [r7, #3]
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1f2:	2b80      	cmp	r3, #128	; 0x80
 800e1f4:	d0ef      	beq.n	800e1d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1f6:	4b27      	ldr	r3, [pc, #156]	; (800e294 <xPortStartScheduler+0x134>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f1c3 0307 	rsb	r3, r3, #7
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d00a      	beq.n	800e218 <xPortStartScheduler+0xb8>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	60bb      	str	r3, [r7, #8]
}
 800e214:	bf00      	nop
 800e216:	e7fe      	b.n	800e216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e218:	4b1e      	ldr	r3, [pc, #120]	; (800e294 <xPortStartScheduler+0x134>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	021b      	lsls	r3, r3, #8
 800e21e:	4a1d      	ldr	r2, [pc, #116]	; (800e294 <xPortStartScheduler+0x134>)
 800e220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e222:	4b1c      	ldr	r3, [pc, #112]	; (800e294 <xPortStartScheduler+0x134>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e22a:	4a1a      	ldr	r2, [pc, #104]	; (800e294 <xPortStartScheduler+0x134>)
 800e22c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	b2da      	uxtb	r2, r3
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e236:	4b18      	ldr	r3, [pc, #96]	; (800e298 <xPortStartScheduler+0x138>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a17      	ldr	r2, [pc, #92]	; (800e298 <xPortStartScheduler+0x138>)
 800e23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e242:	4b15      	ldr	r3, [pc, #84]	; (800e298 <xPortStartScheduler+0x138>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a14      	ldr	r2, [pc, #80]	; (800e298 <xPortStartScheduler+0x138>)
 800e248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e24c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e24e:	f000 f8dd 	bl	800e40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e252:	4b12      	ldr	r3, [pc, #72]	; (800e29c <xPortStartScheduler+0x13c>)
 800e254:	2200      	movs	r2, #0
 800e256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e258:	f000 f8fc 	bl	800e454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e25c:	4b10      	ldr	r3, [pc, #64]	; (800e2a0 <xPortStartScheduler+0x140>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a0f      	ldr	r2, [pc, #60]	; (800e2a0 <xPortStartScheduler+0x140>)
 800e262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e268:	f7ff ff66 	bl	800e138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e26c:	f7ff f830 	bl	800d2d0 <vTaskSwitchContext>
	prvTaskExitError();
 800e270:	f7ff ff22 	bl	800e0b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	e000ed00 	.word	0xe000ed00
 800e284:	410fc271 	.word	0x410fc271
 800e288:	410fc270 	.word	0x410fc270
 800e28c:	e000e400 	.word	0xe000e400
 800e290:	2000555c 	.word	0x2000555c
 800e294:	20005560 	.word	0x20005560
 800e298:	e000ed20 	.word	0xe000ed20
 800e29c:	20000030 	.word	0x20000030
 800e2a0:	e000ef34 	.word	0xe000ef34

0800e2a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	607b      	str	r3, [r7, #4]
}
 800e2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2be:	4b0f      	ldr	r3, [pc, #60]	; (800e2fc <vPortEnterCritical+0x58>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	4a0d      	ldr	r2, [pc, #52]	; (800e2fc <vPortEnterCritical+0x58>)
 800e2c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2c8:	4b0c      	ldr	r3, [pc, #48]	; (800e2fc <vPortEnterCritical+0x58>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d10f      	bne.n	800e2f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2d0:	4b0b      	ldr	r3, [pc, #44]	; (800e300 <vPortEnterCritical+0x5c>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00a      	beq.n	800e2f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	603b      	str	r3, [r7, #0]
}
 800e2ec:	bf00      	nop
 800e2ee:	e7fe      	b.n	800e2ee <vPortEnterCritical+0x4a>
	}
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	20000030 	.word	0x20000030
 800e300:	e000ed04 	.word	0xe000ed04

0800e304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e30a:	4b12      	ldr	r3, [pc, #72]	; (800e354 <vPortExitCritical+0x50>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10a      	bne.n	800e328 <vPortExitCritical+0x24>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	607b      	str	r3, [r7, #4]
}
 800e324:	bf00      	nop
 800e326:	e7fe      	b.n	800e326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e328:	4b0a      	ldr	r3, [pc, #40]	; (800e354 <vPortExitCritical+0x50>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	4a09      	ldr	r2, [pc, #36]	; (800e354 <vPortExitCritical+0x50>)
 800e330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e332:	4b08      	ldr	r3, [pc, #32]	; (800e354 <vPortExitCritical+0x50>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d105      	bne.n	800e346 <vPortExitCritical+0x42>
 800e33a:	2300      	movs	r3, #0
 800e33c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	f383 8811 	msr	BASEPRI, r3
}
 800e344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e346:	bf00      	nop
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	20000030 	.word	0x20000030
	...

0800e360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e360:	f3ef 8009 	mrs	r0, PSP
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	4b15      	ldr	r3, [pc, #84]	; (800e3c0 <pxCurrentTCBConst>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	f01e 0f10 	tst.w	lr, #16
 800e370:	bf08      	it	eq
 800e372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e37a:	6010      	str	r0, [r2, #0]
 800e37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e384:	f380 8811 	msr	BASEPRI, r0
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	f7fe ff9e 	bl	800d2d0 <vTaskSwitchContext>
 800e394:	f04f 0000 	mov.w	r0, #0
 800e398:	f380 8811 	msr	BASEPRI, r0
 800e39c:	bc09      	pop	{r0, r3}
 800e39e:	6819      	ldr	r1, [r3, #0]
 800e3a0:	6808      	ldr	r0, [r1, #0]
 800e3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a6:	f01e 0f10 	tst.w	lr, #16
 800e3aa:	bf08      	it	eq
 800e3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3b0:	f380 8809 	msr	PSP, r0
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	f3af 8000 	nop.w

0800e3c0 <pxCurrentTCBConst>:
 800e3c0:	20004f30 	.word	0x20004f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3c4:	bf00      	nop
 800e3c6:	bf00      	nop

0800e3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	607b      	str	r3, [r7, #4]
}
 800e3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3e2:	f7fe febb 	bl	800d15c <xTaskIncrementTick>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d003      	beq.n	800e3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3ec:	4b06      	ldr	r3, [pc, #24]	; (800e408 <xPortSysTickHandler+0x40>)
 800e3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f2:	601a      	str	r2, [r3, #0]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	f383 8811 	msr	BASEPRI, r3
}
 800e3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e400:	bf00      	nop
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	e000ed04 	.word	0xe000ed04

0800e40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e40c:	b480      	push	{r7}
 800e40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e410:	4b0b      	ldr	r3, [pc, #44]	; (800e440 <vPortSetupTimerInterrupt+0x34>)
 800e412:	2200      	movs	r2, #0
 800e414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e416:	4b0b      	ldr	r3, [pc, #44]	; (800e444 <vPortSetupTimerInterrupt+0x38>)
 800e418:	2200      	movs	r2, #0
 800e41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e41c:	4b0a      	ldr	r3, [pc, #40]	; (800e448 <vPortSetupTimerInterrupt+0x3c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a0a      	ldr	r2, [pc, #40]	; (800e44c <vPortSetupTimerInterrupt+0x40>)
 800e422:	fba2 2303 	umull	r2, r3, r2, r3
 800e426:	099b      	lsrs	r3, r3, #6
 800e428:	4a09      	ldr	r2, [pc, #36]	; (800e450 <vPortSetupTimerInterrupt+0x44>)
 800e42a:	3b01      	subs	r3, #1
 800e42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e42e:	4b04      	ldr	r3, [pc, #16]	; (800e440 <vPortSetupTimerInterrupt+0x34>)
 800e430:	2207      	movs	r2, #7
 800e432:	601a      	str	r2, [r3, #0]
}
 800e434:	bf00      	nop
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	e000e010 	.word	0xe000e010
 800e444:	e000e018 	.word	0xe000e018
 800e448:	20000004 	.word	0x20000004
 800e44c:	10624dd3 	.word	0x10624dd3
 800e450:	e000e014 	.word	0xe000e014

0800e454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e464 <vPortEnableVFP+0x10>
 800e458:	6801      	ldr	r1, [r0, #0]
 800e45a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e45e:	6001      	str	r1, [r0, #0]
 800e460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e462:	bf00      	nop
 800e464:	e000ed88 	.word	0xe000ed88

0800e468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e46e:	f3ef 8305 	mrs	r3, IPSR
 800e472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b0f      	cmp	r3, #15
 800e478:	d914      	bls.n	800e4a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e47a:	4a17      	ldr	r2, [pc, #92]	; (800e4d8 <vPortValidateInterruptPriority+0x70>)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4413      	add	r3, r2
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e484:	4b15      	ldr	r3, [pc, #84]	; (800e4dc <vPortValidateInterruptPriority+0x74>)
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	7afa      	ldrb	r2, [r7, #11]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d20a      	bcs.n	800e4a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	607b      	str	r3, [r7, #4]
}
 800e4a0:	bf00      	nop
 800e4a2:	e7fe      	b.n	800e4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4a4:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <vPortValidateInterruptPriority+0x78>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e4ac:	4b0d      	ldr	r3, [pc, #52]	; (800e4e4 <vPortValidateInterruptPriority+0x7c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d90a      	bls.n	800e4ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	603b      	str	r3, [r7, #0]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <vPortValidateInterruptPriority+0x60>
	}
 800e4ca:	bf00      	nop
 800e4cc:	3714      	adds	r7, #20
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	e000e3f0 	.word	0xe000e3f0
 800e4dc:	2000555c 	.word	0x2000555c
 800e4e0:	e000ed0c 	.word	0xe000ed0c
 800e4e4:	20005560 	.word	0x20005560

0800e4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b08a      	sub	sp, #40	; 0x28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4f4:	f7fe fd76 	bl	800cfe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4f8:	4b5b      	ldr	r3, [pc, #364]	; (800e668 <pvPortMalloc+0x180>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d101      	bne.n	800e504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e500:	f000 f920 	bl	800e744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e504:	4b59      	ldr	r3, [pc, #356]	; (800e66c <pvPortMalloc+0x184>)
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4013      	ands	r3, r2
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f040 8093 	bne.w	800e638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d01d      	beq.n	800e554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e518:	2208      	movs	r2, #8
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4413      	add	r3, r2
 800e51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f003 0307 	and.w	r3, r3, #7
 800e526:	2b00      	cmp	r3, #0
 800e528:	d014      	beq.n	800e554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f023 0307 	bic.w	r3, r3, #7
 800e530:	3308      	adds	r3, #8
 800e532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f003 0307 	and.w	r3, r3, #7
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00a      	beq.n	800e554 <pvPortMalloc+0x6c>
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	617b      	str	r3, [r7, #20]
}
 800e550:	bf00      	nop
 800e552:	e7fe      	b.n	800e552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d06e      	beq.n	800e638 <pvPortMalloc+0x150>
 800e55a:	4b45      	ldr	r3, [pc, #276]	; (800e670 <pvPortMalloc+0x188>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	429a      	cmp	r2, r3
 800e562:	d869      	bhi.n	800e638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e564:	4b43      	ldr	r3, [pc, #268]	; (800e674 <pvPortMalloc+0x18c>)
 800e566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e568:	4b42      	ldr	r3, [pc, #264]	; (800e674 <pvPortMalloc+0x18c>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e56e:	e004      	b.n	800e57a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	429a      	cmp	r2, r3
 800e582:	d903      	bls.n	800e58c <pvPortMalloc+0xa4>
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1f1      	bne.n	800e570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e58c:	4b36      	ldr	r3, [pc, #216]	; (800e668 <pvPortMalloc+0x180>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e592:	429a      	cmp	r2, r3
 800e594:	d050      	beq.n	800e638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2208      	movs	r2, #8
 800e59c:	4413      	add	r3, r2
 800e59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	6a3b      	ldr	r3, [r7, #32]
 800e5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	2308      	movs	r3, #8
 800e5b2:	005b      	lsls	r3, r3, #1
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d91f      	bls.n	800e5f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4413      	add	r3, r2
 800e5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	f003 0307 	and.w	r3, r3, #7
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d00a      	beq.n	800e5e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	613b      	str	r3, [r7, #16]
}
 800e5dc:	bf00      	nop
 800e5de:	e7fe      	b.n	800e5de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	1ad2      	subs	r2, r2, r3
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5f2:	69b8      	ldr	r0, [r7, #24]
 800e5f4:	f000 f908 	bl	800e808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5f8:	4b1d      	ldr	r3, [pc, #116]	; (800e670 <pvPortMalloc+0x188>)
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	1ad3      	subs	r3, r2, r3
 800e602:	4a1b      	ldr	r2, [pc, #108]	; (800e670 <pvPortMalloc+0x188>)
 800e604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e606:	4b1a      	ldr	r3, [pc, #104]	; (800e670 <pvPortMalloc+0x188>)
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	4b1b      	ldr	r3, [pc, #108]	; (800e678 <pvPortMalloc+0x190>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d203      	bcs.n	800e61a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e612:	4b17      	ldr	r3, [pc, #92]	; (800e670 <pvPortMalloc+0x188>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a18      	ldr	r2, [pc, #96]	; (800e678 <pvPortMalloc+0x190>)
 800e618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	685a      	ldr	r2, [r3, #4]
 800e61e:	4b13      	ldr	r3, [pc, #76]	; (800e66c <pvPortMalloc+0x184>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	431a      	orrs	r2, r3
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	2200      	movs	r2, #0
 800e62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e62e:	4b13      	ldr	r3, [pc, #76]	; (800e67c <pvPortMalloc+0x194>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3301      	adds	r3, #1
 800e634:	4a11      	ldr	r2, [pc, #68]	; (800e67c <pvPortMalloc+0x194>)
 800e636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e638:	f7fe fce2 	bl	800d000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	f003 0307 	and.w	r3, r3, #7
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00a      	beq.n	800e65c <pvPortMalloc+0x174>
	__asm volatile
 800e646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	60fb      	str	r3, [r7, #12]
}
 800e658:	bf00      	nop
 800e65a:	e7fe      	b.n	800e65a <pvPortMalloc+0x172>
	return pvReturn;
 800e65c:	69fb      	ldr	r3, [r7, #28]
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3728      	adds	r7, #40	; 0x28
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	2000916c 	.word	0x2000916c
 800e66c:	20009180 	.word	0x20009180
 800e670:	20009170 	.word	0x20009170
 800e674:	20009164 	.word	0x20009164
 800e678:	20009174 	.word	0x20009174
 800e67c:	20009178 	.word	0x20009178

0800e680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d04d      	beq.n	800e72e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e692:	2308      	movs	r3, #8
 800e694:	425b      	negs	r3, r3
 800e696:	697a      	ldr	r2, [r7, #20]
 800e698:	4413      	add	r3, r2
 800e69a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	685a      	ldr	r2, [r3, #4]
 800e6a4:	4b24      	ldr	r3, [pc, #144]	; (800e738 <vPortFree+0xb8>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10a      	bne.n	800e6c4 <vPortFree+0x44>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	60fb      	str	r3, [r7, #12]
}
 800e6c0:	bf00      	nop
 800e6c2:	e7fe      	b.n	800e6c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00a      	beq.n	800e6e2 <vPortFree+0x62>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d0:	f383 8811 	msr	BASEPRI, r3
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	60bb      	str	r3, [r7, #8]
}
 800e6de:	bf00      	nop
 800e6e0:	e7fe      	b.n	800e6e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	4b14      	ldr	r3, [pc, #80]	; (800e738 <vPortFree+0xb8>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4013      	ands	r3, r2
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d01e      	beq.n	800e72e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d11a      	bne.n	800e72e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	4b0e      	ldr	r3, [pc, #56]	; (800e738 <vPortFree+0xb8>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	43db      	mvns	r3, r3
 800e702:	401a      	ands	r2, r3
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e708:	f7fe fc6c 	bl	800cfe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	4b0a      	ldr	r3, [pc, #40]	; (800e73c <vPortFree+0xbc>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4413      	add	r3, r2
 800e716:	4a09      	ldr	r2, [pc, #36]	; (800e73c <vPortFree+0xbc>)
 800e718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e71a:	6938      	ldr	r0, [r7, #16]
 800e71c:	f000 f874 	bl	800e808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e720:	4b07      	ldr	r3, [pc, #28]	; (800e740 <vPortFree+0xc0>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3301      	adds	r3, #1
 800e726:	4a06      	ldr	r2, [pc, #24]	; (800e740 <vPortFree+0xc0>)
 800e728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e72a:	f7fe fc69 	bl	800d000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e72e:	bf00      	nop
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	20009180 	.word	0x20009180
 800e73c:	20009170 	.word	0x20009170
 800e740:	2000917c 	.word	0x2000917c

0800e744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e74a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e74e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e750:	4b27      	ldr	r3, [pc, #156]	; (800e7f0 <prvHeapInit+0xac>)
 800e752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f003 0307 	and.w	r3, r3, #7
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00c      	beq.n	800e778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	3307      	adds	r3, #7
 800e762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f023 0307 	bic.w	r3, r3, #7
 800e76a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e76c:	68ba      	ldr	r2, [r7, #8]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	4a1f      	ldr	r2, [pc, #124]	; (800e7f0 <prvHeapInit+0xac>)
 800e774:	4413      	add	r3, r2
 800e776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e77c:	4a1d      	ldr	r2, [pc, #116]	; (800e7f4 <prvHeapInit+0xb0>)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e782:	4b1c      	ldr	r3, [pc, #112]	; (800e7f4 <prvHeapInit+0xb0>)
 800e784:	2200      	movs	r2, #0
 800e786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	4413      	add	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e790:	2208      	movs	r2, #8
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	1a9b      	subs	r3, r3, r2
 800e796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f023 0307 	bic.w	r3, r3, #7
 800e79e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	4a15      	ldr	r2, [pc, #84]	; (800e7f8 <prvHeapInit+0xb4>)
 800e7a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7a6:	4b14      	ldr	r3, [pc, #80]	; (800e7f8 <prvHeapInit+0xb4>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7ae:	4b12      	ldr	r3, [pc, #72]	; (800e7f8 <prvHeapInit+0xb4>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	1ad2      	subs	r2, r2, r3
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7c4:	4b0c      	ldr	r3, [pc, #48]	; (800e7f8 <prvHeapInit+0xb4>)
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	4a0a      	ldr	r2, [pc, #40]	; (800e7fc <prvHeapInit+0xb8>)
 800e7d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	4a09      	ldr	r2, [pc, #36]	; (800e800 <prvHeapInit+0xbc>)
 800e7da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7dc:	4b09      	ldr	r3, [pc, #36]	; (800e804 <prvHeapInit+0xc0>)
 800e7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7e2:	601a      	str	r2, [r3, #0]
}
 800e7e4:	bf00      	nop
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr
 800e7f0:	20005564 	.word	0x20005564
 800e7f4:	20009164 	.word	0x20009164
 800e7f8:	2000916c 	.word	0x2000916c
 800e7fc:	20009174 	.word	0x20009174
 800e800:	20009170 	.word	0x20009170
 800e804:	20009180 	.word	0x20009180

0800e808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e808:	b480      	push	{r7}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e810:	4b28      	ldr	r3, [pc, #160]	; (800e8b4 <prvInsertBlockIntoFreeList+0xac>)
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	e002      	b.n	800e81c <prvInsertBlockIntoFreeList+0x14>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	429a      	cmp	r2, r3
 800e824:	d8f7      	bhi.n	800e816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	4413      	add	r3, r2
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	429a      	cmp	r2, r3
 800e836:	d108      	bne.n	800e84a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	685a      	ldr	r2, [r3, #4]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	441a      	add	r2, r3
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	441a      	add	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d118      	bne.n	800e890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	4b15      	ldr	r3, [pc, #84]	; (800e8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	d00d      	beq.n	800e886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	685a      	ldr	r2, [r3, #4]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	441a      	add	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	601a      	str	r2, [r3, #0]
 800e884:	e008      	b.n	800e898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e886:	4b0c      	ldr	r3, [pc, #48]	; (800e8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	e003      	b.n	800e898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d002      	beq.n	800e8a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8a6:	bf00      	nop
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	20009164 	.word	0x20009164
 800e8b8:	2000916c 	.word	0x2000916c

0800e8bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	490e      	ldr	r1, [pc, #56]	; (800e8fc <MX_USB_HOST_Init+0x40>)
 800e8c4:	480e      	ldr	r0, [pc, #56]	; (800e900 <MX_USB_HOST_Init+0x44>)
 800e8c6:	f7fb f9e5 	bl	8009c94 <USBH_Init>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e8d0:	f7f2 fd34 	bl	800133c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e8d4:	490b      	ldr	r1, [pc, #44]	; (800e904 <MX_USB_HOST_Init+0x48>)
 800e8d6:	480a      	ldr	r0, [pc, #40]	; (800e900 <MX_USB_HOST_Init+0x44>)
 800e8d8:	f7fb fa8c 	bl	8009df4 <USBH_RegisterClass>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e8e2:	f7f2 fd2b 	bl	800133c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e8e6:	4806      	ldr	r0, [pc, #24]	; (800e900 <MX_USB_HOST_Init+0x44>)
 800e8e8:	f7fb fb10 	bl	8009f0c <USBH_Start>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e8f2:	f7f2 fd23 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e8f6:	bf00      	nop
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	0800e909 	.word	0x0800e909
 800e900:	20009184 	.word	0x20009184
 800e904:	20000010 	.word	0x20000010

0800e908 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	460b      	mov	r3, r1
 800e912:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e914:	78fb      	ldrb	r3, [r7, #3]
 800e916:	3b01      	subs	r3, #1
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d819      	bhi.n	800e950 <USBH_UserProcess+0x48>
 800e91c:	a201      	add	r2, pc, #4	; (adr r2, 800e924 <USBH_UserProcess+0x1c>)
 800e91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e922:	bf00      	nop
 800e924:	0800e951 	.word	0x0800e951
 800e928:	0800e941 	.word	0x0800e941
 800e92c:	0800e951 	.word	0x0800e951
 800e930:	0800e949 	.word	0x0800e949
 800e934:	0800e939 	.word	0x0800e939
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e938:	4b09      	ldr	r3, [pc, #36]	; (800e960 <USBH_UserProcess+0x58>)
 800e93a:	2203      	movs	r2, #3
 800e93c:	701a      	strb	r2, [r3, #0]
  break;
 800e93e:	e008      	b.n	800e952 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e940:	4b07      	ldr	r3, [pc, #28]	; (800e960 <USBH_UserProcess+0x58>)
 800e942:	2202      	movs	r2, #2
 800e944:	701a      	strb	r2, [r3, #0]
  break;
 800e946:	e004      	b.n	800e952 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e948:	4b05      	ldr	r3, [pc, #20]	; (800e960 <USBH_UserProcess+0x58>)
 800e94a:	2201      	movs	r2, #1
 800e94c:	701a      	strb	r2, [r3, #0]
  break;
 800e94e:	e000      	b.n	800e952 <USBH_UserProcess+0x4a>

  default:
  break;
 800e950:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e952:	bf00      	nop
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	20009568 	.word	0x20009568

0800e964 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b08a      	sub	sp, #40	; 0x28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e96c:	f107 0314 	add.w	r3, r7, #20
 800e970:	2200      	movs	r2, #0
 800e972:	601a      	str	r2, [r3, #0]
 800e974:	605a      	str	r2, [r3, #4]
 800e976:	609a      	str	r2, [r3, #8]
 800e978:	60da      	str	r2, [r3, #12]
 800e97a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e984:	d147      	bne.n	800ea16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e986:	2300      	movs	r3, #0
 800e988:	613b      	str	r3, [r7, #16]
 800e98a:	4b25      	ldr	r3, [pc, #148]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98e:	4a24      	ldr	r2, [pc, #144]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e990:	f043 0301 	orr.w	r3, r3, #1
 800e994:	6313      	str	r3, [r2, #48]	; 0x30
 800e996:	4b22      	ldr	r3, [pc, #136]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	613b      	str	r3, [r7, #16]
 800e9a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e9a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e9b0:	f107 0314 	add.w	r3, r7, #20
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	481b      	ldr	r0, [pc, #108]	; (800ea24 <HAL_HCD_MspInit+0xc0>)
 800e9b8:	f7f4 fc2e 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e9bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e9c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e9ce:	230a      	movs	r3, #10
 800e9d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9d2:	f107 0314 	add.w	r3, r7, #20
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4812      	ldr	r0, [pc, #72]	; (800ea24 <HAL_HCD_MspInit+0xc0>)
 800e9da:	f7f4 fc1d 	bl	8003218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e9de:	4b10      	ldr	r3, [pc, #64]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e2:	4a0f      	ldr	r2, [pc, #60]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e9e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9e8:	6353      	str	r3, [r2, #52]	; 0x34
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60fb      	str	r3, [r7, #12]
 800e9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9f2:	4a0b      	ldr	r2, [pc, #44]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e9f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e9f8:	6453      	str	r3, [r2, #68]	; 0x44
 800e9fa:	4b09      	ldr	r3, [pc, #36]	; (800ea20 <HAL_HCD_MspInit+0xbc>)
 800e9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea02:	60fb      	str	r3, [r7, #12]
 800ea04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ea06:	2200      	movs	r2, #0
 800ea08:	2105      	movs	r1, #5
 800ea0a:	2043      	movs	r0, #67	; 0x43
 800ea0c:	f7f3 ffcb 	bl	80029a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ea10:	2043      	movs	r0, #67	; 0x43
 800ea12:	f7f3 ffe4 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ea16:	bf00      	nop
 800ea18:	3728      	adds	r7, #40	; 0x28
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	40023800 	.word	0x40023800
 800ea24:	40020000 	.word	0x40020000

0800ea28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fb ff1f 	bl	800a87a <USBH_LL_IncTimer>
}
 800ea3c:	bf00      	nop
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fb ff63 	bl	800a91e <USBH_LL_Connect>
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fb ff78 	bl	800a964 <USBH_LL_Disconnect>
}
 800ea74:	bf00      	nop
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	70fb      	strb	r3, [r7, #3]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fb ffaf 	bl	800a9f6 <USBH_LL_NotifyURBChange>
#endif
}
 800ea98:	bf00      	nop
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fb ff0d 	bl	800a8ce <USBH_LL_PortEnabled>
}
 800eab4:	bf00      	nop
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fb ff19 	bl	800a902 <USBH_LL_PortDisabled>
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d12a      	bne.n	800eb40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800eaea:	4a18      	ldr	r2, [pc, #96]	; (800eb4c <USBH_LL_Init+0x74>)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4a15      	ldr	r2, [pc, #84]	; (800eb4c <USBH_LL_Init+0x74>)
 800eaf6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eafa:	4b14      	ldr	r3, [pc, #80]	; (800eb4c <USBH_LL_Init+0x74>)
 800eafc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800eb02:	4b12      	ldr	r3, [pc, #72]	; (800eb4c <USBH_LL_Init+0x74>)
 800eb04:	2208      	movs	r2, #8
 800eb06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800eb08:	4b10      	ldr	r3, [pc, #64]	; (800eb4c <USBH_LL_Init+0x74>)
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb0e:	4b0f      	ldr	r3, [pc, #60]	; (800eb4c <USBH_LL_Init+0x74>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800eb14:	4b0d      	ldr	r3, [pc, #52]	; (800eb4c <USBH_LL_Init+0x74>)
 800eb16:	2202      	movs	r2, #2
 800eb18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb1a:	4b0c      	ldr	r3, [pc, #48]	; (800eb4c <USBH_LL_Init+0x74>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800eb20:	480a      	ldr	r0, [pc, #40]	; (800eb4c <USBH_LL_Init+0x74>)
 800eb22:	f7f4 fd2e 	bl	8003582 <HAL_HCD_Init>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800eb2c:	f7f2 fc06 	bl	800133c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800eb30:	4806      	ldr	r0, [pc, #24]	; (800eb4c <USBH_LL_Init+0x74>)
 800eb32:	f7f5 f912 	bl	8003d5a <HAL_HCD_GetCurrentFrame>
 800eb36:	4603      	mov	r3, r0
 800eb38:	4619      	mov	r1, r3
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7fb fe8e 	bl	800a85c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	2000956c 	.word	0x2000956c

0800eb50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7f5 f881 	bl	8003c6e <HAL_HCD_Start>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f000 f95c 	bl	800ee30 <USBH_Get_USB_Status>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7f5 f889 	bl	8003cb4 <HAL_HCD_Stop>
 800eba2:	4603      	mov	r3, r0
 800eba4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eba6:	7bfb      	ldrb	r3, [r7, #15]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f000 f941 	bl	800ee30 <USBH_Get_USB_Status>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3710      	adds	r7, #16
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7f5 f8d1 	bl	8003d76 <HAL_HCD_GetCurrentSpeed>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b02      	cmp	r3, #2
 800ebd8:	d00c      	beq.n	800ebf4 <USBH_LL_GetSpeed+0x38>
 800ebda:	2b02      	cmp	r3, #2
 800ebdc:	d80d      	bhi.n	800ebfa <USBH_LL_GetSpeed+0x3e>
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d002      	beq.n	800ebe8 <USBH_LL_GetSpeed+0x2c>
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d003      	beq.n	800ebee <USBH_LL_GetSpeed+0x32>
 800ebe6:	e008      	b.n	800ebfa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73fb      	strb	r3, [r7, #15]
    break;
 800ebec:	e008      	b.n	800ec00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf2:	e005      	b.n	800ec00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf8:	e002      	b.n	800ec00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ebfe:	bf00      	nop
  }
  return  speed;
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3710      	adds	r7, #16
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b084      	sub	sp, #16
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec16:	2300      	movs	r3, #0
 800ec18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7f5 f864 	bl	8003cee <HAL_HCD_ResetPort>
 800ec26:	4603      	mov	r3, r0
 800ec28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec2a:	7bfb      	ldrb	r3, [r7, #15]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f000 f8ff 	bl	800ee30 <USBH_Get_USB_Status>
 800ec32:	4603      	mov	r3, r0
 800ec34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec52:	78fa      	ldrb	r2, [r7, #3]
 800ec54:	4611      	mov	r1, r2
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f5 f86b 	bl	8003d32 <HAL_HCD_HC_GetXferCount>
 800ec5c:	4603      	mov	r3, r0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ec66:	b590      	push	{r4, r7, lr}
 800ec68:	b089      	sub	sp, #36	; 0x24
 800ec6a:	af04      	add	r7, sp, #16
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	4608      	mov	r0, r1
 800ec70:	4611      	mov	r1, r2
 800ec72:	461a      	mov	r2, r3
 800ec74:	4603      	mov	r3, r0
 800ec76:	70fb      	strb	r3, [r7, #3]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70bb      	strb	r3, [r7, #2]
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ec8e:	787c      	ldrb	r4, [r7, #1]
 800ec90:	78ba      	ldrb	r2, [r7, #2]
 800ec92:	78f9      	ldrb	r1, [r7, #3]
 800ec94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec96:	9302      	str	r3, [sp, #8]
 800ec98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec9c:	9301      	str	r3, [sp, #4]
 800ec9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eca2:	9300      	str	r3, [sp, #0]
 800eca4:	4623      	mov	r3, r4
 800eca6:	f7f4 fcce 	bl	8003646 <HAL_HCD_HC_Init>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecae:	7bfb      	ldrb	r3, [r7, #15]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f000 f8bd 	bl	800ee30 <USBH_Get_USB_Status>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecba:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd90      	pop	{r4, r7, pc}

0800ecc4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	460b      	mov	r3, r1
 800ecce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	4611      	mov	r1, r2
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7f4 fd3e 	bl	8003764 <HAL_HCD_HC_Halt>
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f000 f89e 	bl	800ee30 <USBH_Get_USB_Status>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ed02:	b590      	push	{r4, r7, lr}
 800ed04:	b089      	sub	sp, #36	; 0x24
 800ed06:	af04      	add	r7, sp, #16
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	4608      	mov	r0, r1
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	461a      	mov	r2, r3
 800ed10:	4603      	mov	r3, r0
 800ed12:	70fb      	strb	r3, [r7, #3]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70bb      	strb	r3, [r7, #2]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed20:	2300      	movs	r3, #0
 800ed22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ed2a:	787c      	ldrb	r4, [r7, #1]
 800ed2c:	78ba      	ldrb	r2, [r7, #2]
 800ed2e:	78f9      	ldrb	r1, [r7, #3]
 800ed30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ed34:	9303      	str	r3, [sp, #12]
 800ed36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed38:	9302      	str	r3, [sp, #8]
 800ed3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3c:	9301      	str	r3, [sp, #4]
 800ed3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	4623      	mov	r3, r4
 800ed46:	f7f4 fd31 	bl	80037ac <HAL_HCD_HC_SubmitRequest>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ed4e:	7bfb      	ldrb	r3, [r7, #15]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f000 f86d 	bl	800ee30 <USBH_Get_USB_Status>
 800ed56:	4603      	mov	r3, r0
 800ed58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd90      	pop	{r4, r7, pc}

0800ed64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed76:	78fa      	ldrb	r2, [r7, #3]
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7f4 ffc5 	bl	8003d0a <HAL_HCD_HC_GetURBState>
 800ed80:	4603      	mov	r3, r0
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	460b      	mov	r3, r1
 800ed94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d103      	bne.n	800eda8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f000 f870 	bl	800ee88 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800eda8:	20c8      	movs	r0, #200	; 0xc8
 800edaa:	f7f3 f931 	bl	8002010 <HAL_Delay>
  return USBH_OK;
 800edae:	2300      	movs	r3, #0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3708      	adds	r7, #8
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	460b      	mov	r3, r1
 800edc2:	70fb      	strb	r3, [r7, #3]
 800edc4:	4613      	mov	r3, r2
 800edc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800edd0:	78fb      	ldrb	r3, [r7, #3]
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	212c      	movs	r1, #44	; 0x2c
 800edd6:	fb01 f303 	mul.w	r3, r1, r3
 800edda:	4413      	add	r3, r2
 800eddc:	333b      	adds	r3, #59	; 0x3b
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d009      	beq.n	800edf8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ede4:	78fb      	ldrb	r3, [r7, #3]
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	212c      	movs	r1, #44	; 0x2c
 800edea:	fb01 f303 	mul.w	r3, r1, r3
 800edee:	4413      	add	r3, r2
 800edf0:	3354      	adds	r3, #84	; 0x54
 800edf2:	78ba      	ldrb	r2, [r7, #2]
 800edf4:	701a      	strb	r2, [r3, #0]
 800edf6:	e008      	b.n	800ee0a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800edf8:	78fb      	ldrb	r3, [r7, #3]
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	212c      	movs	r1, #44	; 0x2c
 800edfe:	fb01 f303 	mul.w	r3, r1, r3
 800ee02:	4413      	add	r3, r2
 800ee04:	3355      	adds	r3, #85	; 0x55
 800ee06:	78ba      	ldrb	r2, [r7, #2]
 800ee08:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3714      	adds	r7, #20
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7f3 f8f5 	bl	8002010 <HAL_Delay>
}
 800ee26:	bf00      	nop
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
	...

0800ee30 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	4603      	mov	r3, r0
 800ee38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	2b03      	cmp	r3, #3
 800ee42:	d817      	bhi.n	800ee74 <USBH_Get_USB_Status+0x44>
 800ee44:	a201      	add	r2, pc, #4	; (adr r2, 800ee4c <USBH_Get_USB_Status+0x1c>)
 800ee46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4a:	bf00      	nop
 800ee4c:	0800ee5d 	.word	0x0800ee5d
 800ee50:	0800ee63 	.word	0x0800ee63
 800ee54:	0800ee69 	.word	0x0800ee69
 800ee58:	0800ee6f 	.word	0x0800ee6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee60:	e00b      	b.n	800ee7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ee62:	2302      	movs	r3, #2
 800ee64:	73fb      	strb	r3, [r7, #15]
    break;
 800ee66:	e008      	b.n	800ee7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6c:	e005      	b.n	800ee7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ee6e:	2302      	movs	r3, #2
 800ee70:	73fb      	strb	r3, [r7, #15]
    break;
 800ee72:	e002      	b.n	800ee7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ee74:	2302      	movs	r3, #2
 800ee76:	73fb      	strb	r3, [r7, #15]
    break;
 800ee78:	bf00      	nop
  }
  return usb_status;
 800ee7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d102      	bne.n	800eea2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	73fb      	strb	r3, [r7, #15]
 800eea0:	e001      	b.n	800eea6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800eea2:	2301      	movs	r3, #1
 800eea4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800eea6:	7bfb      	ldrb	r3, [r7, #15]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	2101      	movs	r1, #1
 800eeac:	4803      	ldr	r0, [pc, #12]	; (800eebc <MX_DriverVbusFS+0x34>)
 800eeae:	f7f4 fb4f 	bl	8003550 <HAL_GPIO_WritePin>
}
 800eeb2:	bf00      	nop
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	40020800 	.word	0x40020800

0800eec0 <rcl_get_zero_initialized_publisher>:
 800eec0:	4b01      	ldr	r3, [pc, #4]	; (800eec8 <rcl_get_zero_initialized_publisher+0x8>)
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	0801930c 	.word	0x0801930c

0800eecc <rcl_publisher_init>:
 800eecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eed0:	b088      	sub	sp, #32
 800eed2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800eed4:	2d00      	cmp	r5, #0
 800eed6:	d069      	beq.n	800efac <rcl_publisher_init+0xe0>
 800eed8:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800eedc:	4604      	mov	r4, r0
 800eede:	4648      	mov	r0, r9
 800eee0:	460e      	mov	r6, r1
 800eee2:	4690      	mov	r8, r2
 800eee4:	461f      	mov	r7, r3
 800eee6:	f000 f9d5 	bl	800f294 <rcutils_allocator_is_valid>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d05e      	beq.n	800efac <rcl_publisher_init+0xe0>
 800eeee:	2c00      	cmp	r4, #0
 800eef0:	d05c      	beq.n	800efac <rcl_publisher_init+0xe0>
 800eef2:	f8d4 a000 	ldr.w	sl, [r4]
 800eef6:	f1ba 0f00 	cmp.w	sl, #0
 800eefa:	d004      	beq.n	800ef06 <rcl_publisher_init+0x3a>
 800eefc:	2764      	movs	r7, #100	; 0x64
 800eefe:	4638      	mov	r0, r7
 800ef00:	b008      	add	sp, #32
 800ef02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef06:	4630      	mov	r0, r6
 800ef08:	f004 ffba 	bl	8013e80 <rcl_node_is_valid>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d052      	beq.n	800efb6 <rcl_publisher_init+0xea>
 800ef10:	f1b8 0f00 	cmp.w	r8, #0
 800ef14:	d04a      	beq.n	800efac <rcl_publisher_init+0xe0>
 800ef16:	2f00      	cmp	r7, #0
 800ef18:	d048      	beq.n	800efac <rcl_publisher_init+0xe0>
 800ef1a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ef1e:	aa07      	add	r2, sp, #28
 800ef20:	9205      	str	r2, [sp, #20]
 800ef22:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800ef26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ef2e:	f8cd a01c 	str.w	sl, [sp, #28]
 800ef32:	4639      	mov	r1, r7
 800ef34:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ef38:	4630      	mov	r0, r6
 800ef3a:	f004 fff5 	bl	8013f28 <rcl_node_resolve_name>
 800ef3e:	4607      	mov	r7, r0
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d14f      	bne.n	800efe4 <rcl_publisher_init+0x118>
 800ef44:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ef46:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800ef48:	20c8      	movs	r0, #200	; 0xc8
 800ef4a:	4798      	blx	r3
 800ef4c:	6020      	str	r0, [r4, #0]
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d04e      	beq.n	800eff0 <rcl_publisher_init+0x124>
 800ef52:	4630      	mov	r0, r6
 800ef54:	f004 ffb6 	bl	8013ec4 <rcl_node_get_rmw_handle>
 800ef58:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	9a07      	ldr	r2, [sp, #28]
 800ef60:	6827      	ldr	r7, [r4, #0]
 800ef62:	462b      	mov	r3, r5
 800ef64:	4641      	mov	r1, r8
 800ef66:	f000 fa55 	bl	800f414 <rmw_create_publisher>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800ef70:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800ef74:	b370      	cbz	r0, 800efd4 <rcl_publisher_init+0x108>
 800ef76:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800ef7a:	f000 fb29 	bl	800f5d0 <rmw_publisher_get_actual_qos>
 800ef7e:	6823      	ldr	r3, [r4, #0]
 800ef80:	4607      	mov	r7, r0
 800ef82:	b9d0      	cbnz	r0, 800efba <rcl_publisher_init+0xee>
 800ef84:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800ef88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	2270      	movs	r2, #112	; 0x70
 800ef90:	4618      	mov	r0, r3
 800ef92:	f009 fa3f 	bl	8018414 <memcpy>
 800ef96:	6832      	ldr	r2, [r6, #0]
 800ef98:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800ef9c:	9807      	ldr	r0, [sp, #28]
 800ef9e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800efa0:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800efa2:	4798      	blx	r3
 800efa4:	4638      	mov	r0, r7
 800efa6:	b008      	add	sp, #32
 800efa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efac:	270b      	movs	r7, #11
 800efae:	4638      	mov	r0, r7
 800efb0:	b008      	add	sp, #32
 800efb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efb6:	27c8      	movs	r7, #200	; 0xc8
 800efb8:	e7a1      	b.n	800eefe <rcl_publisher_init+0x32>
 800efba:	b18b      	cbz	r3, 800efe0 <rcl_publisher_init+0x114>
 800efbc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800efc0:	b142      	cbz	r2, 800efd4 <rcl_publisher_init+0x108>
 800efc2:	4630      	mov	r0, r6
 800efc4:	f004 ff7e 	bl	8013ec4 <rcl_node_get_rmw_handle>
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800efce:	f000 fb0f 	bl	800f5f0 <rmw_destroy_publisher>
 800efd2:	6823      	ldr	r3, [r4, #0]
 800efd4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800efd6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800efd8:	4618      	mov	r0, r3
 800efda:	4790      	blx	r2
 800efdc:	2300      	movs	r3, #0
 800efde:	6023      	str	r3, [r4, #0]
 800efe0:	2701      	movs	r7, #1
 800efe2:	e7db      	b.n	800ef9c <rcl_publisher_init+0xd0>
 800efe4:	2867      	cmp	r0, #103	; 0x67
 800efe6:	d0d9      	beq.n	800ef9c <rcl_publisher_init+0xd0>
 800efe8:	2869      	cmp	r0, #105	; 0x69
 800efea:	d003      	beq.n	800eff4 <rcl_publisher_init+0x128>
 800efec:	280a      	cmp	r0, #10
 800efee:	d1f7      	bne.n	800efe0 <rcl_publisher_init+0x114>
 800eff0:	270a      	movs	r7, #10
 800eff2:	e7d3      	b.n	800ef9c <rcl_publisher_init+0xd0>
 800eff4:	2767      	movs	r7, #103	; 0x67
 800eff6:	e7d1      	b.n	800ef9c <rcl_publisher_init+0xd0>

0800eff8 <rcl_publisher_get_default_options>:
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	4d14      	ldr	r5, [pc, #80]	; (800f04c <rcl_publisher_get_default_options+0x54>)
 800effc:	4914      	ldr	r1, [pc, #80]	; (800f050 <rcl_publisher_get_default_options+0x58>)
 800effe:	b088      	sub	sp, #32
 800f000:	4604      	mov	r4, r0
 800f002:	2250      	movs	r2, #80	; 0x50
 800f004:	4628      	mov	r0, r5
 800f006:	f009 fa05 	bl	8018414 <memcpy>
 800f00a:	a802      	add	r0, sp, #8
 800f00c:	f000 f934 	bl	800f278 <rcutils_get_default_allocator>
 800f010:	f10d 0c08 	add.w	ip, sp, #8
 800f014:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f018:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800f01c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f020:	466e      	mov	r6, sp
 800f022:	f8dc 3000 	ldr.w	r3, [ip]
 800f026:	f8ce 3000 	str.w	r3, [lr]
 800f02a:	4630      	mov	r0, r6
 800f02c:	f000 f974 	bl	800f318 <rmw_get_default_publisher_options>
 800f030:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f034:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800f038:	e883 0003 	stmia.w	r3, {r0, r1}
 800f03c:	2270      	movs	r2, #112	; 0x70
 800f03e:	4629      	mov	r1, r5
 800f040:	4620      	mov	r0, r4
 800f042:	f009 f9e7 	bl	8018414 <memcpy>
 800f046:	4620      	mov	r0, r4
 800f048:	b008      	add	sp, #32
 800f04a:	bd70      	pop	{r4, r5, r6, pc}
 800f04c:	20009870 	.word	0x20009870
 800f050:	08019310 	.word	0x08019310

0800f054 <rcl_publish>:
 800f054:	b1f8      	cbz	r0, 800f096 <rcl_publish+0x42>
 800f056:	6803      	ldr	r3, [r0, #0]
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	4604      	mov	r4, r0
 800f05c:	b1b3      	cbz	r3, 800f08c <rcl_publish+0x38>
 800f05e:	4616      	mov	r6, r2
 800f060:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800f064:	b192      	cbz	r2, 800f08c <rcl_publish+0x38>
 800f066:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f06a:	460d      	mov	r5, r1
 800f06c:	f004 fb2e 	bl	80136cc <rcl_context_is_valid>
 800f070:	b160      	cbz	r0, 800f08c <rcl_publish+0x38>
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800f078:	b140      	cbz	r0, 800f08c <rcl_publish+0x38>
 800f07a:	b155      	cbz	r5, 800f092 <rcl_publish+0x3e>
 800f07c:	4632      	mov	r2, r6
 800f07e:	4629      	mov	r1, r5
 800f080:	f000 f968 	bl	800f354 <rmw_publish>
 800f084:	3800      	subs	r0, #0
 800f086:	bf18      	it	ne
 800f088:	2001      	movne	r0, #1
 800f08a:	bd70      	pop	{r4, r5, r6, pc}
 800f08c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f090:	bd70      	pop	{r4, r5, r6, pc}
 800f092:	200b      	movs	r0, #11
 800f094:	bd70      	pop	{r4, r5, r6, pc}
 800f096:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f09a:	4770      	bx	lr

0800f09c <rclc_support_init>:
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	b086      	sub	sp, #24
 800f0a2:	b3b8      	cbz	r0, 800f114 <rclc_support_init+0x78>
 800f0a4:	461c      	mov	r4, r3
 800f0a6:	b3ab      	cbz	r3, 800f114 <rclc_support_init+0x78>
 800f0a8:	460f      	mov	r7, r1
 800f0aa:	4690      	mov	r8, r2
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	f004 fc77 	bl	80139a0 <rcl_get_zero_initialized_init_options>
 800f0b2:	f104 030c 	add.w	r3, r4, #12
 800f0b6:	9005      	str	r0, [sp, #20]
 800f0b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f0bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f0c0:	a805      	add	r0, sp, #20
 800f0c2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f0c6:	f004 fc6d 	bl	80139a4 <rcl_init_options_init>
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	b9e0      	cbnz	r0, 800f108 <rclc_support_init+0x6c>
 800f0ce:	ad02      	add	r5, sp, #8
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	f004 faf1 	bl	80136b8 <rcl_get_zero_initialized_context>
 800f0d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f0da:	4633      	mov	r3, r6
 800f0dc:	e886 0003 	stmia.w	r6, {r0, r1}
 800f0e0:	aa05      	add	r2, sp, #20
 800f0e2:	4641      	mov	r1, r8
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	f004 fb57 	bl	8013798 <rcl_init>
 800f0ea:	4605      	mov	r5, r0
 800f0ec:	b9b8      	cbnz	r0, 800f11e <rclc_support_init+0x82>
 800f0ee:	60b4      	str	r4, [r6, #8]
 800f0f0:	4622      	mov	r2, r4
 800f0f2:	f106 010c 	add.w	r1, r6, #12
 800f0f6:	2003      	movs	r0, #3
 800f0f8:	f005 f8d2 	bl	80142a0 <rcl_clock_init>
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	b970      	cbnz	r0, 800f11e <rclc_support_init+0x82>
 800f100:	a805      	add	r0, sp, #20
 800f102:	f004 fcb5 	bl	8013a70 <rcl_init_options_fini>
 800f106:	b108      	cbz	r0, 800f10c <rclc_support_init+0x70>
 800f108:	f000 f8ea 	bl	800f2e0 <rcutils_reset_error>
 800f10c:	4628      	mov	r0, r5
 800f10e:	b006      	add	sp, #24
 800f110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f114:	250b      	movs	r5, #11
 800f116:	4628      	mov	r0, r5
 800f118:	b006      	add	sp, #24
 800f11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11e:	f000 f8df 	bl	800f2e0 <rcutils_reset_error>
 800f122:	a805      	add	r0, sp, #20
 800f124:	f004 fca4 	bl	8013a70 <rcl_init_options_fini>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d0ef      	beq.n	800f10c <rclc_support_init+0x70>
 800f12c:	e7ec      	b.n	800f108 <rclc_support_init+0x6c>
 800f12e:	bf00      	nop

0800f130 <rclc_node_init_default>:
 800f130:	b3b8      	cbz	r0, 800f1a2 <rclc_node_init_default+0x72>
 800f132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f136:	460d      	mov	r5, r1
 800f138:	b0a1      	sub	sp, #132	; 0x84
 800f13a:	b329      	cbz	r1, 800f188 <rclc_node_init_default+0x58>
 800f13c:	4616      	mov	r6, r2
 800f13e:	b31a      	cbz	r2, 800f188 <rclc_node_init_default+0x58>
 800f140:	461f      	mov	r7, r3
 800f142:	b30b      	cbz	r3, 800f188 <rclc_node_init_default+0x58>
 800f144:	f10d 0810 	add.w	r8, sp, #16
 800f148:	4604      	mov	r4, r0
 800f14a:	4640      	mov	r0, r8
 800f14c:	f004 fd48 	bl	8013be0 <rcl_get_zero_initialized_node>
 800f150:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f154:	f10d 0918 	add.w	r9, sp, #24
 800f158:	e884 0003 	stmia.w	r4, {r0, r1}
 800f15c:	4648      	mov	r0, r9
 800f15e:	f004 feb7 	bl	8013ed0 <rcl_node_get_default_options>
 800f162:	4640      	mov	r0, r8
 800f164:	f004 fd3c 	bl	8013be0 <rcl_get_zero_initialized_node>
 800f168:	f8cd 9000 	str.w	r9, [sp]
 800f16c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f170:	463b      	mov	r3, r7
 800f172:	e884 0003 	stmia.w	r4, {r0, r1}
 800f176:	4632      	mov	r2, r6
 800f178:	4629      	mov	r1, r5
 800f17a:	4620      	mov	r0, r4
 800f17c:	f004 fd3a 	bl	8013bf4 <rcl_node_init>
 800f180:	b930      	cbnz	r0, 800f190 <rclc_node_init_default+0x60>
 800f182:	b021      	add	sp, #132	; 0x84
 800f184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f188:	200b      	movs	r0, #11
 800f18a:	b021      	add	sp, #132	; 0x84
 800f18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f190:	9003      	str	r0, [sp, #12]
 800f192:	f000 f8a5 	bl	800f2e0 <rcutils_reset_error>
 800f196:	f000 f8a3 	bl	800f2e0 <rcutils_reset_error>
 800f19a:	9803      	ldr	r0, [sp, #12]
 800f19c:	b021      	add	sp, #132	; 0x84
 800f19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a2:	200b      	movs	r0, #11
 800f1a4:	4770      	bx	lr
 800f1a6:	bf00      	nop

0800f1a8 <rclc_publisher_init_default>:
 800f1a8:	b368      	cbz	r0, 800f206 <rclc_publisher_init_default+0x5e>
 800f1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ae:	460d      	mov	r5, r1
 800f1b0:	b0a0      	sub	sp, #128	; 0x80
 800f1b2:	b321      	cbz	r1, 800f1fe <rclc_publisher_init_default+0x56>
 800f1b4:	4616      	mov	r6, r2
 800f1b6:	b312      	cbz	r2, 800f1fe <rclc_publisher_init_default+0x56>
 800f1b8:	461f      	mov	r7, r3
 800f1ba:	b303      	cbz	r3, 800f1fe <rclc_publisher_init_default+0x56>
 800f1bc:	4604      	mov	r4, r0
 800f1be:	f7ff fe7f 	bl	800eec0 <rcl_get_zero_initialized_publisher>
 800f1c2:	f10d 0810 	add.w	r8, sp, #16
 800f1c6:	6020      	str	r0, [r4, #0]
 800f1c8:	4640      	mov	r0, r8
 800f1ca:	f7ff ff15 	bl	800eff8 <rcl_publisher_get_default_options>
 800f1ce:	490f      	ldr	r1, [pc, #60]	; (800f20c <rclc_publisher_init_default+0x64>)
 800f1d0:	2250      	movs	r2, #80	; 0x50
 800f1d2:	4640      	mov	r0, r8
 800f1d4:	f009 f91e 	bl	8018414 <memcpy>
 800f1d8:	f8cd 8000 	str.w	r8, [sp]
 800f1dc:	463b      	mov	r3, r7
 800f1de:	4632      	mov	r2, r6
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f7ff fe72 	bl	800eecc <rcl_publisher_init>
 800f1e8:	b910      	cbnz	r0, 800f1f0 <rclc_publisher_init_default+0x48>
 800f1ea:	b020      	add	sp, #128	; 0x80
 800f1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f0:	9003      	str	r0, [sp, #12]
 800f1f2:	f000 f875 	bl	800f2e0 <rcutils_reset_error>
 800f1f6:	9803      	ldr	r0, [sp, #12]
 800f1f8:	b020      	add	sp, #128	; 0x80
 800f1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1fe:	200b      	movs	r0, #11
 800f200:	b020      	add	sp, #128	; 0x80
 800f202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f206:	200b      	movs	r0, #11
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	08019360 	.word	0x08019360

0800f210 <__default_zero_allocate>:
 800f210:	f008 bc84 	b.w	8017b1c <calloc>

0800f214 <__default_reallocate>:
 800f214:	f008 be10 	b.w	8017e38 <realloc>

0800f218 <__default_deallocate>:
 800f218:	f008 bcee 	b.w	8017bf8 <free>

0800f21c <__default_allocate>:
 800f21c:	f008 bce4 	b.w	8017be8 <malloc>

0800f220 <rcutils_get_zero_initialized_allocator>:
 800f220:	b510      	push	{r4, lr}
 800f222:	4c05      	ldr	r4, [pc, #20]	; (800f238 <rcutils_get_zero_initialized_allocator+0x18>)
 800f224:	4686      	mov	lr, r0
 800f226:	4684      	mov	ip, r0
 800f228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f22a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	f8cc 3000 	str.w	r3, [ip]
 800f234:	4670      	mov	r0, lr
 800f236:	bd10      	pop	{r4, pc}
 800f238:	080193b0 	.word	0x080193b0

0800f23c <rcutils_set_default_allocator>:
 800f23c:	b1a8      	cbz	r0, 800f26a <rcutils_set_default_allocator+0x2e>
 800f23e:	6802      	ldr	r2, [r0, #0]
 800f240:	b1a2      	cbz	r2, 800f26c <rcutils_set_default_allocator+0x30>
 800f242:	6841      	ldr	r1, [r0, #4]
 800f244:	b1a1      	cbz	r1, 800f270 <rcutils_set_default_allocator+0x34>
 800f246:	b410      	push	{r4}
 800f248:	68c4      	ldr	r4, [r0, #12]
 800f24a:	b164      	cbz	r4, 800f266 <rcutils_set_default_allocator+0x2a>
 800f24c:	6880      	ldr	r0, [r0, #8]
 800f24e:	b138      	cbz	r0, 800f260 <rcutils_set_default_allocator+0x24>
 800f250:	4b08      	ldr	r3, [pc, #32]	; (800f274 <rcutils_set_default_allocator+0x38>)
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	2200      	movs	r2, #0
 800f256:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f25a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f25e:	2001      	movs	r0, #1
 800f260:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	4620      	mov	r0, r4
 800f268:	e7fa      	b.n	800f260 <rcutils_set_default_allocator+0x24>
 800f26a:	4770      	bx	lr
 800f26c:	4610      	mov	r0, r2
 800f26e:	4770      	bx	lr
 800f270:	4608      	mov	r0, r1
 800f272:	4770      	bx	lr
 800f274:	20000034 	.word	0x20000034

0800f278 <rcutils_get_default_allocator>:
 800f278:	b510      	push	{r4, lr}
 800f27a:	4c05      	ldr	r4, [pc, #20]	; (800f290 <rcutils_get_default_allocator+0x18>)
 800f27c:	4686      	mov	lr, r0
 800f27e:	4684      	mov	ip, r0
 800f280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	f8cc 3000 	str.w	r3, [ip]
 800f28c:	4670      	mov	r0, lr
 800f28e:	bd10      	pop	{r4, pc}
 800f290:	20000034 	.word	0x20000034

0800f294 <rcutils_allocator_is_valid>:
 800f294:	b158      	cbz	r0, 800f2ae <rcutils_allocator_is_valid+0x1a>
 800f296:	6803      	ldr	r3, [r0, #0]
 800f298:	b143      	cbz	r3, 800f2ac <rcutils_allocator_is_valid+0x18>
 800f29a:	6843      	ldr	r3, [r0, #4]
 800f29c:	b133      	cbz	r3, 800f2ac <rcutils_allocator_is_valid+0x18>
 800f29e:	68c3      	ldr	r3, [r0, #12]
 800f2a0:	b123      	cbz	r3, 800f2ac <rcutils_allocator_is_valid+0x18>
 800f2a2:	6880      	ldr	r0, [r0, #8]
 800f2a4:	3800      	subs	r0, #0
 800f2a6:	bf18      	it	ne
 800f2a8:	2001      	movne	r0, #1
 800f2aa:	4770      	bx	lr
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	4770      	bx	lr

0800f2b0 <rcutils_get_error_string>:
 800f2b0:	4b06      	ldr	r3, [pc, #24]	; (800f2cc <rcutils_get_error_string+0x1c>)
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	b13b      	cbz	r3, 800f2c6 <rcutils_get_error_string+0x16>
 800f2b6:	4b06      	ldr	r3, [pc, #24]	; (800f2d0 <rcutils_get_error_string+0x20>)
 800f2b8:	781a      	ldrb	r2, [r3, #0]
 800f2ba:	b90a      	cbnz	r2, 800f2c0 <rcutils_get_error_string+0x10>
 800f2bc:	2201      	movs	r2, #1
 800f2be:	701a      	strb	r2, [r3, #0]
 800f2c0:	4b04      	ldr	r3, [pc, #16]	; (800f2d4 <rcutils_get_error_string+0x24>)
 800f2c2:	7818      	ldrb	r0, [r3, #0]
 800f2c4:	4770      	bx	lr
 800f2c6:	4b04      	ldr	r3, [pc, #16]	; (800f2d8 <rcutils_get_error_string+0x28>)
 800f2c8:	7818      	ldrb	r0, [r3, #0]
 800f2ca:	4770      	bx	lr
 800f2cc:	200098e0 	.word	0x200098e0
 800f2d0:	200098f9 	.word	0x200098f9
 800f2d4:	200098f8 	.word	0x200098f8
 800f2d8:	080193c4 	.word	0x080193c4
 800f2dc:	00000000 	.word	0x00000000

0800f2e0 <rcutils_reset_error>:
 800f2e0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800f300 <rcutils_reset_error+0x20>
 800f2e4:	4a08      	ldr	r2, [pc, #32]	; (800f308 <rcutils_reset_error+0x28>)
 800f2e6:	4809      	ldr	r0, [pc, #36]	; (800f30c <rcutils_reset_error+0x2c>)
 800f2e8:	4909      	ldr	r1, [pc, #36]	; (800f310 <rcutils_reset_error+0x30>)
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	8013      	strh	r3, [r2, #0]
 800f2ee:	ed82 7b02 	vstr	d7, [r2, #8]
 800f2f2:	4a08      	ldr	r2, [pc, #32]	; (800f314 <rcutils_reset_error+0x34>)
 800f2f4:	7003      	strb	r3, [r0, #0]
 800f2f6:	700b      	strb	r3, [r1, #0]
 800f2f8:	7013      	strb	r3, [r2, #0]
 800f2fa:	4770      	bx	lr
 800f2fc:	f3af 8000 	nop.w
	...
 800f308:	200098e8 	.word	0x200098e8
 800f30c:	200098f9 	.word	0x200098f9
 800f310:	200098f8 	.word	0x200098f8
 800f314:	200098e0 	.word	0x200098e0

0800f318 <rmw_get_default_publisher_options>:
 800f318:	2200      	movs	r2, #0
 800f31a:	6002      	str	r2, [r0, #0]
 800f31c:	7102      	strb	r2, [r0, #4]
 800f31e:	4770      	bx	lr

0800f320 <rmw_uros_set_custom_transport>:
 800f320:	b470      	push	{r4, r5, r6}
 800f322:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f326:	b162      	cbz	r2, 800f342 <rmw_uros_set_custom_transport+0x22>
 800f328:	b15b      	cbz	r3, 800f342 <rmw_uros_set_custom_transport+0x22>
 800f32a:	b155      	cbz	r5, 800f342 <rmw_uros_set_custom_transport+0x22>
 800f32c:	b14e      	cbz	r6, 800f342 <rmw_uros_set_custom_transport+0x22>
 800f32e:	4c06      	ldr	r4, [pc, #24]	; (800f348 <rmw_uros_set_custom_transport+0x28>)
 800f330:	7020      	strb	r0, [r4, #0]
 800f332:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f336:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f33a:	6166      	str	r6, [r4, #20]
 800f33c:	2000      	movs	r0, #0
 800f33e:	bc70      	pop	{r4, r5, r6}
 800f340:	4770      	bx	lr
 800f342:	200b      	movs	r0, #11
 800f344:	bc70      	pop	{r4, r5, r6}
 800f346:	4770      	bx	lr
 800f348:	200098fc 	.word	0x200098fc

0800f34c <flush_session>:
 800f34c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800f34e:	f002 bb3d 	b.w	80119cc <uxr_run_session_until_confirm_delivery>
 800f352:	bf00      	nop

0800f354 <rmw_publish>:
 800f354:	2800      	cmp	r0, #0
 800f356:	d053      	beq.n	800f400 <rmw_publish+0xac>
 800f358:	b570      	push	{r4, r5, r6, lr}
 800f35a:	460d      	mov	r5, r1
 800f35c:	b08e      	sub	sp, #56	; 0x38
 800f35e:	2900      	cmp	r1, #0
 800f360:	d04b      	beq.n	800f3fa <rmw_publish+0xa6>
 800f362:	4604      	mov	r4, r0
 800f364:	6800      	ldr	r0, [r0, #0]
 800f366:	f000 fc47 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d045      	beq.n	800f3fa <rmw_publish+0xa6>
 800f36e:	6866      	ldr	r6, [r4, #4]
 800f370:	2e00      	cmp	r6, #0
 800f372:	d042      	beq.n	800f3fa <rmw_publish+0xa6>
 800f374:	69b4      	ldr	r4, [r6, #24]
 800f376:	4628      	mov	r0, r5
 800f378:	6923      	ldr	r3, [r4, #16]
 800f37a:	4798      	blx	r3
 800f37c:	69f3      	ldr	r3, [r6, #28]
 800f37e:	9005      	str	r0, [sp, #20]
 800f380:	b113      	cbz	r3, 800f388 <rmw_publish+0x34>
 800f382:	a805      	add	r0, sp, #20
 800f384:	4798      	blx	r3
 800f386:	9805      	ldr	r0, [sp, #20]
 800f388:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	9000      	str	r0, [sp, #0]
 800f390:	6972      	ldr	r2, [r6, #20]
 800f392:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800f394:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f398:	ab06      	add	r3, sp, #24
 800f39a:	f003 f903 	bl	80125a4 <uxr_prepare_output_stream>
 800f39e:	b1d8      	cbz	r0, 800f3d8 <rmw_publish+0x84>
 800f3a0:	68a3      	ldr	r3, [r4, #8]
 800f3a2:	a906      	add	r1, sp, #24
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	4798      	blx	r3
 800f3a8:	6a33      	ldr	r3, [r6, #32]
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	b10b      	cbz	r3, 800f3b2 <rmw_publish+0x5e>
 800f3ae:	a806      	add	r0, sp, #24
 800f3b0:	4798      	blx	r3
 800f3b2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f3bc:	d022      	beq.n	800f404 <rmw_publish+0xb0>
 800f3be:	6918      	ldr	r0, [r3, #16]
 800f3c0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800f3c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f3c6:	f002 fb01 	bl	80119cc <uxr_run_session_until_confirm_delivery>
 800f3ca:	4020      	ands	r0, r4
 800f3cc:	b2c4      	uxtb	r4, r0
 800f3ce:	f084 0001 	eor.w	r0, r4, #1
 800f3d2:	b2c0      	uxtb	r0, r0
 800f3d4:	b00e      	add	sp, #56	; 0x38
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}
 800f3d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f3dc:	6918      	ldr	r0, [r3, #16]
 800f3de:	9b05      	ldr	r3, [sp, #20]
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	4b0b      	ldr	r3, [pc, #44]	; (800f410 <rmw_publish+0xbc>)
 800f3e4:	9301      	str	r3, [sp, #4]
 800f3e6:	9602      	str	r6, [sp, #8]
 800f3e8:	6972      	ldr	r2, [r6, #20]
 800f3ea:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800f3ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f3f0:	ab06      	add	r3, sp, #24
 800f3f2:	f003 f907 	bl	8012604 <uxr_prepare_output_stream_fragmented>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d1d2      	bne.n	800f3a0 <rmw_publish+0x4c>
 800f3fa:	2001      	movs	r0, #1
 800f3fc:	b00e      	add	sp, #56	; 0x38
 800f3fe:	bd70      	pop	{r4, r5, r6, pc}
 800f400:	2001      	movs	r0, #1
 800f402:	4770      	bx	lr
 800f404:	6918      	ldr	r0, [r3, #16]
 800f406:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f40a:	f001 ff59 	bl	80112c0 <uxr_flash_output_streams>
 800f40e:	e7de      	b.n	800f3ce <rmw_publish+0x7a>
 800f410:	0800f34d 	.word	0x0800f34d

0800f414 <rmw_create_publisher>:
 800f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f418:	b087      	sub	sp, #28
 800f41a:	2800      	cmp	r0, #0
 800f41c:	f000 80cc 	beq.w	800f5b8 <rmw_create_publisher+0x1a4>
 800f420:	460e      	mov	r6, r1
 800f422:	2900      	cmp	r1, #0
 800f424:	f000 80c8 	beq.w	800f5b8 <rmw_create_publisher+0x1a4>
 800f428:	4604      	mov	r4, r0
 800f42a:	6800      	ldr	r0, [r0, #0]
 800f42c:	4615      	mov	r5, r2
 800f42e:	4698      	mov	r8, r3
 800f430:	f000 fbe2 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 800f434:	2800      	cmp	r0, #0
 800f436:	f000 80bf 	beq.w	800f5b8 <rmw_create_publisher+0x1a4>
 800f43a:	2d00      	cmp	r5, #0
 800f43c:	f000 80bc 	beq.w	800f5b8 <rmw_create_publisher+0x1a4>
 800f440:	782b      	ldrb	r3, [r5, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	f000 80b8 	beq.w	800f5b8 <rmw_create_publisher+0x1a4>
 800f448:	f1b8 0f00 	cmp.w	r8, #0
 800f44c:	f000 80b4 	beq.w	800f5b8 <rmw_create_publisher+0x1a4>
 800f450:	485c      	ldr	r0, [pc, #368]	; (800f5c4 <rmw_create_publisher+0x1b0>)
 800f452:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f456:	f005 fc9b 	bl	8014d90 <get_memory>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	f000 80ac 	beq.w	800f5b8 <rmw_create_publisher+0x1a4>
 800f460:	6884      	ldr	r4, [r0, #8]
 800f462:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800f466:	f005 fcb7 	bl	8014dd8 <rmw_get_implementation_identifier>
 800f46a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800f46e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800f472:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800f476:	4628      	mov	r0, r5
 800f478:	f7f0 feb4 	bl	80001e4 <strlen>
 800f47c:	3001      	adds	r0, #1
 800f47e:	283c      	cmp	r0, #60	; 0x3c
 800f480:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800f484:	f200 8091 	bhi.w	800f5aa <rmw_create_publisher+0x196>
 800f488:	4a4f      	ldr	r2, [pc, #316]	; (800f5c8 <rmw_create_publisher+0x1b4>)
 800f48a:	462b      	mov	r3, r5
 800f48c:	213c      	movs	r1, #60	; 0x3c
 800f48e:	4650      	mov	r0, sl
 800f490:	f008 fe48 	bl	8018124 <sniprintf>
 800f494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f498:	67e3      	str	r3, [r4, #124]	; 0x7c
 800f49a:	4641      	mov	r1, r8
 800f49c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800f4a0:	2250      	movs	r2, #80	; 0x50
 800f4a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f4a6:	f008 ffb5 	bl	8018414 <memcpy>
 800f4aa:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f4ae:	4947      	ldr	r1, [pc, #284]	; (800f5cc <rmw_create_publisher+0x1b8>)
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4b6:	bf0c      	ite	eq
 800f4b8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800f4bc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800f4c0:	67a3      	str	r3, [r4, #120]	; 0x78
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f000 fba3 	bl	800fc14 <get_message_typesupport_handle>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d06b      	beq.n	800f5aa <rmw_create_publisher+0x196>
 800f4d2:	6842      	ldr	r2, [r0, #4]
 800f4d4:	61a2      	str	r2, [r4, #24]
 800f4d6:	2a00      	cmp	r2, #0
 800f4d8:	d067      	beq.n	800f5aa <rmw_create_publisher+0x196>
 800f4da:	4629      	mov	r1, r5
 800f4dc:	4643      	mov	r3, r8
 800f4de:	4648      	mov	r0, r9
 800f4e0:	f005 fee0 	bl	80152a4 <create_topic>
 800f4e4:	6260      	str	r0, [r4, #36]	; 0x24
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d063      	beq.n	800f5b2 <rmw_create_publisher+0x19e>
 800f4ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4f2:	2103      	movs	r1, #3
 800f4f4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800f4f8:	1c42      	adds	r2, r0, #1
 800f4fa:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800f4fe:	f001 fd91 	bl	8011024 <uxr_object_id>
 800f502:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f506:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f50a:	6120      	str	r0, [r4, #16]
 800f50c:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800f510:	6910      	ldr	r0, [r2, #16]
 800f512:	2506      	movs	r5, #6
 800f514:	9500      	str	r5, [sp, #0]
 800f516:	6819      	ldr	r1, [r3, #0]
 800f518:	6922      	ldr	r2, [r4, #16]
 800f51a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f51e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f522:	f001 fcd9 	bl	8010ed8 <uxr_buffer_create_publisher_bin>
 800f526:	4602      	mov	r2, r0
 800f528:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f52c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f530:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f534:	f000 fae0 	bl	800faf8 <run_xrce_session>
 800f538:	b3b8      	cbz	r0, 800f5aa <rmw_create_publisher+0x196>
 800f53a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f542:	2105      	movs	r1, #5
 800f544:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800f548:	1c42      	adds	r2, r0, #1
 800f54a:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800f54e:	f001 fd69 	bl	8011024 <uxr_object_id>
 800f552:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f556:	6160      	str	r0, [r4, #20]
 800f558:	691e      	ldr	r6, [r3, #16]
 800f55a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f55e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800f562:	f10d 0a10 	add.w	sl, sp, #16
 800f566:	4641      	mov	r1, r8
 800f568:	4650      	mov	r0, sl
 800f56a:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800f56e:	f000 fadf 	bl	800fb30 <convert_qos_profile>
 800f572:	9503      	str	r5, [sp, #12]
 800f574:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f578:	9001      	str	r0, [sp, #4]
 800f57a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f57e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800f588:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f58c:	f8d8 1000 	ldr.w	r1, [r8]
 800f590:	4630      	mov	r0, r6
 800f592:	f001 fcd1 	bl	8010f38 <uxr_buffer_create_datawriter_bin>
 800f596:	4602      	mov	r2, r0
 800f598:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f59c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f5a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f5a4:	f000 faa8 	bl	800faf8 <run_xrce_session>
 800f5a8:	b938      	cbnz	r0, 800f5ba <rmw_create_publisher+0x1a6>
 800f5aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f5ac:	b108      	cbz	r0, 800f5b2 <rmw_create_publisher+0x19e>
 800f5ae:	f000 fa47 	bl	800fa40 <rmw_uxrce_fini_topic_memory>
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	f000 f9ec 	bl	800f990 <rmw_uxrce_fini_publisher_memory>
 800f5b8:	2700      	movs	r7, #0
 800f5ba:	4638      	mov	r0, r7
 800f5bc:	b007      	add	sp, #28
 800f5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c2:	bf00      	nop
 800f5c4:	2000e1f4 	.word	0x2000e1f4
 800f5c8:	080193fc 	.word	0x080193fc
 800f5cc:	080193c8 	.word	0x080193c8

0800f5d0 <rmw_publisher_get_actual_qos>:
 800f5d0:	b150      	cbz	r0, 800f5e8 <rmw_publisher_get_actual_qos+0x18>
 800f5d2:	b508      	push	{r3, lr}
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	b149      	cbz	r1, 800f5ec <rmw_publisher_get_actual_qos+0x1c>
 800f5d8:	6841      	ldr	r1, [r0, #4]
 800f5da:	2250      	movs	r2, #80	; 0x50
 800f5dc:	3128      	adds	r1, #40	; 0x28
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f008 ff18 	bl	8018414 <memcpy>
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	bd08      	pop	{r3, pc}
 800f5e8:	200b      	movs	r0, #11
 800f5ea:	4770      	bx	lr
 800f5ec:	200b      	movs	r0, #11
 800f5ee:	bd08      	pop	{r3, pc}

0800f5f0 <rmw_destroy_publisher>:
 800f5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f2:	b128      	cbz	r0, 800f600 <rmw_destroy_publisher+0x10>
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	6800      	ldr	r0, [r0, #0]
 800f5f8:	460d      	mov	r5, r1
 800f5fa:	f000 fafd 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 800f5fe:	b910      	cbnz	r0, 800f606 <rmw_destroy_publisher+0x16>
 800f600:	2401      	movs	r4, #1
 800f602:	4620      	mov	r0, r4
 800f604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f606:	6863      	ldr	r3, [r4, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d0f9      	beq.n	800f600 <rmw_destroy_publisher+0x10>
 800f60c:	2d00      	cmp	r5, #0
 800f60e:	d0f7      	beq.n	800f600 <rmw_destroy_publisher+0x10>
 800f610:	6828      	ldr	r0, [r5, #0]
 800f612:	f000 faf1 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 800f616:	2800      	cmp	r0, #0
 800f618:	d0f2      	beq.n	800f600 <rmw_destroy_publisher+0x10>
 800f61a:	686c      	ldr	r4, [r5, #4]
 800f61c:	2c00      	cmp	r4, #0
 800f61e:	d0ef      	beq.n	800f600 <rmw_destroy_publisher+0x10>
 800f620:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f622:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800f626:	f005 fe8d 	bl	8015344 <destroy_topic>
 800f62a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f62e:	6962      	ldr	r2, [r4, #20]
 800f630:	6918      	ldr	r0, [r3, #16]
 800f632:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f636:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f63a:	6819      	ldr	r1, [r3, #0]
 800f63c:	f001 fb98 	bl	8010d70 <uxr_buffer_delete_entity>
 800f640:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f644:	6922      	ldr	r2, [r4, #16]
 800f646:	691b      	ldr	r3, [r3, #16]
 800f648:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800f64c:	4604      	mov	r4, r0
 800f64e:	6809      	ldr	r1, [r1, #0]
 800f650:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f654:	f001 fb8c 	bl	8010d70 <uxr_buffer_delete_entity>
 800f658:	693e      	ldr	r6, [r7, #16]
 800f65a:	4622      	mov	r2, r4
 800f65c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800f660:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800f664:	4604      	mov	r4, r0
 800f666:	4630      	mov	r0, r6
 800f668:	f000 fa46 	bl	800faf8 <run_xrce_session>
 800f66c:	693e      	ldr	r6, [r7, #16]
 800f66e:	4622      	mov	r2, r4
 800f670:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800f674:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800f678:	4604      	mov	r4, r0
 800f67a:	4630      	mov	r0, r6
 800f67c:	f000 fa3c 	bl	800faf8 <run_xrce_session>
 800f680:	b12c      	cbz	r4, 800f68e <rmw_destroy_publisher+0x9e>
 800f682:	b120      	cbz	r0, 800f68e <rmw_destroy_publisher+0x9e>
 800f684:	2400      	movs	r4, #0
 800f686:	4628      	mov	r0, r5
 800f688:	f000 f982 	bl	800f990 <rmw_uxrce_fini_publisher_memory>
 800f68c:	e7b9      	b.n	800f602 <rmw_destroy_publisher+0x12>
 800f68e:	2402      	movs	r4, #2
 800f690:	e7f9      	b.n	800f686 <rmw_destroy_publisher+0x96>
 800f692:	bf00      	nop

0800f694 <rmw_uxrce_init_service_memory>:
 800f694:	b1e2      	cbz	r2, 800f6d0 <rmw_uxrce_init_service_memory+0x3c>
 800f696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69a:	7b05      	ldrb	r5, [r0, #12]
 800f69c:	4606      	mov	r6, r0
 800f69e:	b9ad      	cbnz	r5, 800f6cc <rmw_uxrce_init_service_memory+0x38>
 800f6a0:	23c8      	movs	r3, #200	; 0xc8
 800f6a2:	e9c0 5500 	strd	r5, r5, [r0]
 800f6a6:	6083      	str	r3, [r0, #8]
 800f6a8:	f240 1301 	movw	r3, #257	; 0x101
 800f6ac:	4617      	mov	r7, r2
 800f6ae:	8183      	strh	r3, [r0, #12]
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	46a8      	mov	r8, r5
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	3501      	adds	r5, #1
 800f6ba:	f005 fb79 	bl	8014db0 <put_memory>
 800f6be:	42af      	cmp	r7, r5
 800f6c0:	60a4      	str	r4, [r4, #8]
 800f6c2:	f884 800c 	strb.w	r8, [r4, #12]
 800f6c6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f6ca:	d1f3      	bne.n	800f6b4 <rmw_uxrce_init_service_memory+0x20>
 800f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop

0800f6d4 <rmw_uxrce_init_client_memory>:
 800f6d4:	b1e2      	cbz	r2, 800f710 <rmw_uxrce_init_client_memory+0x3c>
 800f6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6da:	7b05      	ldrb	r5, [r0, #12]
 800f6dc:	4606      	mov	r6, r0
 800f6de:	b9ad      	cbnz	r5, 800f70c <rmw_uxrce_init_client_memory+0x38>
 800f6e0:	23c8      	movs	r3, #200	; 0xc8
 800f6e2:	e9c0 5500 	strd	r5, r5, [r0]
 800f6e6:	6083      	str	r3, [r0, #8]
 800f6e8:	f240 1301 	movw	r3, #257	; 0x101
 800f6ec:	4617      	mov	r7, r2
 800f6ee:	8183      	strh	r3, [r0, #12]
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	46a8      	mov	r8, r5
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	3501      	adds	r5, #1
 800f6fa:	f005 fb59 	bl	8014db0 <put_memory>
 800f6fe:	42af      	cmp	r7, r5
 800f700:	60a4      	str	r4, [r4, #8]
 800f702:	f884 800c 	strb.w	r8, [r4, #12]
 800f706:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f70a:	d1f3      	bne.n	800f6f4 <rmw_uxrce_init_client_memory+0x20>
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop

0800f714 <rmw_uxrce_init_publisher_memory>:
 800f714:	b1e2      	cbz	r2, 800f750 <rmw_uxrce_init_publisher_memory+0x3c>
 800f716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71a:	7b05      	ldrb	r5, [r0, #12]
 800f71c:	4606      	mov	r6, r0
 800f71e:	b9ad      	cbnz	r5, 800f74c <rmw_uxrce_init_publisher_memory+0x38>
 800f720:	23d8      	movs	r3, #216	; 0xd8
 800f722:	e9c0 5500 	strd	r5, r5, [r0]
 800f726:	6083      	str	r3, [r0, #8]
 800f728:	f240 1301 	movw	r3, #257	; 0x101
 800f72c:	4617      	mov	r7, r2
 800f72e:	8183      	strh	r3, [r0, #12]
 800f730:	460c      	mov	r4, r1
 800f732:	46a8      	mov	r8, r5
 800f734:	4621      	mov	r1, r4
 800f736:	4630      	mov	r0, r6
 800f738:	3501      	adds	r5, #1
 800f73a:	f005 fb39 	bl	8014db0 <put_memory>
 800f73e:	42af      	cmp	r7, r5
 800f740:	60a4      	str	r4, [r4, #8]
 800f742:	f884 800c 	strb.w	r8, [r4, #12]
 800f746:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f74a:	d1f3      	bne.n	800f734 <rmw_uxrce_init_publisher_memory+0x20>
 800f74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop

0800f754 <rmw_uxrce_init_subscription_memory>:
 800f754:	b1e2      	cbz	r2, 800f790 <rmw_uxrce_init_subscription_memory+0x3c>
 800f756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75a:	7b05      	ldrb	r5, [r0, #12]
 800f75c:	4606      	mov	r6, r0
 800f75e:	b9ad      	cbnz	r5, 800f78c <rmw_uxrce_init_subscription_memory+0x38>
 800f760:	23d8      	movs	r3, #216	; 0xd8
 800f762:	e9c0 5500 	strd	r5, r5, [r0]
 800f766:	6083      	str	r3, [r0, #8]
 800f768:	f240 1301 	movw	r3, #257	; 0x101
 800f76c:	4617      	mov	r7, r2
 800f76e:	8183      	strh	r3, [r0, #12]
 800f770:	460c      	mov	r4, r1
 800f772:	46a8      	mov	r8, r5
 800f774:	4621      	mov	r1, r4
 800f776:	4630      	mov	r0, r6
 800f778:	3501      	adds	r5, #1
 800f77a:	f005 fb19 	bl	8014db0 <put_memory>
 800f77e:	42af      	cmp	r7, r5
 800f780:	60a4      	str	r4, [r4, #8]
 800f782:	f884 800c 	strb.w	r8, [r4, #12]
 800f786:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f78a:	d1f3      	bne.n	800f774 <rmw_uxrce_init_subscription_memory+0x20>
 800f78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop

0800f794 <rmw_uxrce_init_node_memory>:
 800f794:	b1e2      	cbz	r2, 800f7d0 <rmw_uxrce_init_node_memory+0x3c>
 800f796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f79a:	7b05      	ldrb	r5, [r0, #12]
 800f79c:	4606      	mov	r6, r0
 800f79e:	b9ad      	cbnz	r5, 800f7cc <rmw_uxrce_init_node_memory+0x38>
 800f7a0:	23a4      	movs	r3, #164	; 0xa4
 800f7a2:	e9c0 5500 	strd	r5, r5, [r0]
 800f7a6:	6083      	str	r3, [r0, #8]
 800f7a8:	f240 1301 	movw	r3, #257	; 0x101
 800f7ac:	4617      	mov	r7, r2
 800f7ae:	8183      	strh	r3, [r0, #12]
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	46a8      	mov	r8, r5
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	3501      	adds	r5, #1
 800f7ba:	f005 faf9 	bl	8014db0 <put_memory>
 800f7be:	42af      	cmp	r7, r5
 800f7c0:	60a4      	str	r4, [r4, #8]
 800f7c2:	f884 800c 	strb.w	r8, [r4, #12]
 800f7c6:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800f7ca:	d1f3      	bne.n	800f7b4 <rmw_uxrce_init_node_memory+0x20>
 800f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop

0800f7d4 <rmw_uxrce_init_session_memory>:
 800f7d4:	b1ea      	cbz	r2, 800f812 <rmw_uxrce_init_session_memory+0x3e>
 800f7d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7da:	7b05      	ldrb	r5, [r0, #12]
 800f7dc:	4606      	mov	r6, r0
 800f7de:	b9b5      	cbnz	r5, 800f80e <rmw_uxrce_init_session_memory+0x3a>
 800f7e0:	e9c0 5500 	strd	r5, r5, [r0]
 800f7e4:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800f7e8:	f240 1301 	movw	r3, #257	; 0x101
 800f7ec:	4617      	mov	r7, r2
 800f7ee:	f8c0 8008 	str.w	r8, [r0, #8]
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	8183      	strh	r3, [r0, #12]
 800f7f6:	46a9      	mov	r9, r5
 800f7f8:	4621      	mov	r1, r4
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	3501      	adds	r5, #1
 800f7fe:	f005 fad7 	bl	8014db0 <put_memory>
 800f802:	42af      	cmp	r7, r5
 800f804:	60a4      	str	r4, [r4, #8]
 800f806:	f884 900c 	strb.w	r9, [r4, #12]
 800f80a:	4444      	add	r4, r8
 800f80c:	d1f4      	bne.n	800f7f8 <rmw_uxrce_init_session_memory+0x24>
 800f80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f812:	4770      	bx	lr

0800f814 <rmw_uxrce_init_topic_memory>:
 800f814:	b1e2      	cbz	r2, 800f850 <rmw_uxrce_init_topic_memory+0x3c>
 800f816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81a:	7b05      	ldrb	r5, [r0, #12]
 800f81c:	4606      	mov	r6, r0
 800f81e:	b9ad      	cbnz	r5, 800f84c <rmw_uxrce_init_topic_memory+0x38>
 800f820:	231c      	movs	r3, #28
 800f822:	e9c0 5500 	strd	r5, r5, [r0]
 800f826:	6083      	str	r3, [r0, #8]
 800f828:	f240 1301 	movw	r3, #257	; 0x101
 800f82c:	4617      	mov	r7, r2
 800f82e:	8183      	strh	r3, [r0, #12]
 800f830:	460c      	mov	r4, r1
 800f832:	46a8      	mov	r8, r5
 800f834:	4621      	mov	r1, r4
 800f836:	4630      	mov	r0, r6
 800f838:	3501      	adds	r5, #1
 800f83a:	f005 fab9 	bl	8014db0 <put_memory>
 800f83e:	42af      	cmp	r7, r5
 800f840:	60a4      	str	r4, [r4, #8]
 800f842:	f884 800c 	strb.w	r8, [r4, #12]
 800f846:	f104 041c 	add.w	r4, r4, #28
 800f84a:	d1f3      	bne.n	800f834 <rmw_uxrce_init_topic_memory+0x20>
 800f84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop

0800f854 <rmw_uxrce_init_static_input_buffer_memory>:
 800f854:	b1ea      	cbz	r2, 800f892 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f85a:	7b05      	ldrb	r5, [r0, #12]
 800f85c:	4606      	mov	r6, r0
 800f85e:	b9b5      	cbnz	r5, 800f88e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f860:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800f864:	e9c0 5500 	strd	r5, r5, [r0]
 800f868:	6083      	str	r3, [r0, #8]
 800f86a:	f240 1301 	movw	r3, #257	; 0x101
 800f86e:	4617      	mov	r7, r2
 800f870:	8183      	strh	r3, [r0, #12]
 800f872:	460c      	mov	r4, r1
 800f874:	46a8      	mov	r8, r5
 800f876:	4621      	mov	r1, r4
 800f878:	4630      	mov	r0, r6
 800f87a:	3501      	adds	r5, #1
 800f87c:	f005 fa98 	bl	8014db0 <put_memory>
 800f880:	42af      	cmp	r7, r5
 800f882:	60a4      	str	r4, [r4, #8]
 800f884:	f884 800c 	strb.w	r8, [r4, #12]
 800f888:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800f88c:	d1f3      	bne.n	800f876 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f892:	4770      	bx	lr

0800f894 <rmw_uxrce_init_init_options_impl_memory>:
 800f894:	b1e2      	cbz	r2, 800f8d0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f89a:	7b05      	ldrb	r5, [r0, #12]
 800f89c:	4606      	mov	r6, r0
 800f89e:	b9ad      	cbnz	r5, 800f8cc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f8a0:	232c      	movs	r3, #44	; 0x2c
 800f8a2:	e9c0 5500 	strd	r5, r5, [r0]
 800f8a6:	6083      	str	r3, [r0, #8]
 800f8a8:	f240 1301 	movw	r3, #257	; 0x101
 800f8ac:	4617      	mov	r7, r2
 800f8ae:	8183      	strh	r3, [r0, #12]
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	46a8      	mov	r8, r5
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	3501      	adds	r5, #1
 800f8ba:	f005 fa79 	bl	8014db0 <put_memory>
 800f8be:	42af      	cmp	r7, r5
 800f8c0:	60a4      	str	r4, [r4, #8]
 800f8c2:	f884 800c 	strb.w	r8, [r4, #12]
 800f8c6:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800f8ca:	d1f3      	bne.n	800f8b4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop

0800f8d4 <rmw_uxrce_init_wait_set_memory>:
 800f8d4:	b1e2      	cbz	r2, 800f910 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8da:	7b05      	ldrb	r5, [r0, #12]
 800f8dc:	4606      	mov	r6, r0
 800f8de:	b9ad      	cbnz	r5, 800f90c <rmw_uxrce_init_wait_set_memory+0x38>
 800f8e0:	231c      	movs	r3, #28
 800f8e2:	e9c0 5500 	strd	r5, r5, [r0]
 800f8e6:	6083      	str	r3, [r0, #8]
 800f8e8:	f240 1301 	movw	r3, #257	; 0x101
 800f8ec:	4617      	mov	r7, r2
 800f8ee:	8183      	strh	r3, [r0, #12]
 800f8f0:	460c      	mov	r4, r1
 800f8f2:	46a8      	mov	r8, r5
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	3501      	adds	r5, #1
 800f8fa:	f005 fa59 	bl	8014db0 <put_memory>
 800f8fe:	42af      	cmp	r7, r5
 800f900:	60a4      	str	r4, [r4, #8]
 800f902:	f884 800c 	strb.w	r8, [r4, #12]
 800f906:	f104 041c 	add.w	r4, r4, #28
 800f90a:	d1f3      	bne.n	800f8f4 <rmw_uxrce_init_wait_set_memory+0x20>
 800f90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop

0800f914 <rmw_uxrce_init_guard_condition_memory>:
 800f914:	b1e2      	cbz	r2, 800f950 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f91a:	7b05      	ldrb	r5, [r0, #12]
 800f91c:	4606      	mov	r6, r0
 800f91e:	b9ad      	cbnz	r5, 800f94c <rmw_uxrce_init_guard_condition_memory+0x38>
 800f920:	2320      	movs	r3, #32
 800f922:	e9c0 5500 	strd	r5, r5, [r0]
 800f926:	6083      	str	r3, [r0, #8]
 800f928:	f240 1301 	movw	r3, #257	; 0x101
 800f92c:	4617      	mov	r7, r2
 800f92e:	8183      	strh	r3, [r0, #12]
 800f930:	460c      	mov	r4, r1
 800f932:	46a8      	mov	r8, r5
 800f934:	4621      	mov	r1, r4
 800f936:	4630      	mov	r0, r6
 800f938:	3501      	adds	r5, #1
 800f93a:	f005 fa39 	bl	8014db0 <put_memory>
 800f93e:	42af      	cmp	r7, r5
 800f940:	60a4      	str	r4, [r4, #8]
 800f942:	f884 800c 	strb.w	r8, [r4, #12]
 800f946:	f104 0420 	add.w	r4, r4, #32
 800f94a:	d1f3      	bne.n	800f934 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop

0800f954 <rmw_uxrce_fini_session_memory>:
 800f954:	4601      	mov	r1, r0
 800f956:	4801      	ldr	r0, [pc, #4]	; (800f95c <rmw_uxrce_fini_session_memory+0x8>)
 800f958:	f005 ba2a 	b.w	8014db0 <put_memory>
 800f95c:	2000e214 	.word	0x2000e214

0800f960 <rmw_uxrce_fini_node_memory>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4604      	mov	r4, r0
 800f964:	6800      	ldr	r0, [r0, #0]
 800f966:	b128      	cbz	r0, 800f974 <rmw_uxrce_fini_node_memory+0x14>
 800f968:	4b07      	ldr	r3, [pc, #28]	; (800f988 <rmw_uxrce_fini_node_memory+0x28>)
 800f96a:	6819      	ldr	r1, [r3, #0]
 800f96c:	f7f0 fc30 	bl	80001d0 <strcmp>
 800f970:	b940      	cbnz	r0, 800f984 <rmw_uxrce_fini_node_memory+0x24>
 800f972:	6020      	str	r0, [r4, #0]
 800f974:	6861      	ldr	r1, [r4, #4]
 800f976:	b129      	cbz	r1, 800f984 <rmw_uxrce_fini_node_memory+0x24>
 800f978:	2500      	movs	r5, #0
 800f97a:	4804      	ldr	r0, [pc, #16]	; (800f98c <rmw_uxrce_fini_node_memory+0x2c>)
 800f97c:	610d      	str	r5, [r1, #16]
 800f97e:	f005 fa17 	bl	8014db0 <put_memory>
 800f982:	6065      	str	r5, [r4, #4]
 800f984:	bd38      	pop	{r3, r4, r5, pc}
 800f986:	bf00      	nop
 800f988:	080199e4 	.word	0x080199e4
 800f98c:	2000e1e4 	.word	0x2000e1e4

0800f990 <rmw_uxrce_fini_publisher_memory>:
 800f990:	b510      	push	{r4, lr}
 800f992:	4604      	mov	r4, r0
 800f994:	6800      	ldr	r0, [r0, #0]
 800f996:	b128      	cbz	r0, 800f9a4 <rmw_uxrce_fini_publisher_memory+0x14>
 800f998:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f99a:	6819      	ldr	r1, [r3, #0]
 800f99c:	f7f0 fc18 	bl	80001d0 <strcmp>
 800f9a0:	b938      	cbnz	r0, 800f9b2 <rmw_uxrce_fini_publisher_memory+0x22>
 800f9a2:	6020      	str	r0, [r4, #0]
 800f9a4:	6861      	ldr	r1, [r4, #4]
 800f9a6:	b121      	cbz	r1, 800f9b2 <rmw_uxrce_fini_publisher_memory+0x22>
 800f9a8:	4803      	ldr	r0, [pc, #12]	; (800f9b8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f9aa:	f005 fa01 	bl	8014db0 <put_memory>
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	6063      	str	r3, [r4, #4]
 800f9b2:	bd10      	pop	{r4, pc}
 800f9b4:	080199e4 	.word	0x080199e4
 800f9b8:	2000e1f4 	.word	0x2000e1f4

0800f9bc <rmw_uxrce_fini_subscription_memory>:
 800f9bc:	b510      	push	{r4, lr}
 800f9be:	4604      	mov	r4, r0
 800f9c0:	6800      	ldr	r0, [r0, #0]
 800f9c2:	b128      	cbz	r0, 800f9d0 <rmw_uxrce_fini_subscription_memory+0x14>
 800f9c4:	4b06      	ldr	r3, [pc, #24]	; (800f9e0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f9c6:	6819      	ldr	r1, [r3, #0]
 800f9c8:	f7f0 fc02 	bl	80001d0 <strcmp>
 800f9cc:	b938      	cbnz	r0, 800f9de <rmw_uxrce_fini_subscription_memory+0x22>
 800f9ce:	6020      	str	r0, [r4, #0]
 800f9d0:	6861      	ldr	r1, [r4, #4]
 800f9d2:	b121      	cbz	r1, 800f9de <rmw_uxrce_fini_subscription_memory+0x22>
 800f9d4:	4803      	ldr	r0, [pc, #12]	; (800f9e4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f9d6:	f005 f9eb 	bl	8014db0 <put_memory>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	6063      	str	r3, [r4, #4]
 800f9de:	bd10      	pop	{r4, pc}
 800f9e0:	080199e4 	.word	0x080199e4
 800f9e4:	2000e234 	.word	0x2000e234

0800f9e8 <rmw_uxrce_fini_service_memory>:
 800f9e8:	b510      	push	{r4, lr}
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	6800      	ldr	r0, [r0, #0]
 800f9ee:	b128      	cbz	r0, 800f9fc <rmw_uxrce_fini_service_memory+0x14>
 800f9f0:	4b06      	ldr	r3, [pc, #24]	; (800fa0c <rmw_uxrce_fini_service_memory+0x24>)
 800f9f2:	6819      	ldr	r1, [r3, #0]
 800f9f4:	f7f0 fbec 	bl	80001d0 <strcmp>
 800f9f8:	b938      	cbnz	r0, 800fa0a <rmw_uxrce_fini_service_memory+0x22>
 800f9fa:	6020      	str	r0, [r4, #0]
 800f9fc:	6861      	ldr	r1, [r4, #4]
 800f9fe:	b121      	cbz	r1, 800fa0a <rmw_uxrce_fini_service_memory+0x22>
 800fa00:	4803      	ldr	r0, [pc, #12]	; (800fa10 <rmw_uxrce_fini_service_memory+0x28>)
 800fa02:	f005 f9d5 	bl	8014db0 <put_memory>
 800fa06:	2300      	movs	r3, #0
 800fa08:	6063      	str	r3, [r4, #4]
 800fa0a:	bd10      	pop	{r4, pc}
 800fa0c:	080199e4 	.word	0x080199e4
 800fa10:	2000e204 	.word	0x2000e204

0800fa14 <rmw_uxrce_fini_client_memory>:
 800fa14:	b510      	push	{r4, lr}
 800fa16:	4604      	mov	r4, r0
 800fa18:	6800      	ldr	r0, [r0, #0]
 800fa1a:	b128      	cbz	r0, 800fa28 <rmw_uxrce_fini_client_memory+0x14>
 800fa1c:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <rmw_uxrce_fini_client_memory+0x24>)
 800fa1e:	6819      	ldr	r1, [r3, #0]
 800fa20:	f7f0 fbd6 	bl	80001d0 <strcmp>
 800fa24:	b938      	cbnz	r0, 800fa36 <rmw_uxrce_fini_client_memory+0x22>
 800fa26:	6020      	str	r0, [r4, #0]
 800fa28:	6861      	ldr	r1, [r4, #4]
 800fa2a:	b121      	cbz	r1, 800fa36 <rmw_uxrce_fini_client_memory+0x22>
 800fa2c:	4803      	ldr	r0, [pc, #12]	; (800fa3c <rmw_uxrce_fini_client_memory+0x28>)
 800fa2e:	f005 f9bf 	bl	8014db0 <put_memory>
 800fa32:	2300      	movs	r3, #0
 800fa34:	6063      	str	r3, [r4, #4]
 800fa36:	bd10      	pop	{r4, pc}
 800fa38:	080199e4 	.word	0x080199e4
 800fa3c:	20009918 	.word	0x20009918

0800fa40 <rmw_uxrce_fini_topic_memory>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	4604      	mov	r4, r0
 800fa44:	4621      	mov	r1, r4
 800fa46:	4803      	ldr	r0, [pc, #12]	; (800fa54 <rmw_uxrce_fini_topic_memory+0x14>)
 800fa48:	f005 f9b2 	bl	8014db0 <put_memory>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	61a3      	str	r3, [r4, #24]
 800fa50:	bd10      	pop	{r4, pc}
 800fa52:	bf00      	nop
 800fa54:	2000e244 	.word	0x2000e244

0800fa58 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800fa58:	b082      	sub	sp, #8
 800fa5a:	b530      	push	{r4, r5, lr}
 800fa5c:	4925      	ldr	r1, [pc, #148]	; (800faf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fa5e:	680d      	ldr	r5, [r1, #0]
 800fa60:	ac03      	add	r4, sp, #12
 800fa62:	e884 000c 	stmia.w	r4, {r2, r3}
 800fa66:	461c      	mov	r4, r3
 800fa68:	2d00      	cmp	r5, #0
 800fa6a:	d041      	beq.n	800faf0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800fa6c:	462b      	mov	r3, r5
 800fa6e:	2100      	movs	r1, #0
 800fa70:	689a      	ldr	r2, [r3, #8]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800fa78:	4290      	cmp	r0, r2
 800fa7a:	bf08      	it	eq
 800fa7c:	3101      	addeq	r1, #1
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1f6      	bne.n	800fa70 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fa82:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d029      	beq.n	800fade <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fa8a:	d907      	bls.n	800fa9c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fa8c:	2b03      	cmp	r3, #3
 800fa8e:	d005      	beq.n	800fa9c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fa90:	2100      	movs	r1, #0
 800fa92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa96:	4608      	mov	r0, r1
 800fa98:	b002      	add	sp, #8
 800fa9a:	4770      	bx	lr
 800fa9c:	b314      	cbz	r4, 800fae4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fa9e:	428c      	cmp	r4, r1
 800faa0:	d820      	bhi.n	800fae4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800faa2:	2d00      	cmp	r5, #0
 800faa4:	d0f4      	beq.n	800fa90 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800faa6:	2100      	movs	r1, #0
 800faa8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800faac:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800fab0:	e002      	b.n	800fab8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800fab2:	686d      	ldr	r5, [r5, #4]
 800fab4:	2d00      	cmp	r5, #0
 800fab6:	d0ec      	beq.n	800fa92 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800fab8:	68ab      	ldr	r3, [r5, #8]
 800faba:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800fabe:	4290      	cmp	r0, r2
 800fac0:	d1f7      	bne.n	800fab2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fac2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800fac6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800faca:	4562      	cmp	r2, ip
 800facc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800fad0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800fad4:	daed      	bge.n	800fab2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fad6:	4694      	mov	ip, r2
 800fad8:	461c      	mov	r4, r3
 800fada:	4629      	mov	r1, r5
 800fadc:	e7e9      	b.n	800fab2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fade:	b10c      	cbz	r4, 800fae4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fae0:	428c      	cmp	r4, r1
 800fae2:	d9d5      	bls.n	800fa90 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fae8:	4802      	ldr	r0, [pc, #8]	; (800faf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800faea:	b002      	add	sp, #8
 800faec:	f005 b950 	b.w	8014d90 <get_memory>
 800faf0:	4629      	mov	r1, r5
 800faf2:	e7c6      	b.n	800fa82 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800faf4:	2000e224 	.word	0x2000e224

0800faf8 <run_xrce_session>:
 800faf8:	b510      	push	{r4, lr}
 800fafa:	788c      	ldrb	r4, [r1, #2]
 800fafc:	b086      	sub	sp, #24
 800fafe:	2c01      	cmp	r4, #1
 800fb00:	f8ad 200e 	strh.w	r2, [sp, #14]
 800fb04:	d00c      	beq.n	800fb20 <run_xrce_session+0x28>
 800fb06:	4619      	mov	r1, r3
 800fb08:	2301      	movs	r3, #1
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	f10d 020e 	add.w	r2, sp, #14
 800fb10:	f10d 0317 	add.w	r3, sp, #23
 800fb14:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fb18:	f001 ff7e 	bl	8011a18 <uxr_run_session_until_all_status>
 800fb1c:	b006      	add	sp, #24
 800fb1e:	bd10      	pop	{r4, pc}
 800fb20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fb24:	f001 fbcc 	bl	80112c0 <uxr_flash_output_streams>
 800fb28:	4620      	mov	r0, r4
 800fb2a:	b006      	add	sp, #24
 800fb2c:	bd10      	pop	{r4, pc}
 800fb2e:	bf00      	nop

0800fb30 <convert_qos_profile>:
 800fb30:	7a4a      	ldrb	r2, [r1, #9]
 800fb32:	f891 c008 	ldrb.w	ip, [r1, #8]
 800fb36:	2a02      	cmp	r2, #2
 800fb38:	bf18      	it	ne
 800fb3a:	2200      	movne	r2, #0
 800fb3c:	7002      	strb	r2, [r0, #0]
 800fb3e:	780a      	ldrb	r2, [r1, #0]
 800fb40:	8889      	ldrh	r1, [r1, #4]
 800fb42:	8081      	strh	r1, [r0, #4]
 800fb44:	f1ac 0c02 	sub.w	ip, ip, #2
 800fb48:	f1a2 0202 	sub.w	r2, r2, #2
 800fb4c:	fabc fc8c 	clz	ip, ip
 800fb50:	fab2 f282 	clz	r2, r2
 800fb54:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800fb58:	0952      	lsrs	r2, r2, #5
 800fb5a:	f880 c001 	strb.w	ip, [r0, #1]
 800fb5e:	7082      	strb	r2, [r0, #2]
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop

0800fb64 <generate_type_name>:
 800fb64:	b530      	push	{r4, r5, lr}
 800fb66:	2300      	movs	r3, #0
 800fb68:	700b      	strb	r3, [r1, #0]
 800fb6a:	6803      	ldr	r3, [r0, #0]
 800fb6c:	b087      	sub	sp, #28
 800fb6e:	4614      	mov	r4, r2
 800fb70:	b1d3      	cbz	r3, 800fba8 <generate_type_name+0x44>
 800fb72:	4a0f      	ldr	r2, [pc, #60]	; (800fbb0 <generate_type_name+0x4c>)
 800fb74:	4615      	mov	r5, r2
 800fb76:	9203      	str	r2, [sp, #12]
 800fb78:	9500      	str	r5, [sp, #0]
 800fb7a:	6842      	ldr	r2, [r0, #4]
 800fb7c:	480d      	ldr	r0, [pc, #52]	; (800fbb4 <generate_type_name+0x50>)
 800fb7e:	9001      	str	r0, [sp, #4]
 800fb80:	4608      	mov	r0, r1
 800fb82:	490d      	ldr	r1, [pc, #52]	; (800fbb8 <generate_type_name+0x54>)
 800fb84:	9204      	str	r2, [sp, #16]
 800fb86:	9105      	str	r1, [sp, #20]
 800fb88:	9102      	str	r1, [sp, #8]
 800fb8a:	4a0c      	ldr	r2, [pc, #48]	; (800fbbc <generate_type_name+0x58>)
 800fb8c:	4621      	mov	r1, r4
 800fb8e:	f008 fac9 	bl	8018124 <sniprintf>
 800fb92:	2800      	cmp	r0, #0
 800fb94:	db05      	blt.n	800fba2 <generate_type_name+0x3e>
 800fb96:	4284      	cmp	r4, r0
 800fb98:	bfd4      	ite	le
 800fb9a:	2000      	movle	r0, #0
 800fb9c:	2001      	movgt	r0, #1
 800fb9e:	b007      	add	sp, #28
 800fba0:	bd30      	pop	{r4, r5, pc}
 800fba2:	2000      	movs	r0, #0
 800fba4:	b007      	add	sp, #28
 800fba6:	bd30      	pop	{r4, r5, pc}
 800fba8:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <generate_type_name+0x5c>)
 800fbaa:	4a01      	ldr	r2, [pc, #4]	; (800fbb0 <generate_type_name+0x4c>)
 800fbac:	461d      	mov	r5, r3
 800fbae:	e7e2      	b.n	800fb76 <generate_type_name+0x12>
 800fbb0:	080193ec 	.word	0x080193ec
 800fbb4:	08019404 	.word	0x08019404
 800fbb8:	08019400 	.word	0x08019400
 800fbbc:	080193f0 	.word	0x080193f0
 800fbc0:	080197bc 	.word	0x080197bc

0800fbc4 <generate_topic_name>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	4614      	mov	r4, r2
 800fbca:	9000      	str	r0, [sp, #0]
 800fbcc:	4b08      	ldr	r3, [pc, #32]	; (800fbf0 <generate_topic_name+0x2c>)
 800fbce:	4a09      	ldr	r2, [pc, #36]	; (800fbf4 <generate_topic_name+0x30>)
 800fbd0:	4608      	mov	r0, r1
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	f008 faa6 	bl	8018124 <sniprintf>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	db05      	blt.n	800fbe8 <generate_topic_name+0x24>
 800fbdc:	4284      	cmp	r4, r0
 800fbde:	bfd4      	ite	le
 800fbe0:	2000      	movle	r0, #0
 800fbe2:	2001      	movgt	r0, #1
 800fbe4:	b002      	add	sp, #8
 800fbe6:	bd10      	pop	{r4, pc}
 800fbe8:	2000      	movs	r0, #0
 800fbea:	b002      	add	sp, #8
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	bf00      	nop
 800fbf0:	08019410 	.word	0x08019410
 800fbf4:	08019408 	.word	0x08019408

0800fbf8 <is_uxrce_rmw_identifier_valid>:
 800fbf8:	b510      	push	{r4, lr}
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	b140      	cbz	r0, 800fc10 <is_uxrce_rmw_identifier_valid+0x18>
 800fbfe:	f005 f8eb 	bl	8014dd8 <rmw_get_implementation_identifier>
 800fc02:	4601      	mov	r1, r0
 800fc04:	4620      	mov	r0, r4
 800fc06:	f7f0 fae3 	bl	80001d0 <strcmp>
 800fc0a:	fab0 f080 	clz	r0, r0
 800fc0e:	0940      	lsrs	r0, r0, #5
 800fc10:	bd10      	pop	{r4, pc}
 800fc12:	bf00      	nop

0800fc14 <get_message_typesupport_handle>:
 800fc14:	6883      	ldr	r3, [r0, #8]
 800fc16:	4718      	bx	r3

0800fc18 <get_message_typesupport_handle_function>:
 800fc18:	b510      	push	{r4, lr}
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	6800      	ldr	r0, [r0, #0]
 800fc1e:	f7f0 fad7 	bl	80001d0 <strcmp>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	bf0c      	ite	eq
 800fc26:	4620      	moveq	r0, r4
 800fc28:	2000      	movne	r0, #0
 800fc2a:	bd10      	pop	{r4, pc}

0800fc2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fc2c:	4b04      	ldr	r3, [pc, #16]	; (800fc40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	b10a      	cbz	r2, 800fc36 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800fc32:	4803      	ldr	r0, [pc, #12]	; (800fc40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fc34:	4770      	bx	lr
 800fc36:	4a03      	ldr	r2, [pc, #12]	; (800fc44 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800fc38:	4801      	ldr	r0, [pc, #4]	; (800fc40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fc3a:	6812      	ldr	r2, [r2, #0]
 800fc3c:	601a      	str	r2, [r3, #0]
 800fc3e:	4770      	bx	lr
 800fc40:	20000050 	.word	0x20000050
 800fc44:	200000cc 	.word	0x200000cc

0800fc48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fc48:	4a02      	ldr	r2, [pc, #8]	; (800fc54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800fc4a:	4b03      	ldr	r3, [pc, #12]	; (800fc58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800fc4c:	6812      	ldr	r2, [r2, #0]
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	200000cc 	.word	0x200000cc
 800fc58:	20000050 	.word	0x20000050

0800fc5c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800fc5c:	f005 bda0 	b.w	80157a0 <std_msgs__msg__Int32__init>

0800fc60 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800fc60:	f005 bda2 	b.w	80157a8 <std_msgs__msg__Int32__fini>

0800fc64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fc64:	4b04      	ldr	r3, [pc, #16]	; (800fc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	b10a      	cbz	r2, 800fc6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800fc6a:	4803      	ldr	r0, [pc, #12]	; (800fc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fc6c:	4770      	bx	lr
 800fc6e:	4a03      	ldr	r2, [pc, #12]	; (800fc7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800fc70:	4801      	ldr	r0, [pc, #4]	; (800fc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fc72:	6812      	ldr	r2, [r2, #0]
 800fc74:	601a      	str	r2, [r3, #0]
 800fc76:	4770      	bx	lr
 800fc78:	20000098 	.word	0x20000098
 800fc7c:	200000d0 	.word	0x200000d0

0800fc80 <_Int32__max_serialized_size>:
 800fc80:	b508      	push	{r3, lr}
 800fc82:	2104      	movs	r1, #4
 800fc84:	2000      	movs	r0, #0
 800fc86:	f001 f807 	bl	8010c98 <ucdr_alignment>
 800fc8a:	3004      	adds	r0, #4
 800fc8c:	bd08      	pop	{r3, pc}
 800fc8e:	bf00      	nop

0800fc90 <_Int32__cdr_deserialize>:
 800fc90:	b109      	cbz	r1, 800fc96 <_Int32__cdr_deserialize+0x6>
 800fc92:	f000 bf19 	b.w	8010ac8 <ucdr_deserialize_int32_t>
 800fc96:	4608      	mov	r0, r1
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop

0800fc9c <get_serialized_size_std_msgs__msg__Int32>:
 800fc9c:	b138      	cbz	r0, 800fcae <get_serialized_size_std_msgs__msg__Int32+0x12>
 800fc9e:	b508      	push	{r3, lr}
 800fca0:	460b      	mov	r3, r1
 800fca2:	4618      	mov	r0, r3
 800fca4:	2104      	movs	r1, #4
 800fca6:	f000 fff7 	bl	8010c98 <ucdr_alignment>
 800fcaa:	3004      	adds	r0, #4
 800fcac:	bd08      	pop	{r3, pc}
 800fcae:	4770      	bx	lr

0800fcb0 <_Int32__cdr_serialize>:
 800fcb0:	460a      	mov	r2, r1
 800fcb2:	b118      	cbz	r0, 800fcbc <_Int32__cdr_serialize+0xc>
 800fcb4:	6801      	ldr	r1, [r0, #0]
 800fcb6:	4610      	mov	r0, r2
 800fcb8:	f000 be6e 	b.w	8010998 <ucdr_serialize_int32_t>
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop

0800fcc0 <_Int32__get_serialized_size>:
 800fcc0:	b130      	cbz	r0, 800fcd0 <_Int32__get_serialized_size+0x10>
 800fcc2:	b508      	push	{r3, lr}
 800fcc4:	2104      	movs	r1, #4
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	f000 ffe6 	bl	8010c98 <ucdr_alignment>
 800fccc:	3004      	adds	r0, #4
 800fcce:	bd08      	pop	{r3, pc}
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop

0800fcd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fcd4:	4800      	ldr	r0, [pc, #0]	; (800fcd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800fcd6:	4770      	bx	lr
 800fcd8:	200000a4 	.word	0x200000a4

0800fcdc <ucdr_serialize_bool>:
 800fcdc:	b538      	push	{r3, r4, r5, lr}
 800fcde:	460d      	mov	r5, r1
 800fce0:	2101      	movs	r1, #1
 800fce2:	4604      	mov	r4, r0
 800fce4:	f000 ff8c 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800fce8:	b148      	cbz	r0, 800fcfe <ucdr_serialize_bool+0x22>
 800fcea:	68a3      	ldr	r3, [r4, #8]
 800fcec:	701d      	strb	r5, [r3, #0]
 800fcee:	68a2      	ldr	r2, [r4, #8]
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	2101      	movs	r1, #1
 800fcf4:	440a      	add	r2, r1
 800fcf6:	440b      	add	r3, r1
 800fcf8:	60a2      	str	r2, [r4, #8]
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	7561      	strb	r1, [r4, #21]
 800fcfe:	7da0      	ldrb	r0, [r4, #22]
 800fd00:	f080 0001 	eor.w	r0, r0, #1
 800fd04:	bd38      	pop	{r3, r4, r5, pc}
 800fd06:	bf00      	nop

0800fd08 <ucdr_deserialize_bool>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	460d      	mov	r5, r1
 800fd0c:	2101      	movs	r1, #1
 800fd0e:	4604      	mov	r4, r0
 800fd10:	f000 ff76 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800fd14:	b160      	cbz	r0, 800fd30 <ucdr_deserialize_bool+0x28>
 800fd16:	68a2      	ldr	r2, [r4, #8]
 800fd18:	6923      	ldr	r3, [r4, #16]
 800fd1a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fd1e:	3900      	subs	r1, #0
 800fd20:	bf18      	it	ne
 800fd22:	2101      	movne	r1, #1
 800fd24:	7029      	strb	r1, [r5, #0]
 800fd26:	3301      	adds	r3, #1
 800fd28:	2101      	movs	r1, #1
 800fd2a:	60a2      	str	r2, [r4, #8]
 800fd2c:	6123      	str	r3, [r4, #16]
 800fd2e:	7561      	strb	r1, [r4, #21]
 800fd30:	7da0      	ldrb	r0, [r4, #22]
 800fd32:	f080 0001 	eor.w	r0, r0, #1
 800fd36:	bd38      	pop	{r3, r4, r5, pc}

0800fd38 <ucdr_serialize_uint8_t>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	460d      	mov	r5, r1
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	4604      	mov	r4, r0
 800fd40:	f000 ff5e 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800fd44:	b148      	cbz	r0, 800fd5a <ucdr_serialize_uint8_t+0x22>
 800fd46:	68a3      	ldr	r3, [r4, #8]
 800fd48:	701d      	strb	r5, [r3, #0]
 800fd4a:	68a2      	ldr	r2, [r4, #8]
 800fd4c:	6923      	ldr	r3, [r4, #16]
 800fd4e:	2101      	movs	r1, #1
 800fd50:	440a      	add	r2, r1
 800fd52:	440b      	add	r3, r1
 800fd54:	60a2      	str	r2, [r4, #8]
 800fd56:	6123      	str	r3, [r4, #16]
 800fd58:	7561      	strb	r1, [r4, #21]
 800fd5a:	7da0      	ldrb	r0, [r4, #22]
 800fd5c:	f080 0001 	eor.w	r0, r0, #1
 800fd60:	bd38      	pop	{r3, r4, r5, pc}
 800fd62:	bf00      	nop

0800fd64 <ucdr_deserialize_uint8_t>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	460d      	mov	r5, r1
 800fd68:	2101      	movs	r1, #1
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	f000 ff48 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800fd70:	b150      	cbz	r0, 800fd88 <ucdr_deserialize_uint8_t+0x24>
 800fd72:	68a3      	ldr	r3, [r4, #8]
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	702b      	strb	r3, [r5, #0]
 800fd78:	68a2      	ldr	r2, [r4, #8]
 800fd7a:	6923      	ldr	r3, [r4, #16]
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	440a      	add	r2, r1
 800fd80:	440b      	add	r3, r1
 800fd82:	60a2      	str	r2, [r4, #8]
 800fd84:	6123      	str	r3, [r4, #16]
 800fd86:	7561      	strb	r1, [r4, #21]
 800fd88:	7da0      	ldrb	r0, [r4, #22]
 800fd8a:	f080 0001 	eor.w	r0, r0, #1
 800fd8e:	bd38      	pop	{r3, r4, r5, pc}

0800fd90 <ucdr_serialize_uint16_t>:
 800fd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd94:	b082      	sub	sp, #8
 800fd96:	460b      	mov	r3, r1
 800fd98:	2102      	movs	r1, #2
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fda0:	f000 ff82 	bl	8010ca8 <ucdr_buffer_alignment>
 800fda4:	4601      	mov	r1, r0
 800fda6:	4620      	mov	r0, r4
 800fda8:	7d67      	ldrb	r7, [r4, #21]
 800fdaa:	f000 ffc1 	bl	8010d30 <ucdr_advance_buffer>
 800fdae:	2102      	movs	r1, #2
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 ff19 	bl	8010be8 <ucdr_check_buffer_available_for>
 800fdb6:	bb78      	cbnz	r0, 800fe18 <ucdr_serialize_uint16_t+0x88>
 800fdb8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fdbc:	42ab      	cmp	r3, r5
 800fdbe:	d926      	bls.n	800fe0e <ucdr_serialize_uint16_t+0x7e>
 800fdc0:	1b5e      	subs	r6, r3, r5
 800fdc2:	60a3      	str	r3, [r4, #8]
 800fdc4:	6923      	ldr	r3, [r4, #16]
 800fdc6:	f1c6 0802 	rsb	r8, r6, #2
 800fdca:	4433      	add	r3, r6
 800fdcc:	6123      	str	r3, [r4, #16]
 800fdce:	4641      	mov	r1, r8
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 ff15 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d03b      	beq.n	800fe52 <ucdr_serialize_uint16_t+0xc2>
 800fdda:	7d23      	ldrb	r3, [r4, #20]
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d04a      	beq.n	800fe76 <ucdr_serialize_uint16_t+0xe6>
 800fde0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fde4:	702b      	strb	r3, [r5, #0]
 800fde6:	2e00      	cmp	r6, #0
 800fde8:	d040      	beq.n	800fe6c <ucdr_serialize_uint16_t+0xdc>
 800fdea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fdee:	706b      	strb	r3, [r5, #1]
 800fdf0:	6923      	ldr	r3, [r4, #16]
 800fdf2:	68a2      	ldr	r2, [r4, #8]
 800fdf4:	7da0      	ldrb	r0, [r4, #22]
 800fdf6:	3302      	adds	r3, #2
 800fdf8:	1b9e      	subs	r6, r3, r6
 800fdfa:	4442      	add	r2, r8
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	f080 0001 	eor.w	r0, r0, #1
 800fe02:	60a2      	str	r2, [r4, #8]
 800fe04:	6126      	str	r6, [r4, #16]
 800fe06:	7563      	strb	r3, [r4, #21]
 800fe08:	b002      	add	sp, #8
 800fe0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe0e:	2102      	movs	r1, #2
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 fef5 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800fe16:	b190      	cbz	r0, 800fe3e <ucdr_serialize_uint16_t+0xae>
 800fe18:	7d23      	ldrb	r3, [r4, #20]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	68a3      	ldr	r3, [r4, #8]
 800fe1e:	d014      	beq.n	800fe4a <ucdr_serialize_uint16_t+0xba>
 800fe20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fe24:	701a      	strb	r2, [r3, #0]
 800fe26:	68a3      	ldr	r3, [r4, #8]
 800fe28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe2c:	705a      	strb	r2, [r3, #1]
 800fe2e:	68a2      	ldr	r2, [r4, #8]
 800fe30:	6923      	ldr	r3, [r4, #16]
 800fe32:	3202      	adds	r2, #2
 800fe34:	3302      	adds	r3, #2
 800fe36:	2102      	movs	r1, #2
 800fe38:	60a2      	str	r2, [r4, #8]
 800fe3a:	6123      	str	r3, [r4, #16]
 800fe3c:	7561      	strb	r1, [r4, #21]
 800fe3e:	7da0      	ldrb	r0, [r4, #22]
 800fe40:	f080 0001 	eor.w	r0, r0, #1
 800fe44:	b002      	add	sp, #8
 800fe46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fe4e:	801a      	strh	r2, [r3, #0]
 800fe50:	e7ed      	b.n	800fe2e <ucdr_serialize_uint16_t+0x9e>
 800fe52:	68a2      	ldr	r2, [r4, #8]
 800fe54:	6923      	ldr	r3, [r4, #16]
 800fe56:	7da0      	ldrb	r0, [r4, #22]
 800fe58:	7567      	strb	r7, [r4, #21]
 800fe5a:	1b92      	subs	r2, r2, r6
 800fe5c:	1b9b      	subs	r3, r3, r6
 800fe5e:	f080 0001 	eor.w	r0, r0, #1
 800fe62:	60a2      	str	r2, [r4, #8]
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	b002      	add	sp, #8
 800fe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe6c:	68a3      	ldr	r3, [r4, #8]
 800fe6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe72:	701a      	strb	r2, [r3, #0]
 800fe74:	e7bc      	b.n	800fdf0 <ucdr_serialize_uint16_t+0x60>
 800fe76:	4628      	mov	r0, r5
 800fe78:	f10d 0506 	add.w	r5, sp, #6
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	4632      	mov	r2, r6
 800fe80:	f008 fac8 	bl	8018414 <memcpy>
 800fe84:	68a0      	ldr	r0, [r4, #8]
 800fe86:	4642      	mov	r2, r8
 800fe88:	19a9      	adds	r1, r5, r6
 800fe8a:	f008 fac3 	bl	8018414 <memcpy>
 800fe8e:	e7af      	b.n	800fdf0 <ucdr_serialize_uint16_t+0x60>

0800fe90 <ucdr_serialize_endian_uint16_t>:
 800fe90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe94:	b083      	sub	sp, #12
 800fe96:	460d      	mov	r5, r1
 800fe98:	2102      	movs	r1, #2
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fea0:	f000 ff02 	bl	8010ca8 <ucdr_buffer_alignment>
 800fea4:	4601      	mov	r1, r0
 800fea6:	4620      	mov	r0, r4
 800fea8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800feac:	f000 ff40 	bl	8010d30 <ucdr_advance_buffer>
 800feb0:	2102      	movs	r1, #2
 800feb2:	4620      	mov	r0, r4
 800feb4:	f000 fe98 	bl	8010be8 <ucdr_check_buffer_available_for>
 800feb8:	bb70      	cbnz	r0, 800ff18 <ucdr_serialize_endian_uint16_t+0x88>
 800feba:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800febe:	42be      	cmp	r6, r7
 800fec0:	d925      	bls.n	800ff0e <ucdr_serialize_endian_uint16_t+0x7e>
 800fec2:	6923      	ldr	r3, [r4, #16]
 800fec4:	60a6      	str	r6, [r4, #8]
 800fec6:	1bf6      	subs	r6, r6, r7
 800fec8:	4433      	add	r3, r6
 800feca:	f1c6 0902 	rsb	r9, r6, #2
 800fece:	6123      	str	r3, [r4, #16]
 800fed0:	4649      	mov	r1, r9
 800fed2:	4620      	mov	r0, r4
 800fed4:	f000 fe94 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d039      	beq.n	800ff50 <ucdr_serialize_endian_uint16_t+0xc0>
 800fedc:	2d01      	cmp	r5, #1
 800fede:	d04a      	beq.n	800ff76 <ucdr_serialize_endian_uint16_t+0xe6>
 800fee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fee4:	703b      	strb	r3, [r7, #0]
 800fee6:	2e00      	cmp	r6, #0
 800fee8:	d040      	beq.n	800ff6c <ucdr_serialize_endian_uint16_t+0xdc>
 800feea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800feee:	707b      	strb	r3, [r7, #1]
 800fef0:	6923      	ldr	r3, [r4, #16]
 800fef2:	68a2      	ldr	r2, [r4, #8]
 800fef4:	7da0      	ldrb	r0, [r4, #22]
 800fef6:	3302      	adds	r3, #2
 800fef8:	444a      	add	r2, r9
 800fefa:	1b9b      	subs	r3, r3, r6
 800fefc:	2102      	movs	r1, #2
 800fefe:	f080 0001 	eor.w	r0, r0, #1
 800ff02:	60a2      	str	r2, [r4, #8]
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	7561      	strb	r1, [r4, #21]
 800ff08:	b003      	add	sp, #12
 800ff0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff0e:	2102      	movs	r1, #2
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fe75 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800ff16:	b188      	cbz	r0, 800ff3c <ucdr_serialize_endian_uint16_t+0xac>
 800ff18:	2d01      	cmp	r5, #1
 800ff1a:	68a3      	ldr	r3, [r4, #8]
 800ff1c:	d014      	beq.n	800ff48 <ucdr_serialize_endian_uint16_t+0xb8>
 800ff1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ff22:	701a      	strb	r2, [r3, #0]
 800ff24:	68a3      	ldr	r3, [r4, #8]
 800ff26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff2a:	705a      	strb	r2, [r3, #1]
 800ff2c:	68a2      	ldr	r2, [r4, #8]
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	3202      	adds	r2, #2
 800ff32:	3302      	adds	r3, #2
 800ff34:	2102      	movs	r1, #2
 800ff36:	60a2      	str	r2, [r4, #8]
 800ff38:	6123      	str	r3, [r4, #16]
 800ff3a:	7561      	strb	r1, [r4, #21]
 800ff3c:	7da0      	ldrb	r0, [r4, #22]
 800ff3e:	f080 0001 	eor.w	r0, r0, #1
 800ff42:	b003      	add	sp, #12
 800ff44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff4c:	801a      	strh	r2, [r3, #0]
 800ff4e:	e7ed      	b.n	800ff2c <ucdr_serialize_endian_uint16_t+0x9c>
 800ff50:	68a2      	ldr	r2, [r4, #8]
 800ff52:	6923      	ldr	r3, [r4, #16]
 800ff54:	7da0      	ldrb	r0, [r4, #22]
 800ff56:	f884 8015 	strb.w	r8, [r4, #21]
 800ff5a:	1b92      	subs	r2, r2, r6
 800ff5c:	1b9b      	subs	r3, r3, r6
 800ff5e:	f080 0001 	eor.w	r0, r0, #1
 800ff62:	60a2      	str	r2, [r4, #8]
 800ff64:	6123      	str	r3, [r4, #16]
 800ff66:	b003      	add	sp, #12
 800ff68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff6c:	68a3      	ldr	r3, [r4, #8]
 800ff6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff72:	701a      	strb	r2, [r3, #0]
 800ff74:	e7bc      	b.n	800fef0 <ucdr_serialize_endian_uint16_t+0x60>
 800ff76:	f10d 0506 	add.w	r5, sp, #6
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	4638      	mov	r0, r7
 800ff80:	f008 fa48 	bl	8018414 <memcpy>
 800ff84:	68a0      	ldr	r0, [r4, #8]
 800ff86:	464a      	mov	r2, r9
 800ff88:	19a9      	adds	r1, r5, r6
 800ff8a:	f008 fa43 	bl	8018414 <memcpy>
 800ff8e:	e7af      	b.n	800fef0 <ucdr_serialize_endian_uint16_t+0x60>

0800ff90 <ucdr_deserialize_uint16_t>:
 800ff90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff94:	460d      	mov	r5, r1
 800ff96:	2102      	movs	r1, #2
 800ff98:	4604      	mov	r4, r0
 800ff9a:	f000 fe85 	bl	8010ca8 <ucdr_buffer_alignment>
 800ff9e:	4601      	mov	r1, r0
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ffa6:	f000 fec3 	bl	8010d30 <ucdr_advance_buffer>
 800ffaa:	2102      	movs	r1, #2
 800ffac:	4620      	mov	r0, r4
 800ffae:	f000 fe1b 	bl	8010be8 <ucdr_check_buffer_available_for>
 800ffb2:	bb60      	cbnz	r0, 801000e <ucdr_deserialize_uint16_t+0x7e>
 800ffb4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ffb8:	42be      	cmp	r6, r7
 800ffba:	d923      	bls.n	8010004 <ucdr_deserialize_uint16_t+0x74>
 800ffbc:	6923      	ldr	r3, [r4, #16]
 800ffbe:	60a6      	str	r6, [r4, #8]
 800ffc0:	1bf6      	subs	r6, r6, r7
 800ffc2:	4433      	add	r3, r6
 800ffc4:	f1c6 0902 	rsb	r9, r6, #2
 800ffc8:	6123      	str	r3, [r4, #16]
 800ffca:	4649      	mov	r1, r9
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f000 fe17 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d034      	beq.n	8010040 <ucdr_deserialize_uint16_t+0xb0>
 800ffd6:	7d23      	ldrb	r3, [r4, #20]
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d042      	beq.n	8010062 <ucdr_deserialize_uint16_t+0xd2>
 800ffdc:	787b      	ldrb	r3, [r7, #1]
 800ffde:	702b      	strb	r3, [r5, #0]
 800ffe0:	2e00      	cmp	r6, #0
 800ffe2:	d03a      	beq.n	801005a <ucdr_deserialize_uint16_t+0xca>
 800ffe4:	783b      	ldrb	r3, [r7, #0]
 800ffe6:	706b      	strb	r3, [r5, #1]
 800ffe8:	6923      	ldr	r3, [r4, #16]
 800ffea:	68a2      	ldr	r2, [r4, #8]
 800ffec:	7da0      	ldrb	r0, [r4, #22]
 800ffee:	2102      	movs	r1, #2
 800fff0:	3302      	adds	r3, #2
 800fff2:	444a      	add	r2, r9
 800fff4:	1b9b      	subs	r3, r3, r6
 800fff6:	7561      	strb	r1, [r4, #21]
 800fff8:	60a2      	str	r2, [r4, #8]
 800fffa:	6123      	str	r3, [r4, #16]
 800fffc:	f080 0001 	eor.w	r0, r0, #1
 8010000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010004:	2102      	movs	r1, #2
 8010006:	4620      	mov	r0, r4
 8010008:	f000 fdfa 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 801000c:	b180      	cbz	r0, 8010030 <ucdr_deserialize_uint16_t+0xa0>
 801000e:	7d23      	ldrb	r3, [r4, #20]
 8010010:	2b01      	cmp	r3, #1
 8010012:	68a3      	ldr	r3, [r4, #8]
 8010014:	d011      	beq.n	801003a <ucdr_deserialize_uint16_t+0xaa>
 8010016:	785b      	ldrb	r3, [r3, #1]
 8010018:	702b      	strb	r3, [r5, #0]
 801001a:	68a3      	ldr	r3, [r4, #8]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	706b      	strb	r3, [r5, #1]
 8010020:	68a2      	ldr	r2, [r4, #8]
 8010022:	6923      	ldr	r3, [r4, #16]
 8010024:	3202      	adds	r2, #2
 8010026:	3302      	adds	r3, #2
 8010028:	2102      	movs	r1, #2
 801002a:	60a2      	str	r2, [r4, #8]
 801002c:	6123      	str	r3, [r4, #16]
 801002e:	7561      	strb	r1, [r4, #21]
 8010030:	7da0      	ldrb	r0, [r4, #22]
 8010032:	f080 0001 	eor.w	r0, r0, #1
 8010036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003a:	881b      	ldrh	r3, [r3, #0]
 801003c:	802b      	strh	r3, [r5, #0]
 801003e:	e7ef      	b.n	8010020 <ucdr_deserialize_uint16_t+0x90>
 8010040:	68a2      	ldr	r2, [r4, #8]
 8010042:	6923      	ldr	r3, [r4, #16]
 8010044:	7da0      	ldrb	r0, [r4, #22]
 8010046:	f884 8015 	strb.w	r8, [r4, #21]
 801004a:	1b92      	subs	r2, r2, r6
 801004c:	1b9b      	subs	r3, r3, r6
 801004e:	60a2      	str	r2, [r4, #8]
 8010050:	6123      	str	r3, [r4, #16]
 8010052:	f080 0001 	eor.w	r0, r0, #1
 8010056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801005a:	68a3      	ldr	r3, [r4, #8]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	706b      	strb	r3, [r5, #1]
 8010060:	e7c2      	b.n	800ffe8 <ucdr_deserialize_uint16_t+0x58>
 8010062:	4639      	mov	r1, r7
 8010064:	4632      	mov	r2, r6
 8010066:	4628      	mov	r0, r5
 8010068:	f008 f9d4 	bl	8018414 <memcpy>
 801006c:	68a1      	ldr	r1, [r4, #8]
 801006e:	464a      	mov	r2, r9
 8010070:	19a8      	adds	r0, r5, r6
 8010072:	f008 f9cf 	bl	8018414 <memcpy>
 8010076:	e7b7      	b.n	800ffe8 <ucdr_deserialize_uint16_t+0x58>

08010078 <ucdr_deserialize_endian_uint16_t>:
 8010078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801007c:	460e      	mov	r6, r1
 801007e:	2102      	movs	r1, #2
 8010080:	4604      	mov	r4, r0
 8010082:	4615      	mov	r5, r2
 8010084:	f000 fe10 	bl	8010ca8 <ucdr_buffer_alignment>
 8010088:	4601      	mov	r1, r0
 801008a:	4620      	mov	r0, r4
 801008c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010090:	f000 fe4e 	bl	8010d30 <ucdr_advance_buffer>
 8010094:	2102      	movs	r1, #2
 8010096:	4620      	mov	r0, r4
 8010098:	f000 fda6 	bl	8010be8 <ucdr_check_buffer_available_for>
 801009c:	bb70      	cbnz	r0, 80100fc <ucdr_deserialize_endian_uint16_t+0x84>
 801009e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80100a2:	4547      	cmp	r7, r8
 80100a4:	d925      	bls.n	80100f2 <ucdr_deserialize_endian_uint16_t+0x7a>
 80100a6:	6923      	ldr	r3, [r4, #16]
 80100a8:	60a7      	str	r7, [r4, #8]
 80100aa:	eba7 0708 	sub.w	r7, r7, r8
 80100ae:	443b      	add	r3, r7
 80100b0:	f1c7 0a02 	rsb	sl, r7, #2
 80100b4:	6123      	str	r3, [r4, #16]
 80100b6:	4651      	mov	r1, sl
 80100b8:	4620      	mov	r0, r4
 80100ba:	f000 fda1 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80100be:	2800      	cmp	r0, #0
 80100c0:	d034      	beq.n	801012c <ucdr_deserialize_endian_uint16_t+0xb4>
 80100c2:	2e01      	cmp	r6, #1
 80100c4:	d043      	beq.n	801014e <ucdr_deserialize_endian_uint16_t+0xd6>
 80100c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80100ca:	702b      	strb	r3, [r5, #0]
 80100cc:	2f00      	cmp	r7, #0
 80100ce:	d03a      	beq.n	8010146 <ucdr_deserialize_endian_uint16_t+0xce>
 80100d0:	f898 3000 	ldrb.w	r3, [r8]
 80100d4:	706b      	strb	r3, [r5, #1]
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	68a2      	ldr	r2, [r4, #8]
 80100da:	7da0      	ldrb	r0, [r4, #22]
 80100dc:	2102      	movs	r1, #2
 80100de:	3302      	adds	r3, #2
 80100e0:	4452      	add	r2, sl
 80100e2:	1bdb      	subs	r3, r3, r7
 80100e4:	7561      	strb	r1, [r4, #21]
 80100e6:	60a2      	str	r2, [r4, #8]
 80100e8:	6123      	str	r3, [r4, #16]
 80100ea:	f080 0001 	eor.w	r0, r0, #1
 80100ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f2:	2102      	movs	r1, #2
 80100f4:	4620      	mov	r0, r4
 80100f6:	f000 fd83 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80100fa:	b178      	cbz	r0, 801011c <ucdr_deserialize_endian_uint16_t+0xa4>
 80100fc:	2e01      	cmp	r6, #1
 80100fe:	68a3      	ldr	r3, [r4, #8]
 8010100:	d011      	beq.n	8010126 <ucdr_deserialize_endian_uint16_t+0xae>
 8010102:	785b      	ldrb	r3, [r3, #1]
 8010104:	702b      	strb	r3, [r5, #0]
 8010106:	68a3      	ldr	r3, [r4, #8]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	706b      	strb	r3, [r5, #1]
 801010c:	68a2      	ldr	r2, [r4, #8]
 801010e:	6923      	ldr	r3, [r4, #16]
 8010110:	3202      	adds	r2, #2
 8010112:	3302      	adds	r3, #2
 8010114:	2102      	movs	r1, #2
 8010116:	60a2      	str	r2, [r4, #8]
 8010118:	6123      	str	r3, [r4, #16]
 801011a:	7561      	strb	r1, [r4, #21]
 801011c:	7da0      	ldrb	r0, [r4, #22]
 801011e:	f080 0001 	eor.w	r0, r0, #1
 8010122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010126:	881b      	ldrh	r3, [r3, #0]
 8010128:	802b      	strh	r3, [r5, #0]
 801012a:	e7ef      	b.n	801010c <ucdr_deserialize_endian_uint16_t+0x94>
 801012c:	68a2      	ldr	r2, [r4, #8]
 801012e:	6923      	ldr	r3, [r4, #16]
 8010130:	7da0      	ldrb	r0, [r4, #22]
 8010132:	f884 9015 	strb.w	r9, [r4, #21]
 8010136:	1bd2      	subs	r2, r2, r7
 8010138:	1bdb      	subs	r3, r3, r7
 801013a:	60a2      	str	r2, [r4, #8]
 801013c:	6123      	str	r3, [r4, #16]
 801013e:	f080 0001 	eor.w	r0, r0, #1
 8010142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010146:	68a3      	ldr	r3, [r4, #8]
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	706b      	strb	r3, [r5, #1]
 801014c:	e7c3      	b.n	80100d6 <ucdr_deserialize_endian_uint16_t+0x5e>
 801014e:	4641      	mov	r1, r8
 8010150:	463a      	mov	r2, r7
 8010152:	4628      	mov	r0, r5
 8010154:	f008 f95e 	bl	8018414 <memcpy>
 8010158:	68a1      	ldr	r1, [r4, #8]
 801015a:	4652      	mov	r2, sl
 801015c:	19e8      	adds	r0, r5, r7
 801015e:	f008 f959 	bl	8018414 <memcpy>
 8010162:	e7b8      	b.n	80100d6 <ucdr_deserialize_endian_uint16_t+0x5e>

08010164 <ucdr_serialize_uint32_t>:
 8010164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	4604      	mov	r4, r0
 801016c:	9101      	str	r1, [sp, #4]
 801016e:	2104      	movs	r1, #4
 8010170:	f000 fd9a 	bl	8010ca8 <ucdr_buffer_alignment>
 8010174:	4601      	mov	r1, r0
 8010176:	4620      	mov	r0, r4
 8010178:	7d67      	ldrb	r7, [r4, #21]
 801017a:	f000 fdd9 	bl	8010d30 <ucdr_advance_buffer>
 801017e:	2104      	movs	r1, #4
 8010180:	4620      	mov	r0, r4
 8010182:	f000 fd31 	bl	8010be8 <ucdr_check_buffer_available_for>
 8010186:	2800      	cmp	r0, #0
 8010188:	d139      	bne.n	80101fe <ucdr_serialize_uint32_t+0x9a>
 801018a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801018e:	42ab      	cmp	r3, r5
 8010190:	d930      	bls.n	80101f4 <ucdr_serialize_uint32_t+0x90>
 8010192:	1b5e      	subs	r6, r3, r5
 8010194:	60a3      	str	r3, [r4, #8]
 8010196:	6923      	ldr	r3, [r4, #16]
 8010198:	f1c6 0804 	rsb	r8, r6, #4
 801019c:	4433      	add	r3, r6
 801019e:	6123      	str	r3, [r4, #16]
 80101a0:	4641      	mov	r1, r8
 80101a2:	4620      	mov	r0, r4
 80101a4:	f000 fd2c 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80101a8:	2800      	cmp	r0, #0
 80101aa:	d04c      	beq.n	8010246 <ucdr_serialize_uint32_t+0xe2>
 80101ac:	7d23      	ldrb	r3, [r4, #20]
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d063      	beq.n	801027a <ucdr_serialize_uint32_t+0x116>
 80101b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101b6:	702b      	strb	r3, [r5, #0]
 80101b8:	2e00      	cmp	r6, #0
 80101ba:	d051      	beq.n	8010260 <ucdr_serialize_uint32_t+0xfc>
 80101bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101c0:	706b      	strb	r3, [r5, #1]
 80101c2:	2e01      	cmp	r6, #1
 80101c4:	d050      	beq.n	8010268 <ucdr_serialize_uint32_t+0x104>
 80101c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101ca:	70ab      	strb	r3, [r5, #2]
 80101cc:	2e02      	cmp	r6, #2
 80101ce:	d04f      	beq.n	8010270 <ucdr_serialize_uint32_t+0x10c>
 80101d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101d4:	70eb      	strb	r3, [r5, #3]
 80101d6:	6923      	ldr	r3, [r4, #16]
 80101d8:	68a2      	ldr	r2, [r4, #8]
 80101da:	7da0      	ldrb	r0, [r4, #22]
 80101dc:	3304      	adds	r3, #4
 80101de:	1b9e      	subs	r6, r3, r6
 80101e0:	4442      	add	r2, r8
 80101e2:	2304      	movs	r3, #4
 80101e4:	f080 0001 	eor.w	r0, r0, #1
 80101e8:	60a2      	str	r2, [r4, #8]
 80101ea:	6126      	str	r6, [r4, #16]
 80101ec:	7563      	strb	r3, [r4, #21]
 80101ee:	b002      	add	sp, #8
 80101f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f4:	2104      	movs	r1, #4
 80101f6:	4620      	mov	r0, r4
 80101f8:	f000 fd02 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80101fc:	b1d0      	cbz	r0, 8010234 <ucdr_serialize_uint32_t+0xd0>
 80101fe:	7d23      	ldrb	r3, [r4, #20]
 8010200:	2b01      	cmp	r3, #1
 8010202:	68a3      	ldr	r3, [r4, #8]
 8010204:	d01c      	beq.n	8010240 <ucdr_serialize_uint32_t+0xdc>
 8010206:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801020a:	701a      	strb	r2, [r3, #0]
 801020c:	68a3      	ldr	r3, [r4, #8]
 801020e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010212:	705a      	strb	r2, [r3, #1]
 8010214:	68a3      	ldr	r3, [r4, #8]
 8010216:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801021a:	709a      	strb	r2, [r3, #2]
 801021c:	68a3      	ldr	r3, [r4, #8]
 801021e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010222:	70da      	strb	r2, [r3, #3]
 8010224:	68a2      	ldr	r2, [r4, #8]
 8010226:	6923      	ldr	r3, [r4, #16]
 8010228:	3204      	adds	r2, #4
 801022a:	3304      	adds	r3, #4
 801022c:	2104      	movs	r1, #4
 801022e:	60a2      	str	r2, [r4, #8]
 8010230:	6123      	str	r3, [r4, #16]
 8010232:	7561      	strb	r1, [r4, #21]
 8010234:	7da0      	ldrb	r0, [r4, #22]
 8010236:	f080 0001 	eor.w	r0, r0, #1
 801023a:	b002      	add	sp, #8
 801023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010240:	9a01      	ldr	r2, [sp, #4]
 8010242:	601a      	str	r2, [r3, #0]
 8010244:	e7ee      	b.n	8010224 <ucdr_serialize_uint32_t+0xc0>
 8010246:	68a2      	ldr	r2, [r4, #8]
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	7da0      	ldrb	r0, [r4, #22]
 801024c:	7567      	strb	r7, [r4, #21]
 801024e:	1b92      	subs	r2, r2, r6
 8010250:	1b9b      	subs	r3, r3, r6
 8010252:	f080 0001 	eor.w	r0, r0, #1
 8010256:	60a2      	str	r2, [r4, #8]
 8010258:	6123      	str	r3, [r4, #16]
 801025a:	b002      	add	sp, #8
 801025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010260:	68a3      	ldr	r3, [r4, #8]
 8010262:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010266:	701a      	strb	r2, [r3, #0]
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801026e:	701a      	strb	r2, [r3, #0]
 8010270:	68a3      	ldr	r3, [r4, #8]
 8010272:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010276:	701a      	strb	r2, [r3, #0]
 8010278:	e7ad      	b.n	80101d6 <ucdr_serialize_uint32_t+0x72>
 801027a:	4628      	mov	r0, r5
 801027c:	ad01      	add	r5, sp, #4
 801027e:	4629      	mov	r1, r5
 8010280:	4632      	mov	r2, r6
 8010282:	f008 f8c7 	bl	8018414 <memcpy>
 8010286:	68a0      	ldr	r0, [r4, #8]
 8010288:	4642      	mov	r2, r8
 801028a:	19a9      	adds	r1, r5, r6
 801028c:	f008 f8c2 	bl	8018414 <memcpy>
 8010290:	e7a1      	b.n	80101d6 <ucdr_serialize_uint32_t+0x72>
 8010292:	bf00      	nop

08010294 <ucdr_serialize_endian_uint32_t>:
 8010294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010298:	b083      	sub	sp, #12
 801029a:	460d      	mov	r5, r1
 801029c:	2104      	movs	r1, #4
 801029e:	4604      	mov	r4, r0
 80102a0:	9201      	str	r2, [sp, #4]
 80102a2:	f000 fd01 	bl	8010ca8 <ucdr_buffer_alignment>
 80102a6:	4601      	mov	r1, r0
 80102a8:	4620      	mov	r0, r4
 80102aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80102ae:	f000 fd3f 	bl	8010d30 <ucdr_advance_buffer>
 80102b2:	2104      	movs	r1, #4
 80102b4:	4620      	mov	r0, r4
 80102b6:	f000 fc97 	bl	8010be8 <ucdr_check_buffer_available_for>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d138      	bne.n	8010330 <ucdr_serialize_endian_uint32_t+0x9c>
 80102be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80102c2:	42b7      	cmp	r7, r6
 80102c4:	d92f      	bls.n	8010326 <ucdr_serialize_endian_uint32_t+0x92>
 80102c6:	6923      	ldr	r3, [r4, #16]
 80102c8:	60a7      	str	r7, [r4, #8]
 80102ca:	1bbf      	subs	r7, r7, r6
 80102cc:	443b      	add	r3, r7
 80102ce:	f1c7 0904 	rsb	r9, r7, #4
 80102d2:	6123      	str	r3, [r4, #16]
 80102d4:	4649      	mov	r1, r9
 80102d6:	4620      	mov	r0, r4
 80102d8:	f000 fc92 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d04a      	beq.n	8010376 <ucdr_serialize_endian_uint32_t+0xe2>
 80102e0:	2d01      	cmp	r5, #1
 80102e2:	d063      	beq.n	80103ac <ucdr_serialize_endian_uint32_t+0x118>
 80102e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80102e8:	7033      	strb	r3, [r6, #0]
 80102ea:	2f00      	cmp	r7, #0
 80102ec:	d051      	beq.n	8010392 <ucdr_serialize_endian_uint32_t+0xfe>
 80102ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80102f2:	7073      	strb	r3, [r6, #1]
 80102f4:	2f01      	cmp	r7, #1
 80102f6:	d050      	beq.n	801039a <ucdr_serialize_endian_uint32_t+0x106>
 80102f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80102fc:	70b3      	strb	r3, [r6, #2]
 80102fe:	2f02      	cmp	r7, #2
 8010300:	d04f      	beq.n	80103a2 <ucdr_serialize_endian_uint32_t+0x10e>
 8010302:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010306:	70f3      	strb	r3, [r6, #3]
 8010308:	6923      	ldr	r3, [r4, #16]
 801030a:	68a2      	ldr	r2, [r4, #8]
 801030c:	7da0      	ldrb	r0, [r4, #22]
 801030e:	3304      	adds	r3, #4
 8010310:	444a      	add	r2, r9
 8010312:	1bdb      	subs	r3, r3, r7
 8010314:	2104      	movs	r1, #4
 8010316:	f080 0001 	eor.w	r0, r0, #1
 801031a:	60a2      	str	r2, [r4, #8]
 801031c:	6123      	str	r3, [r4, #16]
 801031e:	7561      	strb	r1, [r4, #21]
 8010320:	b003      	add	sp, #12
 8010322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010326:	2104      	movs	r1, #4
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fc69 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 801032e:	b1c8      	cbz	r0, 8010364 <ucdr_serialize_endian_uint32_t+0xd0>
 8010330:	2d01      	cmp	r5, #1
 8010332:	68a3      	ldr	r3, [r4, #8]
 8010334:	d01c      	beq.n	8010370 <ucdr_serialize_endian_uint32_t+0xdc>
 8010336:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801033a:	701a      	strb	r2, [r3, #0]
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010342:	705a      	strb	r2, [r3, #1]
 8010344:	68a3      	ldr	r3, [r4, #8]
 8010346:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801034a:	709a      	strb	r2, [r3, #2]
 801034c:	68a3      	ldr	r3, [r4, #8]
 801034e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010352:	70da      	strb	r2, [r3, #3]
 8010354:	68a2      	ldr	r2, [r4, #8]
 8010356:	6923      	ldr	r3, [r4, #16]
 8010358:	3204      	adds	r2, #4
 801035a:	3304      	adds	r3, #4
 801035c:	2104      	movs	r1, #4
 801035e:	60a2      	str	r2, [r4, #8]
 8010360:	6123      	str	r3, [r4, #16]
 8010362:	7561      	strb	r1, [r4, #21]
 8010364:	7da0      	ldrb	r0, [r4, #22]
 8010366:	f080 0001 	eor.w	r0, r0, #1
 801036a:	b003      	add	sp, #12
 801036c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010370:	9a01      	ldr	r2, [sp, #4]
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	e7ee      	b.n	8010354 <ucdr_serialize_endian_uint32_t+0xc0>
 8010376:	68a2      	ldr	r2, [r4, #8]
 8010378:	6923      	ldr	r3, [r4, #16]
 801037a:	7da0      	ldrb	r0, [r4, #22]
 801037c:	f884 8015 	strb.w	r8, [r4, #21]
 8010380:	1bd2      	subs	r2, r2, r7
 8010382:	1bdb      	subs	r3, r3, r7
 8010384:	f080 0001 	eor.w	r0, r0, #1
 8010388:	60a2      	str	r2, [r4, #8]
 801038a:	6123      	str	r3, [r4, #16]
 801038c:	b003      	add	sp, #12
 801038e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010392:	68a3      	ldr	r3, [r4, #8]
 8010394:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010398:	701a      	strb	r2, [r3, #0]
 801039a:	68a3      	ldr	r3, [r4, #8]
 801039c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80103a0:	701a      	strb	r2, [r3, #0]
 80103a2:	68a3      	ldr	r3, [r4, #8]
 80103a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80103a8:	701a      	strb	r2, [r3, #0]
 80103aa:	e7ad      	b.n	8010308 <ucdr_serialize_endian_uint32_t+0x74>
 80103ac:	ad01      	add	r5, sp, #4
 80103ae:	4629      	mov	r1, r5
 80103b0:	463a      	mov	r2, r7
 80103b2:	4630      	mov	r0, r6
 80103b4:	f008 f82e 	bl	8018414 <memcpy>
 80103b8:	68a0      	ldr	r0, [r4, #8]
 80103ba:	464a      	mov	r2, r9
 80103bc:	19e9      	adds	r1, r5, r7
 80103be:	f008 f829 	bl	8018414 <memcpy>
 80103c2:	e7a1      	b.n	8010308 <ucdr_serialize_endian_uint32_t+0x74>

080103c4 <ucdr_deserialize_uint32_t>:
 80103c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103c8:	460d      	mov	r5, r1
 80103ca:	2104      	movs	r1, #4
 80103cc:	4604      	mov	r4, r0
 80103ce:	f000 fc6b 	bl	8010ca8 <ucdr_buffer_alignment>
 80103d2:	4601      	mov	r1, r0
 80103d4:	4620      	mov	r0, r4
 80103d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80103da:	f000 fca9 	bl	8010d30 <ucdr_advance_buffer>
 80103de:	2104      	movs	r1, #4
 80103e0:	4620      	mov	r0, r4
 80103e2:	f000 fc01 	bl	8010be8 <ucdr_check_buffer_available_for>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	d138      	bne.n	801045c <ucdr_deserialize_uint32_t+0x98>
 80103ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80103ee:	42b7      	cmp	r7, r6
 80103f0:	d92f      	bls.n	8010452 <ucdr_deserialize_uint32_t+0x8e>
 80103f2:	6923      	ldr	r3, [r4, #16]
 80103f4:	60a7      	str	r7, [r4, #8]
 80103f6:	1bbf      	subs	r7, r7, r6
 80103f8:	443b      	add	r3, r7
 80103fa:	f1c7 0904 	rsb	r9, r7, #4
 80103fe:	6123      	str	r3, [r4, #16]
 8010400:	4649      	mov	r1, r9
 8010402:	4620      	mov	r0, r4
 8010404:	f000 fbfc 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 8010408:	2800      	cmp	r0, #0
 801040a:	d046      	beq.n	801049a <ucdr_deserialize_uint32_t+0xd6>
 801040c:	7d23      	ldrb	r3, [r4, #20]
 801040e:	2b01      	cmp	r3, #1
 8010410:	d05c      	beq.n	80104cc <ucdr_deserialize_uint32_t+0x108>
 8010412:	78f3      	ldrb	r3, [r6, #3]
 8010414:	702b      	strb	r3, [r5, #0]
 8010416:	2f00      	cmp	r7, #0
 8010418:	d04c      	beq.n	80104b4 <ucdr_deserialize_uint32_t+0xf0>
 801041a:	78b3      	ldrb	r3, [r6, #2]
 801041c:	706b      	strb	r3, [r5, #1]
 801041e:	2f01      	cmp	r7, #1
 8010420:	f105 0302 	add.w	r3, r5, #2
 8010424:	d04a      	beq.n	80104bc <ucdr_deserialize_uint32_t+0xf8>
 8010426:	7873      	ldrb	r3, [r6, #1]
 8010428:	70ab      	strb	r3, [r5, #2]
 801042a:	2f02      	cmp	r7, #2
 801042c:	f105 0303 	add.w	r3, r5, #3
 8010430:	d048      	beq.n	80104c4 <ucdr_deserialize_uint32_t+0x100>
 8010432:	7833      	ldrb	r3, [r6, #0]
 8010434:	70eb      	strb	r3, [r5, #3]
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	68a2      	ldr	r2, [r4, #8]
 801043a:	7da0      	ldrb	r0, [r4, #22]
 801043c:	2104      	movs	r1, #4
 801043e:	3304      	adds	r3, #4
 8010440:	444a      	add	r2, r9
 8010442:	1bdb      	subs	r3, r3, r7
 8010444:	7561      	strb	r1, [r4, #21]
 8010446:	60a2      	str	r2, [r4, #8]
 8010448:	6123      	str	r3, [r4, #16]
 801044a:	f080 0001 	eor.w	r0, r0, #1
 801044e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010452:	2104      	movs	r1, #4
 8010454:	4620      	mov	r0, r4
 8010456:	f000 fbd3 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 801045a:	b1b0      	cbz	r0, 801048a <ucdr_deserialize_uint32_t+0xc6>
 801045c:	7d23      	ldrb	r3, [r4, #20]
 801045e:	2b01      	cmp	r3, #1
 8010460:	68a3      	ldr	r3, [r4, #8]
 8010462:	d017      	beq.n	8010494 <ucdr_deserialize_uint32_t+0xd0>
 8010464:	78db      	ldrb	r3, [r3, #3]
 8010466:	702b      	strb	r3, [r5, #0]
 8010468:	68a3      	ldr	r3, [r4, #8]
 801046a:	789b      	ldrb	r3, [r3, #2]
 801046c:	706b      	strb	r3, [r5, #1]
 801046e:	68a3      	ldr	r3, [r4, #8]
 8010470:	785b      	ldrb	r3, [r3, #1]
 8010472:	70ab      	strb	r3, [r5, #2]
 8010474:	68a3      	ldr	r3, [r4, #8]
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	70eb      	strb	r3, [r5, #3]
 801047a:	68a2      	ldr	r2, [r4, #8]
 801047c:	6923      	ldr	r3, [r4, #16]
 801047e:	3204      	adds	r2, #4
 8010480:	3304      	adds	r3, #4
 8010482:	2104      	movs	r1, #4
 8010484:	60a2      	str	r2, [r4, #8]
 8010486:	6123      	str	r3, [r4, #16]
 8010488:	7561      	strb	r1, [r4, #21]
 801048a:	7da0      	ldrb	r0, [r4, #22]
 801048c:	f080 0001 	eor.w	r0, r0, #1
 8010490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	602b      	str	r3, [r5, #0]
 8010498:	e7ef      	b.n	801047a <ucdr_deserialize_uint32_t+0xb6>
 801049a:	68a2      	ldr	r2, [r4, #8]
 801049c:	6923      	ldr	r3, [r4, #16]
 801049e:	7da0      	ldrb	r0, [r4, #22]
 80104a0:	f884 8015 	strb.w	r8, [r4, #21]
 80104a4:	1bd2      	subs	r2, r2, r7
 80104a6:	1bdb      	subs	r3, r3, r7
 80104a8:	60a2      	str	r2, [r4, #8]
 80104aa:	6123      	str	r3, [r4, #16]
 80104ac:	f080 0001 	eor.w	r0, r0, #1
 80104b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104b4:	68a3      	ldr	r3, [r4, #8]
 80104b6:	789b      	ldrb	r3, [r3, #2]
 80104b8:	706b      	strb	r3, [r5, #1]
 80104ba:	1cab      	adds	r3, r5, #2
 80104bc:	68a2      	ldr	r2, [r4, #8]
 80104be:	7852      	ldrb	r2, [r2, #1]
 80104c0:	f803 2b01 	strb.w	r2, [r3], #1
 80104c4:	68a2      	ldr	r2, [r4, #8]
 80104c6:	7812      	ldrb	r2, [r2, #0]
 80104c8:	701a      	strb	r2, [r3, #0]
 80104ca:	e7b4      	b.n	8010436 <ucdr_deserialize_uint32_t+0x72>
 80104cc:	4631      	mov	r1, r6
 80104ce:	463a      	mov	r2, r7
 80104d0:	4628      	mov	r0, r5
 80104d2:	f007 ff9f 	bl	8018414 <memcpy>
 80104d6:	68a1      	ldr	r1, [r4, #8]
 80104d8:	464a      	mov	r2, r9
 80104da:	19e8      	adds	r0, r5, r7
 80104dc:	f007 ff9a 	bl	8018414 <memcpy>
 80104e0:	e7a9      	b.n	8010436 <ucdr_deserialize_uint32_t+0x72>
 80104e2:	bf00      	nop

080104e4 <ucdr_deserialize_endian_uint32_t>:
 80104e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104e8:	460e      	mov	r6, r1
 80104ea:	2104      	movs	r1, #4
 80104ec:	4604      	mov	r4, r0
 80104ee:	4615      	mov	r5, r2
 80104f0:	f000 fbda 	bl	8010ca8 <ucdr_buffer_alignment>
 80104f4:	4601      	mov	r1, r0
 80104f6:	4620      	mov	r0, r4
 80104f8:	f894 9015 	ldrb.w	r9, [r4, #21]
 80104fc:	f000 fc18 	bl	8010d30 <ucdr_advance_buffer>
 8010500:	2104      	movs	r1, #4
 8010502:	4620      	mov	r0, r4
 8010504:	f000 fb70 	bl	8010be8 <ucdr_check_buffer_available_for>
 8010508:	2800      	cmp	r0, #0
 801050a:	d13c      	bne.n	8010586 <ucdr_deserialize_endian_uint32_t+0xa2>
 801050c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010510:	42bb      	cmp	r3, r7
 8010512:	d933      	bls.n	801057c <ucdr_deserialize_endian_uint32_t+0x98>
 8010514:	eba3 0807 	sub.w	r8, r3, r7
 8010518:	60a3      	str	r3, [r4, #8]
 801051a:	6923      	ldr	r3, [r4, #16]
 801051c:	f1c8 0a04 	rsb	sl, r8, #4
 8010520:	4443      	add	r3, r8
 8010522:	6123      	str	r3, [r4, #16]
 8010524:	4651      	mov	r1, sl
 8010526:	4620      	mov	r0, r4
 8010528:	f000 fb6a 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 801052c:	2800      	cmp	r0, #0
 801052e:	d048      	beq.n	80105c2 <ucdr_deserialize_endian_uint32_t+0xde>
 8010530:	2e01      	cmp	r6, #1
 8010532:	d061      	beq.n	80105f8 <ucdr_deserialize_endian_uint32_t+0x114>
 8010534:	78fb      	ldrb	r3, [r7, #3]
 8010536:	702b      	strb	r3, [r5, #0]
 8010538:	f1b8 0f00 	cmp.w	r8, #0
 801053c:	d050      	beq.n	80105e0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801053e:	78bb      	ldrb	r3, [r7, #2]
 8010540:	706b      	strb	r3, [r5, #1]
 8010542:	f1b8 0f01 	cmp.w	r8, #1
 8010546:	f105 0302 	add.w	r3, r5, #2
 801054a:	d04d      	beq.n	80105e8 <ucdr_deserialize_endian_uint32_t+0x104>
 801054c:	787b      	ldrb	r3, [r7, #1]
 801054e:	70ab      	strb	r3, [r5, #2]
 8010550:	f1b8 0f02 	cmp.w	r8, #2
 8010554:	f105 0303 	add.w	r3, r5, #3
 8010558:	d04a      	beq.n	80105f0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801055a:	783b      	ldrb	r3, [r7, #0]
 801055c:	70eb      	strb	r3, [r5, #3]
 801055e:	6923      	ldr	r3, [r4, #16]
 8010560:	68a2      	ldr	r2, [r4, #8]
 8010562:	7da0      	ldrb	r0, [r4, #22]
 8010564:	2104      	movs	r1, #4
 8010566:	3304      	adds	r3, #4
 8010568:	4452      	add	r2, sl
 801056a:	eba3 0308 	sub.w	r3, r3, r8
 801056e:	7561      	strb	r1, [r4, #21]
 8010570:	60a2      	str	r2, [r4, #8]
 8010572:	6123      	str	r3, [r4, #16]
 8010574:	f080 0001 	eor.w	r0, r0, #1
 8010578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801057c:	2104      	movs	r1, #4
 801057e:	4620      	mov	r0, r4
 8010580:	f000 fb3e 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 8010584:	b1a8      	cbz	r0, 80105b2 <ucdr_deserialize_endian_uint32_t+0xce>
 8010586:	2e01      	cmp	r6, #1
 8010588:	68a3      	ldr	r3, [r4, #8]
 801058a:	d017      	beq.n	80105bc <ucdr_deserialize_endian_uint32_t+0xd8>
 801058c:	78db      	ldrb	r3, [r3, #3]
 801058e:	702b      	strb	r3, [r5, #0]
 8010590:	68a3      	ldr	r3, [r4, #8]
 8010592:	789b      	ldrb	r3, [r3, #2]
 8010594:	706b      	strb	r3, [r5, #1]
 8010596:	68a3      	ldr	r3, [r4, #8]
 8010598:	785b      	ldrb	r3, [r3, #1]
 801059a:	70ab      	strb	r3, [r5, #2]
 801059c:	68a3      	ldr	r3, [r4, #8]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	70eb      	strb	r3, [r5, #3]
 80105a2:	68a2      	ldr	r2, [r4, #8]
 80105a4:	6923      	ldr	r3, [r4, #16]
 80105a6:	3204      	adds	r2, #4
 80105a8:	3304      	adds	r3, #4
 80105aa:	2104      	movs	r1, #4
 80105ac:	60a2      	str	r2, [r4, #8]
 80105ae:	6123      	str	r3, [r4, #16]
 80105b0:	7561      	strb	r1, [r4, #21]
 80105b2:	7da0      	ldrb	r0, [r4, #22]
 80105b4:	f080 0001 	eor.w	r0, r0, #1
 80105b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	602b      	str	r3, [r5, #0]
 80105c0:	e7ef      	b.n	80105a2 <ucdr_deserialize_endian_uint32_t+0xbe>
 80105c2:	68a2      	ldr	r2, [r4, #8]
 80105c4:	6923      	ldr	r3, [r4, #16]
 80105c6:	7da0      	ldrb	r0, [r4, #22]
 80105c8:	f884 9015 	strb.w	r9, [r4, #21]
 80105cc:	eba2 0208 	sub.w	r2, r2, r8
 80105d0:	eba3 0308 	sub.w	r3, r3, r8
 80105d4:	60a2      	str	r2, [r4, #8]
 80105d6:	6123      	str	r3, [r4, #16]
 80105d8:	f080 0001 	eor.w	r0, r0, #1
 80105dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e0:	68a3      	ldr	r3, [r4, #8]
 80105e2:	789b      	ldrb	r3, [r3, #2]
 80105e4:	706b      	strb	r3, [r5, #1]
 80105e6:	1cab      	adds	r3, r5, #2
 80105e8:	68a2      	ldr	r2, [r4, #8]
 80105ea:	7852      	ldrb	r2, [r2, #1]
 80105ec:	f803 2b01 	strb.w	r2, [r3], #1
 80105f0:	68a2      	ldr	r2, [r4, #8]
 80105f2:	7812      	ldrb	r2, [r2, #0]
 80105f4:	701a      	strb	r2, [r3, #0]
 80105f6:	e7b2      	b.n	801055e <ucdr_deserialize_endian_uint32_t+0x7a>
 80105f8:	4639      	mov	r1, r7
 80105fa:	4642      	mov	r2, r8
 80105fc:	4628      	mov	r0, r5
 80105fe:	f007 ff09 	bl	8018414 <memcpy>
 8010602:	68a1      	ldr	r1, [r4, #8]
 8010604:	4652      	mov	r2, sl
 8010606:	eb05 0008 	add.w	r0, r5, r8
 801060a:	f007 ff03 	bl	8018414 <memcpy>
 801060e:	e7a6      	b.n	801055e <ucdr_deserialize_endian_uint32_t+0x7a>

08010610 <ucdr_serialize_uint64_t>:
 8010610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010614:	2108      	movs	r1, #8
 8010616:	b082      	sub	sp, #8
 8010618:	4604      	mov	r4, r0
 801061a:	e9cd 2300 	strd	r2, r3, [sp]
 801061e:	f000 fb43 	bl	8010ca8 <ucdr_buffer_alignment>
 8010622:	4601      	mov	r1, r0
 8010624:	4620      	mov	r0, r4
 8010626:	7d67      	ldrb	r7, [r4, #21]
 8010628:	f000 fb82 	bl	8010d30 <ucdr_advance_buffer>
 801062c:	2108      	movs	r1, #8
 801062e:	4620      	mov	r0, r4
 8010630:	f000 fada 	bl	8010be8 <ucdr_check_buffer_available_for>
 8010634:	2800      	cmp	r0, #0
 8010636:	d14e      	bne.n	80106d6 <ucdr_serialize_uint64_t+0xc6>
 8010638:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801063c:	42ab      	cmp	r3, r5
 801063e:	d945      	bls.n	80106cc <ucdr_serialize_uint64_t+0xbc>
 8010640:	1b5e      	subs	r6, r3, r5
 8010642:	60a3      	str	r3, [r4, #8]
 8010644:	6923      	ldr	r3, [r4, #16]
 8010646:	f1c6 0808 	rsb	r8, r6, #8
 801064a:	4433      	add	r3, r6
 801064c:	6123      	str	r3, [r4, #16]
 801064e:	4641      	mov	r1, r8
 8010650:	4620      	mov	r0, r4
 8010652:	f000 fad5 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 8010656:	2800      	cmp	r0, #0
 8010658:	d074      	beq.n	8010744 <ucdr_serialize_uint64_t+0x134>
 801065a:	7d23      	ldrb	r3, [r4, #20]
 801065c:	2b01      	cmp	r3, #1
 801065e:	f000 809b 	beq.w	8010798 <ucdr_serialize_uint64_t+0x188>
 8010662:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010666:	702b      	strb	r3, [r5, #0]
 8010668:	2e00      	cmp	r6, #0
 801066a:	d078      	beq.n	801075e <ucdr_serialize_uint64_t+0x14e>
 801066c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010670:	706b      	strb	r3, [r5, #1]
 8010672:	2e01      	cmp	r6, #1
 8010674:	d077      	beq.n	8010766 <ucdr_serialize_uint64_t+0x156>
 8010676:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801067a:	70ab      	strb	r3, [r5, #2]
 801067c:	2e02      	cmp	r6, #2
 801067e:	d076      	beq.n	801076e <ucdr_serialize_uint64_t+0x15e>
 8010680:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010684:	70eb      	strb	r3, [r5, #3]
 8010686:	2e03      	cmp	r6, #3
 8010688:	d075      	beq.n	8010776 <ucdr_serialize_uint64_t+0x166>
 801068a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801068e:	712b      	strb	r3, [r5, #4]
 8010690:	2e04      	cmp	r6, #4
 8010692:	d074      	beq.n	801077e <ucdr_serialize_uint64_t+0x16e>
 8010694:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010698:	716b      	strb	r3, [r5, #5]
 801069a:	2e05      	cmp	r6, #5
 801069c:	d073      	beq.n	8010786 <ucdr_serialize_uint64_t+0x176>
 801069e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80106a2:	71ab      	strb	r3, [r5, #6]
 80106a4:	2e06      	cmp	r6, #6
 80106a6:	d072      	beq.n	801078e <ucdr_serialize_uint64_t+0x17e>
 80106a8:	f89d 3000 	ldrb.w	r3, [sp]
 80106ac:	71eb      	strb	r3, [r5, #7]
 80106ae:	6923      	ldr	r3, [r4, #16]
 80106b0:	68a2      	ldr	r2, [r4, #8]
 80106b2:	7da0      	ldrb	r0, [r4, #22]
 80106b4:	3308      	adds	r3, #8
 80106b6:	1b9e      	subs	r6, r3, r6
 80106b8:	4442      	add	r2, r8
 80106ba:	2308      	movs	r3, #8
 80106bc:	f080 0001 	eor.w	r0, r0, #1
 80106c0:	60a2      	str	r2, [r4, #8]
 80106c2:	6126      	str	r6, [r4, #16]
 80106c4:	7563      	strb	r3, [r4, #21]
 80106c6:	b002      	add	sp, #8
 80106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106cc:	2108      	movs	r1, #8
 80106ce:	4620      	mov	r0, r4
 80106d0:	f000 fa96 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80106d4:	b350      	cbz	r0, 801072c <ucdr_serialize_uint64_t+0x11c>
 80106d6:	7d23      	ldrb	r3, [r4, #20]
 80106d8:	2b01      	cmp	r3, #1
 80106da:	d02d      	beq.n	8010738 <ucdr_serialize_uint64_t+0x128>
 80106dc:	68a3      	ldr	r3, [r4, #8]
 80106de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80106e2:	701a      	strb	r2, [r3, #0]
 80106e4:	68a3      	ldr	r3, [r4, #8]
 80106e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80106ea:	705a      	strb	r2, [r3, #1]
 80106ec:	68a3      	ldr	r3, [r4, #8]
 80106ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80106f2:	709a      	strb	r2, [r3, #2]
 80106f4:	68a3      	ldr	r3, [r4, #8]
 80106f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106fa:	70da      	strb	r2, [r3, #3]
 80106fc:	68a3      	ldr	r3, [r4, #8]
 80106fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010702:	711a      	strb	r2, [r3, #4]
 8010704:	68a3      	ldr	r3, [r4, #8]
 8010706:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801070a:	715a      	strb	r2, [r3, #5]
 801070c:	68a3      	ldr	r3, [r4, #8]
 801070e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010712:	719a      	strb	r2, [r3, #6]
 8010714:	68a3      	ldr	r3, [r4, #8]
 8010716:	f89d 2000 	ldrb.w	r2, [sp]
 801071a:	71da      	strb	r2, [r3, #7]
 801071c:	68a2      	ldr	r2, [r4, #8]
 801071e:	6923      	ldr	r3, [r4, #16]
 8010720:	3208      	adds	r2, #8
 8010722:	3308      	adds	r3, #8
 8010724:	2108      	movs	r1, #8
 8010726:	60a2      	str	r2, [r4, #8]
 8010728:	6123      	str	r3, [r4, #16]
 801072a:	7561      	strb	r1, [r4, #21]
 801072c:	7da0      	ldrb	r0, [r4, #22]
 801072e:	f080 0001 	eor.w	r0, r0, #1
 8010732:	b002      	add	sp, #8
 8010734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010738:	466b      	mov	r3, sp
 801073a:	cb03      	ldmia	r3!, {r0, r1}
 801073c:	68a3      	ldr	r3, [r4, #8]
 801073e:	6018      	str	r0, [r3, #0]
 8010740:	6059      	str	r1, [r3, #4]
 8010742:	e7eb      	b.n	801071c <ucdr_serialize_uint64_t+0x10c>
 8010744:	68a2      	ldr	r2, [r4, #8]
 8010746:	6923      	ldr	r3, [r4, #16]
 8010748:	7da0      	ldrb	r0, [r4, #22]
 801074a:	7567      	strb	r7, [r4, #21]
 801074c:	1b92      	subs	r2, r2, r6
 801074e:	1b9b      	subs	r3, r3, r6
 8010750:	f080 0001 	eor.w	r0, r0, #1
 8010754:	60a2      	str	r2, [r4, #8]
 8010756:	6123      	str	r3, [r4, #16]
 8010758:	b002      	add	sp, #8
 801075a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801075e:	68a3      	ldr	r3, [r4, #8]
 8010760:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010764:	701a      	strb	r2, [r3, #0]
 8010766:	68a3      	ldr	r3, [r4, #8]
 8010768:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801076c:	701a      	strb	r2, [r3, #0]
 801076e:	68a3      	ldr	r3, [r4, #8]
 8010770:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010774:	701a      	strb	r2, [r3, #0]
 8010776:	68a3      	ldr	r3, [r4, #8]
 8010778:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801077c:	701a      	strb	r2, [r3, #0]
 801077e:	68a3      	ldr	r3, [r4, #8]
 8010780:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010784:	701a      	strb	r2, [r3, #0]
 8010786:	68a3      	ldr	r3, [r4, #8]
 8010788:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801078c:	701a      	strb	r2, [r3, #0]
 801078e:	68a3      	ldr	r3, [r4, #8]
 8010790:	f89d 2000 	ldrb.w	r2, [sp]
 8010794:	701a      	strb	r2, [r3, #0]
 8010796:	e78a      	b.n	80106ae <ucdr_serialize_uint64_t+0x9e>
 8010798:	4628      	mov	r0, r5
 801079a:	466d      	mov	r5, sp
 801079c:	4629      	mov	r1, r5
 801079e:	4632      	mov	r2, r6
 80107a0:	f007 fe38 	bl	8018414 <memcpy>
 80107a4:	68a0      	ldr	r0, [r4, #8]
 80107a6:	4642      	mov	r2, r8
 80107a8:	19a9      	adds	r1, r5, r6
 80107aa:	f007 fe33 	bl	8018414 <memcpy>
 80107ae:	e77e      	b.n	80106ae <ucdr_serialize_uint64_t+0x9e>

080107b0 <ucdr_serialize_int16_t>:
 80107b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b4:	b082      	sub	sp, #8
 80107b6:	460b      	mov	r3, r1
 80107b8:	2102      	movs	r1, #2
 80107ba:	4604      	mov	r4, r0
 80107bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80107c0:	f000 fa72 	bl	8010ca8 <ucdr_buffer_alignment>
 80107c4:	4601      	mov	r1, r0
 80107c6:	4620      	mov	r0, r4
 80107c8:	7d67      	ldrb	r7, [r4, #21]
 80107ca:	f000 fab1 	bl	8010d30 <ucdr_advance_buffer>
 80107ce:	2102      	movs	r1, #2
 80107d0:	4620      	mov	r0, r4
 80107d2:	f000 fa09 	bl	8010be8 <ucdr_check_buffer_available_for>
 80107d6:	bb78      	cbnz	r0, 8010838 <ucdr_serialize_int16_t+0x88>
 80107d8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80107dc:	42ab      	cmp	r3, r5
 80107de:	d926      	bls.n	801082e <ucdr_serialize_int16_t+0x7e>
 80107e0:	1b5e      	subs	r6, r3, r5
 80107e2:	60a3      	str	r3, [r4, #8]
 80107e4:	6923      	ldr	r3, [r4, #16]
 80107e6:	f1c6 0802 	rsb	r8, r6, #2
 80107ea:	4433      	add	r3, r6
 80107ec:	6123      	str	r3, [r4, #16]
 80107ee:	4641      	mov	r1, r8
 80107f0:	4620      	mov	r0, r4
 80107f2:	f000 fa05 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d03b      	beq.n	8010872 <ucdr_serialize_int16_t+0xc2>
 80107fa:	7d23      	ldrb	r3, [r4, #20]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d04a      	beq.n	8010896 <ucdr_serialize_int16_t+0xe6>
 8010800:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010804:	702b      	strb	r3, [r5, #0]
 8010806:	2e00      	cmp	r6, #0
 8010808:	d040      	beq.n	801088c <ucdr_serialize_int16_t+0xdc>
 801080a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801080e:	706b      	strb	r3, [r5, #1]
 8010810:	6923      	ldr	r3, [r4, #16]
 8010812:	68a2      	ldr	r2, [r4, #8]
 8010814:	7da0      	ldrb	r0, [r4, #22]
 8010816:	3302      	adds	r3, #2
 8010818:	1b9e      	subs	r6, r3, r6
 801081a:	4442      	add	r2, r8
 801081c:	2302      	movs	r3, #2
 801081e:	f080 0001 	eor.w	r0, r0, #1
 8010822:	60a2      	str	r2, [r4, #8]
 8010824:	6126      	str	r6, [r4, #16]
 8010826:	7563      	strb	r3, [r4, #21]
 8010828:	b002      	add	sp, #8
 801082a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801082e:	2102      	movs	r1, #2
 8010830:	4620      	mov	r0, r4
 8010832:	f000 f9e5 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 8010836:	b190      	cbz	r0, 801085e <ucdr_serialize_int16_t+0xae>
 8010838:	7d23      	ldrb	r3, [r4, #20]
 801083a:	2b01      	cmp	r3, #1
 801083c:	68a3      	ldr	r3, [r4, #8]
 801083e:	d014      	beq.n	801086a <ucdr_serialize_int16_t+0xba>
 8010840:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010844:	701a      	strb	r2, [r3, #0]
 8010846:	68a3      	ldr	r3, [r4, #8]
 8010848:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801084c:	705a      	strb	r2, [r3, #1]
 801084e:	68a2      	ldr	r2, [r4, #8]
 8010850:	6923      	ldr	r3, [r4, #16]
 8010852:	3202      	adds	r2, #2
 8010854:	3302      	adds	r3, #2
 8010856:	2102      	movs	r1, #2
 8010858:	60a2      	str	r2, [r4, #8]
 801085a:	6123      	str	r3, [r4, #16]
 801085c:	7561      	strb	r1, [r4, #21]
 801085e:	7da0      	ldrb	r0, [r4, #22]
 8010860:	f080 0001 	eor.w	r0, r0, #1
 8010864:	b002      	add	sp, #8
 8010866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801086a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801086e:	801a      	strh	r2, [r3, #0]
 8010870:	e7ed      	b.n	801084e <ucdr_serialize_int16_t+0x9e>
 8010872:	68a2      	ldr	r2, [r4, #8]
 8010874:	6923      	ldr	r3, [r4, #16]
 8010876:	7da0      	ldrb	r0, [r4, #22]
 8010878:	7567      	strb	r7, [r4, #21]
 801087a:	1b92      	subs	r2, r2, r6
 801087c:	1b9b      	subs	r3, r3, r6
 801087e:	f080 0001 	eor.w	r0, r0, #1
 8010882:	60a2      	str	r2, [r4, #8]
 8010884:	6123      	str	r3, [r4, #16]
 8010886:	b002      	add	sp, #8
 8010888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801088c:	68a3      	ldr	r3, [r4, #8]
 801088e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010892:	701a      	strb	r2, [r3, #0]
 8010894:	e7bc      	b.n	8010810 <ucdr_serialize_int16_t+0x60>
 8010896:	4628      	mov	r0, r5
 8010898:	f10d 0506 	add.w	r5, sp, #6
 801089c:	4629      	mov	r1, r5
 801089e:	4632      	mov	r2, r6
 80108a0:	f007 fdb8 	bl	8018414 <memcpy>
 80108a4:	68a0      	ldr	r0, [r4, #8]
 80108a6:	4642      	mov	r2, r8
 80108a8:	19a9      	adds	r1, r5, r6
 80108aa:	f007 fdb3 	bl	8018414 <memcpy>
 80108ae:	e7af      	b.n	8010810 <ucdr_serialize_int16_t+0x60>

080108b0 <ucdr_deserialize_int16_t>:
 80108b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b4:	460d      	mov	r5, r1
 80108b6:	2102      	movs	r1, #2
 80108b8:	4604      	mov	r4, r0
 80108ba:	f000 f9f5 	bl	8010ca8 <ucdr_buffer_alignment>
 80108be:	4601      	mov	r1, r0
 80108c0:	4620      	mov	r0, r4
 80108c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80108c6:	f000 fa33 	bl	8010d30 <ucdr_advance_buffer>
 80108ca:	2102      	movs	r1, #2
 80108cc:	4620      	mov	r0, r4
 80108ce:	f000 f98b 	bl	8010be8 <ucdr_check_buffer_available_for>
 80108d2:	bb60      	cbnz	r0, 801092e <ucdr_deserialize_int16_t+0x7e>
 80108d4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80108d8:	42be      	cmp	r6, r7
 80108da:	d923      	bls.n	8010924 <ucdr_deserialize_int16_t+0x74>
 80108dc:	6923      	ldr	r3, [r4, #16]
 80108de:	60a6      	str	r6, [r4, #8]
 80108e0:	1bf6      	subs	r6, r6, r7
 80108e2:	4433      	add	r3, r6
 80108e4:	f1c6 0902 	rsb	r9, r6, #2
 80108e8:	6123      	str	r3, [r4, #16]
 80108ea:	4649      	mov	r1, r9
 80108ec:	4620      	mov	r0, r4
 80108ee:	f000 f987 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80108f2:	2800      	cmp	r0, #0
 80108f4:	d034      	beq.n	8010960 <ucdr_deserialize_int16_t+0xb0>
 80108f6:	7d23      	ldrb	r3, [r4, #20]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d042      	beq.n	8010982 <ucdr_deserialize_int16_t+0xd2>
 80108fc:	787b      	ldrb	r3, [r7, #1]
 80108fe:	702b      	strb	r3, [r5, #0]
 8010900:	2e00      	cmp	r6, #0
 8010902:	d03a      	beq.n	801097a <ucdr_deserialize_int16_t+0xca>
 8010904:	783b      	ldrb	r3, [r7, #0]
 8010906:	706b      	strb	r3, [r5, #1]
 8010908:	6923      	ldr	r3, [r4, #16]
 801090a:	68a2      	ldr	r2, [r4, #8]
 801090c:	7da0      	ldrb	r0, [r4, #22]
 801090e:	2102      	movs	r1, #2
 8010910:	3302      	adds	r3, #2
 8010912:	444a      	add	r2, r9
 8010914:	1b9b      	subs	r3, r3, r6
 8010916:	7561      	strb	r1, [r4, #21]
 8010918:	60a2      	str	r2, [r4, #8]
 801091a:	6123      	str	r3, [r4, #16]
 801091c:	f080 0001 	eor.w	r0, r0, #1
 8010920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010924:	2102      	movs	r1, #2
 8010926:	4620      	mov	r0, r4
 8010928:	f000 f96a 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 801092c:	b180      	cbz	r0, 8010950 <ucdr_deserialize_int16_t+0xa0>
 801092e:	7d23      	ldrb	r3, [r4, #20]
 8010930:	2b01      	cmp	r3, #1
 8010932:	68a3      	ldr	r3, [r4, #8]
 8010934:	d011      	beq.n	801095a <ucdr_deserialize_int16_t+0xaa>
 8010936:	785b      	ldrb	r3, [r3, #1]
 8010938:	702b      	strb	r3, [r5, #0]
 801093a:	68a3      	ldr	r3, [r4, #8]
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	706b      	strb	r3, [r5, #1]
 8010940:	68a2      	ldr	r2, [r4, #8]
 8010942:	6923      	ldr	r3, [r4, #16]
 8010944:	3202      	adds	r2, #2
 8010946:	3302      	adds	r3, #2
 8010948:	2102      	movs	r1, #2
 801094a:	60a2      	str	r2, [r4, #8]
 801094c:	6123      	str	r3, [r4, #16]
 801094e:	7561      	strb	r1, [r4, #21]
 8010950:	7da0      	ldrb	r0, [r4, #22]
 8010952:	f080 0001 	eor.w	r0, r0, #1
 8010956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801095a:	881b      	ldrh	r3, [r3, #0]
 801095c:	802b      	strh	r3, [r5, #0]
 801095e:	e7ef      	b.n	8010940 <ucdr_deserialize_int16_t+0x90>
 8010960:	68a2      	ldr	r2, [r4, #8]
 8010962:	6923      	ldr	r3, [r4, #16]
 8010964:	7da0      	ldrb	r0, [r4, #22]
 8010966:	f884 8015 	strb.w	r8, [r4, #21]
 801096a:	1b92      	subs	r2, r2, r6
 801096c:	1b9b      	subs	r3, r3, r6
 801096e:	60a2      	str	r2, [r4, #8]
 8010970:	6123      	str	r3, [r4, #16]
 8010972:	f080 0001 	eor.w	r0, r0, #1
 8010976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801097a:	68a3      	ldr	r3, [r4, #8]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	706b      	strb	r3, [r5, #1]
 8010980:	e7c2      	b.n	8010908 <ucdr_deserialize_int16_t+0x58>
 8010982:	4639      	mov	r1, r7
 8010984:	4632      	mov	r2, r6
 8010986:	4628      	mov	r0, r5
 8010988:	f007 fd44 	bl	8018414 <memcpy>
 801098c:	68a1      	ldr	r1, [r4, #8]
 801098e:	464a      	mov	r2, r9
 8010990:	19a8      	adds	r0, r5, r6
 8010992:	f007 fd3f 	bl	8018414 <memcpy>
 8010996:	e7b7      	b.n	8010908 <ucdr_deserialize_int16_t+0x58>

08010998 <ucdr_serialize_int32_t>:
 8010998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801099c:	b082      	sub	sp, #8
 801099e:	4604      	mov	r4, r0
 80109a0:	9101      	str	r1, [sp, #4]
 80109a2:	2104      	movs	r1, #4
 80109a4:	f000 f980 	bl	8010ca8 <ucdr_buffer_alignment>
 80109a8:	4601      	mov	r1, r0
 80109aa:	4620      	mov	r0, r4
 80109ac:	7d67      	ldrb	r7, [r4, #21]
 80109ae:	f000 f9bf 	bl	8010d30 <ucdr_advance_buffer>
 80109b2:	2104      	movs	r1, #4
 80109b4:	4620      	mov	r0, r4
 80109b6:	f000 f917 	bl	8010be8 <ucdr_check_buffer_available_for>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	d139      	bne.n	8010a32 <ucdr_serialize_int32_t+0x9a>
 80109be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80109c2:	42ab      	cmp	r3, r5
 80109c4:	d930      	bls.n	8010a28 <ucdr_serialize_int32_t+0x90>
 80109c6:	1b5e      	subs	r6, r3, r5
 80109c8:	60a3      	str	r3, [r4, #8]
 80109ca:	6923      	ldr	r3, [r4, #16]
 80109cc:	f1c6 0804 	rsb	r8, r6, #4
 80109d0:	4433      	add	r3, r6
 80109d2:	6123      	str	r3, [r4, #16]
 80109d4:	4641      	mov	r1, r8
 80109d6:	4620      	mov	r0, r4
 80109d8:	f000 f912 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 80109dc:	2800      	cmp	r0, #0
 80109de:	d04c      	beq.n	8010a7a <ucdr_serialize_int32_t+0xe2>
 80109e0:	7d23      	ldrb	r3, [r4, #20]
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d063      	beq.n	8010aae <ucdr_serialize_int32_t+0x116>
 80109e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80109ea:	702b      	strb	r3, [r5, #0]
 80109ec:	2e00      	cmp	r6, #0
 80109ee:	d051      	beq.n	8010a94 <ucdr_serialize_int32_t+0xfc>
 80109f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80109f4:	706b      	strb	r3, [r5, #1]
 80109f6:	2e01      	cmp	r6, #1
 80109f8:	d050      	beq.n	8010a9c <ucdr_serialize_int32_t+0x104>
 80109fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80109fe:	70ab      	strb	r3, [r5, #2]
 8010a00:	2e02      	cmp	r6, #2
 8010a02:	d04f      	beq.n	8010aa4 <ucdr_serialize_int32_t+0x10c>
 8010a04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a08:	70eb      	strb	r3, [r5, #3]
 8010a0a:	6923      	ldr	r3, [r4, #16]
 8010a0c:	68a2      	ldr	r2, [r4, #8]
 8010a0e:	7da0      	ldrb	r0, [r4, #22]
 8010a10:	3304      	adds	r3, #4
 8010a12:	1b9e      	subs	r6, r3, r6
 8010a14:	4442      	add	r2, r8
 8010a16:	2304      	movs	r3, #4
 8010a18:	f080 0001 	eor.w	r0, r0, #1
 8010a1c:	60a2      	str	r2, [r4, #8]
 8010a1e:	6126      	str	r6, [r4, #16]
 8010a20:	7563      	strb	r3, [r4, #21]
 8010a22:	b002      	add	sp, #8
 8010a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a28:	2104      	movs	r1, #4
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	f000 f8e8 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 8010a30:	b1d0      	cbz	r0, 8010a68 <ucdr_serialize_int32_t+0xd0>
 8010a32:	7d23      	ldrb	r3, [r4, #20]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	68a3      	ldr	r3, [r4, #8]
 8010a38:	d01c      	beq.n	8010a74 <ucdr_serialize_int32_t+0xdc>
 8010a3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a3e:	701a      	strb	r2, [r3, #0]
 8010a40:	68a3      	ldr	r3, [r4, #8]
 8010a42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a46:	705a      	strb	r2, [r3, #1]
 8010a48:	68a3      	ldr	r3, [r4, #8]
 8010a4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010a4e:	709a      	strb	r2, [r3, #2]
 8010a50:	68a3      	ldr	r3, [r4, #8]
 8010a52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010a56:	70da      	strb	r2, [r3, #3]
 8010a58:	68a2      	ldr	r2, [r4, #8]
 8010a5a:	6923      	ldr	r3, [r4, #16]
 8010a5c:	3204      	adds	r2, #4
 8010a5e:	3304      	adds	r3, #4
 8010a60:	2104      	movs	r1, #4
 8010a62:	60a2      	str	r2, [r4, #8]
 8010a64:	6123      	str	r3, [r4, #16]
 8010a66:	7561      	strb	r1, [r4, #21]
 8010a68:	7da0      	ldrb	r0, [r4, #22]
 8010a6a:	f080 0001 	eor.w	r0, r0, #1
 8010a6e:	b002      	add	sp, #8
 8010a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a74:	9a01      	ldr	r2, [sp, #4]
 8010a76:	601a      	str	r2, [r3, #0]
 8010a78:	e7ee      	b.n	8010a58 <ucdr_serialize_int32_t+0xc0>
 8010a7a:	68a2      	ldr	r2, [r4, #8]
 8010a7c:	6923      	ldr	r3, [r4, #16]
 8010a7e:	7da0      	ldrb	r0, [r4, #22]
 8010a80:	7567      	strb	r7, [r4, #21]
 8010a82:	1b92      	subs	r2, r2, r6
 8010a84:	1b9b      	subs	r3, r3, r6
 8010a86:	f080 0001 	eor.w	r0, r0, #1
 8010a8a:	60a2      	str	r2, [r4, #8]
 8010a8c:	6123      	str	r3, [r4, #16]
 8010a8e:	b002      	add	sp, #8
 8010a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a94:	68a3      	ldr	r3, [r4, #8]
 8010a96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a9a:	701a      	strb	r2, [r3, #0]
 8010a9c:	68a3      	ldr	r3, [r4, #8]
 8010a9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010aa2:	701a      	strb	r2, [r3, #0]
 8010aa4:	68a3      	ldr	r3, [r4, #8]
 8010aa6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010aaa:	701a      	strb	r2, [r3, #0]
 8010aac:	e7ad      	b.n	8010a0a <ucdr_serialize_int32_t+0x72>
 8010aae:	4628      	mov	r0, r5
 8010ab0:	ad01      	add	r5, sp, #4
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	f007 fcad 	bl	8018414 <memcpy>
 8010aba:	68a0      	ldr	r0, [r4, #8]
 8010abc:	4642      	mov	r2, r8
 8010abe:	19a9      	adds	r1, r5, r6
 8010ac0:	f007 fca8 	bl	8018414 <memcpy>
 8010ac4:	e7a1      	b.n	8010a0a <ucdr_serialize_int32_t+0x72>
 8010ac6:	bf00      	nop

08010ac8 <ucdr_deserialize_int32_t>:
 8010ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010acc:	460d      	mov	r5, r1
 8010ace:	2104      	movs	r1, #4
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	f000 f8e9 	bl	8010ca8 <ucdr_buffer_alignment>
 8010ad6:	4601      	mov	r1, r0
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010ade:	f000 f927 	bl	8010d30 <ucdr_advance_buffer>
 8010ae2:	2104      	movs	r1, #4
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 f87f 	bl	8010be8 <ucdr_check_buffer_available_for>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d138      	bne.n	8010b60 <ucdr_deserialize_int32_t+0x98>
 8010aee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010af2:	42b7      	cmp	r7, r6
 8010af4:	d92f      	bls.n	8010b56 <ucdr_deserialize_int32_t+0x8e>
 8010af6:	6923      	ldr	r3, [r4, #16]
 8010af8:	60a7      	str	r7, [r4, #8]
 8010afa:	1bbf      	subs	r7, r7, r6
 8010afc:	443b      	add	r3, r7
 8010afe:	f1c7 0904 	rsb	r9, r7, #4
 8010b02:	6123      	str	r3, [r4, #16]
 8010b04:	4649      	mov	r1, r9
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 f87a 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	d046      	beq.n	8010b9e <ucdr_deserialize_int32_t+0xd6>
 8010b10:	7d23      	ldrb	r3, [r4, #20]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d05c      	beq.n	8010bd0 <ucdr_deserialize_int32_t+0x108>
 8010b16:	78f3      	ldrb	r3, [r6, #3]
 8010b18:	702b      	strb	r3, [r5, #0]
 8010b1a:	2f00      	cmp	r7, #0
 8010b1c:	d04c      	beq.n	8010bb8 <ucdr_deserialize_int32_t+0xf0>
 8010b1e:	78b3      	ldrb	r3, [r6, #2]
 8010b20:	706b      	strb	r3, [r5, #1]
 8010b22:	2f01      	cmp	r7, #1
 8010b24:	f105 0302 	add.w	r3, r5, #2
 8010b28:	d04a      	beq.n	8010bc0 <ucdr_deserialize_int32_t+0xf8>
 8010b2a:	7873      	ldrb	r3, [r6, #1]
 8010b2c:	70ab      	strb	r3, [r5, #2]
 8010b2e:	2f02      	cmp	r7, #2
 8010b30:	f105 0303 	add.w	r3, r5, #3
 8010b34:	d048      	beq.n	8010bc8 <ucdr_deserialize_int32_t+0x100>
 8010b36:	7833      	ldrb	r3, [r6, #0]
 8010b38:	70eb      	strb	r3, [r5, #3]
 8010b3a:	6923      	ldr	r3, [r4, #16]
 8010b3c:	68a2      	ldr	r2, [r4, #8]
 8010b3e:	7da0      	ldrb	r0, [r4, #22]
 8010b40:	2104      	movs	r1, #4
 8010b42:	3304      	adds	r3, #4
 8010b44:	444a      	add	r2, r9
 8010b46:	1bdb      	subs	r3, r3, r7
 8010b48:	7561      	strb	r1, [r4, #21]
 8010b4a:	60a2      	str	r2, [r4, #8]
 8010b4c:	6123      	str	r3, [r4, #16]
 8010b4e:	f080 0001 	eor.w	r0, r0, #1
 8010b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b56:	2104      	movs	r1, #4
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f000 f851 	bl	8010c00 <ucdr_check_final_buffer_behavior>
 8010b5e:	b1b0      	cbz	r0, 8010b8e <ucdr_deserialize_int32_t+0xc6>
 8010b60:	7d23      	ldrb	r3, [r4, #20]
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	68a3      	ldr	r3, [r4, #8]
 8010b66:	d017      	beq.n	8010b98 <ucdr_deserialize_int32_t+0xd0>
 8010b68:	78db      	ldrb	r3, [r3, #3]
 8010b6a:	702b      	strb	r3, [r5, #0]
 8010b6c:	68a3      	ldr	r3, [r4, #8]
 8010b6e:	789b      	ldrb	r3, [r3, #2]
 8010b70:	706b      	strb	r3, [r5, #1]
 8010b72:	68a3      	ldr	r3, [r4, #8]
 8010b74:	785b      	ldrb	r3, [r3, #1]
 8010b76:	70ab      	strb	r3, [r5, #2]
 8010b78:	68a3      	ldr	r3, [r4, #8]
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	70eb      	strb	r3, [r5, #3]
 8010b7e:	68a2      	ldr	r2, [r4, #8]
 8010b80:	6923      	ldr	r3, [r4, #16]
 8010b82:	3204      	adds	r2, #4
 8010b84:	3304      	adds	r3, #4
 8010b86:	2104      	movs	r1, #4
 8010b88:	60a2      	str	r2, [r4, #8]
 8010b8a:	6123      	str	r3, [r4, #16]
 8010b8c:	7561      	strb	r1, [r4, #21]
 8010b8e:	7da0      	ldrb	r0, [r4, #22]
 8010b90:	f080 0001 	eor.w	r0, r0, #1
 8010b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	602b      	str	r3, [r5, #0]
 8010b9c:	e7ef      	b.n	8010b7e <ucdr_deserialize_int32_t+0xb6>
 8010b9e:	68a2      	ldr	r2, [r4, #8]
 8010ba0:	6923      	ldr	r3, [r4, #16]
 8010ba2:	7da0      	ldrb	r0, [r4, #22]
 8010ba4:	f884 8015 	strb.w	r8, [r4, #21]
 8010ba8:	1bd2      	subs	r2, r2, r7
 8010baa:	1bdb      	subs	r3, r3, r7
 8010bac:	60a2      	str	r2, [r4, #8]
 8010bae:	6123      	str	r3, [r4, #16]
 8010bb0:	f080 0001 	eor.w	r0, r0, #1
 8010bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bb8:	68a3      	ldr	r3, [r4, #8]
 8010bba:	789b      	ldrb	r3, [r3, #2]
 8010bbc:	706b      	strb	r3, [r5, #1]
 8010bbe:	1cab      	adds	r3, r5, #2
 8010bc0:	68a2      	ldr	r2, [r4, #8]
 8010bc2:	7852      	ldrb	r2, [r2, #1]
 8010bc4:	f803 2b01 	strb.w	r2, [r3], #1
 8010bc8:	68a2      	ldr	r2, [r4, #8]
 8010bca:	7812      	ldrb	r2, [r2, #0]
 8010bcc:	701a      	strb	r2, [r3, #0]
 8010bce:	e7b4      	b.n	8010b3a <ucdr_deserialize_int32_t+0x72>
 8010bd0:	4631      	mov	r1, r6
 8010bd2:	463a      	mov	r2, r7
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f007 fc1d 	bl	8018414 <memcpy>
 8010bda:	68a1      	ldr	r1, [r4, #8]
 8010bdc:	464a      	mov	r2, r9
 8010bde:	19e8      	adds	r0, r5, r7
 8010be0:	f007 fc18 	bl	8018414 <memcpy>
 8010be4:	e7a9      	b.n	8010b3a <ucdr_deserialize_int32_t+0x72>
 8010be6:	bf00      	nop

08010be8 <ucdr_check_buffer_available_for>:
 8010be8:	7d83      	ldrb	r3, [r0, #22]
 8010bea:	b93b      	cbnz	r3, 8010bfc <ucdr_check_buffer_available_for+0x14>
 8010bec:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010bf0:	4419      	add	r1, r3
 8010bf2:	4288      	cmp	r0, r1
 8010bf4:	bf34      	ite	cc
 8010bf6:	2000      	movcc	r0, #0
 8010bf8:	2001      	movcs	r0, #1
 8010bfa:	4770      	bx	lr
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	4770      	bx	lr

08010c00 <ucdr_check_final_buffer_behavior>:
 8010c00:	7d83      	ldrb	r3, [r0, #22]
 8010c02:	b943      	cbnz	r3, 8010c16 <ucdr_check_final_buffer_behavior+0x16>
 8010c04:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010c08:	4291      	cmp	r1, r2
 8010c0a:	b510      	push	{r4, lr}
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	d205      	bcs.n	8010c1c <ucdr_check_final_buffer_behavior+0x1c>
 8010c10:	2301      	movs	r3, #1
 8010c12:	4618      	mov	r0, r3
 8010c14:	bd10      	pop	{r4, pc}
 8010c16:	2300      	movs	r3, #0
 8010c18:	4618      	mov	r0, r3
 8010c1a:	4770      	bx	lr
 8010c1c:	6982      	ldr	r2, [r0, #24]
 8010c1e:	b13a      	cbz	r2, 8010c30 <ucdr_check_final_buffer_behavior+0x30>
 8010c20:	69c1      	ldr	r1, [r0, #28]
 8010c22:	4790      	blx	r2
 8010c24:	f080 0301 	eor.w	r3, r0, #1
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	75a0      	strb	r0, [r4, #22]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	bd10      	pop	{r4, pc}
 8010c30:	2001      	movs	r0, #1
 8010c32:	75a0      	strb	r0, [r4, #22]
 8010c34:	e7fa      	b.n	8010c2c <ucdr_check_final_buffer_behavior+0x2c>
 8010c36:	bf00      	nop

08010c38 <ucdr_set_on_full_buffer_callback>:
 8010c38:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop

08010c40 <ucdr_init_buffer_origin_offset_endian>:
 8010c40:	b410      	push	{r4}
 8010c42:	9c01      	ldr	r4, [sp, #4]
 8010c44:	6001      	str	r1, [r0, #0]
 8010c46:	440a      	add	r2, r1
 8010c48:	6042      	str	r2, [r0, #4]
 8010c4a:	190a      	adds	r2, r1, r4
 8010c4c:	441c      	add	r4, r3
 8010c4e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010c52:	6082      	str	r2, [r0, #8]
 8010c54:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010c58:	7503      	strb	r3, [r0, #20]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c64:	7542      	strb	r2, [r0, #21]
 8010c66:	7582      	strb	r2, [r0, #22]
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop

08010c6c <ucdr_init_buffer_origin_offset>:
 8010c6c:	b510      	push	{r4, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	9c04      	ldr	r4, [sp, #16]
 8010c72:	9400      	str	r4, [sp, #0]
 8010c74:	2401      	movs	r4, #1
 8010c76:	9401      	str	r4, [sp, #4]
 8010c78:	f7ff ffe2 	bl	8010c40 <ucdr_init_buffer_origin_offset_endian>
 8010c7c:	b002      	add	sp, #8
 8010c7e:	bd10      	pop	{r4, pc}

08010c80 <ucdr_init_buffer_origin>:
 8010c80:	b510      	push	{r4, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	2400      	movs	r4, #0
 8010c86:	9400      	str	r4, [sp, #0]
 8010c88:	f7ff fff0 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8010c8c:	b002      	add	sp, #8
 8010c8e:	bd10      	pop	{r4, pc}

08010c90 <ucdr_init_buffer>:
 8010c90:	2300      	movs	r3, #0
 8010c92:	f7ff bff5 	b.w	8010c80 <ucdr_init_buffer_origin>
 8010c96:	bf00      	nop

08010c98 <ucdr_alignment>:
 8010c98:	fbb0 f3f1 	udiv	r3, r0, r1
 8010c9c:	fb03 0011 	mls	r0, r3, r1, r0
 8010ca0:	1a08      	subs	r0, r1, r0
 8010ca2:	3901      	subs	r1, #1
 8010ca4:	4008      	ands	r0, r1
 8010ca6:	4770      	bx	lr

08010ca8 <ucdr_buffer_alignment>:
 8010ca8:	7d43      	ldrb	r3, [r0, #21]
 8010caa:	428b      	cmp	r3, r1
 8010cac:	d208      	bcs.n	8010cc0 <ucdr_buffer_alignment+0x18>
 8010cae:	6900      	ldr	r0, [r0, #16]
 8010cb0:	fbb0 f3f1 	udiv	r3, r0, r1
 8010cb4:	fb01 0013 	mls	r0, r1, r3, r0
 8010cb8:	1a08      	subs	r0, r1, r0
 8010cba:	3901      	subs	r1, #1
 8010cbc:	4008      	ands	r0, r1
 8010cbe:	4770      	bx	lr
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	4770      	bx	lr

08010cc4 <ucdr_align_to>:
 8010cc4:	b538      	push	{r3, r4, r5, lr}
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	460d      	mov	r5, r1
 8010cca:	f7ff ffed 	bl	8010ca8 <ucdr_buffer_alignment>
 8010cce:	68a3      	ldr	r3, [r4, #8]
 8010cd0:	6921      	ldr	r1, [r4, #16]
 8010cd2:	7565      	strb	r5, [r4, #21]
 8010cd4:	181a      	adds	r2, r3, r0
 8010cd6:	6863      	ldr	r3, [r4, #4]
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	4408      	add	r0, r1
 8010cdc:	bf28      	it	cs
 8010cde:	4613      	movcs	r3, r2
 8010ce0:	6120      	str	r0, [r4, #16]
 8010ce2:	60a3      	str	r3, [r4, #8]
 8010ce4:	bd38      	pop	{r3, r4, r5, pc}
 8010ce6:	bf00      	nop

08010ce8 <ucdr_buffer_length>:
 8010ce8:	6882      	ldr	r2, [r0, #8]
 8010cea:	6800      	ldr	r0, [r0, #0]
 8010cec:	1a10      	subs	r0, r2, r0
 8010cee:	4770      	bx	lr

08010cf0 <ucdr_buffer_remaining>:
 8010cf0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010cf4:	1a10      	subs	r0, r2, r0
 8010cf6:	4770      	bx	lr

08010cf8 <ucdr_check_final_buffer_behavior_array>:
 8010cf8:	b538      	push	{r3, r4, r5, lr}
 8010cfa:	7d83      	ldrb	r3, [r0, #22]
 8010cfc:	b963      	cbnz	r3, 8010d18 <ucdr_check_final_buffer_behavior_array+0x20>
 8010cfe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	4604      	mov	r4, r0
 8010d06:	460d      	mov	r5, r1
 8010d08:	d308      	bcc.n	8010d1c <ucdr_check_final_buffer_behavior_array+0x24>
 8010d0a:	b139      	cbz	r1, 8010d1c <ucdr_check_final_buffer_behavior_array+0x24>
 8010d0c:	6983      	ldr	r3, [r0, #24]
 8010d0e:	b163      	cbz	r3, 8010d2a <ucdr_check_final_buffer_behavior_array+0x32>
 8010d10:	69c1      	ldr	r1, [r0, #28]
 8010d12:	4798      	blx	r3
 8010d14:	75a0      	strb	r0, [r4, #22]
 8010d16:	b108      	cbz	r0, 8010d1c <ucdr_check_final_buffer_behavior_array+0x24>
 8010d18:	2000      	movs	r0, #0
 8010d1a:	bd38      	pop	{r3, r4, r5, pc}
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f7ff ffe7 	bl	8010cf0 <ucdr_buffer_remaining>
 8010d22:	42a8      	cmp	r0, r5
 8010d24:	bf28      	it	cs
 8010d26:	4628      	movcs	r0, r5
 8010d28:	bd38      	pop	{r3, r4, r5, pc}
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	7583      	strb	r3, [r0, #22]
 8010d2e:	e7f3      	b.n	8010d18 <ucdr_check_final_buffer_behavior_array+0x20>

08010d30 <ucdr_advance_buffer>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	4604      	mov	r4, r0
 8010d34:	460d      	mov	r5, r1
 8010d36:	f7ff ff57 	bl	8010be8 <ucdr_check_buffer_available_for>
 8010d3a:	b178      	cbz	r0, 8010d5c <ucdr_advance_buffer+0x2c>
 8010d3c:	6923      	ldr	r3, [r4, #16]
 8010d3e:	68a2      	ldr	r2, [r4, #8]
 8010d40:	442b      	add	r3, r5
 8010d42:	6123      	str	r3, [r4, #16]
 8010d44:	2301      	movs	r3, #1
 8010d46:	442a      	add	r2, r5
 8010d48:	7563      	strb	r3, [r4, #21]
 8010d4a:	60a2      	str	r2, [r4, #8]
 8010d4c:	bd38      	pop	{r3, r4, r5, pc}
 8010d4e:	68a2      	ldr	r2, [r4, #8]
 8010d50:	6923      	ldr	r3, [r4, #16]
 8010d52:	4402      	add	r2, r0
 8010d54:	4403      	add	r3, r0
 8010d56:	1a2d      	subs	r5, r5, r0
 8010d58:	60a2      	str	r2, [r4, #8]
 8010d5a:	6123      	str	r3, [r4, #16]
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	2201      	movs	r2, #1
 8010d60:	4620      	mov	r0, r4
 8010d62:	f7ff ffc9 	bl	8010cf8 <ucdr_check_final_buffer_behavior_array>
 8010d66:	2800      	cmp	r0, #0
 8010d68:	d1f1      	bne.n	8010d4e <ucdr_advance_buffer+0x1e>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	7563      	strb	r3, [r4, #21]
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}

08010d70 <uxr_buffer_delete_entity>:
 8010d70:	b510      	push	{r4, lr}
 8010d72:	2300      	movs	r3, #0
 8010d74:	b08e      	sub	sp, #56	; 0x38
 8010d76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	9300      	str	r3, [sp, #0]
 8010d7e:	2204      	movs	r2, #4
 8010d80:	ab06      	add	r3, sp, #24
 8010d82:	4604      	mov	r4, r0
 8010d84:	9103      	str	r1, [sp, #12]
 8010d86:	f001 f86f 	bl	8011e68 <uxr_prepare_stream_to_write_submessage>
 8010d8a:	b918      	cbnz	r0, 8010d94 <uxr_buffer_delete_entity+0x24>
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	4620      	mov	r0, r4
 8010d90:	b00e      	add	sp, #56	; 0x38
 8010d92:	bd10      	pop	{r4, pc}
 8010d94:	9902      	ldr	r1, [sp, #8]
 8010d96:	aa05      	add	r2, sp, #20
 8010d98:	4620      	mov	r0, r4
 8010d9a:	f001 f99b 	bl	80120d4 <uxr_init_base_object_request>
 8010d9e:	a905      	add	r1, sp, #20
 8010da0:	4604      	mov	r4, r0
 8010da2:	a806      	add	r0, sp, #24
 8010da4:	f002 fb00 	bl	80133a8 <uxr_serialize_DELETE_Payload>
 8010da8:	4620      	mov	r0, r4
 8010daa:	b00e      	add	sp, #56	; 0x38
 8010dac:	bd10      	pop	{r4, pc}
 8010dae:	bf00      	nop

08010db0 <uxr_common_create_entity>:
 8010db0:	b510      	push	{r4, lr}
 8010db2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010db6:	b08c      	sub	sp, #48	; 0x30
 8010db8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010dbc:	f1bc 0f01 	cmp.w	ip, #1
 8010dc0:	bf0c      	ite	eq
 8010dc2:	f003 0201 	andeq.w	r2, r3, #1
 8010dc6:	2200      	movne	r2, #0
 8010dc8:	330e      	adds	r3, #14
 8010dca:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8010dce:	9101      	str	r1, [sp, #4]
 8010dd0:	441a      	add	r2, r3
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	9300      	str	r3, [sp, #0]
 8010dd6:	9903      	ldr	r1, [sp, #12]
 8010dd8:	ab04      	add	r3, sp, #16
 8010dda:	b292      	uxth	r2, r2
 8010ddc:	4604      	mov	r4, r0
 8010dde:	f001 f843 	bl	8011e68 <uxr_prepare_stream_to_write_submessage>
 8010de2:	b918      	cbnz	r0, 8010dec <uxr_common_create_entity+0x3c>
 8010de4:	4604      	mov	r4, r0
 8010de6:	4620      	mov	r0, r4
 8010de8:	b00c      	add	sp, #48	; 0x30
 8010dea:	bd10      	pop	{r4, pc}
 8010dec:	9902      	ldr	r1, [sp, #8]
 8010dee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010df0:	4620      	mov	r0, r4
 8010df2:	f001 f96f 	bl	80120d4 <uxr_init_base_object_request>
 8010df6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010df8:	4604      	mov	r4, r0
 8010dfa:	a804      	add	r0, sp, #16
 8010dfc:	f002 fa30 	bl	8013260 <uxr_serialize_CREATE_Payload>
 8010e00:	4620      	mov	r0, r4
 8010e02:	b00c      	add	sp, #48	; 0x30
 8010e04:	bd10      	pop	{r4, pc}
 8010e06:	bf00      	nop

08010e08 <uxr_buffer_create_participant_bin>:
 8010e08:	b570      	push	{r4, r5, r6, lr}
 8010e0a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010e0e:	ac11      	add	r4, sp, #68	; 0x44
 8010e10:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8010e14:	2303      	movs	r3, #3
 8010e16:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010e1a:	7223      	strb	r3, [r4, #8]
 8010e1c:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8010e1e:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8010e22:	2201      	movs	r2, #1
 8010e24:	2100      	movs	r1, #0
 8010e26:	4605      	mov	r5, r0
 8010e28:	7122      	strb	r2, [r4, #4]
 8010e2a:	f88d 1014 	strb.w	r1, [sp, #20]
 8010e2e:	b1cb      	cbz	r3, 8010e64 <uxr_buffer_create_participant_bin+0x5c>
 8010e30:	f88d 201c 	strb.w	r2, [sp, #28]
 8010e34:	9308      	str	r3, [sp, #32]
 8010e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e3a:	a915      	add	r1, sp, #84	; 0x54
 8010e3c:	a809      	add	r0, sp, #36	; 0x24
 8010e3e:	f7ff ff27 	bl	8010c90 <ucdr_init_buffer>
 8010e42:	a905      	add	r1, sp, #20
 8010e44:	a809      	add	r0, sp, #36	; 0x24
 8010e46:	f001 fed9 	bl	8012bfc <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e4c:	9600      	str	r6, [sp, #0]
 8010e4e:	9401      	str	r4, [sp, #4]
 8010e50:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e54:	60e3      	str	r3, [r4, #12]
 8010e56:	4628      	mov	r0, r5
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	f7ff ffa9 	bl	8010db0 <uxr_common_create_entity>
 8010e5e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e68:	e7e5      	b.n	8010e36 <uxr_buffer_create_participant_bin+0x2e>
 8010e6a:	bf00      	nop

08010e6c <uxr_buffer_create_topic_bin>:
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8010e72:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010e76:	9105      	str	r1, [sp, #20]
 8010e78:	4605      	mov	r5, r0
 8010e7a:	a997      	add	r1, sp, #604	; 0x25c
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	2302      	movs	r3, #2
 8010e80:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8010e84:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8010e88:	f000 f8ee 	bl	8011068 <uxr_object_id_to_raw>
 8010e8c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8010e8e:	9306      	str	r3, [sp, #24]
 8010e90:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8010e92:	930a      	str	r3, [sp, #40]	; 0x28
 8010e94:	2303      	movs	r3, #3
 8010e96:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ea0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010ea4:	a917      	add	r1, sp, #92	; 0x5c
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	a80b      	add	r0, sp, #44	; 0x2c
 8010eaa:	f88d 301c 	strb.w	r3, [sp, #28]
 8010eae:	f7ff feef 	bl	8010c90 <ucdr_init_buffer>
 8010eb2:	a906      	add	r1, sp, #24
 8010eb4:	a80b      	add	r0, sp, #44	; 0x2c
 8010eb6:	f001 fec3 	bl	8012c40 <uxr_serialize_OBJK_Topic_Binary>
 8010eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ebc:	9316      	str	r3, [sp, #88]	; 0x58
 8010ebe:	ac13      	add	r4, sp, #76	; 0x4c
 8010ec0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ec4:	9600      	str	r6, [sp, #0]
 8010ec6:	9401      	str	r4, [sp, #4]
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f7ff ff70 	bl	8010db0 <uxr_common_create_entity>
 8010ed0:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
 8010ed6:	bf00      	nop

08010ed8 <uxr_buffer_create_publisher_bin>:
 8010ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eda:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010ede:	4605      	mov	r5, r0
 8010ee0:	9105      	str	r1, [sp, #20]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	2603      	movs	r6, #3
 8010ee6:	a992      	add	r1, sp, #584	; 0x248
 8010ee8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010eec:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010ef0:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8010ef4:	f000 f8b8 	bl	8011068 <uxr_object_id_to_raw>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010efe:	a912      	add	r1, sp, #72	; 0x48
 8010f00:	a806      	add	r0, sp, #24
 8010f02:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010f06:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010f0a:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010f0e:	f7ff febf 	bl	8010c90 <ucdr_init_buffer>
 8010f12:	a993      	add	r1, sp, #588	; 0x24c
 8010f14:	a806      	add	r0, sp, #24
 8010f16:	f001 ff47 	bl	8012da8 <uxr_serialize_OBJK_Publisher_Binary>
 8010f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f1c:	9311      	str	r3, [sp, #68]	; 0x44
 8010f1e:	ac0e      	add	r4, sp, #56	; 0x38
 8010f20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010f24:	9700      	str	r7, [sp, #0]
 8010f26:	9401      	str	r4, [sp, #4]
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f7ff ff40 	bl	8010db0 <uxr_common_create_entity>
 8010f30:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8010f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f36:	bf00      	nop

08010f38 <uxr_buffer_create_datawriter_bin>:
 8010f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010f40:	ac1d      	add	r4, sp, #116	; 0x74
 8010f42:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010f46:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8010f4a:	9105      	str	r1, [sp, #20]
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	a9a1      	add	r1, sp, #644	; 0x284
 8010f50:	4618      	mov	r0, r3
 8010f52:	2305      	movs	r3, #5
 8010f54:	7123      	strb	r3, [r4, #4]
 8010f56:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8010f5a:	2703      	movs	r7, #3
 8010f5c:	f000 f884 	bl	8011068 <uxr_object_id_to_raw>
 8010f60:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8010f62:	7227      	strb	r7, [r4, #8]
 8010f64:	a90e      	add	r1, sp, #56	; 0x38
 8010f66:	f000 f87f 	bl	8011068 <uxr_object_id_to_raw>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010f70:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8010f74:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010f78:	3d00      	subs	r5, #0
 8010f7a:	bf18      	it	ne
 8010f7c:	2501      	movne	r5, #1
 8010f7e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010f82:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010f86:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010f8a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010f8e:	2301      	movs	r3, #1
 8010f90:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010f94:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010f98:	bb8a      	cbnz	r2, 8010ffe <uxr_buffer_create_datawriter_bin+0xc6>
 8010f9a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010f9e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8010fa2:	f04f 0c13 	mov.w	ip, #19
 8010fa6:	250b      	movs	r5, #11
 8010fa8:	2221      	movs	r2, #33	; 0x21
 8010faa:	2111      	movs	r1, #17
 8010fac:	2009      	movs	r0, #9
 8010fae:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8010fb2:	b923      	cbnz	r3, 8010fbe <uxr_buffer_create_datawriter_bin+0x86>
 8010fb4:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010fb8:	4672      	mov	r2, lr
 8010fba:	4661      	mov	r1, ip
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d025      	beq.n	8011012 <uxr_buffer_create_datawriter_bin+0xda>
 8010fc6:	2b03      	cmp	r3, #3
 8010fc8:	d029      	beq.n	801101e <uxr_buffer_create_datawriter_bin+0xe6>
 8010fca:	b32b      	cbz	r3, 8011018 <uxr_buffer_create_datawriter_bin+0xe0>
 8010fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fd0:	a921      	add	r1, sp, #132	; 0x84
 8010fd2:	a806      	add	r0, sp, #24
 8010fd4:	f7ff fe5c 	bl	8010c90 <ucdr_init_buffer>
 8010fd8:	a90e      	add	r1, sp, #56	; 0x38
 8010fda:	a806      	add	r0, sp, #24
 8010fdc:	f001 ff5a 	bl	8012e94 <uxr_serialize_OBJK_DataWriter_Binary>
 8010fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fe2:	f8cd 8000 	str.w	r8, [sp]
 8010fe6:	9401      	str	r4, [sp, #4]
 8010fe8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010fec:	60e3      	str	r3, [r4, #12]
 8010fee:	4630      	mov	r0, r6
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	f7ff fedd 	bl	8010db0 <uxr_common_create_entity>
 8010ff6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ffe:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011002:	f04f 0c12 	mov.w	ip, #18
 8011006:	250a      	movs	r5, #10
 8011008:	2220      	movs	r2, #32
 801100a:	2110      	movs	r1, #16
 801100c:	2008      	movs	r0, #8
 801100e:	2702      	movs	r7, #2
 8011010:	e7cd      	b.n	8010fae <uxr_buffer_create_datawriter_bin+0x76>
 8011012:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011016:	e7d9      	b.n	8010fcc <uxr_buffer_create_datawriter_bin+0x94>
 8011018:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801101c:	e7d6      	b.n	8010fcc <uxr_buffer_create_datawriter_bin+0x94>
 801101e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011022:	e7d3      	b.n	8010fcc <uxr_buffer_create_datawriter_bin+0x94>

08011024 <uxr_object_id>:
 8011024:	b082      	sub	sp, #8
 8011026:	2300      	movs	r3, #0
 8011028:	f88d 1006 	strb.w	r1, [sp, #6]
 801102c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011030:	f360 030f 	bfi	r3, r0, #0, #16
 8011034:	f362 431f 	bfi	r3, r2, #16, #16
 8011038:	4618      	mov	r0, r3
 801103a:	b002      	add	sp, #8
 801103c:	4770      	bx	lr
 801103e:	bf00      	nop

08011040 <uxr_object_id_from_raw>:
 8011040:	7843      	ldrb	r3, [r0, #1]
 8011042:	7801      	ldrb	r1, [r0, #0]
 8011044:	b082      	sub	sp, #8
 8011046:	f003 020f 	and.w	r2, r3, #15
 801104a:	f88d 2006 	strb.w	r2, [sp, #6]
 801104e:	091b      	lsrs	r3, r3, #4
 8011050:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011054:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011058:	2000      	movs	r0, #0
 801105a:	f363 000f 	bfi	r0, r3, #0, #16
 801105e:	f362 401f 	bfi	r0, r2, #16, #16
 8011062:	b002      	add	sp, #8
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop

08011068 <uxr_object_id_to_raw>:
 8011068:	4602      	mov	r2, r0
 801106a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801106e:	b082      	sub	sp, #8
 8011070:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011074:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011078:	f881 c000 	strb.w	ip, [r1]
 801107c:	7048      	strb	r0, [r1, #1]
 801107e:	b002      	add	sp, #8
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop

08011084 <on_get_fragmentation_info>:
 8011084:	b500      	push	{lr}
 8011086:	b08b      	sub	sp, #44	; 0x2c
 8011088:	4601      	mov	r1, r0
 801108a:	2204      	movs	r2, #4
 801108c:	a802      	add	r0, sp, #8
 801108e:	f7ff fdff 	bl	8010c90 <ucdr_init_buffer>
 8011092:	f10d 0305 	add.w	r3, sp, #5
 8011096:	f10d 0206 	add.w	r2, sp, #6
 801109a:	a901      	add	r1, sp, #4
 801109c:	a802      	add	r0, sp, #8
 801109e:	f001 f99b 	bl	80123d8 <uxr_read_submessage_header>
 80110a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110a6:	2b0d      	cmp	r3, #13
 80110a8:	d003      	beq.n	80110b2 <on_get_fragmentation_info+0x2e>
 80110aa:	2000      	movs	r0, #0
 80110ac:	b00b      	add	sp, #44	; 0x2c
 80110ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80110b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80110b6:	f013 0f02 	tst.w	r3, #2
 80110ba:	bf14      	ite	ne
 80110bc:	2002      	movne	r0, #2
 80110be:	2001      	moveq	r0, #1
 80110c0:	b00b      	add	sp, #44	; 0x2c
 80110c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80110c6:	bf00      	nop

080110c8 <read_submessage_get_info>:
 80110c8:	b570      	push	{r4, r5, r6, lr}
 80110ca:	2500      	movs	r5, #0
 80110cc:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80110d0:	4604      	mov	r4, r0
 80110d2:	f44f 7224 	mov.w	r2, #656	; 0x290
 80110d6:	460e      	mov	r6, r1
 80110d8:	a810      	add	r0, sp, #64	; 0x40
 80110da:	4629      	mov	r1, r5
 80110dc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80110e0:	f007 f8d0 	bl	8018284 <memset>
 80110e4:	a903      	add	r1, sp, #12
 80110e6:	4630      	mov	r0, r6
 80110e8:	f002 f94a 	bl	8013380 <uxr_deserialize_GET_INFO_Payload>
 80110ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80110f0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80110f4:	4620      	mov	r0, r4
 80110f6:	f000 ffe5 	bl	80120c4 <uxr_session_header_offset>
 80110fa:	462b      	mov	r3, r5
 80110fc:	9000      	str	r0, [sp, #0]
 80110fe:	220c      	movs	r2, #12
 8011100:	a905      	add	r1, sp, #20
 8011102:	a808      	add	r0, sp, #32
 8011104:	f7ff fdb2 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8011108:	a910      	add	r1, sp, #64	; 0x40
 801110a:	a808      	add	r0, sp, #32
 801110c:	f002 f9aa 	bl	8013464 <uxr_serialize_INFO_Payload>
 8011110:	9b08      	ldr	r3, [sp, #32]
 8011112:	462a      	mov	r2, r5
 8011114:	4629      	mov	r1, r5
 8011116:	4620      	mov	r0, r4
 8011118:	f000 ff7e 	bl	8012018 <uxr_stamp_session_header>
 801111c:	a808      	add	r0, sp, #32
 801111e:	f7ff fde3 	bl	8010ce8 <ucdr_buffer_length>
 8011122:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011124:	4602      	mov	r2, r0
 8011126:	a905      	add	r1, sp, #20
 8011128:	e9d3 0400 	ldrd	r0, r4, [r3]
 801112c:	47a0      	blx	r4
 801112e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8011132:	bd70      	pop	{r4, r5, r6, pc}

08011134 <write_submessage_acknack.isra.0>:
 8011134:	b570      	push	{r4, r5, r6, lr}
 8011136:	b092      	sub	sp, #72	; 0x48
 8011138:	4605      	mov	r5, r0
 801113a:	460e      	mov	r6, r1
 801113c:	4614      	mov	r4, r2
 801113e:	f000 ffc1 	bl	80120c4 <uxr_session_header_offset>
 8011142:	a905      	add	r1, sp, #20
 8011144:	9000      	str	r0, [sp, #0]
 8011146:	2300      	movs	r3, #0
 8011148:	a80a      	add	r0, sp, #40	; 0x28
 801114a:	2211      	movs	r2, #17
 801114c:	f7ff fd8e 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8011150:	2218      	movs	r2, #24
 8011152:	fb02 5404 	mla	r4, r2, r4, r5
 8011156:	2300      	movs	r3, #0
 8011158:	2205      	movs	r2, #5
 801115a:	3450      	adds	r4, #80	; 0x50
 801115c:	210a      	movs	r1, #10
 801115e:	a80a      	add	r0, sp, #40	; 0x28
 8011160:	f001 f920 	bl	80123a4 <uxr_buffer_submessage_header>
 8011164:	a903      	add	r1, sp, #12
 8011166:	4620      	mov	r0, r4
 8011168:	f004 ff20 	bl	8015fac <uxr_compute_acknack>
 801116c:	ba40      	rev16	r0, r0
 801116e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011172:	a903      	add	r1, sp, #12
 8011174:	a80a      	add	r0, sp, #40	; 0x28
 8011176:	f88d 6010 	strb.w	r6, [sp, #16]
 801117a:	f002 f9e3 	bl	8013544 <uxr_serialize_ACKNACK_Payload>
 801117e:	2200      	movs	r2, #0
 8011180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011182:	4611      	mov	r1, r2
 8011184:	4628      	mov	r0, r5
 8011186:	f000 ff47 	bl	8012018 <uxr_stamp_session_header>
 801118a:	a80a      	add	r0, sp, #40	; 0x28
 801118c:	f7ff fdac 	bl	8010ce8 <ucdr_buffer_length>
 8011190:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011192:	4602      	mov	r2, r0
 8011194:	a905      	add	r1, sp, #20
 8011196:	e9d3 0400 	ldrd	r0, r4, [r3]
 801119a:	47a0      	blx	r4
 801119c:	b012      	add	sp, #72	; 0x48
 801119e:	bd70      	pop	{r4, r5, r6, pc}

080111a0 <uxr_init_session>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80111d8 <uxr_init_session+0x38>
 80111a6:	2300      	movs	r3, #0
 80111a8:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80111ac:	4604      	mov	r4, r0
 80111ae:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80111b2:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80111b6:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80111ba:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80111be:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80111c2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80111c6:	2181      	movs	r1, #129	; 0x81
 80111c8:	f000 fe92 	bl	8011ef0 <uxr_init_session_info>
 80111cc:	f104 0008 	add.w	r0, r4, #8
 80111d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111d4:	f001 b802 	b.w	80121dc <uxr_init_stream_storage>
	...

080111e0 <uxr_set_status_callback>:
 80111e0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop

080111e8 <uxr_set_topic_callback>:
 80111e8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop

080111f0 <uxr_set_request_callback>:
 80111f0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop

080111f8 <uxr_set_reply_callback>:
 80111f8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop

08011200 <uxr_create_output_best_effort_stream>:
 8011200:	b510      	push	{r4, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	e9cd 2100 	strd	r2, r1, [sp]
 8011208:	4604      	mov	r4, r0
 801120a:	f000 ff5b 	bl	80120c4 <uxr_session_header_offset>
 801120e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011212:	4603      	mov	r3, r0
 8011214:	f104 0008 	add.w	r0, r4, #8
 8011218:	b004      	add	sp, #16
 801121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801121e:	f001 b827 	b.w	8012270 <uxr_add_output_best_effort_buffer>
 8011222:	bf00      	nop

08011224 <uxr_create_output_reliable_stream>:
 8011224:	b510      	push	{r4, lr}
 8011226:	b088      	sub	sp, #32
 8011228:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801122c:	4604      	mov	r4, r0
 801122e:	9303      	str	r3, [sp, #12]
 8011230:	f000 ff48 	bl	80120c4 <uxr_session_header_offset>
 8011234:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011238:	9000      	str	r0, [sp, #0]
 801123a:	9905      	ldr	r1, [sp, #20]
 801123c:	f104 0008 	add.w	r0, r4, #8
 8011240:	f001 f82a 	bl	8012298 <uxr_add_output_reliable_buffer>
 8011244:	2200      	movs	r2, #0
 8011246:	b2c3      	uxtb	r3, r0
 8011248:	f363 0207 	bfi	r2, r3, #0, #8
 801124c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011250:	f363 220f 	bfi	r2, r3, #8, #8
 8011254:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011258:	f363 4217 	bfi	r2, r3, #16, #8
 801125c:	0e03      	lsrs	r3, r0, #24
 801125e:	f363 621f 	bfi	r2, r3, #24, #8
 8011262:	4610      	mov	r0, r2
 8011264:	b008      	add	sp, #32
 8011266:	bd10      	pop	{r4, pc}

08011268 <uxr_create_input_best_effort_stream>:
 8011268:	b082      	sub	sp, #8
 801126a:	3008      	adds	r0, #8
 801126c:	b002      	add	sp, #8
 801126e:	f001 b82d 	b.w	80122cc <uxr_add_input_best_effort_buffer>
 8011272:	bf00      	nop

08011274 <uxr_create_input_reliable_stream>:
 8011274:	b510      	push	{r4, lr}
 8011276:	b084      	sub	sp, #16
 8011278:	4c0b      	ldr	r4, [pc, #44]	; (80112a8 <uxr_create_input_reliable_stream+0x34>)
 801127a:	9400      	str	r4, [sp, #0]
 801127c:	3008      	adds	r0, #8
 801127e:	f001 f83b 	bl	80122f8 <uxr_add_input_reliable_buffer>
 8011282:	2200      	movs	r2, #0
 8011284:	b2c3      	uxtb	r3, r0
 8011286:	f363 0207 	bfi	r2, r3, #0, #8
 801128a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801128e:	f363 220f 	bfi	r2, r3, #8, #8
 8011292:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011296:	f363 4217 	bfi	r2, r3, #16, #8
 801129a:	0e03      	lsrs	r3, r0, #24
 801129c:	f363 621f 	bfi	r2, r3, #24, #8
 80112a0:	4610      	mov	r0, r2
 80112a2:	b004      	add	sp, #16
 80112a4:	bd10      	pop	{r4, pc}
 80112a6:	bf00      	nop
 80112a8:	08011085 	.word	0x08011085

080112ac <uxr_epoch_nanos>:
 80112ac:	b510      	push	{r4, lr}
 80112ae:	4604      	mov	r4, r0
 80112b0:	f001 f8d8 	bl	8012464 <uxr_nanos>
 80112b4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80112b8:	1ac0      	subs	r0, r0, r3
 80112ba:	eb61 0102 	sbc.w	r1, r1, r2
 80112be:	bd10      	pop	{r4, pc}

080112c0 <uxr_flash_output_streams>:
 80112c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c4:	7e03      	ldrb	r3, [r0, #24]
 80112c6:	b084      	sub	sp, #16
 80112c8:	4604      	mov	r4, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d035      	beq.n	801133a <uxr_flash_output_streams+0x7a>
 80112ce:	f04f 0900 	mov.w	r9, #0
 80112d2:	4648      	mov	r0, r9
 80112d4:	f10d 0802 	add.w	r8, sp, #2
 80112d8:	af03      	add	r7, sp, #12
 80112da:	ae02      	add	r6, sp, #8
 80112dc:	e006      	b.n	80112ec <uxr_flash_output_streams+0x2c>
 80112de:	7e23      	ldrb	r3, [r4, #24]
 80112e0:	f109 0901 	add.w	r9, r9, #1
 80112e4:	fa5f f089 	uxtb.w	r0, r9
 80112e8:	4283      	cmp	r3, r0
 80112ea:	d926      	bls.n	801133a <uxr_flash_output_streams+0x7a>
 80112ec:	2201      	movs	r2, #1
 80112ee:	4611      	mov	r1, r2
 80112f0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80112f4:	f000 ff1e 	bl	8012134 <uxr_stream_id>
 80112f8:	3508      	adds	r5, #8
 80112fa:	4684      	mov	ip, r0
 80112fc:	4643      	mov	r3, r8
 80112fe:	463a      	mov	r2, r7
 8011300:	4631      	mov	r1, r6
 8011302:	4628      	mov	r0, r5
 8011304:	f8cd c004 	str.w	ip, [sp, #4]
 8011308:	f004 fed6 	bl	80160b8 <uxr_prepare_best_effort_buffer_to_send>
 801130c:	2800      	cmp	r0, #0
 801130e:	d0e6      	beq.n	80112de <uxr_flash_output_streams+0x1e>
 8011310:	9b02      	ldr	r3, [sp, #8]
 8011312:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011316:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801131a:	4620      	mov	r0, r4
 801131c:	f000 fe7c 	bl	8012018 <uxr_stamp_session_header>
 8011320:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011322:	9a03      	ldr	r2, [sp, #12]
 8011324:	685d      	ldr	r5, [r3, #4]
 8011326:	6818      	ldr	r0, [r3, #0]
 8011328:	9902      	ldr	r1, [sp, #8]
 801132a:	47a8      	blx	r5
 801132c:	f109 0901 	add.w	r9, r9, #1
 8011330:	7e23      	ldrb	r3, [r4, #24]
 8011332:	fa5f f089 	uxtb.w	r0, r9
 8011336:	4283      	cmp	r3, r0
 8011338:	d8d8      	bhi.n	80112ec <uxr_flash_output_streams+0x2c>
 801133a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801133e:	b38b      	cbz	r3, 80113a4 <uxr_flash_output_streams+0xe4>
 8011340:	f04f 0900 	mov.w	r9, #0
 8011344:	f10d 0802 	add.w	r8, sp, #2
 8011348:	af03      	add	r7, sp, #12
 801134a:	ae02      	add	r6, sp, #8
 801134c:	4648      	mov	r0, r9
 801134e:	2201      	movs	r2, #1
 8011350:	2102      	movs	r1, #2
 8011352:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011356:	f000 feed 	bl	8012134 <uxr_stream_id>
 801135a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801135e:	3520      	adds	r5, #32
 8011360:	9001      	str	r0, [sp, #4]
 8011362:	e00d      	b.n	8011380 <uxr_flash_output_streams+0xc0>
 8011364:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011368:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801136c:	9b02      	ldr	r3, [sp, #8]
 801136e:	f000 fe53 	bl	8012018 <uxr_stamp_session_header>
 8011372:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011374:	9a03      	ldr	r2, [sp, #12]
 8011376:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801137a:	9902      	ldr	r1, [sp, #8]
 801137c:	6818      	ldr	r0, [r3, #0]
 801137e:	47d0      	blx	sl
 8011380:	4643      	mov	r3, r8
 8011382:	463a      	mov	r2, r7
 8011384:	4631      	mov	r1, r6
 8011386:	4628      	mov	r0, r5
 8011388:	f005 f8b4 	bl	80164f4 <uxr_prepare_next_reliable_buffer_to_send>
 801138c:	4603      	mov	r3, r0
 801138e:	4620      	mov	r0, r4
 8011390:	2b00      	cmp	r3, #0
 8011392:	d1e7      	bne.n	8011364 <uxr_flash_output_streams+0xa4>
 8011394:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011398:	f109 0901 	add.w	r9, r9, #1
 801139c:	fa5f f089 	uxtb.w	r0, r9
 80113a0:	4283      	cmp	r3, r0
 80113a2:	d8d4      	bhi.n	801134e <uxr_flash_output_streams+0x8e>
 80113a4:	b004      	add	sp, #16
 80113a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113aa:	bf00      	nop

080113ac <read_submessage_info>:
 80113ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b0:	460d      	mov	r5, r1
 80113b2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80113b6:	4669      	mov	r1, sp
 80113b8:	4607      	mov	r7, r0
 80113ba:	4628      	mov	r0, r5
 80113bc:	f001 feee 	bl	801319c <uxr_deserialize_BaseObjectReply>
 80113c0:	a902      	add	r1, sp, #8
 80113c2:	4604      	mov	r4, r0
 80113c4:	4628      	mov	r0, r5
 80113c6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80113ca:	f7fe fc9d 	bl	800fd08 <ucdr_deserialize_bool>
 80113ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80113d2:	4004      	ands	r4, r0
 80113d4:	b2e4      	uxtb	r4, r4
 80113d6:	b95b      	cbnz	r3, 80113f0 <read_submessage_info+0x44>
 80113d8:	a987      	add	r1, sp, #540	; 0x21c
 80113da:	4628      	mov	r0, r5
 80113dc:	f7fe fc94 	bl	800fd08 <ucdr_deserialize_bool>
 80113e0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80113e4:	4606      	mov	r6, r0
 80113e6:	b94b      	cbnz	r3, 80113fc <read_submessage_info+0x50>
 80113e8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80113ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f0:	a903      	add	r1, sp, #12
 80113f2:	4628      	mov	r0, r5
 80113f4:	f001 fd7a 	bl	8012eec <uxr_deserialize_ObjectVariant>
 80113f8:	4004      	ands	r4, r0
 80113fa:	e7ed      	b.n	80113d8 <read_submessage_info+0x2c>
 80113fc:	a988      	add	r1, sp, #544	; 0x220
 80113fe:	4628      	mov	r0, r5
 8011400:	f7fe fcb0 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8011404:	4234      	tst	r4, r6
 8011406:	d0ef      	beq.n	80113e8 <read_submessage_info+0x3c>
 8011408:	2800      	cmp	r0, #0
 801140a:	d0ed      	beq.n	80113e8 <read_submessage_info+0x3c>
 801140c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8011410:	2b0d      	cmp	r3, #13
 8011412:	d1e9      	bne.n	80113e8 <read_submessage_info+0x3c>
 8011414:	a98a      	add	r1, sp, #552	; 0x228
 8011416:	4628      	mov	r0, r5
 8011418:	f7ff fa4a 	bl	80108b0 <ucdr_deserialize_int16_t>
 801141c:	b140      	cbz	r0, 8011430 <read_submessage_info+0x84>
 801141e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8011422:	2b00      	cmp	r3, #0
 8011424:	dd07      	ble.n	8011436 <read_submessage_info+0x8a>
 8011426:	f1b8 0f00 	cmp.w	r8, #0
 801142a:	bf14      	ite	ne
 801142c:	2001      	movne	r0, #1
 801142e:	2002      	moveq	r0, #2
 8011430:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8011434:	e7d8      	b.n	80113e8 <read_submessage_info+0x3c>
 8011436:	2000      	movs	r0, #0
 8011438:	e7fa      	b.n	8011430 <read_submessage_info+0x84>
 801143a:	bf00      	nop

0801143c <read_submessage_list>:
 801143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011440:	b097      	sub	sp, #92	; 0x5c
 8011442:	4ec1      	ldr	r6, [pc, #772]	; (8011748 <read_submessage_list+0x30c>)
 8011444:	9209      	str	r2, [sp, #36]	; 0x24
 8011446:	4604      	mov	r4, r0
 8011448:	460d      	mov	r5, r1
 801144a:	f04f 0801 	mov.w	r8, #1
 801144e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8011452:	aa0c      	add	r2, sp, #48	; 0x30
 8011454:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8011458:	4628      	mov	r0, r5
 801145a:	f000 ffbd 	bl	80123d8 <uxr_read_submessage_header>
 801145e:	2800      	cmp	r0, #0
 8011460:	f000 813e 	beq.w	80116e0 <read_submessage_list+0x2a4>
 8011464:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8011468:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 801146c:	3b02      	subs	r3, #2
 801146e:	2b0d      	cmp	r3, #13
 8011470:	d8ed      	bhi.n	801144e <read_submessage_list+0x12>
 8011472:	a101      	add	r1, pc, #4	; (adr r1, 8011478 <read_submessage_list+0x3c>)
 8011474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011478:	080116d7 	.word	0x080116d7
 801147c:	0801144f 	.word	0x0801144f
 8011480:	080116c7 	.word	0x080116c7
 8011484:	08011665 	.word	0x08011665
 8011488:	0801165b 	.word	0x0801165b
 801148c:	0801144f 	.word	0x0801144f
 8011490:	0801144f 	.word	0x0801144f
 8011494:	080115bb 	.word	0x080115bb
 8011498:	0801154b 	.word	0x0801154b
 801149c:	0801150b 	.word	0x0801150b
 80114a0:	0801144f 	.word	0x0801144f
 80114a4:	0801144f 	.word	0x0801144f
 80114a8:	0801144f 	.word	0x0801144f
 80114ac:	080114b1 	.word	0x080114b1
 80114b0:	a910      	add	r1, sp, #64	; 0x40
 80114b2:	4628      	mov	r0, r5
 80114b4:	f002 f896 	bl	80135e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80114b8:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 80114bc:	f1b9 0f00 	cmp.w	r9, #0
 80114c0:	f000 8116 	beq.w	80116f0 <read_submessage_list+0x2b4>
 80114c4:	f000 ffce 	bl	8012464 <uxr_nanos>
 80114c8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80114d0:	2100      	movs	r1, #0
 80114d2:	468c      	mov	ip, r1
 80114d4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80114d8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80114dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80114de:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80114e0:	468c      	mov	ip, r1
 80114e2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80114e6:	46e2      	mov	sl, ip
 80114e8:	46bc      	mov	ip, r7
 80114ea:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 80114ee:	fbc0 7106 	smlal	r7, r1, r0, r6
 80114f2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80114f6:	e9cd 7100 	strd	r7, r1, [sp]
 80114fa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80114fe:	9106      	str	r1, [sp, #24]
 8011500:	4620      	mov	r0, r4
 8011502:	47c8      	blx	r9
 8011504:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8011508:	e7a1      	b.n	801144e <read_submessage_list+0x12>
 801150a:	a910      	add	r1, sp, #64	; 0x40
 801150c:	4628      	mov	r0, r5
 801150e:	f002 f857 	bl	80135c0 <uxr_deserialize_HEARTBEAT_Payload>
 8011512:	2100      	movs	r1, #0
 8011514:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8011518:	f000 fe36 	bl	8012188 <uxr_stream_id_from_raw>
 801151c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011520:	900f      	str	r0, [sp, #60]	; 0x3c
 8011522:	4639      	mov	r1, r7
 8011524:	f104 0008 	add.w	r0, r4, #8
 8011528:	f000 ff1c 	bl	8012364 <uxr_get_input_reliable_stream>
 801152c:	2800      	cmp	r0, #0
 801152e:	d08e      	beq.n	801144e <read_submessage_list+0x12>
 8011530:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8011534:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8011538:	f004 fd2c 	bl	8015f94 <uxr_process_heartbeat>
 801153c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8011540:	463a      	mov	r2, r7
 8011542:	4620      	mov	r0, r4
 8011544:	f7ff fdf6 	bl	8011134 <write_submessage_acknack.isra.0>
 8011548:	e781      	b.n	801144e <read_submessage_list+0x12>
 801154a:	a910      	add	r1, sp, #64	; 0x40
 801154c:	4628      	mov	r0, r5
 801154e:	f002 f80f 	bl	8013570 <uxr_deserialize_ACKNACK_Payload>
 8011552:	2100      	movs	r1, #0
 8011554:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8011558:	f000 fe16 	bl	8012188 <uxr_stream_id_from_raw>
 801155c:	900d      	str	r0, [sp, #52]	; 0x34
 801155e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011562:	f104 0008 	add.w	r0, r4, #8
 8011566:	f000 fee9 	bl	801233c <uxr_get_output_reliable_stream>
 801156a:	4607      	mov	r7, r0
 801156c:	2800      	cmp	r0, #0
 801156e:	f43f af6e 	beq.w	801144e <read_submessage_list+0x12>
 8011572:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8011576:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801157a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801157e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011582:	b289      	uxth	r1, r1
 8011584:	f005 f860 	bl	8016648 <uxr_process_acknack>
 8011588:	4638      	mov	r0, r7
 801158a:	f005 f81d 	bl	80165c8 <uxr_begin_output_nack_buffer_it>
 801158e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8011592:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8011596:	e006      	b.n	80115a6 <read_submessage_list+0x16a>
 8011598:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801159a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801159c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80115a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80115a2:	6818      	ldr	r0, [r3, #0]
 80115a4:	47c8      	blx	r9
 80115a6:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80115aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80115ac:	4651      	mov	r1, sl
 80115ae:	4638      	mov	r0, r7
 80115b0:	f005 f80c 	bl	80165cc <uxr_next_reliable_nack_buffer_to_send>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d1ef      	bne.n	8011598 <read_submessage_list+0x15c>
 80115b8:	e749      	b.n	801144e <read_submessage_list+0x12>
 80115ba:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80115be:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80115c2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80115c6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80115ca:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80115ce:	4651      	mov	r1, sl
 80115d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80115d4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 80115d8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80115dc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80115e0:	4628      	mov	r0, r5
 80115e2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80115e6:	f001 fd23 	bl	8013030 <uxr_deserialize_BaseObjectRequest>
 80115ea:	4650      	mov	r0, sl
 80115ec:	a90f      	add	r1, sp, #60	; 0x3c
 80115ee:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80115f2:	f000 fd8d 	bl	8012110 <uxr_parse_base_object_request>
 80115f6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80115fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80115fc:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8011600:	9110      	str	r1, [sp, #64]	; 0x40
 8011602:	3f04      	subs	r7, #4
 8011604:	f009 090e 	and.w	r9, r9, #14
 8011608:	b2bf      	uxth	r7, r7
 801160a:	f1bb 0f00 	cmp.w	fp, #0
 801160e:	d006      	beq.n	801161e <read_submessage_list+0x1e2>
 8011610:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011614:	9300      	str	r3, [sp, #0]
 8011616:	4652      	mov	r2, sl
 8011618:	2300      	movs	r3, #0
 801161a:	4620      	mov	r0, r4
 801161c:	47d8      	blx	fp
 801161e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011620:	b16a      	cbz	r2, 801163e <read_submessage_list+0x202>
 8011622:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011624:	2100      	movs	r1, #0
 8011626:	3802      	subs	r0, #2
 8011628:	e002      	b.n	8011630 <read_submessage_list+0x1f4>
 801162a:	3101      	adds	r1, #1
 801162c:	4291      	cmp	r1, r2
 801162e:	d006      	beq.n	801163e <read_submessage_list+0x202>
 8011630:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011634:	4553      	cmp	r3, sl
 8011636:	d1f8      	bne.n	801162a <read_submessage_list+0x1ee>
 8011638:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801163a:	2200      	movs	r2, #0
 801163c:	545a      	strb	r2, [r3, r1]
 801163e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8011642:	9102      	str	r1, [sp, #8]
 8011644:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011646:	9101      	str	r1, [sp, #4]
 8011648:	990d      	ldr	r1, [sp, #52]	; 0x34
 801164a:	9100      	str	r1, [sp, #0]
 801164c:	464b      	mov	r3, r9
 801164e:	463a      	mov	r2, r7
 8011650:	4629      	mov	r1, r5
 8011652:	4620      	mov	r0, r4
 8011654:	f005 f87c 	bl	8016750 <read_submessage_format>
 8011658:	e6f9      	b.n	801144e <read_submessage_list+0x12>
 801165a:	4629      	mov	r1, r5
 801165c:	4620      	mov	r0, r4
 801165e:	f7ff fea5 	bl	80113ac <read_submessage_info>
 8011662:	e6f4      	b.n	801144e <read_submessage_list+0x12>
 8011664:	2a00      	cmp	r2, #0
 8011666:	d03e      	beq.n	80116e6 <read_submessage_list+0x2aa>
 8011668:	a910      	add	r1, sp, #64	; 0x40
 801166a:	4628      	mov	r0, r5
 801166c:	f001 fedc 	bl	8013428 <uxr_deserialize_STATUS_Payload>
 8011670:	a90e      	add	r1, sp, #56	; 0x38
 8011672:	aa0d      	add	r2, sp, #52	; 0x34
 8011674:	a810      	add	r0, sp, #64	; 0x40
 8011676:	f000 fd4b 	bl	8012110 <uxr_parse_base_object_request>
 801167a:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 801167e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011680:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8011684:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8011688:	910f      	str	r1, [sp, #60]	; 0x3c
 801168a:	f1ba 0f00 	cmp.w	sl, #0
 801168e:	d006      	beq.n	801169e <read_submessage_list+0x262>
 8011690:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011694:	9300      	str	r3, [sp, #0]
 8011696:	463a      	mov	r2, r7
 8011698:	464b      	mov	r3, r9
 801169a:	4620      	mov	r0, r4
 801169c:	47d0      	blx	sl
 801169e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80116a0:	2a00      	cmp	r2, #0
 80116a2:	f43f aed4 	beq.w	801144e <read_submessage_list+0x12>
 80116a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80116a8:	2100      	movs	r1, #0
 80116aa:	3802      	subs	r0, #2
 80116ac:	e003      	b.n	80116b6 <read_submessage_list+0x27a>
 80116ae:	3101      	adds	r1, #1
 80116b0:	4291      	cmp	r1, r2
 80116b2:	f43f aecc 	beq.w	801144e <read_submessage_list+0x12>
 80116b6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80116ba:	42bb      	cmp	r3, r7
 80116bc:	d1f7      	bne.n	80116ae <read_submessage_list+0x272>
 80116be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80116c0:	f803 9001 	strb.w	r9, [r3, r1]
 80116c4:	e6c3      	b.n	801144e <read_submessage_list+0x12>
 80116c6:	2a00      	cmp	r2, #0
 80116c8:	f47f aec1 	bne.w	801144e <read_submessage_list+0x12>
 80116cc:	4629      	mov	r1, r5
 80116ce:	4620      	mov	r0, r4
 80116d0:	f000 fc64 	bl	8011f9c <uxr_read_create_session_status>
 80116d4:	e6bb      	b.n	801144e <read_submessage_list+0x12>
 80116d6:	4629      	mov	r1, r5
 80116d8:	4620      	mov	r0, r4
 80116da:	f7ff fcf5 	bl	80110c8 <read_submessage_get_info>
 80116de:	e6b6      	b.n	801144e <read_submessage_list+0x12>
 80116e0:	b017      	add	sp, #92	; 0x5c
 80116e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e6:	4629      	mov	r1, r5
 80116e8:	4620      	mov	r0, r4
 80116ea:	f000 fc63 	bl	8011fb4 <uxr_read_delete_session_status>
 80116ee:	e6ae      	b.n	801144e <read_submessage_list+0x12>
 80116f0:	f000 feb8 	bl	8012464 <uxr_nanos>
 80116f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80116f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80116f8:	464f      	mov	r7, r9
 80116fa:	fbc3 2706 	smlal	r2, r7, r3, r6
 80116fe:	1812      	adds	r2, r2, r0
 8011700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011702:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011704:	eb47 0101 	adc.w	r1, r7, r1
 8011708:	464f      	mov	r7, r9
 801170a:	fbc3 0706 	smlal	r0, r7, r3, r6
 801170e:	463b      	mov	r3, r7
 8011710:	4684      	mov	ip, r0
 8011712:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8011716:	fbc7 0906 	smlal	r0, r9, r7, r6
 801171a:	eb1c 0c00 	adds.w	ip, ip, r0
 801171e:	464f      	mov	r7, r9
 8011720:	eb43 0307 	adc.w	r3, r3, r7
 8011724:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011728:	eb61 0303 	sbc.w	r3, r1, r3
 801172c:	0fda      	lsrs	r2, r3, #31
 801172e:	eb12 020c 	adds.w	r2, r2, ip
 8011732:	f143 0300 	adc.w	r3, r3, #0
 8011736:	0852      	lsrs	r2, r2, #1
 8011738:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801173c:	105b      	asrs	r3, r3, #1
 801173e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8011742:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8011746:	e6dd      	b.n	8011504 <read_submessage_list+0xc8>
 8011748:	3b9aca00 	.word	0x3b9aca00

0801174c <listen_message_reliably>:
 801174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011750:	1e0b      	subs	r3, r1, #0
 8011752:	b09d      	sub	sp, #116	; 0x74
 8011754:	bfb8      	it	lt
 8011756:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801175a:	4680      	mov	r8, r0
 801175c:	9305      	str	r3, [sp, #20]
 801175e:	f000 fe67 	bl	8012430 <uxr_millis>
 8011762:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8011766:	4681      	mov	r9, r0
 8011768:	2a00      	cmp	r2, #0
 801176a:	f000 80a1 	beq.w	80118b0 <listen_message_reliably+0x164>
 801176e:	2600      	movs	r6, #0
 8011770:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011774:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011778:	9303      	str	r3, [sp, #12]
 801177a:	4630      	mov	r0, r6
 801177c:	460f      	mov	r7, r1
 801177e:	e00f      	b.n	80117a0 <listen_message_reliably+0x54>
 8011780:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011784:	9903      	ldr	r1, [sp, #12]
 8011786:	455a      	cmp	r2, fp
 8011788:	f106 0601 	add.w	r6, r6, #1
 801178c:	eb73 0101 	sbcs.w	r1, r3, r1
 8011790:	b2f0      	uxtb	r0, r6
 8011792:	da01      	bge.n	8011798 <listen_message_reliably+0x4c>
 8011794:	4693      	mov	fp, r2
 8011796:	9303      	str	r3, [sp, #12]
 8011798:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801179c:	4283      	cmp	r3, r0
 801179e:	d960      	bls.n	8011862 <listen_message_reliably+0x116>
 80117a0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80117a4:	2102      	movs	r1, #2
 80117a6:	2201      	movs	r2, #1
 80117a8:	f000 fcc4 	bl	8012134 <uxr_stream_id>
 80117ac:	00e4      	lsls	r4, r4, #3
 80117ae:	f104 0520 	add.w	r5, r4, #32
 80117b2:	4445      	add	r5, r8
 80117b4:	4601      	mov	r1, r0
 80117b6:	463b      	mov	r3, r7
 80117b8:	464a      	mov	r2, r9
 80117ba:	4628      	mov	r0, r5
 80117bc:	9109      	str	r1, [sp, #36]	; 0x24
 80117be:	f004 fed9 	bl	8016574 <uxr_update_output_stream_heartbeat_timestamp>
 80117c2:	eb08 0304 	add.w	r3, r8, r4
 80117c6:	2800      	cmp	r0, #0
 80117c8:	d0da      	beq.n	8011780 <listen_message_reliably+0x34>
 80117ca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80117ce:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80117d2:	9304      	str	r3, [sp, #16]
 80117d4:	4640      	mov	r0, r8
 80117d6:	f000 fc75 	bl	80120c4 <uxr_session_header_offset>
 80117da:	3501      	adds	r5, #1
 80117dc:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80117e0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80117e4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80117e8:	2300      	movs	r3, #0
 80117ea:	2211      	movs	r2, #17
 80117ec:	9000      	str	r0, [sp, #0]
 80117ee:	a90c      	add	r1, sp, #48	; 0x30
 80117f0:	4650      	mov	r0, sl
 80117f2:	f7ff fa3b 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 80117f6:	2300      	movs	r3, #0
 80117f8:	2205      	movs	r2, #5
 80117fa:	210b      	movs	r1, #11
 80117fc:	4650      	mov	r0, sl
 80117fe:	f000 fdd1 	bl	80123a4 <uxr_buffer_submessage_header>
 8011802:	8968      	ldrh	r0, [r5, #10]
 8011804:	2101      	movs	r1, #1
 8011806:	f005 f86d 	bl	80168e4 <uxr_seq_num_add>
 801180a:	892b      	ldrh	r3, [r5, #8]
 801180c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011810:	4602      	mov	r2, r0
 8011812:	9b04      	ldr	r3, [sp, #16]
 8011814:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8011818:	a90a      	add	r1, sp, #40	; 0x28
 801181a:	4650      	mov	r0, sl
 801181c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8011820:	f001 feba 	bl	8013598 <uxr_serialize_HEARTBEAT_Payload>
 8011824:	2200      	movs	r2, #0
 8011826:	4611      	mov	r1, r2
 8011828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801182a:	4640      	mov	r0, r8
 801182c:	f000 fbf4 	bl	8012018 <uxr_stamp_session_header>
 8011830:	4650      	mov	r0, sl
 8011832:	f7ff fa59 	bl	8010ce8 <ucdr_buffer_length>
 8011836:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 801183a:	4602      	mov	r2, r0
 801183c:	a90c      	add	r1, sp, #48	; 0x30
 801183e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011842:	4444      	add	r4, r8
 8011844:	47a8      	blx	r5
 8011846:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801184a:	9903      	ldr	r1, [sp, #12]
 801184c:	455a      	cmp	r2, fp
 801184e:	f106 0601 	add.w	r6, r6, #1
 8011852:	eb73 0101 	sbcs.w	r1, r3, r1
 8011856:	b2f0      	uxtb	r0, r6
 8011858:	db9c      	blt.n	8011794 <listen_message_reliably+0x48>
 801185a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801185e:	4283      	cmp	r3, r0
 8011860:	d89e      	bhi.n	80117a0 <listen_message_reliably+0x54>
 8011862:	9a03      	ldr	r2, [sp, #12]
 8011864:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011868:	429a      	cmp	r2, r3
 801186a:	bf08      	it	eq
 801186c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8011870:	d01e      	beq.n	80118b0 <listen_message_reliably+0x164>
 8011872:	ebab 0309 	sub.w	r3, fp, r9
 8011876:	9905      	ldr	r1, [sp, #20]
 8011878:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 801187c:	2b00      	cmp	r3, #0
 801187e:	bf08      	it	eq
 8011880:	2301      	moveq	r3, #1
 8011882:	4299      	cmp	r1, r3
 8011884:	bfa8      	it	ge
 8011886:	4619      	movge	r1, r3
 8011888:	6894      	ldr	r4, [r2, #8]
 801188a:	6810      	ldr	r0, [r2, #0]
 801188c:	4689      	mov	r9, r1
 801188e:	460b      	mov	r3, r1
 8011890:	aa08      	add	r2, sp, #32
 8011892:	a907      	add	r1, sp, #28
 8011894:	47a0      	blx	r4
 8011896:	b968      	cbnz	r0, 80118b4 <listen_message_reliably+0x168>
 8011898:	9b05      	ldr	r3, [sp, #20]
 801189a:	eba3 0309 	sub.w	r3, r3, r9
 801189e:	2b00      	cmp	r3, #0
 80118a0:	9305      	str	r3, [sp, #20]
 80118a2:	f73f af5c 	bgt.w	801175e <listen_message_reliably+0x12>
 80118a6:	4604      	mov	r4, r0
 80118a8:	4620      	mov	r0, r4
 80118aa:	b01d      	add	sp, #116	; 0x74
 80118ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b0:	9b05      	ldr	r3, [sp, #20]
 80118b2:	e7e0      	b.n	8011876 <listen_message_reliably+0x12a>
 80118b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80118b8:	4604      	mov	r4, r0
 80118ba:	a80c      	add	r0, sp, #48	; 0x30
 80118bc:	f7ff f9e8 	bl	8010c90 <ucdr_init_buffer>
 80118c0:	2500      	movs	r5, #0
 80118c2:	f10d 031a 	add.w	r3, sp, #26
 80118c6:	aa06      	add	r2, sp, #24
 80118c8:	a90c      	add	r1, sp, #48	; 0x30
 80118ca:	4640      	mov	r0, r8
 80118cc:	f88d 5018 	strb.w	r5, [sp, #24]
 80118d0:	f000 fbb6 	bl	8012040 <uxr_read_session_header>
 80118d4:	b918      	cbnz	r0, 80118de <listen_message_reliably+0x192>
 80118d6:	4620      	mov	r0, r4
 80118d8:	b01d      	add	sp, #116	; 0x74
 80118da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118de:	4629      	mov	r1, r5
 80118e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80118e4:	f000 fc50 	bl	8012188 <uxr_stream_id_from_raw>
 80118e8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80118ec:	2d01      	cmp	r5, #1
 80118ee:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80118f2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80118f6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80118fa:	d04b      	beq.n	8011994 <listen_message_reliably+0x248>
 80118fc:	2d02      	cmp	r5, #2
 80118fe:	d00f      	beq.n	8011920 <listen_message_reliably+0x1d4>
 8011900:	2d00      	cmp	r5, #0
 8011902:	d1e8      	bne.n	80118d6 <listen_message_reliably+0x18a>
 8011904:	4629      	mov	r1, r5
 8011906:	4628      	mov	r0, r5
 8011908:	f000 fc3e 	bl	8012188 <uxr_stream_id_from_raw>
 801190c:	a90c      	add	r1, sp, #48	; 0x30
 801190e:	4602      	mov	r2, r0
 8011910:	4640      	mov	r0, r8
 8011912:	920a      	str	r2, [sp, #40]	; 0x28
 8011914:	f7ff fd92 	bl	801143c <read_submessage_list>
 8011918:	4620      	mov	r0, r4
 801191a:	b01d      	add	sp, #116	; 0x74
 801191c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011920:	4631      	mov	r1, r6
 8011922:	f108 0008 	add.w	r0, r8, #8
 8011926:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801192a:	f000 fd1b 	bl	8012364 <uxr_get_input_reliable_stream>
 801192e:	4607      	mov	r7, r0
 8011930:	b338      	cbz	r0, 8011982 <listen_message_reliably+0x236>
 8011932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011934:	9203      	str	r2, [sp, #12]
 8011936:	a80c      	add	r0, sp, #48	; 0x30
 8011938:	f7ff f9da 	bl	8010cf0 <ucdr_buffer_remaining>
 801193c:	4603      	mov	r3, r0
 801193e:	f10d 0019 	add.w	r0, sp, #25
 8011942:	9000      	str	r0, [sp, #0]
 8011944:	9a03      	ldr	r2, [sp, #12]
 8011946:	4651      	mov	r1, sl
 8011948:	4638      	mov	r0, r7
 801194a:	f004 fa29 	bl	8015da0 <uxr_receive_reliable_message>
 801194e:	b1c0      	cbz	r0, 8011982 <listen_message_reliably+0x236>
 8011950:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011954:	b393      	cbz	r3, 80119bc <listen_message_reliably+0x270>
 8011956:	ad14      	add	r5, sp, #80	; 0x50
 8011958:	f04f 0a02 	mov.w	sl, #2
 801195c:	e00a      	b.n	8011974 <listen_message_reliably+0x228>
 801195e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8011962:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8011966:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801196a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801196c:	4629      	mov	r1, r5
 801196e:	4640      	mov	r0, r8
 8011970:	f7ff fd64 	bl	801143c <read_submessage_list>
 8011974:	2204      	movs	r2, #4
 8011976:	4629      	mov	r1, r5
 8011978:	4638      	mov	r0, r7
 801197a:	f004 fa91 	bl	8015ea0 <uxr_next_input_reliable_buffer_available>
 801197e:	2800      	cmp	r0, #0
 8011980:	d1ed      	bne.n	801195e <listen_message_reliably+0x212>
 8011982:	4640      	mov	r0, r8
 8011984:	4632      	mov	r2, r6
 8011986:	4649      	mov	r1, r9
 8011988:	f7ff fbd4 	bl	8011134 <write_submessage_acknack.isra.0>
 801198c:	4620      	mov	r0, r4
 801198e:	b01d      	add	sp, #116	; 0x74
 8011990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011994:	4631      	mov	r1, r6
 8011996:	f108 0008 	add.w	r0, r8, #8
 801199a:	f000 fcd9 	bl	8012350 <uxr_get_input_best_effort_stream>
 801199e:	2800      	cmp	r0, #0
 80119a0:	d099      	beq.n	80118d6 <listen_message_reliably+0x18a>
 80119a2:	4651      	mov	r1, sl
 80119a4:	f004 f968 	bl	8015c78 <uxr_receive_best_effort_message>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d094      	beq.n	80118d6 <listen_message_reliably+0x18a>
 80119ac:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 80119b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119b2:	a90c      	add	r1, sp, #48	; 0x30
 80119b4:	4640      	mov	r0, r8
 80119b6:	f7ff fd41 	bl	801143c <read_submessage_list>
 80119ba:	e78c      	b.n	80118d6 <listen_message_reliably+0x18a>
 80119bc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 80119c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119c2:	a90c      	add	r1, sp, #48	; 0x30
 80119c4:	4640      	mov	r0, r8
 80119c6:	f7ff fd39 	bl	801143c <read_submessage_list>
 80119ca:	e7c4      	b.n	8011956 <listen_message_reliably+0x20a>

080119cc <uxr_run_session_until_confirm_delivery>:
 80119cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d0:	4606      	mov	r6, r0
 80119d2:	460d      	mov	r5, r1
 80119d4:	f000 fd2c 	bl	8012430 <uxr_millis>
 80119d8:	4607      	mov	r7, r0
 80119da:	4630      	mov	r0, r6
 80119dc:	f7ff fc70 	bl	80112c0 <uxr_flash_output_streams>
 80119e0:	2d00      	cmp	r5, #0
 80119e2:	f106 0808 	add.w	r8, r6, #8
 80119e6:	bfa8      	it	ge
 80119e8:	462c      	movge	r4, r5
 80119ea:	da07      	bge.n	80119fc <uxr_run_session_until_confirm_delivery+0x30>
 80119ec:	e00e      	b.n	8011a0c <uxr_run_session_until_confirm_delivery+0x40>
 80119ee:	f7ff fead 	bl	801174c <listen_message_reliably>
 80119f2:	f000 fd1d 	bl	8012430 <uxr_millis>
 80119f6:	1bc3      	subs	r3, r0, r7
 80119f8:	1aec      	subs	r4, r5, r3
 80119fa:	d407      	bmi.n	8011a0c <uxr_run_session_until_confirm_delivery+0x40>
 80119fc:	4640      	mov	r0, r8
 80119fe:	f000 fcbb 	bl	8012378 <uxr_output_streams_confirmed>
 8011a02:	4603      	mov	r3, r0
 8011a04:	4621      	mov	r1, r4
 8011a06:	4630      	mov	r0, r6
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d0f0      	beq.n	80119ee <uxr_run_session_until_confirm_delivery+0x22>
 8011a0c:	4640      	mov	r0, r8
 8011a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a12:	f000 bcb1 	b.w	8012378 <uxr_output_streams_confirmed>
 8011a16:	bf00      	nop

08011a18 <uxr_run_session_until_all_status>:
 8011a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a1c:	9c08      	ldr	r4, [sp, #32]
 8011a1e:	4606      	mov	r6, r0
 8011a20:	460f      	mov	r7, r1
 8011a22:	4691      	mov	r9, r2
 8011a24:	461d      	mov	r5, r3
 8011a26:	f7ff fc4b 	bl	80112c0 <uxr_flash_output_streams>
 8011a2a:	b124      	cbz	r4, 8011a36 <uxr_run_session_until_all_status+0x1e>
 8011a2c:	4622      	mov	r2, r4
 8011a2e:	21ff      	movs	r1, #255	; 0xff
 8011a30:	4628      	mov	r0, r5
 8011a32:	f006 fc27 	bl	8018284 <memset>
 8011a36:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 8011a3a:	67f4      	str	r4, [r6, #124]	; 0x7c
 8011a3c:	f000 fcf8 	bl	8012430 <uxr_millis>
 8011a40:	3d01      	subs	r5, #1
 8011a42:	f1a9 0902 	sub.w	r9, r9, #2
 8011a46:	4680      	mov	r8, r0
 8011a48:	4639      	mov	r1, r7
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f7ff fe7e 	bl	801174c <listen_message_reliably>
 8011a50:	f000 fcee 	bl	8012430 <uxr_millis>
 8011a54:	eba0 0008 	sub.w	r0, r0, r8
 8011a58:	1a39      	subs	r1, r7, r0
 8011a5a:	b344      	cbz	r4, 8011aae <uxr_run_session_until_all_status+0x96>
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	46ac      	mov	ip, r5
 8011a60:	2301      	movs	r3, #1
 8011a62:	e002      	b.n	8011a6a <uxr_run_session_until_all_status+0x52>
 8011a64:	42a3      	cmp	r3, r4
 8011a66:	d20d      	bcs.n	8011a84 <uxr_run_session_until_all_status+0x6c>
 8011a68:	3301      	adds	r3, #1
 8011a6a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011a6e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8011a72:	d1f7      	bne.n	8011a64 <uxr_run_session_until_all_status+0x4c>
 8011a74:	42a3      	cmp	r3, r4
 8011a76:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011a7a:	d213      	bcs.n	8011aa4 <uxr_run_session_until_all_status+0x8c>
 8011a7c:	2a00      	cmp	r2, #0
 8011a7e:	d0f3      	beq.n	8011a68 <uxr_run_session_until_all_status+0x50>
 8011a80:	2900      	cmp	r1, #0
 8011a82:	dce2      	bgt.n	8011a4a <uxr_run_session_until_all_status+0x32>
 8011a84:	2300      	movs	r3, #0
 8011a86:	67f3      	str	r3, [r6, #124]	; 0x7c
 8011a88:	442c      	add	r4, r5
 8011a8a:	e001      	b.n	8011a90 <uxr_run_session_until_all_status+0x78>
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d812      	bhi.n	8011ab6 <uxr_run_session_until_all_status+0x9e>
 8011a90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011a94:	4284      	cmp	r4, r0
 8011a96:	d1f9      	bne.n	8011a8c <uxr_run_session_until_all_status+0x74>
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	bf8c      	ite	hi
 8011a9c:	2000      	movhi	r0, #0
 8011a9e:	2001      	movls	r0, #1
 8011aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aa4:	2900      	cmp	r1, #0
 8011aa6:	dded      	ble.n	8011a84 <uxr_run_session_until_all_status+0x6c>
 8011aa8:	2a00      	cmp	r2, #0
 8011aaa:	d1ce      	bne.n	8011a4a <uxr_run_session_until_all_status+0x32>
 8011aac:	e7ea      	b.n	8011a84 <uxr_run_session_until_all_status+0x6c>
 8011aae:	67f4      	str	r4, [r6, #124]	; 0x7c
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ab6:	2000      	movs	r0, #0
 8011ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011abc <wait_session_status>:
 8011abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	b09d      	sub	sp, #116	; 0x74
 8011ac4:	20ff      	movs	r0, #255	; 0xff
 8011ac6:	7160      	strb	r0, [r4, #5]
 8011ac8:	9303      	str	r3, [sp, #12]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f000 80b6 	beq.w	8011c3c <wait_session_status+0x180>
 8011ad0:	468a      	mov	sl, r1
 8011ad2:	4691      	mov	r9, r2
 8011ad4:	f04f 0b00 	mov.w	fp, #0
 8011ad8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011ada:	464a      	mov	r2, r9
 8011adc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011ae0:	4651      	mov	r1, sl
 8011ae2:	47a8      	blx	r5
 8011ae4:	f000 fca4 	bl	8012430 <uxr_millis>
 8011ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011aec:	4605      	mov	r5, r0
 8011aee:	e009      	b.n	8011b04 <wait_session_status+0x48>
 8011af0:	f000 fc9e 	bl	8012430 <uxr_millis>
 8011af4:	1b40      	subs	r0, r0, r5
 8011af6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	dd40      	ble.n	8011b80 <wait_session_status+0xc4>
 8011afe:	7960      	ldrb	r0, [r4, #5]
 8011b00:	28ff      	cmp	r0, #255	; 0xff
 8011b02:	d145      	bne.n	8011b90 <wait_session_status+0xd4>
 8011b04:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8011b06:	a908      	add	r1, sp, #32
 8011b08:	6896      	ldr	r6, [r2, #8]
 8011b0a:	6810      	ldr	r0, [r2, #0]
 8011b0c:	aa09      	add	r2, sp, #36	; 0x24
 8011b0e:	47b0      	blx	r6
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d0ed      	beq.n	8011af0 <wait_session_status+0x34>
 8011b14:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011b18:	a80c      	add	r0, sp, #48	; 0x30
 8011b1a:	f7ff f8b9 	bl	8010c90 <ucdr_init_buffer>
 8011b1e:	2600      	movs	r6, #0
 8011b20:	f10d 031e 	add.w	r3, sp, #30
 8011b24:	aa07      	add	r2, sp, #28
 8011b26:	a90c      	add	r1, sp, #48	; 0x30
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f88d 601c 	strb.w	r6, [sp, #28]
 8011b2e:	f000 fa87 	bl	8012040 <uxr_read_session_header>
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d0dc      	beq.n	8011af0 <wait_session_status+0x34>
 8011b36:	4631      	mov	r1, r6
 8011b38:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011b3c:	f000 fb24 	bl	8012188 <uxr_stream_id_from_raw>
 8011b40:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011b44:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011b48:	9302      	str	r3, [sp, #8]
 8011b4a:	2f01      	cmp	r7, #1
 8011b4c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8011b50:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011b54:	d05c      	beq.n	8011c10 <wait_session_status+0x154>
 8011b56:	2f02      	cmp	r7, #2
 8011b58:	d020      	beq.n	8011b9c <wait_session_status+0xe0>
 8011b5a:	2f00      	cmp	r7, #0
 8011b5c:	d1c8      	bne.n	8011af0 <wait_session_status+0x34>
 8011b5e:	4639      	mov	r1, r7
 8011b60:	4638      	mov	r0, r7
 8011b62:	f000 fb11 	bl	8012188 <uxr_stream_id_from_raw>
 8011b66:	a90c      	add	r1, sp, #48	; 0x30
 8011b68:	4602      	mov	r2, r0
 8011b6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f7ff fc65 	bl	801143c <read_submessage_list>
 8011b72:	f000 fc5d 	bl	8012430 <uxr_millis>
 8011b76:	1b40      	subs	r0, r0, r5
 8011b78:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	dcbe      	bgt.n	8011afe <wait_session_status+0x42>
 8011b80:	9b03      	ldr	r3, [sp, #12]
 8011b82:	7960      	ldrb	r0, [r4, #5]
 8011b84:	f10b 0b01 	add.w	fp, fp, #1
 8011b88:	455b      	cmp	r3, fp
 8011b8a:	d001      	beq.n	8011b90 <wait_session_status+0xd4>
 8011b8c:	28ff      	cmp	r0, #255	; 0xff
 8011b8e:	d0a3      	beq.n	8011ad8 <wait_session_status+0x1c>
 8011b90:	38ff      	subs	r0, #255	; 0xff
 8011b92:	bf18      	it	ne
 8011b94:	2001      	movne	r0, #1
 8011b96:	b01d      	add	sp, #116	; 0x74
 8011b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011ba0:	9304      	str	r3, [sp, #16]
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	f104 0008 	add.w	r0, r4, #8
 8011ba8:	f000 fbdc 	bl	8012364 <uxr_get_input_reliable_stream>
 8011bac:	4680      	mov	r8, r0
 8011bae:	b348      	cbz	r0, 8011c04 <wait_session_status+0x148>
 8011bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bb2:	9205      	str	r2, [sp, #20]
 8011bb4:	a80c      	add	r0, sp, #48	; 0x30
 8011bb6:	f7ff f89b 	bl	8010cf0 <ucdr_buffer_remaining>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	f10d 001d 	add.w	r0, sp, #29
 8011bc0:	9000      	str	r0, [sp, #0]
 8011bc2:	9a05      	ldr	r2, [sp, #20]
 8011bc4:	9902      	ldr	r1, [sp, #8]
 8011bc6:	4640      	mov	r0, r8
 8011bc8:	f004 f8ea 	bl	8015da0 <uxr_receive_reliable_message>
 8011bcc:	b1d0      	cbz	r0, 8011c04 <wait_session_status+0x148>
 8011bce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d03a      	beq.n	8011c4c <wait_session_status+0x190>
 8011bd6:	9f04      	ldr	r7, [sp, #16]
 8011bd8:	e00a      	b.n	8011bf0 <wait_session_status+0x134>
 8011bda:	f04f 0302 	mov.w	r3, #2
 8011bde:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8011be2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8011be6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8011bea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bec:	f7ff fc26 	bl	801143c <read_submessage_list>
 8011bf0:	a914      	add	r1, sp, #80	; 0x50
 8011bf2:	2204      	movs	r2, #4
 8011bf4:	4640      	mov	r0, r8
 8011bf6:	f004 f953 	bl	8015ea0 <uxr_next_input_reliable_buffer_available>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	a914      	add	r1, sp, #80	; 0x50
 8011bfe:	4620      	mov	r0, r4
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d1ea      	bne.n	8011bda <wait_session_status+0x11e>
 8011c04:	9904      	ldr	r1, [sp, #16]
 8011c06:	4632      	mov	r2, r6
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f7ff fa93 	bl	8011134 <write_submessage_acknack.isra.0>
 8011c0e:	e76f      	b.n	8011af0 <wait_session_status+0x34>
 8011c10:	4631      	mov	r1, r6
 8011c12:	f104 0008 	add.w	r0, r4, #8
 8011c16:	f000 fb9b 	bl	8012350 <uxr_get_input_best_effort_stream>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	f43f af68 	beq.w	8011af0 <wait_session_status+0x34>
 8011c20:	9902      	ldr	r1, [sp, #8]
 8011c22:	f004 f829 	bl	8015c78 <uxr_receive_best_effort_message>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f43f af62 	beq.w	8011af0 <wait_session_status+0x34>
 8011c2c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c32:	a90c      	add	r1, sp, #48	; 0x30
 8011c34:	4620      	mov	r0, r4
 8011c36:	f7ff fc01 	bl	801143c <read_submessage_list>
 8011c3a:	e759      	b.n	8011af0 <wait_session_status+0x34>
 8011c3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011c3e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011c42:	47a0      	blx	r4
 8011c44:	2001      	movs	r0, #1
 8011c46:	b01d      	add	sp, #116	; 0x74
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c52:	a90c      	add	r1, sp, #48	; 0x30
 8011c54:	4620      	mov	r0, r4
 8011c56:	f7ff fbf1 	bl	801143c <read_submessage_list>
 8011c5a:	e7bc      	b.n	8011bd6 <wait_session_status+0x11a>

08011c5c <uxr_delete_session_retries>:
 8011c5c:	b530      	push	{r4, r5, lr}
 8011c5e:	b08f      	sub	sp, #60	; 0x3c
 8011c60:	4604      	mov	r4, r0
 8011c62:	460d      	mov	r5, r1
 8011c64:	f000 fa2e 	bl	80120c4 <uxr_session_header_offset>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	2210      	movs	r2, #16
 8011c6c:	9000      	str	r0, [sp, #0]
 8011c6e:	a902      	add	r1, sp, #8
 8011c70:	a806      	add	r0, sp, #24
 8011c72:	f7fe fffb 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8011c76:	a906      	add	r1, sp, #24
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f000 f973 	bl	8011f64 <uxr_buffer_delete_session>
 8011c7e:	2200      	movs	r2, #0
 8011c80:	4611      	mov	r1, r2
 8011c82:	9b06      	ldr	r3, [sp, #24]
 8011c84:	4620      	mov	r0, r4
 8011c86:	f000 f9c7 	bl	8012018 <uxr_stamp_session_header>
 8011c8a:	a806      	add	r0, sp, #24
 8011c8c:	f7ff f82c 	bl	8010ce8 <ucdr_buffer_length>
 8011c90:	462b      	mov	r3, r5
 8011c92:	4602      	mov	r2, r0
 8011c94:	a902      	add	r1, sp, #8
 8011c96:	4620      	mov	r0, r4
 8011c98:	f7ff ff10 	bl	8011abc <wait_session_status>
 8011c9c:	b118      	cbz	r0, 8011ca6 <uxr_delete_session_retries+0x4a>
 8011c9e:	7960      	ldrb	r0, [r4, #5]
 8011ca0:	fab0 f080 	clz	r0, r0
 8011ca4:	0940      	lsrs	r0, r0, #5
 8011ca6:	b00f      	add	sp, #60	; 0x3c
 8011ca8:	bd30      	pop	{r4, r5, pc}
 8011caa:	bf00      	nop

08011cac <uxr_create_session>:
 8011cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb0:	f100 0b08 	add.w	fp, r0, #8
 8011cb4:	b0ab      	sub	sp, #172	; 0xac
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	4658      	mov	r0, fp
 8011cba:	f000 fa99 	bl	80121f0 <uxr_reset_stream_storage>
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f000 fa00 	bl	80120c4 <uxr_session_header_offset>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	9000      	str	r0, [sp, #0]
 8011cc8:	221c      	movs	r2, #28
 8011cca:	a90b      	add	r1, sp, #44	; 0x2c
 8011ccc:	a812      	add	r0, sp, #72	; 0x48
 8011cce:	f7fe ffcd 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8011cd2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011cd4:	8a1a      	ldrh	r2, [r3, #16]
 8011cd6:	3a04      	subs	r2, #4
 8011cd8:	b292      	uxth	r2, r2
 8011cda:	a912      	add	r1, sp, #72	; 0x48
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f000 f917 	bl	8011f10 <uxr_buffer_create_session>
 8011ce2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f000 f983 	bl	8011ff0 <uxr_stamp_create_session_header>
 8011cea:	a812      	add	r0, sp, #72	; 0x48
 8011cec:	f7fe fffc 	bl	8010ce8 <ucdr_buffer_length>
 8011cf0:	23ff      	movs	r3, #255	; 0xff
 8011cf2:	7163      	strb	r3, [r4, #5]
 8011cf4:	230a      	movs	r3, #10
 8011cf6:	46da      	mov	sl, fp
 8011cf8:	9303      	str	r3, [sp, #12]
 8011cfa:	4683      	mov	fp, r0
 8011cfc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011cfe:	465a      	mov	r2, fp
 8011d00:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011d04:	a90b      	add	r1, sp, #44	; 0x2c
 8011d06:	47a8      	blx	r5
 8011d08:	f000 fb92 	bl	8012430 <uxr_millis>
 8011d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011d10:	4605      	mov	r5, r0
 8011d12:	e009      	b.n	8011d28 <uxr_create_session+0x7c>
 8011d14:	f000 fb8c 	bl	8012430 <uxr_millis>
 8011d18:	1b40      	subs	r0, r0, r5
 8011d1a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	7962      	ldrb	r2, [r4, #5]
 8011d22:	dd38      	ble.n	8011d96 <uxr_create_session+0xea>
 8011d24:	2aff      	cmp	r2, #255	; 0xff
 8011d26:	d13c      	bne.n	8011da2 <uxr_create_session+0xf6>
 8011d28:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8011d2a:	a907      	add	r1, sp, #28
 8011d2c:	6896      	ldr	r6, [r2, #8]
 8011d2e:	6810      	ldr	r0, [r2, #0]
 8011d30:	aa08      	add	r2, sp, #32
 8011d32:	47b0      	blx	r6
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d0ed      	beq.n	8011d14 <uxr_create_session+0x68>
 8011d38:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011d3c:	a81a      	add	r0, sp, #104	; 0x68
 8011d3e:	f7fe ffa7 	bl	8010c90 <ucdr_init_buffer>
 8011d42:	2600      	movs	r6, #0
 8011d44:	f10d 031a 	add.w	r3, sp, #26
 8011d48:	aa06      	add	r2, sp, #24
 8011d4a:	a91a      	add	r1, sp, #104	; 0x68
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f88d 6018 	strb.w	r6, [sp, #24]
 8011d52:	f000 f975 	bl	8012040 <uxr_read_session_header>
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d0dc      	beq.n	8011d14 <uxr_create_session+0x68>
 8011d5a:	4631      	mov	r1, r6
 8011d5c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011d60:	f000 fa12 	bl	8012188 <uxr_stream_id_from_raw>
 8011d64:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011d68:	2e01      	cmp	r6, #1
 8011d6a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8011d6e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011d72:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011d76:	d053      	beq.n	8011e20 <uxr_create_session+0x174>
 8011d78:	2e02      	cmp	r6, #2
 8011d7a:	d018      	beq.n	8011dae <uxr_create_session+0x102>
 8011d7c:	2e00      	cmp	r6, #0
 8011d7e:	d1c9      	bne.n	8011d14 <uxr_create_session+0x68>
 8011d80:	4631      	mov	r1, r6
 8011d82:	4630      	mov	r0, r6
 8011d84:	f000 fa00 	bl	8012188 <uxr_stream_id_from_raw>
 8011d88:	a91a      	add	r1, sp, #104	; 0x68
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	900a      	str	r0, [sp, #40]	; 0x28
 8011d8e:	4620      	mov	r0, r4
 8011d90:	f7ff fb54 	bl	801143c <read_submessage_list>
 8011d94:	e7be      	b.n	8011d14 <uxr_create_session+0x68>
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	3b01      	subs	r3, #1
 8011d9a:	9303      	str	r3, [sp, #12]
 8011d9c:	d001      	beq.n	8011da2 <uxr_create_session+0xf6>
 8011d9e:	2aff      	cmp	r2, #255	; 0xff
 8011da0:	d0ac      	beq.n	8011cfc <uxr_create_session+0x50>
 8011da2:	2a00      	cmp	r2, #0
 8011da4:	d051      	beq.n	8011e4a <uxr_create_session+0x19e>
 8011da6:	2000      	movs	r0, #0
 8011da8:	b02b      	add	sp, #172	; 0xac
 8011daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011db2:	9304      	str	r3, [sp, #16]
 8011db4:	4639      	mov	r1, r7
 8011db6:	4650      	mov	r0, sl
 8011db8:	f000 fad4 	bl	8012364 <uxr_get_input_reliable_stream>
 8011dbc:	4680      	mov	r8, r0
 8011dbe:	b348      	cbz	r0, 8011e14 <uxr_create_session+0x168>
 8011dc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011dc2:	9205      	str	r2, [sp, #20]
 8011dc4:	a81a      	add	r0, sp, #104	; 0x68
 8011dc6:	f7fe ff93 	bl	8010cf0 <ucdr_buffer_remaining>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	f10d 0019 	add.w	r0, sp, #25
 8011dd0:	9000      	str	r0, [sp, #0]
 8011dd2:	9a05      	ldr	r2, [sp, #20]
 8011dd4:	4649      	mov	r1, r9
 8011dd6:	4640      	mov	r0, r8
 8011dd8:	f003 ffe2 	bl	8015da0 <uxr_receive_reliable_message>
 8011ddc:	b1d0      	cbz	r0, 8011e14 <uxr_create_session+0x168>
 8011dde:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d038      	beq.n	8011e58 <uxr_create_session+0x1ac>
 8011de6:	9e04      	ldr	r6, [sp, #16]
 8011de8:	e00a      	b.n	8011e00 <uxr_create_session+0x154>
 8011dea:	f04f 0302 	mov.w	r3, #2
 8011dee:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 8011df2:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 8011df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011dfc:	f7ff fb1e 	bl	801143c <read_submessage_list>
 8011e00:	a922      	add	r1, sp, #136	; 0x88
 8011e02:	2204      	movs	r2, #4
 8011e04:	4640      	mov	r0, r8
 8011e06:	f004 f84b 	bl	8015ea0 <uxr_next_input_reliable_buffer_available>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	a922      	add	r1, sp, #136	; 0x88
 8011e0e:	4620      	mov	r0, r4
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1ea      	bne.n	8011dea <uxr_create_session+0x13e>
 8011e14:	9904      	ldr	r1, [sp, #16]
 8011e16:	463a      	mov	r2, r7
 8011e18:	4620      	mov	r0, r4
 8011e1a:	f7ff f98b 	bl	8011134 <write_submessage_acknack.isra.0>
 8011e1e:	e779      	b.n	8011d14 <uxr_create_session+0x68>
 8011e20:	4639      	mov	r1, r7
 8011e22:	4650      	mov	r0, sl
 8011e24:	f000 fa94 	bl	8012350 <uxr_get_input_best_effort_stream>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	f43f af73 	beq.w	8011d14 <uxr_create_session+0x68>
 8011e2e:	4649      	mov	r1, r9
 8011e30:	f003 ff22 	bl	8015c78 <uxr_receive_best_effort_message>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	f43f af6d 	beq.w	8011d14 <uxr_create_session+0x68>
 8011e3a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8011e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e40:	a91a      	add	r1, sp, #104	; 0x68
 8011e42:	4620      	mov	r0, r4
 8011e44:	f7ff fafa 	bl	801143c <read_submessage_list>
 8011e48:	e764      	b.n	8011d14 <uxr_create_session+0x68>
 8011e4a:	4650      	mov	r0, sl
 8011e4c:	f000 f9d0 	bl	80121f0 <uxr_reset_stream_storage>
 8011e50:	2001      	movs	r0, #1
 8011e52:	b02b      	add	sp, #172	; 0xac
 8011e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e58:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8011e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e5e:	a91a      	add	r1, sp, #104	; 0x68
 8011e60:	4620      	mov	r0, r4
 8011e62:	f7ff faeb 	bl	801143c <read_submessage_list>
 8011e66:	e7be      	b.n	8011de6 <uxr_create_session+0x13a>

08011e68 <uxr_prepare_stream_to_write_submessage>:
 8011e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e6c:	b082      	sub	sp, #8
 8011e6e:	4682      	mov	sl, r0
 8011e70:	4610      	mov	r0, r2
 8011e72:	4615      	mov	r5, r2
 8011e74:	461e      	mov	r6, r3
 8011e76:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011e7a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011e7e:	9101      	str	r1, [sp, #4]
 8011e80:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011e84:	f000 face 	bl	8012424 <uxr_submessage_padding>
 8011e88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011e8c:	f105 0904 	add.w	r9, r5, #4
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	4481      	add	r9, r0
 8011e94:	d01d      	beq.n	8011ed2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011e96:	2b02      	cmp	r3, #2
 8011e98:	d116      	bne.n	8011ec8 <uxr_prepare_stream_to_write_submessage+0x60>
 8011e9a:	4621      	mov	r1, r4
 8011e9c:	f10a 0008 	add.w	r0, sl, #8
 8011ea0:	f000 fa4c 	bl	801233c <uxr_get_output_reliable_stream>
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	b158      	cbz	r0, 8011ec0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011ea8:	4649      	mov	r1, r9
 8011eaa:	4632      	mov	r2, r6
 8011eac:	f004 f9b4 	bl	8016218 <uxr_prepare_reliable_buffer_to_write>
 8011eb0:	4604      	mov	r4, r0
 8011eb2:	b12c      	cbz	r4, 8011ec0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011eb4:	4643      	mov	r3, r8
 8011eb6:	b2aa      	uxth	r2, r5
 8011eb8:	4639      	mov	r1, r7
 8011eba:	4630      	mov	r0, r6
 8011ebc:	f000 fa72 	bl	80123a4 <uxr_buffer_submessage_header>
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	b002      	add	sp, #8
 8011ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec8:	2400      	movs	r4, #0
 8011eca:	4620      	mov	r0, r4
 8011ecc:	b002      	add	sp, #8
 8011ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed2:	4621      	mov	r1, r4
 8011ed4:	f10a 0008 	add.w	r0, sl, #8
 8011ed8:	f000 fa28 	bl	801232c <uxr_get_output_best_effort_stream>
 8011edc:	4604      	mov	r4, r0
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	d0ee      	beq.n	8011ec0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011ee2:	4649      	mov	r1, r9
 8011ee4:	4632      	mov	r2, r6
 8011ee6:	f004 f8c7 	bl	8016078 <uxr_prepare_best_effort_buffer_to_write>
 8011eea:	4604      	mov	r4, r0
 8011eec:	e7e1      	b.n	8011eb2 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011eee:	bf00      	nop

08011ef0 <uxr_init_session_info>:
 8011ef0:	0e13      	lsrs	r3, r2, #24
 8011ef2:	7043      	strb	r3, [r0, #1]
 8011ef4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011ef8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011efc:	7001      	strb	r1, [r0, #0]
 8011efe:	70c3      	strb	r3, [r0, #3]
 8011f00:	2109      	movs	r1, #9
 8011f02:	23ff      	movs	r3, #255	; 0xff
 8011f04:	f880 c002 	strb.w	ip, [r0, #2]
 8011f08:	7102      	strb	r2, [r0, #4]
 8011f0a:	80c1      	strh	r1, [r0, #6]
 8011f0c:	7143      	strb	r3, [r0, #5]
 8011f0e:	4770      	bx	lr

08011f10 <uxr_buffer_create_session>:
 8011f10:	b530      	push	{r4, r5, lr}
 8011f12:	b089      	sub	sp, #36	; 0x24
 8011f14:	2300      	movs	r3, #0
 8011f16:	4d12      	ldr	r5, [pc, #72]	; (8011f60 <uxr_buffer_create_session+0x50>)
 8011f18:	9307      	str	r3, [sp, #28]
 8011f1a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011f1e:	2201      	movs	r2, #1
 8011f20:	9301      	str	r3, [sp, #4]
 8011f22:	80c2      	strh	r2, [r0, #6]
 8011f24:	f88d 2004 	strb.w	r2, [sp, #4]
 8011f28:	682a      	ldr	r2, [r5, #0]
 8011f2a:	9200      	str	r2, [sp, #0]
 8011f2c:	88aa      	ldrh	r2, [r5, #4]
 8011f2e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011f32:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011f36:	9202      	str	r2, [sp, #8]
 8011f38:	460c      	mov	r4, r1
 8011f3a:	7802      	ldrb	r2, [r0, #0]
 8011f3c:	9303      	str	r3, [sp, #12]
 8011f3e:	4619      	mov	r1, r3
 8011f40:	f88d 200c 	strb.w	r2, [sp, #12]
 8011f44:	4620      	mov	r0, r4
 8011f46:	2210      	movs	r2, #16
 8011f48:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011f4c:	9306      	str	r3, [sp, #24]
 8011f4e:	f000 fa29 	bl	80123a4 <uxr_buffer_submessage_header>
 8011f52:	4669      	mov	r1, sp
 8011f54:	4620      	mov	r0, r4
 8011f56:	f001 f981 	bl	801325c <uxr_serialize_CREATE_CLIENT_Payload>
 8011f5a:	b009      	add	sp, #36	; 0x24
 8011f5c:	bd30      	pop	{r4, r5, pc}
 8011f5e:	bf00      	nop
 8011f60:	080192bc 	.word	0x080192bc

08011f64 <uxr_buffer_delete_session>:
 8011f64:	b510      	push	{r4, lr}
 8011f66:	4b0c      	ldr	r3, [pc, #48]	; (8011f98 <uxr_buffer_delete_session+0x34>)
 8011f68:	b082      	sub	sp, #8
 8011f6a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011f6e:	f8ad c006 	strh.w	ip, [sp, #6]
 8011f72:	460c      	mov	r4, r1
 8011f74:	2202      	movs	r2, #2
 8011f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f7a:	80c2      	strh	r2, [r0, #6]
 8011f7c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011f80:	2204      	movs	r2, #4
 8011f82:	2300      	movs	r3, #0
 8011f84:	2103      	movs	r1, #3
 8011f86:	4620      	mov	r0, r4
 8011f88:	f000 fa0c 	bl	80123a4 <uxr_buffer_submessage_header>
 8011f8c:	a901      	add	r1, sp, #4
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f001 fa0a 	bl	80133a8 <uxr_serialize_DELETE_Payload>
 8011f94:	b002      	add	sp, #8
 8011f96:	bd10      	pop	{r4, pc}
 8011f98:	080192bc 	.word	0x080192bc

08011f9c <uxr_read_create_session_status>:
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	b088      	sub	sp, #32
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	4608      	mov	r0, r1
 8011fa4:	a901      	add	r1, sp, #4
 8011fa6:	f001 fa0f 	bl	80133c8 <uxr_deserialize_STATUS_AGENT_Payload>
 8011faa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011fae:	7163      	strb	r3, [r4, #5]
 8011fb0:	b008      	add	sp, #32
 8011fb2:	bd10      	pop	{r4, pc}

08011fb4 <uxr_read_delete_session_status>:
 8011fb4:	b510      	push	{r4, lr}
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	b084      	sub	sp, #16
 8011fba:	4608      	mov	r0, r1
 8011fbc:	a902      	add	r1, sp, #8
 8011fbe:	f001 fa33 	bl	8013428 <uxr_deserialize_STATUS_Payload>
 8011fc2:	88e3      	ldrh	r3, [r4, #6]
 8011fc4:	2b02      	cmp	r3, #2
 8011fc6:	d001      	beq.n	8011fcc <uxr_read_delete_session_status+0x18>
 8011fc8:	b004      	add	sp, #16
 8011fca:	bd10      	pop	{r4, pc}
 8011fcc:	f10d 000a 	add.w	r0, sp, #10
 8011fd0:	f7ff f836 	bl	8011040 <uxr_object_id_from_raw>
 8011fd4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011fd8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011fdc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	bf04      	itt	eq
 8011fe6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011fea:	7163      	strbeq	r3, [r4, #5]
 8011fec:	b004      	add	sp, #16
 8011fee:	bd10      	pop	{r4, pc}

08011ff0 <uxr_stamp_create_session_header>:
 8011ff0:	b510      	push	{r4, lr}
 8011ff2:	2208      	movs	r2, #8
 8011ff4:	b08a      	sub	sp, #40	; 0x28
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	eb0d 0002 	add.w	r0, sp, r2
 8011ffc:	f7fe fe48 	bl	8010c90 <ucdr_init_buffer>
 8012000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012004:	9400      	str	r4, [sp, #0]
 8012006:	2300      	movs	r3, #0
 8012008:	461a      	mov	r2, r3
 801200a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801200e:	a802      	add	r0, sp, #8
 8012010:	f000 fbc2 	bl	8012798 <uxr_serialize_message_header>
 8012014:	b00a      	add	sp, #40	; 0x28
 8012016:	bd10      	pop	{r4, pc}

08012018 <uxr_stamp_session_header>:
 8012018:	b530      	push	{r4, r5, lr}
 801201a:	b08d      	sub	sp, #52	; 0x34
 801201c:	4604      	mov	r4, r0
 801201e:	460d      	mov	r5, r1
 8012020:	9203      	str	r2, [sp, #12]
 8012022:	4619      	mov	r1, r3
 8012024:	a804      	add	r0, sp, #16
 8012026:	2208      	movs	r2, #8
 8012028:	f7fe fe32 	bl	8010c90 <ucdr_init_buffer>
 801202c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012030:	9b03      	ldr	r3, [sp, #12]
 8012032:	9400      	str	r4, [sp, #0]
 8012034:	462a      	mov	r2, r5
 8012036:	a804      	add	r0, sp, #16
 8012038:	f000 fbae 	bl	8012798 <uxr_serialize_message_header>
 801203c:	b00d      	add	sp, #52	; 0x34
 801203e:	bd30      	pop	{r4, r5, pc}

08012040 <uxr_read_session_header>:
 8012040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012044:	4607      	mov	r7, r0
 8012046:	b084      	sub	sp, #16
 8012048:	4608      	mov	r0, r1
 801204a:	460c      	mov	r4, r1
 801204c:	4615      	mov	r5, r2
 801204e:	461e      	mov	r6, r3
 8012050:	f7fe fe4e 	bl	8010cf0 <ucdr_buffer_remaining>
 8012054:	2808      	cmp	r0, #8
 8012056:	d803      	bhi.n	8012060 <uxr_read_session_header+0x20>
 8012058:	2000      	movs	r0, #0
 801205a:	b004      	add	sp, #16
 801205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012060:	f10d 080c 	add.w	r8, sp, #12
 8012064:	4633      	mov	r3, r6
 8012066:	462a      	mov	r2, r5
 8012068:	f8cd 8000 	str.w	r8, [sp]
 801206c:	4620      	mov	r0, r4
 801206e:	f10d 010b 	add.w	r1, sp, #11
 8012072:	f000 fbaf 	bl	80127d4 <uxr_deserialize_message_header>
 8012076:	783a      	ldrb	r2, [r7, #0]
 8012078:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801207c:	4293      	cmp	r3, r2
 801207e:	d1eb      	bne.n	8012058 <uxr_read_session_header+0x18>
 8012080:	061b      	lsls	r3, r3, #24
 8012082:	d41c      	bmi.n	80120be <uxr_read_session_header+0x7e>
 8012084:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012088:	787b      	ldrb	r3, [r7, #1]
 801208a:	429a      	cmp	r2, r3
 801208c:	d003      	beq.n	8012096 <uxr_read_session_header+0x56>
 801208e:	2001      	movs	r0, #1
 8012090:	f080 0001 	eor.w	r0, r0, #1
 8012094:	e7e1      	b.n	801205a <uxr_read_session_header+0x1a>
 8012096:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801209a:	78bb      	ldrb	r3, [r7, #2]
 801209c:	429a      	cmp	r2, r3
 801209e:	f107 0102 	add.w	r1, r7, #2
 80120a2:	d1f4      	bne.n	801208e <uxr_read_session_header+0x4e>
 80120a4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80120a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d1ee      	bne.n	801208e <uxr_read_session_header+0x4e>
 80120b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80120b4:	784b      	ldrb	r3, [r1, #1]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d1e9      	bne.n	801208e <uxr_read_session_header+0x4e>
 80120ba:	2000      	movs	r0, #0
 80120bc:	e7e8      	b.n	8012090 <uxr_read_session_header+0x50>
 80120be:	2001      	movs	r0, #1
 80120c0:	e7cb      	b.n	801205a <uxr_read_session_header+0x1a>
 80120c2:	bf00      	nop

080120c4 <uxr_session_header_offset>:
 80120c4:	f990 3000 	ldrsb.w	r3, [r0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	bfac      	ite	ge
 80120cc:	2008      	movge	r0, #8
 80120ce:	2004      	movlt	r0, #4
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop

080120d4 <uxr_init_base_object_request>:
 80120d4:	b510      	push	{r4, lr}
 80120d6:	88c3      	ldrh	r3, [r0, #6]
 80120d8:	b082      	sub	sp, #8
 80120da:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80120de:	9101      	str	r1, [sp, #4]
 80120e0:	f1a3 010a 	sub.w	r1, r3, #10
 80120e4:	b289      	uxth	r1, r1
 80120e6:	42a1      	cmp	r1, r4
 80120e8:	d80e      	bhi.n	8012108 <uxr_init_base_object_request+0x34>
 80120ea:	3301      	adds	r3, #1
 80120ec:	b29c      	uxth	r4, r3
 80120ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	80c4      	strh	r4, [r0, #6]
 80120f6:	9801      	ldr	r0, [sp, #4]
 80120f8:	7011      	strb	r1, [r2, #0]
 80120fa:	7053      	strb	r3, [r2, #1]
 80120fc:	1c91      	adds	r1, r2, #2
 80120fe:	f7fe ffb3 	bl	8011068 <uxr_object_id_to_raw>
 8012102:	4620      	mov	r0, r4
 8012104:	b002      	add	sp, #8
 8012106:	bd10      	pop	{r4, pc}
 8012108:	230a      	movs	r3, #10
 801210a:	2100      	movs	r1, #0
 801210c:	461c      	mov	r4, r3
 801210e:	e7f1      	b.n	80120f4 <uxr_init_base_object_request+0x20>

08012110 <uxr_parse_base_object_request>:
 8012110:	b570      	push	{r4, r5, r6, lr}
 8012112:	4604      	mov	r4, r0
 8012114:	3002      	adds	r0, #2
 8012116:	460d      	mov	r5, r1
 8012118:	4616      	mov	r6, r2
 801211a:	f7fe ff91 	bl	8011040 <uxr_object_id_from_raw>
 801211e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012122:	8028      	strh	r0, [r5, #0]
 8012124:	806b      	strh	r3, [r5, #2]
 8012126:	7822      	ldrb	r2, [r4, #0]
 8012128:	7863      	ldrb	r3, [r4, #1]
 801212a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801212e:	8033      	strh	r3, [r6, #0]
 8012130:	bd70      	pop	{r4, r5, r6, pc}
 8012132:	bf00      	nop

08012134 <uxr_stream_id>:
 8012134:	2901      	cmp	r1, #1
 8012136:	b082      	sub	sp, #8
 8012138:	d01d      	beq.n	8012176 <uxr_stream_id+0x42>
 801213a:	2902      	cmp	r1, #2
 801213c:	f04f 0c00 	mov.w	ip, #0
 8012140:	d01e      	beq.n	8012180 <uxr_stream_id+0x4c>
 8012142:	2300      	movs	r3, #0
 8012144:	f36c 0307 	bfi	r3, ip, #0, #8
 8012148:	f360 230f 	bfi	r3, r0, #8, #8
 801214c:	f361 4317 	bfi	r3, r1, #16, #8
 8012150:	f362 631f 	bfi	r3, r2, #24, #8
 8012154:	b2da      	uxtb	r2, r3
 8012156:	2000      	movs	r0, #0
 8012158:	f362 0007 	bfi	r0, r2, #0, #8
 801215c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012160:	f362 200f 	bfi	r0, r2, #8, #8
 8012164:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012168:	f362 4017 	bfi	r0, r2, #16, #8
 801216c:	0e1b      	lsrs	r3, r3, #24
 801216e:	f363 601f 	bfi	r0, r3, #24, #8
 8012172:	b002      	add	sp, #8
 8012174:	4770      	bx	lr
 8012176:	f100 0c01 	add.w	ip, r0, #1
 801217a:	fa5f fc8c 	uxtb.w	ip, ip
 801217e:	e7e0      	b.n	8012142 <uxr_stream_id+0xe>
 8012180:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 8012184:	e7dd      	b.n	8012142 <uxr_stream_id+0xe>
 8012186:	bf00      	nop

08012188 <uxr_stream_id_from_raw>:
 8012188:	b082      	sub	sp, #8
 801218a:	b130      	cbz	r0, 801219a <uxr_stream_id_from_raw+0x12>
 801218c:	0603      	lsls	r3, r0, #24
 801218e:	d420      	bmi.n	80121d2 <uxr_stream_id_from_raw+0x4a>
 8012190:	1e42      	subs	r2, r0, #1
 8012192:	b2d2      	uxtb	r2, r2
 8012194:	f04f 0c01 	mov.w	ip, #1
 8012198:	e001      	b.n	801219e <uxr_stream_id_from_raw+0x16>
 801219a:	4684      	mov	ip, r0
 801219c:	4602      	mov	r2, r0
 801219e:	2300      	movs	r3, #0
 80121a0:	f360 0307 	bfi	r3, r0, #0, #8
 80121a4:	f362 230f 	bfi	r3, r2, #8, #8
 80121a8:	f36c 4317 	bfi	r3, ip, #16, #8
 80121ac:	f361 631f 	bfi	r3, r1, #24, #8
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	2000      	movs	r0, #0
 80121b4:	f362 0007 	bfi	r0, r2, #0, #8
 80121b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80121bc:	f362 200f 	bfi	r0, r2, #8, #8
 80121c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80121c4:	f362 4017 	bfi	r0, r2, #16, #8
 80121c8:	0e1b      	lsrs	r3, r3, #24
 80121ca:	f363 601f 	bfi	r0, r3, #24, #8
 80121ce:	b002      	add	sp, #8
 80121d0:	4770      	bx	lr
 80121d2:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80121d6:	f04f 0c02 	mov.w	ip, #2
 80121da:	e7e0      	b.n	801219e <uxr_stream_id_from_raw+0x16>

080121dc <uxr_init_stream_storage>:
 80121dc:	2300      	movs	r3, #0
 80121de:	7403      	strb	r3, [r0, #16]
 80121e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80121e4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80121e8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop

080121f0 <uxr_reset_stream_storage>:
 80121f0:	b570      	push	{r4, r5, r6, lr}
 80121f2:	7c03      	ldrb	r3, [r0, #16]
 80121f4:	4604      	mov	r4, r0
 80121f6:	b153      	cbz	r3, 801220e <uxr_reset_stream_storage+0x1e>
 80121f8:	4606      	mov	r6, r0
 80121fa:	2500      	movs	r5, #0
 80121fc:	4630      	mov	r0, r6
 80121fe:	f003 ff35 	bl	801606c <uxr_reset_output_best_effort_stream>
 8012202:	7c23      	ldrb	r3, [r4, #16]
 8012204:	3501      	adds	r5, #1
 8012206:	42ab      	cmp	r3, r5
 8012208:	f106 0610 	add.w	r6, r6, #16
 801220c:	d8f6      	bhi.n	80121fc <uxr_reset_stream_storage+0xc>
 801220e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012212:	b163      	cbz	r3, 801222e <uxr_reset_stream_storage+0x3e>
 8012214:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012218:	2500      	movs	r5, #0
 801221a:	4630      	mov	r0, r6
 801221c:	f003 fd28 	bl	8015c70 <uxr_reset_input_best_effort_stream>
 8012220:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012224:	3501      	adds	r5, #1
 8012226:	42ab      	cmp	r3, r5
 8012228:	f106 0602 	add.w	r6, r6, #2
 801222c:	d8f5      	bhi.n	801221a <uxr_reset_stream_storage+0x2a>
 801222e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012232:	b163      	cbz	r3, 801224e <uxr_reset_stream_storage+0x5e>
 8012234:	f104 0618 	add.w	r6, r4, #24
 8012238:	2500      	movs	r5, #0
 801223a:	4630      	mov	r0, r6
 801223c:	f003 ffc2 	bl	80161c4 <uxr_reset_output_reliable_stream>
 8012240:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012244:	3501      	adds	r5, #1
 8012246:	42ab      	cmp	r3, r5
 8012248:	f106 0628 	add.w	r6, r6, #40	; 0x28
 801224c:	d8f5      	bhi.n	801223a <uxr_reset_stream_storage+0x4a>
 801224e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012252:	b163      	cbz	r3, 801226e <uxr_reset_stream_storage+0x7e>
 8012254:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8012258:	2500      	movs	r5, #0
 801225a:	4630      	mov	r0, r6
 801225c:	f003 fd7c 	bl	8015d58 <uxr_reset_input_reliable_stream>
 8012260:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012264:	3501      	adds	r5, #1
 8012266:	42ab      	cmp	r3, r5
 8012268:	f106 0618 	add.w	r6, r6, #24
 801226c:	d8f5      	bhi.n	801225a <uxr_reset_stream_storage+0x6a>
 801226e:	bd70      	pop	{r4, r5, r6, pc}

08012270 <uxr_add_output_best_effort_buffer>:
 8012270:	b510      	push	{r4, lr}
 8012272:	7c04      	ldrb	r4, [r0, #16]
 8012274:	f104 0c01 	add.w	ip, r4, #1
 8012278:	b082      	sub	sp, #8
 801227a:	f880 c010 	strb.w	ip, [r0, #16]
 801227e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012282:	f003 fee9 	bl	8016058 <uxr_init_output_best_effort_stream>
 8012286:	2201      	movs	r2, #1
 8012288:	4611      	mov	r1, r2
 801228a:	4620      	mov	r0, r4
 801228c:	b002      	add	sp, #8
 801228e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012292:	f7ff bf4f 	b.w	8012134 <uxr_stream_id>
 8012296:	bf00      	nop

08012298 <uxr_add_output_reliable_buffer>:
 8012298:	b510      	push	{r4, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	4684      	mov	ip, r0
 801229e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80122a2:	9000      	str	r0, [sp, #0]
 80122a4:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80122a8:	2028      	movs	r0, #40	; 0x28
 80122aa:	fb00 c004 	mla	r0, r0, r4, ip
 80122ae:	f104 0e01 	add.w	lr, r4, #1
 80122b2:	3018      	adds	r0, #24
 80122b4:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80122b8:	f003 ff4c 	bl	8016154 <uxr_init_output_reliable_stream>
 80122bc:	2201      	movs	r2, #1
 80122be:	2102      	movs	r1, #2
 80122c0:	4620      	mov	r0, r4
 80122c2:	b004      	add	sp, #16
 80122c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122c8:	f7ff bf34 	b.w	8012134 <uxr_stream_id>

080122cc <uxr_add_input_best_effort_buffer>:
 80122cc:	b510      	push	{r4, lr}
 80122ce:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80122d2:	4603      	mov	r3, r0
 80122d4:	1c62      	adds	r2, r4, #1
 80122d6:	f104 0021 	add.w	r0, r4, #33	; 0x21
 80122da:	b082      	sub	sp, #8
 80122dc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80122e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122e4:	f003 fcc0 	bl	8015c68 <uxr_init_input_best_effort_stream>
 80122e8:	2200      	movs	r2, #0
 80122ea:	2101      	movs	r1, #1
 80122ec:	4620      	mov	r0, r4
 80122ee:	b002      	add	sp, #8
 80122f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122f4:	f7ff bf1e 	b.w	8012134 <uxr_stream_id>

080122f8 <uxr_add_input_reliable_buffer>:
 80122f8:	b510      	push	{r4, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	4684      	mov	ip, r0
 80122fe:	9806      	ldr	r0, [sp, #24]
 8012300:	9000      	str	r0, [sp, #0]
 8012302:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8012306:	2018      	movs	r0, #24
 8012308:	fb00 c004 	mla	r0, r0, r4, ip
 801230c:	f104 0e01 	add.w	lr, r4, #1
 8012310:	3048      	adds	r0, #72	; 0x48
 8012312:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8012316:	f003 fcf3 	bl	8015d00 <uxr_init_input_reliable_stream>
 801231a:	2200      	movs	r2, #0
 801231c:	2102      	movs	r1, #2
 801231e:	4620      	mov	r0, r4
 8012320:	b004      	add	sp, #16
 8012322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012326:	f7ff bf05 	b.w	8012134 <uxr_stream_id>
 801232a:	bf00      	nop

0801232c <uxr_get_output_best_effort_stream>:
 801232c:	7c03      	ldrb	r3, [r0, #16]
 801232e:	428b      	cmp	r3, r1
 8012330:	bf8c      	ite	hi
 8012332:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012336:	2000      	movls	r0, #0
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop

0801233c <uxr_get_output_reliable_stream>:
 801233c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8012340:	428b      	cmp	r3, r1
 8012342:	bf83      	ittte	hi
 8012344:	2328      	movhi	r3, #40	; 0x28
 8012346:	fb03 0001 	mlahi	r0, r3, r1, r0
 801234a:	3018      	addhi	r0, #24
 801234c:	2000      	movls	r0, #0
 801234e:	4770      	bx	lr

08012350 <uxr_get_input_best_effort_stream>:
 8012350:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8012354:	428b      	cmp	r3, r1
 8012356:	bf86      	itte	hi
 8012358:	3121      	addhi	r1, #33	; 0x21
 801235a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801235e:	2000      	movls	r0, #0
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop

08012364 <uxr_get_input_reliable_stream>:
 8012364:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8012368:	428b      	cmp	r3, r1
 801236a:	bf83      	ittte	hi
 801236c:	2318      	movhi	r3, #24
 801236e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012372:	3048      	addhi	r0, #72	; 0x48
 8012374:	2000      	movls	r0, #0
 8012376:	4770      	bx	lr

08012378 <uxr_output_streams_confirmed>:
 8012378:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801237c:	b183      	cbz	r3, 80123a0 <uxr_output_streams_confirmed+0x28>
 801237e:	b570      	push	{r4, r5, r6, lr}
 8012380:	4606      	mov	r6, r0
 8012382:	f100 0518 	add.w	r5, r0, #24
 8012386:	2400      	movs	r4, #0
 8012388:	e001      	b.n	801238e <uxr_output_streams_confirmed+0x16>
 801238a:	3528      	adds	r5, #40	; 0x28
 801238c:	b138      	cbz	r0, 801239e <uxr_output_streams_confirmed+0x26>
 801238e:	4628      	mov	r0, r5
 8012390:	f004 f988 	bl	80166a4 <uxr_is_output_up_to_date>
 8012394:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8012398:	3401      	adds	r4, #1
 801239a:	42a3      	cmp	r3, r4
 801239c:	d8f5      	bhi.n	801238a <uxr_output_streams_confirmed+0x12>
 801239e:	bd70      	pop	{r4, r5, r6, pc}
 80123a0:	2001      	movs	r0, #1
 80123a2:	4770      	bx	lr

080123a4 <uxr_buffer_submessage_header>:
 80123a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123a6:	4604      	mov	r4, r0
 80123a8:	460e      	mov	r6, r1
 80123aa:	2104      	movs	r1, #4
 80123ac:	4615      	mov	r5, r2
 80123ae:	461f      	mov	r7, r3
 80123b0:	f7fe fc88 	bl	8010cc4 <ucdr_align_to>
 80123b4:	2301      	movs	r3, #1
 80123b6:	ea47 0203 	orr.w	r2, r7, r3
 80123ba:	4631      	mov	r1, r6
 80123bc:	7523      	strb	r3, [r4, #20]
 80123be:	4620      	mov	r0, r4
 80123c0:	462b      	mov	r3, r5
 80123c2:	f000 fa27 	bl	8012814 <uxr_serialize_submessage_header>
 80123c6:	4620      	mov	r0, r4
 80123c8:	f7fe fc92 	bl	8010cf0 <ucdr_buffer_remaining>
 80123cc:	42a8      	cmp	r0, r5
 80123ce:	bf34      	ite	cc
 80123d0:	2000      	movcc	r0, #0
 80123d2:	2001      	movcs	r0, #1
 80123d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123d6:	bf00      	nop

080123d8 <uxr_read_submessage_header>:
 80123d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123dc:	4604      	mov	r4, r0
 80123de:	460d      	mov	r5, r1
 80123e0:	2104      	movs	r1, #4
 80123e2:	4616      	mov	r6, r2
 80123e4:	4698      	mov	r8, r3
 80123e6:	f7fe fc6d 	bl	8010cc4 <ucdr_align_to>
 80123ea:	4620      	mov	r0, r4
 80123ec:	f7fe fc80 	bl	8010cf0 <ucdr_buffer_remaining>
 80123f0:	2803      	cmp	r0, #3
 80123f2:	bf8c      	ite	hi
 80123f4:	2701      	movhi	r7, #1
 80123f6:	2700      	movls	r7, #0
 80123f8:	d802      	bhi.n	8012400 <uxr_read_submessage_header+0x28>
 80123fa:	4638      	mov	r0, r7
 80123fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012400:	4633      	mov	r3, r6
 8012402:	4642      	mov	r2, r8
 8012404:	4620      	mov	r0, r4
 8012406:	4629      	mov	r1, r5
 8012408:	f000 fa18 	bl	801283c <uxr_deserialize_submessage_header>
 801240c:	f898 3000 	ldrb.w	r3, [r8]
 8012410:	f003 0201 	and.w	r2, r3, #1
 8012414:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8012418:	f888 3000 	strb.w	r3, [r8]
 801241c:	7522      	strb	r2, [r4, #20]
 801241e:	4638      	mov	r0, r7
 8012420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012424 <uxr_submessage_padding>:
 8012424:	f010 0003 	ands.w	r0, r0, #3
 8012428:	bf18      	it	ne
 801242a:	f1c0 0004 	rsbne	r0, r0, #4
 801242e:	4770      	bx	lr

08012430 <uxr_millis>:
 8012430:	b510      	push	{r4, lr}
 8012432:	b084      	sub	sp, #16
 8012434:	4669      	mov	r1, sp
 8012436:	2001      	movs	r0, #1
 8012438:	f7ef f872 	bl	8001520 <clock_gettime>
 801243c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012440:	4906      	ldr	r1, [pc, #24]	; (801245c <uxr_millis+0x2c>)
 8012442:	fba0 0301 	umull	r0, r3, r0, r1
 8012446:	1900      	adds	r0, r0, r4
 8012448:	fb01 3102 	mla	r1, r1, r2, r3
 801244c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012450:	4a03      	ldr	r2, [pc, #12]	; (8012460 <uxr_millis+0x30>)
 8012452:	2300      	movs	r3, #0
 8012454:	f7ed ff24 	bl	80002a0 <__aeabi_ldivmod>
 8012458:	b004      	add	sp, #16
 801245a:	bd10      	pop	{r4, pc}
 801245c:	3b9aca00 	.word	0x3b9aca00
 8012460:	000f4240 	.word	0x000f4240

08012464 <uxr_nanos>:
 8012464:	b510      	push	{r4, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	4669      	mov	r1, sp
 801246a:	2001      	movs	r0, #1
 801246c:	f7ef f858 	bl	8001520 <clock_gettime>
 8012470:	4a06      	ldr	r2, [pc, #24]	; (801248c <uxr_nanos+0x28>)
 8012472:	9800      	ldr	r0, [sp, #0]
 8012474:	9902      	ldr	r1, [sp, #8]
 8012476:	9c01      	ldr	r4, [sp, #4]
 8012478:	fba0 0302 	umull	r0, r3, r0, r2
 801247c:	1840      	adds	r0, r0, r1
 801247e:	fb02 3304 	mla	r3, r2, r4, r3
 8012482:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012486:	b004      	add	sp, #16
 8012488:	bd10      	pop	{r4, pc}
 801248a:	bf00      	nop
 801248c:	3b9aca00 	.word	0x3b9aca00

08012490 <on_full_output_buffer_fragmented>:
 8012490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012494:	460c      	mov	r4, r1
 8012496:	b08a      	sub	sp, #40	; 0x28
 8012498:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801249c:	4606      	mov	r6, r0
 801249e:	f104 0008 	add.w	r0, r4, #8
 80124a2:	f7ff ff4b 	bl	801233c <uxr_get_output_reliable_stream>
 80124a6:	4605      	mov	r5, r0
 80124a8:	f004 f906 	bl	80166b8 <get_available_free_slots>
 80124ac:	b968      	cbnz	r0, 80124ca <on_full_output_buffer_fragmented+0x3a>
 80124ae:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80124b2:	4620      	mov	r0, r4
 80124b4:	4798      	blx	r3
 80124b6:	b918      	cbnz	r0, 80124c0 <on_full_output_buffer_fragmented+0x30>
 80124b8:	2001      	movs	r0, #1
 80124ba:	b00a      	add	sp, #40	; 0x28
 80124bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c0:	4628      	mov	r0, r5
 80124c2:	f004 f8f9 	bl	80166b8 <get_available_free_slots>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d0f6      	beq.n	80124b8 <on_full_output_buffer_fragmented+0x28>
 80124ca:	8929      	ldrh	r1, [r5, #8]
 80124cc:	89eb      	ldrh	r3, [r5, #14]
 80124ce:	7b28      	ldrb	r0, [r5, #12]
 80124d0:	686a      	ldr	r2, [r5, #4]
 80124d2:	fbb2 f8f1 	udiv	r8, r2, r1
 80124d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80124da:	fb01 3112 	mls	r1, r1, r2, r3
 80124de:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 80124e2:	b289      	uxth	r1, r1
 80124e4:	fb08 f101 	mul.w	r1, r8, r1
 80124e8:	30fc      	adds	r0, #252	; 0xfc
 80124ea:	f1a8 0804 	sub.w	r8, r8, #4
 80124ee:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80124f2:	4440      	add	r0, r8
 80124f4:	b287      	uxth	r7, r0
 80124f6:	1bdb      	subs	r3, r3, r7
 80124f8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80124fc:	682b      	ldr	r3, [r5, #0]
 80124fe:	3104      	adds	r1, #4
 8012500:	4419      	add	r1, r3
 8012502:	4642      	mov	r2, r8
 8012504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012508:	9300      	str	r3, [sp, #0]
 801250a:	a802      	add	r0, sp, #8
 801250c:	2300      	movs	r3, #0
 801250e:	f7fe fbad 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8012512:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8012516:	f102 0308 	add.w	r3, r2, #8
 801251a:	4543      	cmp	r3, r8
 801251c:	d928      	bls.n	8012570 <on_full_output_buffer_fragmented+0xe0>
 801251e:	463a      	mov	r2, r7
 8012520:	2300      	movs	r3, #0
 8012522:	210d      	movs	r1, #13
 8012524:	a802      	add	r0, sp, #8
 8012526:	f7ff ff3d 	bl	80123a4 <uxr_buffer_submessage_header>
 801252a:	8929      	ldrh	r1, [r5, #8]
 801252c:	89eb      	ldrh	r3, [r5, #14]
 801252e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012532:	fb01 3312 	mls	r3, r1, r2, r3
 8012536:	b29b      	uxth	r3, r3
 8012538:	686a      	ldr	r2, [r5, #4]
 801253a:	fbb2 f2f1 	udiv	r2, r2, r1
 801253e:	fb02 f303 	mul.w	r3, r2, r3
 8012542:	682a      	ldr	r2, [r5, #0]
 8012544:	f842 8003 	str.w	r8, [r2, r3]
 8012548:	89e8      	ldrh	r0, [r5, #14]
 801254a:	2101      	movs	r1, #1
 801254c:	f004 f9ca 	bl	80168e4 <uxr_seq_num_add>
 8012550:	9904      	ldr	r1, [sp, #16]
 8012552:	9a03      	ldr	r2, [sp, #12]
 8012554:	81e8      	strh	r0, [r5, #14]
 8012556:	1a52      	subs	r2, r2, r1
 8012558:	4630      	mov	r0, r6
 801255a:	f7fe fb99 	bl	8010c90 <ucdr_init_buffer>
 801255e:	4630      	mov	r0, r6
 8012560:	490f      	ldr	r1, [pc, #60]	; (80125a0 <on_full_output_buffer_fragmented+0x110>)
 8012562:	4622      	mov	r2, r4
 8012564:	f7fe fb68 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 8012568:	2000      	movs	r0, #0
 801256a:	b00a      	add	sp, #40	; 0x28
 801256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012570:	b292      	uxth	r2, r2
 8012572:	2302      	movs	r3, #2
 8012574:	210d      	movs	r1, #13
 8012576:	a802      	add	r0, sp, #8
 8012578:	f7ff ff14 	bl	80123a4 <uxr_buffer_submessage_header>
 801257c:	8928      	ldrh	r0, [r5, #8]
 801257e:	89eb      	ldrh	r3, [r5, #14]
 8012580:	fbb3 f1f0 	udiv	r1, r3, r0
 8012584:	fb00 3311 	mls	r3, r0, r1, r3
 8012588:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801258c:	6869      	ldr	r1, [r5, #4]
 801258e:	fbb1 f1f0 	udiv	r1, r1, r0
 8012592:	b29b      	uxth	r3, r3
 8012594:	fb01 f303 	mul.w	r3, r1, r3
 8012598:	6829      	ldr	r1, [r5, #0]
 801259a:	3208      	adds	r2, #8
 801259c:	50ca      	str	r2, [r1, r3]
 801259e:	e7d3      	b.n	8012548 <on_full_output_buffer_fragmented+0xb8>
 80125a0:	08012491 	.word	0x08012491

080125a4 <uxr_prepare_output_stream>:
 80125a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125a6:	b087      	sub	sp, #28
 80125a8:	2707      	movs	r7, #7
 80125aa:	9202      	str	r2, [sp, #8]
 80125ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125ae:	9103      	str	r1, [sp, #12]
 80125b0:	2500      	movs	r5, #0
 80125b2:	3204      	adds	r2, #4
 80125b4:	e9cd 7500 	strd	r7, r5, [sp]
 80125b8:	461c      	mov	r4, r3
 80125ba:	4606      	mov	r6, r0
 80125bc:	f7ff fc54 	bl	8011e68 <uxr_prepare_stream_to_write_submessage>
 80125c0:	f080 0201 	eor.w	r2, r0, #1
 80125c4:	b2d2      	uxtb	r2, r2
 80125c6:	75a2      	strb	r2, [r4, #22]
 80125c8:	b112      	cbz	r2, 80125d0 <uxr_prepare_output_stream+0x2c>
 80125ca:	4628      	mov	r0, r5
 80125cc:	b007      	add	sp, #28
 80125ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125d0:	aa05      	add	r2, sp, #20
 80125d2:	9902      	ldr	r1, [sp, #8]
 80125d4:	4630      	mov	r0, r6
 80125d6:	f7ff fd7d 	bl	80120d4 <uxr_init_base_object_request>
 80125da:	a905      	add	r1, sp, #20
 80125dc:	4605      	mov	r5, r0
 80125de:	4620      	mov	r0, r4
 80125e0:	f000 ffa0 	bl	8013524 <uxr_serialize_WRITE_DATA_Payload_Data>
 80125e4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80125e8:	69a6      	ldr	r6, [r4, #24]
 80125ea:	69e7      	ldr	r7, [r4, #28]
 80125ec:	1a52      	subs	r2, r2, r1
 80125ee:	4620      	mov	r0, r4
 80125f0:	f7fe fb4e 	bl	8010c90 <ucdr_init_buffer>
 80125f4:	4620      	mov	r0, r4
 80125f6:	463a      	mov	r2, r7
 80125f8:	4631      	mov	r1, r6
 80125fa:	f7fe fb1d 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 80125fe:	4628      	mov	r0, r5
 8012600:	b007      	add	sp, #28
 8012602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012604 <uxr_prepare_output_stream_fragmented>:
 8012604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012608:	b091      	sub	sp, #68	; 0x44
 801260a:	4605      	mov	r5, r0
 801260c:	9105      	str	r1, [sp, #20]
 801260e:	3008      	adds	r0, #8
 8012610:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012614:	461e      	mov	r6, r3
 8012616:	9204      	str	r2, [sp, #16]
 8012618:	f7ff fe90 	bl	801233c <uxr_get_output_reliable_stream>
 801261c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012620:	2b01      	cmp	r3, #1
 8012622:	f000 8091 	beq.w	8012748 <uxr_prepare_output_stream_fragmented+0x144>
 8012626:	4604      	mov	r4, r0
 8012628:	2800      	cmp	r0, #0
 801262a:	f000 808d 	beq.w	8012748 <uxr_prepare_output_stream_fragmented+0x144>
 801262e:	f004 f843 	bl	80166b8 <get_available_free_slots>
 8012632:	2800      	cmp	r0, #0
 8012634:	f000 8083 	beq.w	801273e <uxr_prepare_output_stream_fragmented+0x13a>
 8012638:	8922      	ldrh	r2, [r4, #8]
 801263a:	89e7      	ldrh	r7, [r4, #14]
 801263c:	fbb7 f9f2 	udiv	r9, r7, r2
 8012640:	fb02 7919 	mls	r9, r2, r9, r7
 8012644:	fa1f f989 	uxth.w	r9, r9
 8012648:	6863      	ldr	r3, [r4, #4]
 801264a:	fbb3 f2f2 	udiv	r2, r3, r2
 801264e:	6823      	ldr	r3, [r4, #0]
 8012650:	9203      	str	r2, [sp, #12]
 8012652:	fb02 f909 	mul.w	r9, r2, r9
 8012656:	f109 0904 	add.w	r9, r9, #4
 801265a:	4499      	add	r9, r3
 801265c:	7b23      	ldrb	r3, [r4, #12]
 801265e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012662:	4543      	cmp	r3, r8
 8012664:	f1a2 0b04 	sub.w	fp, r2, #4
 8012668:	d37a      	bcc.n	8012760 <uxr_prepare_output_stream_fragmented+0x15c>
 801266a:	f1ab 0a04 	sub.w	sl, fp, #4
 801266e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012672:	465a      	mov	r2, fp
 8012674:	2300      	movs	r3, #0
 8012676:	4649      	mov	r1, r9
 8012678:	a808      	add	r0, sp, #32
 801267a:	f8cd 8000 	str.w	r8, [sp]
 801267e:	f7fe faf5 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8012682:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012684:	fa1f fa8a 	uxth.w	sl, sl
 8012688:	4652      	mov	r2, sl
 801268a:	f103 0a08 	add.w	sl, r3, #8
 801268e:	45da      	cmp	sl, fp
 8012690:	bf34      	ite	cc
 8012692:	2302      	movcc	r3, #2
 8012694:	2300      	movcs	r3, #0
 8012696:	210d      	movs	r1, #13
 8012698:	a808      	add	r0, sp, #32
 801269a:	f7ff fe83 	bl	80123a4 <uxr_buffer_submessage_header>
 801269e:	8921      	ldrh	r1, [r4, #8]
 80126a0:	fbb7 f2f1 	udiv	r2, r7, r1
 80126a4:	fb01 7212 	mls	r2, r1, r2, r7
 80126a8:	b292      	uxth	r2, r2
 80126aa:	6863      	ldr	r3, [r4, #4]
 80126ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80126b0:	fb02 f303 	mul.w	r3, r2, r3
 80126b4:	6822      	ldr	r2, [r4, #0]
 80126b6:	4638      	mov	r0, r7
 80126b8:	f842 b003 	str.w	fp, [r2, r3]
 80126bc:	2101      	movs	r1, #1
 80126be:	f004 f911 	bl	80168e4 <uxr_seq_num_add>
 80126c2:	9b03      	ldr	r3, [sp, #12]
 80126c4:	f108 0104 	add.w	r1, r8, #4
 80126c8:	f1a3 0208 	sub.w	r2, r3, #8
 80126cc:	eba2 0208 	sub.w	r2, r2, r8
 80126d0:	4449      	add	r1, r9
 80126d2:	4607      	mov	r7, r0
 80126d4:	4630      	mov	r0, r6
 80126d6:	f7fe fadb 	bl	8010c90 <ucdr_init_buffer>
 80126da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80126dc:	81e7      	strh	r7, [r4, #14]
 80126de:	1d1a      	adds	r2, r3, #4
 80126e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80126e4:	bf28      	it	cs
 80126e6:	2200      	movcs	r2, #0
 80126e8:	2300      	movs	r3, #0
 80126ea:	b292      	uxth	r2, r2
 80126ec:	2107      	movs	r1, #7
 80126ee:	4630      	mov	r0, r6
 80126f0:	f7ff fe58 	bl	80123a4 <uxr_buffer_submessage_header>
 80126f4:	9904      	ldr	r1, [sp, #16]
 80126f6:	aa07      	add	r2, sp, #28
 80126f8:	4628      	mov	r0, r5
 80126fa:	f7ff fceb 	bl	80120d4 <uxr_init_base_object_request>
 80126fe:	4604      	mov	r4, r0
 8012700:	b318      	cbz	r0, 801274a <uxr_prepare_output_stream_fragmented+0x146>
 8012702:	a907      	add	r1, sp, #28
 8012704:	4630      	mov	r0, r6
 8012706:	f000 ff0d 	bl	8013524 <uxr_serialize_WRITE_DATA_Payload_Data>
 801270a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801270e:	4630      	mov	r0, r6
 8012710:	1a52      	subs	r2, r2, r1
 8012712:	f7fe fabd 	bl	8010c90 <ucdr_init_buffer>
 8012716:	9b05      	ldr	r3, [sp, #20]
 8012718:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801271c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801271e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8012722:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012724:	491b      	ldr	r1, [pc, #108]	; (8012794 <uxr_prepare_output_stream_fragmented+0x190>)
 8012726:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 801272a:	4630      	mov	r0, r6
 801272c:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8012730:	462a      	mov	r2, r5
 8012732:	f7fe fa81 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 8012736:	4620      	mov	r0, r4
 8012738:	b011      	add	sp, #68	; 0x44
 801273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012742:	4628      	mov	r0, r5
 8012744:	4798      	blx	r3
 8012746:	b920      	cbnz	r0, 8012752 <uxr_prepare_output_stream_fragmented+0x14e>
 8012748:	2400      	movs	r4, #0
 801274a:	4620      	mov	r0, r4
 801274c:	b011      	add	sp, #68	; 0x44
 801274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012752:	4620      	mov	r0, r4
 8012754:	f003 ffb0 	bl	80166b8 <get_available_free_slots>
 8012758:	2800      	cmp	r0, #0
 801275a:	f47f af6d 	bne.w	8012638 <uxr_prepare_output_stream_fragmented+0x34>
 801275e:	e7f3      	b.n	8012748 <uxr_prepare_output_stream_fragmented+0x144>
 8012760:	4638      	mov	r0, r7
 8012762:	2101      	movs	r1, #1
 8012764:	f004 f8be 	bl	80168e4 <uxr_seq_num_add>
 8012768:	8921      	ldrh	r1, [r4, #8]
 801276a:	fbb0 f2f1 	udiv	r2, r0, r1
 801276e:	fb01 0912 	mls	r9, r1, r2, r0
 8012772:	fa1f f289 	uxth.w	r2, r9
 8012776:	6863      	ldr	r3, [r4, #4]
 8012778:	fbb3 f9f1 	udiv	r9, r3, r1
 801277c:	6823      	ldr	r3, [r4, #0]
 801277e:	fb02 f909 	mul.w	r9, r2, r9
 8012782:	f109 0904 	add.w	r9, r9, #4
 8012786:	4499      	add	r9, r3
 8012788:	4607      	mov	r7, r0
 801278a:	7b23      	ldrb	r3, [r4, #12]
 801278c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012790:	e76b      	b.n	801266a <uxr_prepare_output_stream_fragmented+0x66>
 8012792:	bf00      	nop
 8012794:	08012491 	.word	0x08012491

08012798 <uxr_serialize_message_header>:
 8012798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801279a:	b083      	sub	sp, #12
 801279c:	4616      	mov	r6, r2
 801279e:	4604      	mov	r4, r0
 80127a0:	9301      	str	r3, [sp, #4]
 80127a2:	460d      	mov	r5, r1
 80127a4:	9f08      	ldr	r7, [sp, #32]
 80127a6:	f7fd fac7 	bl	800fd38 <ucdr_serialize_uint8_t>
 80127aa:	4631      	mov	r1, r6
 80127ac:	4620      	mov	r0, r4
 80127ae:	f7fd fac3 	bl	800fd38 <ucdr_serialize_uint8_t>
 80127b2:	9a01      	ldr	r2, [sp, #4]
 80127b4:	2101      	movs	r1, #1
 80127b6:	4620      	mov	r0, r4
 80127b8:	f7fd fb6a 	bl	800fe90 <ucdr_serialize_endian_uint16_t>
 80127bc:	062b      	lsls	r3, r5, #24
 80127be:	d501      	bpl.n	80127c4 <uxr_serialize_message_header+0x2c>
 80127c0:	b003      	add	sp, #12
 80127c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127c4:	2204      	movs	r2, #4
 80127c6:	4639      	mov	r1, r7
 80127c8:	4620      	mov	r0, r4
 80127ca:	b003      	add	sp, #12
 80127cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80127d0:	f003 b850 	b.w	8015874 <ucdr_serialize_array_uint8_t>

080127d4 <uxr_deserialize_message_header>:
 80127d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127d6:	b083      	sub	sp, #12
 80127d8:	4616      	mov	r6, r2
 80127da:	4604      	mov	r4, r0
 80127dc:	9301      	str	r3, [sp, #4]
 80127de:	460d      	mov	r5, r1
 80127e0:	9f08      	ldr	r7, [sp, #32]
 80127e2:	f7fd fabf 	bl	800fd64 <ucdr_deserialize_uint8_t>
 80127e6:	4631      	mov	r1, r6
 80127e8:	4620      	mov	r0, r4
 80127ea:	f7fd fabb 	bl	800fd64 <ucdr_deserialize_uint8_t>
 80127ee:	9a01      	ldr	r2, [sp, #4]
 80127f0:	2101      	movs	r1, #1
 80127f2:	4620      	mov	r0, r4
 80127f4:	f7fd fc40 	bl	8010078 <ucdr_deserialize_endian_uint16_t>
 80127f8:	f995 3000 	ldrsb.w	r3, [r5]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	da01      	bge.n	8012804 <uxr_deserialize_message_header+0x30>
 8012800:	b003      	add	sp, #12
 8012802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012804:	2204      	movs	r2, #4
 8012806:	4639      	mov	r1, r7
 8012808:	4620      	mov	r0, r4
 801280a:	b003      	add	sp, #12
 801280c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012810:	f003 b894 	b.w	801593c <ucdr_deserialize_array_uint8_t>

08012814 <uxr_serialize_submessage_header>:
 8012814:	b530      	push	{r4, r5, lr}
 8012816:	b083      	sub	sp, #12
 8012818:	4615      	mov	r5, r2
 801281a:	4604      	mov	r4, r0
 801281c:	9301      	str	r3, [sp, #4]
 801281e:	f7fd fa8b 	bl	800fd38 <ucdr_serialize_uint8_t>
 8012822:	4629      	mov	r1, r5
 8012824:	4620      	mov	r0, r4
 8012826:	f7fd fa87 	bl	800fd38 <ucdr_serialize_uint8_t>
 801282a:	9a01      	ldr	r2, [sp, #4]
 801282c:	2101      	movs	r1, #1
 801282e:	4620      	mov	r0, r4
 8012830:	b003      	add	sp, #12
 8012832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012836:	f7fd bb2b 	b.w	800fe90 <ucdr_serialize_endian_uint16_t>
 801283a:	bf00      	nop

0801283c <uxr_deserialize_submessage_header>:
 801283c:	b530      	push	{r4, r5, lr}
 801283e:	b083      	sub	sp, #12
 8012840:	4615      	mov	r5, r2
 8012842:	4604      	mov	r4, r0
 8012844:	9301      	str	r3, [sp, #4]
 8012846:	f7fd fa8d 	bl	800fd64 <ucdr_deserialize_uint8_t>
 801284a:	4629      	mov	r1, r5
 801284c:	4620      	mov	r0, r4
 801284e:	f7fd fa89 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8012852:	9a01      	ldr	r2, [sp, #4]
 8012854:	2101      	movs	r1, #1
 8012856:	4620      	mov	r0, r4
 8012858:	b003      	add	sp, #12
 801285a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801285e:	f7fd bc0b 	b.w	8010078 <ucdr_deserialize_endian_uint16_t>
 8012862:	bf00      	nop

08012864 <uxr_serialize_CLIENT_Representation>:
 8012864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012868:	2204      	movs	r2, #4
 801286a:	460e      	mov	r6, r1
 801286c:	4605      	mov	r5, r0
 801286e:	f003 f801 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8012872:	2202      	movs	r2, #2
 8012874:	4607      	mov	r7, r0
 8012876:	1d31      	adds	r1, r6, #4
 8012878:	4628      	mov	r0, r5
 801287a:	f002 fffb 	bl	8015874 <ucdr_serialize_array_uint8_t>
 801287e:	4038      	ands	r0, r7
 8012880:	2202      	movs	r2, #2
 8012882:	1db1      	adds	r1, r6, #6
 8012884:	b2c7      	uxtb	r7, r0
 8012886:	4628      	mov	r0, r5
 8012888:	f002 fff4 	bl	8015874 <ucdr_serialize_array_uint8_t>
 801288c:	2204      	movs	r2, #4
 801288e:	4007      	ands	r7, r0
 8012890:	f106 0108 	add.w	r1, r6, #8
 8012894:	4628      	mov	r0, r5
 8012896:	f002 ffed 	bl	8015874 <ucdr_serialize_array_uint8_t>
 801289a:	7b31      	ldrb	r1, [r6, #12]
 801289c:	4007      	ands	r7, r0
 801289e:	4628      	mov	r0, r5
 80128a0:	f7fd fa4a 	bl	800fd38 <ucdr_serialize_uint8_t>
 80128a4:	7b71      	ldrb	r1, [r6, #13]
 80128a6:	4007      	ands	r7, r0
 80128a8:	4628      	mov	r0, r5
 80128aa:	f7fd fa17 	bl	800fcdc <ucdr_serialize_bool>
 80128ae:	7b73      	ldrb	r3, [r6, #13]
 80128b0:	ea07 0800 	and.w	r8, r7, r0
 80128b4:	b93b      	cbnz	r3, 80128c6 <uxr_serialize_CLIENT_Representation+0x62>
 80128b6:	8bb1      	ldrh	r1, [r6, #28]
 80128b8:	4628      	mov	r0, r5
 80128ba:	f7fd fa69 	bl	800fd90 <ucdr_serialize_uint16_t>
 80128be:	ea08 0000 	and.w	r0, r8, r0
 80128c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128c6:	6931      	ldr	r1, [r6, #16]
 80128c8:	4628      	mov	r0, r5
 80128ca:	f7fd fc4b 	bl	8010164 <ucdr_serialize_uint32_t>
 80128ce:	6933      	ldr	r3, [r6, #16]
 80128d0:	b1e3      	cbz	r3, 801290c <uxr_serialize_CLIENT_Representation+0xa8>
 80128d2:	b1c0      	cbz	r0, 8012906 <uxr_serialize_CLIENT_Representation+0xa2>
 80128d4:	4637      	mov	r7, r6
 80128d6:	f04f 0900 	mov.w	r9, #0
 80128da:	e001      	b.n	80128e0 <uxr_serialize_CLIENT_Representation+0x7c>
 80128dc:	3708      	adds	r7, #8
 80128de:	b194      	cbz	r4, 8012906 <uxr_serialize_CLIENT_Representation+0xa2>
 80128e0:	6979      	ldr	r1, [r7, #20]
 80128e2:	4628      	mov	r0, r5
 80128e4:	f003 f8e6 	bl	8015ab4 <ucdr_serialize_string>
 80128e8:	69b9      	ldr	r1, [r7, #24]
 80128ea:	4604      	mov	r4, r0
 80128ec:	4628      	mov	r0, r5
 80128ee:	f003 f8e1 	bl	8015ab4 <ucdr_serialize_string>
 80128f2:	6933      	ldr	r3, [r6, #16]
 80128f4:	f109 0901 	add.w	r9, r9, #1
 80128f8:	4004      	ands	r4, r0
 80128fa:	4599      	cmp	r9, r3
 80128fc:	b2e4      	uxtb	r4, r4
 80128fe:	d3ed      	bcc.n	80128dc <uxr_serialize_CLIENT_Representation+0x78>
 8012900:	ea08 0804 	and.w	r8, r8, r4
 8012904:	e7d7      	b.n	80128b6 <uxr_serialize_CLIENT_Representation+0x52>
 8012906:	f04f 0800 	mov.w	r8, #0
 801290a:	e7d4      	b.n	80128b6 <uxr_serialize_CLIENT_Representation+0x52>
 801290c:	ea08 0800 	and.w	r8, r8, r0
 8012910:	e7d1      	b.n	80128b6 <uxr_serialize_CLIENT_Representation+0x52>
 8012912:	bf00      	nop

08012914 <uxr_deserialize_CLIENT_Representation>:
 8012914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012918:	2204      	movs	r2, #4
 801291a:	460c      	mov	r4, r1
 801291c:	4605      	mov	r5, r0
 801291e:	f003 f80d 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8012922:	2202      	movs	r2, #2
 8012924:	4607      	mov	r7, r0
 8012926:	1d21      	adds	r1, r4, #4
 8012928:	4628      	mov	r0, r5
 801292a:	f003 f807 	bl	801593c <ucdr_deserialize_array_uint8_t>
 801292e:	4038      	ands	r0, r7
 8012930:	2202      	movs	r2, #2
 8012932:	1da1      	adds	r1, r4, #6
 8012934:	b2c6      	uxtb	r6, r0
 8012936:	4628      	mov	r0, r5
 8012938:	f003 f800 	bl	801593c <ucdr_deserialize_array_uint8_t>
 801293c:	2204      	movs	r2, #4
 801293e:	4006      	ands	r6, r0
 8012940:	f104 0108 	add.w	r1, r4, #8
 8012944:	4628      	mov	r0, r5
 8012946:	f002 fff9 	bl	801593c <ucdr_deserialize_array_uint8_t>
 801294a:	f104 010c 	add.w	r1, r4, #12
 801294e:	4006      	ands	r6, r0
 8012950:	4628      	mov	r0, r5
 8012952:	f7fd fa07 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8012956:	f104 010d 	add.w	r1, r4, #13
 801295a:	ea06 0700 	and.w	r7, r6, r0
 801295e:	4628      	mov	r0, r5
 8012960:	f7fd f9d2 	bl	800fd08 <ucdr_deserialize_bool>
 8012964:	7b63      	ldrb	r3, [r4, #13]
 8012966:	4007      	ands	r7, r0
 8012968:	b93b      	cbnz	r3, 801297a <uxr_deserialize_CLIENT_Representation+0x66>
 801296a:	f104 011c 	add.w	r1, r4, #28
 801296e:	4628      	mov	r0, r5
 8012970:	f7fd fb0e 	bl	800ff90 <ucdr_deserialize_uint16_t>
 8012974:	4038      	ands	r0, r7
 8012976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801297a:	f104 0110 	add.w	r1, r4, #16
 801297e:	4628      	mov	r0, r5
 8012980:	f7fd fd20 	bl	80103c4 <ucdr_deserialize_uint32_t>
 8012984:	6923      	ldr	r3, [r4, #16]
 8012986:	2b01      	cmp	r3, #1
 8012988:	d903      	bls.n	8012992 <uxr_deserialize_CLIENT_Representation+0x7e>
 801298a:	2301      	movs	r3, #1
 801298c:	75ab      	strb	r3, [r5, #22]
 801298e:	2700      	movs	r7, #0
 8012990:	e7eb      	b.n	801296a <uxr_deserialize_CLIENT_Representation+0x56>
 8012992:	b30b      	cbz	r3, 80129d8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012994:	2800      	cmp	r0, #0
 8012996:	d0fa      	beq.n	801298e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012998:	46a0      	mov	r8, r4
 801299a:	f04f 0900 	mov.w	r9, #0
 801299e:	e001      	b.n	80129a4 <uxr_deserialize_CLIENT_Representation+0x90>
 80129a0:	2e00      	cmp	r6, #0
 80129a2:	d0f4      	beq.n	801298e <uxr_deserialize_CLIENT_Representation+0x7a>
 80129a4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80129a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129ac:	4628      	mov	r0, r5
 80129ae:	f003 f891 	bl	8015ad4 <ucdr_deserialize_string>
 80129b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129b6:	4606      	mov	r6, r0
 80129b8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80129bc:	4628      	mov	r0, r5
 80129be:	f003 f889 	bl	8015ad4 <ucdr_deserialize_string>
 80129c2:	6923      	ldr	r3, [r4, #16]
 80129c4:	f109 0901 	add.w	r9, r9, #1
 80129c8:	4006      	ands	r6, r0
 80129ca:	4599      	cmp	r9, r3
 80129cc:	f108 0808 	add.w	r8, r8, #8
 80129d0:	b2f6      	uxtb	r6, r6
 80129d2:	d3e5      	bcc.n	80129a0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80129d4:	4037      	ands	r7, r6
 80129d6:	e7c8      	b.n	801296a <uxr_deserialize_CLIENT_Representation+0x56>
 80129d8:	4007      	ands	r7, r0
 80129da:	e7c6      	b.n	801296a <uxr_deserialize_CLIENT_Representation+0x56>

080129dc <uxr_serialize_AGENT_Representation>:
 80129dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129e0:	2204      	movs	r2, #4
 80129e2:	460f      	mov	r7, r1
 80129e4:	4605      	mov	r5, r0
 80129e6:	f002 ff45 	bl	8015874 <ucdr_serialize_array_uint8_t>
 80129ea:	2202      	movs	r2, #2
 80129ec:	4604      	mov	r4, r0
 80129ee:	1d39      	adds	r1, r7, #4
 80129f0:	4628      	mov	r0, r5
 80129f2:	f002 ff3f 	bl	8015874 <ucdr_serialize_array_uint8_t>
 80129f6:	4020      	ands	r0, r4
 80129f8:	2202      	movs	r2, #2
 80129fa:	1db9      	adds	r1, r7, #6
 80129fc:	b2c4      	uxtb	r4, r0
 80129fe:	4628      	mov	r0, r5
 8012a00:	f002 ff38 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8012a04:	7a39      	ldrb	r1, [r7, #8]
 8012a06:	4004      	ands	r4, r0
 8012a08:	4628      	mov	r0, r5
 8012a0a:	f7fd f967 	bl	800fcdc <ucdr_serialize_bool>
 8012a0e:	7a3b      	ldrb	r3, [r7, #8]
 8012a10:	ea00 0804 	and.w	r8, r0, r4
 8012a14:	b913      	cbnz	r3, 8012a1c <uxr_serialize_AGENT_Representation+0x40>
 8012a16:	4640      	mov	r0, r8
 8012a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a1c:	68f9      	ldr	r1, [r7, #12]
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f7fd fba0 	bl	8010164 <ucdr_serialize_uint32_t>
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	b303      	cbz	r3, 8012a6a <uxr_serialize_AGENT_Representation+0x8e>
 8012a28:	b1d0      	cbz	r0, 8012a60 <uxr_serialize_AGENT_Representation+0x84>
 8012a2a:	463e      	mov	r6, r7
 8012a2c:	f04f 0900 	mov.w	r9, #0
 8012a30:	e001      	b.n	8012a36 <uxr_serialize_AGENT_Representation+0x5a>
 8012a32:	3608      	adds	r6, #8
 8012a34:	b1a4      	cbz	r4, 8012a60 <uxr_serialize_AGENT_Representation+0x84>
 8012a36:	6931      	ldr	r1, [r6, #16]
 8012a38:	4628      	mov	r0, r5
 8012a3a:	f003 f83b 	bl	8015ab4 <ucdr_serialize_string>
 8012a3e:	6971      	ldr	r1, [r6, #20]
 8012a40:	4604      	mov	r4, r0
 8012a42:	4628      	mov	r0, r5
 8012a44:	f003 f836 	bl	8015ab4 <ucdr_serialize_string>
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f109 0901 	add.w	r9, r9, #1
 8012a4e:	4004      	ands	r4, r0
 8012a50:	4599      	cmp	r9, r3
 8012a52:	b2e4      	uxtb	r4, r4
 8012a54:	d3ed      	bcc.n	8012a32 <uxr_serialize_AGENT_Representation+0x56>
 8012a56:	ea08 0804 	and.w	r8, r8, r4
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a60:	f04f 0800 	mov.w	r8, #0
 8012a64:	4640      	mov	r0, r8
 8012a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a6a:	ea08 0800 	and.w	r8, r8, r0
 8012a6e:	e7d2      	b.n	8012a16 <uxr_serialize_AGENT_Representation+0x3a>

08012a70 <uxr_serialize_DATAWRITER_Representation>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	460d      	mov	r5, r1
 8012a74:	7809      	ldrb	r1, [r1, #0]
 8012a76:	4606      	mov	r6, r0
 8012a78:	f7fd f95e 	bl	800fd38 <ucdr_serialize_uint8_t>
 8012a7c:	4604      	mov	r4, r0
 8012a7e:	b130      	cbz	r0, 8012a8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012a80:	782b      	ldrb	r3, [r5, #0]
 8012a82:	2b02      	cmp	r3, #2
 8012a84:	d00c      	beq.n	8012aa0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012a86:	2b03      	cmp	r3, #3
 8012a88:	d010      	beq.n	8012aac <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d008      	beq.n	8012aa0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012a8e:	2202      	movs	r2, #2
 8012a90:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8012a94:	4630      	mov	r0, r6
 8012a96:	f002 feed 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8012a9a:	4020      	ands	r0, r4
 8012a9c:	b2c0      	uxtb	r0, r0
 8012a9e:	bd70      	pop	{r4, r5, r6, pc}
 8012aa0:	6869      	ldr	r1, [r5, #4]
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	f003 f806 	bl	8015ab4 <ucdr_serialize_string>
 8012aa8:	4604      	mov	r4, r0
 8012aaa:	e7f0      	b.n	8012a8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012aac:	4629      	mov	r1, r5
 8012aae:	4630      	mov	r0, r6
 8012ab0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012ab4:	3104      	adds	r1, #4
 8012ab6:	f002 ffd1 	bl	8015a5c <ucdr_serialize_sequence_uint8_t>
 8012aba:	4604      	mov	r4, r0
 8012abc:	e7e7      	b.n	8012a8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012abe:	bf00      	nop

08012ac0 <uxr_serialize_ObjectVariant.part.0>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	780b      	ldrb	r3, [r1, #0]
 8012ac4:	3b01      	subs	r3, #1
 8012ac6:	460c      	mov	r4, r1
 8012ac8:	4605      	mov	r5, r0
 8012aca:	2b0d      	cmp	r3, #13
 8012acc:	d854      	bhi.n	8012b78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012ace:	e8df f003 	tbb	[pc, r3]
 8012ad2:	0730      	.short	0x0730
 8012ad4:	07071b1b 	.word	0x07071b1b
 8012ad8:	0c530707 	.word	0x0c530707
 8012adc:	494e0c0c 	.word	0x494e0c0c
 8012ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ae4:	3104      	adds	r1, #4
 8012ae6:	f7ff bfc3 	b.w	8012a70 <uxr_serialize_DATAWRITER_Representation>
 8012aea:	7909      	ldrb	r1, [r1, #4]
 8012aec:	f7fd f924 	bl	800fd38 <ucdr_serialize_uint8_t>
 8012af0:	b1e8      	cbz	r0, 8012b2e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012af2:	7923      	ldrb	r3, [r4, #4]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d001      	beq.n	8012afc <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012af8:	2b02      	cmp	r3, #2
 8012afa:	d13d      	bne.n	8012b78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012afc:	68a1      	ldr	r1, [r4, #8]
 8012afe:	4628      	mov	r0, r5
 8012b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b04:	f002 bfd6 	b.w	8015ab4 <ucdr_serialize_string>
 8012b08:	7909      	ldrb	r1, [r1, #4]
 8012b0a:	f7fd f915 	bl	800fd38 <ucdr_serialize_uint8_t>
 8012b0e:	4606      	mov	r6, r0
 8012b10:	b120      	cbz	r0, 8012b1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012b12:	7923      	ldrb	r3, [r4, #4]
 8012b14:	2b02      	cmp	r3, #2
 8012b16:	d039      	beq.n	8012b8c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012b18:	2b03      	cmp	r3, #3
 8012b1a:	d02f      	beq.n	8012b7c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012b1c:	2202      	movs	r2, #2
 8012b1e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8012b22:	4628      	mov	r0, r5
 8012b24:	f002 fea6 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8012b28:	4030      	ands	r0, r6
 8012b2a:	b2c0      	uxtb	r0, r0
 8012b2c:	bd70      	pop	{r4, r5, r6, pc}
 8012b2e:	2000      	movs	r0, #0
 8012b30:	bd70      	pop	{r4, r5, r6, pc}
 8012b32:	7909      	ldrb	r1, [r1, #4]
 8012b34:	f7fd f900 	bl	800fd38 <ucdr_serialize_uint8_t>
 8012b38:	4606      	mov	r6, r0
 8012b3a:	b158      	cbz	r0, 8012b54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012b3c:	7923      	ldrb	r3, [r4, #4]
 8012b3e:	2b02      	cmp	r3, #2
 8012b40:	d003      	beq.n	8012b4a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012b42:	2b03      	cmp	r3, #3
 8012b44:	d028      	beq.n	8012b98 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	d104      	bne.n	8012b54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012b4a:	68a1      	ldr	r1, [r4, #8]
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	f002 ffb1 	bl	8015ab4 <ucdr_serialize_string>
 8012b52:	4606      	mov	r6, r0
 8012b54:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8012b58:	4628      	mov	r0, r5
 8012b5a:	f7fd fe29 	bl	80107b0 <ucdr_serialize_int16_t>
 8012b5e:	4030      	ands	r0, r6
 8012b60:	b2c0      	uxtb	r0, r0
 8012b62:	bd70      	pop	{r4, r5, r6, pc}
 8012b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b68:	3104      	adds	r1, #4
 8012b6a:	f7ff be7b 	b.w	8012864 <uxr_serialize_CLIENT_Representation>
 8012b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b72:	3104      	adds	r1, #4
 8012b74:	f7ff bf32 	b.w	80129dc <uxr_serialize_AGENT_Representation>
 8012b78:	2001      	movs	r0, #1
 8012b7a:	bd70      	pop	{r4, r5, r6, pc}
 8012b7c:	68a2      	ldr	r2, [r4, #8]
 8012b7e:	f104 010c 	add.w	r1, r4, #12
 8012b82:	4628      	mov	r0, r5
 8012b84:	f002 ff6a 	bl	8015a5c <ucdr_serialize_sequence_uint8_t>
 8012b88:	4606      	mov	r6, r0
 8012b8a:	e7c7      	b.n	8012b1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012b8c:	68a1      	ldr	r1, [r4, #8]
 8012b8e:	4628      	mov	r0, r5
 8012b90:	f002 ff90 	bl	8015ab4 <ucdr_serialize_string>
 8012b94:	4606      	mov	r6, r0
 8012b96:	e7c1      	b.n	8012b1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012b98:	68a2      	ldr	r2, [r4, #8]
 8012b9a:	f104 010c 	add.w	r1, r4, #12
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	f002 ff5c 	bl	8015a5c <ucdr_serialize_sequence_uint8_t>
 8012ba4:	4606      	mov	r6, r0
 8012ba6:	e7d5      	b.n	8012b54 <uxr_serialize_ObjectVariant.part.0+0x94>

08012ba8 <uxr_deserialize_DATAWRITER_Representation>:
 8012ba8:	b570      	push	{r4, r5, r6, lr}
 8012baa:	4606      	mov	r6, r0
 8012bac:	460d      	mov	r5, r1
 8012bae:	f7fd f8d9 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	b130      	cbz	r0, 8012bc4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012bb6:	782b      	ldrb	r3, [r5, #0]
 8012bb8:	2b02      	cmp	r3, #2
 8012bba:	d00c      	beq.n	8012bd6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012bbc:	2b03      	cmp	r3, #3
 8012bbe:	d012      	beq.n	8012be6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d008      	beq.n	8012bd6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012bc4:	2202      	movs	r2, #2
 8012bc6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8012bca:	4630      	mov	r0, r6
 8012bcc:	f002 feb6 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8012bd0:	4020      	ands	r0, r4
 8012bd2:	b2c0      	uxtb	r0, r0
 8012bd4:	bd70      	pop	{r4, r5, r6, pc}
 8012bd6:	6869      	ldr	r1, [r5, #4]
 8012bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bdc:	4630      	mov	r0, r6
 8012bde:	f002 ff79 	bl	8015ad4 <ucdr_deserialize_string>
 8012be2:	4604      	mov	r4, r0
 8012be4:	e7ee      	b.n	8012bc4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012be6:	1d2b      	adds	r3, r5, #4
 8012be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bec:	f105 0108 	add.w	r1, r5, #8
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	f002 ff45 	bl	8015a80 <ucdr_deserialize_sequence_uint8_t>
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	e7e4      	b.n	8012bc4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012bfa:	bf00      	nop

08012bfc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	460d      	mov	r5, r1
 8012c00:	7809      	ldrb	r1, [r1, #0]
 8012c02:	4606      	mov	r6, r0
 8012c04:	f7fd f86a 	bl	800fcdc <ucdr_serialize_bool>
 8012c08:	782b      	ldrb	r3, [r5, #0]
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	b94b      	cbnz	r3, 8012c22 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012c0e:	7a29      	ldrb	r1, [r5, #8]
 8012c10:	4630      	mov	r0, r6
 8012c12:	f7fd f863 	bl	800fcdc <ucdr_serialize_bool>
 8012c16:	7a2b      	ldrb	r3, [r5, #8]
 8012c18:	4004      	ands	r4, r0
 8012c1a:	b2e4      	uxtb	r4, r4
 8012c1c:	b943      	cbnz	r3, 8012c30 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012c1e:	4620      	mov	r0, r4
 8012c20:	bd70      	pop	{r4, r5, r6, pc}
 8012c22:	6869      	ldr	r1, [r5, #4]
 8012c24:	4630      	mov	r0, r6
 8012c26:	f002 ff45 	bl	8015ab4 <ucdr_serialize_string>
 8012c2a:	4004      	ands	r4, r0
 8012c2c:	b2e4      	uxtb	r4, r4
 8012c2e:	e7ee      	b.n	8012c0e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012c30:	68e9      	ldr	r1, [r5, #12]
 8012c32:	4630      	mov	r0, r6
 8012c34:	f002 ff3e 	bl	8015ab4 <ucdr_serialize_string>
 8012c38:	4004      	ands	r4, r0
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	bd70      	pop	{r4, r5, r6, pc}
 8012c3e:	bf00      	nop

08012c40 <uxr_serialize_OBJK_Topic_Binary>:
 8012c40:	b570      	push	{r4, r5, r6, lr}
 8012c42:	460d      	mov	r5, r1
 8012c44:	6809      	ldr	r1, [r1, #0]
 8012c46:	4606      	mov	r6, r0
 8012c48:	f002 ff34 	bl	8015ab4 <ucdr_serialize_string>
 8012c4c:	7929      	ldrb	r1, [r5, #4]
 8012c4e:	4604      	mov	r4, r0
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7fd f843 	bl	800fcdc <ucdr_serialize_bool>
 8012c56:	792b      	ldrb	r3, [r5, #4]
 8012c58:	4004      	ands	r4, r0
 8012c5a:	b2e4      	uxtb	r4, r4
 8012c5c:	b943      	cbnz	r3, 8012c70 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012c5e:	7b29      	ldrb	r1, [r5, #12]
 8012c60:	4630      	mov	r0, r6
 8012c62:	f7fd f83b 	bl	800fcdc <ucdr_serialize_bool>
 8012c66:	7b2b      	ldrb	r3, [r5, #12]
 8012c68:	4004      	ands	r4, r0
 8012c6a:	b93b      	cbnz	r3, 8012c7c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	bd70      	pop	{r4, r5, r6, pc}
 8012c70:	68a9      	ldr	r1, [r5, #8]
 8012c72:	4630      	mov	r0, r6
 8012c74:	f002 ff1e 	bl	8015ab4 <ucdr_serialize_string>
 8012c78:	4004      	ands	r4, r0
 8012c7a:	e7f0      	b.n	8012c5e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012c7c:	6929      	ldr	r1, [r5, #16]
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f002 ff18 	bl	8015ab4 <ucdr_serialize_string>
 8012c84:	4004      	ands	r4, r0
 8012c86:	b2e4      	uxtb	r4, r4
 8012c88:	4620      	mov	r0, r4
 8012c8a:	bd70      	pop	{r4, r5, r6, pc}

08012c8c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c90:	460c      	mov	r4, r1
 8012c92:	7809      	ldrb	r1, [r1, #0]
 8012c94:	4606      	mov	r6, r0
 8012c96:	f7fd f821 	bl	800fcdc <ucdr_serialize_bool>
 8012c9a:	7823      	ldrb	r3, [r4, #0]
 8012c9c:	4605      	mov	r5, r0
 8012c9e:	b96b      	cbnz	r3, 8012cbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012ca0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f7fd f819 	bl	800fcdc <ucdr_serialize_bool>
 8012caa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012cae:	4005      	ands	r5, r0
 8012cb0:	b2ed      	uxtb	r5, r5
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d169      	bne.n	8012d8a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cbc:	6861      	ldr	r1, [r4, #4]
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7fd fa50 	bl	8010164 <ucdr_serialize_uint32_t>
 8012cc4:	6863      	ldr	r3, [r4, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d06b      	beq.n	8012da2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	d067      	beq.n	8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012cce:	68a1      	ldr	r1, [r4, #8]
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	f002 feef 	bl	8015ab4 <ucdr_serialize_string>
 8012cd6:	6863      	ldr	r3, [r4, #4]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d953      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d05e      	beq.n	8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ce0:	68e1      	ldr	r1, [r4, #12]
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f002 fee6 	bl	8015ab4 <ucdr_serialize_string>
 8012ce8:	6863      	ldr	r3, [r4, #4]
 8012cea:	2b02      	cmp	r3, #2
 8012cec:	d94a      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d055      	beq.n	8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012cf2:	6921      	ldr	r1, [r4, #16]
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f002 fedd 	bl	8015ab4 <ucdr_serialize_string>
 8012cfa:	6863      	ldr	r3, [r4, #4]
 8012cfc:	2b03      	cmp	r3, #3
 8012cfe:	d941      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d04c      	beq.n	8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d04:	6961      	ldr	r1, [r4, #20]
 8012d06:	4630      	mov	r0, r6
 8012d08:	f002 fed4 	bl	8015ab4 <ucdr_serialize_string>
 8012d0c:	6863      	ldr	r3, [r4, #4]
 8012d0e:	2b04      	cmp	r3, #4
 8012d10:	d938      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	d043      	beq.n	8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d16:	69a1      	ldr	r1, [r4, #24]
 8012d18:	4630      	mov	r0, r6
 8012d1a:	f002 fecb 	bl	8015ab4 <ucdr_serialize_string>
 8012d1e:	6863      	ldr	r3, [r4, #4]
 8012d20:	2b05      	cmp	r3, #5
 8012d22:	d92f      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012d24:	2800      	cmp	r0, #0
 8012d26:	d03a      	beq.n	8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d28:	69e1      	ldr	r1, [r4, #28]
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	f002 fec2 	bl	8015ab4 <ucdr_serialize_string>
 8012d30:	6863      	ldr	r3, [r4, #4]
 8012d32:	2b06      	cmp	r3, #6
 8012d34:	d926      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012d36:	b390      	cbz	r0, 8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d38:	6a21      	ldr	r1, [r4, #32]
 8012d3a:	4630      	mov	r0, r6
 8012d3c:	f002 feba 	bl	8015ab4 <ucdr_serialize_string>
 8012d40:	6863      	ldr	r3, [r4, #4]
 8012d42:	2b07      	cmp	r3, #7
 8012d44:	d91e      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012d46:	b350      	cbz	r0, 8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	f002 feb2 	bl	8015ab4 <ucdr_serialize_string>
 8012d50:	6863      	ldr	r3, [r4, #4]
 8012d52:	2b08      	cmp	r3, #8
 8012d54:	d916      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012d56:	b310      	cbz	r0, 8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d58:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f002 feaa 	bl	8015ab4 <ucdr_serialize_string>
 8012d60:	6863      	ldr	r3, [r4, #4]
 8012d62:	2b09      	cmp	r3, #9
 8012d64:	d90e      	bls.n	8012d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012d66:	b1d0      	cbz	r0, 8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d68:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012d6c:	2709      	movs	r7, #9
 8012d6e:	e000      	b.n	8012d72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012d70:	b1a8      	cbz	r0, 8012d9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012d72:	f858 1b04 	ldr.w	r1, [r8], #4
 8012d76:	4630      	mov	r0, r6
 8012d78:	f002 fe9c 	bl	8015ab4 <ucdr_serialize_string>
 8012d7c:	6862      	ldr	r2, [r4, #4]
 8012d7e:	3701      	adds	r7, #1
 8012d80:	4297      	cmp	r7, r2
 8012d82:	d3f5      	bcc.n	8012d70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012d84:	4005      	ands	r5, r0
 8012d86:	b2ed      	uxtb	r5, r5
 8012d88:	e78a      	b.n	8012ca0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012d8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012d8c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012d90:	4630      	mov	r0, r6
 8012d92:	f002 fe63 	bl	8015a5c <ucdr_serialize_sequence_uint8_t>
 8012d96:	4005      	ands	r5, r0
 8012d98:	4628      	mov	r0, r5
 8012d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d9e:	2500      	movs	r5, #0
 8012da0:	e77e      	b.n	8012ca0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012da2:	4028      	ands	r0, r5
 8012da4:	b2c5      	uxtb	r5, r0
 8012da6:	e77b      	b.n	8012ca0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012da8 <uxr_serialize_OBJK_Publisher_Binary>:
 8012da8:	b570      	push	{r4, r5, r6, lr}
 8012daa:	460d      	mov	r5, r1
 8012dac:	7809      	ldrb	r1, [r1, #0]
 8012dae:	4606      	mov	r6, r0
 8012db0:	f7fc ff94 	bl	800fcdc <ucdr_serialize_bool>
 8012db4:	782b      	ldrb	r3, [r5, #0]
 8012db6:	4604      	mov	r4, r0
 8012db8:	b94b      	cbnz	r3, 8012dce <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012dba:	7a29      	ldrb	r1, [r5, #8]
 8012dbc:	4630      	mov	r0, r6
 8012dbe:	f7fc ff8d 	bl	800fcdc <ucdr_serialize_bool>
 8012dc2:	7a2b      	ldrb	r3, [r5, #8]
 8012dc4:	4004      	ands	r4, r0
 8012dc6:	b2e4      	uxtb	r4, r4
 8012dc8:	b943      	cbnz	r3, 8012ddc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012dca:	4620      	mov	r0, r4
 8012dcc:	bd70      	pop	{r4, r5, r6, pc}
 8012dce:	6869      	ldr	r1, [r5, #4]
 8012dd0:	4630      	mov	r0, r6
 8012dd2:	f002 fe6f 	bl	8015ab4 <ucdr_serialize_string>
 8012dd6:	4004      	ands	r4, r0
 8012dd8:	b2e4      	uxtb	r4, r4
 8012dda:	e7ee      	b.n	8012dba <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012ddc:	f105 010c 	add.w	r1, r5, #12
 8012de0:	4630      	mov	r0, r6
 8012de2:	f7ff ff53 	bl	8012c8c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012de6:	4004      	ands	r4, r0
 8012de8:	4620      	mov	r0, r4
 8012dea:	bd70      	pop	{r4, r5, r6, pc}

08012dec <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012dec:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012df0:	4688      	mov	r8, r1
 8012df2:	8809      	ldrh	r1, [r1, #0]
 8012df4:	4681      	mov	r9, r0
 8012df6:	f7fc ffcb 	bl	800fd90 <ucdr_serialize_uint16_t>
 8012dfa:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012dfe:	4606      	mov	r6, r0
 8012e00:	4648      	mov	r0, r9
 8012e02:	f7fc ff6b 	bl	800fcdc <ucdr_serialize_bool>
 8012e06:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012e0a:	4006      	ands	r6, r0
 8012e0c:	b2f5      	uxtb	r5, r6
 8012e0e:	b9eb      	cbnz	r3, 8012e4c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012e10:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012e14:	4648      	mov	r0, r9
 8012e16:	f7fc ff61 	bl	800fcdc <ucdr_serialize_bool>
 8012e1a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012e1e:	4005      	ands	r5, r0
 8012e20:	bb7b      	cbnz	r3, 8012e82 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012e22:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012e26:	4648      	mov	r0, r9
 8012e28:	f7fc ff58 	bl	800fcdc <ucdr_serialize_bool>
 8012e2c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012e30:	4005      	ands	r5, r0
 8012e32:	b9f3      	cbnz	r3, 8012e72 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012e34:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012e38:	4648      	mov	r0, r9
 8012e3a:	f7fc ff4f 	bl	800fcdc <ucdr_serialize_bool>
 8012e3e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012e42:	4005      	ands	r5, r0
 8012e44:	b94b      	cbnz	r3, 8012e5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012e46:	4628      	mov	r0, r5
 8012e48:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012e4c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012e50:	4648      	mov	r0, r9
 8012e52:	f7fc ff9d 	bl	800fd90 <ucdr_serialize_uint16_t>
 8012e56:	4005      	ands	r5, r0
 8012e58:	e7da      	b.n	8012e10 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012e5a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012e5e:	f108 011c 	add.w	r1, r8, #28
 8012e62:	4648      	mov	r0, r9
 8012e64:	f002 fdfa 	bl	8015a5c <ucdr_serialize_sequence_uint8_t>
 8012e68:	4028      	ands	r0, r5
 8012e6a:	b2c5      	uxtb	r5, r0
 8012e6c:	4628      	mov	r0, r5
 8012e6e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012e72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012e76:	4648      	mov	r0, r9
 8012e78:	f7fd f974 	bl	8010164 <ucdr_serialize_uint32_t>
 8012e7c:	4028      	ands	r0, r5
 8012e7e:	b2c5      	uxtb	r5, r0
 8012e80:	e7d8      	b.n	8012e34 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012e82:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012e86:	4648      	mov	r0, r9
 8012e88:	f7fd f96c 	bl	8010164 <ucdr_serialize_uint32_t>
 8012e8c:	4028      	ands	r0, r5
 8012e8e:	b2c5      	uxtb	r5, r0
 8012e90:	e7c7      	b.n	8012e22 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012e92:	bf00      	nop

08012e94 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e96:	2202      	movs	r2, #2
 8012e98:	460d      	mov	r5, r1
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	f002 fcea 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8012ea0:	78a9      	ldrb	r1, [r5, #2]
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	f7fc ff19 	bl	800fcdc <ucdr_serialize_bool>
 8012eaa:	78ab      	ldrb	r3, [r5, #2]
 8012eac:	4004      	ands	r4, r0
 8012eae:	b2e4      	uxtb	r4, r4
 8012eb0:	b90b      	cbnz	r3, 8012eb6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb6:	f105 0108 	add.w	r1, r5, #8
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f7ff ff96 	bl	8012dec <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012ec0:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012ec4:	4607      	mov	r7, r0
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	f7fc ff08 	bl	800fcdc <ucdr_serialize_bool>
 8012ecc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012ed0:	4038      	ands	r0, r7
 8012ed2:	b2c7      	uxtb	r7, r0
 8012ed4:	b913      	cbnz	r3, 8012edc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012ed6:	403c      	ands	r4, r7
 8012ed8:	4620      	mov	r0, r4
 8012eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012edc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	f7fd fb95 	bl	8010610 <ucdr_serialize_uint64_t>
 8012ee6:	4007      	ands	r7, r0
 8012ee8:	e7f5      	b.n	8012ed6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012eea:	bf00      	nop

08012eec <uxr_deserialize_ObjectVariant>:
 8012eec:	b570      	push	{r4, r5, r6, lr}
 8012eee:	4605      	mov	r5, r0
 8012ef0:	460e      	mov	r6, r1
 8012ef2:	f7fc ff37 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8012ef6:	b168      	cbz	r0, 8012f14 <uxr_deserialize_ObjectVariant+0x28>
 8012ef8:	7833      	ldrb	r3, [r6, #0]
 8012efa:	3b01      	subs	r3, #1
 8012efc:	4604      	mov	r4, r0
 8012efe:	2b0d      	cmp	r3, #13
 8012f00:	d809      	bhi.n	8012f16 <uxr_deserialize_ObjectVariant+0x2a>
 8012f02:	e8df f003 	tbb	[pc, r3]
 8012f06:	0a41      	.short	0x0a41
 8012f08:	0a0a2323 	.word	0x0a0a2323
 8012f0c:	10080a0a 	.word	0x10080a0a
 8012f10:	565c1010 	.word	0x565c1010
 8012f14:	2400      	movs	r4, #0
 8012f16:	4620      	mov	r0, r4
 8012f18:	bd70      	pop	{r4, r5, r6, pc}
 8012f1a:	1d31      	adds	r1, r6, #4
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f22:	f7ff be41 	b.w	8012ba8 <uxr_deserialize_DATAWRITER_Representation>
 8012f26:	1d31      	adds	r1, r6, #4
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f7fc ff1b 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	d0f0      	beq.n	8012f14 <uxr_deserialize_ObjectVariant+0x28>
 8012f32:	7933      	ldrb	r3, [r6, #4]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d001      	beq.n	8012f3c <uxr_deserialize_ObjectVariant+0x50>
 8012f38:	2b02      	cmp	r3, #2
 8012f3a:	d1ec      	bne.n	8012f16 <uxr_deserialize_ObjectVariant+0x2a>
 8012f3c:	68b1      	ldr	r1, [r6, #8]
 8012f3e:	4628      	mov	r0, r5
 8012f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f48:	f002 bdc4 	b.w	8015ad4 <ucdr_deserialize_string>
 8012f4c:	1d31      	adds	r1, r6, #4
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f7fc ff08 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8012f54:	4604      	mov	r4, r0
 8012f56:	b170      	cbz	r0, 8012f76 <uxr_deserialize_ObjectVariant+0x8a>
 8012f58:	7933      	ldrb	r3, [r6, #4]
 8012f5a:	2b02      	cmp	r3, #2
 8012f5c:	d04c      	beq.n	8012ff8 <uxr_deserialize_ObjectVariant+0x10c>
 8012f5e:	2b03      	cmp	r3, #3
 8012f60:	d109      	bne.n	8012f76 <uxr_deserialize_ObjectVariant+0x8a>
 8012f62:	f106 0308 	add.w	r3, r6, #8
 8012f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f6a:	f106 010c 	add.w	r1, r6, #12
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f002 fd86 	bl	8015a80 <ucdr_deserialize_sequence_uint8_t>
 8012f74:	4604      	mov	r4, r0
 8012f76:	2202      	movs	r2, #2
 8012f78:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f002 fcdd 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8012f82:	4020      	ands	r0, r4
 8012f84:	b2c4      	uxtb	r4, r0
 8012f86:	e7c6      	b.n	8012f16 <uxr_deserialize_ObjectVariant+0x2a>
 8012f88:	1d31      	adds	r1, r6, #4
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f7fc feea 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8012f90:	4604      	mov	r4, r0
 8012f92:	b130      	cbz	r0, 8012fa2 <uxr_deserialize_ObjectVariant+0xb6>
 8012f94:	7933      	ldrb	r3, [r6, #4]
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d036      	beq.n	8013008 <uxr_deserialize_ObjectVariant+0x11c>
 8012f9a:	2b03      	cmp	r3, #3
 8012f9c:	d03c      	beq.n	8013018 <uxr_deserialize_ObjectVariant+0x12c>
 8012f9e:	2b01      	cmp	r3, #1
 8012fa0:	d032      	beq.n	8013008 <uxr_deserialize_ObjectVariant+0x11c>
 8012fa2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f7fd fc82 	bl	80108b0 <ucdr_deserialize_int16_t>
 8012fac:	4020      	ands	r0, r4
 8012fae:	b2c4      	uxtb	r4, r0
 8012fb0:	e7b1      	b.n	8012f16 <uxr_deserialize_ObjectVariant+0x2a>
 8012fb2:	1d31      	adds	r1, r6, #4
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fba:	f7ff bcab 	b.w	8012914 <uxr_deserialize_CLIENT_Representation>
 8012fbe:	2204      	movs	r2, #4
 8012fc0:	18b1      	adds	r1, r6, r2
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f002 fcba 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8012fc8:	2202      	movs	r2, #2
 8012fca:	f106 0108 	add.w	r1, r6, #8
 8012fce:	4604      	mov	r4, r0
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	f002 fcb3 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8012fd6:	2202      	movs	r2, #2
 8012fd8:	4004      	ands	r4, r0
 8012fda:	f106 010a 	add.w	r1, r6, #10
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f002 fcac 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8012fe4:	b2e4      	uxtb	r4, r4
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	f106 010c 	add.w	r1, r6, #12
 8012fec:	4628      	mov	r0, r5
 8012fee:	401c      	ands	r4, r3
 8012ff0:	f7fc fe8a 	bl	800fd08 <ucdr_deserialize_bool>
 8012ff4:	4004      	ands	r4, r0
 8012ff6:	e78e      	b.n	8012f16 <uxr_deserialize_ObjectVariant+0x2a>
 8012ff8:	68b1      	ldr	r1, [r6, #8]
 8012ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ffe:	4628      	mov	r0, r5
 8013000:	f002 fd68 	bl	8015ad4 <ucdr_deserialize_string>
 8013004:	4604      	mov	r4, r0
 8013006:	e7b6      	b.n	8012f76 <uxr_deserialize_ObjectVariant+0x8a>
 8013008:	68b1      	ldr	r1, [r6, #8]
 801300a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801300e:	4628      	mov	r0, r5
 8013010:	f002 fd60 	bl	8015ad4 <ucdr_deserialize_string>
 8013014:	4604      	mov	r4, r0
 8013016:	e7c4      	b.n	8012fa2 <uxr_deserialize_ObjectVariant+0xb6>
 8013018:	f106 0308 	add.w	r3, r6, #8
 801301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013020:	f106 010c 	add.w	r1, r6, #12
 8013024:	4628      	mov	r0, r5
 8013026:	f002 fd2b 	bl	8015a80 <ucdr_deserialize_sequence_uint8_t>
 801302a:	4604      	mov	r4, r0
 801302c:	e7b9      	b.n	8012fa2 <uxr_deserialize_ObjectVariant+0xb6>
 801302e:	bf00      	nop

08013030 <uxr_deserialize_BaseObjectRequest>:
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	2202      	movs	r2, #2
 8013034:	4605      	mov	r5, r0
 8013036:	460e      	mov	r6, r1
 8013038:	f002 fc80 	bl	801593c <ucdr_deserialize_array_uint8_t>
 801303c:	2202      	movs	r2, #2
 801303e:	4604      	mov	r4, r0
 8013040:	18b1      	adds	r1, r6, r2
 8013042:	4628      	mov	r0, r5
 8013044:	f002 fc7a 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8013048:	4020      	ands	r0, r4
 801304a:	b2c0      	uxtb	r0, r0
 801304c:	bd70      	pop	{r4, r5, r6, pc}
 801304e:	bf00      	nop

08013050 <uxr_serialize_ActivityInfoVariant>:
 8013050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013054:	460d      	mov	r5, r1
 8013056:	7809      	ldrb	r1, [r1, #0]
 8013058:	4607      	mov	r7, r0
 801305a:	f7fc fe6d 	bl	800fd38 <ucdr_serialize_uint8_t>
 801305e:	4681      	mov	r9, r0
 8013060:	b138      	cbz	r0, 8013072 <uxr_serialize_ActivityInfoVariant+0x22>
 8013062:	782b      	ldrb	r3, [r5, #0]
 8013064:	2b06      	cmp	r3, #6
 8013066:	f000 8082 	beq.w	801316e <uxr_serialize_ActivityInfoVariant+0x11e>
 801306a:	2b0d      	cmp	r3, #13
 801306c:	d016      	beq.n	801309c <uxr_serialize_ActivityInfoVariant+0x4c>
 801306e:	2b05      	cmp	r3, #5
 8013070:	d002      	beq.n	8013078 <uxr_serialize_ActivityInfoVariant+0x28>
 8013072:	4648      	mov	r0, r9
 8013074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013078:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801307c:	4638      	mov	r0, r7
 801307e:	f7fd fb97 	bl	80107b0 <ucdr_serialize_int16_t>
 8013082:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013086:	4681      	mov	r9, r0
 8013088:	4638      	mov	r0, r7
 801308a:	f7fd fac1 	bl	8010610 <ucdr_serialize_uint64_t>
 801308e:	ea09 0000 	and.w	r0, r9, r0
 8013092:	fa5f f980 	uxtb.w	r9, r0
 8013096:	4648      	mov	r0, r9
 8013098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801309c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80130a0:	4638      	mov	r0, r7
 80130a2:	f7fd fb85 	bl	80107b0 <ucdr_serialize_int16_t>
 80130a6:	68e9      	ldr	r1, [r5, #12]
 80130a8:	4681      	mov	r9, r0
 80130aa:	4638      	mov	r0, r7
 80130ac:	f7fd f85a 	bl	8010164 <ucdr_serialize_uint32_t>
 80130b0:	68eb      	ldr	r3, [r5, #12]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d0eb      	beq.n	801308e <uxr_serialize_ActivityInfoVariant+0x3e>
 80130b6:	b320      	cbz	r0, 8013102 <uxr_serialize_ActivityInfoVariant+0xb2>
 80130b8:	f105 080c 	add.w	r8, r5, #12
 80130bc:	2600      	movs	r6, #0
 80130be:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80130c2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80130c6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80130ca:	4638      	mov	r0, r7
 80130cc:	f7fc fe34 	bl	800fd38 <ucdr_serialize_uint8_t>
 80130d0:	2800      	cmp	r0, #0
 80130d2:	d053      	beq.n	801317c <uxr_serialize_ActivityInfoVariant+0x12c>
 80130d4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80130d8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80130dc:	0074      	lsls	r4, r6, #1
 80130de:	00c9      	lsls	r1, r1, #3
 80130e0:	2b03      	cmp	r3, #3
 80130e2:	d854      	bhi.n	801318e <uxr_serialize_ActivityInfoVariant+0x13e>
 80130e4:	e8df f003 	tbb	[pc, r3]
 80130e8:	02102132 	.word	0x02102132
 80130ec:	4441      	add	r1, r8
 80130ee:	4638      	mov	r0, r7
 80130f0:	6889      	ldr	r1, [r1, #8]
 80130f2:	f002 fcdf 	bl	8015ab4 <ucdr_serialize_string>
 80130f6:	68ea      	ldr	r2, [r5, #12]
 80130f8:	3601      	adds	r6, #1
 80130fa:	4296      	cmp	r6, r2
 80130fc:	d242      	bcs.n	8013184 <uxr_serialize_ActivityInfoVariant+0x134>
 80130fe:	2800      	cmp	r0, #0
 8013100:	d1dd      	bne.n	80130be <uxr_serialize_ActivityInfoVariant+0x6e>
 8013102:	f04f 0900 	mov.w	r9, #0
 8013106:	e7b4      	b.n	8013072 <uxr_serialize_ActivityInfoVariant+0x22>
 8013108:	3108      	adds	r1, #8
 801310a:	4441      	add	r1, r8
 801310c:	2210      	movs	r2, #16
 801310e:	4638      	mov	r0, r7
 8013110:	f002 fbb0 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013114:	4434      	add	r4, r6
 8013116:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801311a:	4604      	mov	r4, r0
 801311c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801311e:	4638      	mov	r0, r7
 8013120:	f7fd f820 	bl	8010164 <ucdr_serialize_uint32_t>
 8013124:	4020      	ands	r0, r4
 8013126:	b2c0      	uxtb	r0, r0
 8013128:	e7e5      	b.n	80130f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801312a:	3108      	adds	r1, #8
 801312c:	4441      	add	r1, r8
 801312e:	2204      	movs	r2, #4
 8013130:	4638      	mov	r0, r7
 8013132:	f002 fb9f 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013136:	4434      	add	r4, r6
 8013138:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801313c:	4604      	mov	r4, r0
 801313e:	8b19      	ldrh	r1, [r3, #24]
 8013140:	4638      	mov	r0, r7
 8013142:	f7fc fe25 	bl	800fd90 <ucdr_serialize_uint16_t>
 8013146:	4020      	ands	r0, r4
 8013148:	b2c0      	uxtb	r0, r0
 801314a:	e7d4      	b.n	80130f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801314c:	3108      	adds	r1, #8
 801314e:	4441      	add	r1, r8
 8013150:	2202      	movs	r2, #2
 8013152:	4638      	mov	r0, r7
 8013154:	f002 fb8e 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013158:	4434      	add	r4, r6
 801315a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801315e:	4604      	mov	r4, r0
 8013160:	7d99      	ldrb	r1, [r3, #22]
 8013162:	4638      	mov	r0, r7
 8013164:	f7fc fde8 	bl	800fd38 <ucdr_serialize_uint8_t>
 8013168:	4020      	ands	r0, r4
 801316a:	b2c0      	uxtb	r0, r0
 801316c:	e7c3      	b.n	80130f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801316e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013172:	4638      	mov	r0, r7
 8013174:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013178:	f7fd bb1a 	b.w	80107b0 <ucdr_serialize_int16_t>
 801317c:	68ea      	ldr	r2, [r5, #12]
 801317e:	3601      	adds	r6, #1
 8013180:	42b2      	cmp	r2, r6
 8013182:	d8be      	bhi.n	8013102 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013184:	ea09 0900 	and.w	r9, r9, r0
 8013188:	fa5f f989 	uxtb.w	r9, r9
 801318c:	e771      	b.n	8013072 <uxr_serialize_ActivityInfoVariant+0x22>
 801318e:	68eb      	ldr	r3, [r5, #12]
 8013190:	3601      	adds	r6, #1
 8013192:	429e      	cmp	r6, r3
 8013194:	f10a 0a18 	add.w	sl, sl, #24
 8013198:	d395      	bcc.n	80130c6 <uxr_serialize_ActivityInfoVariant+0x76>
 801319a:	e76a      	b.n	8013072 <uxr_serialize_ActivityInfoVariant+0x22>

0801319c <uxr_deserialize_BaseObjectReply>:
 801319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a0:	2202      	movs	r2, #2
 80131a2:	4606      	mov	r6, r0
 80131a4:	460f      	mov	r7, r1
 80131a6:	f002 fbc9 	bl	801593c <ucdr_deserialize_array_uint8_t>
 80131aa:	2202      	movs	r2, #2
 80131ac:	18b9      	adds	r1, r7, r2
 80131ae:	4605      	mov	r5, r0
 80131b0:	4630      	mov	r0, r6
 80131b2:	f002 fbc3 	bl	801593c <ucdr_deserialize_array_uint8_t>
 80131b6:	1d39      	adds	r1, r7, #4
 80131b8:	4680      	mov	r8, r0
 80131ba:	4630      	mov	r0, r6
 80131bc:	f7fc fdd2 	bl	800fd64 <ucdr_deserialize_uint8_t>
 80131c0:	1d79      	adds	r1, r7, #5
 80131c2:	4604      	mov	r4, r0
 80131c4:	4630      	mov	r0, r6
 80131c6:	f7fc fdcd 	bl	800fd64 <ucdr_deserialize_uint8_t>
 80131ca:	ea05 0508 	and.w	r5, r5, r8
 80131ce:	402c      	ands	r4, r5
 80131d0:	4020      	ands	r0, r4
 80131d2:	b2c0      	uxtb	r0, r0
 80131d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131d8 <uxr_serialize_ReadSpecification>:
 80131d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131dc:	460e      	mov	r6, r1
 80131de:	7809      	ldrb	r1, [r1, #0]
 80131e0:	4607      	mov	r7, r0
 80131e2:	f7fc fda9 	bl	800fd38 <ucdr_serialize_uint8_t>
 80131e6:	7871      	ldrb	r1, [r6, #1]
 80131e8:	4604      	mov	r4, r0
 80131ea:	4638      	mov	r0, r7
 80131ec:	f7fc fda4 	bl	800fd38 <ucdr_serialize_uint8_t>
 80131f0:	78b1      	ldrb	r1, [r6, #2]
 80131f2:	4004      	ands	r4, r0
 80131f4:	4638      	mov	r0, r7
 80131f6:	f7fc fd71 	bl	800fcdc <ucdr_serialize_bool>
 80131fa:	78b3      	ldrb	r3, [r6, #2]
 80131fc:	b2e4      	uxtb	r4, r4
 80131fe:	4004      	ands	r4, r0
 8013200:	b94b      	cbnz	r3, 8013216 <uxr_serialize_ReadSpecification+0x3e>
 8013202:	7a31      	ldrb	r1, [r6, #8]
 8013204:	4638      	mov	r0, r7
 8013206:	f7fc fd69 	bl	800fcdc <ucdr_serialize_bool>
 801320a:	7a33      	ldrb	r3, [r6, #8]
 801320c:	4004      	ands	r4, r0
 801320e:	b943      	cbnz	r3, 8013222 <uxr_serialize_ReadSpecification+0x4a>
 8013210:	4620      	mov	r0, r4
 8013212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013216:	6871      	ldr	r1, [r6, #4]
 8013218:	4638      	mov	r0, r7
 801321a:	f002 fc4b 	bl	8015ab4 <ucdr_serialize_string>
 801321e:	4004      	ands	r4, r0
 8013220:	e7ef      	b.n	8013202 <uxr_serialize_ReadSpecification+0x2a>
 8013222:	8971      	ldrh	r1, [r6, #10]
 8013224:	4638      	mov	r0, r7
 8013226:	f7fc fdb3 	bl	800fd90 <ucdr_serialize_uint16_t>
 801322a:	89b1      	ldrh	r1, [r6, #12]
 801322c:	4605      	mov	r5, r0
 801322e:	4638      	mov	r0, r7
 8013230:	f7fc fdae 	bl	800fd90 <ucdr_serialize_uint16_t>
 8013234:	89f1      	ldrh	r1, [r6, #14]
 8013236:	4005      	ands	r5, r0
 8013238:	4638      	mov	r0, r7
 801323a:	f7fc fda9 	bl	800fd90 <ucdr_serialize_uint16_t>
 801323e:	8a31      	ldrh	r1, [r6, #16]
 8013240:	4680      	mov	r8, r0
 8013242:	4638      	mov	r0, r7
 8013244:	f7fc fda4 	bl	800fd90 <ucdr_serialize_uint16_t>
 8013248:	b2ed      	uxtb	r5, r5
 801324a:	4025      	ands	r5, r4
 801324c:	ea08 0505 	and.w	r5, r8, r5
 8013250:	ea00 0405 	and.w	r4, r0, r5
 8013254:	4620      	mov	r0, r4
 8013256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801325a:	bf00      	nop

0801325c <uxr_serialize_CREATE_CLIENT_Payload>:
 801325c:	f7ff bb02 	b.w	8012864 <uxr_serialize_CLIENT_Representation>

08013260 <uxr_serialize_CREATE_Payload>:
 8013260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013262:	2202      	movs	r2, #2
 8013264:	4607      	mov	r7, r0
 8013266:	460e      	mov	r6, r1
 8013268:	f002 fb04 	bl	8015874 <ucdr_serialize_array_uint8_t>
 801326c:	2202      	movs	r2, #2
 801326e:	18b1      	adds	r1, r6, r2
 8013270:	4605      	mov	r5, r0
 8013272:	4638      	mov	r0, r7
 8013274:	f002 fafe 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013278:	7931      	ldrb	r1, [r6, #4]
 801327a:	4604      	mov	r4, r0
 801327c:	4638      	mov	r0, r7
 801327e:	f7fc fd5b 	bl	800fd38 <ucdr_serialize_uint8_t>
 8013282:	b170      	cbz	r0, 80132a2 <uxr_serialize_CREATE_Payload+0x42>
 8013284:	7933      	ldrb	r3, [r6, #4]
 8013286:	402c      	ands	r4, r5
 8013288:	3b01      	subs	r3, #1
 801328a:	b2e4      	uxtb	r4, r4
 801328c:	2b0d      	cmp	r3, #13
 801328e:	d809      	bhi.n	80132a4 <uxr_serialize_CREATE_Payload+0x44>
 8013290:	e8df f003 	tbb	[pc, r3]
 8013294:	23230a4c 	.word	0x23230a4c
 8013298:	0a0a0a0a 	.word	0x0a0a0a0a
 801329c:	12121208 	.word	0x12121208
 80132a0:	3e45      	.short	0x3e45
 80132a2:	2400      	movs	r4, #0
 80132a4:	4620      	mov	r0, r4
 80132a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132a8:	f106 0108 	add.w	r1, r6, #8
 80132ac:	4638      	mov	r0, r7
 80132ae:	f7ff fbdf 	bl	8012a70 <uxr_serialize_DATAWRITER_Representation>
 80132b2:	4004      	ands	r4, r0
 80132b4:	4620      	mov	r0, r4
 80132b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b8:	7a31      	ldrb	r1, [r6, #8]
 80132ba:	4638      	mov	r0, r7
 80132bc:	f7fc fd3c 	bl	800fd38 <ucdr_serialize_uint8_t>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d0ee      	beq.n	80132a2 <uxr_serialize_CREATE_Payload+0x42>
 80132c4:	7a33      	ldrb	r3, [r6, #8]
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d001      	beq.n	80132ce <uxr_serialize_CREATE_Payload+0x6e>
 80132ca:	2b02      	cmp	r3, #2
 80132cc:	d1ea      	bne.n	80132a4 <uxr_serialize_CREATE_Payload+0x44>
 80132ce:	68f1      	ldr	r1, [r6, #12]
 80132d0:	4638      	mov	r0, r7
 80132d2:	f002 fbef 	bl	8015ab4 <ucdr_serialize_string>
 80132d6:	4004      	ands	r4, r0
 80132d8:	e7e4      	b.n	80132a4 <uxr_serialize_CREATE_Payload+0x44>
 80132da:	7a31      	ldrb	r1, [r6, #8]
 80132dc:	4638      	mov	r0, r7
 80132de:	f7fc fd2b 	bl	800fd38 <ucdr_serialize_uint8_t>
 80132e2:	4605      	mov	r5, r0
 80132e4:	b158      	cbz	r0, 80132fe <uxr_serialize_CREATE_Payload+0x9e>
 80132e6:	7a33      	ldrb	r3, [r6, #8]
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d034      	beq.n	8013356 <uxr_serialize_CREATE_Payload+0xf6>
 80132ec:	2b03      	cmp	r3, #3
 80132ee:	d106      	bne.n	80132fe <uxr_serialize_CREATE_Payload+0x9e>
 80132f0:	68f2      	ldr	r2, [r6, #12]
 80132f2:	f106 0110 	add.w	r1, r6, #16
 80132f6:	4638      	mov	r0, r7
 80132f8:	f002 fbb0 	bl	8015a5c <ucdr_serialize_sequence_uint8_t>
 80132fc:	4605      	mov	r5, r0
 80132fe:	2202      	movs	r2, #2
 8013300:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8013304:	4638      	mov	r0, r7
 8013306:	f002 fab5 	bl	8015874 <ucdr_serialize_array_uint8_t>
 801330a:	4028      	ands	r0, r5
 801330c:	4004      	ands	r4, r0
 801330e:	e7c9      	b.n	80132a4 <uxr_serialize_CREATE_Payload+0x44>
 8013310:	f106 0108 	add.w	r1, r6, #8
 8013314:	4638      	mov	r0, r7
 8013316:	f7ff faa5 	bl	8012864 <uxr_serialize_CLIENT_Representation>
 801331a:	4004      	ands	r4, r0
 801331c:	e7c2      	b.n	80132a4 <uxr_serialize_CREATE_Payload+0x44>
 801331e:	f106 0108 	add.w	r1, r6, #8
 8013322:	4638      	mov	r0, r7
 8013324:	f7ff fb5a 	bl	80129dc <uxr_serialize_AGENT_Representation>
 8013328:	4004      	ands	r4, r0
 801332a:	e7bb      	b.n	80132a4 <uxr_serialize_CREATE_Payload+0x44>
 801332c:	7a31      	ldrb	r1, [r6, #8]
 801332e:	4638      	mov	r0, r7
 8013330:	f7fc fd02 	bl	800fd38 <ucdr_serialize_uint8_t>
 8013334:	4605      	mov	r5, r0
 8013336:	b130      	cbz	r0, 8013346 <uxr_serialize_CREATE_Payload+0xe6>
 8013338:	7a33      	ldrb	r3, [r6, #8]
 801333a:	2b02      	cmp	r3, #2
 801333c:	d011      	beq.n	8013362 <uxr_serialize_CREATE_Payload+0x102>
 801333e:	2b03      	cmp	r3, #3
 8013340:	d015      	beq.n	801336e <uxr_serialize_CREATE_Payload+0x10e>
 8013342:	2b01      	cmp	r3, #1
 8013344:	d00d      	beq.n	8013362 <uxr_serialize_CREATE_Payload+0x102>
 8013346:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801334a:	4638      	mov	r0, r7
 801334c:	f7fd fa30 	bl	80107b0 <ucdr_serialize_int16_t>
 8013350:	4028      	ands	r0, r5
 8013352:	4004      	ands	r4, r0
 8013354:	e7a6      	b.n	80132a4 <uxr_serialize_CREATE_Payload+0x44>
 8013356:	68f1      	ldr	r1, [r6, #12]
 8013358:	4638      	mov	r0, r7
 801335a:	f002 fbab 	bl	8015ab4 <ucdr_serialize_string>
 801335e:	4605      	mov	r5, r0
 8013360:	e7cd      	b.n	80132fe <uxr_serialize_CREATE_Payload+0x9e>
 8013362:	68f1      	ldr	r1, [r6, #12]
 8013364:	4638      	mov	r0, r7
 8013366:	f002 fba5 	bl	8015ab4 <ucdr_serialize_string>
 801336a:	4605      	mov	r5, r0
 801336c:	e7eb      	b.n	8013346 <uxr_serialize_CREATE_Payload+0xe6>
 801336e:	68f2      	ldr	r2, [r6, #12]
 8013370:	f106 0110 	add.w	r1, r6, #16
 8013374:	4638      	mov	r0, r7
 8013376:	f002 fb71 	bl	8015a5c <ucdr_serialize_sequence_uint8_t>
 801337a:	4605      	mov	r5, r0
 801337c:	e7e3      	b.n	8013346 <uxr_serialize_CREATE_Payload+0xe6>
 801337e:	bf00      	nop

08013380 <uxr_deserialize_GET_INFO_Payload>:
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	2202      	movs	r2, #2
 8013384:	4605      	mov	r5, r0
 8013386:	460e      	mov	r6, r1
 8013388:	f002 fad8 	bl	801593c <ucdr_deserialize_array_uint8_t>
 801338c:	2202      	movs	r2, #2
 801338e:	18b1      	adds	r1, r6, r2
 8013390:	4604      	mov	r4, r0
 8013392:	4628      	mov	r0, r5
 8013394:	f002 fad2 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8013398:	1d31      	adds	r1, r6, #4
 801339a:	4004      	ands	r4, r0
 801339c:	4628      	mov	r0, r5
 801339e:	f7fd f811 	bl	80103c4 <ucdr_deserialize_uint32_t>
 80133a2:	b2e4      	uxtb	r4, r4
 80133a4:	4020      	ands	r0, r4
 80133a6:	bd70      	pop	{r4, r5, r6, pc}

080133a8 <uxr_serialize_DELETE_Payload>:
 80133a8:	b570      	push	{r4, r5, r6, lr}
 80133aa:	2202      	movs	r2, #2
 80133ac:	4605      	mov	r5, r0
 80133ae:	460e      	mov	r6, r1
 80133b0:	f002 fa60 	bl	8015874 <ucdr_serialize_array_uint8_t>
 80133b4:	2202      	movs	r2, #2
 80133b6:	4604      	mov	r4, r0
 80133b8:	18b1      	adds	r1, r6, r2
 80133ba:	4628      	mov	r0, r5
 80133bc:	f002 fa5a 	bl	8015874 <ucdr_serialize_array_uint8_t>
 80133c0:	4020      	ands	r0, r4
 80133c2:	b2c0      	uxtb	r0, r0
 80133c4:	bd70      	pop	{r4, r5, r6, pc}
 80133c6:	bf00      	nop

080133c8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80133c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133cc:	4605      	mov	r5, r0
 80133ce:	460e      	mov	r6, r1
 80133d0:	f7fc fcc8 	bl	800fd64 <ucdr_deserialize_uint8_t>
 80133d4:	1c71      	adds	r1, r6, #1
 80133d6:	4604      	mov	r4, r0
 80133d8:	4628      	mov	r0, r5
 80133da:	f7fc fcc3 	bl	800fd64 <ucdr_deserialize_uint8_t>
 80133de:	2204      	movs	r2, #4
 80133e0:	18b1      	adds	r1, r6, r2
 80133e2:	4680      	mov	r8, r0
 80133e4:	4628      	mov	r0, r5
 80133e6:	f002 faa9 	bl	801593c <ucdr_deserialize_array_uint8_t>
 80133ea:	f106 0108 	add.w	r1, r6, #8
 80133ee:	4607      	mov	r7, r0
 80133f0:	2202      	movs	r2, #2
 80133f2:	4628      	mov	r0, r5
 80133f4:	f002 faa2 	bl	801593c <ucdr_deserialize_array_uint8_t>
 80133f8:	ea04 0308 	and.w	r3, r4, r8
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	ea03 0407 	and.w	r4, r3, r7
 8013402:	2202      	movs	r2, #2
 8013404:	4607      	mov	r7, r0
 8013406:	f106 010a 	add.w	r1, r6, #10
 801340a:	4628      	mov	r0, r5
 801340c:	f002 fa96 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8013410:	f106 010c 	add.w	r1, r6, #12
 8013414:	4603      	mov	r3, r0
 8013416:	4628      	mov	r0, r5
 8013418:	461d      	mov	r5, r3
 801341a:	f7fc fc75 	bl	800fd08 <ucdr_deserialize_bool>
 801341e:	403c      	ands	r4, r7
 8013420:	4025      	ands	r5, r4
 8013422:	4028      	ands	r0, r5
 8013424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013428 <uxr_deserialize_STATUS_Payload>:
 8013428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801342c:	2202      	movs	r2, #2
 801342e:	4606      	mov	r6, r0
 8013430:	460f      	mov	r7, r1
 8013432:	f002 fa83 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8013436:	2202      	movs	r2, #2
 8013438:	18b9      	adds	r1, r7, r2
 801343a:	4605      	mov	r5, r0
 801343c:	4630      	mov	r0, r6
 801343e:	f002 fa7d 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8013442:	1d39      	adds	r1, r7, #4
 8013444:	4680      	mov	r8, r0
 8013446:	4630      	mov	r0, r6
 8013448:	f7fc fc8c 	bl	800fd64 <ucdr_deserialize_uint8_t>
 801344c:	1d79      	adds	r1, r7, #5
 801344e:	4604      	mov	r4, r0
 8013450:	4630      	mov	r0, r6
 8013452:	f7fc fc87 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8013456:	ea05 0508 	and.w	r5, r5, r8
 801345a:	402c      	ands	r4, r5
 801345c:	4020      	ands	r0, r4
 801345e:	b2c0      	uxtb	r0, r0
 8013460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013464 <uxr_serialize_INFO_Payload>:
 8013464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013468:	2202      	movs	r2, #2
 801346a:	460c      	mov	r4, r1
 801346c:	4605      	mov	r5, r0
 801346e:	f002 fa01 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013472:	2202      	movs	r2, #2
 8013474:	18a1      	adds	r1, r4, r2
 8013476:	4680      	mov	r8, r0
 8013478:	4628      	mov	r0, r5
 801347a:	f002 f9fb 	bl	8015874 <ucdr_serialize_array_uint8_t>
 801347e:	7921      	ldrb	r1, [r4, #4]
 8013480:	4607      	mov	r7, r0
 8013482:	4628      	mov	r0, r5
 8013484:	f7fc fc58 	bl	800fd38 <ucdr_serialize_uint8_t>
 8013488:	7961      	ldrb	r1, [r4, #5]
 801348a:	4606      	mov	r6, r0
 801348c:	4628      	mov	r0, r5
 801348e:	f7fc fc53 	bl	800fd38 <ucdr_serialize_uint8_t>
 8013492:	ea08 0807 	and.w	r8, r8, r7
 8013496:	ea06 0608 	and.w	r6, r6, r8
 801349a:	4006      	ands	r6, r0
 801349c:	7a21      	ldrb	r1, [r4, #8]
 801349e:	4628      	mov	r0, r5
 80134a0:	f7fc fc1c 	bl	800fcdc <ucdr_serialize_bool>
 80134a4:	7a23      	ldrb	r3, [r4, #8]
 80134a6:	b2f7      	uxtb	r7, r6
 80134a8:	4606      	mov	r6, r0
 80134aa:	b96b      	cbnz	r3, 80134c8 <uxr_serialize_INFO_Payload+0x64>
 80134ac:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80134b0:	4628      	mov	r0, r5
 80134b2:	f7fc fc13 	bl	800fcdc <ucdr_serialize_bool>
 80134b6:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80134ba:	4030      	ands	r0, r6
 80134bc:	b2c6      	uxtb	r6, r0
 80134be:	b983      	cbnz	r3, 80134e2 <uxr_serialize_INFO_Payload+0x7e>
 80134c0:	ea06 0007 	and.w	r0, r6, r7
 80134c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c8:	7b21      	ldrb	r1, [r4, #12]
 80134ca:	4628      	mov	r0, r5
 80134cc:	f7fc fc34 	bl	800fd38 <ucdr_serialize_uint8_t>
 80134d0:	b188      	cbz	r0, 80134f6 <uxr_serialize_INFO_Payload+0x92>
 80134d2:	f104 010c 	add.w	r1, r4, #12
 80134d6:	4628      	mov	r0, r5
 80134d8:	f7ff faf2 	bl	8012ac0 <uxr_serialize_ObjectVariant.part.0>
 80134dc:	4030      	ands	r0, r6
 80134de:	b2c6      	uxtb	r6, r0
 80134e0:	e7e4      	b.n	80134ac <uxr_serialize_INFO_Payload+0x48>
 80134e2:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80134e6:	4628      	mov	r0, r5
 80134e8:	f7ff fdb2 	bl	8013050 <uxr_serialize_ActivityInfoVariant>
 80134ec:	4006      	ands	r6, r0
 80134ee:	ea06 0007 	and.w	r0, r6, r7
 80134f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134f6:	4606      	mov	r6, r0
 80134f8:	e7d8      	b.n	80134ac <uxr_serialize_INFO_Payload+0x48>
 80134fa:	bf00      	nop

080134fc <uxr_serialize_READ_DATA_Payload>:
 80134fc:	b570      	push	{r4, r5, r6, lr}
 80134fe:	2202      	movs	r2, #2
 8013500:	4605      	mov	r5, r0
 8013502:	460e      	mov	r6, r1
 8013504:	f002 f9b6 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013508:	2202      	movs	r2, #2
 801350a:	18b1      	adds	r1, r6, r2
 801350c:	4604      	mov	r4, r0
 801350e:	4628      	mov	r0, r5
 8013510:	f002 f9b0 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013514:	1d31      	adds	r1, r6, #4
 8013516:	4004      	ands	r4, r0
 8013518:	4628      	mov	r0, r5
 801351a:	f7ff fe5d 	bl	80131d8 <uxr_serialize_ReadSpecification>
 801351e:	b2e4      	uxtb	r4, r4
 8013520:	4020      	ands	r0, r4
 8013522:	bd70      	pop	{r4, r5, r6, pc}

08013524 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013524:	b570      	push	{r4, r5, r6, lr}
 8013526:	2202      	movs	r2, #2
 8013528:	4605      	mov	r5, r0
 801352a:	460e      	mov	r6, r1
 801352c:	f002 f9a2 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013530:	2202      	movs	r2, #2
 8013532:	4604      	mov	r4, r0
 8013534:	18b1      	adds	r1, r6, r2
 8013536:	4628      	mov	r0, r5
 8013538:	f002 f99c 	bl	8015874 <ucdr_serialize_array_uint8_t>
 801353c:	4020      	ands	r0, r4
 801353e:	b2c0      	uxtb	r0, r0
 8013540:	bd70      	pop	{r4, r5, r6, pc}
 8013542:	bf00      	nop

08013544 <uxr_serialize_ACKNACK_Payload>:
 8013544:	b570      	push	{r4, r5, r6, lr}
 8013546:	460c      	mov	r4, r1
 8013548:	460e      	mov	r6, r1
 801354a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801354e:	4605      	mov	r5, r0
 8013550:	f7fc fc1e 	bl	800fd90 <ucdr_serialize_uint16_t>
 8013554:	2202      	movs	r2, #2
 8013556:	4621      	mov	r1, r4
 8013558:	4604      	mov	r4, r0
 801355a:	4628      	mov	r0, r5
 801355c:	f002 f98a 	bl	8015874 <ucdr_serialize_array_uint8_t>
 8013560:	7931      	ldrb	r1, [r6, #4]
 8013562:	4004      	ands	r4, r0
 8013564:	4628      	mov	r0, r5
 8013566:	f7fc fbe7 	bl	800fd38 <ucdr_serialize_uint8_t>
 801356a:	b2e4      	uxtb	r4, r4
 801356c:	4020      	ands	r0, r4
 801356e:	bd70      	pop	{r4, r5, r6, pc}

08013570 <uxr_deserialize_ACKNACK_Payload>:
 8013570:	b570      	push	{r4, r5, r6, lr}
 8013572:	4605      	mov	r5, r0
 8013574:	460e      	mov	r6, r1
 8013576:	f7fc fd0b 	bl	800ff90 <ucdr_deserialize_uint16_t>
 801357a:	2202      	movs	r2, #2
 801357c:	18b1      	adds	r1, r6, r2
 801357e:	4604      	mov	r4, r0
 8013580:	4628      	mov	r0, r5
 8013582:	f002 f9db 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8013586:	1d31      	adds	r1, r6, #4
 8013588:	4004      	ands	r4, r0
 801358a:	4628      	mov	r0, r5
 801358c:	f7fc fbea 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8013590:	b2e4      	uxtb	r4, r4
 8013592:	4020      	ands	r0, r4
 8013594:	bd70      	pop	{r4, r5, r6, pc}
 8013596:	bf00      	nop

08013598 <uxr_serialize_HEARTBEAT_Payload>:
 8013598:	b570      	push	{r4, r5, r6, lr}
 801359a:	460d      	mov	r5, r1
 801359c:	8809      	ldrh	r1, [r1, #0]
 801359e:	4606      	mov	r6, r0
 80135a0:	f7fc fbf6 	bl	800fd90 <ucdr_serialize_uint16_t>
 80135a4:	8869      	ldrh	r1, [r5, #2]
 80135a6:	4604      	mov	r4, r0
 80135a8:	4630      	mov	r0, r6
 80135aa:	f7fc fbf1 	bl	800fd90 <ucdr_serialize_uint16_t>
 80135ae:	7929      	ldrb	r1, [r5, #4]
 80135b0:	4004      	ands	r4, r0
 80135b2:	4630      	mov	r0, r6
 80135b4:	f7fc fbc0 	bl	800fd38 <ucdr_serialize_uint8_t>
 80135b8:	b2e4      	uxtb	r4, r4
 80135ba:	4020      	ands	r0, r4
 80135bc:	bd70      	pop	{r4, r5, r6, pc}
 80135be:	bf00      	nop

080135c0 <uxr_deserialize_HEARTBEAT_Payload>:
 80135c0:	b570      	push	{r4, r5, r6, lr}
 80135c2:	4605      	mov	r5, r0
 80135c4:	460e      	mov	r6, r1
 80135c6:	f7fc fce3 	bl	800ff90 <ucdr_deserialize_uint16_t>
 80135ca:	1cb1      	adds	r1, r6, #2
 80135cc:	4604      	mov	r4, r0
 80135ce:	4628      	mov	r0, r5
 80135d0:	f7fc fcde 	bl	800ff90 <ucdr_deserialize_uint16_t>
 80135d4:	1d31      	adds	r1, r6, #4
 80135d6:	4004      	ands	r4, r0
 80135d8:	4628      	mov	r0, r5
 80135da:	f7fc fbc3 	bl	800fd64 <ucdr_deserialize_uint8_t>
 80135de:	b2e4      	uxtb	r4, r4
 80135e0:	4020      	ands	r0, r4
 80135e2:	bd70      	pop	{r4, r5, r6, pc}

080135e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80135e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e8:	4605      	mov	r5, r0
 80135ea:	460e      	mov	r6, r1
 80135ec:	f7fd fa6c 	bl	8010ac8 <ucdr_deserialize_int32_t>
 80135f0:	1d31      	adds	r1, r6, #4
 80135f2:	4607      	mov	r7, r0
 80135f4:	4628      	mov	r0, r5
 80135f6:	f7fc fee5 	bl	80103c4 <ucdr_deserialize_uint32_t>
 80135fa:	f106 0108 	add.w	r1, r6, #8
 80135fe:	4680      	mov	r8, r0
 8013600:	4628      	mov	r0, r5
 8013602:	f7fd fa61 	bl	8010ac8 <ucdr_deserialize_int32_t>
 8013606:	f106 010c 	add.w	r1, r6, #12
 801360a:	4604      	mov	r4, r0
 801360c:	4628      	mov	r0, r5
 801360e:	f7fc fed9 	bl	80103c4 <ucdr_deserialize_uint32_t>
 8013612:	ea07 0708 	and.w	r7, r7, r8
 8013616:	403c      	ands	r4, r7
 8013618:	f106 0110 	add.w	r1, r6, #16
 801361c:	4004      	ands	r4, r0
 801361e:	4628      	mov	r0, r5
 8013620:	f7fd fa52 	bl	8010ac8 <ucdr_deserialize_int32_t>
 8013624:	f106 0114 	add.w	r1, r6, #20
 8013628:	4607      	mov	r7, r0
 801362a:	4628      	mov	r0, r5
 801362c:	f7fc feca 	bl	80103c4 <ucdr_deserialize_uint32_t>
 8013630:	b2e4      	uxtb	r4, r4
 8013632:	403c      	ands	r4, r7
 8013634:	4020      	ands	r0, r4
 8013636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801363a:	bf00      	nop

0801363c <uxr_deserialize_SampleIdentity>:
 801363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013640:	220c      	movs	r2, #12
 8013642:	4604      	mov	r4, r0
 8013644:	460d      	mov	r5, r1
 8013646:	f002 f979 	bl	801593c <ucdr_deserialize_array_uint8_t>
 801364a:	2203      	movs	r2, #3
 801364c:	f105 010c 	add.w	r1, r5, #12
 8013650:	4607      	mov	r7, r0
 8013652:	4620      	mov	r0, r4
 8013654:	f002 f972 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8013658:	f105 010f 	add.w	r1, r5, #15
 801365c:	4680      	mov	r8, r0
 801365e:	4620      	mov	r0, r4
 8013660:	f7fc fb80 	bl	800fd64 <ucdr_deserialize_uint8_t>
 8013664:	f105 0110 	add.w	r1, r5, #16
 8013668:	4606      	mov	r6, r0
 801366a:	4620      	mov	r0, r4
 801366c:	f7fd fa2c 	bl	8010ac8 <ucdr_deserialize_int32_t>
 8013670:	f105 0114 	add.w	r1, r5, #20
 8013674:	4603      	mov	r3, r0
 8013676:	4620      	mov	r0, r4
 8013678:	ea07 0708 	and.w	r7, r7, r8
 801367c:	461c      	mov	r4, r3
 801367e:	f7fc fea1 	bl	80103c4 <ucdr_deserialize_uint32_t>
 8013682:	403e      	ands	r6, r7
 8013684:	4034      	ands	r4, r6
 8013686:	4020      	ands	r0, r4
 8013688:	b2c0      	uxtb	r0, r0
 801368a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801368e:	bf00      	nop

08013690 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013690:	280b      	cmp	r0, #11
 8013692:	dc0d      	bgt.n	80136b0 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013694:	2800      	cmp	r0, #0
 8013696:	db09      	blt.n	80136ac <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013698:	280b      	cmp	r0, #11
 801369a:	d807      	bhi.n	80136ac <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801369c:	e8df f000 	tbb	[pc, r0]
 80136a0:	07060607 	.word	0x07060607
 80136a4:	06060606 	.word	0x06060606
 80136a8:	07070606 	.word	0x07070606
 80136ac:	2001      	movs	r0, #1
 80136ae:	4770      	bx	lr
 80136b0:	28cb      	cmp	r0, #203	; 0xcb
 80136b2:	bf18      	it	ne
 80136b4:	2001      	movne	r0, #1
 80136b6:	4770      	bx	lr

080136b8 <rcl_get_zero_initialized_context>:
 80136b8:	4a03      	ldr	r2, [pc, #12]	; (80136c8 <rcl_get_zero_initialized_context+0x10>)
 80136ba:	4603      	mov	r3, r0
 80136bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80136c4:	4618      	mov	r0, r3
 80136c6:	4770      	bx	lr
 80136c8:	08019564 	.word	0x08019564

080136cc <rcl_context_is_valid>:
 80136cc:	b118      	cbz	r0, 80136d6 <rcl_context_is_valid+0xa>
 80136ce:	6840      	ldr	r0, [r0, #4]
 80136d0:	3800      	subs	r0, #0
 80136d2:	bf18      	it	ne
 80136d4:	2001      	movne	r0, #1
 80136d6:	4770      	bx	lr

080136d8 <__cleanup_context>:
 80136d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136dc:	4606      	mov	r6, r0
 80136de:	6800      	ldr	r0, [r0, #0]
 80136e0:	2300      	movs	r3, #0
 80136e2:	6073      	str	r3, [r6, #4]
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d049      	beq.n	801377c <__cleanup_context+0xa4>
 80136e8:	6947      	ldr	r7, [r0, #20]
 80136ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80136ee:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80136f2:	b137      	cbz	r7, 8013702 <__cleanup_context+0x2a>
 80136f4:	3014      	adds	r0, #20
 80136f6:	f000 f9bb 	bl	8013a70 <rcl_init_options_fini>
 80136fa:	4607      	mov	r7, r0
 80136fc:	2800      	cmp	r0, #0
 80136fe:	d144      	bne.n	801378a <__cleanup_context+0xb2>
 8013700:	6830      	ldr	r0, [r6, #0]
 8013702:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013704:	b143      	cbz	r3, 8013718 <__cleanup_context+0x40>
 8013706:	3028      	adds	r0, #40	; 0x28
 8013708:	f001 fd9a 	bl	8015240 <rmw_context_fini>
 801370c:	b118      	cbz	r0, 8013716 <__cleanup_context+0x3e>
 801370e:	2f00      	cmp	r7, #0
 8013710:	d03e      	beq.n	8013790 <__cleanup_context+0xb8>
 8013712:	f7fb fde5 	bl	800f2e0 <rcutils_reset_error>
 8013716:	6830      	ldr	r0, [r6, #0]
 8013718:	6a03      	ldr	r3, [r0, #32]
 801371a:	b1db      	cbz	r3, 8013754 <__cleanup_context+0x7c>
 801371c:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013720:	2a01      	cmp	r2, #1
 8013722:	f17c 0100 	sbcs.w	r1, ip, #0
 8013726:	db11      	blt.n	801374c <__cleanup_context+0x74>
 8013728:	2400      	movs	r4, #0
 801372a:	4625      	mov	r5, r4
 801372c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013730:	4649      	mov	r1, r9
 8013732:	b1b8      	cbz	r0, 8013764 <__cleanup_context+0x8c>
 8013734:	47c0      	blx	r8
 8013736:	6833      	ldr	r3, [r6, #0]
 8013738:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801373c:	3401      	adds	r4, #1
 801373e:	f145 0500 	adc.w	r5, r5, #0
 8013742:	4294      	cmp	r4, r2
 8013744:	eb75 010c 	sbcs.w	r1, r5, ip
 8013748:	6a1b      	ldr	r3, [r3, #32]
 801374a:	dbef      	blt.n	801372c <__cleanup_context+0x54>
 801374c:	4618      	mov	r0, r3
 801374e:	4649      	mov	r1, r9
 8013750:	47c0      	blx	r8
 8013752:	6830      	ldr	r0, [r6, #0]
 8013754:	4649      	mov	r1, r9
 8013756:	47c0      	blx	r8
 8013758:	2300      	movs	r3, #0
 801375a:	e9c6 3300 	strd	r3, r3, [r6]
 801375e:	4638      	mov	r0, r7
 8013760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013764:	3401      	adds	r4, #1
 8013766:	f145 0500 	adc.w	r5, r5, #0
 801376a:	4294      	cmp	r4, r2
 801376c:	eb75 010c 	sbcs.w	r1, r5, ip
 8013770:	dbdc      	blt.n	801372c <__cleanup_context+0x54>
 8013772:	4618      	mov	r0, r3
 8013774:	4649      	mov	r1, r9
 8013776:	47c0      	blx	r8
 8013778:	6830      	ldr	r0, [r6, #0]
 801377a:	e7eb      	b.n	8013754 <__cleanup_context+0x7c>
 801377c:	4607      	mov	r7, r0
 801377e:	2300      	movs	r3, #0
 8013780:	e9c6 3300 	strd	r3, r3, [r6]
 8013784:	4638      	mov	r0, r7
 8013786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801378a:	f7fb fda9 	bl	800f2e0 <rcutils_reset_error>
 801378e:	e7b7      	b.n	8013700 <__cleanup_context+0x28>
 8013790:	f7ff ff7e 	bl	8013690 <rcl_convert_rmw_ret_to_rcl_ret>
 8013794:	4607      	mov	r7, r0
 8013796:	e7bc      	b.n	8013712 <__cleanup_context+0x3a>

08013798 <rcl_init>:
 8013798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801379c:	1e05      	subs	r5, r0, #0
 801379e:	b09e      	sub	sp, #120	; 0x78
 80137a0:	460e      	mov	r6, r1
 80137a2:	4690      	mov	r8, r2
 80137a4:	461f      	mov	r7, r3
 80137a6:	f340 809c 	ble.w	80138e2 <rcl_init+0x14a>
 80137aa:	2900      	cmp	r1, #0
 80137ac:	f000 809c 	beq.w	80138e8 <rcl_init+0x150>
 80137b0:	f1a1 0e04 	sub.w	lr, r1, #4
 80137b4:	f04f 0c00 	mov.w	ip, #0
 80137b8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80137bc:	f10c 0c01 	add.w	ip, ip, #1
 80137c0:	2c00      	cmp	r4, #0
 80137c2:	f000 8091 	beq.w	80138e8 <rcl_init+0x150>
 80137c6:	4565      	cmp	r5, ip
 80137c8:	d1f6      	bne.n	80137b8 <rcl_init+0x20>
 80137ca:	f1b8 0f00 	cmp.w	r8, #0
 80137ce:	f000 808b 	beq.w	80138e8 <rcl_init+0x150>
 80137d2:	f8d8 4000 	ldr.w	r4, [r8]
 80137d6:	2c00      	cmp	r4, #0
 80137d8:	f000 8086 	beq.w	80138e8 <rcl_init+0x150>
 80137dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137de:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 80137e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137e6:	6823      	ldr	r3, [r4, #0]
 80137e8:	f8cc 3000 	str.w	r3, [ip]
 80137ec:	a819      	add	r0, sp, #100	; 0x64
 80137ee:	f7fb fd51 	bl	800f294 <rcutils_allocator_is_valid>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	d078      	beq.n	80138e8 <rcl_init+0x150>
 80137f6:	2f00      	cmp	r7, #0
 80137f8:	d076      	beq.n	80138e8 <rcl_init+0x150>
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d178      	bne.n	80138f2 <rcl_init+0x15a>
 8013800:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8013804:	2178      	movs	r1, #120	; 0x78
 8013806:	2001      	movs	r0, #1
 8013808:	4798      	blx	r3
 801380a:	4604      	mov	r4, r0
 801380c:	6038      	str	r0, [r7, #0]
 801380e:	2800      	cmp	r0, #0
 8013810:	f000 80b6 	beq.w	8013980 <rcl_init+0x1e8>
 8013814:	a802      	add	r0, sp, #8
 8013816:	f001 f957 	bl	8014ac8 <rmw_get_zero_initialized_context>
 801381a:	a902      	add	r1, sp, #8
 801381c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013820:	2250      	movs	r2, #80	; 0x50
 8013822:	ac19      	add	r4, sp, #100	; 0x64
 8013824:	f004 fdf6 	bl	8018414 <memcpy>
 8013828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801382a:	f8d7 e000 	ldr.w	lr, [r7]
 801382e:	46f4      	mov	ip, lr
 8013830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013834:	6823      	ldr	r3, [r4, #0]
 8013836:	f8cc 3000 	str.w	r3, [ip]
 801383a:	f10e 0114 	add.w	r1, lr, #20
 801383e:	4640      	mov	r0, r8
 8013840:	f000 f940 	bl	8013ac4 <rcl_init_options_copy>
 8013844:	4604      	mov	r4, r0
 8013846:	2800      	cmp	r0, #0
 8013848:	d144      	bne.n	80138d4 <rcl_init+0x13c>
 801384a:	f8d7 9000 	ldr.w	r9, [r7]
 801384e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013852:	f8c9 0020 	str.w	r0, [r9, #32]
 8013856:	f8c9 5018 	str.w	r5, [r9, #24]
 801385a:	f8c9 801c 	str.w	r8, [r9, #28]
 801385e:	2d00      	cmp	r5, #0
 8013860:	d04e      	beq.n	8013900 <rcl_init+0x168>
 8013862:	2e00      	cmp	r6, #0
 8013864:	d04c      	beq.n	8013900 <rcl_init+0x168>
 8013866:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801386a:	2104      	movs	r1, #4
 801386c:	4628      	mov	r0, r5
 801386e:	4798      	blx	r3
 8013870:	f8c9 0020 	str.w	r0, [r9, #32]
 8013874:	f8d7 9000 	ldr.w	r9, [r7]
 8013878:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801387c:	46ca      	mov	sl, r9
 801387e:	b343      	cbz	r3, 80138d2 <rcl_init+0x13a>
 8013880:	2d01      	cmp	r5, #1
 8013882:	f178 0300 	sbcs.w	r3, r8, #0
 8013886:	db3b      	blt.n	8013900 <rcl_init+0x168>
 8013888:	2400      	movs	r4, #0
 801388a:	3e04      	subs	r6, #4
 801388c:	46a1      	mov	r9, r4
 801388e:	e00b      	b.n	80138a8 <rcl_init+0x110>
 8013890:	6831      	ldr	r1, [r6, #0]
 8013892:	f004 fdbf 	bl	8018414 <memcpy>
 8013896:	3401      	adds	r4, #1
 8013898:	f149 0900 	adc.w	r9, r9, #0
 801389c:	45c8      	cmp	r8, r9
 801389e:	bf08      	it	eq
 80138a0:	42a5      	cmpeq	r5, r4
 80138a2:	d02b      	beq.n	80138fc <rcl_init+0x164>
 80138a4:	f8d7 a000 	ldr.w	sl, [r7]
 80138a8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80138ac:	f7ec fc9a 	bl	80001e4 <strlen>
 80138b0:	1c42      	adds	r2, r0, #1
 80138b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80138b4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80138b6:	f8da a020 	ldr.w	sl, [sl, #32]
 80138ba:	9201      	str	r2, [sp, #4]
 80138bc:	4610      	mov	r0, r2
 80138be:	4798      	blx	r3
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80138c6:	6a1b      	ldr	r3, [r3, #32]
 80138c8:	9a01      	ldr	r2, [sp, #4]
 80138ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d1de      	bne.n	8013890 <rcl_init+0xf8>
 80138d2:	240a      	movs	r4, #10
 80138d4:	4638      	mov	r0, r7
 80138d6:	f7ff feff 	bl	80136d8 <__cleanup_context>
 80138da:	4620      	mov	r0, r4
 80138dc:	b01e      	add	sp, #120	; 0x78
 80138de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e2:	2900      	cmp	r1, #0
 80138e4:	f43f af71 	beq.w	80137ca <rcl_init+0x32>
 80138e8:	240b      	movs	r4, #11
 80138ea:	4620      	mov	r0, r4
 80138ec:	b01e      	add	sp, #120	; 0x78
 80138ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138f2:	2464      	movs	r4, #100	; 0x64
 80138f4:	4620      	mov	r0, r4
 80138f6:	b01e      	add	sp, #120	; 0x78
 80138f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138fc:	f8d7 9000 	ldr.w	r9, [r7]
 8013900:	4926      	ldr	r1, [pc, #152]	; (801399c <rcl_init+0x204>)
 8013902:	680b      	ldr	r3, [r1, #0]
 8013904:	3301      	adds	r3, #1
 8013906:	d036      	beq.n	8013976 <rcl_init+0x1de>
 8013908:	600b      	str	r3, [r1, #0]
 801390a:	461a      	mov	r2, r3
 801390c:	2400      	movs	r4, #0
 801390e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013912:	607b      	str	r3, [r7, #4]
 8013914:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013916:	3301      	adds	r3, #1
 8013918:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801391c:	d034      	beq.n	8013988 <rcl_init+0x1f0>
 801391e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8013922:	b93b      	cbnz	r3, 8013934 <rcl_init+0x19c>
 8013924:	3030      	adds	r0, #48	; 0x30
 8013926:	f000 f939 	bl	8013b9c <rcl_get_localhost_only>
 801392a:	4604      	mov	r4, r0
 801392c:	2800      	cmp	r0, #0
 801392e:	d1d1      	bne.n	80138d4 <rcl_init+0x13c>
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	6958      	ldr	r0, [r3, #20]
 8013934:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8013936:	aa18      	add	r2, sp, #96	; 0x60
 8013938:	a917      	add	r1, sp, #92	; 0x5c
 801393a:	f000 fd81 	bl	8014440 <rcl_validate_enclave_name>
 801393e:	4604      	mov	r4, r0
 8013940:	2800      	cmp	r0, #0
 8013942:	d1c7      	bne.n	80138d4 <rcl_init+0x13c>
 8013944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013946:	b9eb      	cbnz	r3, 8013984 <rcl_init+0x1ec>
 8013948:	6839      	ldr	r1, [r7, #0]
 801394a:	694b      	ldr	r3, [r1, #20]
 801394c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801394e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013952:	f000 fc3d 	bl	80141d0 <rcl_get_security_options_from_environment>
 8013956:	4604      	mov	r4, r0
 8013958:	2800      	cmp	r0, #0
 801395a:	d1bb      	bne.n	80138d4 <rcl_init+0x13c>
 801395c:	6839      	ldr	r1, [r7, #0]
 801395e:	6948      	ldr	r0, [r1, #20]
 8013960:	3128      	adds	r1, #40	; 0x28
 8013962:	3018      	adds	r0, #24
 8013964:	f001 fb36 	bl	8014fd4 <rmw_init>
 8013968:	4604      	mov	r4, r0
 801396a:	2800      	cmp	r0, #0
 801396c:	d0bd      	beq.n	80138ea <rcl_init+0x152>
 801396e:	f7ff fe8f 	bl	8013690 <rcl_convert_rmw_ret_to_rcl_ret>
 8013972:	4604      	mov	r4, r0
 8013974:	e7ae      	b.n	80138d4 <rcl_init+0x13c>
 8013976:	2201      	movs	r2, #1
 8013978:	461c      	mov	r4, r3
 801397a:	600a      	str	r2, [r1, #0]
 801397c:	4613      	mov	r3, r2
 801397e:	e7c6      	b.n	801390e <rcl_init+0x176>
 8013980:	240a      	movs	r4, #10
 8013982:	e7b2      	b.n	80138ea <rcl_init+0x152>
 8013984:	2401      	movs	r4, #1
 8013986:	e7a5      	b.n	80138d4 <rcl_init+0x13c>
 8013988:	3024      	adds	r0, #36	; 0x24
 801398a:	f003 fc5d 	bl	8017248 <rcl_get_default_domain_id>
 801398e:	4604      	mov	r4, r0
 8013990:	2800      	cmp	r0, #0
 8013992:	d19f      	bne.n	80138d4 <rcl_init+0x13c>
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	6958      	ldr	r0, [r3, #20]
 8013998:	e7c1      	b.n	801391e <rcl_init+0x186>
 801399a:	bf00      	nop
 801399c:	2000e264 	.word	0x2000e264

080139a0 <rcl_get_zero_initialized_init_options>:
 80139a0:	2000      	movs	r0, #0
 80139a2:	4770      	bx	lr

080139a4 <rcl_init_options_init>:
 80139a4:	b084      	sub	sp, #16
 80139a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139a8:	b097      	sub	sp, #92	; 0x5c
 80139aa:	ae1d      	add	r6, sp, #116	; 0x74
 80139ac:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80139b0:	2800      	cmp	r0, #0
 80139b2:	d058      	beq.n	8013a66 <rcl_init_options_init+0xc2>
 80139b4:	6803      	ldr	r3, [r0, #0]
 80139b6:	4605      	mov	r5, r0
 80139b8:	b133      	cbz	r3, 80139c8 <rcl_init_options_init+0x24>
 80139ba:	2464      	movs	r4, #100	; 0x64
 80139bc:	4620      	mov	r0, r4
 80139be:	b017      	add	sp, #92	; 0x5c
 80139c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139c4:	b004      	add	sp, #16
 80139c6:	4770      	bx	lr
 80139c8:	4630      	mov	r0, r6
 80139ca:	f7fb fc63 	bl	800f294 <rcutils_allocator_is_valid>
 80139ce:	2800      	cmp	r0, #0
 80139d0:	d049      	beq.n	8013a66 <rcl_init_options_init+0xc2>
 80139d2:	46b4      	mov	ip, r6
 80139d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139d8:	ac11      	add	r4, sp, #68	; 0x44
 80139da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139dc:	f8dc 3000 	ldr.w	r3, [ip]
 80139e0:	6023      	str	r3, [r4, #0]
 80139e2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80139e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139e6:	2050      	movs	r0, #80	; 0x50
 80139e8:	4798      	blx	r3
 80139ea:	4604      	mov	r4, r0
 80139ec:	6028      	str	r0, [r5, #0]
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d03b      	beq.n	8013a6a <rcl_init_options_init+0xc6>
 80139f2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80139f6:	4686      	mov	lr, r0
 80139f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a00:	f8dc 3000 	ldr.w	r3, [ip]
 8013a04:	f8ce 3000 	str.w	r3, [lr]
 8013a08:	a802      	add	r0, sp, #8
 8013a0a:	f001 f86d 	bl	8014ae8 <rmw_get_zero_initialized_init_options>
 8013a0e:	f10d 0e08 	add.w	lr, sp, #8
 8013a12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a16:	f104 0c18 	add.w	ip, r4, #24
 8013a1a:	682f      	ldr	r7, [r5, #0]
 8013a1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a30:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013a34:	ac20      	add	r4, sp, #128	; 0x80
 8013a36:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013a42:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013a46:	f107 0018 	add.w	r0, r7, #24
 8013a4a:	f001 f9cb 	bl	8014de4 <rmw_init_options_init>
 8013a4e:	4604      	mov	r4, r0
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d0b3      	beq.n	80139bc <rcl_init_options_init+0x18>
 8013a54:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013a56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013a58:	6828      	ldr	r0, [r5, #0]
 8013a5a:	4798      	blx	r3
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	f7ff fe17 	bl	8013690 <rcl_convert_rmw_ret_to_rcl_ret>
 8013a62:	4604      	mov	r4, r0
 8013a64:	e7aa      	b.n	80139bc <rcl_init_options_init+0x18>
 8013a66:	240b      	movs	r4, #11
 8013a68:	e7a8      	b.n	80139bc <rcl_init_options_init+0x18>
 8013a6a:	240a      	movs	r4, #10
 8013a6c:	e7a6      	b.n	80139bc <rcl_init_options_init+0x18>
 8013a6e:	bf00      	nop

08013a70 <rcl_init_options_fini>:
 8013a70:	b530      	push	{r4, r5, lr}
 8013a72:	b087      	sub	sp, #28
 8013a74:	b1f0      	cbz	r0, 8013ab4 <rcl_init_options_fini+0x44>
 8013a76:	6803      	ldr	r3, [r0, #0]
 8013a78:	4604      	mov	r4, r0
 8013a7a:	b1db      	cbz	r3, 8013ab4 <rcl_init_options_fini+0x44>
 8013a7c:	469c      	mov	ip, r3
 8013a7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a82:	f10d 0e04 	add.w	lr, sp, #4
 8013a86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8013a8e:	f8ce 3000 	str.w	r3, [lr]
 8013a92:	a801      	add	r0, sp, #4
 8013a94:	f7fb fbfe 	bl	800f294 <rcutils_allocator_is_valid>
 8013a98:	b160      	cbz	r0, 8013ab4 <rcl_init_options_fini+0x44>
 8013a9a:	6820      	ldr	r0, [r4, #0]
 8013a9c:	3018      	adds	r0, #24
 8013a9e:	f001 fa51 	bl	8014f44 <rmw_init_options_fini>
 8013aa2:	4605      	mov	r5, r0
 8013aa4:	b950      	cbnz	r0, 8013abc <rcl_init_options_fini+0x4c>
 8013aa6:	6820      	ldr	r0, [r4, #0]
 8013aa8:	9b02      	ldr	r3, [sp, #8]
 8013aaa:	9905      	ldr	r1, [sp, #20]
 8013aac:	4798      	blx	r3
 8013aae:	4628      	mov	r0, r5
 8013ab0:	b007      	add	sp, #28
 8013ab2:	bd30      	pop	{r4, r5, pc}
 8013ab4:	250b      	movs	r5, #11
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	b007      	add	sp, #28
 8013aba:	bd30      	pop	{r4, r5, pc}
 8013abc:	f7ff fde8 	bl	8013690 <rcl_convert_rmw_ret_to_rcl_ret>
 8013ac0:	4605      	mov	r5, r0
 8013ac2:	e7f8      	b.n	8013ab6 <rcl_init_options_fini+0x46>

08013ac4 <rcl_init_options_copy>:
 8013ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac8:	b094      	sub	sp, #80	; 0x50
 8013aca:	2800      	cmp	r0, #0
 8013acc:	d058      	beq.n	8013b80 <rcl_init_options_copy+0xbc>
 8013ace:	4604      	mov	r4, r0
 8013ad0:	6800      	ldr	r0, [r0, #0]
 8013ad2:	2800      	cmp	r0, #0
 8013ad4:	d054      	beq.n	8013b80 <rcl_init_options_copy+0xbc>
 8013ad6:	460e      	mov	r6, r1
 8013ad8:	f7fb fbdc 	bl	800f294 <rcutils_allocator_is_valid>
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d04f      	beq.n	8013b80 <rcl_init_options_copy+0xbc>
 8013ae0:	2e00      	cmp	r6, #0
 8013ae2:	d04d      	beq.n	8013b80 <rcl_init_options_copy+0xbc>
 8013ae4:	6833      	ldr	r3, [r6, #0]
 8013ae6:	b123      	cbz	r3, 8013af2 <rcl_init_options_copy+0x2e>
 8013ae8:	2464      	movs	r4, #100	; 0x64
 8013aea:	4620      	mov	r0, r4
 8013aec:	b014      	add	sp, #80	; 0x50
 8013aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af2:	6827      	ldr	r7, [r4, #0]
 8013af4:	46bc      	mov	ip, r7
 8013af6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013afa:	ad0f      	add	r5, sp, #60	; 0x3c
 8013afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013afe:	f8dc 3000 	ldr.w	r3, [ip]
 8013b02:	f8d7 8000 	ldr.w	r8, [r7]
 8013b06:	602b      	str	r3, [r5, #0]
 8013b08:	4619      	mov	r1, r3
 8013b0a:	2050      	movs	r0, #80	; 0x50
 8013b0c:	47c0      	blx	r8
 8013b0e:	4605      	mov	r5, r0
 8013b10:	6030      	str	r0, [r6, #0]
 8013b12:	b3d0      	cbz	r0, 8013b8a <rcl_init_options_copy+0xc6>
 8013b14:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8013b18:	4686      	mov	lr, r0
 8013b1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b22:	f8dc 3000 	ldr.w	r3, [ip]
 8013b26:	f8ce 3000 	str.w	r3, [lr]
 8013b2a:	4668      	mov	r0, sp
 8013b2c:	f000 ffdc 	bl	8014ae8 <rmw_get_zero_initialized_init_options>
 8013b30:	46ee      	mov	lr, sp
 8013b32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b36:	f105 0c18 	add.w	ip, r5, #24
 8013b3a:	6824      	ldr	r4, [r4, #0]
 8013b3c:	6835      	ldr	r5, [r6, #0]
 8013b3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b52:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013b56:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b5a:	f104 0018 	add.w	r0, r4, #24
 8013b5e:	f105 0118 	add.w	r1, r5, #24
 8013b62:	f001 f9a7 	bl	8014eb4 <rmw_init_options_copy>
 8013b66:	4604      	mov	r4, r0
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	d0be      	beq.n	8013aea <rcl_init_options_copy+0x26>
 8013b6c:	f7fb fba0 	bl	800f2b0 <rcutils_get_error_string>
 8013b70:	f7fb fbb6 	bl	800f2e0 <rcutils_reset_error>
 8013b74:	4630      	mov	r0, r6
 8013b76:	f7ff ff7b 	bl	8013a70 <rcl_init_options_fini>
 8013b7a:	b140      	cbz	r0, 8013b8e <rcl_init_options_copy+0xca>
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	e7b4      	b.n	8013aea <rcl_init_options_copy+0x26>
 8013b80:	240b      	movs	r4, #11
 8013b82:	4620      	mov	r0, r4
 8013b84:	b014      	add	sp, #80	; 0x50
 8013b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b8a:	240a      	movs	r4, #10
 8013b8c:	e7ad      	b.n	8013aea <rcl_init_options_copy+0x26>
 8013b8e:	4620      	mov	r0, r4
 8013b90:	b014      	add	sp, #80	; 0x50
 8013b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b96:	f7ff bd7b 	b.w	8013690 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b9a:	bf00      	nop

08013b9c <rcl_get_localhost_only>:
 8013b9c:	b510      	push	{r4, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	9301      	str	r3, [sp, #4]
 8013ba4:	b1b8      	cbz	r0, 8013bd6 <rcl_get_localhost_only+0x3a>
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	a901      	add	r1, sp, #4
 8013baa:	480c      	ldr	r0, [pc, #48]	; (8013bdc <rcl_get_localhost_only+0x40>)
 8013bac:	f000 fc90 	bl	80144d0 <rcutils_get_env>
 8013bb0:	b110      	cbz	r0, 8013bb8 <rcl_get_localhost_only+0x1c>
 8013bb2:	2001      	movs	r0, #1
 8013bb4:	b002      	add	sp, #8
 8013bb6:	bd10      	pop	{r4, pc}
 8013bb8:	9b01      	ldr	r3, [sp, #4]
 8013bba:	b113      	cbz	r3, 8013bc2 <rcl_get_localhost_only+0x26>
 8013bbc:	781a      	ldrb	r2, [r3, #0]
 8013bbe:	2a31      	cmp	r2, #49	; 0x31
 8013bc0:	d004      	beq.n	8013bcc <rcl_get_localhost_only+0x30>
 8013bc2:	2302      	movs	r3, #2
 8013bc4:	2000      	movs	r0, #0
 8013bc6:	7023      	strb	r3, [r4, #0]
 8013bc8:	b002      	add	sp, #8
 8013bca:	bd10      	pop	{r4, pc}
 8013bcc:	785b      	ldrb	r3, [r3, #1]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d1f7      	bne.n	8013bc2 <rcl_get_localhost_only+0x26>
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	e7f6      	b.n	8013bc4 <rcl_get_localhost_only+0x28>
 8013bd6:	200b      	movs	r0, #11
 8013bd8:	b002      	add	sp, #8
 8013bda:	bd10      	pop	{r4, pc}
 8013bdc:	0801956c 	.word	0x0801956c

08013be0 <rcl_get_zero_initialized_node>:
 8013be0:	4a03      	ldr	r2, [pc, #12]	; (8013bf0 <rcl_get_zero_initialized_node+0x10>)
 8013be2:	4603      	mov	r3, r0
 8013be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013be8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013bec:	4618      	mov	r0, r3
 8013bee:	4770      	bx	lr
 8013bf0:	08019594 	.word	0x08019594

08013bf4 <rcl_node_init>:
 8013bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf8:	b0a9      	sub	sp, #164	; 0xa4
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8013c00:	a823      	add	r0, sp, #140	; 0x8c
 8013c02:	460e      	mov	r6, r1
 8013c04:	4615      	mov	r5, r2
 8013c06:	461f      	mov	r7, r3
 8013c08:	f003 fd46 	bl	8017698 <rcl_guard_condition_get_default_options>
 8013c0c:	f1b8 0f00 	cmp.w	r8, #0
 8013c10:	f000 80e6 	beq.w	8013de0 <rcl_node_init+0x1ec>
 8013c14:	4640      	mov	r0, r8
 8013c16:	f7fb fb3d 	bl	800f294 <rcutils_allocator_is_valid>
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	f000 80e0 	beq.w	8013de0 <rcl_node_init+0x1ec>
 8013c20:	2e00      	cmp	r6, #0
 8013c22:	f000 80dd 	beq.w	8013de0 <rcl_node_init+0x1ec>
 8013c26:	2d00      	cmp	r5, #0
 8013c28:	f000 80da 	beq.w	8013de0 <rcl_node_init+0x1ec>
 8013c2c:	2c00      	cmp	r4, #0
 8013c2e:	f000 80d7 	beq.w	8013de0 <rcl_node_init+0x1ec>
 8013c32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013c36:	f1b9 0f00 	cmp.w	r9, #0
 8013c3a:	f040 80fd 	bne.w	8013e38 <rcl_node_init+0x244>
 8013c3e:	2f00      	cmp	r7, #0
 8013c40:	f000 80ce 	beq.w	8013de0 <rcl_node_init+0x1ec>
 8013c44:	4638      	mov	r0, r7
 8013c46:	f7ff fd41 	bl	80136cc <rcl_context_is_valid>
 8013c4a:	4682      	mov	sl, r0
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	f000 80cd 	beq.w	8013dec <rcl_node_init+0x1f8>
 8013c52:	464a      	mov	r2, r9
 8013c54:	a922      	add	r1, sp, #136	; 0x88
 8013c56:	4630      	mov	r0, r6
 8013c58:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8013c5c:	f001 f83a 	bl	8014cd4 <rmw_validate_node_name>
 8013c60:	4681      	mov	r9, r0
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f040 80be 	bne.w	8013de4 <rcl_node_init+0x1f0>
 8013c68:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	f040 80f0 	bne.w	8013e50 <rcl_node_init+0x25c>
 8013c70:	4628      	mov	r0, r5
 8013c72:	f7ec fab7 	bl	80001e4 <strlen>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	f040 80bb 	bne.w	8013df2 <rcl_node_init+0x1fe>
 8013c7c:	4d7c      	ldr	r5, [pc, #496]	; (8013e70 <rcl_node_init+0x27c>)
 8013c7e:	a922      	add	r1, sp, #136	; 0x88
 8013c80:	2200      	movs	r2, #0
 8013c82:	4628      	mov	r0, r5
 8013c84:	f001 f808 	bl	8014c98 <rmw_validate_namespace>
 8013c88:	4681      	mov	r9, r0
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	f040 80aa 	bne.w	8013de4 <rcl_node_init+0x1f0>
 8013c90:	4682      	mov	sl, r0
 8013c92:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013c94:	2800      	cmp	r0, #0
 8013c96:	f040 80e0 	bne.w	8013e5a <rcl_node_init+0x266>
 8013c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8013c9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013ca2:	2078      	movs	r0, #120	; 0x78
 8013ca4:	4798      	blx	r3
 8013ca6:	4681      	mov	r9, r0
 8013ca8:	6060      	str	r0, [r4, #4]
 8013caa:	2800      	cmp	r0, #0
 8013cac:	f000 80ca 	beq.w	8013e44 <rcl_node_init+0x250>
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8013cb8:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 8013cbc:	a808      	add	r0, sp, #32
 8013cbe:	f000 f907 	bl	8013ed0 <rcl_node_get_default_options>
 8013cc2:	a908      	add	r1, sp, #32
 8013cc4:	4648      	mov	r0, r9
 8013cc6:	2268      	movs	r2, #104	; 0x68
 8013cc8:	f004 fba4 	bl	8018414 <memcpy>
 8013ccc:	6861      	ldr	r1, [r4, #4]
 8013cce:	6027      	str	r7, [r4, #0]
 8013cd0:	4640      	mov	r0, r8
 8013cd2:	f000 f90b 	bl	8013eec <rcl_node_options_copy>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d158      	bne.n	8013d8c <rcl_node_init+0x198>
 8013cda:	4628      	mov	r0, r5
 8013cdc:	f7ec fa82 	bl	80001e4 <strlen>
 8013ce0:	4428      	add	r0, r5
 8013ce2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013ce6:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013cea:	2b2f      	cmp	r3, #47	; 0x2f
 8013cec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	bf0c      	ite	eq
 8013cf4:	4b5f      	ldreq	r3, [pc, #380]	; (8013e74 <rcl_node_init+0x280>)
 8013cf6:	4b60      	ldrne	r3, [pc, #384]	; (8013e78 <rcl_node_init+0x284>)
 8013cf8:	9302      	str	r3, [sp, #8]
 8013cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013cfe:	9301      	str	r3, [sp, #4]
 8013d00:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013d04:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013d08:	f000 fc0a 	bl	8014520 <rcutils_format_string_limit>
 8013d0c:	6823      	ldr	r3, [r4, #0]
 8013d0e:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8013d12:	6818      	ldr	r0, [r3, #0]
 8013d14:	4631      	mov	r1, r6
 8013d16:	3028      	adds	r0, #40	; 0x28
 8013d18:	462a      	mov	r2, r5
 8013d1a:	6866      	ldr	r6, [r4, #4]
 8013d1c:	f001 fbae 	bl	801547c <rmw_create_node>
 8013d20:	6863      	ldr	r3, [r4, #4]
 8013d22:	66b0      	str	r0, [r6, #104]	; 0x68
 8013d24:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013d26:	2800      	cmp	r0, #0
 8013d28:	d032      	beq.n	8013d90 <rcl_node_init+0x19c>
 8013d2a:	f001 fc3b 	bl	80155a4 <rmw_node_get_graph_guard_condition>
 8013d2e:	4681      	mov	r9, r0
 8013d30:	b360      	cbz	r0, 8013d8c <rcl_node_init+0x198>
 8013d32:	f8d8 3000 	ldr.w	r3, [r8]
 8013d36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d3a:	6866      	ldr	r6, [r4, #4]
 8013d3c:	2008      	movs	r0, #8
 8013d3e:	4798      	blx	r3
 8013d40:	6863      	ldr	r3, [r4, #4]
 8013d42:	66f0      	str	r0, [r6, #108]	; 0x6c
 8013d44:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8013d48:	f1bb 0f00 	cmp.w	fp, #0
 8013d4c:	d020      	beq.n	8013d90 <rcl_node_init+0x19c>
 8013d4e:	a806      	add	r0, sp, #24
 8013d50:	f003 fc12 	bl	8017578 <rcl_get_zero_initialized_guard_condition>
 8013d54:	a806      	add	r0, sp, #24
 8013d56:	c803      	ldmia	r0, {r0, r1}
 8013d58:	6863      	ldr	r3, [r4, #4]
 8013d5a:	46c4      	mov	ip, r8
 8013d5c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8013d60:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013d64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d68:	ae23      	add	r6, sp, #140	; 0x8c
 8013d6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013d6c:	f8dc 3000 	ldr.w	r3, [ip]
 8013d70:	6033      	str	r3, [r6, #0]
 8013d72:	ab28      	add	r3, sp, #160	; 0xa0
 8013d74:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013d78:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013d7c:	4649      	mov	r1, r9
 8013d7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013d80:	463a      	mov	r2, r7
 8013d82:	4670      	mov	r0, lr
 8013d84:	f003 fc02 	bl	801758c <rcl_guard_condition_init_from_rmw>
 8013d88:	4681      	mov	r9, r0
 8013d8a:	b328      	cbz	r0, 8013dd8 <rcl_node_init+0x1e4>
 8013d8c:	6863      	ldr	r3, [r4, #4]
 8013d8e:	b1f3      	cbz	r3, 8013dce <rcl_node_init+0x1da>
 8013d90:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8013d92:	b128      	cbz	r0, 8013da0 <rcl_node_init+0x1ac>
 8013d94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d98:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d9c:	4798      	blx	r3
 8013d9e:	6863      	ldr	r3, [r4, #4]
 8013da0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013da2:	b110      	cbz	r0, 8013daa <rcl_node_init+0x1b6>
 8013da4:	f001 fb82 	bl	80154ac <rmw_destroy_node>
 8013da8:	6863      	ldr	r3, [r4, #4]
 8013daa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013dac:	b148      	cbz	r0, 8013dc2 <rcl_node_init+0x1ce>
 8013dae:	f003 fc4d 	bl	801764c <rcl_guard_condition_fini>
 8013db2:	6863      	ldr	r3, [r4, #4]
 8013db4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013db8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013dba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013dbe:	4798      	blx	r3
 8013dc0:	6863      	ldr	r3, [r4, #4]
 8013dc2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013dcc:	4798      	blx	r3
 8013dce:	2300      	movs	r3, #0
 8013dd0:	e9c4 3300 	strd	r3, r3, [r4]
 8013dd4:	f04f 0901 	mov.w	r9, #1
 8013dd8:	f1ba 0f00 	cmp.w	sl, #0
 8013ddc:	d125      	bne.n	8013e2a <rcl_node_init+0x236>
 8013dde:	e001      	b.n	8013de4 <rcl_node_init+0x1f0>
 8013de0:	f04f 090b 	mov.w	r9, #11
 8013de4:	4648      	mov	r0, r9
 8013de6:	b029      	add	sp, #164	; 0xa4
 8013de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dec:	f04f 0965 	mov.w	r9, #101	; 0x65
 8013df0:	e7f8      	b.n	8013de4 <rcl_node_init+0x1f0>
 8013df2:	782b      	ldrb	r3, [r5, #0]
 8013df4:	2b2f      	cmp	r3, #47	; 0x2f
 8013df6:	f43f af42 	beq.w	8013c7e <rcl_node_init+0x8a>
 8013dfa:	9503      	str	r5, [sp, #12]
 8013dfc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013e00:	9300      	str	r3, [sp, #0]
 8013e02:	4b1e      	ldr	r3, [pc, #120]	; (8013e7c <rcl_node_init+0x288>)
 8013e04:	9302      	str	r3, [sp, #8]
 8013e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013e0a:	9301      	str	r3, [sp, #4]
 8013e0c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013e10:	f000 fb86 	bl	8014520 <rcutils_format_string_limit>
 8013e14:	4605      	mov	r5, r0
 8013e16:	b340      	cbz	r0, 8013e6a <rcl_node_init+0x276>
 8013e18:	2200      	movs	r2, #0
 8013e1a:	a922      	add	r1, sp, #136	; 0x88
 8013e1c:	9222      	str	r2, [sp, #136]	; 0x88
 8013e1e:	f000 ff3b 	bl	8014c98 <rmw_validate_namespace>
 8013e22:	4681      	mov	r9, r0
 8013e24:	2800      	cmp	r0, #0
 8013e26:	f43f af34 	beq.w	8013c92 <rcl_node_init+0x9e>
 8013e2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e2e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013e32:	4628      	mov	r0, r5
 8013e34:	4798      	blx	r3
 8013e36:	e7d5      	b.n	8013de4 <rcl_node_init+0x1f0>
 8013e38:	f04f 0964 	mov.w	r9, #100	; 0x64
 8013e3c:	4648      	mov	r0, r9
 8013e3e:	b029      	add	sp, #164	; 0xa4
 8013e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e44:	f04f 090a 	mov.w	r9, #10
 8013e48:	f1ba 0f00 	cmp.w	sl, #0
 8013e4c:	d1ed      	bne.n	8013e2a <rcl_node_init+0x236>
 8013e4e:	e7c9      	b.n	8013de4 <rcl_node_init+0x1f0>
 8013e50:	f000 ff92 	bl	8014d78 <rmw_node_name_validation_result_string>
 8013e54:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8013e58:	e7c4      	b.n	8013de4 <rcl_node_init+0x1f0>
 8013e5a:	f000 ff2f 	bl	8014cbc <rmw_namespace_validation_result_string>
 8013e5e:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8013e62:	f1ba 0f00 	cmp.w	sl, #0
 8013e66:	d1e0      	bne.n	8013e2a <rcl_node_init+0x236>
 8013e68:	e7bc      	b.n	8013de4 <rcl_node_init+0x1f0>
 8013e6a:	f04f 090a 	mov.w	r9, #10
 8013e6e:	e7b9      	b.n	8013de4 <rcl_node_init+0x1f0>
 8013e70:	08019584 	.word	0x08019584
 8013e74:	08019408 	.word	0x08019408
 8013e78:	0801958c 	.word	0x0801958c
 8013e7c:	08019588 	.word	0x08019588

08013e80 <rcl_node_is_valid>:
 8013e80:	b130      	cbz	r0, 8013e90 <rcl_node_is_valid+0x10>
 8013e82:	6843      	ldr	r3, [r0, #4]
 8013e84:	b123      	cbz	r3, 8013e90 <rcl_node_is_valid+0x10>
 8013e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e88:	b113      	cbz	r3, 8013e90 <rcl_node_is_valid+0x10>
 8013e8a:	6800      	ldr	r0, [r0, #0]
 8013e8c:	f7ff bc1e 	b.w	80136cc <rcl_context_is_valid>
 8013e90:	2000      	movs	r0, #0
 8013e92:	4770      	bx	lr

08013e94 <rcl_node_get_name>:
 8013e94:	b120      	cbz	r0, 8013ea0 <rcl_node_get_name+0xc>
 8013e96:	6840      	ldr	r0, [r0, #4]
 8013e98:	b110      	cbz	r0, 8013ea0 <rcl_node_get_name+0xc>
 8013e9a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013e9c:	b100      	cbz	r0, 8013ea0 <rcl_node_get_name+0xc>
 8013e9e:	6880      	ldr	r0, [r0, #8]
 8013ea0:	4770      	bx	lr
 8013ea2:	bf00      	nop

08013ea4 <rcl_node_get_namespace>:
 8013ea4:	b120      	cbz	r0, 8013eb0 <rcl_node_get_namespace+0xc>
 8013ea6:	6840      	ldr	r0, [r0, #4]
 8013ea8:	b110      	cbz	r0, 8013eb0 <rcl_node_get_namespace+0xc>
 8013eaa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013eac:	b100      	cbz	r0, 8013eb0 <rcl_node_get_namespace+0xc>
 8013eae:	68c0      	ldr	r0, [r0, #12]
 8013eb0:	4770      	bx	lr
 8013eb2:	bf00      	nop

08013eb4 <rcl_node_get_options>:
 8013eb4:	b128      	cbz	r0, 8013ec2 <rcl_node_get_options+0xe>
 8013eb6:	6840      	ldr	r0, [r0, #4]
 8013eb8:	b118      	cbz	r0, 8013ec2 <rcl_node_get_options+0xe>
 8013eba:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	bf08      	it	eq
 8013ec0:	2000      	moveq	r0, #0
 8013ec2:	4770      	bx	lr

08013ec4 <rcl_node_get_rmw_handle>:
 8013ec4:	b110      	cbz	r0, 8013ecc <rcl_node_get_rmw_handle+0x8>
 8013ec6:	6840      	ldr	r0, [r0, #4]
 8013ec8:	b100      	cbz	r0, 8013ecc <rcl_node_get_rmw_handle+0x8>
 8013eca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop

08013ed0 <rcl_node_get_default_options>:
 8013ed0:	b510      	push	{r4, lr}
 8013ed2:	2268      	movs	r2, #104	; 0x68
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	2100      	movs	r1, #0
 8013ed8:	f004 f9d4 	bl	8018284 <memset>
 8013edc:	4620      	mov	r0, r4
 8013ede:	f7fb f9cb 	bl	800f278 <rcutils_get_default_allocator>
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	7523      	strb	r3, [r4, #20]
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	bd10      	pop	{r4, pc}
 8013eea:	bf00      	nop

08013eec <rcl_node_options_copy>:
 8013eec:	b1d0      	cbz	r0, 8013f24 <rcl_node_options_copy+0x38>
 8013eee:	b570      	push	{r4, r5, r6, lr}
 8013ef0:	460c      	mov	r4, r1
 8013ef2:	b1a9      	cbz	r1, 8013f20 <rcl_node_options_copy+0x34>
 8013ef4:	4288      	cmp	r0, r1
 8013ef6:	4684      	mov	ip, r0
 8013ef8:	d012      	beq.n	8013f20 <rcl_node_options_copy+0x34>
 8013efa:	4605      	mov	r5, r0
 8013efc:	8a86      	ldrh	r6, [r0, #20]
 8013efe:	468e      	mov	lr, r1
 8013f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f06:	682b      	ldr	r3, [r5, #0]
 8013f08:	f8ce 3000 	str.w	r3, [lr]
 8013f0c:	f10c 0118 	add.w	r1, ip, #24
 8013f10:	2250      	movs	r2, #80	; 0x50
 8013f12:	82a6      	strh	r6, [r4, #20]
 8013f14:	f104 0018 	add.w	r0, r4, #24
 8013f18:	f004 fa7c 	bl	8018414 <memcpy>
 8013f1c:	2000      	movs	r0, #0
 8013f1e:	bd70      	pop	{r4, r5, r6, pc}
 8013f20:	200b      	movs	r0, #11
 8013f22:	bd70      	pop	{r4, r5, r6, pc}
 8013f24:	200b      	movs	r0, #11
 8013f26:	4770      	bx	lr

08013f28 <rcl_node_resolve_name>:
 8013f28:	b082      	sub	sp, #8
 8013f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2e:	b091      	sub	sp, #68	; 0x44
 8013f30:	ac1a      	add	r4, sp, #104	; 0x68
 8013f32:	e884 000c 	stmia.w	r4, {r2, r3}
 8013f36:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d03b      	beq.n	8013fb6 <rcl_node_resolve_name+0x8e>
 8013f3e:	460c      	mov	r4, r1
 8013f40:	4605      	mov	r5, r0
 8013f42:	f7ff ffb7 	bl	8013eb4 <rcl_node_get_options>
 8013f46:	2800      	cmp	r0, #0
 8013f48:	d037      	beq.n	8013fba <rcl_node_resolve_name+0x92>
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f7ff ffa2 	bl	8013e94 <rcl_node_get_name>
 8013f50:	4606      	mov	r6, r0
 8013f52:	4628      	mov	r0, r5
 8013f54:	f7ff ffa6 	bl	8013ea4 <rcl_node_get_namespace>
 8013f58:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8013f5c:	4681      	mov	r9, r0
 8013f5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f62:	ad0b      	add	r5, sp, #44	; 0x2c
 8013f64:	46ac      	mov	ip, r5
 8013f66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f6a:	f8de 3000 	ldr.w	r3, [lr]
 8013f6e:	f8cc 3000 	str.w	r3, [ip]
 8013f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f74:	b1fb      	cbz	r3, 8013fb6 <rcl_node_resolve_name+0x8e>
 8013f76:	468a      	mov	sl, r1
 8013f78:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8013f7c:	f000 fc28 	bl	80147d0 <rcutils_get_zero_initialized_string_map>
 8013f80:	ab10      	add	r3, sp, #64	; 0x40
 8013f82:	9008      	str	r0, [sp, #32]
 8013f84:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013f88:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013f92:	a808      	add	r0, sp, #32
 8013f94:	f000 fc94 	bl	80148c0 <rcutils_string_map_init>
 8013f98:	4607      	mov	r7, r0
 8013f9a:	b180      	cbz	r0, 8013fbe <rcl_node_resolve_name+0x96>
 8013f9c:	f7fb f988 	bl	800f2b0 <rcutils_get_error_string>
 8013fa0:	f7fb f99e 	bl	800f2e0 <rcutils_reset_error>
 8013fa4:	2f0a      	cmp	r7, #10
 8013fa6:	bf18      	it	ne
 8013fa8:	2701      	movne	r7, #1
 8013faa:	4638      	mov	r0, r7
 8013fac:	b011      	add	sp, #68	; 0x44
 8013fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb2:	b002      	add	sp, #8
 8013fb4:	4770      	bx	lr
 8013fb6:	270b      	movs	r7, #11
 8013fb8:	e7f7      	b.n	8013faa <rcl_node_resolve_name+0x82>
 8013fba:	2701      	movs	r7, #1
 8013fbc:	e7f5      	b.n	8013faa <rcl_node_resolve_name+0x82>
 8013fbe:	9009      	str	r0, [sp, #36]	; 0x24
 8013fc0:	9007      	str	r0, [sp, #28]
 8013fc2:	a808      	add	r0, sp, #32
 8013fc4:	f003 fad2 	bl	801756c <rcl_get_default_topic_name_substitutions>
 8013fc8:	4607      	mov	r7, r0
 8013fca:	b1a8      	cbz	r0, 8013ff8 <rcl_node_resolve_name+0xd0>
 8013fcc:	280a      	cmp	r0, #10
 8013fce:	9c07      	ldr	r4, [sp, #28]
 8013fd0:	d000      	beq.n	8013fd4 <rcl_node_resolve_name+0xac>
 8013fd2:	2701      	movs	r7, #1
 8013fd4:	a808      	add	r0, sp, #32
 8013fd6:	f000 fcb3 	bl	8014940 <rcutils_string_map_fini>
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d13d      	bne.n	801405a <rcl_node_resolve_name+0x132>
 8013fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fe0:	4659      	mov	r1, fp
 8013fe2:	47d0      	blx	sl
 8013fe4:	4659      	mov	r1, fp
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	47d0      	blx	sl
 8013fea:	f1b8 0f00 	cmp.w	r8, #0
 8013fee:	d0dc      	beq.n	8013faa <rcl_node_resolve_name+0x82>
 8013ff0:	2f67      	cmp	r7, #103	; 0x67
 8013ff2:	bf08      	it	eq
 8013ff4:	2768      	moveq	r7, #104	; 0x68
 8013ff6:	e7d8      	b.n	8013faa <rcl_node_resolve_name+0x82>
 8013ff8:	ab09      	add	r3, sp, #36	; 0x24
 8013ffa:	9305      	str	r3, [sp, #20]
 8013ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ffe:	46ec      	mov	ip, sp
 8014000:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014004:	682b      	ldr	r3, [r5, #0]
 8014006:	f8cc 3000 	str.w	r3, [ip]
 801400a:	464a      	mov	r2, r9
 801400c:	4631      	mov	r1, r6
 801400e:	4620      	mov	r0, r4
 8014010:	ab08      	add	r3, sp, #32
 8014012:	f003 f94d 	bl	80172b0 <rcl_expand_topic_name>
 8014016:	4607      	mov	r7, r0
 8014018:	b9b8      	cbnz	r0, 801404a <rcl_node_resolve_name+0x122>
 801401a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801401c:	9009      	str	r0, [sp, #36]	; 0x24
 801401e:	4602      	mov	r2, r0
 8014020:	a90a      	add	r1, sp, #40	; 0x28
 8014022:	4620      	mov	r0, r4
 8014024:	f000 fd74 	bl	8014b10 <rmw_validate_full_topic_name>
 8014028:	b988      	cbnz	r0, 801404e <rcl_node_resolve_name+0x126>
 801402a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801402c:	b9d5      	cbnz	r5, 8014064 <rcl_node_resolve_name+0x13c>
 801402e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014030:	a808      	add	r0, sp, #32
 8014032:	601c      	str	r4, [r3, #0]
 8014034:	f000 fc84 	bl	8014940 <rcutils_string_map_fini>
 8014038:	4607      	mov	r7, r0
 801403a:	b1a8      	cbz	r0, 8014068 <rcl_node_resolve_name+0x140>
 801403c:	f7fb f938 	bl	800f2b0 <rcutils_get_error_string>
 8014040:	462c      	mov	r4, r5
 8014042:	f7fb f94d 	bl	800f2e0 <rcutils_reset_error>
 8014046:	2701      	movs	r7, #1
 8014048:	e7c9      	b.n	8013fde <rcl_node_resolve_name+0xb6>
 801404a:	9c07      	ldr	r4, [sp, #28]
 801404c:	e7c2      	b.n	8013fd4 <rcl_node_resolve_name+0xac>
 801404e:	f7fb f92f 	bl	800f2b0 <rcutils_get_error_string>
 8014052:	2701      	movs	r7, #1
 8014054:	f7fb f944 	bl	800f2e0 <rcutils_reset_error>
 8014058:	e7bc      	b.n	8013fd4 <rcl_node_resolve_name+0xac>
 801405a:	f7fb f929 	bl	800f2b0 <rcutils_get_error_string>
 801405e:	f7fb f93f 	bl	800f2e0 <rcutils_reset_error>
 8014062:	e7bc      	b.n	8013fde <rcl_node_resolve_name+0xb6>
 8014064:	2767      	movs	r7, #103	; 0x67
 8014066:	e7b5      	b.n	8013fd4 <rcl_node_resolve_name+0xac>
 8014068:	9809      	ldr	r0, [sp, #36]	; 0x24
 801406a:	4659      	mov	r1, fp
 801406c:	47d0      	blx	sl
 801406e:	4659      	mov	r1, fp
 8014070:	4638      	mov	r0, r7
 8014072:	47d0      	blx	sl
 8014074:	e799      	b.n	8013faa <rcl_node_resolve_name+0x82>
 8014076:	bf00      	nop

08014078 <exact_match_lookup>:
 8014078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801407a:	f102 0708 	add.w	r7, r2, #8
 801407e:	460b      	mov	r3, r1
 8014080:	4614      	mov	r4, r2
 8014082:	4606      	mov	r6, r0
 8014084:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014088:	b085      	sub	sp, #20
 801408a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801408e:	4618      	mov	r0, r3
 8014090:	4919      	ldr	r1, [pc, #100]	; (80140f8 <exact_match_lookup+0x80>)
 8014092:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014096:	f000 fa35 	bl	8014504 <rcutils_join_path>
 801409a:	7833      	ldrb	r3, [r6, #0]
 801409c:	2b2f      	cmp	r3, #47	; 0x2f
 801409e:	4605      	mov	r5, r0
 80140a0:	d023      	beq.n	80140ea <exact_match_lookup+0x72>
 80140a2:	f104 030c 	add.w	r3, r4, #12
 80140a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80140aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80140ae:	1c70      	adds	r0, r6, #1
 80140b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80140b4:	f000 fa2c 	bl	8014510 <rcutils_to_native_path>
 80140b8:	4606      	mov	r6, r0
 80140ba:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80140be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80140c2:	4631      	mov	r1, r6
 80140c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80140c8:	4628      	mov	r0, r5
 80140ca:	f000 fa1b 	bl	8014504 <rcutils_join_path>
 80140ce:	6862      	ldr	r2, [r4, #4]
 80140d0:	6921      	ldr	r1, [r4, #16]
 80140d2:	4603      	mov	r3, r0
 80140d4:	4630      	mov	r0, r6
 80140d6:	461e      	mov	r6, r3
 80140d8:	4790      	blx	r2
 80140da:	4628      	mov	r0, r5
 80140dc:	6863      	ldr	r3, [r4, #4]
 80140de:	6921      	ldr	r1, [r4, #16]
 80140e0:	4798      	blx	r3
 80140e2:	4635      	mov	r5, r6
 80140e4:	4628      	mov	r0, r5
 80140e6:	b005      	add	sp, #20
 80140e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ea:	7873      	ldrb	r3, [r6, #1]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d1d8      	bne.n	80140a2 <exact_match_lookup+0x2a>
 80140f0:	4628      	mov	r0, r5
 80140f2:	b005      	add	sp, #20
 80140f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140f6:	bf00      	nop
 80140f8:	080195d8 	.word	0x080195d8

080140fc <rcl_get_secure_root>:
 80140fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014100:	b085      	sub	sp, #20
 8014102:	b168      	cbz	r0, 8014120 <rcl_get_secure_root+0x24>
 8014104:	4607      	mov	r7, r0
 8014106:	4608      	mov	r0, r1
 8014108:	460c      	mov	r4, r1
 801410a:	f7fb f8c3 	bl	800f294 <rcutils_allocator_is_valid>
 801410e:	b138      	cbz	r0, 8014120 <rcl_get_secure_root+0x24>
 8014110:	2300      	movs	r3, #0
 8014112:	482d      	ldr	r0, [pc, #180]	; (80141c8 <rcl_get_secure_root+0xcc>)
 8014114:	9303      	str	r3, [sp, #12]
 8014116:	a903      	add	r1, sp, #12
 8014118:	f000 f9da 	bl	80144d0 <rcutils_get_env>
 801411c:	4605      	mov	r5, r0
 801411e:	b120      	cbz	r0, 801412a <rcl_get_secure_root+0x2e>
 8014120:	2500      	movs	r5, #0
 8014122:	4628      	mov	r0, r5
 8014124:	b005      	add	sp, #20
 8014126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801412a:	9b03      	ldr	r3, [sp, #12]
 801412c:	781a      	ldrb	r2, [r3, #0]
 801412e:	2a00      	cmp	r2, #0
 8014130:	d0f6      	beq.n	8014120 <rcl_get_secure_root+0x24>
 8014132:	f104 090c 	add.w	r9, r4, #12
 8014136:	e899 0003 	ldmia.w	r9, {r0, r1}
 801413a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801413e:	4618      	mov	r0, r3
 8014140:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014144:	f000 fb06 	bl	8014754 <rcutils_strdup>
 8014148:	4680      	mov	r8, r0
 801414a:	2800      	cmp	r0, #0
 801414c:	d0e8      	beq.n	8014120 <rcl_get_secure_root+0x24>
 801414e:	481f      	ldr	r0, [pc, #124]	; (80141cc <rcl_get_secure_root+0xd0>)
 8014150:	9503      	str	r5, [sp, #12]
 8014152:	a903      	add	r1, sp, #12
 8014154:	f000 f9bc 	bl	80144d0 <rcutils_get_env>
 8014158:	b160      	cbz	r0, 8014174 <rcl_get_secure_root+0x78>
 801415a:	2600      	movs	r6, #0
 801415c:	6863      	ldr	r3, [r4, #4]
 801415e:	6921      	ldr	r1, [r4, #16]
 8014160:	4630      	mov	r0, r6
 8014162:	4798      	blx	r3
 8014164:	4640      	mov	r0, r8
 8014166:	6863      	ldr	r3, [r4, #4]
 8014168:	6921      	ldr	r1, [r4, #16]
 801416a:	4798      	blx	r3
 801416c:	4628      	mov	r0, r5
 801416e:	b005      	add	sp, #20
 8014170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014174:	9b03      	ldr	r3, [sp, #12]
 8014176:	781e      	ldrb	r6, [r3, #0]
 8014178:	b1f6      	cbz	r6, 80141b8 <rcl_get_secure_root+0xbc>
 801417a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801417e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014182:	4618      	mov	r0, r3
 8014184:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014188:	f000 fae4 	bl	8014754 <rcutils_strdup>
 801418c:	4606      	mov	r6, r0
 801418e:	2800      	cmp	r0, #0
 8014190:	d0e3      	beq.n	801415a <rcl_get_secure_root+0x5e>
 8014192:	4622      	mov	r2, r4
 8014194:	4641      	mov	r1, r8
 8014196:	f7ff ff6f 	bl	8014078 <exact_match_lookup>
 801419a:	4605      	mov	r5, r0
 801419c:	2d00      	cmp	r5, #0
 801419e:	d0dd      	beq.n	801415c <rcl_get_secure_root+0x60>
 80141a0:	4628      	mov	r0, r5
 80141a2:	f000 f9ad 	bl	8014500 <rcutils_is_directory>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d1d7      	bne.n	801415c <rcl_get_secure_root+0x60>
 80141ac:	4628      	mov	r0, r5
 80141ae:	6921      	ldr	r1, [r4, #16]
 80141b0:	461d      	mov	r5, r3
 80141b2:	6863      	ldr	r3, [r4, #4]
 80141b4:	4798      	blx	r3
 80141b6:	e7d1      	b.n	801415c <rcl_get_secure_root+0x60>
 80141b8:	4622      	mov	r2, r4
 80141ba:	4638      	mov	r0, r7
 80141bc:	4641      	mov	r1, r8
 80141be:	f7ff ff5b 	bl	8014078 <exact_match_lookup>
 80141c2:	4605      	mov	r5, r0
 80141c4:	e7ea      	b.n	801419c <rcl_get_secure_root+0xa0>
 80141c6:	bf00      	nop
 80141c8:	080195e4 	.word	0x080195e4
 80141cc:	080195fc 	.word	0x080195fc

080141d0 <rcl_get_security_options_from_environment>:
 80141d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d4:	b082      	sub	sp, #8
 80141d6:	2300      	movs	r3, #0
 80141d8:	4606      	mov	r6, r0
 80141da:	460f      	mov	r7, r1
 80141dc:	4820      	ldr	r0, [pc, #128]	; (8014260 <rcl_get_security_options_from_environment+0x90>)
 80141de:	9301      	str	r3, [sp, #4]
 80141e0:	a901      	add	r1, sp, #4
 80141e2:	4690      	mov	r8, r2
 80141e4:	f000 f974 	bl	80144d0 <rcutils_get_env>
 80141e8:	b120      	cbz	r0, 80141f4 <rcl_get_security_options_from_environment+0x24>
 80141ea:	2501      	movs	r5, #1
 80141ec:	4628      	mov	r0, r5
 80141ee:	b002      	add	sp, #8
 80141f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f4:	491b      	ldr	r1, [pc, #108]	; (8014264 <rcl_get_security_options_from_environment+0x94>)
 80141f6:	4604      	mov	r4, r0
 80141f8:	9801      	ldr	r0, [sp, #4]
 80141fa:	f7eb ffe9 	bl	80001d0 <strcmp>
 80141fe:	4605      	mov	r5, r0
 8014200:	b9e8      	cbnz	r0, 801423e <rcl_get_security_options_from_environment+0x6e>
 8014202:	9001      	str	r0, [sp, #4]
 8014204:	f1b8 0f00 	cmp.w	r8, #0
 8014208:	d020      	beq.n	801424c <rcl_get_security_options_from_environment+0x7c>
 801420a:	4817      	ldr	r0, [pc, #92]	; (8014268 <rcl_get_security_options_from_environment+0x98>)
 801420c:	a901      	add	r1, sp, #4
 801420e:	f000 f95f 	bl	80144d0 <rcutils_get_env>
 8014212:	2800      	cmp	r0, #0
 8014214:	d1e9      	bne.n	80141ea <rcl_get_security_options_from_environment+0x1a>
 8014216:	4915      	ldr	r1, [pc, #84]	; (801426c <rcl_get_security_options_from_environment+0x9c>)
 8014218:	9801      	ldr	r0, [sp, #4]
 801421a:	f7eb ffd9 	bl	80001d0 <strcmp>
 801421e:	fab0 f080 	clz	r0, r0
 8014222:	0940      	lsrs	r0, r0, #5
 8014224:	f888 0000 	strb.w	r0, [r8]
 8014228:	4639      	mov	r1, r7
 801422a:	4630      	mov	r0, r6
 801422c:	f7ff ff66 	bl	80140fc <rcl_get_secure_root>
 8014230:	b170      	cbz	r0, 8014250 <rcl_get_security_options_from_environment+0x80>
 8014232:	f8c8 0004 	str.w	r0, [r8, #4]
 8014236:	4628      	mov	r0, r5
 8014238:	b002      	add	sp, #8
 801423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801423e:	4625      	mov	r5, r4
 8014240:	4628      	mov	r0, r5
 8014242:	f888 4000 	strb.w	r4, [r8]
 8014246:	b002      	add	sp, #8
 8014248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424c:	250b      	movs	r5, #11
 801424e:	e7cd      	b.n	80141ec <rcl_get_security_options_from_environment+0x1c>
 8014250:	f898 5000 	ldrb.w	r5, [r8]
 8014254:	f1a5 0501 	sub.w	r5, r5, #1
 8014258:	fab5 f585 	clz	r5, r5
 801425c:	096d      	lsrs	r5, r5, #5
 801425e:	e7c5      	b.n	80141ec <rcl_get_security_options_from_environment+0x1c>
 8014260:	0801959c 	.word	0x0801959c
 8014264:	080195b0 	.word	0x080195b0
 8014268:	080195b8 	.word	0x080195b8
 801426c:	080195d0 	.word	0x080195d0

08014270 <rcl_get_system_time>:
 8014270:	4608      	mov	r0, r1
 8014272:	f000 bbd9 	b.w	8014a28 <rcutils_system_time_now>
 8014276:	bf00      	nop

08014278 <rcl_get_steady_time>:
 8014278:	4608      	mov	r0, r1
 801427a:	f000 bbfd 	b.w	8014a78 <rcutils_steady_time_now>
 801427e:	bf00      	nop

08014280 <rcl_get_ros_time>:
 8014280:	7a03      	ldrb	r3, [r0, #8]
 8014282:	b510      	push	{r4, lr}
 8014284:	460c      	mov	r4, r1
 8014286:	b133      	cbz	r3, 8014296 <rcl_get_ros_time+0x16>
 8014288:	2105      	movs	r1, #5
 801428a:	f000 f8eb 	bl	8014464 <__atomic_load_8>
 801428e:	e9c4 0100 	strd	r0, r1, [r4]
 8014292:	2000      	movs	r0, #0
 8014294:	bd10      	pop	{r4, pc}
 8014296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801429a:	4608      	mov	r0, r1
 801429c:	f000 bbc4 	b.w	8014a28 <rcutils_system_time_now>

080142a0 <rcl_clock_init>:
 80142a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142a2:	4605      	mov	r5, r0
 80142a4:	4610      	mov	r0, r2
 80142a6:	4614      	mov	r4, r2
 80142a8:	460e      	mov	r6, r1
 80142aa:	f7fa fff3 	bl	800f294 <rcutils_allocator_is_valid>
 80142ae:	b128      	cbz	r0, 80142bc <rcl_clock_init+0x1c>
 80142b0:	2d03      	cmp	r5, #3
 80142b2:	d803      	bhi.n	80142bc <rcl_clock_init+0x1c>
 80142b4:	e8df f005 	tbb	[pc, r5]
 80142b8:	06532e1d 	.word	0x06532e1d
 80142bc:	f04f 0c0b 	mov.w	ip, #11
 80142c0:	4660      	mov	r0, ip
 80142c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142c4:	2e00      	cmp	r6, #0
 80142c6:	d0f9      	beq.n	80142bc <rcl_clock_init+0x1c>
 80142c8:	2c00      	cmp	r4, #0
 80142ca:	d0f7      	beq.n	80142bc <rcl_clock_init+0x1c>
 80142cc:	2300      	movs	r3, #0
 80142ce:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80142d2:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8014388 <rcl_clock_init+0xe8>
 80142d6:	6133      	str	r3, [r6, #16]
 80142d8:	f106 0514 	add.w	r5, r6, #20
 80142dc:	469c      	mov	ip, r3
 80142de:	2703      	movs	r7, #3
 80142e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80142e4:	6823      	ldr	r3, [r4, #0]
 80142e6:	602b      	str	r3, [r5, #0]
 80142e8:	7037      	strb	r7, [r6, #0]
 80142ea:	f8c6 e00c 	str.w	lr, [r6, #12]
 80142ee:	4660      	mov	r0, ip
 80142f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142f2:	2e00      	cmp	r6, #0
 80142f4:	d0e2      	beq.n	80142bc <rcl_clock_init+0x1c>
 80142f6:	2300      	movs	r3, #0
 80142f8:	7033      	strb	r3, [r6, #0]
 80142fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80142fe:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014302:	469c      	mov	ip, r3
 8014304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014306:	f106 0514 	add.w	r5, r6, #20
 801430a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801430c:	6823      	ldr	r3, [r4, #0]
 801430e:	602b      	str	r3, [r5, #0]
 8014310:	4660      	mov	r0, ip
 8014312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014314:	2e00      	cmp	r6, #0
 8014316:	d0d1      	beq.n	80142bc <rcl_clock_init+0x1c>
 8014318:	2c00      	cmp	r4, #0
 801431a:	d0cf      	beq.n	80142bc <rcl_clock_init+0x1c>
 801431c:	2700      	movs	r7, #0
 801431e:	7037      	strb	r7, [r6, #0]
 8014320:	46a4      	mov	ip, r4
 8014322:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014326:	f106 0514 	add.w	r5, r6, #20
 801432a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801432e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014334:	f8dc 3000 	ldr.w	r3, [ip]
 8014338:	602b      	str	r3, [r5, #0]
 801433a:	6921      	ldr	r1, [r4, #16]
 801433c:	6823      	ldr	r3, [r4, #0]
 801433e:	2010      	movs	r0, #16
 8014340:	4798      	blx	r3
 8014342:	6130      	str	r0, [r6, #16]
 8014344:	b1d0      	cbz	r0, 801437c <rcl_clock_init+0xdc>
 8014346:	2200      	movs	r2, #0
 8014348:	2300      	movs	r3, #0
 801434a:	e9c0 2300 	strd	r2, r3, [r0]
 801434e:	2301      	movs	r3, #1
 8014350:	7207      	strb	r7, [r0, #8]
 8014352:	4a0c      	ldr	r2, [pc, #48]	; (8014384 <rcl_clock_init+0xe4>)
 8014354:	7033      	strb	r3, [r6, #0]
 8014356:	46bc      	mov	ip, r7
 8014358:	60f2      	str	r2, [r6, #12]
 801435a:	4660      	mov	r0, ip
 801435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801435e:	2e00      	cmp	r6, #0
 8014360:	d0ac      	beq.n	80142bc <rcl_clock_init+0x1c>
 8014362:	2c00      	cmp	r4, #0
 8014364:	d0aa      	beq.n	80142bc <rcl_clock_init+0x1c>
 8014366:	2300      	movs	r3, #0
 8014368:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801436c:	f8df e01c 	ldr.w	lr, [pc, #28]	; 801438c <rcl_clock_init+0xec>
 8014370:	6133      	str	r3, [r6, #16]
 8014372:	f106 0514 	add.w	r5, r6, #20
 8014376:	469c      	mov	ip, r3
 8014378:	2702      	movs	r7, #2
 801437a:	e7b1      	b.n	80142e0 <rcl_clock_init+0x40>
 801437c:	f04f 0c0a 	mov.w	ip, #10
 8014380:	e79e      	b.n	80142c0 <rcl_clock_init+0x20>
 8014382:	bf00      	nop
 8014384:	08014281 	.word	0x08014281
 8014388:	08014279 	.word	0x08014279
 801438c:	08014271 	.word	0x08014271

08014390 <rcl_validate_enclave_name_with_size>:
 8014390:	b378      	cbz	r0, 80143f2 <rcl_validate_enclave_name_with_size+0x62>
 8014392:	b570      	push	{r4, r5, r6, lr}
 8014394:	4615      	mov	r5, r2
 8014396:	b0c2      	sub	sp, #264	; 0x108
 8014398:	b302      	cbz	r2, 80143dc <rcl_validate_enclave_name_with_size+0x4c>
 801439a:	461e      	mov	r6, r3
 801439c:	466a      	mov	r2, sp
 801439e:	ab01      	add	r3, sp, #4
 80143a0:	460c      	mov	r4, r1
 80143a2:	f000 fc2b 	bl	8014bfc <rmw_validate_namespace_with_size>
 80143a6:	4684      	mov	ip, r0
 80143a8:	b9e8      	cbnz	r0, 80143e6 <rcl_validate_enclave_name_with_size+0x56>
 80143aa:	9b00      	ldr	r3, [sp, #0]
 80143ac:	b923      	cbnz	r3, 80143b8 <rcl_validate_enclave_name_with_size+0x28>
 80143ae:	2300      	movs	r3, #0
 80143b0:	602b      	str	r3, [r5, #0]
 80143b2:	4660      	mov	r0, ip
 80143b4:	b042      	add	sp, #264	; 0x108
 80143b6:	bd70      	pop	{r4, r5, r6, pc}
 80143b8:	2b07      	cmp	r3, #7
 80143ba:	d007      	beq.n	80143cc <rcl_validate_enclave_name_with_size+0x3c>
 80143bc:	1e5a      	subs	r2, r3, #1
 80143be:	2a05      	cmp	r2, #5
 80143c0:	d833      	bhi.n	801442a <rcl_validate_enclave_name_with_size+0x9a>
 80143c2:	e8df f002 	tbb	[pc, r2]
 80143c6:	2c2f      	.short	0x2c2f
 80143c8:	1a232629 	.word	0x1a232629
 80143cc:	2cff      	cmp	r4, #255	; 0xff
 80143ce:	d9ee      	bls.n	80143ae <rcl_validate_enclave_name_with_size+0x1e>
 80143d0:	602b      	str	r3, [r5, #0]
 80143d2:	2e00      	cmp	r6, #0
 80143d4:	d0ed      	beq.n	80143b2 <rcl_validate_enclave_name_with_size+0x22>
 80143d6:	23fe      	movs	r3, #254	; 0xfe
 80143d8:	6033      	str	r3, [r6, #0]
 80143da:	e7ea      	b.n	80143b2 <rcl_validate_enclave_name_with_size+0x22>
 80143dc:	f04f 0c0b 	mov.w	ip, #11
 80143e0:	4660      	mov	r0, ip
 80143e2:	b042      	add	sp, #264	; 0x108
 80143e4:	bd70      	pop	{r4, r5, r6, pc}
 80143e6:	f7ff f953 	bl	8013690 <rcl_convert_rmw_ret_to_rcl_ret>
 80143ea:	4684      	mov	ip, r0
 80143ec:	4660      	mov	r0, ip
 80143ee:	b042      	add	sp, #264	; 0x108
 80143f0:	bd70      	pop	{r4, r5, r6, pc}
 80143f2:	f04f 0c0b 	mov.w	ip, #11
 80143f6:	4660      	mov	r0, ip
 80143f8:	4770      	bx	lr
 80143fa:	2306      	movs	r3, #6
 80143fc:	602b      	str	r3, [r5, #0]
 80143fe:	2e00      	cmp	r6, #0
 8014400:	d0d7      	beq.n	80143b2 <rcl_validate_enclave_name_with_size+0x22>
 8014402:	9b01      	ldr	r3, [sp, #4]
 8014404:	6033      	str	r3, [r6, #0]
 8014406:	4660      	mov	r0, ip
 8014408:	b042      	add	sp, #264	; 0x108
 801440a:	bd70      	pop	{r4, r5, r6, pc}
 801440c:	2305      	movs	r3, #5
 801440e:	602b      	str	r3, [r5, #0]
 8014410:	e7f5      	b.n	80143fe <rcl_validate_enclave_name_with_size+0x6e>
 8014412:	2304      	movs	r3, #4
 8014414:	602b      	str	r3, [r5, #0]
 8014416:	e7f2      	b.n	80143fe <rcl_validate_enclave_name_with_size+0x6e>
 8014418:	2303      	movs	r3, #3
 801441a:	602b      	str	r3, [r5, #0]
 801441c:	e7ef      	b.n	80143fe <rcl_validate_enclave_name_with_size+0x6e>
 801441e:	2302      	movs	r3, #2
 8014420:	602b      	str	r3, [r5, #0]
 8014422:	e7ec      	b.n	80143fe <rcl_validate_enclave_name_with_size+0x6e>
 8014424:	2301      	movs	r3, #1
 8014426:	602b      	str	r3, [r5, #0]
 8014428:	e7e9      	b.n	80143fe <rcl_validate_enclave_name_with_size+0x6e>
 801442a:	4a04      	ldr	r2, [pc, #16]	; (801443c <rcl_validate_enclave_name_with_size+0xac>)
 801442c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014430:	a802      	add	r0, sp, #8
 8014432:	f000 f963 	bl	80146fc <rcutils_snprintf>
 8014436:	f04f 0c01 	mov.w	ip, #1
 801443a:	e7ba      	b.n	80143b2 <rcl_validate_enclave_name_with_size+0x22>
 801443c:	0801961c 	.word	0x0801961c

08014440 <rcl_validate_enclave_name>:
 8014440:	b168      	cbz	r0, 801445e <rcl_validate_enclave_name+0x1e>
 8014442:	b570      	push	{r4, r5, r6, lr}
 8014444:	460d      	mov	r5, r1
 8014446:	4616      	mov	r6, r2
 8014448:	4604      	mov	r4, r0
 801444a:	f7eb fecb 	bl	80001e4 <strlen>
 801444e:	4633      	mov	r3, r6
 8014450:	4601      	mov	r1, r0
 8014452:	462a      	mov	r2, r5
 8014454:	4620      	mov	r0, r4
 8014456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801445a:	f7ff bf99 	b.w	8014390 <rcl_validate_enclave_name_with_size>
 801445e:	200b      	movs	r0, #11
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop

08014464 <__atomic_load_8>:
 8014464:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014468:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801446c:	4a15      	ldr	r2, [pc, #84]	; (80144c4 <__atomic_load_8+0x60>)
 801446e:	4b16      	ldr	r3, [pc, #88]	; (80144c8 <__atomic_load_8+0x64>)
 8014470:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014474:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014478:	fb02 f101 	mul.w	r1, r2, r1
 801447c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014480:	fba3 2301 	umull	r2, r3, r3, r1
 8014484:	091b      	lsrs	r3, r3, #4
 8014486:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801448a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801448e:	b4d0      	push	{r4, r6, r7}
 8014490:	4c0e      	ldr	r4, [pc, #56]	; (80144cc <__atomic_load_8+0x68>)
 8014492:	1ac9      	subs	r1, r1, r3
 8014494:	1862      	adds	r2, r4, r1
 8014496:	f04f 0c01 	mov.w	ip, #1
 801449a:	e8d2 3f4f 	ldrexb	r3, [r2]
 801449e:	e8c2 cf46 	strexb	r6, ip, [r2]
 80144a2:	2e00      	cmp	r6, #0
 80144a4:	d1f9      	bne.n	801449a <__atomic_load_8+0x36>
 80144a6:	f3bf 8f5b 	dmb	ish
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d1f4      	bne.n	801449a <__atomic_load_8+0x36>
 80144b0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80144b4:	f3bf 8f5b 	dmb	ish
 80144b8:	5463      	strb	r3, [r4, r1]
 80144ba:	4630      	mov	r0, r6
 80144bc:	4639      	mov	r1, r7
 80144be:	bcd0      	pop	{r4, r6, r7}
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	27d4eb2d 	.word	0x27d4eb2d
 80144c8:	b21642c9 	.word	0xb21642c9
 80144cc:	2000e268 	.word	0x2000e268

080144d0 <rcutils_get_env>:
 80144d0:	b168      	cbz	r0, 80144ee <rcutils_get_env+0x1e>
 80144d2:	b510      	push	{r4, lr}
 80144d4:	460c      	mov	r4, r1
 80144d6:	b129      	cbz	r1, 80144e4 <rcutils_get_env+0x14>
 80144d8:	f003 fb3e 	bl	8017b58 <getenv>
 80144dc:	b120      	cbz	r0, 80144e8 <rcutils_get_env+0x18>
 80144de:	6020      	str	r0, [r4, #0]
 80144e0:	2000      	movs	r0, #0
 80144e2:	bd10      	pop	{r4, pc}
 80144e4:	4803      	ldr	r0, [pc, #12]	; (80144f4 <rcutils_get_env+0x24>)
 80144e6:	bd10      	pop	{r4, pc}
 80144e8:	4b03      	ldr	r3, [pc, #12]	; (80144f8 <rcutils_get_env+0x28>)
 80144ea:	6023      	str	r3, [r4, #0]
 80144ec:	bd10      	pop	{r4, pc}
 80144ee:	4803      	ldr	r0, [pc, #12]	; (80144fc <rcutils_get_env+0x2c>)
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	08019698 	.word	0x08019698
 80144f8:	080197bc 	.word	0x080197bc
 80144fc:	0801967c 	.word	0x0801967c

08014500 <rcutils_is_directory>:
 8014500:	2000      	movs	r0, #0
 8014502:	4770      	bx	lr

08014504 <rcutils_join_path>:
 8014504:	b082      	sub	sp, #8
 8014506:	e88d 000c 	stmia.w	sp, {r2, r3}
 801450a:	2000      	movs	r0, #0
 801450c:	b002      	add	sp, #8
 801450e:	4770      	bx	lr

08014510 <rcutils_to_native_path>:
 8014510:	b084      	sub	sp, #16
 8014512:	a801      	add	r0, sp, #4
 8014514:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014518:	b004      	add	sp, #16
 801451a:	2000      	movs	r0, #0
 801451c:	4770      	bx	lr
 801451e:	bf00      	nop

08014520 <rcutils_format_string_limit>:
 8014520:	b40f      	push	{r0, r1, r2, r3}
 8014522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014524:	b083      	sub	sp, #12
 8014526:	ac08      	add	r4, sp, #32
 8014528:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801452a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801452e:	b34e      	cbz	r6, 8014584 <rcutils_format_string_limit+0x64>
 8014530:	a808      	add	r0, sp, #32
 8014532:	f7fa feaf 	bl	800f294 <rcutils_allocator_is_valid>
 8014536:	b328      	cbz	r0, 8014584 <rcutils_format_string_limit+0x64>
 8014538:	2100      	movs	r1, #0
 801453a:	ab0f      	add	r3, sp, #60	; 0x3c
 801453c:	4632      	mov	r2, r6
 801453e:	4608      	mov	r0, r1
 8014540:	e9cd 3300 	strd	r3, r3, [sp]
 8014544:	f000 f8f4 	bl	8014730 <rcutils_vsnprintf>
 8014548:	1c43      	adds	r3, r0, #1
 801454a:	4605      	mov	r5, r0
 801454c:	d01a      	beq.n	8014584 <rcutils_format_string_limit+0x64>
 801454e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014550:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014552:	1c47      	adds	r7, r0, #1
 8014554:	429f      	cmp	r7, r3
 8014556:	bf84      	itt	hi
 8014558:	461f      	movhi	r7, r3
 801455a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 801455e:	4638      	mov	r0, r7
 8014560:	9b08      	ldr	r3, [sp, #32]
 8014562:	4798      	blx	r3
 8014564:	4604      	mov	r4, r0
 8014566:	b168      	cbz	r0, 8014584 <rcutils_format_string_limit+0x64>
 8014568:	9b01      	ldr	r3, [sp, #4]
 801456a:	4632      	mov	r2, r6
 801456c:	4639      	mov	r1, r7
 801456e:	f000 f8df 	bl	8014730 <rcutils_vsnprintf>
 8014572:	2800      	cmp	r0, #0
 8014574:	db02      	blt.n	801457c <rcutils_format_string_limit+0x5c>
 8014576:	2300      	movs	r3, #0
 8014578:	5563      	strb	r3, [r4, r5]
 801457a:	e004      	b.n	8014586 <rcutils_format_string_limit+0x66>
 801457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801457e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014580:	4620      	mov	r0, r4
 8014582:	4798      	blx	r3
 8014584:	2400      	movs	r4, #0
 8014586:	4620      	mov	r0, r4
 8014588:	b003      	add	sp, #12
 801458a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801458e:	b004      	add	sp, #16
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop

08014594 <rcutils_repl_str>:
 8014594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014598:	ed2d 8b02 	vpush	{d8}
 801459c:	b087      	sub	sp, #28
 801459e:	4680      	mov	r8, r0
 80145a0:	4608      	mov	r0, r1
 80145a2:	f8cd 8004 	str.w	r8, [sp, #4]
 80145a6:	ee08 2a10 	vmov	s16, r2
 80145aa:	468a      	mov	sl, r1
 80145ac:	4699      	mov	r9, r3
 80145ae:	f7eb fe19 	bl	80001e4 <strlen>
 80145b2:	2600      	movs	r6, #0
 80145b4:	4647      	mov	r7, r8
 80145b6:	9002      	str	r0, [sp, #8]
 80145b8:	46b3      	mov	fp, r6
 80145ba:	2510      	movs	r5, #16
 80145bc:	46b0      	mov	r8, r6
 80145be:	e01d      	b.n	80145fc <rcutils_repl_str+0x68>
 80145c0:	f10b 0b01 	add.w	fp, fp, #1
 80145c4:	455e      	cmp	r6, fp
 80145c6:	d211      	bcs.n	80145ec <rcutils_repl_str+0x58>
 80145c8:	442e      	add	r6, r5
 80145ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80145ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80145d2:	00b1      	lsls	r1, r6, #2
 80145d4:	4798      	blx	r3
 80145d6:	2800      	cmp	r0, #0
 80145d8:	f000 8088 	beq.w	80146ec <rcutils_repl_str+0x158>
 80145dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145e0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80145e4:	4680      	mov	r8, r0
 80145e6:	bf28      	it	cs
 80145e8:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80145ec:	9a01      	ldr	r2, [sp, #4]
 80145ee:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80145f2:	1aa2      	subs	r2, r4, r2
 80145f4:	f843 2c04 	str.w	r2, [r3, #-4]
 80145f8:	9b02      	ldr	r3, [sp, #8]
 80145fa:	18e7      	adds	r7, r4, r3
 80145fc:	4651      	mov	r1, sl
 80145fe:	4638      	mov	r0, r7
 8014600:	f003 fe67 	bl	80182d2 <strstr>
 8014604:	4604      	mov	r4, r0
 8014606:	4640      	mov	r0, r8
 8014608:	2c00      	cmp	r4, #0
 801460a:	d1d9      	bne.n	80145c0 <rcutils_repl_str+0x2c>
 801460c:	46b8      	mov	r8, r7
 801460e:	4607      	mov	r7, r0
 8014610:	4640      	mov	r0, r8
 8014612:	f7eb fde7 	bl	80001e4 <strlen>
 8014616:	9b01      	ldr	r3, [sp, #4]
 8014618:	eba8 0303 	sub.w	r3, r8, r3
 801461c:	181c      	adds	r4, r3, r0
 801461e:	9404      	str	r4, [sp, #16]
 8014620:	f1bb 0f00 	cmp.w	fp, #0
 8014624:	d04a      	beq.n	80146bc <rcutils_repl_str+0x128>
 8014626:	ee18 0a10 	vmov	r0, s16
 801462a:	f7eb fddb 	bl	80001e4 <strlen>
 801462e:	9b02      	ldr	r3, [sp, #8]
 8014630:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014634:	1ac3      	subs	r3, r0, r3
 8014636:	fb0b 4303 	mla	r3, fp, r3, r4
 801463a:	461a      	mov	r2, r3
 801463c:	9305      	str	r3, [sp, #20]
 801463e:	4606      	mov	r6, r0
 8014640:	f8d9 3000 	ldr.w	r3, [r9]
 8014644:	1c50      	adds	r0, r2, #1
 8014646:	4798      	blx	r3
 8014648:	9003      	str	r0, [sp, #12]
 801464a:	2800      	cmp	r0, #0
 801464c:	d04f      	beq.n	80146ee <rcutils_repl_str+0x15a>
 801464e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014652:	683a      	ldr	r2, [r7, #0]
 8014654:	4641      	mov	r1, r8
 8014656:	f003 fedd 	bl	8018414 <memcpy>
 801465a:	683d      	ldr	r5, [r7, #0]
 801465c:	9b03      	ldr	r3, [sp, #12]
 801465e:	9701      	str	r7, [sp, #4]
 8014660:	46ba      	mov	sl, r7
 8014662:	441d      	add	r5, r3
 8014664:	9f02      	ldr	r7, [sp, #8]
 8014666:	f8cd 9008 	str.w	r9, [sp, #8]
 801466a:	2401      	movs	r4, #1
 801466c:	46d1      	mov	r9, sl
 801466e:	ee18 aa10 	vmov	sl, s16
 8014672:	e00a      	b.n	801468a <rcutils_repl_str+0xf6>
 8014674:	f8d9 5000 	ldr.w	r5, [r9]
 8014678:	1aaa      	subs	r2, r5, r2
 801467a:	1885      	adds	r5, r0, r2
 801467c:	f003 feca 	bl	8018414 <memcpy>
 8014680:	45a3      	cmp	fp, r4
 8014682:	f104 0201 	add.w	r2, r4, #1
 8014686:	d935      	bls.n	80146f4 <rcutils_repl_str+0x160>
 8014688:	4614      	mov	r4, r2
 801468a:	4632      	mov	r2, r6
 801468c:	4651      	mov	r1, sl
 801468e:	4628      	mov	r0, r5
 8014690:	f003 fec0 	bl	8018414 <memcpy>
 8014694:	f859 2b04 	ldr.w	r2, [r9], #4
 8014698:	45a3      	cmp	fp, r4
 801469a:	443a      	add	r2, r7
 801469c:	eb05 0006 	add.w	r0, r5, r6
 80146a0:	eb08 0102 	add.w	r1, r8, r2
 80146a4:	d1e6      	bne.n	8014674 <rcutils_repl_str+0xe0>
 80146a6:	9b04      	ldr	r3, [sp, #16]
 80146a8:	1a9a      	subs	r2, r3, r2
 80146aa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80146ae:	f003 feb1 	bl	8018414 <memcpy>
 80146b2:	9a03      	ldr	r2, [sp, #12]
 80146b4:	9905      	ldr	r1, [sp, #20]
 80146b6:	2300      	movs	r3, #0
 80146b8:	5453      	strb	r3, [r2, r1]
 80146ba:	e00b      	b.n	80146d4 <rcutils_repl_str+0x140>
 80146bc:	4620      	mov	r0, r4
 80146be:	f8d9 3000 	ldr.w	r3, [r9]
 80146c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80146c6:	3001      	adds	r0, #1
 80146c8:	4798      	blx	r3
 80146ca:	9003      	str	r0, [sp, #12]
 80146cc:	b110      	cbz	r0, 80146d4 <rcutils_repl_str+0x140>
 80146ce:	9901      	ldr	r1, [sp, #4]
 80146d0:	f003 fe98 	bl	8018404 <strcpy>
 80146d4:	4638      	mov	r0, r7
 80146d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80146da:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80146de:	4798      	blx	r3
 80146e0:	9803      	ldr	r0, [sp, #12]
 80146e2:	b007      	add	sp, #28
 80146e4:	ecbd 8b02 	vpop	{d8}
 80146e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ec:	4647      	mov	r7, r8
 80146ee:	2300      	movs	r3, #0
 80146f0:	9303      	str	r3, [sp, #12]
 80146f2:	e7ef      	b.n	80146d4 <rcutils_repl_str+0x140>
 80146f4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80146f8:	e7db      	b.n	80146b2 <rcutils_repl_str+0x11e>
 80146fa:	bf00      	nop

080146fc <rcutils_snprintf>:
 80146fc:	b40c      	push	{r2, r3}
 80146fe:	b530      	push	{r4, r5, lr}
 8014700:	b083      	sub	sp, #12
 8014702:	ab06      	add	r3, sp, #24
 8014704:	f853 2b04 	ldr.w	r2, [r3], #4
 8014708:	9301      	str	r3, [sp, #4]
 801470a:	b152      	cbz	r2, 8014722 <rcutils_snprintf+0x26>
 801470c:	b138      	cbz	r0, 801471e <rcutils_snprintf+0x22>
 801470e:	b141      	cbz	r1, 8014722 <rcutils_snprintf+0x26>
 8014710:	f003 fdaa 	bl	8018268 <vsniprintf>
 8014714:	b003      	add	sp, #12
 8014716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801471a:	b002      	add	sp, #8
 801471c:	4770      	bx	lr
 801471e:	2900      	cmp	r1, #0
 8014720:	d0f6      	beq.n	8014710 <rcutils_snprintf+0x14>
 8014722:	f003 fe43 	bl	80183ac <__errno>
 8014726:	2316      	movs	r3, #22
 8014728:	6003      	str	r3, [r0, #0]
 801472a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801472e:	e7f1      	b.n	8014714 <rcutils_snprintf+0x18>

08014730 <rcutils_vsnprintf>:
 8014730:	b570      	push	{r4, r5, r6, lr}
 8014732:	b13a      	cbz	r2, 8014744 <rcutils_vsnprintf+0x14>
 8014734:	b120      	cbz	r0, 8014740 <rcutils_vsnprintf+0x10>
 8014736:	b129      	cbz	r1, 8014744 <rcutils_vsnprintf+0x14>
 8014738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801473c:	f003 bd94 	b.w	8018268 <vsniprintf>
 8014740:	2900      	cmp	r1, #0
 8014742:	d0f9      	beq.n	8014738 <rcutils_vsnprintf+0x8>
 8014744:	f003 fe32 	bl	80183ac <__errno>
 8014748:	2316      	movs	r3, #22
 801474a:	6003      	str	r3, [r0, #0]
 801474c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014750:	bd70      	pop	{r4, r5, r6, pc}
 8014752:	bf00      	nop

08014754 <rcutils_strdup>:
 8014754:	b084      	sub	sp, #16
 8014756:	b570      	push	{r4, r5, r6, lr}
 8014758:	b082      	sub	sp, #8
 801475a:	ac07      	add	r4, sp, #28
 801475c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014760:	4605      	mov	r5, r0
 8014762:	b1b0      	cbz	r0, 8014792 <rcutils_strdup+0x3e>
 8014764:	f7eb fd3e 	bl	80001e4 <strlen>
 8014768:	1c42      	adds	r2, r0, #1
 801476a:	9b07      	ldr	r3, [sp, #28]
 801476c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801476e:	9201      	str	r2, [sp, #4]
 8014770:	4606      	mov	r6, r0
 8014772:	4610      	mov	r0, r2
 8014774:	4798      	blx	r3
 8014776:	4604      	mov	r4, r0
 8014778:	b128      	cbz	r0, 8014786 <rcutils_strdup+0x32>
 801477a:	9a01      	ldr	r2, [sp, #4]
 801477c:	4629      	mov	r1, r5
 801477e:	f003 fe49 	bl	8018414 <memcpy>
 8014782:	2300      	movs	r3, #0
 8014784:	55a3      	strb	r3, [r4, r6]
 8014786:	4620      	mov	r0, r4
 8014788:	b002      	add	sp, #8
 801478a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801478e:	b004      	add	sp, #16
 8014790:	4770      	bx	lr
 8014792:	4604      	mov	r4, r0
 8014794:	e7f7      	b.n	8014786 <rcutils_strdup+0x32>
 8014796:	bf00      	nop

08014798 <rcutils_strndup>:
 8014798:	b082      	sub	sp, #8
 801479a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479c:	ac06      	add	r4, sp, #24
 801479e:	e884 000c 	stmia.w	r4, {r2, r3}
 80147a2:	4605      	mov	r5, r0
 80147a4:	b188      	cbz	r0, 80147ca <rcutils_strndup+0x32>
 80147a6:	1c4f      	adds	r7, r1, #1
 80147a8:	460e      	mov	r6, r1
 80147aa:	4638      	mov	r0, r7
 80147ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80147ae:	4790      	blx	r2
 80147b0:	4604      	mov	r4, r0
 80147b2:	b128      	cbz	r0, 80147c0 <rcutils_strndup+0x28>
 80147b4:	463a      	mov	r2, r7
 80147b6:	4629      	mov	r1, r5
 80147b8:	f003 fe2c 	bl	8018414 <memcpy>
 80147bc:	2300      	movs	r3, #0
 80147be:	55a3      	strb	r3, [r4, r6]
 80147c0:	4620      	mov	r0, r4
 80147c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80147c6:	b002      	add	sp, #8
 80147c8:	4770      	bx	lr
 80147ca:	4604      	mov	r4, r0
 80147cc:	e7f8      	b.n	80147c0 <rcutils_strndup+0x28>
 80147ce:	bf00      	nop

080147d0 <rcutils_get_zero_initialized_string_map>:
 80147d0:	4b01      	ldr	r3, [pc, #4]	; (80147d8 <rcutils_get_zero_initialized_string_map+0x8>)
 80147d2:	2000      	movs	r0, #0
 80147d4:	6018      	str	r0, [r3, #0]
 80147d6:	4770      	bx	lr
 80147d8:	2000e280 	.word	0x2000e280

080147dc <rcutils_string_map_reserve>:
 80147dc:	2800      	cmp	r0, #0
 80147de:	d05f      	beq.n	80148a0 <rcutils_string_map_reserve+0xc4>
 80147e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147e4:	460c      	mov	r4, r1
 80147e6:	6801      	ldr	r1, [r0, #0]
 80147e8:	b082      	sub	sp, #8
 80147ea:	4605      	mov	r5, r0
 80147ec:	b129      	cbz	r1, 80147fa <rcutils_string_map_reserve+0x1e>
 80147ee:	68cb      	ldr	r3, [r1, #12]
 80147f0:	42a3      	cmp	r3, r4
 80147f2:	d906      	bls.n	8014802 <rcutils_string_map_reserve+0x26>
 80147f4:	461c      	mov	r4, r3
 80147f6:	2900      	cmp	r1, #0
 80147f8:	d1f9      	bne.n	80147ee <rcutils_string_map_reserve+0x12>
 80147fa:	201f      	movs	r0, #31
 80147fc:	b002      	add	sp, #8
 80147fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014802:	688b      	ldr	r3, [r1, #8]
 8014804:	42a3      	cmp	r3, r4
 8014806:	d047      	beq.n	8014898 <rcutils_string_map_reserve+0xbc>
 8014808:	6a0e      	ldr	r6, [r1, #32]
 801480a:	2c00      	cmp	r4, #0
 801480c:	d034      	beq.n	8014878 <rcutils_string_map_reserve+0x9c>
 801480e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8014812:	d243      	bcs.n	801489c <rcutils_string_map_reserve+0xc0>
 8014814:	00a7      	lsls	r7, r4, #2
 8014816:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801481a:	6808      	ldr	r0, [r1, #0]
 801481c:	4632      	mov	r2, r6
 801481e:	4639      	mov	r1, r7
 8014820:	47c0      	blx	r8
 8014822:	2800      	cmp	r0, #0
 8014824:	d03a      	beq.n	801489c <rcutils_string_map_reserve+0xc0>
 8014826:	682b      	ldr	r3, [r5, #0]
 8014828:	4632      	mov	r2, r6
 801482a:	6018      	str	r0, [r3, #0]
 801482c:	4639      	mov	r1, r7
 801482e:	6858      	ldr	r0, [r3, #4]
 8014830:	47c0      	blx	r8
 8014832:	2800      	cmp	r0, #0
 8014834:	d032      	beq.n	801489c <rcutils_string_map_reserve+0xc0>
 8014836:	682d      	ldr	r5, [r5, #0]
 8014838:	68ab      	ldr	r3, [r5, #8]
 801483a:	6068      	str	r0, [r5, #4]
 801483c:	42a3      	cmp	r3, r4
 801483e:	d226      	bcs.n	801488e <rcutils_string_map_reserve+0xb2>
 8014840:	682a      	ldr	r2, [r5, #0]
 8014842:	eb00 0c07 	add.w	ip, r0, r7
 8014846:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801484a:	45e6      	cmp	lr, ip
 801484c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014850:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014854:	d203      	bcs.n	801485e <rcutils_string_map_reserve+0x82>
 8014856:	eb02 0c07 	add.w	ip, r2, r7
 801485a:	4566      	cmp	r6, ip
 801485c:	d322      	bcc.n	80148a4 <rcutils_string_map_reserve+0xc8>
 801485e:	1ae3      	subs	r3, r4, r3
 8014860:	009a      	lsls	r2, r3, #2
 8014862:	4670      	mov	r0, lr
 8014864:	2100      	movs	r1, #0
 8014866:	9201      	str	r2, [sp, #4]
 8014868:	f003 fd0c 	bl	8018284 <memset>
 801486c:	9a01      	ldr	r2, [sp, #4]
 801486e:	2100      	movs	r1, #0
 8014870:	4630      	mov	r0, r6
 8014872:	f003 fd07 	bl	8018284 <memset>
 8014876:	e00a      	b.n	801488e <rcutils_string_map_reserve+0xb2>
 8014878:	694f      	ldr	r7, [r1, #20]
 801487a:	6808      	ldr	r0, [r1, #0]
 801487c:	4631      	mov	r1, r6
 801487e:	47b8      	blx	r7
 8014880:	682b      	ldr	r3, [r5, #0]
 8014882:	4631      	mov	r1, r6
 8014884:	6858      	ldr	r0, [r3, #4]
 8014886:	601c      	str	r4, [r3, #0]
 8014888:	47b8      	blx	r7
 801488a:	682d      	ldr	r5, [r5, #0]
 801488c:	606c      	str	r4, [r5, #4]
 801488e:	2000      	movs	r0, #0
 8014890:	60ac      	str	r4, [r5, #8]
 8014892:	b002      	add	sp, #8
 8014894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014898:	2000      	movs	r0, #0
 801489a:	e7af      	b.n	80147fc <rcutils_string_map_reserve+0x20>
 801489c:	200a      	movs	r0, #10
 801489e:	e7ad      	b.n	80147fc <rcutils_string_map_reserve+0x20>
 80148a0:	200b      	movs	r0, #11
 80148a2:	4770      	bx	lr
 80148a4:	1f0b      	subs	r3, r1, #4
 80148a6:	4418      	add	r0, r3
 80148a8:	4413      	add	r3, r2
 80148aa:	3a04      	subs	r2, #4
 80148ac:	4417      	add	r7, r2
 80148ae:	2200      	movs	r2, #0
 80148b0:	f843 2f04 	str.w	r2, [r3, #4]!
 80148b4:	42bb      	cmp	r3, r7
 80148b6:	f840 2f04 	str.w	r2, [r0, #4]!
 80148ba:	d1f9      	bne.n	80148b0 <rcutils_string_map_reserve+0xd4>
 80148bc:	e7e7      	b.n	801488e <rcutils_string_map_reserve+0xb2>
 80148be:	bf00      	nop

080148c0 <rcutils_string_map_init>:
 80148c0:	b082      	sub	sp, #8
 80148c2:	b570      	push	{r4, r5, r6, lr}
 80148c4:	ac04      	add	r4, sp, #16
 80148c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80148ca:	b380      	cbz	r0, 801492e <rcutils_string_map_init+0x6e>
 80148cc:	6806      	ldr	r6, [r0, #0]
 80148ce:	4604      	mov	r4, r0
 80148d0:	b12e      	cbz	r6, 80148de <rcutils_string_map_init+0x1e>
 80148d2:	251e      	movs	r5, #30
 80148d4:	4628      	mov	r0, r5
 80148d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148da:	b002      	add	sp, #8
 80148dc:	4770      	bx	lr
 80148de:	a804      	add	r0, sp, #16
 80148e0:	460d      	mov	r5, r1
 80148e2:	f7fa fcd7 	bl	800f294 <rcutils_allocator_is_valid>
 80148e6:	b310      	cbz	r0, 801492e <rcutils_string_map_init+0x6e>
 80148e8:	9b04      	ldr	r3, [sp, #16]
 80148ea:	9908      	ldr	r1, [sp, #32]
 80148ec:	2024      	movs	r0, #36	; 0x24
 80148ee:	4798      	blx	r3
 80148f0:	6020      	str	r0, [r4, #0]
 80148f2:	b310      	cbz	r0, 801493a <rcutils_string_map_init+0x7a>
 80148f4:	f10d 0e10 	add.w	lr, sp, #16
 80148f8:	e9c0 6600 	strd	r6, r6, [r0]
 80148fc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014900:	f100 0c10 	add.w	ip, r0, #16
 8014904:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014908:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801490c:	f8de 3000 	ldr.w	r3, [lr]
 8014910:	f8cc 3000 	str.w	r3, [ip]
 8014914:	4629      	mov	r1, r5
 8014916:	4620      	mov	r0, r4
 8014918:	f7ff ff60 	bl	80147dc <rcutils_string_map_reserve>
 801491c:	4605      	mov	r5, r0
 801491e:	2800      	cmp	r0, #0
 8014920:	d0d8      	beq.n	80148d4 <rcutils_string_map_init+0x14>
 8014922:	9b05      	ldr	r3, [sp, #20]
 8014924:	9908      	ldr	r1, [sp, #32]
 8014926:	6820      	ldr	r0, [r4, #0]
 8014928:	4798      	blx	r3
 801492a:	6026      	str	r6, [r4, #0]
 801492c:	e7d2      	b.n	80148d4 <rcutils_string_map_init+0x14>
 801492e:	250b      	movs	r5, #11
 8014930:	4628      	mov	r0, r5
 8014932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014936:	b002      	add	sp, #8
 8014938:	4770      	bx	lr
 801493a:	250a      	movs	r5, #10
 801493c:	e7ca      	b.n	80148d4 <rcutils_string_map_init+0x14>
 801493e:	bf00      	nop

08014940 <rcutils_string_map_fini>:
 8014940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014944:	b082      	sub	sp, #8
 8014946:	2800      	cmp	r0, #0
 8014948:	d03a      	beq.n	80149c0 <rcutils_string_map_fini+0x80>
 801494a:	6804      	ldr	r4, [r0, #0]
 801494c:	4606      	mov	r6, r0
 801494e:	2c00      	cmp	r4, #0
 8014950:	d032      	beq.n	80149b8 <rcutils_string_map_fini+0x78>
 8014952:	68a3      	ldr	r3, [r4, #8]
 8014954:	b32b      	cbz	r3, 80149a2 <rcutils_string_map_fini+0x62>
 8014956:	2500      	movs	r5, #0
 8014958:	6822      	ldr	r2, [r4, #0]
 801495a:	462f      	mov	r7, r5
 801495c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014960:	b1e0      	cbz	r0, 801499c <rcutils_string_map_fini+0x5c>
 8014962:	6a21      	ldr	r1, [r4, #32]
 8014964:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014968:	9101      	str	r1, [sp, #4]
 801496a:	47c0      	blx	r8
 801496c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014970:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014974:	9901      	ldr	r1, [sp, #4]
 8014976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801497a:	47c0      	blx	r8
 801497c:	68e3      	ldr	r3, [r4, #12]
 801497e:	6862      	ldr	r2, [r4, #4]
 8014980:	3b01      	subs	r3, #1
 8014982:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014986:	60e3      	str	r3, [r4, #12]
 8014988:	6834      	ldr	r4, [r6, #0]
 801498a:	68a3      	ldr	r3, [r4, #8]
 801498c:	3501      	adds	r5, #1
 801498e:	429d      	cmp	r5, r3
 8014990:	d207      	bcs.n	80149a2 <rcutils_string_map_fini+0x62>
 8014992:	6822      	ldr	r2, [r4, #0]
 8014994:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014998:	2800      	cmp	r0, #0
 801499a:	d1e2      	bne.n	8014962 <rcutils_string_map_fini+0x22>
 801499c:	3501      	adds	r5, #1
 801499e:	429d      	cmp	r5, r3
 80149a0:	d3dc      	bcc.n	801495c <rcutils_string_map_fini+0x1c>
 80149a2:	2100      	movs	r1, #0
 80149a4:	4630      	mov	r0, r6
 80149a6:	f7ff ff19 	bl	80147dc <rcutils_string_map_reserve>
 80149aa:	4604      	mov	r4, r0
 80149ac:	b920      	cbnz	r0, 80149b8 <rcutils_string_map_fini+0x78>
 80149ae:	6830      	ldr	r0, [r6, #0]
 80149b0:	6943      	ldr	r3, [r0, #20]
 80149b2:	6a01      	ldr	r1, [r0, #32]
 80149b4:	4798      	blx	r3
 80149b6:	6034      	str	r4, [r6, #0]
 80149b8:	4620      	mov	r0, r4
 80149ba:	b002      	add	sp, #8
 80149bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149c0:	240b      	movs	r4, #11
 80149c2:	4620      	mov	r0, r4
 80149c4:	b002      	add	sp, #8
 80149c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ca:	bf00      	nop

080149cc <rcutils_string_map_getn>:
 80149cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d0:	b300      	cbz	r0, 8014a14 <rcutils_string_map_getn+0x48>
 80149d2:	6807      	ldr	r7, [r0, #0]
 80149d4:	b1ff      	cbz	r7, 8014a16 <rcutils_string_map_getn+0x4a>
 80149d6:	4688      	mov	r8, r1
 80149d8:	b1e1      	cbz	r1, 8014a14 <rcutils_string_map_getn+0x48>
 80149da:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80149de:	683e      	ldr	r6, [r7, #0]
 80149e0:	f1ba 0f00 	cmp.w	sl, #0
 80149e4:	d016      	beq.n	8014a14 <rcutils_string_map_getn+0x48>
 80149e6:	4691      	mov	r9, r2
 80149e8:	3e04      	subs	r6, #4
 80149ea:	2400      	movs	r4, #0
 80149ec:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80149f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80149f4:	4628      	mov	r0, r5
 80149f6:	3401      	adds	r4, #1
 80149f8:	b155      	cbz	r5, 8014a10 <rcutils_string_map_getn+0x44>
 80149fa:	f7eb fbf3 	bl	80001e4 <strlen>
 80149fe:	4548      	cmp	r0, r9
 8014a00:	4602      	mov	r2, r0
 8014a02:	4629      	mov	r1, r5
 8014a04:	bf38      	it	cc
 8014a06:	464a      	movcc	r2, r9
 8014a08:	4640      	mov	r0, r8
 8014a0a:	f003 fc50 	bl	80182ae <strncmp>
 8014a0e:	b128      	cbz	r0, 8014a1c <rcutils_string_map_getn+0x50>
 8014a10:	45a2      	cmp	sl, r4
 8014a12:	d1eb      	bne.n	80149ec <rcutils_string_map_getn+0x20>
 8014a14:	2700      	movs	r7, #0
 8014a16:	4638      	mov	r0, r7
 8014a18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f853 700b 	ldr.w	r7, [r3, fp]
 8014a22:	4638      	mov	r0, r7
 8014a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a28 <rcutils_system_time_now>:
 8014a28:	b308      	cbz	r0, 8014a6e <rcutils_system_time_now+0x46>
 8014a2a:	b570      	push	{r4, r5, r6, lr}
 8014a2c:	b084      	sub	sp, #16
 8014a2e:	4604      	mov	r4, r0
 8014a30:	4669      	mov	r1, sp
 8014a32:	2001      	movs	r0, #1
 8014a34:	f7ec fd74 	bl	8001520 <clock_gettime>
 8014a38:	e9dd 3500 	ldrd	r3, r5, [sp]
 8014a3c:	2d00      	cmp	r5, #0
 8014a3e:	db13      	blt.n	8014a68 <rcutils_system_time_now+0x40>
 8014a40:	9902      	ldr	r1, [sp, #8]
 8014a42:	2900      	cmp	r1, #0
 8014a44:	db0d      	blt.n	8014a62 <rcutils_system_time_now+0x3a>
 8014a46:	4e0b      	ldr	r6, [pc, #44]	; (8014a74 <rcutils_system_time_now+0x4c>)
 8014a48:	fba3 3206 	umull	r3, r2, r3, r6
 8014a4c:	185b      	adds	r3, r3, r1
 8014a4e:	fb06 2205 	mla	r2, r6, r5, r2
 8014a52:	f04f 0000 	mov.w	r0, #0
 8014a56:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8014a5a:	e9c4 3200 	strd	r3, r2, [r4]
 8014a5e:	b004      	add	sp, #16
 8014a60:	bd70      	pop	{r4, r5, r6, pc}
 8014a62:	ea53 0205 	orrs.w	r2, r3, r5
 8014a66:	d1ee      	bne.n	8014a46 <rcutils_system_time_now+0x1e>
 8014a68:	2002      	movs	r0, #2
 8014a6a:	b004      	add	sp, #16
 8014a6c:	bd70      	pop	{r4, r5, r6, pc}
 8014a6e:	200b      	movs	r0, #11
 8014a70:	4770      	bx	lr
 8014a72:	bf00      	nop
 8014a74:	3b9aca00 	.word	0x3b9aca00

08014a78 <rcutils_steady_time_now>:
 8014a78:	b308      	cbz	r0, 8014abe <rcutils_steady_time_now+0x46>
 8014a7a:	b570      	push	{r4, r5, r6, lr}
 8014a7c:	b084      	sub	sp, #16
 8014a7e:	4604      	mov	r4, r0
 8014a80:	4669      	mov	r1, sp
 8014a82:	2000      	movs	r0, #0
 8014a84:	f7ec fd4c 	bl	8001520 <clock_gettime>
 8014a88:	e9dd 3500 	ldrd	r3, r5, [sp]
 8014a8c:	2d00      	cmp	r5, #0
 8014a8e:	db13      	blt.n	8014ab8 <rcutils_steady_time_now+0x40>
 8014a90:	9902      	ldr	r1, [sp, #8]
 8014a92:	2900      	cmp	r1, #0
 8014a94:	db0d      	blt.n	8014ab2 <rcutils_steady_time_now+0x3a>
 8014a96:	4e0b      	ldr	r6, [pc, #44]	; (8014ac4 <rcutils_steady_time_now+0x4c>)
 8014a98:	fba3 3206 	umull	r3, r2, r3, r6
 8014a9c:	185b      	adds	r3, r3, r1
 8014a9e:	fb06 2205 	mla	r2, r6, r5, r2
 8014aa2:	f04f 0000 	mov.w	r0, #0
 8014aa6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8014aaa:	e9c4 3200 	strd	r3, r2, [r4]
 8014aae:	b004      	add	sp, #16
 8014ab0:	bd70      	pop	{r4, r5, r6, pc}
 8014ab2:	ea53 0205 	orrs.w	r2, r3, r5
 8014ab6:	d1ee      	bne.n	8014a96 <rcutils_steady_time_now+0x1e>
 8014ab8:	2002      	movs	r0, #2
 8014aba:	b004      	add	sp, #16
 8014abc:	bd70      	pop	{r4, r5, r6, pc}
 8014abe:	200b      	movs	r0, #11
 8014ac0:	4770      	bx	lr
 8014ac2:	bf00      	nop
 8014ac4:	3b9aca00 	.word	0x3b9aca00

08014ac8 <rmw_get_zero_initialized_context>:
 8014ac8:	b510      	push	{r4, lr}
 8014aca:	4604      	mov	r4, r0
 8014acc:	3010      	adds	r0, #16
 8014ace:	f000 f80b 	bl	8014ae8 <rmw_get_zero_initialized_init_options>
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	2100      	movs	r1, #0
 8014ad8:	e9c4 0100 	strd	r0, r1, [r4]
 8014adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014ae0:	60a3      	str	r3, [r4, #8]
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	bd10      	pop	{r4, pc}
 8014ae6:	bf00      	nop

08014ae8 <rmw_get_zero_initialized_init_options>:
 8014ae8:	b510      	push	{r4, lr}
 8014aea:	2238      	movs	r2, #56	; 0x38
 8014aec:	4604      	mov	r4, r0
 8014aee:	2100      	movs	r1, #0
 8014af0:	f003 fbc8 	bl	8018284 <memset>
 8014af4:	f104 0010 	add.w	r0, r4, #16
 8014af8:	f000 f806 	bl	8014b08 <rmw_get_default_security_options>
 8014afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b00:	60e3      	str	r3, [r4, #12]
 8014b02:	4620      	mov	r0, r4
 8014b04:	bd10      	pop	{r4, pc}
 8014b06:	bf00      	nop

08014b08 <rmw_get_default_security_options>:
 8014b08:	2200      	movs	r2, #0
 8014b0a:	7002      	strb	r2, [r0, #0]
 8014b0c:	6042      	str	r2, [r0, #4]
 8014b0e:	4770      	bx	lr

08014b10 <rmw_validate_full_topic_name>:
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d057      	beq.n	8014bc4 <rmw_validate_full_topic_name+0xb4>
 8014b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b18:	460d      	mov	r5, r1
 8014b1a:	2900      	cmp	r1, #0
 8014b1c:	d054      	beq.n	8014bc8 <rmw_validate_full_topic_name+0xb8>
 8014b1e:	4616      	mov	r6, r2
 8014b20:	4604      	mov	r4, r0
 8014b22:	f7eb fb5f 	bl	80001e4 <strlen>
 8014b26:	b148      	cbz	r0, 8014b3c <rmw_validate_full_topic_name+0x2c>
 8014b28:	7823      	ldrb	r3, [r4, #0]
 8014b2a:	2b2f      	cmp	r3, #47	; 0x2f
 8014b2c:	d00d      	beq.n	8014b4a <rmw_validate_full_topic_name+0x3a>
 8014b2e:	2302      	movs	r3, #2
 8014b30:	602b      	str	r3, [r5, #0]
 8014b32:	b13e      	cbz	r6, 8014b44 <rmw_validate_full_topic_name+0x34>
 8014b34:	2000      	movs	r0, #0
 8014b36:	6030      	str	r0, [r6, #0]
 8014b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	602b      	str	r3, [r5, #0]
 8014b40:	2e00      	cmp	r6, #0
 8014b42:	d1f7      	bne.n	8014b34 <rmw_validate_full_topic_name+0x24>
 8014b44:	2000      	movs	r0, #0
 8014b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b4a:	1e43      	subs	r3, r0, #1
 8014b4c:	5ce2      	ldrb	r2, [r4, r3]
 8014b4e:	2a2f      	cmp	r2, #47	; 0x2f
 8014b50:	d03c      	beq.n	8014bcc <rmw_validate_full_topic_name+0xbc>
 8014b52:	1e63      	subs	r3, r4, #1
 8014b54:	eb03 0800 	add.w	r8, r3, r0
 8014b58:	f1c4 0e01 	rsb	lr, r4, #1
 8014b5c:	eb0e 0703 	add.w	r7, lr, r3
 8014b60:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014b64:	f021 0220 	bic.w	r2, r1, #32
 8014b68:	3a41      	subs	r2, #65	; 0x41
 8014b6a:	2a19      	cmp	r2, #25
 8014b6c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8014b70:	d90b      	bls.n	8014b8a <rmw_validate_full_topic_name+0x7a>
 8014b72:	295f      	cmp	r1, #95	; 0x5f
 8014b74:	d009      	beq.n	8014b8a <rmw_validate_full_topic_name+0x7a>
 8014b76:	f1bc 0f0a 	cmp.w	ip, #10
 8014b7a:	d906      	bls.n	8014b8a <rmw_validate_full_topic_name+0x7a>
 8014b7c:	2304      	movs	r3, #4
 8014b7e:	602b      	str	r3, [r5, #0]
 8014b80:	2e00      	cmp	r6, #0
 8014b82:	d0df      	beq.n	8014b44 <rmw_validate_full_topic_name+0x34>
 8014b84:	6037      	str	r7, [r6, #0]
 8014b86:	2000      	movs	r0, #0
 8014b88:	e7d6      	b.n	8014b38 <rmw_validate_full_topic_name+0x28>
 8014b8a:	4543      	cmp	r3, r8
 8014b8c:	d1e6      	bne.n	8014b5c <rmw_validate_full_topic_name+0x4c>
 8014b8e:	4f1a      	ldr	r7, [pc, #104]	; (8014bf8 <rmw_validate_full_topic_name+0xe8>)
 8014b90:	2301      	movs	r3, #1
 8014b92:	e004      	b.n	8014b9e <rmw_validate_full_topic_name+0x8e>
 8014b94:	4298      	cmp	r0, r3
 8014b96:	f104 0401 	add.w	r4, r4, #1
 8014b9a:	d91c      	bls.n	8014bd6 <rmw_validate_full_topic_name+0xc6>
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	4298      	cmp	r0, r3
 8014ba0:	f103 0201 	add.w	r2, r3, #1
 8014ba4:	d0f6      	beq.n	8014b94 <rmw_validate_full_topic_name+0x84>
 8014ba6:	7821      	ldrb	r1, [r4, #0]
 8014ba8:	292f      	cmp	r1, #47	; 0x2f
 8014baa:	d1f3      	bne.n	8014b94 <rmw_validate_full_topic_name+0x84>
 8014bac:	7861      	ldrb	r1, [r4, #1]
 8014bae:	292f      	cmp	r1, #47	; 0x2f
 8014bb0:	d01c      	beq.n	8014bec <rmw_validate_full_topic_name+0xdc>
 8014bb2:	5dc9      	ldrb	r1, [r1, r7]
 8014bb4:	0749      	lsls	r1, r1, #29
 8014bb6:	d5ed      	bpl.n	8014b94 <rmw_validate_full_topic_name+0x84>
 8014bb8:	2206      	movs	r2, #6
 8014bba:	602a      	str	r2, [r5, #0]
 8014bbc:	2e00      	cmp	r6, #0
 8014bbe:	d0c1      	beq.n	8014b44 <rmw_validate_full_topic_name+0x34>
 8014bc0:	6033      	str	r3, [r6, #0]
 8014bc2:	e7bf      	b.n	8014b44 <rmw_validate_full_topic_name+0x34>
 8014bc4:	200b      	movs	r0, #11
 8014bc6:	4770      	bx	lr
 8014bc8:	200b      	movs	r0, #11
 8014bca:	e7b5      	b.n	8014b38 <rmw_validate_full_topic_name+0x28>
 8014bcc:	2203      	movs	r2, #3
 8014bce:	602a      	str	r2, [r5, #0]
 8014bd0:	2e00      	cmp	r6, #0
 8014bd2:	d1f5      	bne.n	8014bc0 <rmw_validate_full_topic_name+0xb0>
 8014bd4:	e7b6      	b.n	8014b44 <rmw_validate_full_topic_name+0x34>
 8014bd6:	28f7      	cmp	r0, #247	; 0xf7
 8014bd8:	d802      	bhi.n	8014be0 <rmw_validate_full_topic_name+0xd0>
 8014bda:	2000      	movs	r0, #0
 8014bdc:	6028      	str	r0, [r5, #0]
 8014bde:	e7ab      	b.n	8014b38 <rmw_validate_full_topic_name+0x28>
 8014be0:	2307      	movs	r3, #7
 8014be2:	602b      	str	r3, [r5, #0]
 8014be4:	2e00      	cmp	r6, #0
 8014be6:	d0ad      	beq.n	8014b44 <rmw_validate_full_topic_name+0x34>
 8014be8:	23f6      	movs	r3, #246	; 0xf6
 8014bea:	e7e9      	b.n	8014bc0 <rmw_validate_full_topic_name+0xb0>
 8014bec:	2205      	movs	r2, #5
 8014bee:	602a      	str	r2, [r5, #0]
 8014bf0:	2e00      	cmp	r6, #0
 8014bf2:	d1e5      	bne.n	8014bc0 <rmw_validate_full_topic_name+0xb0>
 8014bf4:	e7a6      	b.n	8014b44 <rmw_validate_full_topic_name+0x34>
 8014bf6:	bf00      	nop
 8014bf8:	08019cac 	.word	0x08019cac

08014bfc <rmw_validate_namespace_with_size>:
 8014bfc:	b340      	cbz	r0, 8014c50 <rmw_validate_namespace_with_size+0x54>
 8014bfe:	b570      	push	{r4, r5, r6, lr}
 8014c00:	4614      	mov	r4, r2
 8014c02:	b0c2      	sub	sp, #264	; 0x108
 8014c04:	b332      	cbz	r2, 8014c54 <rmw_validate_namespace_with_size+0x58>
 8014c06:	2901      	cmp	r1, #1
 8014c08:	460d      	mov	r5, r1
 8014c0a:	461e      	mov	r6, r3
 8014c0c:	d102      	bne.n	8014c14 <rmw_validate_namespace_with_size+0x18>
 8014c0e:	7803      	ldrb	r3, [r0, #0]
 8014c10:	2b2f      	cmp	r3, #47	; 0x2f
 8014c12:	d012      	beq.n	8014c3a <rmw_validate_namespace_with_size+0x3e>
 8014c14:	aa01      	add	r2, sp, #4
 8014c16:	4669      	mov	r1, sp
 8014c18:	f7ff ff7a 	bl	8014b10 <rmw_validate_full_topic_name>
 8014c1c:	b978      	cbnz	r0, 8014c3e <rmw_validate_namespace_with_size+0x42>
 8014c1e:	9b00      	ldr	r3, [sp, #0]
 8014c20:	b14b      	cbz	r3, 8014c36 <rmw_validate_namespace_with_size+0x3a>
 8014c22:	2b07      	cmp	r3, #7
 8014c24:	d007      	beq.n	8014c36 <rmw_validate_namespace_with_size+0x3a>
 8014c26:	1e5a      	subs	r2, r3, #1
 8014c28:	2a05      	cmp	r2, #5
 8014c2a:	d82b      	bhi.n	8014c84 <rmw_validate_namespace_with_size+0x88>
 8014c2c:	e8df f002 	tbb	[pc, r2]
 8014c30:	1e212427 	.word	0x1e212427
 8014c34:	141b      	.short	0x141b
 8014c36:	2df5      	cmp	r5, #245	; 0xf5
 8014c38:	d803      	bhi.n	8014c42 <rmw_validate_namespace_with_size+0x46>
 8014c3a:	2000      	movs	r0, #0
 8014c3c:	6020      	str	r0, [r4, #0]
 8014c3e:	b042      	add	sp, #264	; 0x108
 8014c40:	bd70      	pop	{r4, r5, r6, pc}
 8014c42:	2307      	movs	r3, #7
 8014c44:	6023      	str	r3, [r4, #0]
 8014c46:	2e00      	cmp	r6, #0
 8014c48:	d0f9      	beq.n	8014c3e <rmw_validate_namespace_with_size+0x42>
 8014c4a:	23f4      	movs	r3, #244	; 0xf4
 8014c4c:	6033      	str	r3, [r6, #0]
 8014c4e:	e7f6      	b.n	8014c3e <rmw_validate_namespace_with_size+0x42>
 8014c50:	200b      	movs	r0, #11
 8014c52:	4770      	bx	lr
 8014c54:	200b      	movs	r0, #11
 8014c56:	e7f2      	b.n	8014c3e <rmw_validate_namespace_with_size+0x42>
 8014c58:	2306      	movs	r3, #6
 8014c5a:	6023      	str	r3, [r4, #0]
 8014c5c:	2e00      	cmp	r6, #0
 8014c5e:	d0ee      	beq.n	8014c3e <rmw_validate_namespace_with_size+0x42>
 8014c60:	9b01      	ldr	r3, [sp, #4]
 8014c62:	6033      	str	r3, [r6, #0]
 8014c64:	e7eb      	b.n	8014c3e <rmw_validate_namespace_with_size+0x42>
 8014c66:	2305      	movs	r3, #5
 8014c68:	6023      	str	r3, [r4, #0]
 8014c6a:	e7f7      	b.n	8014c5c <rmw_validate_namespace_with_size+0x60>
 8014c6c:	2304      	movs	r3, #4
 8014c6e:	6023      	str	r3, [r4, #0]
 8014c70:	e7f4      	b.n	8014c5c <rmw_validate_namespace_with_size+0x60>
 8014c72:	2303      	movs	r3, #3
 8014c74:	6023      	str	r3, [r4, #0]
 8014c76:	e7f1      	b.n	8014c5c <rmw_validate_namespace_with_size+0x60>
 8014c78:	2302      	movs	r3, #2
 8014c7a:	6023      	str	r3, [r4, #0]
 8014c7c:	e7ee      	b.n	8014c5c <rmw_validate_namespace_with_size+0x60>
 8014c7e:	2301      	movs	r3, #1
 8014c80:	6023      	str	r3, [r4, #0]
 8014c82:	e7eb      	b.n	8014c5c <rmw_validate_namespace_with_size+0x60>
 8014c84:	4a03      	ldr	r2, [pc, #12]	; (8014c94 <rmw_validate_namespace_with_size+0x98>)
 8014c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014c8a:	a802      	add	r0, sp, #8
 8014c8c:	f7ff fd36 	bl	80146fc <rcutils_snprintf>
 8014c90:	2001      	movs	r0, #1
 8014c92:	e7d4      	b.n	8014c3e <rmw_validate_namespace_with_size+0x42>
 8014c94:	080196b4 	.word	0x080196b4

08014c98 <rmw_validate_namespace>:
 8014c98:	b168      	cbz	r0, 8014cb6 <rmw_validate_namespace+0x1e>
 8014c9a:	b570      	push	{r4, r5, r6, lr}
 8014c9c:	460d      	mov	r5, r1
 8014c9e:	4616      	mov	r6, r2
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	f7eb fa9f 	bl	80001e4 <strlen>
 8014ca6:	4633      	mov	r3, r6
 8014ca8:	4601      	mov	r1, r0
 8014caa:	462a      	mov	r2, r5
 8014cac:	4620      	mov	r0, r4
 8014cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cb2:	f7ff bfa3 	b.w	8014bfc <rmw_validate_namespace_with_size>
 8014cb6:	200b      	movs	r0, #11
 8014cb8:	4770      	bx	lr
 8014cba:	bf00      	nop

08014cbc <rmw_namespace_validation_result_string>:
 8014cbc:	2807      	cmp	r0, #7
 8014cbe:	bf9a      	itte	ls
 8014cc0:	4b02      	ldrls	r3, [pc, #8]	; (8014ccc <rmw_namespace_validation_result_string+0x10>)
 8014cc2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014cc6:	4802      	ldrhi	r0, [pc, #8]	; (8014cd0 <rmw_namespace_validation_result_string+0x14>)
 8014cc8:	4770      	bx	lr
 8014cca:	bf00      	nop
 8014ccc:	080198ac 	.word	0x080198ac
 8014cd0:	08019704 	.word	0x08019704

08014cd4 <rmw_validate_node_name>:
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	d03b      	beq.n	8014d50 <rmw_validate_node_name+0x7c>
 8014cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cdc:	460d      	mov	r5, r1
 8014cde:	2900      	cmp	r1, #0
 8014ce0:	d038      	beq.n	8014d54 <rmw_validate_node_name+0x80>
 8014ce2:	4616      	mov	r6, r2
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	f7eb fa7d 	bl	80001e4 <strlen>
 8014cea:	b1e0      	cbz	r0, 8014d26 <rmw_validate_node_name+0x52>
 8014cec:	1e63      	subs	r3, r4, #1
 8014cee:	eb03 0800 	add.w	r8, r3, r0
 8014cf2:	f1c4 0101 	rsb	r1, r4, #1
 8014cf6:	18cf      	adds	r7, r1, r3
 8014cf8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014cfc:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8014d00:	f02e 0c20 	bic.w	ip, lr, #32
 8014d04:	2a09      	cmp	r2, #9
 8014d06:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8014d0a:	d914      	bls.n	8014d36 <rmw_validate_node_name+0x62>
 8014d0c:	f1bc 0f19 	cmp.w	ip, #25
 8014d10:	d911      	bls.n	8014d36 <rmw_validate_node_name+0x62>
 8014d12:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8014d16:	d00e      	beq.n	8014d36 <rmw_validate_node_name+0x62>
 8014d18:	2302      	movs	r3, #2
 8014d1a:	602b      	str	r3, [r5, #0]
 8014d1c:	b106      	cbz	r6, 8014d20 <rmw_validate_node_name+0x4c>
 8014d1e:	6037      	str	r7, [r6, #0]
 8014d20:	2000      	movs	r0, #0
 8014d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d26:	2301      	movs	r3, #1
 8014d28:	602b      	str	r3, [r5, #0]
 8014d2a:	2e00      	cmp	r6, #0
 8014d2c:	d0f8      	beq.n	8014d20 <rmw_validate_node_name+0x4c>
 8014d2e:	2000      	movs	r0, #0
 8014d30:	6030      	str	r0, [r6, #0]
 8014d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d36:	4543      	cmp	r3, r8
 8014d38:	d1dd      	bne.n	8014cf6 <rmw_validate_node_name+0x22>
 8014d3a:	7822      	ldrb	r2, [r4, #0]
 8014d3c:	4b0d      	ldr	r3, [pc, #52]	; (8014d74 <rmw_validate_node_name+0xa0>)
 8014d3e:	5cd3      	ldrb	r3, [r2, r3]
 8014d40:	f013 0304 	ands.w	r3, r3, #4
 8014d44:	d110      	bne.n	8014d68 <rmw_validate_node_name+0x94>
 8014d46:	28ff      	cmp	r0, #255	; 0xff
 8014d48:	d806      	bhi.n	8014d58 <rmw_validate_node_name+0x84>
 8014d4a:	602b      	str	r3, [r5, #0]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	e7e8      	b.n	8014d22 <rmw_validate_node_name+0x4e>
 8014d50:	200b      	movs	r0, #11
 8014d52:	4770      	bx	lr
 8014d54:	200b      	movs	r0, #11
 8014d56:	e7e4      	b.n	8014d22 <rmw_validate_node_name+0x4e>
 8014d58:	2204      	movs	r2, #4
 8014d5a:	602a      	str	r2, [r5, #0]
 8014d5c:	2e00      	cmp	r6, #0
 8014d5e:	d0df      	beq.n	8014d20 <rmw_validate_node_name+0x4c>
 8014d60:	22fe      	movs	r2, #254	; 0xfe
 8014d62:	6032      	str	r2, [r6, #0]
 8014d64:	4618      	mov	r0, r3
 8014d66:	e7dc      	b.n	8014d22 <rmw_validate_node_name+0x4e>
 8014d68:	2303      	movs	r3, #3
 8014d6a:	602b      	str	r3, [r5, #0]
 8014d6c:	2e00      	cmp	r6, #0
 8014d6e:	d1de      	bne.n	8014d2e <rmw_validate_node_name+0x5a>
 8014d70:	e7d6      	b.n	8014d20 <rmw_validate_node_name+0x4c>
 8014d72:	bf00      	nop
 8014d74:	08019cac 	.word	0x08019cac

08014d78 <rmw_node_name_validation_result_string>:
 8014d78:	2804      	cmp	r0, #4
 8014d7a:	bf9a      	itte	ls
 8014d7c:	4b02      	ldrls	r3, [pc, #8]	; (8014d88 <rmw_node_name_validation_result_string+0x10>)
 8014d7e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014d82:	4802      	ldrhi	r0, [pc, #8]	; (8014d8c <rmw_node_name_validation_result_string+0x14>)
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop
 8014d88:	080199b8 	.word	0x080199b8
 8014d8c:	080198cc 	.word	0x080198cc

08014d90 <get_memory>:
 8014d90:	4603      	mov	r3, r0
 8014d92:	6840      	ldr	r0, [r0, #4]
 8014d94:	b158      	cbz	r0, 8014dae <get_memory+0x1e>
 8014d96:	6842      	ldr	r2, [r0, #4]
 8014d98:	605a      	str	r2, [r3, #4]
 8014d9a:	b10a      	cbz	r2, 8014da0 <get_memory+0x10>
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	6011      	str	r1, [r2, #0]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	6042      	str	r2, [r0, #4]
 8014da4:	b102      	cbz	r2, 8014da8 <get_memory+0x18>
 8014da6:	6010      	str	r0, [r2, #0]
 8014da8:	2200      	movs	r2, #0
 8014daa:	6002      	str	r2, [r0, #0]
 8014dac:	6018      	str	r0, [r3, #0]
 8014dae:	4770      	bx	lr

08014db0 <put_memory>:
 8014db0:	680b      	ldr	r3, [r1, #0]
 8014db2:	b10b      	cbz	r3, 8014db8 <put_memory+0x8>
 8014db4:	684a      	ldr	r2, [r1, #4]
 8014db6:	605a      	str	r2, [r3, #4]
 8014db8:	684a      	ldr	r2, [r1, #4]
 8014dba:	b102      	cbz	r2, 8014dbe <put_memory+0xe>
 8014dbc:	6013      	str	r3, [r2, #0]
 8014dbe:	6803      	ldr	r3, [r0, #0]
 8014dc0:	428b      	cmp	r3, r1
 8014dc2:	6843      	ldr	r3, [r0, #4]
 8014dc4:	bf08      	it	eq
 8014dc6:	6002      	streq	r2, [r0, #0]
 8014dc8:	604b      	str	r3, [r1, #4]
 8014dca:	b103      	cbz	r3, 8014dce <put_memory+0x1e>
 8014dcc:	6019      	str	r1, [r3, #0]
 8014dce:	2300      	movs	r3, #0
 8014dd0:	600b      	str	r3, [r1, #0]
 8014dd2:	6041      	str	r1, [r0, #4]
 8014dd4:	4770      	bx	lr
 8014dd6:	bf00      	nop

08014dd8 <rmw_get_implementation_identifier>:
 8014dd8:	4b01      	ldr	r3, [pc, #4]	; (8014de0 <rmw_get_implementation_identifier+0x8>)
 8014dda:	6818      	ldr	r0, [r3, #0]
 8014ddc:	4770      	bx	lr
 8014dde:	bf00      	nop
 8014de0:	080199e4 	.word	0x080199e4

08014de4 <rmw_init_options_init>:
 8014de4:	b084      	sub	sp, #16
 8014de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014de8:	b083      	sub	sp, #12
 8014dea:	ad09      	add	r5, sp, #36	; 0x24
 8014dec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014df0:	b130      	cbz	r0, 8014e00 <rmw_init_options_init+0x1c>
 8014df2:	4604      	mov	r4, r0
 8014df4:	4628      	mov	r0, r5
 8014df6:	f7fa fa4d 	bl	800f294 <rcutils_allocator_is_valid>
 8014dfa:	b108      	cbz	r0, 8014e00 <rmw_init_options_init+0x1c>
 8014dfc:	68a6      	ldr	r6, [r4, #8]
 8014dfe:	b12e      	cbz	r6, 8014e0c <rmw_init_options_init+0x28>
 8014e00:	200b      	movs	r0, #11
 8014e02:	b003      	add	sp, #12
 8014e04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e08:	b004      	add	sp, #16
 8014e0a:	4770      	bx	lr
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	2300      	movs	r3, #0
 8014e10:	e9c4 2300 	strd	r2, r3, [r4]
 8014e14:	4b22      	ldr	r3, [pc, #136]	; (8014ea0 <rmw_init_options_init+0xbc>)
 8014e16:	f8df e098 	ldr.w	lr, [pc, #152]	; 8014eb0 <rmw_init_options_init+0xcc>
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	60a3      	str	r3, [r4, #8]
 8014e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e20:	f104 0c20 	add.w	ip, r4, #32
 8014e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e28:	466f      	mov	r7, sp
 8014e2a:	682b      	ldr	r3, [r5, #0]
 8014e2c:	f8cc 3000 	str.w	r3, [ip]
 8014e30:	4638      	mov	r0, r7
 8014e32:	f8c4 e01c 	str.w	lr, [r4, #28]
 8014e36:	60e6      	str	r6, [r4, #12]
 8014e38:	f7ff fe66 	bl	8014b08 <rmw_get_default_security_options>
 8014e3c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014e40:	f104 0310 	add.w	r3, r4, #16
 8014e44:	e883 0003 	stmia.w	r3, {r0, r1}
 8014e48:	2203      	movs	r2, #3
 8014e4a:	4816      	ldr	r0, [pc, #88]	; (8014ea4 <rmw_init_options_init+0xc0>)
 8014e4c:	4916      	ldr	r1, [pc, #88]	; (8014ea8 <rmw_init_options_init+0xc4>)
 8014e4e:	7626      	strb	r6, [r4, #24]
 8014e50:	f7fa fd20 	bl	800f894 <rmw_uxrce_init_init_options_impl_memory>
 8014e54:	4813      	ldr	r0, [pc, #76]	; (8014ea4 <rmw_init_options_init+0xc0>)
 8014e56:	f7ff ff9b 	bl	8014d90 <get_memory>
 8014e5a:	b1f0      	cbz	r0, 8014e9a <rmw_init_options_init+0xb6>
 8014e5c:	4a13      	ldr	r2, [pc, #76]	; (8014eac <rmw_init_options_init+0xc8>)
 8014e5e:	6883      	ldr	r3, [r0, #8]
 8014e60:	6851      	ldr	r1, [r2, #4]
 8014e62:	7810      	ldrb	r0, [r2, #0]
 8014e64:	6363      	str	r3, [r4, #52]	; 0x34
 8014e66:	7418      	strb	r0, [r3, #16]
 8014e68:	6159      	str	r1, [r3, #20]
 8014e6a:	68d1      	ldr	r1, [r2, #12]
 8014e6c:	61d9      	str	r1, [r3, #28]
 8014e6e:	6911      	ldr	r1, [r2, #16]
 8014e70:	6219      	str	r1, [r3, #32]
 8014e72:	6951      	ldr	r1, [r2, #20]
 8014e74:	6892      	ldr	r2, [r2, #8]
 8014e76:	619a      	str	r2, [r3, #24]
 8014e78:	6259      	str	r1, [r3, #36]	; 0x24
 8014e7a:	f7fd faf3 	bl	8012464 <uxr_nanos>
 8014e7e:	f002 ff6f 	bl	8017d60 <srand>
 8014e82:	f002 ff9b 	bl	8017dbc <rand>
 8014e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e88:	6298      	str	r0, [r3, #40]	; 0x28
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	d0f9      	beq.n	8014e82 <rmw_init_options_init+0x9e>
 8014e8e:	2000      	movs	r0, #0
 8014e90:	b003      	add	sp, #12
 8014e92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e96:	b004      	add	sp, #16
 8014e98:	4770      	bx	lr
 8014e9a:	2001      	movs	r0, #1
 8014e9c:	e7b1      	b.n	8014e02 <rmw_init_options_init+0x1e>
 8014e9e:	bf00      	nop
 8014ea0:	080199e4 	.word	0x080199e4
 8014ea4:	2000e1d4 	.word	0x2000e1d4
 8014ea8:	20009a70 	.word	0x20009a70
 8014eac:	200098fc 	.word	0x200098fc
 8014eb0:	08019584 	.word	0x08019584

08014eb4 <rmw_init_options_copy>:
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	b158      	cbz	r0, 8014ed0 <rmw_init_options_copy+0x1c>
 8014eb8:	460d      	mov	r5, r1
 8014eba:	b149      	cbz	r1, 8014ed0 <rmw_init_options_copy+0x1c>
 8014ebc:	4604      	mov	r4, r0
 8014ebe:	6880      	ldr	r0, [r0, #8]
 8014ec0:	b120      	cbz	r0, 8014ecc <rmw_init_options_copy+0x18>
 8014ec2:	4b1e      	ldr	r3, [pc, #120]	; (8014f3c <rmw_init_options_copy+0x88>)
 8014ec4:	6819      	ldr	r1, [r3, #0]
 8014ec6:	f7eb f983 	bl	80001d0 <strcmp>
 8014eca:	bb90      	cbnz	r0, 8014f32 <rmw_init_options_copy+0x7e>
 8014ecc:	68ab      	ldr	r3, [r5, #8]
 8014ece:	b113      	cbz	r3, 8014ed6 <rmw_init_options_copy+0x22>
 8014ed0:	250b      	movs	r5, #11
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	bd70      	pop	{r4, r5, r6, pc}
 8014ed6:	4623      	mov	r3, r4
 8014ed8:	462a      	mov	r2, r5
 8014eda:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014ede:	f8d3 c000 	ldr.w	ip, [r3]
 8014ee2:	6858      	ldr	r0, [r3, #4]
 8014ee4:	6899      	ldr	r1, [r3, #8]
 8014ee6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8014eea:	f8c2 e00c 	str.w	lr, [r2, #12]
 8014eee:	3310      	adds	r3, #16
 8014ef0:	42b3      	cmp	r3, r6
 8014ef2:	f8c2 c000 	str.w	ip, [r2]
 8014ef6:	6050      	str	r0, [r2, #4]
 8014ef8:	6091      	str	r1, [r2, #8]
 8014efa:	f102 0210 	add.w	r2, r2, #16
 8014efe:	d1ee      	bne.n	8014ede <rmw_init_options_copy+0x2a>
 8014f00:	6819      	ldr	r1, [r3, #0]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	480e      	ldr	r0, [pc, #56]	; (8014f40 <rmw_init_options_copy+0x8c>)
 8014f06:	6053      	str	r3, [r2, #4]
 8014f08:	6011      	str	r1, [r2, #0]
 8014f0a:	f7ff ff41 	bl	8014d90 <get_memory>
 8014f0e:	b198      	cbz	r0, 8014f38 <rmw_init_options_copy+0x84>
 8014f10:	6883      	ldr	r3, [r0, #8]
 8014f12:	636b      	str	r3, [r5, #52]	; 0x34
 8014f14:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014f16:	f102 0c10 	add.w	ip, r2, #16
 8014f1a:	f103 0410 	add.w	r4, r3, #16
 8014f1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f24:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014f28:	2500      	movs	r5, #0
 8014f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014f2e:	4628      	mov	r0, r5
 8014f30:	bd70      	pop	{r4, r5, r6, pc}
 8014f32:	250c      	movs	r5, #12
 8014f34:	4628      	mov	r0, r5
 8014f36:	bd70      	pop	{r4, r5, r6, pc}
 8014f38:	2501      	movs	r5, #1
 8014f3a:	e7ca      	b.n	8014ed2 <rmw_init_options_copy+0x1e>
 8014f3c:	080199e4 	.word	0x080199e4
 8014f40:	2000e1d4 	.word	0x2000e1d4

08014f44 <rmw_init_options_fini>:
 8014f44:	2800      	cmp	r0, #0
 8014f46:	d03d      	beq.n	8014fc4 <rmw_init_options_fini+0x80>
 8014f48:	b510      	push	{r4, lr}
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	b08e      	sub	sp, #56	; 0x38
 8014f4e:	3020      	adds	r0, #32
 8014f50:	f7fa f9a0 	bl	800f294 <rcutils_allocator_is_valid>
 8014f54:	b360      	cbz	r0, 8014fb0 <rmw_init_options_fini+0x6c>
 8014f56:	68a0      	ldr	r0, [r4, #8]
 8014f58:	b120      	cbz	r0, 8014f64 <rmw_init_options_fini+0x20>
 8014f5a:	4b1c      	ldr	r3, [pc, #112]	; (8014fcc <rmw_init_options_fini+0x88>)
 8014f5c:	6819      	ldr	r1, [r3, #0]
 8014f5e:	f7eb f937 	bl	80001d0 <strcmp>
 8014f62:	bb68      	cbnz	r0, 8014fc0 <rmw_init_options_fini+0x7c>
 8014f64:	4b1a      	ldr	r3, [pc, #104]	; (8014fd0 <rmw_init_options_fini+0x8c>)
 8014f66:	6819      	ldr	r1, [r3, #0]
 8014f68:	b331      	cbz	r1, 8014fb8 <rmw_init_options_fini+0x74>
 8014f6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014f6c:	e001      	b.n	8014f72 <rmw_init_options_fini+0x2e>
 8014f6e:	6849      	ldr	r1, [r1, #4]
 8014f70:	b311      	cbz	r1, 8014fb8 <rmw_init_options_fini+0x74>
 8014f72:	688b      	ldr	r3, [r1, #8]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d1fa      	bne.n	8014f6e <rmw_init_options_fini+0x2a>
 8014f78:	4815      	ldr	r0, [pc, #84]	; (8014fd0 <rmw_init_options_fini+0x8c>)
 8014f7a:	f7ff ff19 	bl	8014db0 <put_memory>
 8014f7e:	4668      	mov	r0, sp
 8014f80:	f7ff fdb2 	bl	8014ae8 <rmw_get_zero_initialized_init_options>
 8014f84:	46ee      	mov	lr, sp
 8014f86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f8a:	46a4      	mov	ip, r4
 8014f8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014fa0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014fa4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014fa8:	2300      	movs	r3, #0
 8014faa:	4618      	mov	r0, r3
 8014fac:	b00e      	add	sp, #56	; 0x38
 8014fae:	bd10      	pop	{r4, pc}
 8014fb0:	230b      	movs	r3, #11
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	b00e      	add	sp, #56	; 0x38
 8014fb6:	bd10      	pop	{r4, pc}
 8014fb8:	2301      	movs	r3, #1
 8014fba:	4618      	mov	r0, r3
 8014fbc:	b00e      	add	sp, #56	; 0x38
 8014fbe:	bd10      	pop	{r4, pc}
 8014fc0:	230c      	movs	r3, #12
 8014fc2:	e7f2      	b.n	8014faa <rmw_init_options_fini+0x66>
 8014fc4:	230b      	movs	r3, #11
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	4770      	bx	lr
 8014fca:	bf00      	nop
 8014fcc:	080199e4 	.word	0x080199e4
 8014fd0:	2000e1d4 	.word	0x2000e1d4

08014fd4 <rmw_init>:
 8014fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fd8:	b083      	sub	sp, #12
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	f000 80d3 	beq.w	8015186 <rmw_init+0x1b2>
 8014fe0:	460e      	mov	r6, r1
 8014fe2:	2900      	cmp	r1, #0
 8014fe4:	f000 80cf 	beq.w	8015186 <rmw_init+0x1b2>
 8014fe8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014fea:	4605      	mov	r5, r0
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	f000 80ca 	beq.w	8015186 <rmw_init+0x1b2>
 8014ff2:	4b78      	ldr	r3, [pc, #480]	; (80151d4 <rmw_init+0x200>)
 8014ff4:	6880      	ldr	r0, [r0, #8]
 8014ff6:	681f      	ldr	r7, [r3, #0]
 8014ff8:	b128      	cbz	r0, 8015006 <rmw_init+0x32>
 8014ffa:	4639      	mov	r1, r7
 8014ffc:	f7eb f8e8 	bl	80001d0 <strcmp>
 8015000:	2800      	cmp	r0, #0
 8015002:	f040 80ca 	bne.w	801519a <rmw_init+0x1c6>
 8015006:	e9d5 2300 	ldrd	r2, r3, [r5]
 801500a:	4c73      	ldr	r4, [pc, #460]	; (80151d8 <rmw_init+0x204>)
 801500c:	4973      	ldr	r1, [pc, #460]	; (80151dc <rmw_init+0x208>)
 801500e:	4874      	ldr	r0, [pc, #464]	; (80151e0 <rmw_init+0x20c>)
 8015010:	60b7      	str	r7, [r6, #8]
 8015012:	e9c6 2300 	strd	r2, r3, [r6]
 8015016:	68eb      	ldr	r3, [r5, #12]
 8015018:	64b3      	str	r3, [r6, #72]	; 0x48
 801501a:	2201      	movs	r2, #1
 801501c:	f7fa fbda 	bl	800f7d4 <rmw_uxrce_init_session_memory>
 8015020:	4620      	mov	r0, r4
 8015022:	4970      	ldr	r1, [pc, #448]	; (80151e4 <rmw_init+0x210>)
 8015024:	2204      	movs	r2, #4
 8015026:	f7fa fc15 	bl	800f854 <rmw_uxrce_init_static_input_buffer_memory>
 801502a:	f04f 0800 	mov.w	r8, #0
 801502e:	486c      	ldr	r0, [pc, #432]	; (80151e0 <rmw_init+0x20c>)
 8015030:	f884 800d 	strb.w	r8, [r4, #13]
 8015034:	f7ff feac 	bl	8014d90 <get_memory>
 8015038:	2800      	cmp	r0, #0
 801503a:	f000 80a9 	beq.w	8015190 <rmw_init+0x1bc>
 801503e:	6884      	ldr	r4, [r0, #8]
 8015040:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015042:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015044:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015048:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801504c:	9101      	str	r1, [sp, #4]
 801504e:	6a00      	ldr	r0, [r0, #32]
 8015050:	9000      	str	r0, [sp, #0]
 8015052:	f104 0910 	add.w	r9, r4, #16
 8015056:	4661      	mov	r1, ip
 8015058:	4648      	mov	r0, r9
 801505a:	f000 fdbf 	bl	8015bdc <uxr_set_custom_transport_callbacks>
 801505e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8015062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015066:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 801506a:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801506e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8015072:	495d      	ldr	r1, [pc, #372]	; (80151e8 <rmw_init+0x214>)
 8015074:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8015078:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 801507c:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8015080:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015084:	4859      	ldr	r0, [pc, #356]	; (80151ec <rmw_init+0x218>)
 8015086:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 801508a:	2201      	movs	r2, #1
 801508c:	64f4      	str	r4, [r6, #76]	; 0x4c
 801508e:	f7fa fb81 	bl	800f794 <rmw_uxrce_init_node_memory>
 8015092:	4957      	ldr	r1, [pc, #348]	; (80151f0 <rmw_init+0x21c>)
 8015094:	4857      	ldr	r0, [pc, #348]	; (80151f4 <rmw_init+0x220>)
 8015096:	2205      	movs	r2, #5
 8015098:	f7fa fb5c 	bl	800f754 <rmw_uxrce_init_subscription_memory>
 801509c:	4956      	ldr	r1, [pc, #344]	; (80151f8 <rmw_init+0x224>)
 801509e:	4857      	ldr	r0, [pc, #348]	; (80151fc <rmw_init+0x228>)
 80150a0:	220a      	movs	r2, #10
 80150a2:	f7fa fb37 	bl	800f714 <rmw_uxrce_init_publisher_memory>
 80150a6:	4956      	ldr	r1, [pc, #344]	; (8015200 <rmw_init+0x22c>)
 80150a8:	4856      	ldr	r0, [pc, #344]	; (8015204 <rmw_init+0x230>)
 80150aa:	2201      	movs	r2, #1
 80150ac:	f7fa faf2 	bl	800f694 <rmw_uxrce_init_service_memory>
 80150b0:	4955      	ldr	r1, [pc, #340]	; (8015208 <rmw_init+0x234>)
 80150b2:	4856      	ldr	r0, [pc, #344]	; (801520c <rmw_init+0x238>)
 80150b4:	2201      	movs	r2, #1
 80150b6:	f7fa fb0d 	bl	800f6d4 <rmw_uxrce_init_client_memory>
 80150ba:	4955      	ldr	r1, [pc, #340]	; (8015210 <rmw_init+0x23c>)
 80150bc:	4855      	ldr	r0, [pc, #340]	; (8015214 <rmw_init+0x240>)
 80150be:	220f      	movs	r2, #15
 80150c0:	f7fa fba8 	bl	800f814 <rmw_uxrce_init_topic_memory>
 80150c4:	4954      	ldr	r1, [pc, #336]	; (8015218 <rmw_init+0x244>)
 80150c6:	4855      	ldr	r0, [pc, #340]	; (801521c <rmw_init+0x248>)
 80150c8:	2203      	movs	r2, #3
 80150ca:	f7fa fbe3 	bl	800f894 <rmw_uxrce_init_init_options_impl_memory>
 80150ce:	4954      	ldr	r1, [pc, #336]	; (8015220 <rmw_init+0x24c>)
 80150d0:	4854      	ldr	r0, [pc, #336]	; (8015224 <rmw_init+0x250>)
 80150d2:	2204      	movs	r2, #4
 80150d4:	f7fa fbfe 	bl	800f8d4 <rmw_uxrce_init_wait_set_memory>
 80150d8:	4953      	ldr	r1, [pc, #332]	; (8015228 <rmw_init+0x254>)
 80150da:	4854      	ldr	r0, [pc, #336]	; (801522c <rmw_init+0x258>)
 80150dc:	2204      	movs	r2, #4
 80150de:	f7fa fc19 	bl	800f914 <rmw_uxrce_init_guard_condition_memory>
 80150e2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80150e4:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80150e6:	4642      	mov	r2, r8
 80150e8:	f000 fb06 	bl	80156f8 <rmw_uxrce_transport_init>
 80150ec:	4607      	mov	r7, r0
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d158      	bne.n	80151a4 <rmw_init+0x1d0>
 80150f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80150f4:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80150f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150fa:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80150fe:	4628      	mov	r0, r5
 8015100:	f7fc f84e 	bl	80111a0 <uxr_init_session>
 8015104:	494a      	ldr	r1, [pc, #296]	; (8015230 <rmw_init+0x25c>)
 8015106:	4622      	mov	r2, r4
 8015108:	4628      	mov	r0, r5
 801510a:	f7fc f86d 	bl	80111e8 <uxr_set_topic_callback>
 801510e:	4949      	ldr	r1, [pc, #292]	; (8015234 <rmw_init+0x260>)
 8015110:	463a      	mov	r2, r7
 8015112:	4628      	mov	r0, r5
 8015114:	f7fc f864 	bl	80111e0 <uxr_set_status_callback>
 8015118:	4947      	ldr	r1, [pc, #284]	; (8015238 <rmw_init+0x264>)
 801511a:	463a      	mov	r2, r7
 801511c:	4628      	mov	r0, r5
 801511e:	f7fc f867 	bl	80111f0 <uxr_set_request_callback>
 8015122:	4946      	ldr	r1, [pc, #280]	; (801523c <rmw_init+0x268>)
 8015124:	463a      	mov	r2, r7
 8015126:	4628      	mov	r0, r5
 8015128:	f7fc f866 	bl	80111f8 <uxr_set_reply_callback>
 801512c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015130:	2304      	movs	r3, #4
 8015132:	0092      	lsls	r2, r2, #2
 8015134:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015138:	4628      	mov	r0, r5
 801513a:	f7fc f89b 	bl	8011274 <uxr_create_input_reliable_stream>
 801513e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015142:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015146:	0092      	lsls	r2, r2, #2
 8015148:	2304      	movs	r3, #4
 801514a:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 801514e:	4628      	mov	r0, r5
 8015150:	f7fc f868 	bl	8011224 <uxr_create_output_reliable_stream>
 8015154:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015158:	4628      	mov	r0, r5
 801515a:	f7fc f885 	bl	8011268 <uxr_create_input_best_effort_stream>
 801515e:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8015162:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015166:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801516a:	3114      	adds	r1, #20
 801516c:	4628      	mov	r0, r5
 801516e:	f7fc f847 	bl	8011200 <uxr_create_output_best_effort_stream>
 8015172:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015176:	4628      	mov	r0, r5
 8015178:	f7fc fd98 	bl	8011cac <uxr_create_session>
 801517c:	b1f8      	cbz	r0, 80151be <rmw_init+0x1ea>
 801517e:	4638      	mov	r0, r7
 8015180:	b003      	add	sp, #12
 8015182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015186:	270b      	movs	r7, #11
 8015188:	4638      	mov	r0, r7
 801518a:	b003      	add	sp, #12
 801518c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015190:	2701      	movs	r7, #1
 8015192:	4638      	mov	r0, r7
 8015194:	b003      	add	sp, #12
 8015196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801519a:	270c      	movs	r7, #12
 801519c:	4638      	mov	r0, r7
 801519e:	b003      	add	sp, #12
 80151a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151a4:	4648      	mov	r0, r9
 80151a6:	f000 fd5b 	bl	8015c60 <uxr_close_custom_transport>
 80151aa:	480d      	ldr	r0, [pc, #52]	; (80151e0 <rmw_init+0x20c>)
 80151ac:	4621      	mov	r1, r4
 80151ae:	f7ff fdff 	bl	8014db0 <put_memory>
 80151b2:	4638      	mov	r0, r7
 80151b4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80151b8:	b003      	add	sp, #12
 80151ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151be:	4648      	mov	r0, r9
 80151c0:	f000 fd4e 	bl	8015c60 <uxr_close_custom_transport>
 80151c4:	4806      	ldr	r0, [pc, #24]	; (80151e0 <rmw_init+0x20c>)
 80151c6:	4621      	mov	r1, r4
 80151c8:	f7ff fdf2 	bl	8014db0 <put_memory>
 80151cc:	64f7      	str	r7, [r6, #76]	; 0x4c
 80151ce:	2701      	movs	r7, #1
 80151d0:	e7d5      	b.n	801517e <rmw_init+0x1aa>
 80151d2:	bf00      	nop
 80151d4:	080199e4 	.word	0x080199e4
 80151d8:	2000e224 	.word	0x2000e224
 80151dc:	2000a4d0 	.word	0x2000a4d0
 80151e0:	2000e214 	.word	0x2000e214
 80151e4:	2000ba78 	.word	0x2000ba78
 80151e8:	20009af4 	.word	0x20009af4
 80151ec:	2000e1e4 	.word	0x2000e1e4
 80151f0:	2000db78 	.word	0x2000db78
 80151f4:	2000e234 	.word	0x2000e234
 80151f8:	20009b98 	.word	0x20009b98
 80151fc:	2000e1f4 	.word	0x2000e1f4
 8015200:	2000a408 	.word	0x2000a408
 8015204:	2000e204 	.word	0x2000e204
 8015208:	20009928 	.word	0x20009928
 801520c:	20009918 	.word	0x20009918
 8015210:	2000dfb0 	.word	0x2000dfb0
 8015214:	2000e244 	.word	0x2000e244
 8015218:	20009a70 	.word	0x20009a70
 801521c:	2000e1d4 	.word	0x2000e1d4
 8015220:	2000e154 	.word	0x2000e154
 8015224:	2000e254 	.word	0x2000e254
 8015228:	200099f0 	.word	0x200099f0
 801522c:	2000e1c4 	.word	0x2000e1c4
 8015230:	0801787d 	.word	0x0801787d
 8015234:	08017875 	.word	0x08017875
 8015238:	08017915 	.word	0x08017915
 801523c:	080179b1 	.word	0x080179b1

08015240 <rmw_context_fini>:
 8015240:	4b17      	ldr	r3, [pc, #92]	; (80152a0 <rmw_context_fini+0x60>)
 8015242:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015244:	b570      	push	{r4, r5, r6, lr}
 8015246:	681c      	ldr	r4, [r3, #0]
 8015248:	4605      	mov	r5, r0
 801524a:	b334      	cbz	r4, 801529a <rmw_context_fini+0x5a>
 801524c:	2600      	movs	r6, #0
 801524e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015252:	6902      	ldr	r2, [r0, #16]
 8015254:	428a      	cmp	r2, r1
 8015256:	d018      	beq.n	801528a <rmw_context_fini+0x4a>
 8015258:	2c00      	cmp	r4, #0
 801525a:	d1f8      	bne.n	801524e <rmw_context_fini+0xe>
 801525c:	b189      	cbz	r1, 8015282 <rmw_context_fini+0x42>
 801525e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015262:	789b      	ldrb	r3, [r3, #2]
 8015264:	2b01      	cmp	r3, #1
 8015266:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801526a:	bf14      	ite	ne
 801526c:	210a      	movne	r1, #10
 801526e:	2100      	moveq	r1, #0
 8015270:	f7fc fcf4 	bl	8011c5c <uxr_delete_session_retries>
 8015274:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015276:	f7fa fb6d 	bl	800f954 <rmw_uxrce_fini_session_memory>
 801527a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801527c:	3010      	adds	r0, #16
 801527e:	f000 fcef 	bl	8015c60 <uxr_close_custom_transport>
 8015282:	2300      	movs	r3, #0
 8015284:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015286:	4630      	mov	r0, r6
 8015288:	bd70      	pop	{r4, r5, r6, pc}
 801528a:	3018      	adds	r0, #24
 801528c:	f000 f90e 	bl	80154ac <rmw_destroy_node>
 8015290:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015292:	4606      	mov	r6, r0
 8015294:	2c00      	cmp	r4, #0
 8015296:	d1da      	bne.n	801524e <rmw_context_fini+0xe>
 8015298:	e7e0      	b.n	801525c <rmw_context_fini+0x1c>
 801529a:	4626      	mov	r6, r4
 801529c:	e7de      	b.n	801525c <rmw_context_fini+0x1c>
 801529e:	bf00      	nop
 80152a0:	2000e1e4 	.word	0x2000e1e4

080152a4 <create_topic>:
 80152a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152a8:	4605      	mov	r5, r0
 80152aa:	b084      	sub	sp, #16
 80152ac:	4822      	ldr	r0, [pc, #136]	; (8015338 <create_topic+0x94>)
 80152ae:	460f      	mov	r7, r1
 80152b0:	4616      	mov	r6, r2
 80152b2:	f7ff fd6d 	bl	8014d90 <get_memory>
 80152b6:	4604      	mov	r4, r0
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d039      	beq.n	8015330 <create_topic+0x8c>
 80152bc:	692b      	ldr	r3, [r5, #16]
 80152be:	6884      	ldr	r4, [r0, #8]
 80152c0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8015340 <create_topic+0x9c>
 80152c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80152c8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80152cc:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80152d0:	1c42      	adds	r2, r0, #1
 80152d2:	2102      	movs	r1, #2
 80152d4:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80152d8:	f7fb fea4 	bl	8011024 <uxr_object_id>
 80152dc:	223c      	movs	r2, #60	; 0x3c
 80152de:	6120      	str	r0, [r4, #16]
 80152e0:	4641      	mov	r1, r8
 80152e2:	4638      	mov	r0, r7
 80152e4:	f7fa fc6e 	bl	800fbc4 <generate_topic_name>
 80152e8:	b1f0      	cbz	r0, 8015328 <create_topic+0x84>
 80152ea:	4f14      	ldr	r7, [pc, #80]	; (801533c <create_topic+0x98>)
 80152ec:	4630      	mov	r0, r6
 80152ee:	2264      	movs	r2, #100	; 0x64
 80152f0:	4639      	mov	r1, r7
 80152f2:	f7fa fc37 	bl	800fb64 <generate_type_name>
 80152f6:	b1b8      	cbz	r0, 8015328 <create_topic+0x84>
 80152f8:	6928      	ldr	r0, [r5, #16]
 80152fa:	2306      	movs	r3, #6
 80152fc:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015300:	f8cd 8000 	str.w	r8, [sp]
 8015304:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015308:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801530c:	6811      	ldr	r1, [r2, #0]
 801530e:	696b      	ldr	r3, [r5, #20]
 8015310:	6922      	ldr	r2, [r4, #16]
 8015312:	f7fb fdab 	bl	8010e6c <uxr_buffer_create_topic_bin>
 8015316:	4602      	mov	r2, r0
 8015318:	6928      	ldr	r0, [r5, #16]
 801531a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801531e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015322:	f7fa fbe9 	bl	800faf8 <run_xrce_session>
 8015326:	b918      	cbnz	r0, 8015330 <create_topic+0x8c>
 8015328:	4620      	mov	r0, r4
 801532a:	f7fa fb89 	bl	800fa40 <rmw_uxrce_fini_topic_memory>
 801532e:	2400      	movs	r4, #0
 8015330:	4620      	mov	r0, r4
 8015332:	b004      	add	sp, #16
 8015334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015338:	2000e244 	.word	0x2000e244
 801533c:	2000e2c0 	.word	0x2000e2c0
 8015340:	2000e284 	.word	0x2000e284

08015344 <destroy_topic>:
 8015344:	b538      	push	{r3, r4, r5, lr}
 8015346:	6985      	ldr	r5, [r0, #24]
 8015348:	b1d5      	cbz	r5, 8015380 <destroy_topic+0x3c>
 801534a:	4604      	mov	r4, r0
 801534c:	6928      	ldr	r0, [r5, #16]
 801534e:	6922      	ldr	r2, [r4, #16]
 8015350:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015354:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015358:	6819      	ldr	r1, [r3, #0]
 801535a:	f7fb fd09 	bl	8010d70 <uxr_buffer_delete_entity>
 801535e:	4602      	mov	r2, r0
 8015360:	6928      	ldr	r0, [r5, #16]
 8015362:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015366:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801536a:	f7fa fbc5 	bl	800faf8 <run_xrce_session>
 801536e:	2800      	cmp	r0, #0
 8015370:	4620      	mov	r0, r4
 8015372:	bf14      	ite	ne
 8015374:	2400      	movne	r4, #0
 8015376:	2402      	moveq	r4, #2
 8015378:	f7fa fb62 	bl	800fa40 <rmw_uxrce_fini_topic_memory>
 801537c:	4620      	mov	r0, r4
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	2401      	movs	r4, #1
 8015382:	4620      	mov	r0, r4
 8015384:	bd38      	pop	{r3, r4, r5, pc}
 8015386:	bf00      	nop

08015388 <create_node>:
 8015388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801538c:	b083      	sub	sp, #12
 801538e:	2b00      	cmp	r3, #0
 8015390:	d05f      	beq.n	8015452 <create_node+0xca>
 8015392:	4606      	mov	r6, r0
 8015394:	4835      	ldr	r0, [pc, #212]	; (801546c <create_node+0xe4>)
 8015396:	460f      	mov	r7, r1
 8015398:	4690      	mov	r8, r2
 801539a:	461d      	mov	r5, r3
 801539c:	f7ff fcf8 	bl	8014d90 <get_memory>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	d056      	beq.n	8015452 <create_node+0xca>
 80153a4:	6884      	ldr	r4, [r0, #8]
 80153a6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80153a8:	6123      	str	r3, [r4, #16]
 80153aa:	f7ff fd15 	bl	8014dd8 <rmw_get_implementation_identifier>
 80153ae:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80153b2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80153b6:	f8c4 9020 	str.w	r9, [r4, #32]
 80153ba:	4630      	mov	r0, r6
 80153bc:	f7ea ff12 	bl	80001e4 <strlen>
 80153c0:	1c42      	adds	r2, r0, #1
 80153c2:	2a3c      	cmp	r2, #60	; 0x3c
 80153c4:	f104 0518 	add.w	r5, r4, #24
 80153c8:	d840      	bhi.n	801544c <create_node+0xc4>
 80153ca:	4648      	mov	r0, r9
 80153cc:	4631      	mov	r1, r6
 80153ce:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80153d2:	f003 f81f 	bl	8018414 <memcpy>
 80153d6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80153da:	4638      	mov	r0, r7
 80153dc:	f7ea ff02 	bl	80001e4 <strlen>
 80153e0:	1c42      	adds	r2, r0, #1
 80153e2:	2a3c      	cmp	r2, #60	; 0x3c
 80153e4:	d832      	bhi.n	801544c <create_node+0xc4>
 80153e6:	4639      	mov	r1, r7
 80153e8:	4648      	mov	r0, r9
 80153ea:	f003 f813 	bl	8018414 <memcpy>
 80153ee:	6923      	ldr	r3, [r4, #16]
 80153f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153f4:	2101      	movs	r1, #1
 80153f6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 80153fa:	1842      	adds	r2, r0, r1
 80153fc:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015400:	f7fb fe10 	bl	8011024 <uxr_object_id>
 8015404:	6160      	str	r0, [r4, #20]
 8015406:	783b      	ldrb	r3, [r7, #0]
 8015408:	2b2f      	cmp	r3, #47	; 0x2f
 801540a:	d127      	bne.n	801545c <create_node+0xd4>
 801540c:	787b      	ldrb	r3, [r7, #1]
 801540e:	bb2b      	cbnz	r3, 801545c <create_node+0xd4>
 8015410:	4a17      	ldr	r2, [pc, #92]	; (8015470 <create_node+0xe8>)
 8015412:	4818      	ldr	r0, [pc, #96]	; (8015474 <create_node+0xec>)
 8015414:	4633      	mov	r3, r6
 8015416:	213c      	movs	r1, #60	; 0x3c
 8015418:	f002 fe84 	bl	8018124 <sniprintf>
 801541c:	6920      	ldr	r0, [r4, #16]
 801541e:	4915      	ldr	r1, [pc, #84]	; (8015474 <create_node+0xec>)
 8015420:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015424:	9100      	str	r1, [sp, #0]
 8015426:	2106      	movs	r1, #6
 8015428:	9101      	str	r1, [sp, #4]
 801542a:	6811      	ldr	r1, [r2, #0]
 801542c:	6962      	ldr	r2, [r4, #20]
 801542e:	fa1f f388 	uxth.w	r3, r8
 8015432:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015436:	f7fb fce7 	bl	8010e08 <uxr_buffer_create_participant_bin>
 801543a:	4602      	mov	r2, r0
 801543c:	6920      	ldr	r0, [r4, #16]
 801543e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015442:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015446:	f7fa fb57 	bl	800faf8 <run_xrce_session>
 801544a:	b918      	cbnz	r0, 8015454 <create_node+0xcc>
 801544c:	4628      	mov	r0, r5
 801544e:	f7fa fa87 	bl	800f960 <rmw_uxrce_fini_node_memory>
 8015452:	2500      	movs	r5, #0
 8015454:	4628      	mov	r0, r5
 8015456:	b003      	add	sp, #12
 8015458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801545c:	4a06      	ldr	r2, [pc, #24]	; (8015478 <create_node+0xf0>)
 801545e:	9600      	str	r6, [sp, #0]
 8015460:	463b      	mov	r3, r7
 8015462:	213c      	movs	r1, #60	; 0x3c
 8015464:	4803      	ldr	r0, [pc, #12]	; (8015474 <create_node+0xec>)
 8015466:	f002 fe5d 	bl	8018124 <sniprintf>
 801546a:	e7d7      	b.n	801541c <create_node+0x94>
 801546c:	2000e1e4 	.word	0x2000e1e4
 8015470:	080193fc 	.word	0x080193fc
 8015474:	2000e324 	.word	0x2000e324
 8015478:	0801958c 	.word	0x0801958c

0801547c <rmw_create_node>:
 801547c:	b199      	cbz	r1, 80154a6 <rmw_create_node+0x2a>
 801547e:	780b      	ldrb	r3, [r1, #0]
 8015480:	468c      	mov	ip, r1
 8015482:	b183      	cbz	r3, 80154a6 <rmw_create_node+0x2a>
 8015484:	b410      	push	{r4}
 8015486:	4614      	mov	r4, r2
 8015488:	b14a      	cbz	r2, 801549e <rmw_create_node+0x22>
 801548a:	7813      	ldrb	r3, [r2, #0]
 801548c:	b13b      	cbz	r3, 801549e <rmw_create_node+0x22>
 801548e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015490:	4603      	mov	r3, r0
 8015492:	4621      	mov	r1, r4
 8015494:	4660      	mov	r0, ip
 8015496:	f85d 4b04 	ldr.w	r4, [sp], #4
 801549a:	f7ff bf75 	b.w	8015388 <create_node>
 801549e:	2000      	movs	r0, #0
 80154a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154a4:	4770      	bx	lr
 80154a6:	2000      	movs	r0, #0
 80154a8:	4770      	bx	lr
 80154aa:	bf00      	nop

080154ac <rmw_destroy_node>:
 80154ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ae:	b328      	cbz	r0, 80154fc <rmw_destroy_node+0x50>
 80154b0:	4607      	mov	r7, r0
 80154b2:	6800      	ldr	r0, [r0, #0]
 80154b4:	b120      	cbz	r0, 80154c0 <rmw_destroy_node+0x14>
 80154b6:	4b36      	ldr	r3, [pc, #216]	; (8015590 <rmw_destroy_node+0xe4>)
 80154b8:	6819      	ldr	r1, [r3, #0]
 80154ba:	f7ea fe89 	bl	80001d0 <strcmp>
 80154be:	b9e8      	cbnz	r0, 80154fc <rmw_destroy_node+0x50>
 80154c0:	687d      	ldr	r5, [r7, #4]
 80154c2:	b1dd      	cbz	r5, 80154fc <rmw_destroy_node+0x50>
 80154c4:	4b33      	ldr	r3, [pc, #204]	; (8015594 <rmw_destroy_node+0xe8>)
 80154c6:	681c      	ldr	r4, [r3, #0]
 80154c8:	2c00      	cmp	r4, #0
 80154ca:	d05f      	beq.n	801558c <rmw_destroy_node+0xe0>
 80154cc:	2600      	movs	r6, #0
 80154ce:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80154d2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80154d6:	429d      	cmp	r5, r3
 80154d8:	d013      	beq.n	8015502 <rmw_destroy_node+0x56>
 80154da:	2c00      	cmp	r4, #0
 80154dc:	d1f7      	bne.n	80154ce <rmw_destroy_node+0x22>
 80154de:	4b2e      	ldr	r3, [pc, #184]	; (8015598 <rmw_destroy_node+0xec>)
 80154e0:	681c      	ldr	r4, [r3, #0]
 80154e2:	b1c4      	cbz	r4, 8015516 <rmw_destroy_node+0x6a>
 80154e4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80154e8:	6a0b      	ldr	r3, [r1, #32]
 80154ea:	429d      	cmp	r5, r3
 80154ec:	d1f9      	bne.n	80154e2 <rmw_destroy_node+0x36>
 80154ee:	317c      	adds	r1, #124	; 0x7c
 80154f0:	4638      	mov	r0, r7
 80154f2:	f000 f8a1 	bl	8015638 <rmw_destroy_subscription>
 80154f6:	2801      	cmp	r0, #1
 80154f8:	4606      	mov	r6, r0
 80154fa:	d1f2      	bne.n	80154e2 <rmw_destroy_node+0x36>
 80154fc:	2601      	movs	r6, #1
 80154fe:	4630      	mov	r0, r6
 8015500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015502:	3184      	adds	r1, #132	; 0x84
 8015504:	4638      	mov	r0, r7
 8015506:	f7fa f873 	bl	800f5f0 <rmw_destroy_publisher>
 801550a:	2801      	cmp	r0, #1
 801550c:	4606      	mov	r6, r0
 801550e:	d0f5      	beq.n	80154fc <rmw_destroy_node+0x50>
 8015510:	2c00      	cmp	r4, #0
 8015512:	d1dc      	bne.n	80154ce <rmw_destroy_node+0x22>
 8015514:	e7e3      	b.n	80154de <rmw_destroy_node+0x32>
 8015516:	4b21      	ldr	r3, [pc, #132]	; (801559c <rmw_destroy_node+0xf0>)
 8015518:	681c      	ldr	r4, [r3, #0]
 801551a:	b16c      	cbz	r4, 8015538 <rmw_destroy_node+0x8c>
 801551c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015520:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015522:	429d      	cmp	r5, r3
 8015524:	d1f9      	bne.n	801551a <rmw_destroy_node+0x6e>
 8015526:	317c      	adds	r1, #124	; 0x7c
 8015528:	4638      	mov	r0, r7
 801552a:	f000 f841 	bl	80155b0 <rmw_destroy_service>
 801552e:	2801      	cmp	r0, #1
 8015530:	4606      	mov	r6, r0
 8015532:	d0e3      	beq.n	80154fc <rmw_destroy_node+0x50>
 8015534:	2c00      	cmp	r4, #0
 8015536:	d1f1      	bne.n	801551c <rmw_destroy_node+0x70>
 8015538:	4b19      	ldr	r3, [pc, #100]	; (80155a0 <rmw_destroy_node+0xf4>)
 801553a:	681c      	ldr	r4, [r3, #0]
 801553c:	b16c      	cbz	r4, 801555a <rmw_destroy_node+0xae>
 801553e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015542:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015544:	429d      	cmp	r5, r3
 8015546:	d1f9      	bne.n	801553c <rmw_destroy_node+0x90>
 8015548:	317c      	adds	r1, #124	; 0x7c
 801554a:	4638      	mov	r0, r7
 801554c:	f002 fa7a 	bl	8017a44 <rmw_destroy_client>
 8015550:	2801      	cmp	r0, #1
 8015552:	4606      	mov	r6, r0
 8015554:	d0d2      	beq.n	80154fc <rmw_destroy_node+0x50>
 8015556:	2c00      	cmp	r4, #0
 8015558:	d1f1      	bne.n	801553e <rmw_destroy_node+0x92>
 801555a:	6928      	ldr	r0, [r5, #16]
 801555c:	696a      	ldr	r2, [r5, #20]
 801555e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015562:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015566:	6819      	ldr	r1, [r3, #0]
 8015568:	f7fb fc02 	bl	8010d70 <uxr_buffer_delete_entity>
 801556c:	4602      	mov	r2, r0
 801556e:	6928      	ldr	r0, [r5, #16]
 8015570:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015574:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015578:	f7fa fabe 	bl	800faf8 <run_xrce_session>
 801557c:	2800      	cmp	r0, #0
 801557e:	bf08      	it	eq
 8015580:	2602      	moveq	r6, #2
 8015582:	4638      	mov	r0, r7
 8015584:	f7fa f9ec 	bl	800f960 <rmw_uxrce_fini_node_memory>
 8015588:	4630      	mov	r0, r6
 801558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801558c:	4626      	mov	r6, r4
 801558e:	e7a6      	b.n	80154de <rmw_destroy_node+0x32>
 8015590:	080199e4 	.word	0x080199e4
 8015594:	2000e1f4 	.word	0x2000e1f4
 8015598:	2000e234 	.word	0x2000e234
 801559c:	2000e204 	.word	0x2000e204
 80155a0:	20009918 	.word	0x20009918

080155a4 <rmw_node_get_graph_guard_condition>:
 80155a4:	6843      	ldr	r3, [r0, #4]
 80155a6:	6918      	ldr	r0, [r3, #16]
 80155a8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop

080155b0 <rmw_destroy_service>:
 80155b0:	b570      	push	{r4, r5, r6, lr}
 80155b2:	b128      	cbz	r0, 80155c0 <rmw_destroy_service+0x10>
 80155b4:	4604      	mov	r4, r0
 80155b6:	6800      	ldr	r0, [r0, #0]
 80155b8:	460d      	mov	r5, r1
 80155ba:	f7fa fb1d 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 80155be:	b910      	cbnz	r0, 80155c6 <rmw_destroy_service+0x16>
 80155c0:	2401      	movs	r4, #1
 80155c2:	4620      	mov	r0, r4
 80155c4:	bd70      	pop	{r4, r5, r6, pc}
 80155c6:	6863      	ldr	r3, [r4, #4]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d0f9      	beq.n	80155c0 <rmw_destroy_service+0x10>
 80155cc:	2d00      	cmp	r5, #0
 80155ce:	d0f7      	beq.n	80155c0 <rmw_destroy_service+0x10>
 80155d0:	6828      	ldr	r0, [r5, #0]
 80155d2:	f7fa fb11 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 80155d6:	2800      	cmp	r0, #0
 80155d8:	d0f2      	beq.n	80155c0 <rmw_destroy_service+0x10>
 80155da:	686e      	ldr	r6, [r5, #4]
 80155dc:	2e00      	cmp	r6, #0
 80155de:	d0ef      	beq.n	80155c0 <rmw_destroy_service+0x10>
 80155e0:	6864      	ldr	r4, [r4, #4]
 80155e2:	6932      	ldr	r2, [r6, #16]
 80155e4:	6920      	ldr	r0, [r4, #16]
 80155e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80155ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80155ee:	6819      	ldr	r1, [r3, #0]
 80155f0:	f001 f882 	bl	80166f8 <uxr_buffer_cancel_data>
 80155f4:	4602      	mov	r2, r0
 80155f6:	6920      	ldr	r0, [r4, #16]
 80155f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80155fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015600:	f7fa fa7a 	bl	800faf8 <run_xrce_session>
 8015604:	6920      	ldr	r0, [r4, #16]
 8015606:	6932      	ldr	r2, [r6, #16]
 8015608:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801560c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015610:	6819      	ldr	r1, [r3, #0]
 8015612:	f7fb fbad 	bl	8010d70 <uxr_buffer_delete_entity>
 8015616:	4602      	mov	r2, r0
 8015618:	6920      	ldr	r0, [r4, #16]
 801561a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801561e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015622:	f7fa fa69 	bl	800faf8 <run_xrce_session>
 8015626:	2800      	cmp	r0, #0
 8015628:	4628      	mov	r0, r5
 801562a:	bf14      	ite	ne
 801562c:	2400      	movne	r4, #0
 801562e:	2402      	moveq	r4, #2
 8015630:	f7fa f9da 	bl	800f9e8 <rmw_uxrce_fini_service_memory>
 8015634:	e7c5      	b.n	80155c2 <rmw_destroy_service+0x12>
 8015636:	bf00      	nop

08015638 <rmw_destroy_subscription>:
 8015638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563a:	b128      	cbz	r0, 8015648 <rmw_destroy_subscription+0x10>
 801563c:	4604      	mov	r4, r0
 801563e:	6800      	ldr	r0, [r0, #0]
 8015640:	460d      	mov	r5, r1
 8015642:	f7fa fad9 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 8015646:	b910      	cbnz	r0, 801564e <rmw_destroy_subscription+0x16>
 8015648:	2401      	movs	r4, #1
 801564a:	4620      	mov	r0, r4
 801564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801564e:	6863      	ldr	r3, [r4, #4]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d0f9      	beq.n	8015648 <rmw_destroy_subscription+0x10>
 8015654:	2d00      	cmp	r5, #0
 8015656:	d0f7      	beq.n	8015648 <rmw_destroy_subscription+0x10>
 8015658:	6828      	ldr	r0, [r5, #0]
 801565a:	f7fa facd 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 801565e:	2800      	cmp	r0, #0
 8015660:	d0f2      	beq.n	8015648 <rmw_destroy_subscription+0x10>
 8015662:	686c      	ldr	r4, [r5, #4]
 8015664:	2c00      	cmp	r4, #0
 8015666:	d0ef      	beq.n	8015648 <rmw_destroy_subscription+0x10>
 8015668:	6a26      	ldr	r6, [r4, #32]
 801566a:	6962      	ldr	r2, [r4, #20]
 801566c:	6930      	ldr	r0, [r6, #16]
 801566e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015672:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015676:	6819      	ldr	r1, [r3, #0]
 8015678:	f001 f83e 	bl	80166f8 <uxr_buffer_cancel_data>
 801567c:	4602      	mov	r2, r0
 801567e:	6930      	ldr	r0, [r6, #16]
 8015680:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015684:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015688:	f7fa fa36 	bl	800faf8 <run_xrce_session>
 801568c:	69e0      	ldr	r0, [r4, #28]
 801568e:	f7ff fe59 	bl	8015344 <destroy_topic>
 8015692:	6a23      	ldr	r3, [r4, #32]
 8015694:	6962      	ldr	r2, [r4, #20]
 8015696:	6918      	ldr	r0, [r3, #16]
 8015698:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801569c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80156a0:	6819      	ldr	r1, [r3, #0]
 80156a2:	f7fb fb65 	bl	8010d70 <uxr_buffer_delete_entity>
 80156a6:	6a23      	ldr	r3, [r4, #32]
 80156a8:	6922      	ldr	r2, [r4, #16]
 80156aa:	691b      	ldr	r3, [r3, #16]
 80156ac:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 80156b0:	4604      	mov	r4, r0
 80156b2:	6809      	ldr	r1, [r1, #0]
 80156b4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80156b8:	f7fb fb5a 	bl	8010d70 <uxr_buffer_delete_entity>
 80156bc:	6937      	ldr	r7, [r6, #16]
 80156be:	4622      	mov	r2, r4
 80156c0:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80156c4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80156c8:	4604      	mov	r4, r0
 80156ca:	4638      	mov	r0, r7
 80156cc:	f7fa fa14 	bl	800faf8 <run_xrce_session>
 80156d0:	6936      	ldr	r6, [r6, #16]
 80156d2:	4622      	mov	r2, r4
 80156d4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80156d8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80156dc:	4604      	mov	r4, r0
 80156de:	4630      	mov	r0, r6
 80156e0:	f7fa fa0a 	bl	800faf8 <run_xrce_session>
 80156e4:	b12c      	cbz	r4, 80156f2 <rmw_destroy_subscription+0xba>
 80156e6:	b120      	cbz	r0, 80156f2 <rmw_destroy_subscription+0xba>
 80156e8:	2400      	movs	r4, #0
 80156ea:	4628      	mov	r0, r5
 80156ec:	f7fa f966 	bl	800f9bc <rmw_uxrce_fini_subscription_memory>
 80156f0:	e7ab      	b.n	801564a <rmw_destroy_subscription+0x12>
 80156f2:	2402      	movs	r4, #2
 80156f4:	e7f9      	b.n	80156ea <rmw_destroy_subscription+0xb2>
 80156f6:	bf00      	nop

080156f8 <rmw_uxrce_transport_init>:
 80156f8:	b508      	push	{r3, lr}
 80156fa:	b108      	cbz	r0, 8015700 <rmw_uxrce_transport_init+0x8>
 80156fc:	f100 0210 	add.w	r2, r0, #16
 8015700:	b139      	cbz	r1, 8015712 <rmw_uxrce_transport_init+0x1a>
 8015702:	6949      	ldr	r1, [r1, #20]
 8015704:	4610      	mov	r0, r2
 8015706:	f000 fa77 	bl	8015bf8 <uxr_init_custom_transport>
 801570a:	f080 0001 	eor.w	r0, r0, #1
 801570e:	b2c0      	uxtb	r0, r0
 8015710:	bd08      	pop	{r3, pc}
 8015712:	4b04      	ldr	r3, [pc, #16]	; (8015724 <rmw_uxrce_transport_init+0x2c>)
 8015714:	4610      	mov	r0, r2
 8015716:	6859      	ldr	r1, [r3, #4]
 8015718:	f000 fa6e 	bl	8015bf8 <uxr_init_custom_transport>
 801571c:	f080 0001 	eor.w	r0, r0, #1
 8015720:	b2c0      	uxtb	r0, r0
 8015722:	bd08      	pop	{r3, pc}
 8015724:	200098fc 	.word	0x200098fc

08015728 <rmw_uros_epoch_nanos>:
 8015728:	4b05      	ldr	r3, [pc, #20]	; (8015740 <rmw_uros_epoch_nanos+0x18>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	b123      	cbz	r3, 8015738 <rmw_uros_epoch_nanos+0x10>
 801572e:	6898      	ldr	r0, [r3, #8]
 8015730:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015734:	f7fb bdba 	b.w	80112ac <uxr_epoch_nanos>
 8015738:	2000      	movs	r0, #0
 801573a:	2100      	movs	r1, #0
 801573c:	4770      	bx	lr
 801573e:	bf00      	nop
 8015740:	2000e214 	.word	0x2000e214

08015744 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015748:	6805      	ldr	r5, [r0, #0]
 801574a:	4604      	mov	r4, r0
 801574c:	4628      	mov	r0, r5
 801574e:	460e      	mov	r6, r1
 8015750:	f7ea fd3e 	bl	80001d0 <strcmp>
 8015754:	b1c8      	cbz	r0, 801578a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015756:	4b11      	ldr	r3, [pc, #68]	; (801579c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	429d      	cmp	r5, r3
 801575c:	d112      	bne.n	8015784 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801575e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015762:	f8d8 4000 	ldr.w	r4, [r8]
 8015766:	b16c      	cbz	r4, 8015784 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015768:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801576c:	2700      	movs	r7, #0
 801576e:	3d04      	subs	r5, #4
 8015770:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015774:	4631      	mov	r1, r6
 8015776:	f7ea fd2b 	bl	80001d0 <strcmp>
 801577a:	00bb      	lsls	r3, r7, #2
 801577c:	b140      	cbz	r0, 8015790 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801577e:	3701      	adds	r7, #1
 8015780:	42bc      	cmp	r4, r7
 8015782:	d1f5      	bne.n	8015770 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015784:	2000      	movs	r0, #0
 8015786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801578a:	4620      	mov	r0, r4
 801578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015790:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015798:	58d3      	ldr	r3, [r2, r3]
 801579a:	4718      	bx	r3
 801579c:	200000cc 	.word	0x200000cc

080157a0 <std_msgs__msg__Int32__init>:
 80157a0:	3800      	subs	r0, #0
 80157a2:	bf18      	it	ne
 80157a4:	2001      	movne	r0, #1
 80157a6:	4770      	bx	lr

080157a8 <std_msgs__msg__Int32__fini>:
 80157a8:	4770      	bx	lr
 80157aa:	bf00      	nop

080157ac <ucdr_serialize_endian_array_char>:
 80157ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157b0:	4619      	mov	r1, r3
 80157b2:	461f      	mov	r7, r3
 80157b4:	4605      	mov	r5, r0
 80157b6:	4690      	mov	r8, r2
 80157b8:	f7fb fa16 	bl	8010be8 <ucdr_check_buffer_available_for>
 80157bc:	b9e0      	cbnz	r0, 80157f8 <ucdr_serialize_endian_array_char+0x4c>
 80157be:	463e      	mov	r6, r7
 80157c0:	e009      	b.n	80157d6 <ucdr_serialize_endian_array_char+0x2a>
 80157c2:	68a8      	ldr	r0, [r5, #8]
 80157c4:	f002 fe26 	bl	8018414 <memcpy>
 80157c8:	68ab      	ldr	r3, [r5, #8]
 80157ca:	6928      	ldr	r0, [r5, #16]
 80157cc:	4423      	add	r3, r4
 80157ce:	4420      	add	r0, r4
 80157d0:	1b36      	subs	r6, r6, r4
 80157d2:	60ab      	str	r3, [r5, #8]
 80157d4:	6128      	str	r0, [r5, #16]
 80157d6:	4631      	mov	r1, r6
 80157d8:	2201      	movs	r2, #1
 80157da:	4628      	mov	r0, r5
 80157dc:	f7fb fa8c 	bl	8010cf8 <ucdr_check_final_buffer_behavior_array>
 80157e0:	1bb9      	subs	r1, r7, r6
 80157e2:	4441      	add	r1, r8
 80157e4:	4604      	mov	r4, r0
 80157e6:	4602      	mov	r2, r0
 80157e8:	2800      	cmp	r0, #0
 80157ea:	d1ea      	bne.n	80157c2 <ucdr_serialize_endian_array_char+0x16>
 80157ec:	2301      	movs	r3, #1
 80157ee:	7da8      	ldrb	r0, [r5, #22]
 80157f0:	756b      	strb	r3, [r5, #21]
 80157f2:	4058      	eors	r0, r3
 80157f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f8:	463a      	mov	r2, r7
 80157fa:	68a8      	ldr	r0, [r5, #8]
 80157fc:	4641      	mov	r1, r8
 80157fe:	f002 fe09 	bl	8018414 <memcpy>
 8015802:	68aa      	ldr	r2, [r5, #8]
 8015804:	692b      	ldr	r3, [r5, #16]
 8015806:	443a      	add	r2, r7
 8015808:	443b      	add	r3, r7
 801580a:	60aa      	str	r2, [r5, #8]
 801580c:	612b      	str	r3, [r5, #16]
 801580e:	e7ed      	b.n	80157ec <ucdr_serialize_endian_array_char+0x40>

08015810 <ucdr_deserialize_endian_array_char>:
 8015810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015814:	4619      	mov	r1, r3
 8015816:	461f      	mov	r7, r3
 8015818:	4605      	mov	r5, r0
 801581a:	4690      	mov	r8, r2
 801581c:	f7fb f9e4 	bl	8010be8 <ucdr_check_buffer_available_for>
 8015820:	b9e0      	cbnz	r0, 801585c <ucdr_deserialize_endian_array_char+0x4c>
 8015822:	463e      	mov	r6, r7
 8015824:	e009      	b.n	801583a <ucdr_deserialize_endian_array_char+0x2a>
 8015826:	68a9      	ldr	r1, [r5, #8]
 8015828:	f002 fdf4 	bl	8018414 <memcpy>
 801582c:	68ab      	ldr	r3, [r5, #8]
 801582e:	6928      	ldr	r0, [r5, #16]
 8015830:	4423      	add	r3, r4
 8015832:	4420      	add	r0, r4
 8015834:	1b36      	subs	r6, r6, r4
 8015836:	60ab      	str	r3, [r5, #8]
 8015838:	6128      	str	r0, [r5, #16]
 801583a:	2201      	movs	r2, #1
 801583c:	4631      	mov	r1, r6
 801583e:	4628      	mov	r0, r5
 8015840:	f7fb fa5a 	bl	8010cf8 <ucdr_check_final_buffer_behavior_array>
 8015844:	4604      	mov	r4, r0
 8015846:	1bb8      	subs	r0, r7, r6
 8015848:	4440      	add	r0, r8
 801584a:	4622      	mov	r2, r4
 801584c:	2c00      	cmp	r4, #0
 801584e:	d1ea      	bne.n	8015826 <ucdr_deserialize_endian_array_char+0x16>
 8015850:	2301      	movs	r3, #1
 8015852:	7da8      	ldrb	r0, [r5, #22]
 8015854:	756b      	strb	r3, [r5, #21]
 8015856:	4058      	eors	r0, r3
 8015858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801585c:	463a      	mov	r2, r7
 801585e:	68a9      	ldr	r1, [r5, #8]
 8015860:	4640      	mov	r0, r8
 8015862:	f002 fdd7 	bl	8018414 <memcpy>
 8015866:	68aa      	ldr	r2, [r5, #8]
 8015868:	692b      	ldr	r3, [r5, #16]
 801586a:	443a      	add	r2, r7
 801586c:	443b      	add	r3, r7
 801586e:	60aa      	str	r2, [r5, #8]
 8015870:	612b      	str	r3, [r5, #16]
 8015872:	e7ed      	b.n	8015850 <ucdr_deserialize_endian_array_char+0x40>

08015874 <ucdr_serialize_array_uint8_t>:
 8015874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015878:	4688      	mov	r8, r1
 801587a:	4611      	mov	r1, r2
 801587c:	4617      	mov	r7, r2
 801587e:	4605      	mov	r5, r0
 8015880:	f7fb f9b2 	bl	8010be8 <ucdr_check_buffer_available_for>
 8015884:	b9e0      	cbnz	r0, 80158c0 <ucdr_serialize_array_uint8_t+0x4c>
 8015886:	463e      	mov	r6, r7
 8015888:	e009      	b.n	801589e <ucdr_serialize_array_uint8_t+0x2a>
 801588a:	68a8      	ldr	r0, [r5, #8]
 801588c:	f002 fdc2 	bl	8018414 <memcpy>
 8015890:	68aa      	ldr	r2, [r5, #8]
 8015892:	692b      	ldr	r3, [r5, #16]
 8015894:	4422      	add	r2, r4
 8015896:	4423      	add	r3, r4
 8015898:	1b36      	subs	r6, r6, r4
 801589a:	60aa      	str	r2, [r5, #8]
 801589c:	612b      	str	r3, [r5, #16]
 801589e:	4631      	mov	r1, r6
 80158a0:	2201      	movs	r2, #1
 80158a2:	4628      	mov	r0, r5
 80158a4:	f7fb fa28 	bl	8010cf8 <ucdr_check_final_buffer_behavior_array>
 80158a8:	1bb9      	subs	r1, r7, r6
 80158aa:	4441      	add	r1, r8
 80158ac:	4604      	mov	r4, r0
 80158ae:	4602      	mov	r2, r0
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d1ea      	bne.n	801588a <ucdr_serialize_array_uint8_t+0x16>
 80158b4:	2301      	movs	r3, #1
 80158b6:	7da8      	ldrb	r0, [r5, #22]
 80158b8:	756b      	strb	r3, [r5, #21]
 80158ba:	4058      	eors	r0, r3
 80158bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158c0:	463a      	mov	r2, r7
 80158c2:	68a8      	ldr	r0, [r5, #8]
 80158c4:	4641      	mov	r1, r8
 80158c6:	f002 fda5 	bl	8018414 <memcpy>
 80158ca:	68aa      	ldr	r2, [r5, #8]
 80158cc:	692b      	ldr	r3, [r5, #16]
 80158ce:	443a      	add	r2, r7
 80158d0:	443b      	add	r3, r7
 80158d2:	60aa      	str	r2, [r5, #8]
 80158d4:	612b      	str	r3, [r5, #16]
 80158d6:	e7ed      	b.n	80158b4 <ucdr_serialize_array_uint8_t+0x40>

080158d8 <ucdr_serialize_endian_array_uint8_t>:
 80158d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158dc:	4619      	mov	r1, r3
 80158de:	461f      	mov	r7, r3
 80158e0:	4605      	mov	r5, r0
 80158e2:	4690      	mov	r8, r2
 80158e4:	f7fb f980 	bl	8010be8 <ucdr_check_buffer_available_for>
 80158e8:	b9e0      	cbnz	r0, 8015924 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80158ea:	463e      	mov	r6, r7
 80158ec:	e009      	b.n	8015902 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80158ee:	68a8      	ldr	r0, [r5, #8]
 80158f0:	f002 fd90 	bl	8018414 <memcpy>
 80158f4:	68ab      	ldr	r3, [r5, #8]
 80158f6:	6928      	ldr	r0, [r5, #16]
 80158f8:	4423      	add	r3, r4
 80158fa:	4420      	add	r0, r4
 80158fc:	1b36      	subs	r6, r6, r4
 80158fe:	60ab      	str	r3, [r5, #8]
 8015900:	6128      	str	r0, [r5, #16]
 8015902:	4631      	mov	r1, r6
 8015904:	2201      	movs	r2, #1
 8015906:	4628      	mov	r0, r5
 8015908:	f7fb f9f6 	bl	8010cf8 <ucdr_check_final_buffer_behavior_array>
 801590c:	1bb9      	subs	r1, r7, r6
 801590e:	4441      	add	r1, r8
 8015910:	4604      	mov	r4, r0
 8015912:	4602      	mov	r2, r0
 8015914:	2800      	cmp	r0, #0
 8015916:	d1ea      	bne.n	80158ee <ucdr_serialize_endian_array_uint8_t+0x16>
 8015918:	2301      	movs	r3, #1
 801591a:	7da8      	ldrb	r0, [r5, #22]
 801591c:	756b      	strb	r3, [r5, #21]
 801591e:	4058      	eors	r0, r3
 8015920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015924:	463a      	mov	r2, r7
 8015926:	68a8      	ldr	r0, [r5, #8]
 8015928:	4641      	mov	r1, r8
 801592a:	f002 fd73 	bl	8018414 <memcpy>
 801592e:	68aa      	ldr	r2, [r5, #8]
 8015930:	692b      	ldr	r3, [r5, #16]
 8015932:	443a      	add	r2, r7
 8015934:	443b      	add	r3, r7
 8015936:	60aa      	str	r2, [r5, #8]
 8015938:	612b      	str	r3, [r5, #16]
 801593a:	e7ed      	b.n	8015918 <ucdr_serialize_endian_array_uint8_t+0x40>

0801593c <ucdr_deserialize_array_uint8_t>:
 801593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015940:	4688      	mov	r8, r1
 8015942:	4611      	mov	r1, r2
 8015944:	4617      	mov	r7, r2
 8015946:	4605      	mov	r5, r0
 8015948:	f7fb f94e 	bl	8010be8 <ucdr_check_buffer_available_for>
 801594c:	b9e0      	cbnz	r0, 8015988 <ucdr_deserialize_array_uint8_t+0x4c>
 801594e:	463e      	mov	r6, r7
 8015950:	e009      	b.n	8015966 <ucdr_deserialize_array_uint8_t+0x2a>
 8015952:	68a9      	ldr	r1, [r5, #8]
 8015954:	f002 fd5e 	bl	8018414 <memcpy>
 8015958:	68aa      	ldr	r2, [r5, #8]
 801595a:	692b      	ldr	r3, [r5, #16]
 801595c:	4422      	add	r2, r4
 801595e:	4423      	add	r3, r4
 8015960:	1b36      	subs	r6, r6, r4
 8015962:	60aa      	str	r2, [r5, #8]
 8015964:	612b      	str	r3, [r5, #16]
 8015966:	2201      	movs	r2, #1
 8015968:	4631      	mov	r1, r6
 801596a:	4628      	mov	r0, r5
 801596c:	f7fb f9c4 	bl	8010cf8 <ucdr_check_final_buffer_behavior_array>
 8015970:	4604      	mov	r4, r0
 8015972:	1bb8      	subs	r0, r7, r6
 8015974:	4440      	add	r0, r8
 8015976:	4622      	mov	r2, r4
 8015978:	2c00      	cmp	r4, #0
 801597a:	d1ea      	bne.n	8015952 <ucdr_deserialize_array_uint8_t+0x16>
 801597c:	2301      	movs	r3, #1
 801597e:	7da8      	ldrb	r0, [r5, #22]
 8015980:	756b      	strb	r3, [r5, #21]
 8015982:	4058      	eors	r0, r3
 8015984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015988:	463a      	mov	r2, r7
 801598a:	68a9      	ldr	r1, [r5, #8]
 801598c:	4640      	mov	r0, r8
 801598e:	f002 fd41 	bl	8018414 <memcpy>
 8015992:	68aa      	ldr	r2, [r5, #8]
 8015994:	692b      	ldr	r3, [r5, #16]
 8015996:	443a      	add	r2, r7
 8015998:	443b      	add	r3, r7
 801599a:	60aa      	str	r2, [r5, #8]
 801599c:	612b      	str	r3, [r5, #16]
 801599e:	e7ed      	b.n	801597c <ucdr_deserialize_array_uint8_t+0x40>

080159a0 <ucdr_deserialize_endian_array_uint8_t>:
 80159a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a4:	4619      	mov	r1, r3
 80159a6:	461f      	mov	r7, r3
 80159a8:	4605      	mov	r5, r0
 80159aa:	4690      	mov	r8, r2
 80159ac:	f7fb f91c 	bl	8010be8 <ucdr_check_buffer_available_for>
 80159b0:	b9e0      	cbnz	r0, 80159ec <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80159b2:	463e      	mov	r6, r7
 80159b4:	e009      	b.n	80159ca <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80159b6:	68a9      	ldr	r1, [r5, #8]
 80159b8:	f002 fd2c 	bl	8018414 <memcpy>
 80159bc:	68ab      	ldr	r3, [r5, #8]
 80159be:	6928      	ldr	r0, [r5, #16]
 80159c0:	4423      	add	r3, r4
 80159c2:	4420      	add	r0, r4
 80159c4:	1b36      	subs	r6, r6, r4
 80159c6:	60ab      	str	r3, [r5, #8]
 80159c8:	6128      	str	r0, [r5, #16]
 80159ca:	2201      	movs	r2, #1
 80159cc:	4631      	mov	r1, r6
 80159ce:	4628      	mov	r0, r5
 80159d0:	f7fb f992 	bl	8010cf8 <ucdr_check_final_buffer_behavior_array>
 80159d4:	4604      	mov	r4, r0
 80159d6:	1bb8      	subs	r0, r7, r6
 80159d8:	4440      	add	r0, r8
 80159da:	4622      	mov	r2, r4
 80159dc:	2c00      	cmp	r4, #0
 80159de:	d1ea      	bne.n	80159b6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80159e0:	2301      	movs	r3, #1
 80159e2:	7da8      	ldrb	r0, [r5, #22]
 80159e4:	756b      	strb	r3, [r5, #21]
 80159e6:	4058      	eors	r0, r3
 80159e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159ec:	463a      	mov	r2, r7
 80159ee:	68a9      	ldr	r1, [r5, #8]
 80159f0:	4640      	mov	r0, r8
 80159f2:	f002 fd0f 	bl	8018414 <memcpy>
 80159f6:	68aa      	ldr	r2, [r5, #8]
 80159f8:	692b      	ldr	r3, [r5, #16]
 80159fa:	443a      	add	r2, r7
 80159fc:	443b      	add	r3, r7
 80159fe:	60aa      	str	r2, [r5, #8]
 8015a00:	612b      	str	r3, [r5, #16]
 8015a02:	e7ed      	b.n	80159e0 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015a04 <ucdr_serialize_sequence_char>:
 8015a04:	b570      	push	{r4, r5, r6, lr}
 8015a06:	4615      	mov	r5, r2
 8015a08:	460e      	mov	r6, r1
 8015a0a:	7d01      	ldrb	r1, [r0, #20]
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	f7fa fc41 	bl	8010294 <ucdr_serialize_endian_uint32_t>
 8015a12:	b90d      	cbnz	r5, 8015a18 <ucdr_serialize_sequence_char+0x14>
 8015a14:	2001      	movs	r0, #1
 8015a16:	bd70      	pop	{r4, r5, r6, pc}
 8015a18:	7d21      	ldrb	r1, [r4, #20]
 8015a1a:	462b      	mov	r3, r5
 8015a1c:	4632      	mov	r2, r6
 8015a1e:	4620      	mov	r0, r4
 8015a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a24:	f7ff bec2 	b.w	80157ac <ucdr_serialize_endian_array_char>

08015a28 <ucdr_deserialize_sequence_char>:
 8015a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	461d      	mov	r5, r3
 8015a2e:	4616      	mov	r6, r2
 8015a30:	460f      	mov	r7, r1
 8015a32:	461a      	mov	r2, r3
 8015a34:	7d01      	ldrb	r1, [r0, #20]
 8015a36:	4604      	mov	r4, r0
 8015a38:	f7fa fd54 	bl	80104e4 <ucdr_deserialize_endian_uint32_t>
 8015a3c:	682b      	ldr	r3, [r5, #0]
 8015a3e:	429e      	cmp	r6, r3
 8015a40:	bf3c      	itt	cc
 8015a42:	2201      	movcc	r2, #1
 8015a44:	75a2      	strbcc	r2, [r4, #22]
 8015a46:	b913      	cbnz	r3, 8015a4e <ucdr_deserialize_sequence_char+0x26>
 8015a48:	2001      	movs	r0, #1
 8015a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a4e:	7d21      	ldrb	r1, [r4, #20]
 8015a50:	463a      	mov	r2, r7
 8015a52:	4620      	mov	r0, r4
 8015a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a58:	f7ff beda 	b.w	8015810 <ucdr_deserialize_endian_array_char>

08015a5c <ucdr_serialize_sequence_uint8_t>:
 8015a5c:	b570      	push	{r4, r5, r6, lr}
 8015a5e:	4615      	mov	r5, r2
 8015a60:	460e      	mov	r6, r1
 8015a62:	7d01      	ldrb	r1, [r0, #20]
 8015a64:	4604      	mov	r4, r0
 8015a66:	f7fa fc15 	bl	8010294 <ucdr_serialize_endian_uint32_t>
 8015a6a:	b90d      	cbnz	r5, 8015a70 <ucdr_serialize_sequence_uint8_t+0x14>
 8015a6c:	2001      	movs	r0, #1
 8015a6e:	bd70      	pop	{r4, r5, r6, pc}
 8015a70:	7d21      	ldrb	r1, [r4, #20]
 8015a72:	462b      	mov	r3, r5
 8015a74:	4632      	mov	r2, r6
 8015a76:	4620      	mov	r0, r4
 8015a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a7c:	f7ff bf2c 	b.w	80158d8 <ucdr_serialize_endian_array_uint8_t>

08015a80 <ucdr_deserialize_sequence_uint8_t>:
 8015a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a84:	461d      	mov	r5, r3
 8015a86:	4616      	mov	r6, r2
 8015a88:	460f      	mov	r7, r1
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	7d01      	ldrb	r1, [r0, #20]
 8015a8e:	4604      	mov	r4, r0
 8015a90:	f7fa fd28 	bl	80104e4 <ucdr_deserialize_endian_uint32_t>
 8015a94:	682b      	ldr	r3, [r5, #0]
 8015a96:	429e      	cmp	r6, r3
 8015a98:	bf3c      	itt	cc
 8015a9a:	2201      	movcc	r2, #1
 8015a9c:	75a2      	strbcc	r2, [r4, #22]
 8015a9e:	b913      	cbnz	r3, 8015aa6 <ucdr_deserialize_sequence_uint8_t+0x26>
 8015aa0:	2001      	movs	r0, #1
 8015aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa6:	7d21      	ldrb	r1, [r4, #20]
 8015aa8:	463a      	mov	r2, r7
 8015aaa:	4620      	mov	r0, r4
 8015aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab0:	f7ff bf76 	b.w	80159a0 <ucdr_deserialize_endian_array_uint8_t>

08015ab4 <ucdr_serialize_string>:
 8015ab4:	b510      	push	{r4, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	4604      	mov	r4, r0
 8015aba:	4608      	mov	r0, r1
 8015abc:	9101      	str	r1, [sp, #4]
 8015abe:	f7ea fb91 	bl	80001e4 <strlen>
 8015ac2:	9901      	ldr	r1, [sp, #4]
 8015ac4:	1c42      	adds	r2, r0, #1
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	b002      	add	sp, #8
 8015aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ace:	f7ff bf99 	b.w	8015a04 <ucdr_serialize_sequence_char>
 8015ad2:	bf00      	nop

08015ad4 <ucdr_deserialize_string>:
 8015ad4:	b500      	push	{lr}
 8015ad6:	b083      	sub	sp, #12
 8015ad8:	ab01      	add	r3, sp, #4
 8015ada:	f7ff ffa5 	bl	8015a28 <ucdr_deserialize_sequence_char>
 8015ade:	b003      	add	sp, #12
 8015ae0:	f85d fb04 	ldr.w	pc, [sp], #4

08015ae4 <get_custom_error>:
 8015ae4:	4b01      	ldr	r3, [pc, #4]	; (8015aec <get_custom_error+0x8>)
 8015ae6:	7818      	ldrb	r0, [r3, #0]
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop
 8015aec:	2000e360 	.word	0x2000e360

08015af0 <recv_custom_msg>:
 8015af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af4:	4693      	mov	fp, r2
 8015af6:	b089      	sub	sp, #36	; 0x24
 8015af8:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8015afc:	9305      	str	r3, [sp, #20]
 8015afe:	468a      	mov	sl, r1
 8015b00:	2100      	movs	r1, #0
 8015b02:	4604      	mov	r4, r0
 8015b04:	f88d 101e 	strb.w	r1, [sp, #30]
 8015b08:	b322      	cbz	r2, 8015b54 <recv_custom_msg+0x64>
 8015b0a:	f200 2902 	addw	r9, r0, #514	; 0x202
 8015b0e:	f10d 081f 	add.w	r8, sp, #31
 8015b12:	af05      	add	r7, sp, #20
 8015b14:	f10d 061e 	add.w	r6, sp, #30
 8015b18:	f44f 7500 	mov.w	r5, #512	; 0x200
 8015b1c:	e002      	b.n	8015b24 <recv_custom_msg+0x34>
 8015b1e:	9b05      	ldr	r3, [sp, #20]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	dd0f      	ble.n	8015b44 <recv_custom_msg+0x54>
 8015b24:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8015b28:	4623      	mov	r3, r4
 8015b2a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015b2e:	e9cd 5600 	strd	r5, r6, [sp]
 8015b32:	4622      	mov	r2, r4
 8015b34:	4648      	mov	r0, r9
 8015b36:	f001 f8f3 	bl	8016d20 <uxr_read_framed_msg>
 8015b3a:	2800      	cmp	r0, #0
 8015b3c:	d0ef      	beq.n	8015b1e <recv_custom_msg+0x2e>
 8015b3e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015b42:	b1b3      	cbz	r3, 8015b72 <recv_custom_msg+0x82>
 8015b44:	4b0f      	ldr	r3, [pc, #60]	; (8015b84 <recv_custom_msg+0x94>)
 8015b46:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015b4a:	701a      	strb	r2, [r3, #0]
 8015b4c:	2000      	movs	r0, #0
 8015b4e:	b009      	add	sp, #36	; 0x24
 8015b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b54:	f10d 021f 	add.w	r2, sp, #31
 8015b58:	9200      	str	r2, [sp, #0]
 8015b5a:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8015b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b62:	4601      	mov	r1, r0
 8015b64:	47a8      	blx	r5
 8015b66:	2800      	cmp	r0, #0
 8015b68:	d0ec      	beq.n	8015b44 <recv_custom_msg+0x54>
 8015b6a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d1e8      	bne.n	8015b44 <recv_custom_msg+0x54>
 8015b72:	f8cb 0000 	str.w	r0, [fp]
 8015b76:	2001      	movs	r0, #1
 8015b78:	f8ca 4000 	str.w	r4, [sl]
 8015b7c:	b009      	add	sp, #36	; 0x24
 8015b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b82:	bf00      	nop
 8015b84:	2000e360 	.word	0x2000e360

08015b88 <send_custom_msg>:
 8015b88:	b530      	push	{r4, r5, lr}
 8015b8a:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8015b8e:	b087      	sub	sp, #28
 8015b90:	4615      	mov	r5, r2
 8015b92:	b974      	cbnz	r4, 8015bb2 <send_custom_msg+0x2a>
 8015b94:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8015b98:	f10d 0317 	add.w	r3, sp, #23
 8015b9c:	47a0      	blx	r4
 8015b9e:	b108      	cbz	r0, 8015ba4 <send_custom_msg+0x1c>
 8015ba0:	42a8      	cmp	r0, r5
 8015ba2:	d015      	beq.n	8015bd0 <send_custom_msg+0x48>
 8015ba4:	4b0c      	ldr	r3, [pc, #48]	; (8015bd8 <send_custom_msg+0x50>)
 8015ba6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015baa:	701a      	strb	r2, [r3, #0]
 8015bac:	2000      	movs	r0, #0
 8015bae:	b007      	add	sp, #28
 8015bb0:	bd30      	pop	{r4, r5, pc}
 8015bb2:	460b      	mov	r3, r1
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	f10d 0117 	add.w	r1, sp, #23
 8015bba:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015bbe:	4602      	mov	r2, r0
 8015bc0:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8015bc4:	9500      	str	r5, [sp, #0]
 8015bc6:	f200 2002 	addw	r0, r0, #514	; 0x202
 8015bca:	f000 feb1 	bl	8016930 <uxr_write_framed_msg>
 8015bce:	e7e6      	b.n	8015b9e <send_custom_msg+0x16>
 8015bd0:	2001      	movs	r0, #1
 8015bd2:	b007      	add	sp, #28
 8015bd4:	bd30      	pop	{r4, r5, pc}
 8015bd6:	bf00      	nop
 8015bd8:	2000e360 	.word	0x2000e360

08015bdc <uxr_set_custom_transport_callbacks>:
 8015bdc:	b410      	push	{r4}
 8015bde:	9c01      	ldr	r4, [sp, #4]
 8015be0:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8015be4:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8015be8:	9b02      	ldr	r3, [sp, #8]
 8015bea:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8015bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bf2:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8015bf6:	4770      	bx	lr

08015bf8 <uxr_init_custom_transport>:
 8015bf8:	b538      	push	{r3, r4, r5, lr}
 8015bfa:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8015bfe:	b303      	cbz	r3, 8015c42 <uxr_init_custom_transport+0x4a>
 8015c00:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8015c04:	4604      	mov	r4, r0
 8015c06:	b1e2      	cbz	r2, 8015c42 <uxr_init_custom_transport+0x4a>
 8015c08:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8015c0c:	b1ca      	cbz	r2, 8015c42 <uxr_init_custom_transport+0x4a>
 8015c0e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8015c12:	b1b2      	cbz	r2, 8015c42 <uxr_init_custom_transport+0x4a>
 8015c14:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8015c18:	4798      	blx	r3
 8015c1a:	4605      	mov	r5, r0
 8015c1c:	b188      	cbz	r0, 8015c42 <uxr_init_custom_transport+0x4a>
 8015c1e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8015c22:	b98b      	cbnz	r3, 8015c48 <uxr_init_custom_transport+0x50>
 8015c24:	490b      	ldr	r1, [pc, #44]	; (8015c54 <uxr_init_custom_transport+0x5c>)
 8015c26:	4b0c      	ldr	r3, [pc, #48]	; (8015c58 <uxr_init_custom_transport+0x60>)
 8015c28:	4a0c      	ldr	r2, [pc, #48]	; (8015c5c <uxr_init_custom_transport+0x64>)
 8015c2a:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8015c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c32:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8015c36:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8015c3a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8015c3e:	4628      	mov	r0, r5
 8015c40:	bd38      	pop	{r3, r4, r5, pc}
 8015c42:	2500      	movs	r5, #0
 8015c44:	4628      	mov	r0, r5
 8015c46:	bd38      	pop	{r3, r4, r5, pc}
 8015c48:	2100      	movs	r1, #0
 8015c4a:	f204 2002 	addw	r0, r4, #514	; 0x202
 8015c4e:	f000 fe69 	bl	8016924 <uxr_init_framing_io>
 8015c52:	e7e7      	b.n	8015c24 <uxr_init_custom_transport+0x2c>
 8015c54:	08015b89 	.word	0x08015b89
 8015c58:	08015af1 	.word	0x08015af1
 8015c5c:	08015ae5 	.word	0x08015ae5

08015c60 <uxr_close_custom_transport>:
 8015c60:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8015c64:	4718      	bx	r3
 8015c66:	bf00      	nop

08015c68 <uxr_init_input_best_effort_stream>:
 8015c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c6c:	8003      	strh	r3, [r0, #0]
 8015c6e:	4770      	bx	lr

08015c70 <uxr_reset_input_best_effort_stream>:
 8015c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c74:	8003      	strh	r3, [r0, #0]
 8015c76:	4770      	bx	lr

08015c78 <uxr_receive_best_effort_message>:
 8015c78:	b538      	push	{r3, r4, r5, lr}
 8015c7a:	4604      	mov	r4, r0
 8015c7c:	8800      	ldrh	r0, [r0, #0]
 8015c7e:	460d      	mov	r5, r1
 8015c80:	f000 fe38 	bl	80168f4 <uxr_seq_num_cmp>
 8015c84:	4603      	mov	r3, r0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015c8c:	bfb8      	it	lt
 8015c8e:	8025      	strhlt	r5, [r4, #0]
 8015c90:	bd38      	pop	{r3, r4, r5, pc}
 8015c92:	bf00      	nop

08015c94 <on_full_input_buffer>:
 8015c94:	b570      	push	{r4, r5, r6, lr}
 8015c96:	4605      	mov	r5, r0
 8015c98:	460c      	mov	r4, r1
 8015c9a:	682b      	ldr	r3, [r5, #0]
 8015c9c:	6809      	ldr	r1, [r1, #0]
 8015c9e:	8920      	ldrh	r0, [r4, #8]
 8015ca0:	6862      	ldr	r2, [r4, #4]
 8015ca2:	fbb2 f2f0 	udiv	r2, r2, r0
 8015ca6:	eba3 0c01 	sub.w	ip, r3, r1
 8015caa:	fbbc fcf2 	udiv	ip, ip, r2
 8015cae:	f10c 0c01 	add.w	ip, ip, #1
 8015cb2:	fa1f f38c 	uxth.w	r3, ip
 8015cb6:	fbb3 f6f0 	udiv	r6, r3, r0
 8015cba:	fb00 3316 	mls	r3, r0, r6, r3
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	fb02 f303 	mul.w	r3, r2, r3
 8015cc4:	1d18      	adds	r0, r3, #4
 8015cc6:	4408      	add	r0, r1
 8015cc8:	7d26      	ldrb	r6, [r4, #20]
 8015cca:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015cce:	b116      	cbz	r6, 8015cd6 <on_full_input_buffer+0x42>
 8015cd0:	2600      	movs	r6, #0
 8015cd2:	f840 6c04 	str.w	r6, [r0, #-4]
 8015cd6:	2a03      	cmp	r2, #3
 8015cd8:	d801      	bhi.n	8015cde <on_full_input_buffer+0x4a>
 8015cda:	2001      	movs	r0, #1
 8015cdc:	bd70      	pop	{r4, r5, r6, pc}
 8015cde:	3308      	adds	r3, #8
 8015ce0:	4419      	add	r1, r3
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	692b      	ldr	r3, [r5, #16]
 8015ce6:	3a04      	subs	r2, #4
 8015ce8:	f7fa ffca 	bl	8010c80 <ucdr_init_buffer_origin>
 8015cec:	4628      	mov	r0, r5
 8015cee:	4903      	ldr	r1, [pc, #12]	; (8015cfc <on_full_input_buffer+0x68>)
 8015cf0:	4622      	mov	r2, r4
 8015cf2:	f7fa ffa1 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	bd70      	pop	{r4, r5, r6, pc}
 8015cfa:	bf00      	nop
 8015cfc:	08015c95 	.word	0x08015c95

08015d00 <uxr_init_input_reliable_stream>:
 8015d00:	b500      	push	{lr}
 8015d02:	e9c0 1200 	strd	r1, r2, [r0]
 8015d06:	f04f 0e00 	mov.w	lr, #0
 8015d0a:	9a01      	ldr	r2, [sp, #4]
 8015d0c:	8103      	strh	r3, [r0, #8]
 8015d0e:	6102      	str	r2, [r0, #16]
 8015d10:	f880 e014 	strb.w	lr, [r0, #20]
 8015d14:	b1d3      	cbz	r3, 8015d4c <uxr_init_input_reliable_stream+0x4c>
 8015d16:	f8c1 e000 	str.w	lr, [r1]
 8015d1a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015d1e:	f1bc 0f01 	cmp.w	ip, #1
 8015d22:	d913      	bls.n	8015d4c <uxr_init_input_reliable_stream+0x4c>
 8015d24:	2301      	movs	r3, #1
 8015d26:	fbb3 f1fc 	udiv	r1, r3, ip
 8015d2a:	fb0c 3111 	mls	r1, ip, r1, r3
 8015d2e:	b289      	uxth	r1, r1
 8015d30:	6842      	ldr	r2, [r0, #4]
 8015d32:	fbb2 f2fc 	udiv	r2, r2, ip
 8015d36:	fb01 f202 	mul.w	r2, r1, r2
 8015d3a:	6801      	ldr	r1, [r0, #0]
 8015d3c:	f841 e002 	str.w	lr, [r1, r2]
 8015d40:	3301      	adds	r3, #1
 8015d42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	459c      	cmp	ip, r3
 8015d4a:	d8ec      	bhi.n	8015d26 <uxr_init_input_reliable_stream+0x26>
 8015d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d50:	60c3      	str	r3, [r0, #12]
 8015d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d56:	bf00      	nop

08015d58 <uxr_reset_input_reliable_stream>:
 8015d58:	8901      	ldrh	r1, [r0, #8]
 8015d5a:	b1e9      	cbz	r1, 8015d98 <uxr_reset_input_reliable_stream+0x40>
 8015d5c:	f04f 0c00 	mov.w	ip, #0
 8015d60:	b500      	push	{lr}
 8015d62:	4663      	mov	r3, ip
 8015d64:	46e6      	mov	lr, ip
 8015d66:	fbb3 f2f1 	udiv	r2, r3, r1
 8015d6a:	fb01 3312 	mls	r3, r1, r2, r3
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	6842      	ldr	r2, [r0, #4]
 8015d72:	fbb2 f2f1 	udiv	r2, r2, r1
 8015d76:	fb02 f303 	mul.w	r3, r2, r3
 8015d7a:	6802      	ldr	r2, [r0, #0]
 8015d7c:	f842 e003 	str.w	lr, [r2, r3]
 8015d80:	f10c 0c01 	add.w	ip, ip, #1
 8015d84:	8901      	ldrh	r1, [r0, #8]
 8015d86:	fa1f f38c 	uxth.w	r3, ip
 8015d8a:	4299      	cmp	r1, r3
 8015d8c:	d8eb      	bhi.n	8015d66 <uxr_reset_input_reliable_stream+0xe>
 8015d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d92:	60c3      	str	r3, [r0, #12]
 8015d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d9c:	60c3      	str	r3, [r0, #12]
 8015d9e:	4770      	bx	lr

08015da0 <uxr_receive_reliable_message>:
 8015da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015da4:	4604      	mov	r4, r0
 8015da6:	460d      	mov	r5, r1
 8015da8:	8901      	ldrh	r1, [r0, #8]
 8015daa:	8980      	ldrh	r0, [r0, #12]
 8015dac:	4690      	mov	r8, r2
 8015dae:	461f      	mov	r7, r3
 8015db0:	f000 fd98 	bl	80168e4 <uxr_seq_num_add>
 8015db4:	4629      	mov	r1, r5
 8015db6:	4606      	mov	r6, r0
 8015db8:	89a0      	ldrh	r0, [r4, #12]
 8015dba:	f000 fd9b 	bl	80168f4 <uxr_seq_num_cmp>
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	db0a      	blt.n	8015dd8 <uxr_receive_reliable_message+0x38>
 8015dc2:	2600      	movs	r6, #0
 8015dc4:	89e0      	ldrh	r0, [r4, #14]
 8015dc6:	4629      	mov	r1, r5
 8015dc8:	f000 fd94 	bl	80168f4 <uxr_seq_num_cmp>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	da00      	bge.n	8015dd2 <uxr_receive_reliable_message+0x32>
 8015dd0:	81e5      	strh	r5, [r4, #14]
 8015dd2:	4630      	mov	r0, r6
 8015dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dd8:	4630      	mov	r0, r6
 8015dda:	4629      	mov	r1, r5
 8015ddc:	f000 fd8a 	bl	80168f4 <uxr_seq_num_cmp>
 8015de0:	2800      	cmp	r0, #0
 8015de2:	dbee      	blt.n	8015dc2 <uxr_receive_reliable_message+0x22>
 8015de4:	6923      	ldr	r3, [r4, #16]
 8015de6:	4640      	mov	r0, r8
 8015de8:	4798      	blx	r3
 8015dea:	2101      	movs	r1, #1
 8015dec:	4681      	mov	r9, r0
 8015dee:	89a0      	ldrh	r0, [r4, #12]
 8015df0:	f000 fd78 	bl	80168e4 <uxr_seq_num_add>
 8015df4:	f1b9 0f00 	cmp.w	r9, #0
 8015df8:	d101      	bne.n	8015dfe <uxr_receive_reliable_message+0x5e>
 8015dfa:	4285      	cmp	r5, r0
 8015dfc:	d047      	beq.n	8015e8e <uxr_receive_reliable_message+0xee>
 8015dfe:	8922      	ldrh	r2, [r4, #8]
 8015e00:	fbb5 f0f2 	udiv	r0, r5, r2
 8015e04:	fb02 5010 	mls	r0, r2, r0, r5
 8015e08:	b280      	uxth	r0, r0
 8015e0a:	6863      	ldr	r3, [r4, #4]
 8015e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e10:	fb00 f303 	mul.w	r3, r0, r3
 8015e14:	6820      	ldr	r0, [r4, #0]
 8015e16:	3304      	adds	r3, #4
 8015e18:	4418      	add	r0, r3
 8015e1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d1cf      	bne.n	8015dc2 <uxr_receive_reliable_message+0x22>
 8015e22:	4641      	mov	r1, r8
 8015e24:	463a      	mov	r2, r7
 8015e26:	f002 faf5 	bl	8018414 <memcpy>
 8015e2a:	8921      	ldrh	r1, [r4, #8]
 8015e2c:	fbb5 f2f1 	udiv	r2, r5, r1
 8015e30:	fb01 5212 	mls	r2, r1, r2, r5
 8015e34:	b292      	uxth	r2, r2
 8015e36:	6863      	ldr	r3, [r4, #4]
 8015e38:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e3c:	fb02 f303 	mul.w	r3, r2, r3
 8015e40:	6822      	ldr	r2, [r4, #0]
 8015e42:	50d7      	str	r7, [r2, r3]
 8015e44:	9a08      	ldr	r2, [sp, #32]
 8015e46:	2301      	movs	r3, #1
 8015e48:	7013      	strb	r3, [r2, #0]
 8015e4a:	f1b9 0f00 	cmp.w	r9, #0
 8015e4e:	d0b8      	beq.n	8015dc2 <uxr_receive_reliable_message+0x22>
 8015e50:	89a6      	ldrh	r6, [r4, #12]
 8015e52:	4630      	mov	r0, r6
 8015e54:	2101      	movs	r1, #1
 8015e56:	f000 fd45 	bl	80168e4 <uxr_seq_num_add>
 8015e5a:	8922      	ldrh	r2, [r4, #8]
 8015e5c:	6863      	ldr	r3, [r4, #4]
 8015e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e62:	4606      	mov	r6, r0
 8015e64:	fbb0 f0f2 	udiv	r0, r0, r2
 8015e68:	fb02 6010 	mls	r0, r2, r0, r6
 8015e6c:	b280      	uxth	r0, r0
 8015e6e:	fb00 f303 	mul.w	r3, r0, r3
 8015e72:	6820      	ldr	r0, [r4, #0]
 8015e74:	3304      	adds	r3, #4
 8015e76:	4418      	add	r0, r3
 8015e78:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d0a0      	beq.n	8015dc2 <uxr_receive_reliable_message+0x22>
 8015e80:	6923      	ldr	r3, [r4, #16]
 8015e82:	4798      	blx	r3
 8015e84:	2802      	cmp	r0, #2
 8015e86:	d008      	beq.n	8015e9a <uxr_receive_reliable_message+0xfa>
 8015e88:	2801      	cmp	r0, #1
 8015e8a:	d0e2      	beq.n	8015e52 <uxr_receive_reliable_message+0xb2>
 8015e8c:	e799      	b.n	8015dc2 <uxr_receive_reliable_message+0x22>
 8015e8e:	9b08      	ldr	r3, [sp, #32]
 8015e90:	81a5      	strh	r5, [r4, #12]
 8015e92:	2601      	movs	r6, #1
 8015e94:	f883 9000 	strb.w	r9, [r3]
 8015e98:	e794      	b.n	8015dc4 <uxr_receive_reliable_message+0x24>
 8015e9a:	2601      	movs	r6, #1
 8015e9c:	e792      	b.n	8015dc4 <uxr_receive_reliable_message+0x24>
 8015e9e:	bf00      	nop

08015ea0 <uxr_next_input_reliable_buffer_available>:
 8015ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ea4:	4604      	mov	r4, r0
 8015ea6:	460f      	mov	r7, r1
 8015ea8:	8980      	ldrh	r0, [r0, #12]
 8015eaa:	2101      	movs	r1, #1
 8015eac:	4690      	mov	r8, r2
 8015eae:	f000 fd19 	bl	80168e4 <uxr_seq_num_add>
 8015eb2:	8922      	ldrh	r2, [r4, #8]
 8015eb4:	fbb0 f6f2 	udiv	r6, r0, r2
 8015eb8:	fb02 0616 	mls	r6, r2, r6, r0
 8015ebc:	b2b6      	uxth	r6, r6
 8015ebe:	6863      	ldr	r3, [r4, #4]
 8015ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ec4:	fb06 f303 	mul.w	r3, r6, r3
 8015ec8:	6826      	ldr	r6, [r4, #0]
 8015eca:	3304      	adds	r3, #4
 8015ecc:	441e      	add	r6, r3
 8015ece:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015ed2:	f1b9 0f00 	cmp.w	r9, #0
 8015ed6:	d023      	beq.n	8015f20 <uxr_next_input_reliable_buffer_available+0x80>
 8015ed8:	6923      	ldr	r3, [r4, #16]
 8015eda:	4605      	mov	r5, r0
 8015edc:	4630      	mov	r0, r6
 8015ede:	4798      	blx	r3
 8015ee0:	4682      	mov	sl, r0
 8015ee2:	b300      	cbz	r0, 8015f26 <uxr_next_input_reliable_buffer_available+0x86>
 8015ee4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015ee8:	2101      	movs	r1, #1
 8015eea:	4650      	mov	r0, sl
 8015eec:	f000 fcfa 	bl	80168e4 <uxr_seq_num_add>
 8015ef0:	8921      	ldrh	r1, [r4, #8]
 8015ef2:	fbb0 f2f1 	udiv	r2, r0, r1
 8015ef6:	4682      	mov	sl, r0
 8015ef8:	fb01 0212 	mls	r2, r1, r2, r0
 8015efc:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015f00:	b292      	uxth	r2, r2
 8015f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f06:	fb02 f303 	mul.w	r3, r2, r3
 8015f0a:	3304      	adds	r3, #4
 8015f0c:	4418      	add	r0, r3
 8015f0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015f12:	b12b      	cbz	r3, 8015f20 <uxr_next_input_reliable_buffer_available+0x80>
 8015f14:	6923      	ldr	r3, [r4, #16]
 8015f16:	4798      	blx	r3
 8015f18:	2802      	cmp	r0, #2
 8015f1a:	d01b      	beq.n	8015f54 <uxr_next_input_reliable_buffer_available+0xb4>
 8015f1c:	2801      	cmp	r0, #1
 8015f1e:	d0e3      	beq.n	8015ee8 <uxr_next_input_reliable_buffer_available+0x48>
 8015f20:	2000      	movs	r0, #0
 8015f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f26:	464a      	mov	r2, r9
 8015f28:	4631      	mov	r1, r6
 8015f2a:	4638      	mov	r0, r7
 8015f2c:	f7fa feb0 	bl	8010c90 <ucdr_init_buffer>
 8015f30:	8921      	ldrh	r1, [r4, #8]
 8015f32:	fbb5 f2f1 	udiv	r2, r5, r1
 8015f36:	fb01 5212 	mls	r2, r1, r2, r5
 8015f3a:	b292      	uxth	r2, r2
 8015f3c:	6863      	ldr	r3, [r4, #4]
 8015f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f42:	fb02 f303 	mul.w	r3, r2, r3
 8015f46:	6822      	ldr	r2, [r4, #0]
 8015f48:	f842 a003 	str.w	sl, [r2, r3]
 8015f4c:	2001      	movs	r0, #1
 8015f4e:	81a5      	strh	r5, [r4, #12]
 8015f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f54:	8920      	ldrh	r0, [r4, #8]
 8015f56:	fbb5 f3f0 	udiv	r3, r5, r0
 8015f5a:	fb00 5513 	mls	r5, r0, r3, r5
 8015f5e:	b2ad      	uxth	r5, r5
 8015f60:	6863      	ldr	r3, [r4, #4]
 8015f62:	fbb3 f3f0 	udiv	r3, r3, r0
 8015f66:	fb03 f505 	mul.w	r5, r3, r5
 8015f6a:	6823      	ldr	r3, [r4, #0]
 8015f6c:	2000      	movs	r0, #0
 8015f6e:	5158      	str	r0, [r3, r5]
 8015f70:	eb06 0108 	add.w	r1, r6, r8
 8015f74:	eba9 0208 	sub.w	r2, r9, r8
 8015f78:	4638      	mov	r0, r7
 8015f7a:	f7fa fe89 	bl	8010c90 <ucdr_init_buffer>
 8015f7e:	4638      	mov	r0, r7
 8015f80:	4903      	ldr	r1, [pc, #12]	; (8015f90 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015f82:	4622      	mov	r2, r4
 8015f84:	f7fa fe58 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 8015f88:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015f8c:	2001      	movs	r0, #1
 8015f8e:	e7c8      	b.n	8015f22 <uxr_next_input_reliable_buffer_available+0x82>
 8015f90:	08015c95 	.word	0x08015c95

08015f94 <uxr_process_heartbeat>:
 8015f94:	b538      	push	{r3, r4, r5, lr}
 8015f96:	4611      	mov	r1, r2
 8015f98:	4604      	mov	r4, r0
 8015f9a:	89c0      	ldrh	r0, [r0, #14]
 8015f9c:	4615      	mov	r5, r2
 8015f9e:	f000 fca9 	bl	80168f4 <uxr_seq_num_cmp>
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	bfb8      	it	lt
 8015fa6:	81e5      	strhlt	r5, [r4, #14]
 8015fa8:	bd38      	pop	{r3, r4, r5, pc}
 8015faa:	bf00      	nop

08015fac <uxr_compute_acknack>:
 8015fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fb0:	8903      	ldrh	r3, [r0, #8]
 8015fb2:	8985      	ldrh	r5, [r0, #12]
 8015fb4:	4604      	mov	r4, r0
 8015fb6:	460e      	mov	r6, r1
 8015fb8:	b1d3      	cbz	r3, 8015ff0 <uxr_compute_acknack+0x44>
 8015fba:	4628      	mov	r0, r5
 8015fbc:	2701      	movs	r7, #1
 8015fbe:	e003      	b.n	8015fc8 <uxr_compute_acknack+0x1c>
 8015fc0:	4567      	cmp	r7, ip
 8015fc2:	d215      	bcs.n	8015ff0 <uxr_compute_acknack+0x44>
 8015fc4:	89a0      	ldrh	r0, [r4, #12]
 8015fc6:	3701      	adds	r7, #1
 8015fc8:	b2b9      	uxth	r1, r7
 8015fca:	f000 fc8b 	bl	80168e4 <uxr_seq_num_add>
 8015fce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015fd2:	fbb0 f3fc 	udiv	r3, r0, ip
 8015fd6:	fb0c 0313 	mls	r3, ip, r3, r0
 8015fda:	b29a      	uxth	r2, r3
 8015fdc:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015fe0:	fbb3 f3fc 	udiv	r3, r3, ip
 8015fe4:	fb02 f303 	mul.w	r3, r2, r3
 8015fe8:	58cb      	ldr	r3, [r1, r3]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d1e8      	bne.n	8015fc0 <uxr_compute_acknack+0x14>
 8015fee:	4605      	mov	r5, r0
 8015ff0:	8035      	strh	r5, [r6, #0]
 8015ff2:	2101      	movs	r1, #1
 8015ff4:	4628      	mov	r0, r5
 8015ff6:	89e7      	ldrh	r7, [r4, #14]
 8015ff8:	f000 fc78 	bl	80168ec <uxr_seq_num_sub>
 8015ffc:	4601      	mov	r1, r0
 8015ffe:	4638      	mov	r0, r7
 8016000:	f000 fc74 	bl	80168ec <uxr_seq_num_sub>
 8016004:	4605      	mov	r5, r0
 8016006:	b318      	cbz	r0, 8016050 <uxr_compute_acknack+0xa4>
 8016008:	f04f 0900 	mov.w	r9, #0
 801600c:	464f      	mov	r7, r9
 801600e:	f04f 0801 	mov.w	r8, #1
 8016012:	fa1f f189 	uxth.w	r1, r9
 8016016:	8830      	ldrh	r0, [r6, #0]
 8016018:	f000 fc64 	bl	80168e4 <uxr_seq_num_add>
 801601c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016020:	fbb0 f3fc 	udiv	r3, r0, ip
 8016024:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016028:	fb03 001c 	mls	r0, r3, ip, r0
 801602c:	b283      	uxth	r3, r0
 801602e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016032:	fb02 f303 	mul.w	r3, r2, r3
 8016036:	fa08 f209 	lsl.w	r2, r8, r9
 801603a:	58cb      	ldr	r3, [r1, r3]
 801603c:	f109 0901 	add.w	r9, r9, #1
 8016040:	b90b      	cbnz	r3, 8016046 <uxr_compute_acknack+0x9a>
 8016042:	4317      	orrs	r7, r2
 8016044:	b2bf      	uxth	r7, r7
 8016046:	454d      	cmp	r5, r9
 8016048:	d1e3      	bne.n	8016012 <uxr_compute_acknack+0x66>
 801604a:	4638      	mov	r0, r7
 801604c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016050:	4607      	mov	r7, r0
 8016052:	4638      	mov	r0, r7
 8016054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016058 <uxr_init_output_best_effort_stream>:
 8016058:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801605c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016060:	6001      	str	r1, [r0, #0]
 8016062:	7303      	strb	r3, [r0, #12]
 8016064:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016068:	4770      	bx	lr
 801606a:	bf00      	nop

0801606c <uxr_reset_output_best_effort_stream>:
 801606c:	7b02      	ldrb	r2, [r0, #12]
 801606e:	6042      	str	r2, [r0, #4]
 8016070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016074:	81c3      	strh	r3, [r0, #14]
 8016076:	4770      	bx	lr

08016078 <uxr_prepare_best_effort_buffer_to_write>:
 8016078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801607a:	4604      	mov	r4, r0
 801607c:	b083      	sub	sp, #12
 801607e:	6840      	ldr	r0, [r0, #4]
 8016080:	460d      	mov	r5, r1
 8016082:	4616      	mov	r6, r2
 8016084:	f7fc f9ce 	bl	8012424 <uxr_submessage_padding>
 8016088:	6863      	ldr	r3, [r4, #4]
 801608a:	4418      	add	r0, r3
 801608c:	68a3      	ldr	r3, [r4, #8]
 801608e:	1942      	adds	r2, r0, r5
 8016090:	4293      	cmp	r3, r2
 8016092:	bf2c      	ite	cs
 8016094:	2701      	movcs	r7, #1
 8016096:	2700      	movcc	r7, #0
 8016098:	d202      	bcs.n	80160a0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801609a:	4638      	mov	r0, r7
 801609c:	b003      	add	sp, #12
 801609e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160a0:	9000      	str	r0, [sp, #0]
 80160a2:	6821      	ldr	r1, [r4, #0]
 80160a4:	4630      	mov	r0, r6
 80160a6:	2300      	movs	r3, #0
 80160a8:	f7fa fde0 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 80160ac:	6861      	ldr	r1, [r4, #4]
 80160ae:	4638      	mov	r0, r7
 80160b0:	4429      	add	r1, r5
 80160b2:	6061      	str	r1, [r4, #4]
 80160b4:	b003      	add	sp, #12
 80160b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080160b8 <uxr_prepare_best_effort_buffer_to_send>:
 80160b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160bc:	4604      	mov	r4, r0
 80160be:	461d      	mov	r5, r3
 80160c0:	6840      	ldr	r0, [r0, #4]
 80160c2:	7b23      	ldrb	r3, [r4, #12]
 80160c4:	4298      	cmp	r0, r3
 80160c6:	bf8c      	ite	hi
 80160c8:	2601      	movhi	r6, #1
 80160ca:	2600      	movls	r6, #0
 80160cc:	d802      	bhi.n	80160d4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80160ce:	4630      	mov	r0, r6
 80160d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160d4:	4688      	mov	r8, r1
 80160d6:	89e0      	ldrh	r0, [r4, #14]
 80160d8:	2101      	movs	r1, #1
 80160da:	4617      	mov	r7, r2
 80160dc:	f000 fc02 	bl	80168e4 <uxr_seq_num_add>
 80160e0:	6823      	ldr	r3, [r4, #0]
 80160e2:	81e0      	strh	r0, [r4, #14]
 80160e4:	8028      	strh	r0, [r5, #0]
 80160e6:	f8c8 3000 	str.w	r3, [r8]
 80160ea:	6863      	ldr	r3, [r4, #4]
 80160ec:	603b      	str	r3, [r7, #0]
 80160ee:	7b23      	ldrb	r3, [r4, #12]
 80160f0:	6063      	str	r3, [r4, #4]
 80160f2:	4630      	mov	r0, r6
 80160f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080160f8 <on_full_output_buffer>:
 80160f8:	b538      	push	{r3, r4, r5, lr}
 80160fa:	6802      	ldr	r2, [r0, #0]
 80160fc:	460c      	mov	r4, r1
 80160fe:	6809      	ldr	r1, [r1, #0]
 8016100:	8923      	ldrh	r3, [r4, #8]
 8016102:	eba2 0c01 	sub.w	ip, r2, r1
 8016106:	6862      	ldr	r2, [r4, #4]
 8016108:	fbb2 f2f3 	udiv	r2, r2, r3
 801610c:	fbbc fcf2 	udiv	ip, ip, r2
 8016110:	f10c 0c01 	add.w	ip, ip, #1
 8016114:	fa1f fc8c 	uxth.w	ip, ip
 8016118:	fbbc fef3 	udiv	lr, ip, r3
 801611c:	fb03 c31e 	mls	r3, r3, lr, ip
 8016120:	b29b      	uxth	r3, r3
 8016122:	fb02 f303 	mul.w	r3, r2, r3
 8016126:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801612a:	58ca      	ldr	r2, [r1, r3]
 801612c:	4463      	add	r3, ip
 801612e:	eba2 020c 	sub.w	r2, r2, ip
 8016132:	3308      	adds	r3, #8
 8016134:	4605      	mov	r5, r0
 8016136:	4419      	add	r1, r3
 8016138:	3a04      	subs	r2, #4
 801613a:	6903      	ldr	r3, [r0, #16]
 801613c:	f7fa fda0 	bl	8010c80 <ucdr_init_buffer_origin>
 8016140:	4628      	mov	r0, r5
 8016142:	4903      	ldr	r1, [pc, #12]	; (8016150 <on_full_output_buffer+0x58>)
 8016144:	4622      	mov	r2, r4
 8016146:	f7fa fd77 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 801614a:	2000      	movs	r0, #0
 801614c:	bd38      	pop	{r3, r4, r5, pc}
 801614e:	bf00      	nop
 8016150:	080160f9 	.word	0x080160f9

08016154 <uxr_init_output_reliable_stream>:
 8016154:	b410      	push	{r4}
 8016156:	f89d c004 	ldrb.w	ip, [sp, #4]
 801615a:	8103      	strh	r3, [r0, #8]
 801615c:	e9c0 1200 	strd	r1, r2, [r0]
 8016160:	f880 c00c 	strb.w	ip, [r0, #12]
 8016164:	b1d3      	cbz	r3, 801619c <uxr_init_output_reliable_stream+0x48>
 8016166:	f8c1 c000 	str.w	ip, [r1]
 801616a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801616e:	f1bc 0f01 	cmp.w	ip, #1
 8016172:	d913      	bls.n	801619c <uxr_init_output_reliable_stream+0x48>
 8016174:	2301      	movs	r3, #1
 8016176:	fbb3 f1fc 	udiv	r1, r3, ip
 801617a:	fb0c 3111 	mls	r1, ip, r1, r3
 801617e:	b289      	uxth	r1, r1
 8016180:	6842      	ldr	r2, [r0, #4]
 8016182:	6804      	ldr	r4, [r0, #0]
 8016184:	fbb2 f2fc 	udiv	r2, r2, ip
 8016188:	fb01 f202 	mul.w	r2, r1, r2
 801618c:	7b01      	ldrb	r1, [r0, #12]
 801618e:	50a1      	str	r1, [r4, r2]
 8016190:	3301      	adds	r3, #1
 8016192:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016196:	b29b      	uxth	r3, r3
 8016198:	459c      	cmp	ip, r3
 801619a:	d8ec      	bhi.n	8016176 <uxr_init_output_reliable_stream+0x22>
 801619c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80161a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80161a4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80161a8:	4905      	ldr	r1, [pc, #20]	; (80161c0 <uxr_init_output_reliable_stream+0x6c>)
 80161aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161ae:	f8c0 100e 	str.w	r1, [r0, #14]
 80161b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161b6:	2300      	movs	r3, #0
 80161b8:	8242      	strh	r2, [r0, #18]
 80161ba:	8403      	strh	r3, [r0, #32]
 80161bc:	4770      	bx	lr
 80161be:	bf00      	nop
 80161c0:	ffff0000 	.word	0xffff0000

080161c4 <uxr_reset_output_reliable_stream>:
 80161c4:	8901      	ldrh	r1, [r0, #8]
 80161c6:	b1b1      	cbz	r1, 80161f6 <uxr_reset_output_reliable_stream+0x32>
 80161c8:	f04f 0c00 	mov.w	ip, #0
 80161cc:	4663      	mov	r3, ip
 80161ce:	fbb3 f2f1 	udiv	r2, r3, r1
 80161d2:	fb01 3312 	mls	r3, r1, r2, r3
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	6842      	ldr	r2, [r0, #4]
 80161da:	fbb2 f2f1 	udiv	r2, r2, r1
 80161de:	6801      	ldr	r1, [r0, #0]
 80161e0:	fb02 f303 	mul.w	r3, r2, r3
 80161e4:	7b02      	ldrb	r2, [r0, #12]
 80161e6:	50ca      	str	r2, [r1, r3]
 80161e8:	f10c 0c01 	add.w	ip, ip, #1
 80161ec:	8901      	ldrh	r1, [r0, #8]
 80161ee:	fa1f f38c 	uxth.w	r3, ip
 80161f2:	4299      	cmp	r1, r3
 80161f4:	d8eb      	bhi.n	80161ce <uxr_reset_output_reliable_stream+0xa>
 80161f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80161fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80161fe:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016202:	4904      	ldr	r1, [pc, #16]	; (8016214 <uxr_reset_output_reliable_stream+0x50>)
 8016204:	f8c0 100e 	str.w	r1, [r0, #14]
 8016208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801620c:	2300      	movs	r3, #0
 801620e:	8242      	strh	r2, [r0, #18]
 8016210:	8403      	strh	r3, [r0, #32]
 8016212:	4770      	bx	lr
 8016214:	ffff0000 	.word	0xffff0000

08016218 <uxr_prepare_reliable_buffer_to_write>:
 8016218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801621c:	4604      	mov	r4, r0
 801621e:	b091      	sub	sp, #68	; 0x44
 8016220:	8900      	ldrh	r0, [r0, #8]
 8016222:	89e6      	ldrh	r6, [r4, #14]
 8016224:	6823      	ldr	r3, [r4, #0]
 8016226:	9204      	str	r2, [sp, #16]
 8016228:	fbb6 f2f0 	udiv	r2, r6, r0
 801622c:	fb00 6212 	mls	r2, r0, r2, r6
 8016230:	b292      	uxth	r2, r2
 8016232:	6865      	ldr	r5, [r4, #4]
 8016234:	fbb5 f5f0 	udiv	r5, r5, r0
 8016238:	fb05 3202 	mla	r2, r5, r2, r3
 801623c:	3204      	adds	r2, #4
 801623e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8016242:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016246:	9203      	str	r2, [sp, #12]
 8016248:	468b      	mov	fp, r1
 801624a:	1f2f      	subs	r7, r5, #4
 801624c:	2800      	cmp	r0, #0
 801624e:	f000 814c 	beq.w	80164ea <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8016252:	f04f 0c00 	mov.w	ip, #0
 8016256:	46e2      	mov	sl, ip
 8016258:	4661      	mov	r1, ip
 801625a:	fbb1 f2f0 	udiv	r2, r1, r0
 801625e:	fb00 1212 	mls	r2, r0, r2, r1
 8016262:	b292      	uxth	r2, r2
 8016264:	fb05 f202 	mul.w	r2, r5, r2
 8016268:	f10c 0c01 	add.w	ip, ip, #1
 801626c:	589a      	ldr	r2, [r3, r2]
 801626e:	454a      	cmp	r2, r9
 8016270:	bf08      	it	eq
 8016272:	f10a 0a01 	addeq.w	sl, sl, #1
 8016276:	fa1f f18c 	uxth.w	r1, ip
 801627a:	bf08      	it	eq
 801627c:	fa1f fa8a 	uxtheq.w	sl, sl
 8016280:	4281      	cmp	r1, r0
 8016282:	d3ea      	bcc.n	801625a <uxr_prepare_reliable_buffer_to_write+0x42>
 8016284:	4640      	mov	r0, r8
 8016286:	2104      	movs	r1, #4
 8016288:	f8cd a014 	str.w	sl, [sp, #20]
 801628c:	f7fa fd04 	bl	8010c98 <ucdr_alignment>
 8016290:	4480      	add	r8, r0
 8016292:	eb08 020b 	add.w	r2, r8, fp
 8016296:	42ba      	cmp	r2, r7
 8016298:	f240 80cd 	bls.w	8016436 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801629c:	7b22      	ldrb	r2, [r4, #12]
 801629e:	445a      	add	r2, fp
 80162a0:	42ba      	cmp	r2, r7
 80162a2:	f240 80b5 	bls.w	8016410 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80162a6:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 80162aa:	33fc      	adds	r3, #252	; 0xfc
 80162ac:	b2ba      	uxth	r2, r7
 80162ae:	4413      	add	r3, r2
 80162b0:	b29b      	uxth	r3, r3
 80162b2:	fb0a f903 	mul.w	r9, sl, r3
 80162b6:	45d9      	cmp	r9, fp
 80162b8:	9305      	str	r3, [sp, #20]
 80162ba:	9306      	str	r3, [sp, #24]
 80162bc:	f0c0 80b7 	bcc.w	801642e <uxr_prepare_reliable_buffer_to_write+0x216>
 80162c0:	f108 0304 	add.w	r3, r8, #4
 80162c4:	42bb      	cmp	r3, r7
 80162c6:	f080 80db 	bcs.w	8016480 <uxr_prepare_reliable_buffer_to_write+0x268>
 80162ca:	f1a2 0904 	sub.w	r9, r2, #4
 80162ce:	eba9 0908 	sub.w	r9, r9, r8
 80162d2:	9b05      	ldr	r3, [sp, #20]
 80162d4:	fa1f f989 	uxth.w	r9, r9
 80162d8:	ebab 0b09 	sub.w	fp, fp, r9
 80162dc:	fbbb f2f3 	udiv	r2, fp, r3
 80162e0:	fb03 b312 	mls	r3, r3, r2, fp
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	f000 80c8 	beq.w	801647a <uxr_prepare_reliable_buffer_to_write+0x262>
 80162ea:	3201      	adds	r2, #1
 80162ec:	b292      	uxth	r2, r2
 80162ee:	9306      	str	r3, [sp, #24]
 80162f0:	4552      	cmp	r2, sl
 80162f2:	f200 809c 	bhi.w	801642e <uxr_prepare_reliable_buffer_to_write+0x216>
 80162f6:	f10d 0b20 	add.w	fp, sp, #32
 80162fa:	2a00      	cmp	r2, #0
 80162fc:	d042      	beq.n	8016384 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80162fe:	f8cd 801c 	str.w	r8, [sp, #28]
 8016302:	f04f 0a00 	mov.w	sl, #0
 8016306:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801630a:	9505      	str	r5, [sp, #20]
 801630c:	f10d 0b20 	add.w	fp, sp, #32
 8016310:	4615      	mov	r5, r2
 8016312:	e000      	b.n	8016316 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016314:	46c1      	mov	r9, r8
 8016316:	8920      	ldrh	r0, [r4, #8]
 8016318:	fbb6 f2f0 	udiv	r2, r6, r0
 801631c:	fb00 6112 	mls	r1, r0, r2, r6
 8016320:	b28a      	uxth	r2, r1
 8016322:	6863      	ldr	r3, [r4, #4]
 8016324:	fbb3 f1f0 	udiv	r1, r3, r0
 8016328:	6823      	ldr	r3, [r4, #0]
 801632a:	fb02 f101 	mul.w	r1, r2, r1
 801632e:	3104      	adds	r1, #4
 8016330:	4419      	add	r1, r3
 8016332:	4658      	mov	r0, fp
 8016334:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016338:	9200      	str	r2, [sp, #0]
 801633a:	2300      	movs	r3, #0
 801633c:	463a      	mov	r2, r7
 801633e:	f7fa fc95 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8016342:	464a      	mov	r2, r9
 8016344:	2300      	movs	r3, #0
 8016346:	210d      	movs	r1, #13
 8016348:	4658      	mov	r0, fp
 801634a:	f7fc f82b 	bl	80123a4 <uxr_buffer_submessage_header>
 801634e:	8921      	ldrh	r1, [r4, #8]
 8016350:	fbb6 f2f1 	udiv	r2, r6, r1
 8016354:	fb01 6212 	mls	r2, r1, r2, r6
 8016358:	b292      	uxth	r2, r2
 801635a:	6863      	ldr	r3, [r4, #4]
 801635c:	fbb3 f3f1 	udiv	r3, r3, r1
 8016360:	fb02 f303 	mul.w	r3, r2, r3
 8016364:	6822      	ldr	r2, [r4, #0]
 8016366:	4630      	mov	r0, r6
 8016368:	50d7      	str	r7, [r2, r3]
 801636a:	2101      	movs	r1, #1
 801636c:	f000 faba 	bl	80168e4 <uxr_seq_num_add>
 8016370:	f10a 0a01 	add.w	sl, sl, #1
 8016374:	fa1f f38a 	uxth.w	r3, sl
 8016378:	429d      	cmp	r5, r3
 801637a:	4606      	mov	r6, r0
 801637c:	d8ca      	bhi.n	8016314 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801637e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016382:	9d05      	ldr	r5, [sp, #20]
 8016384:	8920      	ldrh	r0, [r4, #8]
 8016386:	fbb6 f3f0 	udiv	r3, r6, r0
 801638a:	fb00 6313 	mls	r3, r0, r3, r6
 801638e:	b299      	uxth	r1, r3
 8016390:	6863      	ldr	r3, [r4, #4]
 8016392:	fbb3 f3f0 	udiv	r3, r3, r0
 8016396:	fb01 f303 	mul.w	r3, r1, r3
 801639a:	6821      	ldr	r1, [r4, #0]
 801639c:	3304      	adds	r3, #4
 801639e:	4419      	add	r1, r3
 80163a0:	463a      	mov	r2, r7
 80163a2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80163a6:	9000      	str	r0, [sp, #0]
 80163a8:	2300      	movs	r3, #0
 80163aa:	4658      	mov	r0, fp
 80163ac:	f7fa fc5e 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 80163b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80163b4:	4658      	mov	r0, fp
 80163b6:	fa1f f289 	uxth.w	r2, r9
 80163ba:	2302      	movs	r3, #2
 80163bc:	210d      	movs	r1, #13
 80163be:	f7fb fff1 	bl	80123a4 <uxr_buffer_submessage_header>
 80163c2:	9b03      	ldr	r3, [sp, #12]
 80163c4:	8927      	ldrh	r7, [r4, #8]
 80163c6:	7b20      	ldrb	r0, [r4, #12]
 80163c8:	f108 0104 	add.w	r1, r8, #4
 80163cc:	440b      	add	r3, r1
 80163ce:	4619      	mov	r1, r3
 80163d0:	fbb6 f3f7 	udiv	r3, r6, r7
 80163d4:	fb07 6313 	mls	r3, r7, r3, r6
 80163d8:	f1a5 0208 	sub.w	r2, r5, #8
 80163dc:	b29d      	uxth	r5, r3
 80163de:	3004      	adds	r0, #4
 80163e0:	6863      	ldr	r3, [r4, #4]
 80163e2:	fbb3 f3f7 	udiv	r3, r3, r7
 80163e6:	fb05 f303 	mul.w	r3, r5, r3
 80163ea:	6825      	ldr	r5, [r4, #0]
 80163ec:	4448      	add	r0, r9
 80163ee:	50e8      	str	r0, [r5, r3]
 80163f0:	9d04      	ldr	r5, [sp, #16]
 80163f2:	eba2 0208 	sub.w	r2, r2, r8
 80163f6:	4628      	mov	r0, r5
 80163f8:	f7fa fc4a 	bl	8010c90 <ucdr_init_buffer>
 80163fc:	4628      	mov	r0, r5
 80163fe:	493c      	ldr	r1, [pc, #240]	; (80164f0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016400:	4622      	mov	r2, r4
 8016402:	f7fa fc19 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 8016406:	2001      	movs	r0, #1
 8016408:	81e6      	strh	r6, [r4, #14]
 801640a:	b011      	add	sp, #68	; 0x44
 801640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016410:	2101      	movs	r1, #1
 8016412:	89e0      	ldrh	r0, [r4, #14]
 8016414:	f000 fa66 	bl	80168e4 <uxr_seq_num_add>
 8016418:	8921      	ldrh	r1, [r4, #8]
 801641a:	4605      	mov	r5, r0
 801641c:	8a60      	ldrh	r0, [r4, #18]
 801641e:	f000 fa61 	bl	80168e4 <uxr_seq_num_add>
 8016422:	4601      	mov	r1, r0
 8016424:	4628      	mov	r0, r5
 8016426:	f000 fa65 	bl	80168f4 <uxr_seq_num_cmp>
 801642a:	2800      	cmp	r0, #0
 801642c:	dd42      	ble.n	80164b4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801642e:	2000      	movs	r0, #0
 8016430:	b011      	add	sp, #68	; 0x44
 8016432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016436:	8921      	ldrh	r1, [r4, #8]
 8016438:	8a60      	ldrh	r0, [r4, #18]
 801643a:	9205      	str	r2, [sp, #20]
 801643c:	f000 fa52 	bl	80168e4 <uxr_seq_num_add>
 8016440:	4601      	mov	r1, r0
 8016442:	4630      	mov	r0, r6
 8016444:	f000 fa56 	bl	80168f4 <uxr_seq_num_cmp>
 8016448:	2800      	cmp	r0, #0
 801644a:	9a05      	ldr	r2, [sp, #20]
 801644c:	dcef      	bgt.n	801642e <uxr_prepare_reliable_buffer_to_write+0x216>
 801644e:	8927      	ldrh	r7, [r4, #8]
 8016450:	fbb6 f3f7 	udiv	r3, r6, r7
 8016454:	fb07 6313 	mls	r3, r7, r3, r6
 8016458:	b29d      	uxth	r5, r3
 801645a:	6863      	ldr	r3, [r4, #4]
 801645c:	6824      	ldr	r4, [r4, #0]
 801645e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016462:	fb05 f303 	mul.w	r3, r5, r3
 8016466:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801646a:	50e2      	str	r2, [r4, r3]
 801646c:	2300      	movs	r3, #0
 801646e:	f8cd 8000 	str.w	r8, [sp]
 8016472:	f7fa fbfb 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 8016476:	2001      	movs	r0, #1
 8016478:	e7da      	b.n	8016430 <uxr_prepare_reliable_buffer_to_write+0x218>
 801647a:	b293      	uxth	r3, r2
 801647c:	461a      	mov	r2, r3
 801647e:	e737      	b.n	80162f0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016480:	4630      	mov	r0, r6
 8016482:	2101      	movs	r1, #1
 8016484:	9207      	str	r2, [sp, #28]
 8016486:	f000 fa2d 	bl	80168e4 <uxr_seq_num_add>
 801648a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801648e:	fbb0 f1fc 	udiv	r1, r0, ip
 8016492:	fb0c 0111 	mls	r1, ip, r1, r0
 8016496:	4606      	mov	r6, r0
 8016498:	b288      	uxth	r0, r1
 801649a:	6863      	ldr	r3, [r4, #4]
 801649c:	fbb3 f1fc 	udiv	r1, r3, ip
 80164a0:	6823      	ldr	r3, [r4, #0]
 80164a2:	9a07      	ldr	r2, [sp, #28]
 80164a4:	fb00 f101 	mul.w	r1, r0, r1
 80164a8:	3104      	adds	r1, #4
 80164aa:	440b      	add	r3, r1
 80164ac:	9303      	str	r3, [sp, #12]
 80164ae:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80164b2:	e70a      	b.n	80162ca <uxr_prepare_reliable_buffer_to_write+0xb2>
 80164b4:	8921      	ldrh	r1, [r4, #8]
 80164b6:	fbb5 f3f1 	udiv	r3, r5, r1
 80164ba:	fb01 5313 	mls	r3, r1, r3, r5
 80164be:	b29a      	uxth	r2, r3
 80164c0:	6863      	ldr	r3, [r4, #4]
 80164c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80164c6:	6821      	ldr	r1, [r4, #0]
 80164c8:	9804      	ldr	r0, [sp, #16]
 80164ca:	fb02 f303 	mul.w	r3, r2, r3
 80164ce:	3304      	adds	r3, #4
 80164d0:	7b22      	ldrb	r2, [r4, #12]
 80164d2:	4419      	add	r1, r3
 80164d4:	445a      	add	r2, fp
 80164d6:	f841 2c04 	str.w	r2, [r1, #-4]
 80164da:	7b23      	ldrb	r3, [r4, #12]
 80164dc:	9300      	str	r3, [sp, #0]
 80164de:	2300      	movs	r3, #0
 80164e0:	f7fa fbc4 	bl	8010c6c <ucdr_init_buffer_origin_offset>
 80164e4:	81e5      	strh	r5, [r4, #14]
 80164e6:	2001      	movs	r0, #1
 80164e8:	e7a2      	b.n	8016430 <uxr_prepare_reliable_buffer_to_write+0x218>
 80164ea:	4682      	mov	sl, r0
 80164ec:	e6ca      	b.n	8016284 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80164ee:	bf00      	nop
 80164f0:	080160f9 	.word	0x080160f9

080164f4 <uxr_prepare_next_reliable_buffer_to_send>:
 80164f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f6:	4604      	mov	r4, r0
 80164f8:	460f      	mov	r7, r1
 80164fa:	8a00      	ldrh	r0, [r0, #16]
 80164fc:	2101      	movs	r1, #1
 80164fe:	4616      	mov	r6, r2
 8016500:	461d      	mov	r5, r3
 8016502:	f000 f9ef 	bl	80168e4 <uxr_seq_num_add>
 8016506:	8028      	strh	r0, [r5, #0]
 8016508:	8922      	ldrh	r2, [r4, #8]
 801650a:	fbb0 f3f2 	udiv	r3, r0, r2
 801650e:	fb02 0c13 	mls	ip, r2, r3, r0
 8016512:	fa1f fc8c 	uxth.w	ip, ip
 8016516:	6863      	ldr	r3, [r4, #4]
 8016518:	fbb3 f3f2 	udiv	r3, r3, r2
 801651c:	fb0c fc03 	mul.w	ip, ip, r3
 8016520:	6823      	ldr	r3, [r4, #0]
 8016522:	89e1      	ldrh	r1, [r4, #14]
 8016524:	f10c 0c04 	add.w	ip, ip, #4
 8016528:	4463      	add	r3, ip
 801652a:	603b      	str	r3, [r7, #0]
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	449c      	add	ip, r3
 8016530:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016534:	6033      	str	r3, [r6, #0]
 8016536:	f000 f9dd 	bl	80168f4 <uxr_seq_num_cmp>
 801653a:	2800      	cmp	r0, #0
 801653c:	dd01      	ble.n	8016542 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801653e:	2000      	movs	r0, #0
 8016540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016542:	7b23      	ldrb	r3, [r4, #12]
 8016544:	6832      	ldr	r2, [r6, #0]
 8016546:	429a      	cmp	r2, r3
 8016548:	d9f9      	bls.n	801653e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801654a:	8a61      	ldrh	r1, [r4, #18]
 801654c:	8a20      	ldrh	r0, [r4, #16]
 801654e:	f000 f9cd 	bl	80168ec <uxr_seq_num_sub>
 8016552:	8923      	ldrh	r3, [r4, #8]
 8016554:	4283      	cmp	r3, r0
 8016556:	d0f2      	beq.n	801653e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016558:	8828      	ldrh	r0, [r5, #0]
 801655a:	89e3      	ldrh	r3, [r4, #14]
 801655c:	8220      	strh	r0, [r4, #16]
 801655e:	4298      	cmp	r0, r3
 8016560:	d001      	beq.n	8016566 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016562:	2001      	movs	r0, #1
 8016564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016566:	2101      	movs	r1, #1
 8016568:	f000 f9bc 	bl	80168e4 <uxr_seq_num_add>
 801656c:	81e0      	strh	r0, [r4, #14]
 801656e:	2001      	movs	r0, #1
 8016570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016572:	bf00      	nop

08016574 <uxr_update_output_stream_heartbeat_timestamp>:
 8016574:	b570      	push	{r4, r5, r6, lr}
 8016576:	8a01      	ldrh	r1, [r0, #16]
 8016578:	4604      	mov	r4, r0
 801657a:	8a40      	ldrh	r0, [r0, #18]
 801657c:	4615      	mov	r5, r2
 801657e:	461e      	mov	r6, r3
 8016580:	f000 f9b8 	bl	80168f4 <uxr_seq_num_cmp>
 8016584:	2800      	cmp	r0, #0
 8016586:	db07      	blt.n	8016598 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801658c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016590:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016594:	2000      	movs	r0, #0
 8016596:	bd70      	pop	{r4, r5, r6, pc}
 8016598:	f894 0020 	ldrb.w	r0, [r4, #32]
 801659c:	b940      	cbnz	r0, 80165b0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801659e:	2301      	movs	r3, #1
 80165a0:	f884 3020 	strb.w	r3, [r4, #32]
 80165a4:	3564      	adds	r5, #100	; 0x64
 80165a6:	f146 0600 	adc.w	r6, r6, #0
 80165aa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80165ae:	bd70      	pop	{r4, r5, r6, pc}
 80165b0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80165b4:	4295      	cmp	r5, r2
 80165b6:	eb76 0303 	sbcs.w	r3, r6, r3
 80165ba:	bfa5      	ittet	ge
 80165bc:	3001      	addge	r0, #1
 80165be:	f884 0020 	strbge.w	r0, [r4, #32]
 80165c2:	2000      	movlt	r0, #0
 80165c4:	2001      	movge	r0, #1
 80165c6:	e7ed      	b.n	80165a4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080165c8 <uxr_begin_output_nack_buffer_it>:
 80165c8:	8a40      	ldrh	r0, [r0, #18]
 80165ca:	4770      	bx	lr

080165cc <uxr_next_reliable_nack_buffer_to_send>:
 80165cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d0:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 80165d4:	b082      	sub	sp, #8
 80165d6:	f1b8 0f00 	cmp.w	r8, #0
 80165da:	d011      	beq.n	8016600 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80165dc:	4604      	mov	r4, r0
 80165de:	8818      	ldrh	r0, [r3, #0]
 80165e0:	460e      	mov	r6, r1
 80165e2:	4617      	mov	r7, r2
 80165e4:	461d      	mov	r5, r3
 80165e6:	2101      	movs	r1, #1
 80165e8:	f000 f97c 	bl	80168e4 <uxr_seq_num_add>
 80165ec:	8028      	strh	r0, [r5, #0]
 80165ee:	8a21      	ldrh	r1, [r4, #16]
 80165f0:	f000 f980 	bl	80168f4 <uxr_seq_num_cmp>
 80165f4:	2800      	cmp	r0, #0
 80165f6:	dd07      	ble.n	8016608 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80165f8:	f04f 0800 	mov.w	r8, #0
 80165fc:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8016600:	4640      	mov	r0, r8
 8016602:	b002      	add	sp, #8
 8016604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016608:	8921      	ldrh	r1, [r4, #8]
 801660a:	8828      	ldrh	r0, [r5, #0]
 801660c:	6823      	ldr	r3, [r4, #0]
 801660e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016612:	fb01 0c12 	mls	ip, r1, r2, r0
 8016616:	fa1f f28c 	uxth.w	r2, ip
 801661a:	9301      	str	r3, [sp, #4]
 801661c:	6863      	ldr	r3, [r4, #4]
 801661e:	fbb3 fcf1 	udiv	ip, r3, r1
 8016622:	9b01      	ldr	r3, [sp, #4]
 8016624:	fb02 fc0c 	mul.w	ip, r2, ip
 8016628:	f10c 0c04 	add.w	ip, ip, #4
 801662c:	4463      	add	r3, ip
 801662e:	6033      	str	r3, [r6, #0]
 8016630:	6823      	ldr	r3, [r4, #0]
 8016632:	4463      	add	r3, ip
 8016634:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016638:	603b      	str	r3, [r7, #0]
 801663a:	7b22      	ldrb	r2, [r4, #12]
 801663c:	429a      	cmp	r2, r3
 801663e:	d0d2      	beq.n	80165e6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016640:	4640      	mov	r0, r8
 8016642:	b002      	add	sp, #8
 8016644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016648 <uxr_process_acknack>:
 8016648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801664a:	4604      	mov	r4, r0
 801664c:	460e      	mov	r6, r1
 801664e:	4610      	mov	r0, r2
 8016650:	2101      	movs	r1, #1
 8016652:	f000 f94b 	bl	80168ec <uxr_seq_num_sub>
 8016656:	8a61      	ldrh	r1, [r4, #18]
 8016658:	f000 f948 	bl	80168ec <uxr_seq_num_sub>
 801665c:	b1c0      	cbz	r0, 8016690 <uxr_process_acknack+0x48>
 801665e:	4605      	mov	r5, r0
 8016660:	2700      	movs	r7, #0
 8016662:	2101      	movs	r1, #1
 8016664:	8a60      	ldrh	r0, [r4, #18]
 8016666:	f000 f93d 	bl	80168e4 <uxr_seq_num_add>
 801666a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801666e:	fbb0 f1fc 	udiv	r1, r0, ip
 8016672:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016676:	fb0c 0111 	mls	r1, ip, r1, r0
 801667a:	b289      	uxth	r1, r1
 801667c:	3701      	adds	r7, #1
 801667e:	fbb3 f3fc 	udiv	r3, r3, ip
 8016682:	fb01 f303 	mul.w	r3, r1, r3
 8016686:	42bd      	cmp	r5, r7
 8016688:	7b21      	ldrb	r1, [r4, #12]
 801668a:	8260      	strh	r0, [r4, #18]
 801668c:	50d1      	str	r1, [r2, r3]
 801668e:	d1e8      	bne.n	8016662 <uxr_process_acknack+0x1a>
 8016690:	3e00      	subs	r6, #0
 8016692:	f04f 0300 	mov.w	r3, #0
 8016696:	bf18      	it	ne
 8016698:	2601      	movne	r6, #1
 801669a:	f884 3020 	strb.w	r3, [r4, #32]
 801669e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80166a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080166a4 <uxr_is_output_up_to_date>:
 80166a4:	8a01      	ldrh	r1, [r0, #16]
 80166a6:	8a40      	ldrh	r0, [r0, #18]
 80166a8:	b508      	push	{r3, lr}
 80166aa:	f000 f923 	bl	80168f4 <uxr_seq_num_cmp>
 80166ae:	fab0 f080 	clz	r0, r0
 80166b2:	0940      	lsrs	r0, r0, #5
 80166b4:	bd08      	pop	{r3, pc}
 80166b6:	bf00      	nop

080166b8 <get_available_free_slots>:
 80166b8:	8902      	ldrh	r2, [r0, #8]
 80166ba:	b1da      	cbz	r2, 80166f4 <get_available_free_slots+0x3c>
 80166bc:	b530      	push	{r4, r5, lr}
 80166be:	2100      	movs	r1, #0
 80166c0:	6843      	ldr	r3, [r0, #4]
 80166c2:	6805      	ldr	r5, [r0, #0]
 80166c4:	7b04      	ldrb	r4, [r0, #12]
 80166c6:	fbb3 fef2 	udiv	lr, r3, r2
 80166ca:	4608      	mov	r0, r1
 80166cc:	460b      	mov	r3, r1
 80166ce:	fbb3 fcf2 	udiv	ip, r3, r2
 80166d2:	fb02 331c 	mls	r3, r2, ip, r3
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	fb0e f303 	mul.w	r3, lr, r3
 80166dc:	3101      	adds	r1, #1
 80166de:	f855 c003 	ldr.w	ip, [r5, r3]
 80166e2:	4564      	cmp	r4, ip
 80166e4:	bf08      	it	eq
 80166e6:	3001      	addeq	r0, #1
 80166e8:	b28b      	uxth	r3, r1
 80166ea:	bf08      	it	eq
 80166ec:	b280      	uxtheq	r0, r0
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d3ed      	bcc.n	80166ce <get_available_free_slots+0x16>
 80166f2:	bd30      	pop	{r4, r5, pc}
 80166f4:	4610      	mov	r0, r2
 80166f6:	4770      	bx	lr

080166f8 <uxr_buffer_cancel_data>:
 80166f8:	b510      	push	{r4, lr}
 80166fa:	b094      	sub	sp, #80	; 0x50
 80166fc:	2300      	movs	r3, #0
 80166fe:	9202      	str	r2, [sp, #8]
 8016700:	9205      	str	r2, [sp, #20]
 8016702:	9301      	str	r3, [sp, #4]
 8016704:	2201      	movs	r2, #1
 8016706:	f8ad 301c 	strh.w	r3, [sp, #28]
 801670a:	f88d 301e 	strb.w	r3, [sp, #30]
 801670e:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8016712:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016716:	2308      	movs	r3, #8
 8016718:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	2210      	movs	r2, #16
 8016720:	ab0c      	add	r3, sp, #48	; 0x30
 8016722:	4604      	mov	r4, r0
 8016724:	9103      	str	r1, [sp, #12]
 8016726:	f7fb fb9f 	bl	8011e68 <uxr_prepare_stream_to_write_submessage>
 801672a:	b918      	cbnz	r0, 8016734 <uxr_buffer_cancel_data+0x3c>
 801672c:	4604      	mov	r4, r0
 801672e:	4620      	mov	r0, r4
 8016730:	b014      	add	sp, #80	; 0x50
 8016732:	bd10      	pop	{r4, pc}
 8016734:	9905      	ldr	r1, [sp, #20]
 8016736:	aa06      	add	r2, sp, #24
 8016738:	4620      	mov	r0, r4
 801673a:	f7fb fccb 	bl	80120d4 <uxr_init_base_object_request>
 801673e:	a906      	add	r1, sp, #24
 8016740:	4604      	mov	r4, r0
 8016742:	a80c      	add	r0, sp, #48	; 0x30
 8016744:	f7fc feda 	bl	80134fc <uxr_serialize_READ_DATA_Payload>
 8016748:	4620      	mov	r0, r4
 801674a:	b014      	add	sp, #80	; 0x50
 801674c:	bd10      	pop	{r4, pc}
 801674e:	bf00      	nop

08016750 <read_submessage_format>:
 8016750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016754:	b095      	sub	sp, #84	; 0x54
 8016756:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 801675a:	b113      	cbz	r3, 8016762 <read_submessage_format+0x12>
 801675c:	b015      	add	sp, #84	; 0x54
 801675e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016762:	460c      	mov	r4, r1
 8016764:	4615      	mov	r5, r2
 8016766:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801676a:	4607      	mov	r7, r0
 801676c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801676e:	9004      	str	r0, [sp, #16]
 8016770:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016772:	9005      	str	r0, [sp, #20]
 8016774:	1a52      	subs	r2, r2, r1
 8016776:	a80c      	add	r0, sp, #48	; 0x30
 8016778:	4699      	mov	r9, r3
 801677a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801677e:	f7fa fa87 	bl	8010c90 <ucdr_init_buffer>
 8016782:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016786:	a80c      	add	r0, sp, #48	; 0x30
 8016788:	f7fa fa56 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 801678c:	69e2      	ldr	r2, [r4, #28]
 801678e:	b19a      	cbz	r2, 80167b8 <read_submessage_format+0x68>
 8016790:	f1b8 0f07 	cmp.w	r8, #7
 8016794:	f882 9014 	strb.w	r9, [r2, #20]
 8016798:	d040      	beq.n	801681c <read_submessage_format+0xcc>
 801679a:	f1b8 0f08 	cmp.w	r8, #8
 801679e:	d02e      	beq.n	80167fe <read_submessage_format+0xae>
 80167a0:	f1b8 0f06 	cmp.w	r8, #6
 80167a4:	d011      	beq.n	80167ca <read_submessage_format+0x7a>
 80167a6:	2301      	movs	r3, #1
 80167a8:	7513      	strb	r3, [r2, #20]
 80167aa:	4629      	mov	r1, r5
 80167ac:	4620      	mov	r0, r4
 80167ae:	f7fa fabf 	bl	8010d30 <ucdr_advance_buffer>
 80167b2:	b015      	add	sp, #84	; 0x54
 80167b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167b8:	f1b8 0f07 	cmp.w	r8, #7
 80167bc:	d02e      	beq.n	801681c <read_submessage_format+0xcc>
 80167be:	f1b8 0f08 	cmp.w	r8, #8
 80167c2:	d01c      	beq.n	80167fe <read_submessage_format+0xae>
 80167c4:	f1b8 0f06 	cmp.w	r8, #6
 80167c8:	d1ef      	bne.n	80167aa <read_submessage_format+0x5a>
 80167ca:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 80167ce:	f1b8 0f00 	cmp.w	r8, #0
 80167d2:	d011      	beq.n	80167f8 <read_submessage_format+0xa8>
 80167d4:	ab0c      	add	r3, sp, #48	; 0x30
 80167d6:	e9cd 3500 	strd	r3, r5, [sp]
 80167da:	2306      	movs	r3, #6
 80167dc:	f88d 3016 	strb.w	r3, [sp, #22]
 80167e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80167e4:	9302      	str	r3, [sp, #8]
 80167e6:	4632      	mov	r2, r6
 80167e8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80167ec:	4638      	mov	r0, r7
 80167ee:	47c0      	blx	r8
 80167f0:	2301      	movs	r3, #1
 80167f2:	69e2      	ldr	r2, [r4, #28]
 80167f4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80167f8:	2a00      	cmp	r2, #0
 80167fa:	d1d4      	bne.n	80167a6 <read_submessage_format+0x56>
 80167fc:	e7d5      	b.n	80167aa <read_submessage_format+0x5a>
 80167fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016802:	2b00      	cmp	r3, #0
 8016804:	d0f8      	beq.n	80167f8 <read_submessage_format+0xa8>
 8016806:	a906      	add	r1, sp, #24
 8016808:	a80c      	add	r0, sp, #48	; 0x30
 801680a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801680e:	f7fc ff15 	bl	801363c <uxr_deserialize_SampleIdentity>
 8016812:	b9a0      	cbnz	r0, 801683e <read_submessage_format+0xee>
 8016814:	69e2      	ldr	r2, [r4, #28]
 8016816:	2a00      	cmp	r2, #0
 8016818:	d1c5      	bne.n	80167a6 <read_submessage_format+0x56>
 801681a:	e7c6      	b.n	80167aa <read_submessage_format+0x5a>
 801681c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016820:	b13b      	cbz	r3, 8016832 <read_submessage_format+0xe2>
 8016822:	a906      	add	r1, sp, #24
 8016824:	a80c      	add	r0, sp, #48	; 0x30
 8016826:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801682a:	f7fc fc01 	bl	8013030 <uxr_deserialize_BaseObjectRequest>
 801682e:	bb60      	cbnz	r0, 801688a <read_submessage_format+0x13a>
 8016830:	69e2      	ldr	r2, [r4, #28]
 8016832:	68a3      	ldr	r3, [r4, #8]
 8016834:	442b      	add	r3, r5
 8016836:	60a3      	str	r3, [r4, #8]
 8016838:	2a00      	cmp	r2, #0
 801683a:	d1b4      	bne.n	80167a6 <read_submessage_format+0x56>
 801683c:	e7b5      	b.n	80167aa <read_submessage_format+0x5a>
 801683e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8016842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016844:	1a52      	subs	r2, r2, r1
 8016846:	eba8 0803 	sub.w	r8, r8, r3
 801684a:	a80c      	add	r0, sp, #48	; 0x30
 801684c:	f7fa fa20 	bl	8010c90 <ucdr_init_buffer>
 8016850:	44a8      	add	r8, r5
 8016852:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016856:	a80c      	add	r0, sp, #48	; 0x30
 8016858:	f7fa f9ee 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 801685c:	fa1f f888 	uxth.w	r8, r8
 8016860:	ab0c      	add	r3, sp, #48	; 0x30
 8016862:	9300      	str	r3, [sp, #0]
 8016864:	f8cd 8004 	str.w	r8, [sp, #4]
 8016868:	2108      	movs	r1, #8
 801686a:	f88d 1016 	strb.w	r1, [sp, #22]
 801686e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016872:	9102      	str	r1, [sp, #8]
 8016874:	ab06      	add	r3, sp, #24
 8016876:	4632      	mov	r2, r6
 8016878:	9905      	ldr	r1, [sp, #20]
 801687a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 801687e:	4638      	mov	r0, r7
 8016880:	47b0      	blx	r6
 8016882:	2301      	movs	r3, #1
 8016884:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8016888:	e7c4      	b.n	8016814 <read_submessage_format+0xc4>
 801688a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801688e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016890:	1a52      	subs	r2, r2, r1
 8016892:	a80c      	add	r0, sp, #48	; 0x30
 8016894:	eba8 0803 	sub.w	r8, r8, r3
 8016898:	f7fa f9fa 	bl	8010c90 <ucdr_init_buffer>
 801689c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80168a0:	a80c      	add	r0, sp, #48	; 0x30
 80168a2:	f7fa f9c9 	bl	8010c38 <ucdr_set_on_full_buffer_callback>
 80168a6:	ab0c      	add	r3, sp, #48	; 0x30
 80168a8:	9300      	str	r3, [sp, #0]
 80168aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80168ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80168b2:	44a8      	add	r8, r5
 80168b4:	fa1f f888 	uxth.w	r8, r8
 80168b8:	f8cd 8004 	str.w	r8, [sp, #4]
 80168bc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80168c0:	2107      	movs	r1, #7
 80168c2:	f88d 1016 	strb.w	r1, [sp, #22]
 80168c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80168ca:	9102      	str	r1, [sp, #8]
 80168cc:	4632      	mov	r2, r6
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80168d4:	9905      	ldr	r1, [sp, #20]
 80168d6:	4638      	mov	r0, r7
 80168d8:	47b0      	blx	r6
 80168da:	2301      	movs	r3, #1
 80168dc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80168e0:	e7a6      	b.n	8016830 <read_submessage_format+0xe0>
 80168e2:	bf00      	nop

080168e4 <uxr_seq_num_add>:
 80168e4:	4408      	add	r0, r1
 80168e6:	b280      	uxth	r0, r0
 80168e8:	4770      	bx	lr
 80168ea:	bf00      	nop

080168ec <uxr_seq_num_sub>:
 80168ec:	1a40      	subs	r0, r0, r1
 80168ee:	b280      	uxth	r0, r0
 80168f0:	4770      	bx	lr
 80168f2:	bf00      	nop

080168f4 <uxr_seq_num_cmp>:
 80168f4:	4288      	cmp	r0, r1
 80168f6:	d011      	beq.n	801691c <uxr_seq_num_cmp+0x28>
 80168f8:	d309      	bcc.n	801690e <uxr_seq_num_cmp+0x1a>
 80168fa:	4288      	cmp	r0, r1
 80168fc:	d910      	bls.n	8016920 <uxr_seq_num_cmp+0x2c>
 80168fe:	1a40      	subs	r0, r0, r1
 8016900:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016904:	bfd4      	ite	le
 8016906:	2001      	movle	r0, #1
 8016908:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801690c:	4770      	bx	lr
 801690e:	1a0b      	subs	r3, r1, r0
 8016910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016914:	daf1      	bge.n	80168fa <uxr_seq_num_cmp+0x6>
 8016916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801691a:	4770      	bx	lr
 801691c:	2000      	movs	r0, #0
 801691e:	4770      	bx	lr
 8016920:	2001      	movs	r0, #1
 8016922:	4770      	bx	lr

08016924 <uxr_init_framing_io>:
 8016924:	2300      	movs	r3, #0
 8016926:	7041      	strb	r1, [r0, #1]
 8016928:	7003      	strb	r3, [r0, #0]
 801692a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801692c:	4770      	bx	lr
 801692e:	bf00      	nop

08016930 <uxr_write_framed_msg>:
 8016930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016934:	4617      	mov	r7, r2
 8016936:	7842      	ldrb	r2, [r0, #1]
 8016938:	b083      	sub	sp, #12
 801693a:	460e      	mov	r6, r1
 801693c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8016940:	469a      	mov	sl, r3
 8016942:	2901      	cmp	r1, #1
 8016944:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8016948:	4604      	mov	r4, r0
 801694a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801694e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8016952:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8016956:	f240 8137 	bls.w	8016bc8 <uxr_write_framed_msg+0x298>
 801695a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801695e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8016962:	2901      	cmp	r1, #1
 8016964:	f04f 0202 	mov.w	r2, #2
 8016968:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801696c:	f240 808f 	bls.w	8016a8e <uxr_write_framed_msg+0x15e>
 8016970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016972:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8016976:	b2dd      	uxtb	r5, r3
 8016978:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801697c:	2203      	movs	r2, #3
 801697e:	2901      	cmp	r1, #1
 8016980:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016984:	f240 809a 	bls.w	8016abc <uxr_write_framed_msg+0x18c>
 8016988:	18a1      	adds	r1, r4, r2
 801698a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801698c:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8016990:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016994:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8016998:	3201      	adds	r2, #1
 801699a:	2801      	cmp	r0, #1
 801699c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80169a0:	f240 80a0 	bls.w	8016ae4 <uxr_write_framed_msg+0x1b4>
 80169a4:	18a0      	adds	r0, r4, r2
 80169a6:	3201      	adds	r2, #1
 80169a8:	b2d2      	uxtb	r2, r2
 80169aa:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80169ae:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f000 80a9 	beq.w	8016b0a <uxr_write_framed_msg+0x1da>
 80169b8:	f04f 0900 	mov.w	r9, #0
 80169bc:	46c8      	mov	r8, r9
 80169be:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80169c2:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80169c6:	2901      	cmp	r1, #1
 80169c8:	f240 80c3 	bls.w	8016b52 <uxr_write_framed_msg+0x222>
 80169cc:	2a29      	cmp	r2, #41	; 0x29
 80169ce:	f200 809f 	bhi.w	8016b10 <uxr_write_framed_msg+0x1e0>
 80169d2:	18a1      	adds	r1, r4, r2
 80169d4:	3201      	adds	r2, #1
 80169d6:	b2d2      	uxtb	r2, r2
 80169d8:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80169dc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80169e0:	ea89 0303 	eor.w	r3, r9, r3
 80169e4:	498c      	ldr	r1, [pc, #560]	; (8016c18 <uxr_write_framed_msg+0x2e8>)
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	f108 0801 	add.w	r8, r8, #1
 80169ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80169f0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80169f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169f6:	4543      	cmp	r3, r8
 80169f8:	d8e1      	bhi.n	80169be <uxr_write_framed_msg+0x8e>
 80169fa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80169fe:	fa5f f889 	uxtb.w	r8, r9
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	f04f 0900 	mov.w	r9, #0
 8016a08:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8016a0c:	fa5f f18a 	uxtb.w	r1, sl
 8016a10:	2901      	cmp	r1, #1
 8016a12:	d921      	bls.n	8016a58 <uxr_write_framed_msg+0x128>
 8016a14:	2a29      	cmp	r2, #41	; 0x29
 8016a16:	f240 80af 	bls.w	8016b78 <uxr_write_framed_msg+0x248>
 8016a1a:	2500      	movs	r5, #0
 8016a1c:	e000      	b.n	8016a20 <uxr_write_framed_msg+0xf0>
 8016a1e:	b160      	cbz	r0, 8016a3a <uxr_write_framed_msg+0x10a>
 8016a20:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016a24:	1b52      	subs	r2, r2, r5
 8016a26:	465b      	mov	r3, fp
 8016a28:	4421      	add	r1, r4
 8016a2a:	4638      	mov	r0, r7
 8016a2c:	47b0      	blx	r6
 8016a2e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016a32:	4405      	add	r5, r0
 8016a34:	4295      	cmp	r5, r2
 8016a36:	d3f2      	bcc.n	8016a1e <uxr_write_framed_msg+0xee>
 8016a38:	d003      	beq.n	8016a42 <uxr_write_framed_msg+0x112>
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	b003      	add	sp, #12
 8016a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a42:	fa5f f18a 	uxtb.w	r1, sl
 8016a46:	f04f 0300 	mov.w	r3, #0
 8016a4a:	2901      	cmp	r1, #1
 8016a4c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016a50:	f04f 0200 	mov.w	r2, #0
 8016a54:	f200 8090 	bhi.w	8016b78 <uxr_write_framed_msg+0x248>
 8016a58:	1c51      	adds	r1, r2, #1
 8016a5a:	b2c9      	uxtb	r1, r1
 8016a5c:	2929      	cmp	r1, #41	; 0x29
 8016a5e:	d8dc      	bhi.n	8016a1a <uxr_write_framed_msg+0xea>
 8016a60:	18a5      	adds	r5, r4, r2
 8016a62:	4421      	add	r1, r4
 8016a64:	3202      	adds	r2, #2
 8016a66:	f088 0820 	eor.w	r8, r8, #32
 8016a6a:	4648      	mov	r0, r9
 8016a6c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8016a70:	b2d2      	uxtb	r2, r2
 8016a72:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8016a76:	f04f 0901 	mov.w	r9, #1
 8016a7a:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8016a7e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016a82:	2800      	cmp	r0, #0
 8016a84:	f040 8085 	bne.w	8016b92 <uxr_write_framed_msg+0x262>
 8016a88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016a8c:	e7bc      	b.n	8016a08 <uxr_write_framed_msg+0xd8>
 8016a8e:	4611      	mov	r1, r2
 8016a90:	f04f 0c03 	mov.w	ip, #3
 8016a94:	2204      	movs	r2, #4
 8016a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a98:	4421      	add	r1, r4
 8016a9a:	b2dd      	uxtb	r5, r3
 8016a9c:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8016aa0:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8016aa4:	44a4      	add	ip, r4
 8016aa6:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8016aaa:	f080 0020 	eor.w	r0, r0, #32
 8016aae:	2901      	cmp	r1, #1
 8016ab0:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8016ab4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016ab8:	f63f af66 	bhi.w	8016988 <uxr_write_framed_msg+0x58>
 8016abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016abe:	18a0      	adds	r0, r4, r2
 8016ac0:	f085 0520 	eor.w	r5, r5, #32
 8016ac4:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8016ac8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016acc:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8016ad0:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8016ad4:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8016ad8:	3202      	adds	r2, #2
 8016ada:	2801      	cmp	r0, #1
 8016adc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016ae0:	f63f af60 	bhi.w	80169a4 <uxr_write_framed_msg+0x74>
 8016ae4:	1c50      	adds	r0, r2, #1
 8016ae6:	18a5      	adds	r5, r4, r2
 8016ae8:	fa54 f080 	uxtab	r0, r4, r0
 8016aec:	3202      	adds	r2, #2
 8016aee:	f081 0120 	eor.w	r1, r1, #32
 8016af2:	b2d2      	uxtb	r2, r2
 8016af4:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8016af8:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8016afc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8016b00:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f47f af57 	bne.w	80169b8 <uxr_write_framed_msg+0x88>
 8016b0a:	9301      	str	r3, [sp, #4]
 8016b0c:	4698      	mov	r8, r3
 8016b0e:	e779      	b.n	8016a04 <uxr_write_framed_msg+0xd4>
 8016b10:	2500      	movs	r5, #0
 8016b12:	e001      	b.n	8016b18 <uxr_write_framed_msg+0x1e8>
 8016b14:	2800      	cmp	r0, #0
 8016b16:	d090      	beq.n	8016a3a <uxr_write_framed_msg+0x10a>
 8016b18:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016b1c:	1b52      	subs	r2, r2, r5
 8016b1e:	465b      	mov	r3, fp
 8016b20:	4421      	add	r1, r4
 8016b22:	4638      	mov	r0, r7
 8016b24:	47b0      	blx	r6
 8016b26:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016b2a:	4405      	add	r5, r0
 8016b2c:	4295      	cmp	r5, r2
 8016b2e:	d3f1      	bcc.n	8016b14 <uxr_write_framed_msg+0x1e4>
 8016b30:	d183      	bne.n	8016a3a <uxr_write_framed_msg+0x10a>
 8016b32:	f04f 0300 	mov.w	r3, #0
 8016b36:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b3c:	4543      	cmp	r3, r8
 8016b3e:	d964      	bls.n	8016c0a <uxr_write_framed_msg+0x2da>
 8016b40:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016b44:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016b48:	2901      	cmp	r1, #1
 8016b4a:	f04f 0200 	mov.w	r2, #0
 8016b4e:	f63f af3d 	bhi.w	80169cc <uxr_write_framed_msg+0x9c>
 8016b52:	1c51      	adds	r1, r2, #1
 8016b54:	b2c9      	uxtb	r1, r1
 8016b56:	2929      	cmp	r1, #41	; 0x29
 8016b58:	d8da      	bhi.n	8016b10 <uxr_write_framed_msg+0x1e0>
 8016b5a:	18a0      	adds	r0, r4, r2
 8016b5c:	4421      	add	r1, r4
 8016b5e:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8016b62:	3202      	adds	r2, #2
 8016b64:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8016b68:	b2d2      	uxtb	r2, r2
 8016b6a:	f083 0020 	eor.w	r0, r3, #32
 8016b6e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8016b72:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016b76:	e733      	b.n	80169e0 <uxr_write_framed_msg+0xb0>
 8016b78:	18a1      	adds	r1, r4, r2
 8016b7a:	3201      	adds	r2, #1
 8016b7c:	4648      	mov	r0, r9
 8016b7e:	b2d2      	uxtb	r2, r2
 8016b80:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8016b84:	f04f 0901 	mov.w	r9, #1
 8016b88:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	f43f af7b 	beq.w	8016a88 <uxr_write_framed_msg+0x158>
 8016b92:	2500      	movs	r5, #0
 8016b94:	e002      	b.n	8016b9c <uxr_write_framed_msg+0x26c>
 8016b96:	2800      	cmp	r0, #0
 8016b98:	f43f af4f 	beq.w	8016a3a <uxr_write_framed_msg+0x10a>
 8016b9c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016ba0:	1b52      	subs	r2, r2, r5
 8016ba2:	465b      	mov	r3, fp
 8016ba4:	4421      	add	r1, r4
 8016ba6:	4638      	mov	r0, r7
 8016ba8:	47b0      	blx	r6
 8016baa:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016bae:	4405      	add	r5, r0
 8016bb0:	4295      	cmp	r5, r2
 8016bb2:	d3f0      	bcc.n	8016b96 <uxr_write_framed_msg+0x266>
 8016bb4:	f47f af41 	bne.w	8016a3a <uxr_write_framed_msg+0x10a>
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bc0:	b298      	uxth	r0, r3
 8016bc2:	b003      	add	sp, #12
 8016bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc8:	217d      	movs	r1, #125	; 0x7d
 8016bca:	f082 0220 	eor.w	r2, r2, #32
 8016bce:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8016bd2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8016bd6:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8016bda:	2901      	cmp	r1, #1
 8016bdc:	f04f 0203 	mov.w	r2, #3
 8016be0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016be4:	d804      	bhi.n	8016bf0 <uxr_write_framed_msg+0x2c0>
 8016be6:	4611      	mov	r1, r2
 8016be8:	f04f 0c04 	mov.w	ip, #4
 8016bec:	2205      	movs	r2, #5
 8016bee:	e752      	b.n	8016a96 <uxr_write_framed_msg+0x166>
 8016bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bf2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8016bf6:	b2dd      	uxtb	r5, r3
 8016bf8:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8016bfc:	2204      	movs	r2, #4
 8016bfe:	2901      	cmp	r1, #1
 8016c00:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016c04:	f63f aec0 	bhi.w	8016988 <uxr_write_framed_msg+0x58>
 8016c08:	e758      	b.n	8016abc <uxr_write_framed_msg+0x18c>
 8016c0a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016c0e:	fa5f f889 	uxtb.w	r8, r9
 8016c12:	9301      	str	r3, [sp, #4]
 8016c14:	2200      	movs	r2, #0
 8016c16:	e6f5      	b.n	8016a04 <uxr_write_framed_msg+0xd4>
 8016c18:	08019a00 	.word	0x08019a00

08016c1c <uxr_framing_read_transport>:
 8016c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c20:	4604      	mov	r4, r0
 8016c22:	b083      	sub	sp, #12
 8016c24:	461f      	mov	r7, r3
 8016c26:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8016c2a:	4689      	mov	r9, r1
 8016c2c:	4692      	mov	sl, r2
 8016c2e:	f7fb fbff 	bl	8012430 <uxr_millis>
 8016c32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016c36:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8016c3a:	42b3      	cmp	r3, r6
 8016c3c:	4680      	mov	r8, r0
 8016c3e:	d061      	beq.n	8016d04 <uxr_framing_read_transport+0xe8>
 8016c40:	d81c      	bhi.n	8016c7c <uxr_framing_read_transport+0x60>
 8016c42:	1e75      	subs	r5, r6, #1
 8016c44:	1aed      	subs	r5, r5, r3
 8016c46:	b2ed      	uxtb	r5, r5
 8016c48:	2600      	movs	r6, #0
 8016c4a:	455d      	cmp	r5, fp
 8016c4c:	d81f      	bhi.n	8016c8e <uxr_framing_read_transport+0x72>
 8016c4e:	19ab      	adds	r3, r5, r6
 8016c50:	455b      	cmp	r3, fp
 8016c52:	bf84      	itt	hi
 8016c54:	ebab 0605 	subhi.w	r6, fp, r5
 8016c58:	b2f6      	uxtbhi	r6, r6
 8016c5a:	b9ed      	cbnz	r5, 8016c98 <uxr_framing_read_transport+0x7c>
 8016c5c:	f04f 0b00 	mov.w	fp, #0
 8016c60:	f7fb fbe6 	bl	8012430 <uxr_millis>
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	eba0 0808 	sub.w	r8, r0, r8
 8016c6a:	eba3 0308 	sub.w	r3, r3, r8
 8016c6e:	4658      	mov	r0, fp
 8016c70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c74:	603b      	str	r3, [r7, #0]
 8016c76:	b003      	add	sp, #12
 8016c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c7c:	2e00      	cmp	r6, #0
 8016c7e:	d049      	beq.n	8016d14 <uxr_framing_read_transport+0xf8>
 8016c80:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8016c84:	b2ed      	uxtb	r5, r5
 8016c86:	3e01      	subs	r6, #1
 8016c88:	455d      	cmp	r5, fp
 8016c8a:	b2f6      	uxtb	r6, r6
 8016c8c:	d9df      	bls.n	8016c4e <uxr_framing_read_transport+0x32>
 8016c8e:	fa5f f58b 	uxtb.w	r5, fp
 8016c92:	2600      	movs	r6, #0
 8016c94:	2d00      	cmp	r5, #0
 8016c96:	d0e1      	beq.n	8016c5c <uxr_framing_read_transport+0x40>
 8016c98:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016c9c:	3102      	adds	r1, #2
 8016c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ca0:	9300      	str	r3, [sp, #0]
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	4421      	add	r1, r4
 8016ca6:	462a      	mov	r2, r5
 8016ca8:	4650      	mov	r0, sl
 8016caa:	47c8      	blx	r9
 8016cac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016cb0:	4a1a      	ldr	r2, [pc, #104]	; (8016d1c <uxr_framing_read_transport+0x100>)
 8016cb2:	4403      	add	r3, r0
 8016cb4:	0859      	lsrs	r1, r3, #1
 8016cb6:	fba2 2101 	umull	r2, r1, r2, r1
 8016cba:	0889      	lsrs	r1, r1, #2
 8016cbc:	222a      	movs	r2, #42	; 0x2a
 8016cbe:	fb02 3111 	mls	r1, r2, r1, r3
 8016cc2:	4683      	mov	fp, r0
 8016cc4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d0c7      	beq.n	8016c5c <uxr_framing_read_transport+0x40>
 8016ccc:	42a8      	cmp	r0, r5
 8016cce:	d1c7      	bne.n	8016c60 <uxr_framing_read_transport+0x44>
 8016cd0:	2e00      	cmp	r6, #0
 8016cd2:	d0c5      	beq.n	8016c60 <uxr_framing_read_transport+0x44>
 8016cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cd6:	9300      	str	r3, [sp, #0]
 8016cd8:	3102      	adds	r1, #2
 8016cda:	4632      	mov	r2, r6
 8016cdc:	4421      	add	r1, r4
 8016cde:	2300      	movs	r3, #0
 8016ce0:	4650      	mov	r0, sl
 8016ce2:	47c8      	blx	r9
 8016ce4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016ce8:	4a0c      	ldr	r2, [pc, #48]	; (8016d1c <uxr_framing_read_transport+0x100>)
 8016cea:	180b      	adds	r3, r1, r0
 8016cec:	0859      	lsrs	r1, r3, #1
 8016cee:	fba2 1201 	umull	r1, r2, r2, r1
 8016cf2:	0892      	lsrs	r2, r2, #2
 8016cf4:	212a      	movs	r1, #42	; 0x2a
 8016cf6:	fb01 3312 	mls	r3, r1, r2, r3
 8016cfa:	eb00 0b05 	add.w	fp, r0, r5
 8016cfe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8016d02:	e7ad      	b.n	8016c60 <uxr_framing_read_transport+0x44>
 8016d04:	2600      	movs	r6, #0
 8016d06:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8016d0a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8016d0c:	d9bf      	bls.n	8016c8e <uxr_framing_read_transport+0x72>
 8016d0e:	2102      	movs	r1, #2
 8016d10:	2529      	movs	r5, #41	; 0x29
 8016d12:	e7c4      	b.n	8016c9e <uxr_framing_read_transport+0x82>
 8016d14:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8016d18:	b2ed      	uxtb	r5, r5
 8016d1a:	e796      	b.n	8016c4a <uxr_framing_read_transport+0x2e>
 8016d1c:	30c30c31 	.word	0x30c30c31

08016d20 <uxr_read_framed_msg>:
 8016d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d24:	461e      	mov	r6, r3
 8016d26:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8016d2a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8016d2e:	429d      	cmp	r5, r3
 8016d30:	b083      	sub	sp, #12
 8016d32:	4604      	mov	r4, r0
 8016d34:	4688      	mov	r8, r1
 8016d36:	4691      	mov	r9, r2
 8016d38:	f000 8188 	beq.w	801704c <uxr_read_framed_msg+0x32c>
 8016d3c:	7823      	ldrb	r3, [r4, #0]
 8016d3e:	4dc1      	ldr	r5, [pc, #772]	; (8017044 <uxr_read_framed_msg+0x324>)
 8016d40:	4fc1      	ldr	r7, [pc, #772]	; (8017048 <uxr_read_framed_msg+0x328>)
 8016d42:	2b07      	cmp	r3, #7
 8016d44:	d8fd      	bhi.n	8016d42 <uxr_read_framed_msg+0x22>
 8016d46:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016d4a:	0115      	.short	0x0115
 8016d4c:	00d600f6 	.word	0x00d600f6
 8016d50:	009000b9 	.word	0x009000b9
 8016d54:	0030004d 	.word	0x0030004d
 8016d58:	0008      	.short	0x0008
 8016d5a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016d5e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016d62:	4299      	cmp	r1, r3
 8016d64:	f000 814a 	beq.w	8016ffc <uxr_read_framed_msg+0x2dc>
 8016d68:	18e2      	adds	r2, r4, r3
 8016d6a:	7892      	ldrb	r2, [r2, #2]
 8016d6c:	2a7d      	cmp	r2, #125	; 0x7d
 8016d6e:	f000 8199 	beq.w	80170a4 <uxr_read_framed_msg+0x384>
 8016d72:	3301      	adds	r3, #1
 8016d74:	0858      	lsrs	r0, r3, #1
 8016d76:	fba5 1000 	umull	r1, r0, r5, r0
 8016d7a:	0880      	lsrs	r0, r0, #2
 8016d7c:	212a      	movs	r1, #42	; 0x2a
 8016d7e:	fb01 3310 	mls	r3, r1, r0, r3
 8016d82:	2a7e      	cmp	r2, #126	; 0x7e
 8016d84:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016d88:	f000 8252 	beq.w	8017230 <uxr_read_framed_msg+0x510>
 8016d8c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016d8e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8016d90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016d94:	b29b      	uxth	r3, r3
 8016d96:	2200      	movs	r2, #0
 8016d98:	4299      	cmp	r1, r3
 8016d9a:	86a3      	strh	r3, [r4, #52]	; 0x34
 8016d9c:	7022      	strb	r2, [r4, #0]
 8016d9e:	f000 8179 	beq.w	8017094 <uxr_read_framed_msg+0x374>
 8016da2:	2000      	movs	r0, #0
 8016da4:	b003      	add	sp, #12
 8016da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016daa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016dae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016db2:	4299      	cmp	r1, r3
 8016db4:	f000 8131 	beq.w	801701a <uxr_read_framed_msg+0x2fa>
 8016db8:	18e2      	adds	r2, r4, r3
 8016dba:	7890      	ldrb	r0, [r2, #2]
 8016dbc:	287d      	cmp	r0, #125	; 0x7d
 8016dbe:	f000 8190 	beq.w	80170e2 <uxr_read_framed_msg+0x3c2>
 8016dc2:	3301      	adds	r3, #1
 8016dc4:	085a      	lsrs	r2, r3, #1
 8016dc6:	fba5 1202 	umull	r1, r2, r5, r2
 8016dca:	0892      	lsrs	r2, r2, #2
 8016dcc:	212a      	movs	r1, #42	; 0x2a
 8016dce:	fb01 3312 	mls	r3, r1, r2, r3
 8016dd2:	287e      	cmp	r0, #126	; 0x7e
 8016dd4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016dd8:	f000 821a 	beq.w	8017210 <uxr_read_framed_msg+0x4f0>
 8016ddc:	2307      	movs	r3, #7
 8016dde:	86a0      	strh	r0, [r4, #52]	; 0x34
 8016de0:	7023      	strb	r3, [r4, #0]
 8016de2:	e7ae      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8016de4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016de6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8016dea:	459e      	cmp	lr, r3
 8016dec:	d938      	bls.n	8016e60 <uxr_read_framed_msg+0x140>
 8016dee:	ee07 8a90 	vmov	s15, r8
 8016df2:	212a      	movs	r1, #42	; 0x2a
 8016df4:	e020      	b.n	8016e38 <uxr_read_framed_msg+0x118>
 8016df6:	f89b c002 	ldrb.w	ip, [fp, #2]
 8016dfa:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8016dfe:	f000 80d4 	beq.w	8016faa <uxr_read_framed_msg+0x28a>
 8016e02:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8016e06:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016e0a:	f000 8219 	beq.w	8017240 <uxr_read_framed_msg+0x520>
 8016e0e:	f806 c003 	strb.w	ip, [r6, r3]
 8016e12:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8016e16:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016e18:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8016e1c:	ea8a 000c 	eor.w	r0, sl, ip
 8016e20:	b2c0      	uxtb	r0, r0
 8016e22:	3301      	adds	r3, #1
 8016e24:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8016e2e:	4573      	cmp	r3, lr
 8016e30:	8663      	strh	r3, [r4, #50]	; 0x32
 8016e32:	86e2      	strh	r2, [r4, #54]	; 0x36
 8016e34:	f080 8120 	bcs.w	8017078 <uxr_read_framed_msg+0x358>
 8016e38:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8016e3c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8016e40:	f100 0c01 	add.w	ip, r0, #1
 8016e44:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016e48:	fba5 8202 	umull	r8, r2, r5, r2
 8016e4c:	0892      	lsrs	r2, r2, #2
 8016e4e:	4582      	cmp	sl, r0
 8016e50:	eb04 0b00 	add.w	fp, r4, r0
 8016e54:	fb01 c212 	mls	r2, r1, r2, ip
 8016e58:	d1cd      	bne.n	8016df6 <uxr_read_framed_msg+0xd6>
 8016e5a:	ee17 8a90 	vmov	r8, s15
 8016e5e:	459e      	cmp	lr, r3
 8016e60:	f040 8111 	bne.w	8017086 <uxr_read_framed_msg+0x366>
 8016e64:	2306      	movs	r3, #6
 8016e66:	7023      	strb	r3, [r4, #0]
 8016e68:	e76b      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8016e6a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016e6e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016e72:	4298      	cmp	r0, r3
 8016e74:	f000 80c2 	beq.w	8016ffc <uxr_read_framed_msg+0x2dc>
 8016e78:	18e2      	adds	r2, r4, r3
 8016e7a:	7891      	ldrb	r1, [r2, #2]
 8016e7c:	297d      	cmp	r1, #125	; 0x7d
 8016e7e:	f000 814c 	beq.w	801711a <uxr_read_framed_msg+0x3fa>
 8016e82:	3301      	adds	r3, #1
 8016e84:	085a      	lsrs	r2, r3, #1
 8016e86:	fba5 0202 	umull	r0, r2, r5, r2
 8016e8a:	0892      	lsrs	r2, r2, #2
 8016e8c:	202a      	movs	r0, #42	; 0x2a
 8016e8e:	fb00 3312 	mls	r3, r0, r2, r3
 8016e92:	297e      	cmp	r1, #126	; 0x7e
 8016e94:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016e98:	f000 81ca 	beq.w	8017230 <uxr_read_framed_msg+0x510>
 8016e9c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016e9e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016ea2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	2000      	movs	r0, #0
 8016ea8:	428b      	cmp	r3, r1
 8016eaa:	8623      	strh	r3, [r4, #48]	; 0x30
 8016eac:	8660      	strh	r0, [r4, #50]	; 0x32
 8016eae:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016eb0:	f240 80df 	bls.w	8017072 <uxr_read_framed_msg+0x352>
 8016eb4:	7020      	strb	r0, [r4, #0]
 8016eb6:	b003      	add	sp, #12
 8016eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ebc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016ec0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016ec4:	4299      	cmp	r1, r3
 8016ec6:	f000 80a8 	beq.w	801701a <uxr_read_framed_msg+0x2fa>
 8016eca:	18e2      	adds	r2, r4, r3
 8016ecc:	7890      	ldrb	r0, [r2, #2]
 8016ece:	287d      	cmp	r0, #125	; 0x7d
 8016ed0:	f000 8164 	beq.w	801719c <uxr_read_framed_msg+0x47c>
 8016ed4:	3301      	adds	r3, #1
 8016ed6:	085a      	lsrs	r2, r3, #1
 8016ed8:	fba5 1202 	umull	r1, r2, r5, r2
 8016edc:	0892      	lsrs	r2, r2, #2
 8016ede:	212a      	movs	r1, #42	; 0x2a
 8016ee0:	fb01 3312 	mls	r3, r1, r2, r3
 8016ee4:	287e      	cmp	r0, #126	; 0x7e
 8016ee6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016eea:	f000 8191 	beq.w	8017210 <uxr_read_framed_msg+0x4f0>
 8016eee:	2304      	movs	r3, #4
 8016ef0:	8620      	strh	r0, [r4, #48]	; 0x30
 8016ef2:	7023      	strb	r3, [r4, #0]
 8016ef4:	e725      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8016ef6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016efa:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016efe:	4290      	cmp	r0, r2
 8016f00:	f000 80b3 	beq.w	801706a <uxr_read_framed_msg+0x34a>
 8016f04:	18a3      	adds	r3, r4, r2
 8016f06:	7899      	ldrb	r1, [r3, #2]
 8016f08:	297d      	cmp	r1, #125	; 0x7d
 8016f0a:	f000 8164 	beq.w	80171d6 <uxr_read_framed_msg+0x4b6>
 8016f0e:	3201      	adds	r2, #1
 8016f10:	0850      	lsrs	r0, r2, #1
 8016f12:	fba5 3000 	umull	r3, r0, r5, r0
 8016f16:	0880      	lsrs	r0, r0, #2
 8016f18:	232a      	movs	r3, #42	; 0x2a
 8016f1a:	fb03 2210 	mls	r2, r3, r0, r2
 8016f1e:	297e      	cmp	r1, #126	; 0x7e
 8016f20:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016f24:	f000 8188 	beq.w	8017238 <uxr_read_framed_msg+0x518>
 8016f28:	7863      	ldrb	r3, [r4, #1]
 8016f2a:	428b      	cmp	r3, r1
 8016f2c:	bf0c      	ite	eq
 8016f2e:	2303      	moveq	r3, #3
 8016f30:	2300      	movne	r3, #0
 8016f32:	7023      	strb	r3, [r4, #0]
 8016f34:	e705      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8016f36:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016f3a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016f3e:	2200      	movs	r2, #0
 8016f40:	4299      	cmp	r1, r3
 8016f42:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8016f46:	d06c      	beq.n	8017022 <uxr_read_framed_msg+0x302>
 8016f48:	18e2      	adds	r2, r4, r3
 8016f4a:	7890      	ldrb	r0, [r2, #2]
 8016f4c:	287d      	cmp	r0, #125	; 0x7d
 8016f4e:	f000 8101 	beq.w	8017154 <uxr_read_framed_msg+0x434>
 8016f52:	3301      	adds	r3, #1
 8016f54:	085a      	lsrs	r2, r3, #1
 8016f56:	fba5 1202 	umull	r1, r2, r5, r2
 8016f5a:	0892      	lsrs	r2, r2, #2
 8016f5c:	212a      	movs	r1, #42	; 0x2a
 8016f5e:	fb01 3312 	mls	r3, r1, r2, r3
 8016f62:	287e      	cmp	r0, #126	; 0x7e
 8016f64:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8016f68:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016f6c:	d059      	beq.n	8017022 <uxr_read_framed_msg+0x302>
 8016f6e:	2302      	movs	r3, #2
 8016f70:	7023      	strb	r3, [r4, #0]
 8016f72:	e6e6      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8016f74:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8016f78:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016f7c:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8016f80:	1c51      	adds	r1, r2, #1
 8016f82:	084b      	lsrs	r3, r1, #1
 8016f84:	fba5 c303 	umull	ip, r3, r5, r3
 8016f88:	089b      	lsrs	r3, r3, #2
 8016f8a:	fb0e 1313 	mls	r3, lr, r3, r1
 8016f8e:	4592      	cmp	sl, r2
 8016f90:	eb04 0002 	add.w	r0, r4, r2
 8016f94:	b2da      	uxtb	r2, r3
 8016f96:	f43f af04 	beq.w	8016da2 <uxr_read_framed_msg+0x82>
 8016f9a:	7883      	ldrb	r3, [r0, #2]
 8016f9c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016fa0:	2b7e      	cmp	r3, #126	; 0x7e
 8016fa2:	d1ed      	bne.n	8016f80 <uxr_read_framed_msg+0x260>
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	7023      	strb	r3, [r4, #0]
 8016fa8:	e6cb      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8016faa:	f100 0c01 	add.w	ip, r0, #1
 8016fae:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016fb2:	fba5 8202 	umull	r8, r2, r5, r2
 8016fb6:	0892      	lsrs	r2, r2, #2
 8016fb8:	fb01 c212 	mls	r2, r1, r2, ip
 8016fbc:	eb04 0c02 	add.w	ip, r4, r2
 8016fc0:	b2d2      	uxtb	r2, r2
 8016fc2:	4592      	cmp	sl, r2
 8016fc4:	f100 0002 	add.w	r0, r0, #2
 8016fc8:	f43f af47 	beq.w	8016e5a <uxr_read_framed_msg+0x13a>
 8016fcc:	0842      	lsrs	r2, r0, #1
 8016fce:	f89c a002 	ldrb.w	sl, [ip, #2]
 8016fd2:	fba5 8202 	umull	r8, r2, r5, r2
 8016fd6:	0892      	lsrs	r2, r2, #2
 8016fd8:	fb01 0012 	mls	r0, r1, r2, r0
 8016fdc:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8016fe0:	f08a 0c20 	eor.w	ip, sl, #32
 8016fe4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8016fe8:	f47f af11 	bne.w	8016e0e <uxr_read_framed_msg+0xee>
 8016fec:	459e      	cmp	lr, r3
 8016fee:	ee17 8a90 	vmov	r8, s15
 8016ff2:	f43f af37 	beq.w	8016e64 <uxr_read_framed_msg+0x144>
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	7023      	strb	r3, [r4, #0]
 8016ffa:	e6a2      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8016ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	2301      	movs	r3, #1
 8017002:	9301      	str	r3, [sp, #4]
 8017004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017006:	464a      	mov	r2, r9
 8017008:	4641      	mov	r1, r8
 801700a:	4620      	mov	r0, r4
 801700c:	f7ff fe06 	bl	8016c1c <uxr_framing_read_transport>
 8017010:	2800      	cmp	r0, #0
 8017012:	f43f aec6 	beq.w	8016da2 <uxr_read_framed_msg+0x82>
 8017016:	7823      	ldrb	r3, [r4, #0]
 8017018:	e693      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 801701a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801701c:	9300      	str	r3, [sp, #0]
 801701e:	2302      	movs	r3, #2
 8017020:	e7ef      	b.n	8017002 <uxr_read_framed_msg+0x2e2>
 8017022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017024:	9300      	str	r3, [sp, #0]
 8017026:	2304      	movs	r3, #4
 8017028:	9301      	str	r3, [sp, #4]
 801702a:	464a      	mov	r2, r9
 801702c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801702e:	4641      	mov	r1, r8
 8017030:	4620      	mov	r0, r4
 8017032:	f7ff fdf3 	bl	8016c1c <uxr_framing_read_transport>
 8017036:	2800      	cmp	r0, #0
 8017038:	d1ed      	bne.n	8017016 <uxr_read_framed_msg+0x2f6>
 801703a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801703e:	2b7e      	cmp	r3, #126	; 0x7e
 8017040:	d0e9      	beq.n	8017016 <uxr_read_framed_msg+0x2f6>
 8017042:	e6ae      	b.n	8016da2 <uxr_read_framed_msg+0x82>
 8017044:	30c30c31 	.word	0x30c30c31
 8017048:	08019a00 	.word	0x08019a00
 801704c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801704e:	9300      	str	r3, [sp, #0]
 8017050:	2305      	movs	r3, #5
 8017052:	9301      	str	r3, [sp, #4]
 8017054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017056:	f7ff fde1 	bl	8016c1c <uxr_framing_read_transport>
 801705a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801705e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017062:	429a      	cmp	r2, r3
 8017064:	f43f ae9d 	beq.w	8016da2 <uxr_read_framed_msg+0x82>
 8017068:	e668      	b.n	8016d3c <uxr_read_framed_msg+0x1c>
 801706a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	2303      	movs	r3, #3
 8017070:	e7c7      	b.n	8017002 <uxr_read_framed_msg+0x2e2>
 8017072:	2305      	movs	r3, #5
 8017074:	7023      	strb	r3, [r4, #0]
 8017076:	e664      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8017078:	ee17 8a90 	vmov	r8, s15
 801707c:	f43f aef2 	beq.w	8016e64 <uxr_read_framed_msg+0x144>
 8017080:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8017084:	d08e      	beq.n	8016fa4 <uxr_read_framed_msg+0x284>
 8017086:	ebae 0303 	sub.w	r3, lr, r3
 801708a:	3302      	adds	r3, #2
 801708c:	9301      	str	r3, [sp, #4]
 801708e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017090:	9300      	str	r3, [sp, #0]
 8017092:	e7b7      	b.n	8017004 <uxr_read_framed_msg+0x2e4>
 8017094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017096:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801709a:	7013      	strb	r3, [r2, #0]
 801709c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801709e:	b003      	add	sp, #12
 80170a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a4:	f103 0c01 	add.w	ip, r3, #1
 80170a8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80170ac:	fba5 0202 	umull	r0, r2, r5, r2
 80170b0:	0892      	lsrs	r2, r2, #2
 80170b2:	202a      	movs	r0, #42	; 0x2a
 80170b4:	fb00 c212 	mls	r2, r0, r2, ip
 80170b8:	fa5f fc82 	uxtb.w	ip, r2
 80170bc:	4561      	cmp	r1, ip
 80170be:	d09d      	beq.n	8016ffc <uxr_read_framed_msg+0x2dc>
 80170c0:	3302      	adds	r3, #2
 80170c2:	4422      	add	r2, r4
 80170c4:	0859      	lsrs	r1, r3, #1
 80170c6:	7892      	ldrb	r2, [r2, #2]
 80170c8:	fba5 c101 	umull	ip, r1, r5, r1
 80170cc:	0889      	lsrs	r1, r1, #2
 80170ce:	fb00 3311 	mls	r3, r0, r1, r3
 80170d2:	2a7e      	cmp	r2, #126	; 0x7e
 80170d4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80170d8:	f000 80aa 	beq.w	8017230 <uxr_read_framed_msg+0x510>
 80170dc:	f082 0220 	eor.w	r2, r2, #32
 80170e0:	e654      	b.n	8016d8c <uxr_read_framed_msg+0x6c>
 80170e2:	1c58      	adds	r0, r3, #1
 80170e4:	0842      	lsrs	r2, r0, #1
 80170e6:	fba5 c202 	umull	ip, r2, r5, r2
 80170ea:	0892      	lsrs	r2, r2, #2
 80170ec:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80170f0:	fb0c 0212 	mls	r2, ip, r2, r0
 80170f4:	b2d0      	uxtb	r0, r2
 80170f6:	4281      	cmp	r1, r0
 80170f8:	d08f      	beq.n	801701a <uxr_read_framed_msg+0x2fa>
 80170fa:	4422      	add	r2, r4
 80170fc:	3302      	adds	r3, #2
 80170fe:	7890      	ldrb	r0, [r2, #2]
 8017100:	085a      	lsrs	r2, r3, #1
 8017102:	fba5 1202 	umull	r1, r2, r5, r2
 8017106:	0892      	lsrs	r2, r2, #2
 8017108:	fb0c 3312 	mls	r3, ip, r2, r3
 801710c:	287e      	cmp	r0, #126	; 0x7e
 801710e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017112:	d07d      	beq.n	8017210 <uxr_read_framed_msg+0x4f0>
 8017114:	f080 0020 	eor.w	r0, r0, #32
 8017118:	e660      	b.n	8016ddc <uxr_read_framed_msg+0xbc>
 801711a:	1c59      	adds	r1, r3, #1
 801711c:	084a      	lsrs	r2, r1, #1
 801711e:	fba5 c202 	umull	ip, r2, r5, r2
 8017122:	0892      	lsrs	r2, r2, #2
 8017124:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017128:	fb0c 1212 	mls	r2, ip, r2, r1
 801712c:	b2d1      	uxtb	r1, r2
 801712e:	4288      	cmp	r0, r1
 8017130:	f43f af64 	beq.w	8016ffc <uxr_read_framed_msg+0x2dc>
 8017134:	4422      	add	r2, r4
 8017136:	3302      	adds	r3, #2
 8017138:	7891      	ldrb	r1, [r2, #2]
 801713a:	085a      	lsrs	r2, r3, #1
 801713c:	fba5 0202 	umull	r0, r2, r5, r2
 8017140:	0892      	lsrs	r2, r2, #2
 8017142:	fb0c 3312 	mls	r3, ip, r2, r3
 8017146:	297e      	cmp	r1, #126	; 0x7e
 8017148:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801714c:	d070      	beq.n	8017230 <uxr_read_framed_msg+0x510>
 801714e:	f081 0120 	eor.w	r1, r1, #32
 8017152:	e6a3      	b.n	8016e9c <uxr_read_framed_msg+0x17c>
 8017154:	f103 0c01 	add.w	ip, r3, #1
 8017158:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801715c:	fba5 0202 	umull	r0, r2, r5, r2
 8017160:	0892      	lsrs	r2, r2, #2
 8017162:	202a      	movs	r0, #42	; 0x2a
 8017164:	fb00 c212 	mls	r2, r0, r2, ip
 8017168:	fa5f fc82 	uxtb.w	ip, r2
 801716c:	4561      	cmp	r1, ip
 801716e:	f43f af58 	beq.w	8017022 <uxr_read_framed_msg+0x302>
 8017172:	4422      	add	r2, r4
 8017174:	3302      	adds	r3, #2
 8017176:	7891      	ldrb	r1, [r2, #2]
 8017178:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801717c:	085a      	lsrs	r2, r3, #1
 801717e:	fba5 c202 	umull	ip, r2, r5, r2
 8017182:	0892      	lsrs	r2, r2, #2
 8017184:	fb00 3312 	mls	r3, r0, r2, r3
 8017188:	297e      	cmp	r1, #126	; 0x7e
 801718a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801718e:	f43f af48 	beq.w	8017022 <uxr_read_framed_msg+0x302>
 8017192:	f081 0120 	eor.w	r1, r1, #32
 8017196:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801719a:	e6e8      	b.n	8016f6e <uxr_read_framed_msg+0x24e>
 801719c:	1c58      	adds	r0, r3, #1
 801719e:	0842      	lsrs	r2, r0, #1
 80171a0:	fba5 c202 	umull	ip, r2, r5, r2
 80171a4:	0892      	lsrs	r2, r2, #2
 80171a6:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80171aa:	fb0c 0212 	mls	r2, ip, r2, r0
 80171ae:	b2d0      	uxtb	r0, r2
 80171b0:	4281      	cmp	r1, r0
 80171b2:	f43f af32 	beq.w	801701a <uxr_read_framed_msg+0x2fa>
 80171b6:	4422      	add	r2, r4
 80171b8:	3302      	adds	r3, #2
 80171ba:	7890      	ldrb	r0, [r2, #2]
 80171bc:	085a      	lsrs	r2, r3, #1
 80171be:	fba5 1202 	umull	r1, r2, r5, r2
 80171c2:	0892      	lsrs	r2, r2, #2
 80171c4:	fb0c 3312 	mls	r3, ip, r2, r3
 80171c8:	287e      	cmp	r0, #126	; 0x7e
 80171ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80171ce:	d01f      	beq.n	8017210 <uxr_read_framed_msg+0x4f0>
 80171d0:	f080 0020 	eor.w	r0, r0, #32
 80171d4:	e68b      	b.n	8016eee <uxr_read_framed_msg+0x1ce>
 80171d6:	1c51      	adds	r1, r2, #1
 80171d8:	084b      	lsrs	r3, r1, #1
 80171da:	fba5 c303 	umull	ip, r3, r5, r3
 80171de:	089b      	lsrs	r3, r3, #2
 80171e0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80171e4:	fb0c 1313 	mls	r3, ip, r3, r1
 80171e8:	b2d9      	uxtb	r1, r3
 80171ea:	4288      	cmp	r0, r1
 80171ec:	f43f af3d 	beq.w	801706a <uxr_read_framed_msg+0x34a>
 80171f0:	3202      	adds	r2, #2
 80171f2:	4423      	add	r3, r4
 80171f4:	0850      	lsrs	r0, r2, #1
 80171f6:	789b      	ldrb	r3, [r3, #2]
 80171f8:	fba5 1000 	umull	r1, r0, r5, r0
 80171fc:	0880      	lsrs	r0, r0, #2
 80171fe:	fb0c 2210 	mls	r2, ip, r0, r2
 8017202:	2b7e      	cmp	r3, #126	; 0x7e
 8017204:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017208:	d016      	beq.n	8017238 <uxr_read_framed_msg+0x518>
 801720a:	f083 0120 	eor.w	r1, r3, #32
 801720e:	e68b      	b.n	8016f28 <uxr_read_framed_msg+0x208>
 8017210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017212:	9300      	str	r3, [sp, #0]
 8017214:	2302      	movs	r3, #2
 8017216:	9301      	str	r3, [sp, #4]
 8017218:	464a      	mov	r2, r9
 801721a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801721c:	4641      	mov	r1, r8
 801721e:	4620      	mov	r0, r4
 8017220:	f7ff fcfc 	bl	8016c1c <uxr_framing_read_transport>
 8017224:	2800      	cmp	r0, #0
 8017226:	f47f aef6 	bne.w	8017016 <uxr_read_framed_msg+0x2f6>
 801722a:	2301      	movs	r3, #1
 801722c:	7023      	strb	r3, [r4, #0]
 801722e:	e588      	b.n	8016d42 <uxr_read_framed_msg+0x22>
 8017230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	2301      	movs	r3, #1
 8017236:	e7ee      	b.n	8017216 <uxr_read_framed_msg+0x4f6>
 8017238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801723a:	9300      	str	r3, [sp, #0]
 801723c:	2303      	movs	r3, #3
 801723e:	e7ea      	b.n	8017216 <uxr_read_framed_msg+0x4f6>
 8017240:	ee17 8a90 	vmov	r8, s15
 8017244:	e6ae      	b.n	8016fa4 <uxr_read_framed_msg+0x284>
 8017246:	bf00      	nop

08017248 <rcl_get_default_domain_id>:
 8017248:	b530      	push	{r4, r5, lr}
 801724a:	b083      	sub	sp, #12
 801724c:	2300      	movs	r3, #0
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	b1d0      	cbz	r0, 8017288 <rcl_get_default_domain_id+0x40>
 8017252:	4604      	mov	r4, r0
 8017254:	4669      	mov	r1, sp
 8017256:	4815      	ldr	r0, [pc, #84]	; (80172ac <rcl_get_default_domain_id+0x64>)
 8017258:	f7fd f93a 	bl	80144d0 <rcutils_get_env>
 801725c:	4602      	mov	r2, r0
 801725e:	b110      	cbz	r0, 8017266 <rcl_get_default_domain_id+0x1e>
 8017260:	2001      	movs	r0, #1
 8017262:	b003      	add	sp, #12
 8017264:	bd30      	pop	{r4, r5, pc}
 8017266:	9b00      	ldr	r3, [sp, #0]
 8017268:	b18b      	cbz	r3, 801728e <rcl_get_default_domain_id+0x46>
 801726a:	7818      	ldrb	r0, [r3, #0]
 801726c:	2800      	cmp	r0, #0
 801726e:	d0f8      	beq.n	8017262 <rcl_get_default_domain_id+0x1a>
 8017270:	a901      	add	r1, sp, #4
 8017272:	4618      	mov	r0, r3
 8017274:	9201      	str	r2, [sp, #4]
 8017276:	f000 fe89 	bl	8017f8c <strtoul>
 801727a:	4605      	mov	r5, r0
 801727c:	b150      	cbz	r0, 8017294 <rcl_get_default_domain_id+0x4c>
 801727e:	1c43      	adds	r3, r0, #1
 8017280:	d00d      	beq.n	801729e <rcl_get_default_domain_id+0x56>
 8017282:	6025      	str	r5, [r4, #0]
 8017284:	2000      	movs	r0, #0
 8017286:	e7ec      	b.n	8017262 <rcl_get_default_domain_id+0x1a>
 8017288:	200b      	movs	r0, #11
 801728a:	b003      	add	sp, #12
 801728c:	bd30      	pop	{r4, r5, pc}
 801728e:	4618      	mov	r0, r3
 8017290:	b003      	add	sp, #12
 8017292:	bd30      	pop	{r4, r5, pc}
 8017294:	9b01      	ldr	r3, [sp, #4]
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d0f2      	beq.n	8017282 <rcl_get_default_domain_id+0x3a>
 801729c:	e7e0      	b.n	8017260 <rcl_get_default_domain_id+0x18>
 801729e:	f001 f885 	bl	80183ac <__errno>
 80172a2:	6803      	ldr	r3, [r0, #0]
 80172a4:	2b22      	cmp	r3, #34	; 0x22
 80172a6:	d1ec      	bne.n	8017282 <rcl_get_default_domain_id+0x3a>
 80172a8:	e7da      	b.n	8017260 <rcl_get_default_domain_id+0x18>
 80172aa:	bf00      	nop
 80172ac:	08019c00 	.word	0x08019c00

080172b0 <rcl_expand_topic_name>:
 80172b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b4:	b08b      	sub	sp, #44	; 0x2c
 80172b6:	9306      	str	r3, [sp, #24]
 80172b8:	2800      	cmp	r0, #0
 80172ba:	f000 80ad 	beq.w	8017418 <rcl_expand_topic_name+0x168>
 80172be:	460e      	mov	r6, r1
 80172c0:	2900      	cmp	r1, #0
 80172c2:	f000 80a9 	beq.w	8017418 <rcl_expand_topic_name+0x168>
 80172c6:	4617      	mov	r7, r2
 80172c8:	2a00      	cmp	r2, #0
 80172ca:	f000 80a5 	beq.w	8017418 <rcl_expand_topic_name+0x168>
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	f000 80a2 	beq.w	8017418 <rcl_expand_topic_name+0x168>
 80172d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	f000 809e 	beq.w	8017418 <rcl_expand_topic_name+0x168>
 80172dc:	2200      	movs	r2, #0
 80172de:	a909      	add	r1, sp, #36	; 0x24
 80172e0:	4680      	mov	r8, r0
 80172e2:	f000 f9f5 	bl	80176d0 <rcl_validate_topic_name>
 80172e6:	4604      	mov	r4, r0
 80172e8:	2800      	cmp	r0, #0
 80172ea:	f040 8096 	bne.w	801741a <rcl_expand_topic_name+0x16a>
 80172ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	f040 809a 	bne.w	801742a <rcl_expand_topic_name+0x17a>
 80172f6:	4602      	mov	r2, r0
 80172f8:	a909      	add	r1, sp, #36	; 0x24
 80172fa:	4630      	mov	r0, r6
 80172fc:	f7fd fcea 	bl	8014cd4 <rmw_validate_node_name>
 8017300:	2800      	cmp	r0, #0
 8017302:	f040 808e 	bne.w	8017422 <rcl_expand_topic_name+0x172>
 8017306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017308:	2a00      	cmp	r2, #0
 801730a:	f040 8093 	bne.w	8017434 <rcl_expand_topic_name+0x184>
 801730e:	a909      	add	r1, sp, #36	; 0x24
 8017310:	4638      	mov	r0, r7
 8017312:	f7fd fcc1 	bl	8014c98 <rmw_validate_namespace>
 8017316:	2800      	cmp	r0, #0
 8017318:	f040 8083 	bne.w	8017422 <rcl_expand_topic_name+0x172>
 801731c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801731e:	2c00      	cmp	r4, #0
 8017320:	f040 80ed 	bne.w	80174fe <rcl_expand_topic_name+0x24e>
 8017324:	217b      	movs	r1, #123	; 0x7b
 8017326:	4640      	mov	r0, r8
 8017328:	f000 ffb4 	bl	8018294 <strchr>
 801732c:	f898 3000 	ldrb.w	r3, [r8]
 8017330:	2b2f      	cmp	r3, #47	; 0x2f
 8017332:	4605      	mov	r5, r0
 8017334:	f000 809e 	beq.w	8017474 <rcl_expand_topic_name+0x1c4>
 8017338:	2b7e      	cmp	r3, #126	; 0x7e
 801733a:	f040 80a2 	bne.w	8017482 <rcl_expand_topic_name+0x1d2>
 801733e:	4638      	mov	r0, r7
 8017340:	f7e8 ff50 	bl	80001e4 <strlen>
 8017344:	4a82      	ldr	r2, [pc, #520]	; (8017550 <rcl_expand_topic_name+0x2a0>)
 8017346:	4b83      	ldr	r3, [pc, #524]	; (8017554 <rcl_expand_topic_name+0x2a4>)
 8017348:	2801      	cmp	r0, #1
 801734a:	bf18      	it	ne
 801734c:	4613      	movne	r3, r2
 801734e:	9302      	str	r3, [sp, #8]
 8017350:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017352:	9300      	str	r3, [sp, #0]
 8017354:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017358:	f108 0301 	add.w	r3, r8, #1
 801735c:	9305      	str	r3, [sp, #20]
 801735e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017362:	9301      	str	r3, [sp, #4]
 8017364:	ab14      	add	r3, sp, #80	; 0x50
 8017366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017368:	f7fd f8da 	bl	8014520 <rcutils_format_string_limit>
 801736c:	4682      	mov	sl, r0
 801736e:	2800      	cmp	r0, #0
 8017370:	f000 80c7 	beq.w	8017502 <rcl_expand_topic_name+0x252>
 8017374:	2d00      	cmp	r5, #0
 8017376:	f000 80a2 	beq.w	80174be <rcl_expand_topic_name+0x20e>
 801737a:	217b      	movs	r1, #123	; 0x7b
 801737c:	f000 ff8a 	bl	8018294 <strchr>
 8017380:	46d1      	mov	r9, sl
 8017382:	4605      	mov	r5, r0
 8017384:	9407      	str	r4, [sp, #28]
 8017386:	46d3      	mov	fp, sl
 8017388:	464c      	mov	r4, r9
 801738a:	2d00      	cmp	r5, #0
 801738c:	f000 80be 	beq.w	801750c <rcl_expand_topic_name+0x25c>
 8017390:	217d      	movs	r1, #125	; 0x7d
 8017392:	4620      	mov	r0, r4
 8017394:	f000 ff7e 	bl	8018294 <strchr>
 8017398:	eba0 0905 	sub.w	r9, r0, r5
 801739c:	f109 0a01 	add.w	sl, r9, #1
 80173a0:	486d      	ldr	r0, [pc, #436]	; (8017558 <rcl_expand_topic_name+0x2a8>)
 80173a2:	4652      	mov	r2, sl
 80173a4:	4629      	mov	r1, r5
 80173a6:	f000 ff82 	bl	80182ae <strncmp>
 80173aa:	2800      	cmp	r0, #0
 80173ac:	d067      	beq.n	801747e <rcl_expand_topic_name+0x1ce>
 80173ae:	486b      	ldr	r0, [pc, #428]	; (801755c <rcl_expand_topic_name+0x2ac>)
 80173b0:	4652      	mov	r2, sl
 80173b2:	4629      	mov	r1, r5
 80173b4:	f000 ff7b 	bl	80182ae <strncmp>
 80173b8:	b130      	cbz	r0, 80173c8 <rcl_expand_topic_name+0x118>
 80173ba:	4869      	ldr	r0, [pc, #420]	; (8017560 <rcl_expand_topic_name+0x2b0>)
 80173bc:	4652      	mov	r2, sl
 80173be:	4629      	mov	r1, r5
 80173c0:	f000 ff75 	bl	80182ae <strncmp>
 80173c4:	2800      	cmp	r0, #0
 80173c6:	d137      	bne.n	8017438 <rcl_expand_topic_name+0x188>
 80173c8:	46b9      	mov	r9, r7
 80173ca:	ab16      	add	r3, sp, #88	; 0x58
 80173cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80173d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80173d4:	ab14      	add	r3, sp, #80	; 0x50
 80173d6:	4628      	mov	r0, r5
 80173d8:	cb0c      	ldmia	r3, {r2, r3}
 80173da:	4651      	mov	r1, sl
 80173dc:	f7fd f9dc 	bl	8014798 <rcutils_strndup>
 80173e0:	4605      	mov	r5, r0
 80173e2:	2800      	cmp	r0, #0
 80173e4:	f000 809c 	beq.w	8017520 <rcl_expand_topic_name+0x270>
 80173e8:	464a      	mov	r2, r9
 80173ea:	4620      	mov	r0, r4
 80173ec:	ab14      	add	r3, sp, #80	; 0x50
 80173ee:	4629      	mov	r1, r5
 80173f0:	f7fd f8d0 	bl	8014594 <rcutils_repl_str>
 80173f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80173f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173f8:	4604      	mov	r4, r0
 80173fa:	4628      	mov	r0, r5
 80173fc:	4798      	blx	r3
 80173fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017400:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017402:	4658      	mov	r0, fp
 8017404:	4798      	blx	r3
 8017406:	2c00      	cmp	r4, #0
 8017408:	d07b      	beq.n	8017502 <rcl_expand_topic_name+0x252>
 801740a:	217b      	movs	r1, #123	; 0x7b
 801740c:	4620      	mov	r0, r4
 801740e:	f000 ff41 	bl	8018294 <strchr>
 8017412:	46a3      	mov	fp, r4
 8017414:	4605      	mov	r5, r0
 8017416:	e7b8      	b.n	801738a <rcl_expand_topic_name+0xda>
 8017418:	240b      	movs	r4, #11
 801741a:	4620      	mov	r0, r4
 801741c:	b00b      	add	sp, #44	; 0x2c
 801741e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017422:	f7fc f935 	bl	8013690 <rcl_convert_rmw_ret_to_rcl_ret>
 8017426:	4604      	mov	r4, r0
 8017428:	e7f7      	b.n	801741a <rcl_expand_topic_name+0x16a>
 801742a:	2467      	movs	r4, #103	; 0x67
 801742c:	4620      	mov	r0, r4
 801742e:	b00b      	add	sp, #44	; 0x2c
 8017430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017434:	24c9      	movs	r4, #201	; 0xc9
 8017436:	e7f0      	b.n	801741a <rcl_expand_topic_name+0x16a>
 8017438:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801743c:	9806      	ldr	r0, [sp, #24]
 801743e:	1c69      	adds	r1, r5, #1
 8017440:	f7fd fac4 	bl	80149cc <rcutils_string_map_getn>
 8017444:	4681      	mov	r9, r0
 8017446:	2800      	cmp	r0, #0
 8017448:	d1bf      	bne.n	80173ca <rcl_expand_topic_name+0x11a>
 801744a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801744c:	aa16      	add	r2, sp, #88	; 0x58
 801744e:	6018      	str	r0, [r3, #0]
 8017450:	ca07      	ldmia	r2, {r0, r1, r2}
 8017452:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017456:	ab14      	add	r3, sp, #80	; 0x50
 8017458:	cb0c      	ldmia	r3, {r2, r3}
 801745a:	4651      	mov	r1, sl
 801745c:	4628      	mov	r0, r5
 801745e:	f7fd f99b 	bl	8014798 <rcutils_strndup>
 8017462:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017466:	4798      	blx	r3
 8017468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801746a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801746c:	4658      	mov	r0, fp
 801746e:	2469      	movs	r4, #105	; 0x69
 8017470:	4798      	blx	r3
 8017472:	e7d2      	b.n	801741a <rcl_expand_topic_name+0x16a>
 8017474:	2800      	cmp	r0, #0
 8017476:	d05b      	beq.n	8017530 <rcl_expand_topic_name+0x280>
 8017478:	46c1      	mov	r9, r8
 801747a:	46a2      	mov	sl, r4
 801747c:	e782      	b.n	8017384 <rcl_expand_topic_name+0xd4>
 801747e:	46b1      	mov	r9, r6
 8017480:	e7a3      	b.n	80173ca <rcl_expand_topic_name+0x11a>
 8017482:	2800      	cmp	r0, #0
 8017484:	d1f8      	bne.n	8017478 <rcl_expand_topic_name+0x1c8>
 8017486:	4638      	mov	r0, r7
 8017488:	f7e8 feac 	bl	80001e4 <strlen>
 801748c:	4a35      	ldr	r2, [pc, #212]	; (8017564 <rcl_expand_topic_name+0x2b4>)
 801748e:	4b36      	ldr	r3, [pc, #216]	; (8017568 <rcl_expand_topic_name+0x2b8>)
 8017490:	f8cd 8010 	str.w	r8, [sp, #16]
 8017494:	2801      	cmp	r0, #1
 8017496:	bf18      	it	ne
 8017498:	4613      	movne	r3, r2
 801749a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801749e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80174a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80174a4:	9703      	str	r7, [sp, #12]
 80174a6:	9200      	str	r2, [sp, #0]
 80174a8:	ab14      	add	r3, sp, #80	; 0x50
 80174aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80174ac:	f7fd f838 	bl	8014520 <rcutils_format_string_limit>
 80174b0:	4682      	mov	sl, r0
 80174b2:	4653      	mov	r3, sl
 80174b4:	b32b      	cbz	r3, 8017502 <rcl_expand_topic_name+0x252>
 80174b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80174b8:	f8c3 a000 	str.w	sl, [r3]
 80174bc:	e7ad      	b.n	801741a <rcl_expand_topic_name+0x16a>
 80174be:	f89a 3000 	ldrb.w	r3, [sl]
 80174c2:	2b2f      	cmp	r3, #47	; 0x2f
 80174c4:	d0f7      	beq.n	80174b6 <rcl_expand_topic_name+0x206>
 80174c6:	4638      	mov	r0, r7
 80174c8:	f7e8 fe8c 	bl	80001e4 <strlen>
 80174cc:	4a25      	ldr	r2, [pc, #148]	; (8017564 <rcl_expand_topic_name+0x2b4>)
 80174ce:	4b26      	ldr	r3, [pc, #152]	; (8017568 <rcl_expand_topic_name+0x2b8>)
 80174d0:	f8cd a010 	str.w	sl, [sp, #16]
 80174d4:	2801      	cmp	r0, #1
 80174d6:	bf18      	it	ne
 80174d8:	4613      	movne	r3, r2
 80174da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80174de:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80174e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80174e4:	9703      	str	r7, [sp, #12]
 80174e6:	9200      	str	r2, [sp, #0]
 80174e8:	ab14      	add	r3, sp, #80	; 0x50
 80174ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80174ec:	f7fd f818 	bl	8014520 <rcutils_format_string_limit>
 80174f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80174f4:	4605      	mov	r5, r0
 80174f6:	4650      	mov	r0, sl
 80174f8:	4798      	blx	r3
 80174fa:	46aa      	mov	sl, r5
 80174fc:	e7d9      	b.n	80174b2 <rcl_expand_topic_name+0x202>
 80174fe:	24ca      	movs	r4, #202	; 0xca
 8017500:	e78b      	b.n	801741a <rcl_expand_topic_name+0x16a>
 8017502:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017504:	2300      	movs	r3, #0
 8017506:	6013      	str	r3, [r2, #0]
 8017508:	240a      	movs	r4, #10
 801750a:	e786      	b.n	801741a <rcl_expand_topic_name+0x16a>
 801750c:	465b      	mov	r3, fp
 801750e:	9c07      	ldr	r4, [sp, #28]
 8017510:	46da      	mov	sl, fp
 8017512:	2b00      	cmp	r3, #0
 8017514:	d1d3      	bne.n	80174be <rcl_expand_topic_name+0x20e>
 8017516:	f898 3000 	ldrb.w	r3, [r8]
 801751a:	2b2f      	cmp	r3, #47	; 0x2f
 801751c:	d0cb      	beq.n	80174b6 <rcl_expand_topic_name+0x206>
 801751e:	e7b2      	b.n	8017486 <rcl_expand_topic_name+0x1d6>
 8017520:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8017524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017526:	6015      	str	r5, [r2, #0]
 8017528:	4658      	mov	r0, fp
 801752a:	4798      	blx	r3
 801752c:	240a      	movs	r4, #10
 801752e:	e774      	b.n	801741a <rcl_expand_topic_name+0x16a>
 8017530:	ab17      	add	r3, sp, #92	; 0x5c
 8017532:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017536:	e88d 0003 	stmia.w	sp, {r0, r1}
 801753a:	ab14      	add	r3, sp, #80	; 0x50
 801753c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801753e:	4640      	mov	r0, r8
 8017540:	f7fd f908 	bl	8014754 <rcutils_strdup>
 8017544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017546:	2800      	cmp	r0, #0
 8017548:	6018      	str	r0, [r3, #0]
 801754a:	bf08      	it	eq
 801754c:	240a      	moveq	r4, #10
 801754e:	e764      	b.n	801741a <rcl_expand_topic_name+0x16a>
 8017550:	08019c10 	.word	0x08019c10
 8017554:	080193f8 	.word	0x080193f8
 8017558:	08019c18 	.word	0x08019c18
 801755c:	08019c20 	.word	0x08019c20
 8017560:	08019c28 	.word	0x08019c28
 8017564:	0801958c 	.word	0x0801958c
 8017568:	08019408 	.word	0x08019408

0801756c <rcl_get_default_topic_name_substitutions>:
 801756c:	2800      	cmp	r0, #0
 801756e:	bf0c      	ite	eq
 8017570:	200b      	moveq	r0, #11
 8017572:	2000      	movne	r0, #0
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop

08017578 <rcl_get_zero_initialized_guard_condition>:
 8017578:	4a03      	ldr	r2, [pc, #12]	; (8017588 <rcl_get_zero_initialized_guard_condition+0x10>)
 801757a:	4603      	mov	r3, r0
 801757c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017580:	e883 0003 	stmia.w	r3, {r0, r1}
 8017584:	4618      	mov	r0, r3
 8017586:	4770      	bx	lr
 8017588:	08019c34 	.word	0x08019c34

0801758c <rcl_guard_condition_init_from_rmw>:
 801758c:	b082      	sub	sp, #8
 801758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017592:	b086      	sub	sp, #24
 8017594:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017598:	4604      	mov	r4, r0
 801759a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801759e:	460e      	mov	r6, r1
 80175a0:	4617      	mov	r7, r2
 80175a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80175a6:	f10d 0e04 	add.w	lr, sp, #4
 80175aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80175ae:	f8dc 3000 	ldr.w	r3, [ip]
 80175b2:	f8ce 3000 	str.w	r3, [lr]
 80175b6:	a801      	add	r0, sp, #4
 80175b8:	f7f7 fe6c 	bl	800f294 <rcutils_allocator_is_valid>
 80175bc:	b350      	cbz	r0, 8017614 <rcl_guard_condition_init_from_rmw+0x88>
 80175be:	b34c      	cbz	r4, 8017614 <rcl_guard_condition_init_from_rmw+0x88>
 80175c0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80175c4:	f1b8 0f00 	cmp.w	r8, #0
 80175c8:	d11e      	bne.n	8017608 <rcl_guard_condition_init_from_rmw+0x7c>
 80175ca:	b31f      	cbz	r7, 8017614 <rcl_guard_condition_init_from_rmw+0x88>
 80175cc:	4638      	mov	r0, r7
 80175ce:	f7fc f87d 	bl	80136cc <rcl_context_is_valid>
 80175d2:	b328      	cbz	r0, 8017620 <rcl_guard_condition_init_from_rmw+0x94>
 80175d4:	9b01      	ldr	r3, [sp, #4]
 80175d6:	9905      	ldr	r1, [sp, #20]
 80175d8:	201c      	movs	r0, #28
 80175da:	4798      	blx	r3
 80175dc:	4605      	mov	r5, r0
 80175de:	6060      	str	r0, [r4, #4]
 80175e0:	b358      	cbz	r0, 801763a <rcl_guard_condition_init_from_rmw+0xae>
 80175e2:	b1fe      	cbz	r6, 8017624 <rcl_guard_condition_init_from_rmw+0x98>
 80175e4:	6006      	str	r6, [r0, #0]
 80175e6:	f880 8004 	strb.w	r8, [r0, #4]
 80175ea:	ac01      	add	r4, sp, #4
 80175ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175ee:	f105 0c08 	add.w	ip, r5, #8
 80175f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175f6:	6823      	ldr	r3, [r4, #0]
 80175f8:	f8cc 3000 	str.w	r3, [ip]
 80175fc:	2000      	movs	r0, #0
 80175fe:	b006      	add	sp, #24
 8017600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017604:	b002      	add	sp, #8
 8017606:	4770      	bx	lr
 8017608:	2064      	movs	r0, #100	; 0x64
 801760a:	b006      	add	sp, #24
 801760c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017610:	b002      	add	sp, #8
 8017612:	4770      	bx	lr
 8017614:	200b      	movs	r0, #11
 8017616:	b006      	add	sp, #24
 8017618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801761c:	b002      	add	sp, #8
 801761e:	4770      	bx	lr
 8017620:	2065      	movs	r0, #101	; 0x65
 8017622:	e7f2      	b.n	801760a <rcl_guard_condition_init_from_rmw+0x7e>
 8017624:	6838      	ldr	r0, [r7, #0]
 8017626:	3028      	adds	r0, #40	; 0x28
 8017628:	f000 fa50 	bl	8017acc <rmw_create_guard_condition>
 801762c:	6028      	str	r0, [r5, #0]
 801762e:	6865      	ldr	r5, [r4, #4]
 8017630:	682e      	ldr	r6, [r5, #0]
 8017632:	b126      	cbz	r6, 801763e <rcl_guard_condition_init_from_rmw+0xb2>
 8017634:	2301      	movs	r3, #1
 8017636:	712b      	strb	r3, [r5, #4]
 8017638:	e7d7      	b.n	80175ea <rcl_guard_condition_init_from_rmw+0x5e>
 801763a:	200a      	movs	r0, #10
 801763c:	e7e5      	b.n	801760a <rcl_guard_condition_init_from_rmw+0x7e>
 801763e:	4628      	mov	r0, r5
 8017640:	9b02      	ldr	r3, [sp, #8]
 8017642:	9905      	ldr	r1, [sp, #20]
 8017644:	4798      	blx	r3
 8017646:	6066      	str	r6, [r4, #4]
 8017648:	2001      	movs	r0, #1
 801764a:	e7de      	b.n	801760a <rcl_guard_condition_init_from_rmw+0x7e>

0801764c <rcl_guard_condition_fini>:
 801764c:	b570      	push	{r4, r5, r6, lr}
 801764e:	b082      	sub	sp, #8
 8017650:	b1f0      	cbz	r0, 8017690 <rcl_guard_condition_fini+0x44>
 8017652:	6843      	ldr	r3, [r0, #4]
 8017654:	4604      	mov	r4, r0
 8017656:	b163      	cbz	r3, 8017672 <rcl_guard_condition_fini+0x26>
 8017658:	6818      	ldr	r0, [r3, #0]
 801765a:	68de      	ldr	r6, [r3, #12]
 801765c:	6999      	ldr	r1, [r3, #24]
 801765e:	b160      	cbz	r0, 801767a <rcl_guard_condition_fini+0x2e>
 8017660:	791d      	ldrb	r5, [r3, #4]
 8017662:	b965      	cbnz	r5, 801767e <rcl_guard_condition_fini+0x32>
 8017664:	4618      	mov	r0, r3
 8017666:	47b0      	blx	r6
 8017668:	2300      	movs	r3, #0
 801766a:	4628      	mov	r0, r5
 801766c:	6063      	str	r3, [r4, #4]
 801766e:	b002      	add	sp, #8
 8017670:	bd70      	pop	{r4, r5, r6, pc}
 8017672:	461d      	mov	r5, r3
 8017674:	4628      	mov	r0, r5
 8017676:	b002      	add	sp, #8
 8017678:	bd70      	pop	{r4, r5, r6, pc}
 801767a:	4605      	mov	r5, r0
 801767c:	e7f2      	b.n	8017664 <rcl_guard_condition_fini+0x18>
 801767e:	9101      	str	r1, [sp, #4]
 8017680:	f000 fa38 	bl	8017af4 <rmw_destroy_guard_condition>
 8017684:	1e05      	subs	r5, r0, #0
 8017686:	6863      	ldr	r3, [r4, #4]
 8017688:	9901      	ldr	r1, [sp, #4]
 801768a:	bf18      	it	ne
 801768c:	2501      	movne	r5, #1
 801768e:	e7e9      	b.n	8017664 <rcl_guard_condition_fini+0x18>
 8017690:	250b      	movs	r5, #11
 8017692:	4628      	mov	r0, r5
 8017694:	b002      	add	sp, #8
 8017696:	bd70      	pop	{r4, r5, r6, pc}

08017698 <rcl_guard_condition_get_default_options>:
 8017698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801769a:	b087      	sub	sp, #28
 801769c:	4606      	mov	r6, r0
 801769e:	4668      	mov	r0, sp
 80176a0:	f7f7 fdea 	bl	800f278 <rcutils_get_default_allocator>
 80176a4:	4b09      	ldr	r3, [pc, #36]	; (80176cc <rcl_guard_condition_get_default_options+0x34>)
 80176a6:	46ee      	mov	lr, sp
 80176a8:	469c      	mov	ip, r3
 80176aa:	461d      	mov	r5, r3
 80176ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80176b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80176b6:	4634      	mov	r4, r6
 80176b8:	f8de 7000 	ldr.w	r7, [lr]
 80176bc:	f8cc 7000 	str.w	r7, [ip]
 80176c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80176c2:	4630      	mov	r0, r6
 80176c4:	6027      	str	r7, [r4, #0]
 80176c6:	b007      	add	sp, #28
 80176c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ca:	bf00      	nop
 80176cc:	2000e364 	.word	0x2000e364

080176d0 <rcl_validate_topic_name>:
 80176d0:	2800      	cmp	r0, #0
 80176d2:	d07a      	beq.n	80177ca <rcl_validate_topic_name+0xfa>
 80176d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176d8:	460e      	mov	r6, r1
 80176da:	2900      	cmp	r1, #0
 80176dc:	d07c      	beq.n	80177d8 <rcl_validate_topic_name+0x108>
 80176de:	4617      	mov	r7, r2
 80176e0:	4605      	mov	r5, r0
 80176e2:	f7e8 fd7f 	bl	80001e4 <strlen>
 80176e6:	b1b0      	cbz	r0, 8017716 <rcl_validate_topic_name+0x46>
 80176e8:	f895 9000 	ldrb.w	r9, [r5]
 80176ec:	f8df c180 	ldr.w	ip, [pc, #384]	; 8017870 <rcl_validate_topic_name+0x1a0>
 80176f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80176f4:	f013 0304 	ands.w	r3, r3, #4
 80176f8:	d169      	bne.n	80177ce <rcl_validate_topic_name+0xfe>
 80176fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80176fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017702:	2a2f      	cmp	r2, #47	; 0x2f
 8017704:	d10e      	bne.n	8017724 <rcl_validate_topic_name+0x54>
 8017706:	2202      	movs	r2, #2
 8017708:	6032      	str	r2, [r6, #0]
 801770a:	b36f      	cbz	r7, 8017768 <rcl_validate_topic_name+0x98>
 801770c:	f8c7 8000 	str.w	r8, [r7]
 8017710:	4618      	mov	r0, r3
 8017712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017716:	2301      	movs	r3, #1
 8017718:	6033      	str	r3, [r6, #0]
 801771a:	b32f      	cbz	r7, 8017768 <rcl_validate_topic_name+0x98>
 801771c:	2000      	movs	r0, #0
 801771e:	6038      	str	r0, [r7, #0]
 8017720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017724:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8017728:	461c      	mov	r4, r3
 801772a:	4619      	mov	r1, r3
 801772c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017730:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017734:	f1be 0f09 	cmp.w	lr, #9
 8017738:	d919      	bls.n	801776e <rcl_validate_topic_name+0x9e>
 801773a:	f022 0e20 	bic.w	lr, r2, #32
 801773e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8017742:	f1be 0f19 	cmp.w	lr, #25
 8017746:	d912      	bls.n	801776e <rcl_validate_topic_name+0x9e>
 8017748:	2a5f      	cmp	r2, #95	; 0x5f
 801774a:	d019      	beq.n	8017780 <rcl_validate_topic_name+0xb0>
 801774c:	2a2f      	cmp	r2, #47	; 0x2f
 801774e:	d051      	beq.n	80177f4 <rcl_validate_topic_name+0x124>
 8017750:	2a7e      	cmp	r2, #126	; 0x7e
 8017752:	d048      	beq.n	80177e6 <rcl_validate_topic_name+0x116>
 8017754:	2a7b      	cmp	r2, #123	; 0x7b
 8017756:	d054      	beq.n	8017802 <rcl_validate_topic_name+0x132>
 8017758:	2a7d      	cmp	r2, #125	; 0x7d
 801775a:	d161      	bne.n	8017820 <rcl_validate_topic_name+0x150>
 801775c:	2c00      	cmp	r4, #0
 801775e:	d155      	bne.n	801780c <rcl_validate_topic_name+0x13c>
 8017760:	2305      	movs	r3, #5
 8017762:	6033      	str	r3, [r6, #0]
 8017764:	b107      	cbz	r7, 8017768 <rcl_validate_topic_name+0x98>
 8017766:	6039      	str	r1, [r7, #0]
 8017768:	2000      	movs	r0, #0
 801776a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801776e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017772:	0752      	lsls	r2, r2, #29
 8017774:	d504      	bpl.n	8017780 <rcl_validate_topic_name+0xb0>
 8017776:	b11c      	cbz	r4, 8017780 <rcl_validate_topic_name+0xb0>
 8017778:	b111      	cbz	r1, 8017780 <rcl_validate_topic_name+0xb0>
 801777a:	1e4a      	subs	r2, r1, #1
 801777c:	429a      	cmp	r2, r3
 801777e:	d02d      	beq.n	80177dc <rcl_validate_topic_name+0x10c>
 8017780:	3101      	adds	r1, #1
 8017782:	4288      	cmp	r0, r1
 8017784:	d1d2      	bne.n	801772c <rcl_validate_topic_name+0x5c>
 8017786:	2c00      	cmp	r4, #0
 8017788:	d145      	bne.n	8017816 <rcl_validate_topic_name+0x146>
 801778a:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801778e:	d04f      	beq.n	8017830 <rcl_validate_topic_name+0x160>
 8017790:	4620      	mov	r0, r4
 8017792:	2301      	movs	r3, #1
 8017794:	e006      	b.n	80177a4 <rcl_validate_topic_name+0xd4>
 8017796:	428b      	cmp	r3, r1
 8017798:	f105 0501 	add.w	r5, r5, #1
 801779c:	f103 0201 	add.w	r2, r3, #1
 80177a0:	d236      	bcs.n	8017810 <rcl_validate_topic_name+0x140>
 80177a2:	4613      	mov	r3, r2
 80177a4:	4580      	cmp	r8, r0
 80177a6:	f100 0001 	add.w	r0, r0, #1
 80177aa:	d0f4      	beq.n	8017796 <rcl_validate_topic_name+0xc6>
 80177ac:	782a      	ldrb	r2, [r5, #0]
 80177ae:	2a2f      	cmp	r2, #47	; 0x2f
 80177b0:	d1f1      	bne.n	8017796 <rcl_validate_topic_name+0xc6>
 80177b2:	786a      	ldrb	r2, [r5, #1]
 80177b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80177b8:	0754      	lsls	r4, r2, #29
 80177ba:	d5ec      	bpl.n	8017796 <rcl_validate_topic_name+0xc6>
 80177bc:	2204      	movs	r2, #4
 80177be:	6032      	str	r2, [r6, #0]
 80177c0:	2f00      	cmp	r7, #0
 80177c2:	d0d1      	beq.n	8017768 <rcl_validate_topic_name+0x98>
 80177c4:	603b      	str	r3, [r7, #0]
 80177c6:	2000      	movs	r0, #0
 80177c8:	e7aa      	b.n	8017720 <rcl_validate_topic_name+0x50>
 80177ca:	200b      	movs	r0, #11
 80177cc:	4770      	bx	lr
 80177ce:	2304      	movs	r3, #4
 80177d0:	6033      	str	r3, [r6, #0]
 80177d2:	2f00      	cmp	r7, #0
 80177d4:	d1a2      	bne.n	801771c <rcl_validate_topic_name+0x4c>
 80177d6:	e7c7      	b.n	8017768 <rcl_validate_topic_name+0x98>
 80177d8:	200b      	movs	r0, #11
 80177da:	e7a1      	b.n	8017720 <rcl_validate_topic_name+0x50>
 80177dc:	2309      	movs	r3, #9
 80177de:	6033      	str	r3, [r6, #0]
 80177e0:	2f00      	cmp	r7, #0
 80177e2:	d1c0      	bne.n	8017766 <rcl_validate_topic_name+0x96>
 80177e4:	e7c0      	b.n	8017768 <rcl_validate_topic_name+0x98>
 80177e6:	2900      	cmp	r1, #0
 80177e8:	d0ca      	beq.n	8017780 <rcl_validate_topic_name+0xb0>
 80177ea:	2306      	movs	r3, #6
 80177ec:	6033      	str	r3, [r6, #0]
 80177ee:	2f00      	cmp	r7, #0
 80177f0:	d1b9      	bne.n	8017766 <rcl_validate_topic_name+0x96>
 80177f2:	e7b9      	b.n	8017768 <rcl_validate_topic_name+0x98>
 80177f4:	2c00      	cmp	r4, #0
 80177f6:	d0c3      	beq.n	8017780 <rcl_validate_topic_name+0xb0>
 80177f8:	2308      	movs	r3, #8
 80177fa:	6033      	str	r3, [r6, #0]
 80177fc:	2f00      	cmp	r7, #0
 80177fe:	d1b2      	bne.n	8017766 <rcl_validate_topic_name+0x96>
 8017800:	e7b2      	b.n	8017768 <rcl_validate_topic_name+0x98>
 8017802:	2c00      	cmp	r4, #0
 8017804:	d1f8      	bne.n	80177f8 <rcl_validate_topic_name+0x128>
 8017806:	460b      	mov	r3, r1
 8017808:	2401      	movs	r4, #1
 801780a:	e7b9      	b.n	8017780 <rcl_validate_topic_name+0xb0>
 801780c:	2400      	movs	r4, #0
 801780e:	e7b7      	b.n	8017780 <rcl_validate_topic_name+0xb0>
 8017810:	2000      	movs	r0, #0
 8017812:	6030      	str	r0, [r6, #0]
 8017814:	e784      	b.n	8017720 <rcl_validate_topic_name+0x50>
 8017816:	2205      	movs	r2, #5
 8017818:	6032      	str	r2, [r6, #0]
 801781a:	2f00      	cmp	r7, #0
 801781c:	d1d2      	bne.n	80177c4 <rcl_validate_topic_name+0xf4>
 801781e:	e7a3      	b.n	8017768 <rcl_validate_topic_name+0x98>
 8017820:	2c00      	cmp	r4, #0
 8017822:	bf14      	ite	ne
 8017824:	2308      	movne	r3, #8
 8017826:	2303      	moveq	r3, #3
 8017828:	6033      	str	r3, [r6, #0]
 801782a:	2f00      	cmp	r7, #0
 801782c:	d19b      	bne.n	8017766 <rcl_validate_topic_name+0x96>
 801782e:	e79b      	b.n	8017768 <rcl_validate_topic_name+0x98>
 8017830:	2301      	movs	r3, #1
 8017832:	e00a      	b.n	801784a <rcl_validate_topic_name+0x17a>
 8017834:	2c01      	cmp	r4, #1
 8017836:	d013      	beq.n	8017860 <rcl_validate_topic_name+0x190>
 8017838:	4299      	cmp	r1, r3
 801783a:	f104 0401 	add.w	r4, r4, #1
 801783e:	f105 0501 	add.w	r5, r5, #1
 8017842:	f103 0201 	add.w	r2, r3, #1
 8017846:	d9e3      	bls.n	8017810 <rcl_validate_topic_name+0x140>
 8017848:	4613      	mov	r3, r2
 801784a:	45a0      	cmp	r8, r4
 801784c:	d0f4      	beq.n	8017838 <rcl_validate_topic_name+0x168>
 801784e:	782a      	ldrb	r2, [r5, #0]
 8017850:	2a2f      	cmp	r2, #47	; 0x2f
 8017852:	d1ef      	bne.n	8017834 <rcl_validate_topic_name+0x164>
 8017854:	786a      	ldrb	r2, [r5, #1]
 8017856:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801785a:	0752      	lsls	r2, r2, #29
 801785c:	d5ec      	bpl.n	8017838 <rcl_validate_topic_name+0x168>
 801785e:	e7ad      	b.n	80177bc <rcl_validate_topic_name+0xec>
 8017860:	2307      	movs	r3, #7
 8017862:	6033      	str	r3, [r6, #0]
 8017864:	2f00      	cmp	r7, #0
 8017866:	f43f af7f 	beq.w	8017768 <rcl_validate_topic_name+0x98>
 801786a:	603c      	str	r4, [r7, #0]
 801786c:	2000      	movs	r0, #0
 801786e:	e757      	b.n	8017720 <rcl_validate_topic_name+0x50>
 8017870:	08019cac 	.word	0x08019cac

08017874 <on_status>:
 8017874:	b082      	sub	sp, #8
 8017876:	b002      	add	sp, #8
 8017878:	4770      	bx	lr
 801787a:	bf00      	nop

0801787c <on_topic>:
 801787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017880:	4a22      	ldr	r2, [pc, #136]	; (801790c <on_topic+0x90>)
 8017882:	b094      	sub	sp, #80	; 0x50
 8017884:	6812      	ldr	r2, [r2, #0]
 8017886:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8017888:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801788c:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8017890:	b3c2      	cbz	r2, 8017904 <on_topic+0x88>
 8017892:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8017896:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801789a:	e001      	b.n	80178a0 <on_topic+0x24>
 801789c:	6852      	ldr	r2, [r2, #4]
 801789e:	b38a      	cbz	r2, 8017904 <on_topic+0x88>
 80178a0:	6894      	ldr	r4, [r2, #8]
 80178a2:	8aa3      	ldrh	r3, [r4, #20]
 80178a4:	428b      	cmp	r3, r1
 80178a6:	d1f9      	bne.n	801789c <on_topic+0x20>
 80178a8:	7da3      	ldrb	r3, [r4, #22]
 80178aa:	4283      	cmp	r3, r0
 80178ac:	d1f6      	bne.n	801789c <on_topic+0x20>
 80178ae:	2248      	movs	r2, #72	; 0x48
 80178b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80178b4:	4668      	mov	r0, sp
 80178b6:	f000 fdad 	bl	8018414 <memcpy>
 80178ba:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80178be:	cb0c      	ldmia	r3, {r2, r3}
 80178c0:	4620      	mov	r0, r4
 80178c2:	f7f8 f8c9 	bl	800fa58 <rmw_uxrce_get_static_input_buffer_for_entity>
 80178c6:	4607      	mov	r7, r0
 80178c8:	b1e0      	cbz	r0, 8017904 <on_topic+0x88>
 80178ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80178ce:	4632      	mov	r2, r6
 80178d0:	4628      	mov	r0, r5
 80178d2:	f108 0110 	add.w	r1, r8, #16
 80178d6:	f7fe f831 	bl	801593c <ucdr_deserialize_array_uint8_t>
 80178da:	b930      	cbnz	r0, 80178ea <on_topic+0x6e>
 80178dc:	480c      	ldr	r0, [pc, #48]	; (8017910 <on_topic+0x94>)
 80178de:	4639      	mov	r1, r7
 80178e0:	b014      	add	sp, #80	; 0x50
 80178e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178e6:	f7fd ba63 	b.w	8014db0 <put_memory>
 80178ea:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80178ee:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80178f2:	f7fd ff19 	bl	8015728 <rmw_uros_epoch_nanos>
 80178f6:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80178fa:	2305      	movs	r3, #5
 80178fc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017900:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017904:	b014      	add	sp, #80	; 0x50
 8017906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801790a:	bf00      	nop
 801790c:	2000e234 	.word	0x2000e234
 8017910:	2000e224 	.word	0x2000e224

08017914 <on_request>:
 8017914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017918:	4823      	ldr	r0, [pc, #140]	; (80179a8 <on_request+0x94>)
 801791a:	b094      	sub	sp, #80	; 0x50
 801791c:	6800      	ldr	r0, [r0, #0]
 801791e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8017920:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8017924:	9113      	str	r1, [sp, #76]	; 0x4c
 8017926:	2800      	cmp	r0, #0
 8017928:	d03b      	beq.n	80179a2 <on_request+0x8e>
 801792a:	461d      	mov	r5, r3
 801792c:	e001      	b.n	8017932 <on_request+0x1e>
 801792e:	6840      	ldr	r0, [r0, #4]
 8017930:	b3b8      	cbz	r0, 80179a2 <on_request+0x8e>
 8017932:	6884      	ldr	r4, [r0, #8]
 8017934:	8b21      	ldrh	r1, [r4, #24]
 8017936:	4291      	cmp	r1, r2
 8017938:	d1f9      	bne.n	801792e <on_request+0x1a>
 801793a:	2248      	movs	r2, #72	; 0x48
 801793c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017940:	4668      	mov	r0, sp
 8017942:	f000 fd67 	bl	8018414 <memcpy>
 8017946:	f104 0320 	add.w	r3, r4, #32
 801794a:	cb0c      	ldmia	r3, {r2, r3}
 801794c:	4620      	mov	r0, r4
 801794e:	f7f8 f883 	bl	800fa58 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017952:	4680      	mov	r8, r0
 8017954:	b328      	cbz	r0, 80179a2 <on_request+0x8e>
 8017956:	4638      	mov	r0, r7
 8017958:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801795c:	4632      	mov	r2, r6
 801795e:	f107 0110 	add.w	r1, r7, #16
 8017962:	f7fd ffeb 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8017966:	b930      	cbnz	r0, 8017976 <on_request+0x62>
 8017968:	4810      	ldr	r0, [pc, #64]	; (80179ac <on_request+0x98>)
 801796a:	4641      	mov	r1, r8
 801796c:	b014      	add	sp, #80	; 0x50
 801796e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017972:	f7fd ba1d 	b.w	8014db0 <put_memory>
 8017976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017978:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 801797c:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8017980:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8017984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017988:	e895 0003 	ldmia.w	r5, {r0, r1}
 801798c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017990:	f7fd feca 	bl	8015728 <rmw_uros_epoch_nanos>
 8017994:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8017998:	2303      	movs	r3, #3
 801799a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801799e:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80179a2:	b014      	add	sp, #80	; 0x50
 80179a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a8:	2000e204 	.word	0x2000e204
 80179ac:	2000e224 	.word	0x2000e224

080179b0 <on_reply>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4821      	ldr	r0, [pc, #132]	; (8017a3c <on_reply+0x8c>)
 80179b6:	b094      	sub	sp, #80	; 0x50
 80179b8:	6800      	ldr	r0, [r0, #0]
 80179ba:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80179bc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80179c0:	9113      	str	r1, [sp, #76]	; 0x4c
 80179c2:	b3b8      	cbz	r0, 8017a34 <on_reply+0x84>
 80179c4:	461d      	mov	r5, r3
 80179c6:	e001      	b.n	80179cc <on_reply+0x1c>
 80179c8:	6840      	ldr	r0, [r0, #4]
 80179ca:	b398      	cbz	r0, 8017a34 <on_reply+0x84>
 80179cc:	6884      	ldr	r4, [r0, #8]
 80179ce:	8b21      	ldrh	r1, [r4, #24]
 80179d0:	4291      	cmp	r1, r2
 80179d2:	d1f9      	bne.n	80179c8 <on_reply+0x18>
 80179d4:	2248      	movs	r2, #72	; 0x48
 80179d6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80179da:	4668      	mov	r0, sp
 80179dc:	f000 fd1a 	bl	8018414 <memcpy>
 80179e0:	f104 0320 	add.w	r3, r4, #32
 80179e4:	cb0c      	ldmia	r3, {r2, r3}
 80179e6:	4620      	mov	r0, r4
 80179e8:	f7f8 f836 	bl	800fa58 <rmw_uxrce_get_static_input_buffer_for_entity>
 80179ec:	4680      	mov	r8, r0
 80179ee:	b308      	cbz	r0, 8017a34 <on_reply+0x84>
 80179f0:	4638      	mov	r0, r7
 80179f2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80179f6:	4632      	mov	r2, r6
 80179f8:	f107 0110 	add.w	r1, r7, #16
 80179fc:	f7fd ff9e 	bl	801593c <ucdr_deserialize_array_uint8_t>
 8017a00:	b930      	cbnz	r0, 8017a10 <on_reply+0x60>
 8017a02:	480f      	ldr	r0, [pc, #60]	; (8017a40 <on_reply+0x90>)
 8017a04:	4641      	mov	r1, r8
 8017a06:	b014      	add	sp, #80	; 0x50
 8017a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0c:	f7fd b9d0 	b.w	8014db0 <put_memory>
 8017a10:	2200      	movs	r2, #0
 8017a12:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8017a16:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8017a1a:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8017a1e:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8017a22:	f7fd fe81 	bl	8015728 <rmw_uros_epoch_nanos>
 8017a26:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8017a2a:	2304      	movs	r3, #4
 8017a2c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017a30:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8017a34:	b014      	add	sp, #80	; 0x50
 8017a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a3a:	bf00      	nop
 8017a3c:	20009918 	.word	0x20009918
 8017a40:	2000e224 	.word	0x2000e224

08017a44 <rmw_destroy_client>:
 8017a44:	b570      	push	{r4, r5, r6, lr}
 8017a46:	b128      	cbz	r0, 8017a54 <rmw_destroy_client+0x10>
 8017a48:	4604      	mov	r4, r0
 8017a4a:	6800      	ldr	r0, [r0, #0]
 8017a4c:	460d      	mov	r5, r1
 8017a4e:	f7f8 f8d3 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 8017a52:	b910      	cbnz	r0, 8017a5a <rmw_destroy_client+0x16>
 8017a54:	2401      	movs	r4, #1
 8017a56:	4620      	mov	r0, r4
 8017a58:	bd70      	pop	{r4, r5, r6, pc}
 8017a5a:	6863      	ldr	r3, [r4, #4]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d0f9      	beq.n	8017a54 <rmw_destroy_client+0x10>
 8017a60:	2d00      	cmp	r5, #0
 8017a62:	d0f7      	beq.n	8017a54 <rmw_destroy_client+0x10>
 8017a64:	6828      	ldr	r0, [r5, #0]
 8017a66:	f7f8 f8c7 	bl	800fbf8 <is_uxrce_rmw_identifier_valid>
 8017a6a:	2800      	cmp	r0, #0
 8017a6c:	d0f2      	beq.n	8017a54 <rmw_destroy_client+0x10>
 8017a6e:	686e      	ldr	r6, [r5, #4]
 8017a70:	2e00      	cmp	r6, #0
 8017a72:	d0ef      	beq.n	8017a54 <rmw_destroy_client+0x10>
 8017a74:	6864      	ldr	r4, [r4, #4]
 8017a76:	6932      	ldr	r2, [r6, #16]
 8017a78:	6920      	ldr	r0, [r4, #16]
 8017a7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017a7e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a82:	6819      	ldr	r1, [r3, #0]
 8017a84:	f7fe fe38 	bl	80166f8 <uxr_buffer_cancel_data>
 8017a88:	4602      	mov	r2, r0
 8017a8a:	6920      	ldr	r0, [r4, #16]
 8017a8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017a90:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017a94:	f7f8 f830 	bl	800faf8 <run_xrce_session>
 8017a98:	6920      	ldr	r0, [r4, #16]
 8017a9a:	6932      	ldr	r2, [r6, #16]
 8017a9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017aa0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017aa4:	6819      	ldr	r1, [r3, #0]
 8017aa6:	f7f9 f963 	bl	8010d70 <uxr_buffer_delete_entity>
 8017aaa:	4602      	mov	r2, r0
 8017aac:	6920      	ldr	r0, [r4, #16]
 8017aae:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017ab2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017ab6:	f7f8 f81f 	bl	800faf8 <run_xrce_session>
 8017aba:	2800      	cmp	r0, #0
 8017abc:	4628      	mov	r0, r5
 8017abe:	bf14      	ite	ne
 8017ac0:	2400      	movne	r4, #0
 8017ac2:	2402      	moveq	r4, #2
 8017ac4:	f7f7 ffa6 	bl	800fa14 <rmw_uxrce_fini_client_memory>
 8017ac8:	e7c5      	b.n	8017a56 <rmw_destroy_client+0x12>
 8017aca:	bf00      	nop

08017acc <rmw_create_guard_condition>:
 8017acc:	b538      	push	{r3, r4, r5, lr}
 8017ace:	4605      	mov	r5, r0
 8017ad0:	4807      	ldr	r0, [pc, #28]	; (8017af0 <rmw_create_guard_condition+0x24>)
 8017ad2:	f7fd f95d 	bl	8014d90 <get_memory>
 8017ad6:	b148      	cbz	r0, 8017aec <rmw_create_guard_condition+0x20>
 8017ad8:	6884      	ldr	r4, [r0, #8]
 8017ada:	2300      	movs	r3, #0
 8017adc:	7423      	strb	r3, [r4, #16]
 8017ade:	61e5      	str	r5, [r4, #28]
 8017ae0:	f7fd f97a 	bl	8014dd8 <rmw_get_implementation_identifier>
 8017ae4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017ae8:	f104 0014 	add.w	r0, r4, #20
 8017aec:	bd38      	pop	{r3, r4, r5, pc}
 8017aee:	bf00      	nop
 8017af0:	2000e1c4 	.word	0x2000e1c4

08017af4 <rmw_destroy_guard_condition>:
 8017af4:	b508      	push	{r3, lr}
 8017af6:	4b08      	ldr	r3, [pc, #32]	; (8017b18 <rmw_destroy_guard_condition+0x24>)
 8017af8:	6819      	ldr	r1, [r3, #0]
 8017afa:	b911      	cbnz	r1, 8017b02 <rmw_destroy_guard_condition+0xe>
 8017afc:	e00a      	b.n	8017b14 <rmw_destroy_guard_condition+0x20>
 8017afe:	6849      	ldr	r1, [r1, #4]
 8017b00:	b141      	cbz	r1, 8017b14 <rmw_destroy_guard_condition+0x20>
 8017b02:	688b      	ldr	r3, [r1, #8]
 8017b04:	3314      	adds	r3, #20
 8017b06:	4298      	cmp	r0, r3
 8017b08:	d1f9      	bne.n	8017afe <rmw_destroy_guard_condition+0xa>
 8017b0a:	4803      	ldr	r0, [pc, #12]	; (8017b18 <rmw_destroy_guard_condition+0x24>)
 8017b0c:	f7fd f950 	bl	8014db0 <put_memory>
 8017b10:	2000      	movs	r0, #0
 8017b12:	bd08      	pop	{r3, pc}
 8017b14:	2001      	movs	r0, #1
 8017b16:	bd08      	pop	{r3, pc}
 8017b18:	2000e1c4 	.word	0x2000e1c4

08017b1c <calloc>:
 8017b1c:	4b02      	ldr	r3, [pc, #8]	; (8017b28 <calloc+0xc>)
 8017b1e:	460a      	mov	r2, r1
 8017b20:	4601      	mov	r1, r0
 8017b22:	6818      	ldr	r0, [r3, #0]
 8017b24:	f000 b802 	b.w	8017b2c <_calloc_r>
 8017b28:	2000012c 	.word	0x2000012c

08017b2c <_calloc_r>:
 8017b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b2e:	fba1 2402 	umull	r2, r4, r1, r2
 8017b32:	b94c      	cbnz	r4, 8017b48 <_calloc_r+0x1c>
 8017b34:	4611      	mov	r1, r2
 8017b36:	9201      	str	r2, [sp, #4]
 8017b38:	f000 f886 	bl	8017c48 <_malloc_r>
 8017b3c:	9a01      	ldr	r2, [sp, #4]
 8017b3e:	4605      	mov	r5, r0
 8017b40:	b930      	cbnz	r0, 8017b50 <_calloc_r+0x24>
 8017b42:	4628      	mov	r0, r5
 8017b44:	b003      	add	sp, #12
 8017b46:	bd30      	pop	{r4, r5, pc}
 8017b48:	220c      	movs	r2, #12
 8017b4a:	6002      	str	r2, [r0, #0]
 8017b4c:	2500      	movs	r5, #0
 8017b4e:	e7f8      	b.n	8017b42 <_calloc_r+0x16>
 8017b50:	4621      	mov	r1, r4
 8017b52:	f000 fb97 	bl	8018284 <memset>
 8017b56:	e7f4      	b.n	8017b42 <_calloc_r+0x16>

08017b58 <getenv>:
 8017b58:	b507      	push	{r0, r1, r2, lr}
 8017b5a:	4b04      	ldr	r3, [pc, #16]	; (8017b6c <getenv+0x14>)
 8017b5c:	4601      	mov	r1, r0
 8017b5e:	aa01      	add	r2, sp, #4
 8017b60:	6818      	ldr	r0, [r3, #0]
 8017b62:	f000 f805 	bl	8017b70 <_findenv_r>
 8017b66:	b003      	add	sp, #12
 8017b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b6c:	2000012c 	.word	0x2000012c

08017b70 <_findenv_r>:
 8017b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b74:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8017be4 <_findenv_r+0x74>
 8017b78:	4607      	mov	r7, r0
 8017b7a:	4689      	mov	r9, r1
 8017b7c:	4616      	mov	r6, r2
 8017b7e:	f000 fc75 	bl	801846c <__env_lock>
 8017b82:	f8da 4000 	ldr.w	r4, [sl]
 8017b86:	b134      	cbz	r4, 8017b96 <_findenv_r+0x26>
 8017b88:	464b      	mov	r3, r9
 8017b8a:	4698      	mov	r8, r3
 8017b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b90:	b13a      	cbz	r2, 8017ba2 <_findenv_r+0x32>
 8017b92:	2a3d      	cmp	r2, #61	; 0x3d
 8017b94:	d1f9      	bne.n	8017b8a <_findenv_r+0x1a>
 8017b96:	4638      	mov	r0, r7
 8017b98:	f000 fc6e 	bl	8018478 <__env_unlock>
 8017b9c:	2000      	movs	r0, #0
 8017b9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba2:	eba8 0809 	sub.w	r8, r8, r9
 8017ba6:	46a3      	mov	fp, r4
 8017ba8:	f854 0b04 	ldr.w	r0, [r4], #4
 8017bac:	2800      	cmp	r0, #0
 8017bae:	d0f2      	beq.n	8017b96 <_findenv_r+0x26>
 8017bb0:	4642      	mov	r2, r8
 8017bb2:	4649      	mov	r1, r9
 8017bb4:	f000 fb7b 	bl	80182ae <strncmp>
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	d1f4      	bne.n	8017ba6 <_findenv_r+0x36>
 8017bbc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017bc0:	eb03 0508 	add.w	r5, r3, r8
 8017bc4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017bc8:	2b3d      	cmp	r3, #61	; 0x3d
 8017bca:	d1ec      	bne.n	8017ba6 <_findenv_r+0x36>
 8017bcc:	f8da 3000 	ldr.w	r3, [sl]
 8017bd0:	ebab 0303 	sub.w	r3, fp, r3
 8017bd4:	109b      	asrs	r3, r3, #2
 8017bd6:	4638      	mov	r0, r7
 8017bd8:	6033      	str	r3, [r6, #0]
 8017bda:	f000 fc4d 	bl	8018478 <__env_unlock>
 8017bde:	1c68      	adds	r0, r5, #1
 8017be0:	e7dd      	b.n	8017b9e <_findenv_r+0x2e>
 8017be2:	bf00      	nop
 8017be4:	20000000 	.word	0x20000000

08017be8 <malloc>:
 8017be8:	4b02      	ldr	r3, [pc, #8]	; (8017bf4 <malloc+0xc>)
 8017bea:	4601      	mov	r1, r0
 8017bec:	6818      	ldr	r0, [r3, #0]
 8017bee:	f000 b82b 	b.w	8017c48 <_malloc_r>
 8017bf2:	bf00      	nop
 8017bf4:	2000012c 	.word	0x2000012c

08017bf8 <free>:
 8017bf8:	4b02      	ldr	r3, [pc, #8]	; (8017c04 <free+0xc>)
 8017bfa:	4601      	mov	r1, r0
 8017bfc:	6818      	ldr	r0, [r3, #0]
 8017bfe:	f000 bc41 	b.w	8018484 <_free_r>
 8017c02:	bf00      	nop
 8017c04:	2000012c 	.word	0x2000012c

08017c08 <sbrk_aligned>:
 8017c08:	b570      	push	{r4, r5, r6, lr}
 8017c0a:	4e0e      	ldr	r6, [pc, #56]	; (8017c44 <sbrk_aligned+0x3c>)
 8017c0c:	460c      	mov	r4, r1
 8017c0e:	6831      	ldr	r1, [r6, #0]
 8017c10:	4605      	mov	r5, r0
 8017c12:	b911      	cbnz	r1, 8017c1a <sbrk_aligned+0x12>
 8017c14:	f000 fba8 	bl	8018368 <_sbrk_r>
 8017c18:	6030      	str	r0, [r6, #0]
 8017c1a:	4621      	mov	r1, r4
 8017c1c:	4628      	mov	r0, r5
 8017c1e:	f000 fba3 	bl	8018368 <_sbrk_r>
 8017c22:	1c43      	adds	r3, r0, #1
 8017c24:	d00a      	beq.n	8017c3c <sbrk_aligned+0x34>
 8017c26:	1cc4      	adds	r4, r0, #3
 8017c28:	f024 0403 	bic.w	r4, r4, #3
 8017c2c:	42a0      	cmp	r0, r4
 8017c2e:	d007      	beq.n	8017c40 <sbrk_aligned+0x38>
 8017c30:	1a21      	subs	r1, r4, r0
 8017c32:	4628      	mov	r0, r5
 8017c34:	f000 fb98 	bl	8018368 <_sbrk_r>
 8017c38:	3001      	adds	r0, #1
 8017c3a:	d101      	bne.n	8017c40 <sbrk_aligned+0x38>
 8017c3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017c40:	4620      	mov	r0, r4
 8017c42:	bd70      	pop	{r4, r5, r6, pc}
 8017c44:	2000e37c 	.word	0x2000e37c

08017c48 <_malloc_r>:
 8017c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c4c:	1ccd      	adds	r5, r1, #3
 8017c4e:	f025 0503 	bic.w	r5, r5, #3
 8017c52:	3508      	adds	r5, #8
 8017c54:	2d0c      	cmp	r5, #12
 8017c56:	bf38      	it	cc
 8017c58:	250c      	movcc	r5, #12
 8017c5a:	2d00      	cmp	r5, #0
 8017c5c:	4607      	mov	r7, r0
 8017c5e:	db01      	blt.n	8017c64 <_malloc_r+0x1c>
 8017c60:	42a9      	cmp	r1, r5
 8017c62:	d905      	bls.n	8017c70 <_malloc_r+0x28>
 8017c64:	230c      	movs	r3, #12
 8017c66:	603b      	str	r3, [r7, #0]
 8017c68:	2600      	movs	r6, #0
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017d44 <_malloc_r+0xfc>
 8017c74:	f000 f868 	bl	8017d48 <__malloc_lock>
 8017c78:	f8d8 3000 	ldr.w	r3, [r8]
 8017c7c:	461c      	mov	r4, r3
 8017c7e:	bb5c      	cbnz	r4, 8017cd8 <_malloc_r+0x90>
 8017c80:	4629      	mov	r1, r5
 8017c82:	4638      	mov	r0, r7
 8017c84:	f7ff ffc0 	bl	8017c08 <sbrk_aligned>
 8017c88:	1c43      	adds	r3, r0, #1
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	d155      	bne.n	8017d3a <_malloc_r+0xf2>
 8017c8e:	f8d8 4000 	ldr.w	r4, [r8]
 8017c92:	4626      	mov	r6, r4
 8017c94:	2e00      	cmp	r6, #0
 8017c96:	d145      	bne.n	8017d24 <_malloc_r+0xdc>
 8017c98:	2c00      	cmp	r4, #0
 8017c9a:	d048      	beq.n	8017d2e <_malloc_r+0xe6>
 8017c9c:	6823      	ldr	r3, [r4, #0]
 8017c9e:	4631      	mov	r1, r6
 8017ca0:	4638      	mov	r0, r7
 8017ca2:	eb04 0903 	add.w	r9, r4, r3
 8017ca6:	f000 fb5f 	bl	8018368 <_sbrk_r>
 8017caa:	4581      	cmp	r9, r0
 8017cac:	d13f      	bne.n	8017d2e <_malloc_r+0xe6>
 8017cae:	6821      	ldr	r1, [r4, #0]
 8017cb0:	1a6d      	subs	r5, r5, r1
 8017cb2:	4629      	mov	r1, r5
 8017cb4:	4638      	mov	r0, r7
 8017cb6:	f7ff ffa7 	bl	8017c08 <sbrk_aligned>
 8017cba:	3001      	adds	r0, #1
 8017cbc:	d037      	beq.n	8017d2e <_malloc_r+0xe6>
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	442b      	add	r3, r5
 8017cc2:	6023      	str	r3, [r4, #0]
 8017cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d038      	beq.n	8017d3e <_malloc_r+0xf6>
 8017ccc:	685a      	ldr	r2, [r3, #4]
 8017cce:	42a2      	cmp	r2, r4
 8017cd0:	d12b      	bne.n	8017d2a <_malloc_r+0xe2>
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	605a      	str	r2, [r3, #4]
 8017cd6:	e00f      	b.n	8017cf8 <_malloc_r+0xb0>
 8017cd8:	6822      	ldr	r2, [r4, #0]
 8017cda:	1b52      	subs	r2, r2, r5
 8017cdc:	d41f      	bmi.n	8017d1e <_malloc_r+0xd6>
 8017cde:	2a0b      	cmp	r2, #11
 8017ce0:	d917      	bls.n	8017d12 <_malloc_r+0xca>
 8017ce2:	1961      	adds	r1, r4, r5
 8017ce4:	42a3      	cmp	r3, r4
 8017ce6:	6025      	str	r5, [r4, #0]
 8017ce8:	bf18      	it	ne
 8017cea:	6059      	strne	r1, [r3, #4]
 8017cec:	6863      	ldr	r3, [r4, #4]
 8017cee:	bf08      	it	eq
 8017cf0:	f8c8 1000 	streq.w	r1, [r8]
 8017cf4:	5162      	str	r2, [r4, r5]
 8017cf6:	604b      	str	r3, [r1, #4]
 8017cf8:	4638      	mov	r0, r7
 8017cfa:	f104 060b 	add.w	r6, r4, #11
 8017cfe:	f000 f829 	bl	8017d54 <__malloc_unlock>
 8017d02:	f026 0607 	bic.w	r6, r6, #7
 8017d06:	1d23      	adds	r3, r4, #4
 8017d08:	1af2      	subs	r2, r6, r3
 8017d0a:	d0ae      	beq.n	8017c6a <_malloc_r+0x22>
 8017d0c:	1b9b      	subs	r3, r3, r6
 8017d0e:	50a3      	str	r3, [r4, r2]
 8017d10:	e7ab      	b.n	8017c6a <_malloc_r+0x22>
 8017d12:	42a3      	cmp	r3, r4
 8017d14:	6862      	ldr	r2, [r4, #4]
 8017d16:	d1dd      	bne.n	8017cd4 <_malloc_r+0x8c>
 8017d18:	f8c8 2000 	str.w	r2, [r8]
 8017d1c:	e7ec      	b.n	8017cf8 <_malloc_r+0xb0>
 8017d1e:	4623      	mov	r3, r4
 8017d20:	6864      	ldr	r4, [r4, #4]
 8017d22:	e7ac      	b.n	8017c7e <_malloc_r+0x36>
 8017d24:	4634      	mov	r4, r6
 8017d26:	6876      	ldr	r6, [r6, #4]
 8017d28:	e7b4      	b.n	8017c94 <_malloc_r+0x4c>
 8017d2a:	4613      	mov	r3, r2
 8017d2c:	e7cc      	b.n	8017cc8 <_malloc_r+0x80>
 8017d2e:	230c      	movs	r3, #12
 8017d30:	603b      	str	r3, [r7, #0]
 8017d32:	4638      	mov	r0, r7
 8017d34:	f000 f80e 	bl	8017d54 <__malloc_unlock>
 8017d38:	e797      	b.n	8017c6a <_malloc_r+0x22>
 8017d3a:	6025      	str	r5, [r4, #0]
 8017d3c:	e7dc      	b.n	8017cf8 <_malloc_r+0xb0>
 8017d3e:	605b      	str	r3, [r3, #4]
 8017d40:	deff      	udf	#255	; 0xff
 8017d42:	bf00      	nop
 8017d44:	2000e378 	.word	0x2000e378

08017d48 <__malloc_lock>:
 8017d48:	4801      	ldr	r0, [pc, #4]	; (8017d50 <__malloc_lock+0x8>)
 8017d4a:	f000 bb59 	b.w	8018400 <__retarget_lock_acquire_recursive>
 8017d4e:	bf00      	nop
 8017d50:	2000e4c1 	.word	0x2000e4c1

08017d54 <__malloc_unlock>:
 8017d54:	4801      	ldr	r0, [pc, #4]	; (8017d5c <__malloc_unlock+0x8>)
 8017d56:	f000 bb54 	b.w	8018402 <__retarget_lock_release_recursive>
 8017d5a:	bf00      	nop
 8017d5c:	2000e4c1 	.word	0x2000e4c1

08017d60 <srand>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4b10      	ldr	r3, [pc, #64]	; (8017da4 <srand+0x44>)
 8017d64:	681d      	ldr	r5, [r3, #0]
 8017d66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017d68:	4604      	mov	r4, r0
 8017d6a:	b9b3      	cbnz	r3, 8017d9a <srand+0x3a>
 8017d6c:	2018      	movs	r0, #24
 8017d6e:	f7ff ff3b 	bl	8017be8 <malloc>
 8017d72:	4602      	mov	r2, r0
 8017d74:	6328      	str	r0, [r5, #48]	; 0x30
 8017d76:	b920      	cbnz	r0, 8017d82 <srand+0x22>
 8017d78:	4b0b      	ldr	r3, [pc, #44]	; (8017da8 <srand+0x48>)
 8017d7a:	480c      	ldr	r0, [pc, #48]	; (8017dac <srand+0x4c>)
 8017d7c:	2146      	movs	r1, #70	; 0x46
 8017d7e:	f000 fb57 	bl	8018430 <__assert_func>
 8017d82:	490b      	ldr	r1, [pc, #44]	; (8017db0 <srand+0x50>)
 8017d84:	4b0b      	ldr	r3, [pc, #44]	; (8017db4 <srand+0x54>)
 8017d86:	e9c0 1300 	strd	r1, r3, [r0]
 8017d8a:	4b0b      	ldr	r3, [pc, #44]	; (8017db8 <srand+0x58>)
 8017d8c:	6083      	str	r3, [r0, #8]
 8017d8e:	230b      	movs	r3, #11
 8017d90:	8183      	strh	r3, [r0, #12]
 8017d92:	2100      	movs	r1, #0
 8017d94:	2001      	movs	r0, #1
 8017d96:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017d9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	611c      	str	r4, [r3, #16]
 8017da0:	615a      	str	r2, [r3, #20]
 8017da2:	bd38      	pop	{r3, r4, r5, pc}
 8017da4:	2000012c 	.word	0x2000012c
 8017da8:	08019c3c 	.word	0x08019c3c
 8017dac:	08019c53 	.word	0x08019c53
 8017db0:	abcd330e 	.word	0xabcd330e
 8017db4:	e66d1234 	.word	0xe66d1234
 8017db8:	0005deec 	.word	0x0005deec

08017dbc <rand>:
 8017dbc:	4b16      	ldr	r3, [pc, #88]	; (8017e18 <rand+0x5c>)
 8017dbe:	b510      	push	{r4, lr}
 8017dc0:	681c      	ldr	r4, [r3, #0]
 8017dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017dc4:	b9b3      	cbnz	r3, 8017df4 <rand+0x38>
 8017dc6:	2018      	movs	r0, #24
 8017dc8:	f7ff ff0e 	bl	8017be8 <malloc>
 8017dcc:	4602      	mov	r2, r0
 8017dce:	6320      	str	r0, [r4, #48]	; 0x30
 8017dd0:	b920      	cbnz	r0, 8017ddc <rand+0x20>
 8017dd2:	4b12      	ldr	r3, [pc, #72]	; (8017e1c <rand+0x60>)
 8017dd4:	4812      	ldr	r0, [pc, #72]	; (8017e20 <rand+0x64>)
 8017dd6:	2152      	movs	r1, #82	; 0x52
 8017dd8:	f000 fb2a 	bl	8018430 <__assert_func>
 8017ddc:	4911      	ldr	r1, [pc, #68]	; (8017e24 <rand+0x68>)
 8017dde:	4b12      	ldr	r3, [pc, #72]	; (8017e28 <rand+0x6c>)
 8017de0:	e9c0 1300 	strd	r1, r3, [r0]
 8017de4:	4b11      	ldr	r3, [pc, #68]	; (8017e2c <rand+0x70>)
 8017de6:	6083      	str	r3, [r0, #8]
 8017de8:	230b      	movs	r3, #11
 8017dea:	8183      	strh	r3, [r0, #12]
 8017dec:	2100      	movs	r1, #0
 8017dee:	2001      	movs	r0, #1
 8017df0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017df4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017df6:	480e      	ldr	r0, [pc, #56]	; (8017e30 <rand+0x74>)
 8017df8:	690b      	ldr	r3, [r1, #16]
 8017dfa:	694c      	ldr	r4, [r1, #20]
 8017dfc:	4a0d      	ldr	r2, [pc, #52]	; (8017e34 <rand+0x78>)
 8017dfe:	4358      	muls	r0, r3
 8017e00:	fb02 0004 	mla	r0, r2, r4, r0
 8017e04:	fba3 3202 	umull	r3, r2, r3, r2
 8017e08:	3301      	adds	r3, #1
 8017e0a:	eb40 0002 	adc.w	r0, r0, r2
 8017e0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017e12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017e16:	bd10      	pop	{r4, pc}
 8017e18:	2000012c 	.word	0x2000012c
 8017e1c:	08019c3c 	.word	0x08019c3c
 8017e20:	08019c53 	.word	0x08019c53
 8017e24:	abcd330e 	.word	0xabcd330e
 8017e28:	e66d1234 	.word	0xe66d1234
 8017e2c:	0005deec 	.word	0x0005deec
 8017e30:	5851f42d 	.word	0x5851f42d
 8017e34:	4c957f2d 	.word	0x4c957f2d

08017e38 <realloc>:
 8017e38:	4b02      	ldr	r3, [pc, #8]	; (8017e44 <realloc+0xc>)
 8017e3a:	460a      	mov	r2, r1
 8017e3c:	4601      	mov	r1, r0
 8017e3e:	6818      	ldr	r0, [r3, #0]
 8017e40:	f000 b802 	b.w	8017e48 <_realloc_r>
 8017e44:	2000012c 	.word	0x2000012c

08017e48 <_realloc_r>:
 8017e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e4c:	4680      	mov	r8, r0
 8017e4e:	4614      	mov	r4, r2
 8017e50:	460e      	mov	r6, r1
 8017e52:	b921      	cbnz	r1, 8017e5e <_realloc_r+0x16>
 8017e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e58:	4611      	mov	r1, r2
 8017e5a:	f7ff bef5 	b.w	8017c48 <_malloc_r>
 8017e5e:	b92a      	cbnz	r2, 8017e6c <_realloc_r+0x24>
 8017e60:	f000 fb10 	bl	8018484 <_free_r>
 8017e64:	4625      	mov	r5, r4
 8017e66:	4628      	mov	r0, r5
 8017e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e6c:	f000 fb56 	bl	801851c <_malloc_usable_size_r>
 8017e70:	4284      	cmp	r4, r0
 8017e72:	4607      	mov	r7, r0
 8017e74:	d802      	bhi.n	8017e7c <_realloc_r+0x34>
 8017e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e7a:	d812      	bhi.n	8017ea2 <_realloc_r+0x5a>
 8017e7c:	4621      	mov	r1, r4
 8017e7e:	4640      	mov	r0, r8
 8017e80:	f7ff fee2 	bl	8017c48 <_malloc_r>
 8017e84:	4605      	mov	r5, r0
 8017e86:	2800      	cmp	r0, #0
 8017e88:	d0ed      	beq.n	8017e66 <_realloc_r+0x1e>
 8017e8a:	42bc      	cmp	r4, r7
 8017e8c:	4622      	mov	r2, r4
 8017e8e:	4631      	mov	r1, r6
 8017e90:	bf28      	it	cs
 8017e92:	463a      	movcs	r2, r7
 8017e94:	f000 fabe 	bl	8018414 <memcpy>
 8017e98:	4631      	mov	r1, r6
 8017e9a:	4640      	mov	r0, r8
 8017e9c:	f000 faf2 	bl	8018484 <_free_r>
 8017ea0:	e7e1      	b.n	8017e66 <_realloc_r+0x1e>
 8017ea2:	4635      	mov	r5, r6
 8017ea4:	e7df      	b.n	8017e66 <_realloc_r+0x1e>
	...

08017ea8 <_strtoul_l.constprop.0>:
 8017ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017eac:	4f36      	ldr	r7, [pc, #216]	; (8017f88 <_strtoul_l.constprop.0+0xe0>)
 8017eae:	4686      	mov	lr, r0
 8017eb0:	460d      	mov	r5, r1
 8017eb2:	4628      	mov	r0, r5
 8017eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017eb8:	5d3e      	ldrb	r6, [r7, r4]
 8017eba:	f016 0608 	ands.w	r6, r6, #8
 8017ebe:	d1f8      	bne.n	8017eb2 <_strtoul_l.constprop.0+0xa>
 8017ec0:	2c2d      	cmp	r4, #45	; 0x2d
 8017ec2:	d130      	bne.n	8017f26 <_strtoul_l.constprop.0+0x7e>
 8017ec4:	782c      	ldrb	r4, [r5, #0]
 8017ec6:	2601      	movs	r6, #1
 8017ec8:	1c85      	adds	r5, r0, #2
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d057      	beq.n	8017f7e <_strtoul_l.constprop.0+0xd6>
 8017ece:	2b10      	cmp	r3, #16
 8017ed0:	d109      	bne.n	8017ee6 <_strtoul_l.constprop.0+0x3e>
 8017ed2:	2c30      	cmp	r4, #48	; 0x30
 8017ed4:	d107      	bne.n	8017ee6 <_strtoul_l.constprop.0+0x3e>
 8017ed6:	7828      	ldrb	r0, [r5, #0]
 8017ed8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017edc:	2858      	cmp	r0, #88	; 0x58
 8017ede:	d149      	bne.n	8017f74 <_strtoul_l.constprop.0+0xcc>
 8017ee0:	786c      	ldrb	r4, [r5, #1]
 8017ee2:	2310      	movs	r3, #16
 8017ee4:	3502      	adds	r5, #2
 8017ee6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017eea:	2700      	movs	r7, #0
 8017eec:	fbb8 f8f3 	udiv	r8, r8, r3
 8017ef0:	fb03 f908 	mul.w	r9, r3, r8
 8017ef4:	ea6f 0909 	mvn.w	r9, r9
 8017ef8:	4638      	mov	r0, r7
 8017efa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017efe:	f1bc 0f09 	cmp.w	ip, #9
 8017f02:	d815      	bhi.n	8017f30 <_strtoul_l.constprop.0+0x88>
 8017f04:	4664      	mov	r4, ip
 8017f06:	42a3      	cmp	r3, r4
 8017f08:	dd23      	ble.n	8017f52 <_strtoul_l.constprop.0+0xaa>
 8017f0a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017f0e:	d007      	beq.n	8017f20 <_strtoul_l.constprop.0+0x78>
 8017f10:	4580      	cmp	r8, r0
 8017f12:	d31b      	bcc.n	8017f4c <_strtoul_l.constprop.0+0xa4>
 8017f14:	d101      	bne.n	8017f1a <_strtoul_l.constprop.0+0x72>
 8017f16:	45a1      	cmp	r9, r4
 8017f18:	db18      	blt.n	8017f4c <_strtoul_l.constprop.0+0xa4>
 8017f1a:	fb00 4003 	mla	r0, r0, r3, r4
 8017f1e:	2701      	movs	r7, #1
 8017f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f24:	e7e9      	b.n	8017efa <_strtoul_l.constprop.0+0x52>
 8017f26:	2c2b      	cmp	r4, #43	; 0x2b
 8017f28:	bf04      	itt	eq
 8017f2a:	782c      	ldrbeq	r4, [r5, #0]
 8017f2c:	1c85      	addeq	r5, r0, #2
 8017f2e:	e7cc      	b.n	8017eca <_strtoul_l.constprop.0+0x22>
 8017f30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017f34:	f1bc 0f19 	cmp.w	ip, #25
 8017f38:	d801      	bhi.n	8017f3e <_strtoul_l.constprop.0+0x96>
 8017f3a:	3c37      	subs	r4, #55	; 0x37
 8017f3c:	e7e3      	b.n	8017f06 <_strtoul_l.constprop.0+0x5e>
 8017f3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017f42:	f1bc 0f19 	cmp.w	ip, #25
 8017f46:	d804      	bhi.n	8017f52 <_strtoul_l.constprop.0+0xaa>
 8017f48:	3c57      	subs	r4, #87	; 0x57
 8017f4a:	e7dc      	b.n	8017f06 <_strtoul_l.constprop.0+0x5e>
 8017f4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017f50:	e7e6      	b.n	8017f20 <_strtoul_l.constprop.0+0x78>
 8017f52:	1c7b      	adds	r3, r7, #1
 8017f54:	d106      	bne.n	8017f64 <_strtoul_l.constprop.0+0xbc>
 8017f56:	2322      	movs	r3, #34	; 0x22
 8017f58:	f8ce 3000 	str.w	r3, [lr]
 8017f5c:	4638      	mov	r0, r7
 8017f5e:	b932      	cbnz	r2, 8017f6e <_strtoul_l.constprop.0+0xc6>
 8017f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f64:	b106      	cbz	r6, 8017f68 <_strtoul_l.constprop.0+0xc0>
 8017f66:	4240      	negs	r0, r0
 8017f68:	2a00      	cmp	r2, #0
 8017f6a:	d0f9      	beq.n	8017f60 <_strtoul_l.constprop.0+0xb8>
 8017f6c:	b107      	cbz	r7, 8017f70 <_strtoul_l.constprop.0+0xc8>
 8017f6e:	1e69      	subs	r1, r5, #1
 8017f70:	6011      	str	r1, [r2, #0]
 8017f72:	e7f5      	b.n	8017f60 <_strtoul_l.constprop.0+0xb8>
 8017f74:	2430      	movs	r4, #48	; 0x30
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d1b5      	bne.n	8017ee6 <_strtoul_l.constprop.0+0x3e>
 8017f7a:	2308      	movs	r3, #8
 8017f7c:	e7b3      	b.n	8017ee6 <_strtoul_l.constprop.0+0x3e>
 8017f7e:	2c30      	cmp	r4, #48	; 0x30
 8017f80:	d0a9      	beq.n	8017ed6 <_strtoul_l.constprop.0+0x2e>
 8017f82:	230a      	movs	r3, #10
 8017f84:	e7af      	b.n	8017ee6 <_strtoul_l.constprop.0+0x3e>
 8017f86:	bf00      	nop
 8017f88:	08019cac 	.word	0x08019cac

08017f8c <strtoul>:
 8017f8c:	4613      	mov	r3, r2
 8017f8e:	460a      	mov	r2, r1
 8017f90:	4601      	mov	r1, r0
 8017f92:	4802      	ldr	r0, [pc, #8]	; (8017f9c <strtoul+0x10>)
 8017f94:	6800      	ldr	r0, [r0, #0]
 8017f96:	f7ff bf87 	b.w	8017ea8 <_strtoul_l.constprop.0>
 8017f9a:	bf00      	nop
 8017f9c:	2000012c 	.word	0x2000012c

08017fa0 <std>:
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	b510      	push	{r4, lr}
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8017faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017fae:	6083      	str	r3, [r0, #8]
 8017fb0:	8181      	strh	r1, [r0, #12]
 8017fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8017fb4:	81c2      	strh	r2, [r0, #14]
 8017fb6:	6183      	str	r3, [r0, #24]
 8017fb8:	4619      	mov	r1, r3
 8017fba:	2208      	movs	r2, #8
 8017fbc:	305c      	adds	r0, #92	; 0x5c
 8017fbe:	f000 f961 	bl	8018284 <memset>
 8017fc2:	4b05      	ldr	r3, [pc, #20]	; (8017fd8 <std+0x38>)
 8017fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8017fc6:	4b05      	ldr	r3, [pc, #20]	; (8017fdc <std+0x3c>)
 8017fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8017fca:	4b05      	ldr	r3, [pc, #20]	; (8017fe0 <std+0x40>)
 8017fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017fce:	4b05      	ldr	r3, [pc, #20]	; (8017fe4 <std+0x44>)
 8017fd0:	6224      	str	r4, [r4, #32]
 8017fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8017fd4:	bd10      	pop	{r4, pc}
 8017fd6:	bf00      	nop
 8017fd8:	0801818d 	.word	0x0801818d
 8017fdc:	080181af 	.word	0x080181af
 8017fe0:	080181e7 	.word	0x080181e7
 8017fe4:	0801820b 	.word	0x0801820b

08017fe8 <stdio_exit_handler>:
 8017fe8:	4a02      	ldr	r2, [pc, #8]	; (8017ff4 <stdio_exit_handler+0xc>)
 8017fea:	4903      	ldr	r1, [pc, #12]	; (8017ff8 <stdio_exit_handler+0x10>)
 8017fec:	4803      	ldr	r0, [pc, #12]	; (8017ffc <stdio_exit_handler+0x14>)
 8017fee:	f000 b869 	b.w	80180c4 <_fwalk_sglue>
 8017ff2:	bf00      	nop
 8017ff4:	200000d4 	.word	0x200000d4
 8017ff8:	08018e91 	.word	0x08018e91
 8017ffc:	200000e0 	.word	0x200000e0

08018000 <cleanup_stdio>:
 8018000:	6841      	ldr	r1, [r0, #4]
 8018002:	4b0c      	ldr	r3, [pc, #48]	; (8018034 <cleanup_stdio+0x34>)
 8018004:	4299      	cmp	r1, r3
 8018006:	b510      	push	{r4, lr}
 8018008:	4604      	mov	r4, r0
 801800a:	d001      	beq.n	8018010 <cleanup_stdio+0x10>
 801800c:	f000 ff40 	bl	8018e90 <_fflush_r>
 8018010:	68a1      	ldr	r1, [r4, #8]
 8018012:	4b09      	ldr	r3, [pc, #36]	; (8018038 <cleanup_stdio+0x38>)
 8018014:	4299      	cmp	r1, r3
 8018016:	d002      	beq.n	801801e <cleanup_stdio+0x1e>
 8018018:	4620      	mov	r0, r4
 801801a:	f000 ff39 	bl	8018e90 <_fflush_r>
 801801e:	68e1      	ldr	r1, [r4, #12]
 8018020:	4b06      	ldr	r3, [pc, #24]	; (801803c <cleanup_stdio+0x3c>)
 8018022:	4299      	cmp	r1, r3
 8018024:	d004      	beq.n	8018030 <cleanup_stdio+0x30>
 8018026:	4620      	mov	r0, r4
 8018028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801802c:	f000 bf30 	b.w	8018e90 <_fflush_r>
 8018030:	bd10      	pop	{r4, pc}
 8018032:	bf00      	nop
 8018034:	2000e380 	.word	0x2000e380
 8018038:	2000e3e8 	.word	0x2000e3e8
 801803c:	2000e450 	.word	0x2000e450

08018040 <global_stdio_init.part.0>:
 8018040:	b510      	push	{r4, lr}
 8018042:	4b0b      	ldr	r3, [pc, #44]	; (8018070 <global_stdio_init.part.0+0x30>)
 8018044:	4c0b      	ldr	r4, [pc, #44]	; (8018074 <global_stdio_init.part.0+0x34>)
 8018046:	4a0c      	ldr	r2, [pc, #48]	; (8018078 <global_stdio_init.part.0+0x38>)
 8018048:	601a      	str	r2, [r3, #0]
 801804a:	4620      	mov	r0, r4
 801804c:	2200      	movs	r2, #0
 801804e:	2104      	movs	r1, #4
 8018050:	f7ff ffa6 	bl	8017fa0 <std>
 8018054:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018058:	2201      	movs	r2, #1
 801805a:	2109      	movs	r1, #9
 801805c:	f7ff ffa0 	bl	8017fa0 <std>
 8018060:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018064:	2202      	movs	r2, #2
 8018066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801806a:	2112      	movs	r1, #18
 801806c:	f7ff bf98 	b.w	8017fa0 <std>
 8018070:	2000e4b8 	.word	0x2000e4b8
 8018074:	2000e380 	.word	0x2000e380
 8018078:	08017fe9 	.word	0x08017fe9

0801807c <__sfp_lock_acquire>:
 801807c:	4801      	ldr	r0, [pc, #4]	; (8018084 <__sfp_lock_acquire+0x8>)
 801807e:	f000 b9bf 	b.w	8018400 <__retarget_lock_acquire_recursive>
 8018082:	bf00      	nop
 8018084:	2000e4c2 	.word	0x2000e4c2

08018088 <__sfp_lock_release>:
 8018088:	4801      	ldr	r0, [pc, #4]	; (8018090 <__sfp_lock_release+0x8>)
 801808a:	f000 b9ba 	b.w	8018402 <__retarget_lock_release_recursive>
 801808e:	bf00      	nop
 8018090:	2000e4c2 	.word	0x2000e4c2

08018094 <__sinit>:
 8018094:	b510      	push	{r4, lr}
 8018096:	4604      	mov	r4, r0
 8018098:	f7ff fff0 	bl	801807c <__sfp_lock_acquire>
 801809c:	6a23      	ldr	r3, [r4, #32]
 801809e:	b11b      	cbz	r3, 80180a8 <__sinit+0x14>
 80180a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180a4:	f7ff bff0 	b.w	8018088 <__sfp_lock_release>
 80180a8:	4b04      	ldr	r3, [pc, #16]	; (80180bc <__sinit+0x28>)
 80180aa:	6223      	str	r3, [r4, #32]
 80180ac:	4b04      	ldr	r3, [pc, #16]	; (80180c0 <__sinit+0x2c>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d1f5      	bne.n	80180a0 <__sinit+0xc>
 80180b4:	f7ff ffc4 	bl	8018040 <global_stdio_init.part.0>
 80180b8:	e7f2      	b.n	80180a0 <__sinit+0xc>
 80180ba:	bf00      	nop
 80180bc:	08018001 	.word	0x08018001
 80180c0:	2000e4b8 	.word	0x2000e4b8

080180c4 <_fwalk_sglue>:
 80180c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180c8:	4607      	mov	r7, r0
 80180ca:	4688      	mov	r8, r1
 80180cc:	4614      	mov	r4, r2
 80180ce:	2600      	movs	r6, #0
 80180d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80180d4:	f1b9 0901 	subs.w	r9, r9, #1
 80180d8:	d505      	bpl.n	80180e6 <_fwalk_sglue+0x22>
 80180da:	6824      	ldr	r4, [r4, #0]
 80180dc:	2c00      	cmp	r4, #0
 80180de:	d1f7      	bne.n	80180d0 <_fwalk_sglue+0xc>
 80180e0:	4630      	mov	r0, r6
 80180e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180e6:	89ab      	ldrh	r3, [r5, #12]
 80180e8:	2b01      	cmp	r3, #1
 80180ea:	d907      	bls.n	80180fc <_fwalk_sglue+0x38>
 80180ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180f0:	3301      	adds	r3, #1
 80180f2:	d003      	beq.n	80180fc <_fwalk_sglue+0x38>
 80180f4:	4629      	mov	r1, r5
 80180f6:	4638      	mov	r0, r7
 80180f8:	47c0      	blx	r8
 80180fa:	4306      	orrs	r6, r0
 80180fc:	3568      	adds	r5, #104	; 0x68
 80180fe:	e7e9      	b.n	80180d4 <_fwalk_sglue+0x10>

08018100 <iprintf>:
 8018100:	b40f      	push	{r0, r1, r2, r3}
 8018102:	b507      	push	{r0, r1, r2, lr}
 8018104:	4906      	ldr	r1, [pc, #24]	; (8018120 <iprintf+0x20>)
 8018106:	ab04      	add	r3, sp, #16
 8018108:	6808      	ldr	r0, [r1, #0]
 801810a:	f853 2b04 	ldr.w	r2, [r3], #4
 801810e:	6881      	ldr	r1, [r0, #8]
 8018110:	9301      	str	r3, [sp, #4]
 8018112:	f000 fb8d 	bl	8018830 <_vfiprintf_r>
 8018116:	b003      	add	sp, #12
 8018118:	f85d eb04 	ldr.w	lr, [sp], #4
 801811c:	b004      	add	sp, #16
 801811e:	4770      	bx	lr
 8018120:	2000012c 	.word	0x2000012c

08018124 <sniprintf>:
 8018124:	b40c      	push	{r2, r3}
 8018126:	b530      	push	{r4, r5, lr}
 8018128:	4b17      	ldr	r3, [pc, #92]	; (8018188 <sniprintf+0x64>)
 801812a:	1e0c      	subs	r4, r1, #0
 801812c:	681d      	ldr	r5, [r3, #0]
 801812e:	b09d      	sub	sp, #116	; 0x74
 8018130:	da08      	bge.n	8018144 <sniprintf+0x20>
 8018132:	238b      	movs	r3, #139	; 0x8b
 8018134:	602b      	str	r3, [r5, #0]
 8018136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801813a:	b01d      	add	sp, #116	; 0x74
 801813c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018140:	b002      	add	sp, #8
 8018142:	4770      	bx	lr
 8018144:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018148:	f8ad 3014 	strh.w	r3, [sp, #20]
 801814c:	bf14      	ite	ne
 801814e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018152:	4623      	moveq	r3, r4
 8018154:	9304      	str	r3, [sp, #16]
 8018156:	9307      	str	r3, [sp, #28]
 8018158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801815c:	9002      	str	r0, [sp, #8]
 801815e:	9006      	str	r0, [sp, #24]
 8018160:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018164:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018166:	ab21      	add	r3, sp, #132	; 0x84
 8018168:	a902      	add	r1, sp, #8
 801816a:	4628      	mov	r0, r5
 801816c:	9301      	str	r3, [sp, #4]
 801816e:	f000 fa37 	bl	80185e0 <_svfiprintf_r>
 8018172:	1c43      	adds	r3, r0, #1
 8018174:	bfbc      	itt	lt
 8018176:	238b      	movlt	r3, #139	; 0x8b
 8018178:	602b      	strlt	r3, [r5, #0]
 801817a:	2c00      	cmp	r4, #0
 801817c:	d0dd      	beq.n	801813a <sniprintf+0x16>
 801817e:	9b02      	ldr	r3, [sp, #8]
 8018180:	2200      	movs	r2, #0
 8018182:	701a      	strb	r2, [r3, #0]
 8018184:	e7d9      	b.n	801813a <sniprintf+0x16>
 8018186:	bf00      	nop
 8018188:	2000012c 	.word	0x2000012c

0801818c <__sread>:
 801818c:	b510      	push	{r4, lr}
 801818e:	460c      	mov	r4, r1
 8018190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018194:	f000 f8d6 	bl	8018344 <_read_r>
 8018198:	2800      	cmp	r0, #0
 801819a:	bfab      	itete	ge
 801819c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801819e:	89a3      	ldrhlt	r3, [r4, #12]
 80181a0:	181b      	addge	r3, r3, r0
 80181a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80181a6:	bfac      	ite	ge
 80181a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80181aa:	81a3      	strhlt	r3, [r4, #12]
 80181ac:	bd10      	pop	{r4, pc}

080181ae <__swrite>:
 80181ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181b2:	461f      	mov	r7, r3
 80181b4:	898b      	ldrh	r3, [r1, #12]
 80181b6:	05db      	lsls	r3, r3, #23
 80181b8:	4605      	mov	r5, r0
 80181ba:	460c      	mov	r4, r1
 80181bc:	4616      	mov	r6, r2
 80181be:	d505      	bpl.n	80181cc <__swrite+0x1e>
 80181c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181c4:	2302      	movs	r3, #2
 80181c6:	2200      	movs	r2, #0
 80181c8:	f000 f8aa 	bl	8018320 <_lseek_r>
 80181cc:	89a3      	ldrh	r3, [r4, #12]
 80181ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80181d6:	81a3      	strh	r3, [r4, #12]
 80181d8:	4632      	mov	r2, r6
 80181da:	463b      	mov	r3, r7
 80181dc:	4628      	mov	r0, r5
 80181de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181e2:	f000 b8d1 	b.w	8018388 <_write_r>

080181e6 <__sseek>:
 80181e6:	b510      	push	{r4, lr}
 80181e8:	460c      	mov	r4, r1
 80181ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181ee:	f000 f897 	bl	8018320 <_lseek_r>
 80181f2:	1c43      	adds	r3, r0, #1
 80181f4:	89a3      	ldrh	r3, [r4, #12]
 80181f6:	bf15      	itete	ne
 80181f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80181fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018202:	81a3      	strheq	r3, [r4, #12]
 8018204:	bf18      	it	ne
 8018206:	81a3      	strhne	r3, [r4, #12]
 8018208:	bd10      	pop	{r4, pc}

0801820a <__sclose>:
 801820a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801820e:	f000 b877 	b.w	8018300 <_close_r>

08018212 <_vsniprintf_r>:
 8018212:	b530      	push	{r4, r5, lr}
 8018214:	4614      	mov	r4, r2
 8018216:	2c00      	cmp	r4, #0
 8018218:	b09b      	sub	sp, #108	; 0x6c
 801821a:	4605      	mov	r5, r0
 801821c:	461a      	mov	r2, r3
 801821e:	da05      	bge.n	801822c <_vsniprintf_r+0x1a>
 8018220:	238b      	movs	r3, #139	; 0x8b
 8018222:	6003      	str	r3, [r0, #0]
 8018224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018228:	b01b      	add	sp, #108	; 0x6c
 801822a:	bd30      	pop	{r4, r5, pc}
 801822c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018230:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018234:	bf14      	ite	ne
 8018236:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801823a:	4623      	moveq	r3, r4
 801823c:	9302      	str	r3, [sp, #8]
 801823e:	9305      	str	r3, [sp, #20]
 8018240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018244:	9100      	str	r1, [sp, #0]
 8018246:	9104      	str	r1, [sp, #16]
 8018248:	f8ad 300e 	strh.w	r3, [sp, #14]
 801824c:	4669      	mov	r1, sp
 801824e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018250:	f000 f9c6 	bl	80185e0 <_svfiprintf_r>
 8018254:	1c43      	adds	r3, r0, #1
 8018256:	bfbc      	itt	lt
 8018258:	238b      	movlt	r3, #139	; 0x8b
 801825a:	602b      	strlt	r3, [r5, #0]
 801825c:	2c00      	cmp	r4, #0
 801825e:	d0e3      	beq.n	8018228 <_vsniprintf_r+0x16>
 8018260:	9b00      	ldr	r3, [sp, #0]
 8018262:	2200      	movs	r2, #0
 8018264:	701a      	strb	r2, [r3, #0]
 8018266:	e7df      	b.n	8018228 <_vsniprintf_r+0x16>

08018268 <vsniprintf>:
 8018268:	b507      	push	{r0, r1, r2, lr}
 801826a:	9300      	str	r3, [sp, #0]
 801826c:	4613      	mov	r3, r2
 801826e:	460a      	mov	r2, r1
 8018270:	4601      	mov	r1, r0
 8018272:	4803      	ldr	r0, [pc, #12]	; (8018280 <vsniprintf+0x18>)
 8018274:	6800      	ldr	r0, [r0, #0]
 8018276:	f7ff ffcc 	bl	8018212 <_vsniprintf_r>
 801827a:	b003      	add	sp, #12
 801827c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018280:	2000012c 	.word	0x2000012c

08018284 <memset>:
 8018284:	4402      	add	r2, r0
 8018286:	4603      	mov	r3, r0
 8018288:	4293      	cmp	r3, r2
 801828a:	d100      	bne.n	801828e <memset+0xa>
 801828c:	4770      	bx	lr
 801828e:	f803 1b01 	strb.w	r1, [r3], #1
 8018292:	e7f9      	b.n	8018288 <memset+0x4>

08018294 <strchr>:
 8018294:	b2c9      	uxtb	r1, r1
 8018296:	4603      	mov	r3, r0
 8018298:	f810 2b01 	ldrb.w	r2, [r0], #1
 801829c:	b11a      	cbz	r2, 80182a6 <strchr+0x12>
 801829e:	428a      	cmp	r2, r1
 80182a0:	d1f9      	bne.n	8018296 <strchr+0x2>
 80182a2:	4618      	mov	r0, r3
 80182a4:	4770      	bx	lr
 80182a6:	2900      	cmp	r1, #0
 80182a8:	bf18      	it	ne
 80182aa:	2300      	movne	r3, #0
 80182ac:	e7f9      	b.n	80182a2 <strchr+0xe>

080182ae <strncmp>:
 80182ae:	b510      	push	{r4, lr}
 80182b0:	b16a      	cbz	r2, 80182ce <strncmp+0x20>
 80182b2:	3901      	subs	r1, #1
 80182b4:	1884      	adds	r4, r0, r2
 80182b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80182be:	429a      	cmp	r2, r3
 80182c0:	d103      	bne.n	80182ca <strncmp+0x1c>
 80182c2:	42a0      	cmp	r0, r4
 80182c4:	d001      	beq.n	80182ca <strncmp+0x1c>
 80182c6:	2a00      	cmp	r2, #0
 80182c8:	d1f5      	bne.n	80182b6 <strncmp+0x8>
 80182ca:	1ad0      	subs	r0, r2, r3
 80182cc:	bd10      	pop	{r4, pc}
 80182ce:	4610      	mov	r0, r2
 80182d0:	e7fc      	b.n	80182cc <strncmp+0x1e>

080182d2 <strstr>:
 80182d2:	780a      	ldrb	r2, [r1, #0]
 80182d4:	b570      	push	{r4, r5, r6, lr}
 80182d6:	b96a      	cbnz	r2, 80182f4 <strstr+0x22>
 80182d8:	bd70      	pop	{r4, r5, r6, pc}
 80182da:	429a      	cmp	r2, r3
 80182dc:	d109      	bne.n	80182f2 <strstr+0x20>
 80182de:	460c      	mov	r4, r1
 80182e0:	4605      	mov	r5, r0
 80182e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d0f6      	beq.n	80182d8 <strstr+0x6>
 80182ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80182ee:	429e      	cmp	r6, r3
 80182f0:	d0f7      	beq.n	80182e2 <strstr+0x10>
 80182f2:	3001      	adds	r0, #1
 80182f4:	7803      	ldrb	r3, [r0, #0]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d1ef      	bne.n	80182da <strstr+0x8>
 80182fa:	4618      	mov	r0, r3
 80182fc:	e7ec      	b.n	80182d8 <strstr+0x6>
	...

08018300 <_close_r>:
 8018300:	b538      	push	{r3, r4, r5, lr}
 8018302:	4d06      	ldr	r5, [pc, #24]	; (801831c <_close_r+0x1c>)
 8018304:	2300      	movs	r3, #0
 8018306:	4604      	mov	r4, r0
 8018308:	4608      	mov	r0, r1
 801830a:	602b      	str	r3, [r5, #0]
 801830c:	f7e9 fcb9 	bl	8001c82 <_close>
 8018310:	1c43      	adds	r3, r0, #1
 8018312:	d102      	bne.n	801831a <_close_r+0x1a>
 8018314:	682b      	ldr	r3, [r5, #0]
 8018316:	b103      	cbz	r3, 801831a <_close_r+0x1a>
 8018318:	6023      	str	r3, [r4, #0]
 801831a:	bd38      	pop	{r3, r4, r5, pc}
 801831c:	2000e4bc 	.word	0x2000e4bc

08018320 <_lseek_r>:
 8018320:	b538      	push	{r3, r4, r5, lr}
 8018322:	4d07      	ldr	r5, [pc, #28]	; (8018340 <_lseek_r+0x20>)
 8018324:	4604      	mov	r4, r0
 8018326:	4608      	mov	r0, r1
 8018328:	4611      	mov	r1, r2
 801832a:	2200      	movs	r2, #0
 801832c:	602a      	str	r2, [r5, #0]
 801832e:	461a      	mov	r2, r3
 8018330:	f7e9 fcce 	bl	8001cd0 <_lseek>
 8018334:	1c43      	adds	r3, r0, #1
 8018336:	d102      	bne.n	801833e <_lseek_r+0x1e>
 8018338:	682b      	ldr	r3, [r5, #0]
 801833a:	b103      	cbz	r3, 801833e <_lseek_r+0x1e>
 801833c:	6023      	str	r3, [r4, #0]
 801833e:	bd38      	pop	{r3, r4, r5, pc}
 8018340:	2000e4bc 	.word	0x2000e4bc

08018344 <_read_r>:
 8018344:	b538      	push	{r3, r4, r5, lr}
 8018346:	4d07      	ldr	r5, [pc, #28]	; (8018364 <_read_r+0x20>)
 8018348:	4604      	mov	r4, r0
 801834a:	4608      	mov	r0, r1
 801834c:	4611      	mov	r1, r2
 801834e:	2200      	movs	r2, #0
 8018350:	602a      	str	r2, [r5, #0]
 8018352:	461a      	mov	r2, r3
 8018354:	f7e9 fc5c 	bl	8001c10 <_read>
 8018358:	1c43      	adds	r3, r0, #1
 801835a:	d102      	bne.n	8018362 <_read_r+0x1e>
 801835c:	682b      	ldr	r3, [r5, #0]
 801835e:	b103      	cbz	r3, 8018362 <_read_r+0x1e>
 8018360:	6023      	str	r3, [r4, #0]
 8018362:	bd38      	pop	{r3, r4, r5, pc}
 8018364:	2000e4bc 	.word	0x2000e4bc

08018368 <_sbrk_r>:
 8018368:	b538      	push	{r3, r4, r5, lr}
 801836a:	4d06      	ldr	r5, [pc, #24]	; (8018384 <_sbrk_r+0x1c>)
 801836c:	2300      	movs	r3, #0
 801836e:	4604      	mov	r4, r0
 8018370:	4608      	mov	r0, r1
 8018372:	602b      	str	r3, [r5, #0]
 8018374:	f7e9 fcba 	bl	8001cec <_sbrk>
 8018378:	1c43      	adds	r3, r0, #1
 801837a:	d102      	bne.n	8018382 <_sbrk_r+0x1a>
 801837c:	682b      	ldr	r3, [r5, #0]
 801837e:	b103      	cbz	r3, 8018382 <_sbrk_r+0x1a>
 8018380:	6023      	str	r3, [r4, #0]
 8018382:	bd38      	pop	{r3, r4, r5, pc}
 8018384:	2000e4bc 	.word	0x2000e4bc

08018388 <_write_r>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	4d07      	ldr	r5, [pc, #28]	; (80183a8 <_write_r+0x20>)
 801838c:	4604      	mov	r4, r0
 801838e:	4608      	mov	r0, r1
 8018390:	4611      	mov	r1, r2
 8018392:	2200      	movs	r2, #0
 8018394:	602a      	str	r2, [r5, #0]
 8018396:	461a      	mov	r2, r3
 8018398:	f7e9 fc57 	bl	8001c4a <_write>
 801839c:	1c43      	adds	r3, r0, #1
 801839e:	d102      	bne.n	80183a6 <_write_r+0x1e>
 80183a0:	682b      	ldr	r3, [r5, #0]
 80183a2:	b103      	cbz	r3, 80183a6 <_write_r+0x1e>
 80183a4:	6023      	str	r3, [r4, #0]
 80183a6:	bd38      	pop	{r3, r4, r5, pc}
 80183a8:	2000e4bc 	.word	0x2000e4bc

080183ac <__errno>:
 80183ac:	4b01      	ldr	r3, [pc, #4]	; (80183b4 <__errno+0x8>)
 80183ae:	6818      	ldr	r0, [r3, #0]
 80183b0:	4770      	bx	lr
 80183b2:	bf00      	nop
 80183b4:	2000012c 	.word	0x2000012c

080183b8 <__libc_init_array>:
 80183b8:	b570      	push	{r4, r5, r6, lr}
 80183ba:	4d0d      	ldr	r5, [pc, #52]	; (80183f0 <__libc_init_array+0x38>)
 80183bc:	4c0d      	ldr	r4, [pc, #52]	; (80183f4 <__libc_init_array+0x3c>)
 80183be:	1b64      	subs	r4, r4, r5
 80183c0:	10a4      	asrs	r4, r4, #2
 80183c2:	2600      	movs	r6, #0
 80183c4:	42a6      	cmp	r6, r4
 80183c6:	d109      	bne.n	80183dc <__libc_init_array+0x24>
 80183c8:	4d0b      	ldr	r5, [pc, #44]	; (80183f8 <__libc_init_array+0x40>)
 80183ca:	4c0c      	ldr	r4, [pc, #48]	; (80183fc <__libc_init_array+0x44>)
 80183cc:	f000 ff1a 	bl	8019204 <_init>
 80183d0:	1b64      	subs	r4, r4, r5
 80183d2:	10a4      	asrs	r4, r4, #2
 80183d4:	2600      	movs	r6, #0
 80183d6:	42a6      	cmp	r6, r4
 80183d8:	d105      	bne.n	80183e6 <__libc_init_array+0x2e>
 80183da:	bd70      	pop	{r4, r5, r6, pc}
 80183dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80183e0:	4798      	blx	r3
 80183e2:	3601      	adds	r6, #1
 80183e4:	e7ee      	b.n	80183c4 <__libc_init_array+0xc>
 80183e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80183ea:	4798      	blx	r3
 80183ec:	3601      	adds	r6, #1
 80183ee:	e7f2      	b.n	80183d6 <__libc_init_array+0x1e>
 80183f0:	08019e24 	.word	0x08019e24
 80183f4:	08019e24 	.word	0x08019e24
 80183f8:	08019e24 	.word	0x08019e24
 80183fc:	08019e2c 	.word	0x08019e2c

08018400 <__retarget_lock_acquire_recursive>:
 8018400:	4770      	bx	lr

08018402 <__retarget_lock_release_recursive>:
 8018402:	4770      	bx	lr

08018404 <strcpy>:
 8018404:	4603      	mov	r3, r0
 8018406:	f811 2b01 	ldrb.w	r2, [r1], #1
 801840a:	f803 2b01 	strb.w	r2, [r3], #1
 801840e:	2a00      	cmp	r2, #0
 8018410:	d1f9      	bne.n	8018406 <strcpy+0x2>
 8018412:	4770      	bx	lr

08018414 <memcpy>:
 8018414:	440a      	add	r2, r1
 8018416:	4291      	cmp	r1, r2
 8018418:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801841c:	d100      	bne.n	8018420 <memcpy+0xc>
 801841e:	4770      	bx	lr
 8018420:	b510      	push	{r4, lr}
 8018422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018426:	f803 4f01 	strb.w	r4, [r3, #1]!
 801842a:	4291      	cmp	r1, r2
 801842c:	d1f9      	bne.n	8018422 <memcpy+0xe>
 801842e:	bd10      	pop	{r4, pc}

08018430 <__assert_func>:
 8018430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018432:	4614      	mov	r4, r2
 8018434:	461a      	mov	r2, r3
 8018436:	4b09      	ldr	r3, [pc, #36]	; (801845c <__assert_func+0x2c>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	4605      	mov	r5, r0
 801843c:	68d8      	ldr	r0, [r3, #12]
 801843e:	b14c      	cbz	r4, 8018454 <__assert_func+0x24>
 8018440:	4b07      	ldr	r3, [pc, #28]	; (8018460 <__assert_func+0x30>)
 8018442:	9100      	str	r1, [sp, #0]
 8018444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018448:	4906      	ldr	r1, [pc, #24]	; (8018464 <__assert_func+0x34>)
 801844a:	462b      	mov	r3, r5
 801844c:	f000 fd48 	bl	8018ee0 <fiprintf>
 8018450:	f000 fe08 	bl	8019064 <abort>
 8018454:	4b04      	ldr	r3, [pc, #16]	; (8018468 <__assert_func+0x38>)
 8018456:	461c      	mov	r4, r3
 8018458:	e7f3      	b.n	8018442 <__assert_func+0x12>
 801845a:	bf00      	nop
 801845c:	2000012c 	.word	0x2000012c
 8018460:	08019dac 	.word	0x08019dac
 8018464:	08019db9 	.word	0x08019db9
 8018468:	08019de7 	.word	0x08019de7

0801846c <__env_lock>:
 801846c:	4801      	ldr	r0, [pc, #4]	; (8018474 <__env_lock+0x8>)
 801846e:	f7ff bfc7 	b.w	8018400 <__retarget_lock_acquire_recursive>
 8018472:	bf00      	nop
 8018474:	2000e4c0 	.word	0x2000e4c0

08018478 <__env_unlock>:
 8018478:	4801      	ldr	r0, [pc, #4]	; (8018480 <__env_unlock+0x8>)
 801847a:	f7ff bfc2 	b.w	8018402 <__retarget_lock_release_recursive>
 801847e:	bf00      	nop
 8018480:	2000e4c0 	.word	0x2000e4c0

08018484 <_free_r>:
 8018484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018486:	2900      	cmp	r1, #0
 8018488:	d044      	beq.n	8018514 <_free_r+0x90>
 801848a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801848e:	9001      	str	r0, [sp, #4]
 8018490:	2b00      	cmp	r3, #0
 8018492:	f1a1 0404 	sub.w	r4, r1, #4
 8018496:	bfb8      	it	lt
 8018498:	18e4      	addlt	r4, r4, r3
 801849a:	f7ff fc55 	bl	8017d48 <__malloc_lock>
 801849e:	4a1e      	ldr	r2, [pc, #120]	; (8018518 <_free_r+0x94>)
 80184a0:	9801      	ldr	r0, [sp, #4]
 80184a2:	6813      	ldr	r3, [r2, #0]
 80184a4:	b933      	cbnz	r3, 80184b4 <_free_r+0x30>
 80184a6:	6063      	str	r3, [r4, #4]
 80184a8:	6014      	str	r4, [r2, #0]
 80184aa:	b003      	add	sp, #12
 80184ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184b0:	f7ff bc50 	b.w	8017d54 <__malloc_unlock>
 80184b4:	42a3      	cmp	r3, r4
 80184b6:	d908      	bls.n	80184ca <_free_r+0x46>
 80184b8:	6825      	ldr	r5, [r4, #0]
 80184ba:	1961      	adds	r1, r4, r5
 80184bc:	428b      	cmp	r3, r1
 80184be:	bf01      	itttt	eq
 80184c0:	6819      	ldreq	r1, [r3, #0]
 80184c2:	685b      	ldreq	r3, [r3, #4]
 80184c4:	1949      	addeq	r1, r1, r5
 80184c6:	6021      	streq	r1, [r4, #0]
 80184c8:	e7ed      	b.n	80184a6 <_free_r+0x22>
 80184ca:	461a      	mov	r2, r3
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	b10b      	cbz	r3, 80184d4 <_free_r+0x50>
 80184d0:	42a3      	cmp	r3, r4
 80184d2:	d9fa      	bls.n	80184ca <_free_r+0x46>
 80184d4:	6811      	ldr	r1, [r2, #0]
 80184d6:	1855      	adds	r5, r2, r1
 80184d8:	42a5      	cmp	r5, r4
 80184da:	d10b      	bne.n	80184f4 <_free_r+0x70>
 80184dc:	6824      	ldr	r4, [r4, #0]
 80184de:	4421      	add	r1, r4
 80184e0:	1854      	adds	r4, r2, r1
 80184e2:	42a3      	cmp	r3, r4
 80184e4:	6011      	str	r1, [r2, #0]
 80184e6:	d1e0      	bne.n	80184aa <_free_r+0x26>
 80184e8:	681c      	ldr	r4, [r3, #0]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	6053      	str	r3, [r2, #4]
 80184ee:	440c      	add	r4, r1
 80184f0:	6014      	str	r4, [r2, #0]
 80184f2:	e7da      	b.n	80184aa <_free_r+0x26>
 80184f4:	d902      	bls.n	80184fc <_free_r+0x78>
 80184f6:	230c      	movs	r3, #12
 80184f8:	6003      	str	r3, [r0, #0]
 80184fa:	e7d6      	b.n	80184aa <_free_r+0x26>
 80184fc:	6825      	ldr	r5, [r4, #0]
 80184fe:	1961      	adds	r1, r4, r5
 8018500:	428b      	cmp	r3, r1
 8018502:	bf04      	itt	eq
 8018504:	6819      	ldreq	r1, [r3, #0]
 8018506:	685b      	ldreq	r3, [r3, #4]
 8018508:	6063      	str	r3, [r4, #4]
 801850a:	bf04      	itt	eq
 801850c:	1949      	addeq	r1, r1, r5
 801850e:	6021      	streq	r1, [r4, #0]
 8018510:	6054      	str	r4, [r2, #4]
 8018512:	e7ca      	b.n	80184aa <_free_r+0x26>
 8018514:	b003      	add	sp, #12
 8018516:	bd30      	pop	{r4, r5, pc}
 8018518:	2000e378 	.word	0x2000e378

0801851c <_malloc_usable_size_r>:
 801851c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018520:	1f18      	subs	r0, r3, #4
 8018522:	2b00      	cmp	r3, #0
 8018524:	bfbc      	itt	lt
 8018526:	580b      	ldrlt	r3, [r1, r0]
 8018528:	18c0      	addlt	r0, r0, r3
 801852a:	4770      	bx	lr

0801852c <__ssputs_r>:
 801852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018530:	688e      	ldr	r6, [r1, #8]
 8018532:	461f      	mov	r7, r3
 8018534:	42be      	cmp	r6, r7
 8018536:	680b      	ldr	r3, [r1, #0]
 8018538:	4682      	mov	sl, r0
 801853a:	460c      	mov	r4, r1
 801853c:	4690      	mov	r8, r2
 801853e:	d82c      	bhi.n	801859a <__ssputs_r+0x6e>
 8018540:	898a      	ldrh	r2, [r1, #12]
 8018542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018546:	d026      	beq.n	8018596 <__ssputs_r+0x6a>
 8018548:	6965      	ldr	r5, [r4, #20]
 801854a:	6909      	ldr	r1, [r1, #16]
 801854c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018550:	eba3 0901 	sub.w	r9, r3, r1
 8018554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018558:	1c7b      	adds	r3, r7, #1
 801855a:	444b      	add	r3, r9
 801855c:	106d      	asrs	r5, r5, #1
 801855e:	429d      	cmp	r5, r3
 8018560:	bf38      	it	cc
 8018562:	461d      	movcc	r5, r3
 8018564:	0553      	lsls	r3, r2, #21
 8018566:	d527      	bpl.n	80185b8 <__ssputs_r+0x8c>
 8018568:	4629      	mov	r1, r5
 801856a:	f7ff fb6d 	bl	8017c48 <_malloc_r>
 801856e:	4606      	mov	r6, r0
 8018570:	b360      	cbz	r0, 80185cc <__ssputs_r+0xa0>
 8018572:	6921      	ldr	r1, [r4, #16]
 8018574:	464a      	mov	r2, r9
 8018576:	f7ff ff4d 	bl	8018414 <memcpy>
 801857a:	89a3      	ldrh	r3, [r4, #12]
 801857c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018584:	81a3      	strh	r3, [r4, #12]
 8018586:	6126      	str	r6, [r4, #16]
 8018588:	6165      	str	r5, [r4, #20]
 801858a:	444e      	add	r6, r9
 801858c:	eba5 0509 	sub.w	r5, r5, r9
 8018590:	6026      	str	r6, [r4, #0]
 8018592:	60a5      	str	r5, [r4, #8]
 8018594:	463e      	mov	r6, r7
 8018596:	42be      	cmp	r6, r7
 8018598:	d900      	bls.n	801859c <__ssputs_r+0x70>
 801859a:	463e      	mov	r6, r7
 801859c:	6820      	ldr	r0, [r4, #0]
 801859e:	4632      	mov	r2, r6
 80185a0:	4641      	mov	r1, r8
 80185a2:	f000 fd45 	bl	8019030 <memmove>
 80185a6:	68a3      	ldr	r3, [r4, #8]
 80185a8:	1b9b      	subs	r3, r3, r6
 80185aa:	60a3      	str	r3, [r4, #8]
 80185ac:	6823      	ldr	r3, [r4, #0]
 80185ae:	4433      	add	r3, r6
 80185b0:	6023      	str	r3, [r4, #0]
 80185b2:	2000      	movs	r0, #0
 80185b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185b8:	462a      	mov	r2, r5
 80185ba:	f7ff fc45 	bl	8017e48 <_realloc_r>
 80185be:	4606      	mov	r6, r0
 80185c0:	2800      	cmp	r0, #0
 80185c2:	d1e0      	bne.n	8018586 <__ssputs_r+0x5a>
 80185c4:	6921      	ldr	r1, [r4, #16]
 80185c6:	4650      	mov	r0, sl
 80185c8:	f7ff ff5c 	bl	8018484 <_free_r>
 80185cc:	230c      	movs	r3, #12
 80185ce:	f8ca 3000 	str.w	r3, [sl]
 80185d2:	89a3      	ldrh	r3, [r4, #12]
 80185d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185d8:	81a3      	strh	r3, [r4, #12]
 80185da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80185de:	e7e9      	b.n	80185b4 <__ssputs_r+0x88>

080185e0 <_svfiprintf_r>:
 80185e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e4:	4698      	mov	r8, r3
 80185e6:	898b      	ldrh	r3, [r1, #12]
 80185e8:	061b      	lsls	r3, r3, #24
 80185ea:	b09d      	sub	sp, #116	; 0x74
 80185ec:	4607      	mov	r7, r0
 80185ee:	460d      	mov	r5, r1
 80185f0:	4614      	mov	r4, r2
 80185f2:	d50e      	bpl.n	8018612 <_svfiprintf_r+0x32>
 80185f4:	690b      	ldr	r3, [r1, #16]
 80185f6:	b963      	cbnz	r3, 8018612 <_svfiprintf_r+0x32>
 80185f8:	2140      	movs	r1, #64	; 0x40
 80185fa:	f7ff fb25 	bl	8017c48 <_malloc_r>
 80185fe:	6028      	str	r0, [r5, #0]
 8018600:	6128      	str	r0, [r5, #16]
 8018602:	b920      	cbnz	r0, 801860e <_svfiprintf_r+0x2e>
 8018604:	230c      	movs	r3, #12
 8018606:	603b      	str	r3, [r7, #0]
 8018608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801860c:	e0d0      	b.n	80187b0 <_svfiprintf_r+0x1d0>
 801860e:	2340      	movs	r3, #64	; 0x40
 8018610:	616b      	str	r3, [r5, #20]
 8018612:	2300      	movs	r3, #0
 8018614:	9309      	str	r3, [sp, #36]	; 0x24
 8018616:	2320      	movs	r3, #32
 8018618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801861c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018620:	2330      	movs	r3, #48	; 0x30
 8018622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80187c8 <_svfiprintf_r+0x1e8>
 8018626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801862a:	f04f 0901 	mov.w	r9, #1
 801862e:	4623      	mov	r3, r4
 8018630:	469a      	mov	sl, r3
 8018632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018636:	b10a      	cbz	r2, 801863c <_svfiprintf_r+0x5c>
 8018638:	2a25      	cmp	r2, #37	; 0x25
 801863a:	d1f9      	bne.n	8018630 <_svfiprintf_r+0x50>
 801863c:	ebba 0b04 	subs.w	fp, sl, r4
 8018640:	d00b      	beq.n	801865a <_svfiprintf_r+0x7a>
 8018642:	465b      	mov	r3, fp
 8018644:	4622      	mov	r2, r4
 8018646:	4629      	mov	r1, r5
 8018648:	4638      	mov	r0, r7
 801864a:	f7ff ff6f 	bl	801852c <__ssputs_r>
 801864e:	3001      	adds	r0, #1
 8018650:	f000 80a9 	beq.w	80187a6 <_svfiprintf_r+0x1c6>
 8018654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018656:	445a      	add	r2, fp
 8018658:	9209      	str	r2, [sp, #36]	; 0x24
 801865a:	f89a 3000 	ldrb.w	r3, [sl]
 801865e:	2b00      	cmp	r3, #0
 8018660:	f000 80a1 	beq.w	80187a6 <_svfiprintf_r+0x1c6>
 8018664:	2300      	movs	r3, #0
 8018666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801866a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801866e:	f10a 0a01 	add.w	sl, sl, #1
 8018672:	9304      	str	r3, [sp, #16]
 8018674:	9307      	str	r3, [sp, #28]
 8018676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801867a:	931a      	str	r3, [sp, #104]	; 0x68
 801867c:	4654      	mov	r4, sl
 801867e:	2205      	movs	r2, #5
 8018680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018684:	4850      	ldr	r0, [pc, #320]	; (80187c8 <_svfiprintf_r+0x1e8>)
 8018686:	f7e7 fdbb 	bl	8000200 <memchr>
 801868a:	9a04      	ldr	r2, [sp, #16]
 801868c:	b9d8      	cbnz	r0, 80186c6 <_svfiprintf_r+0xe6>
 801868e:	06d0      	lsls	r0, r2, #27
 8018690:	bf44      	itt	mi
 8018692:	2320      	movmi	r3, #32
 8018694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018698:	0711      	lsls	r1, r2, #28
 801869a:	bf44      	itt	mi
 801869c:	232b      	movmi	r3, #43	; 0x2b
 801869e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186a2:	f89a 3000 	ldrb.w	r3, [sl]
 80186a6:	2b2a      	cmp	r3, #42	; 0x2a
 80186a8:	d015      	beq.n	80186d6 <_svfiprintf_r+0xf6>
 80186aa:	9a07      	ldr	r2, [sp, #28]
 80186ac:	4654      	mov	r4, sl
 80186ae:	2000      	movs	r0, #0
 80186b0:	f04f 0c0a 	mov.w	ip, #10
 80186b4:	4621      	mov	r1, r4
 80186b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186ba:	3b30      	subs	r3, #48	; 0x30
 80186bc:	2b09      	cmp	r3, #9
 80186be:	d94d      	bls.n	801875c <_svfiprintf_r+0x17c>
 80186c0:	b1b0      	cbz	r0, 80186f0 <_svfiprintf_r+0x110>
 80186c2:	9207      	str	r2, [sp, #28]
 80186c4:	e014      	b.n	80186f0 <_svfiprintf_r+0x110>
 80186c6:	eba0 0308 	sub.w	r3, r0, r8
 80186ca:	fa09 f303 	lsl.w	r3, r9, r3
 80186ce:	4313      	orrs	r3, r2
 80186d0:	9304      	str	r3, [sp, #16]
 80186d2:	46a2      	mov	sl, r4
 80186d4:	e7d2      	b.n	801867c <_svfiprintf_r+0x9c>
 80186d6:	9b03      	ldr	r3, [sp, #12]
 80186d8:	1d19      	adds	r1, r3, #4
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	9103      	str	r1, [sp, #12]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	bfbb      	ittet	lt
 80186e2:	425b      	neglt	r3, r3
 80186e4:	f042 0202 	orrlt.w	r2, r2, #2
 80186e8:	9307      	strge	r3, [sp, #28]
 80186ea:	9307      	strlt	r3, [sp, #28]
 80186ec:	bfb8      	it	lt
 80186ee:	9204      	strlt	r2, [sp, #16]
 80186f0:	7823      	ldrb	r3, [r4, #0]
 80186f2:	2b2e      	cmp	r3, #46	; 0x2e
 80186f4:	d10c      	bne.n	8018710 <_svfiprintf_r+0x130>
 80186f6:	7863      	ldrb	r3, [r4, #1]
 80186f8:	2b2a      	cmp	r3, #42	; 0x2a
 80186fa:	d134      	bne.n	8018766 <_svfiprintf_r+0x186>
 80186fc:	9b03      	ldr	r3, [sp, #12]
 80186fe:	1d1a      	adds	r2, r3, #4
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	9203      	str	r2, [sp, #12]
 8018704:	2b00      	cmp	r3, #0
 8018706:	bfb8      	it	lt
 8018708:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801870c:	3402      	adds	r4, #2
 801870e:	9305      	str	r3, [sp, #20]
 8018710:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80187d8 <_svfiprintf_r+0x1f8>
 8018714:	7821      	ldrb	r1, [r4, #0]
 8018716:	2203      	movs	r2, #3
 8018718:	4650      	mov	r0, sl
 801871a:	f7e7 fd71 	bl	8000200 <memchr>
 801871e:	b138      	cbz	r0, 8018730 <_svfiprintf_r+0x150>
 8018720:	9b04      	ldr	r3, [sp, #16]
 8018722:	eba0 000a 	sub.w	r0, r0, sl
 8018726:	2240      	movs	r2, #64	; 0x40
 8018728:	4082      	lsls	r2, r0
 801872a:	4313      	orrs	r3, r2
 801872c:	3401      	adds	r4, #1
 801872e:	9304      	str	r3, [sp, #16]
 8018730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018734:	4825      	ldr	r0, [pc, #148]	; (80187cc <_svfiprintf_r+0x1ec>)
 8018736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801873a:	2206      	movs	r2, #6
 801873c:	f7e7 fd60 	bl	8000200 <memchr>
 8018740:	2800      	cmp	r0, #0
 8018742:	d038      	beq.n	80187b6 <_svfiprintf_r+0x1d6>
 8018744:	4b22      	ldr	r3, [pc, #136]	; (80187d0 <_svfiprintf_r+0x1f0>)
 8018746:	bb1b      	cbnz	r3, 8018790 <_svfiprintf_r+0x1b0>
 8018748:	9b03      	ldr	r3, [sp, #12]
 801874a:	3307      	adds	r3, #7
 801874c:	f023 0307 	bic.w	r3, r3, #7
 8018750:	3308      	adds	r3, #8
 8018752:	9303      	str	r3, [sp, #12]
 8018754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018756:	4433      	add	r3, r6
 8018758:	9309      	str	r3, [sp, #36]	; 0x24
 801875a:	e768      	b.n	801862e <_svfiprintf_r+0x4e>
 801875c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018760:	460c      	mov	r4, r1
 8018762:	2001      	movs	r0, #1
 8018764:	e7a6      	b.n	80186b4 <_svfiprintf_r+0xd4>
 8018766:	2300      	movs	r3, #0
 8018768:	3401      	adds	r4, #1
 801876a:	9305      	str	r3, [sp, #20]
 801876c:	4619      	mov	r1, r3
 801876e:	f04f 0c0a 	mov.w	ip, #10
 8018772:	4620      	mov	r0, r4
 8018774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018778:	3a30      	subs	r2, #48	; 0x30
 801877a:	2a09      	cmp	r2, #9
 801877c:	d903      	bls.n	8018786 <_svfiprintf_r+0x1a6>
 801877e:	2b00      	cmp	r3, #0
 8018780:	d0c6      	beq.n	8018710 <_svfiprintf_r+0x130>
 8018782:	9105      	str	r1, [sp, #20]
 8018784:	e7c4      	b.n	8018710 <_svfiprintf_r+0x130>
 8018786:	fb0c 2101 	mla	r1, ip, r1, r2
 801878a:	4604      	mov	r4, r0
 801878c:	2301      	movs	r3, #1
 801878e:	e7f0      	b.n	8018772 <_svfiprintf_r+0x192>
 8018790:	ab03      	add	r3, sp, #12
 8018792:	9300      	str	r3, [sp, #0]
 8018794:	462a      	mov	r2, r5
 8018796:	4b0f      	ldr	r3, [pc, #60]	; (80187d4 <_svfiprintf_r+0x1f4>)
 8018798:	a904      	add	r1, sp, #16
 801879a:	4638      	mov	r0, r7
 801879c:	f3af 8000 	nop.w
 80187a0:	1c42      	adds	r2, r0, #1
 80187a2:	4606      	mov	r6, r0
 80187a4:	d1d6      	bne.n	8018754 <_svfiprintf_r+0x174>
 80187a6:	89ab      	ldrh	r3, [r5, #12]
 80187a8:	065b      	lsls	r3, r3, #25
 80187aa:	f53f af2d 	bmi.w	8018608 <_svfiprintf_r+0x28>
 80187ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187b0:	b01d      	add	sp, #116	; 0x74
 80187b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b6:	ab03      	add	r3, sp, #12
 80187b8:	9300      	str	r3, [sp, #0]
 80187ba:	462a      	mov	r2, r5
 80187bc:	4b05      	ldr	r3, [pc, #20]	; (80187d4 <_svfiprintf_r+0x1f4>)
 80187be:	a904      	add	r1, sp, #16
 80187c0:	4638      	mov	r0, r7
 80187c2:	f000 f9bd 	bl	8018b40 <_printf_i>
 80187c6:	e7eb      	b.n	80187a0 <_svfiprintf_r+0x1c0>
 80187c8:	08019de8 	.word	0x08019de8
 80187cc:	08019df2 	.word	0x08019df2
 80187d0:	00000000 	.word	0x00000000
 80187d4:	0801852d 	.word	0x0801852d
 80187d8:	08019dee 	.word	0x08019dee

080187dc <__sfputc_r>:
 80187dc:	6893      	ldr	r3, [r2, #8]
 80187de:	3b01      	subs	r3, #1
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	b410      	push	{r4}
 80187e4:	6093      	str	r3, [r2, #8]
 80187e6:	da08      	bge.n	80187fa <__sfputc_r+0x1e>
 80187e8:	6994      	ldr	r4, [r2, #24]
 80187ea:	42a3      	cmp	r3, r4
 80187ec:	db01      	blt.n	80187f2 <__sfputc_r+0x16>
 80187ee:	290a      	cmp	r1, #10
 80187f0:	d103      	bne.n	80187fa <__sfputc_r+0x1e>
 80187f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187f6:	f000 bb85 	b.w	8018f04 <__swbuf_r>
 80187fa:	6813      	ldr	r3, [r2, #0]
 80187fc:	1c58      	adds	r0, r3, #1
 80187fe:	6010      	str	r0, [r2, #0]
 8018800:	7019      	strb	r1, [r3, #0]
 8018802:	4608      	mov	r0, r1
 8018804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018808:	4770      	bx	lr

0801880a <__sfputs_r>:
 801880a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801880c:	4606      	mov	r6, r0
 801880e:	460f      	mov	r7, r1
 8018810:	4614      	mov	r4, r2
 8018812:	18d5      	adds	r5, r2, r3
 8018814:	42ac      	cmp	r4, r5
 8018816:	d101      	bne.n	801881c <__sfputs_r+0x12>
 8018818:	2000      	movs	r0, #0
 801881a:	e007      	b.n	801882c <__sfputs_r+0x22>
 801881c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018820:	463a      	mov	r2, r7
 8018822:	4630      	mov	r0, r6
 8018824:	f7ff ffda 	bl	80187dc <__sfputc_r>
 8018828:	1c43      	adds	r3, r0, #1
 801882a:	d1f3      	bne.n	8018814 <__sfputs_r+0xa>
 801882c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018830 <_vfiprintf_r>:
 8018830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018834:	460d      	mov	r5, r1
 8018836:	b09d      	sub	sp, #116	; 0x74
 8018838:	4614      	mov	r4, r2
 801883a:	4698      	mov	r8, r3
 801883c:	4606      	mov	r6, r0
 801883e:	b118      	cbz	r0, 8018848 <_vfiprintf_r+0x18>
 8018840:	6a03      	ldr	r3, [r0, #32]
 8018842:	b90b      	cbnz	r3, 8018848 <_vfiprintf_r+0x18>
 8018844:	f7ff fc26 	bl	8018094 <__sinit>
 8018848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801884a:	07d9      	lsls	r1, r3, #31
 801884c:	d405      	bmi.n	801885a <_vfiprintf_r+0x2a>
 801884e:	89ab      	ldrh	r3, [r5, #12]
 8018850:	059a      	lsls	r2, r3, #22
 8018852:	d402      	bmi.n	801885a <_vfiprintf_r+0x2a>
 8018854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018856:	f7ff fdd3 	bl	8018400 <__retarget_lock_acquire_recursive>
 801885a:	89ab      	ldrh	r3, [r5, #12]
 801885c:	071b      	lsls	r3, r3, #28
 801885e:	d501      	bpl.n	8018864 <_vfiprintf_r+0x34>
 8018860:	692b      	ldr	r3, [r5, #16]
 8018862:	b99b      	cbnz	r3, 801888c <_vfiprintf_r+0x5c>
 8018864:	4629      	mov	r1, r5
 8018866:	4630      	mov	r0, r6
 8018868:	f000 fb8a 	bl	8018f80 <__swsetup_r>
 801886c:	b170      	cbz	r0, 801888c <_vfiprintf_r+0x5c>
 801886e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018870:	07dc      	lsls	r4, r3, #31
 8018872:	d504      	bpl.n	801887e <_vfiprintf_r+0x4e>
 8018874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018878:	b01d      	add	sp, #116	; 0x74
 801887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801887e:	89ab      	ldrh	r3, [r5, #12]
 8018880:	0598      	lsls	r0, r3, #22
 8018882:	d4f7      	bmi.n	8018874 <_vfiprintf_r+0x44>
 8018884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018886:	f7ff fdbc 	bl	8018402 <__retarget_lock_release_recursive>
 801888a:	e7f3      	b.n	8018874 <_vfiprintf_r+0x44>
 801888c:	2300      	movs	r3, #0
 801888e:	9309      	str	r3, [sp, #36]	; 0x24
 8018890:	2320      	movs	r3, #32
 8018892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018896:	f8cd 800c 	str.w	r8, [sp, #12]
 801889a:	2330      	movs	r3, #48	; 0x30
 801889c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018a50 <_vfiprintf_r+0x220>
 80188a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80188a4:	f04f 0901 	mov.w	r9, #1
 80188a8:	4623      	mov	r3, r4
 80188aa:	469a      	mov	sl, r3
 80188ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188b0:	b10a      	cbz	r2, 80188b6 <_vfiprintf_r+0x86>
 80188b2:	2a25      	cmp	r2, #37	; 0x25
 80188b4:	d1f9      	bne.n	80188aa <_vfiprintf_r+0x7a>
 80188b6:	ebba 0b04 	subs.w	fp, sl, r4
 80188ba:	d00b      	beq.n	80188d4 <_vfiprintf_r+0xa4>
 80188bc:	465b      	mov	r3, fp
 80188be:	4622      	mov	r2, r4
 80188c0:	4629      	mov	r1, r5
 80188c2:	4630      	mov	r0, r6
 80188c4:	f7ff ffa1 	bl	801880a <__sfputs_r>
 80188c8:	3001      	adds	r0, #1
 80188ca:	f000 80a9 	beq.w	8018a20 <_vfiprintf_r+0x1f0>
 80188ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188d0:	445a      	add	r2, fp
 80188d2:	9209      	str	r2, [sp, #36]	; 0x24
 80188d4:	f89a 3000 	ldrb.w	r3, [sl]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f000 80a1 	beq.w	8018a20 <_vfiprintf_r+0x1f0>
 80188de:	2300      	movs	r3, #0
 80188e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188e8:	f10a 0a01 	add.w	sl, sl, #1
 80188ec:	9304      	str	r3, [sp, #16]
 80188ee:	9307      	str	r3, [sp, #28]
 80188f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80188f4:	931a      	str	r3, [sp, #104]	; 0x68
 80188f6:	4654      	mov	r4, sl
 80188f8:	2205      	movs	r2, #5
 80188fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188fe:	4854      	ldr	r0, [pc, #336]	; (8018a50 <_vfiprintf_r+0x220>)
 8018900:	f7e7 fc7e 	bl	8000200 <memchr>
 8018904:	9a04      	ldr	r2, [sp, #16]
 8018906:	b9d8      	cbnz	r0, 8018940 <_vfiprintf_r+0x110>
 8018908:	06d1      	lsls	r1, r2, #27
 801890a:	bf44      	itt	mi
 801890c:	2320      	movmi	r3, #32
 801890e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018912:	0713      	lsls	r3, r2, #28
 8018914:	bf44      	itt	mi
 8018916:	232b      	movmi	r3, #43	; 0x2b
 8018918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801891c:	f89a 3000 	ldrb.w	r3, [sl]
 8018920:	2b2a      	cmp	r3, #42	; 0x2a
 8018922:	d015      	beq.n	8018950 <_vfiprintf_r+0x120>
 8018924:	9a07      	ldr	r2, [sp, #28]
 8018926:	4654      	mov	r4, sl
 8018928:	2000      	movs	r0, #0
 801892a:	f04f 0c0a 	mov.w	ip, #10
 801892e:	4621      	mov	r1, r4
 8018930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018934:	3b30      	subs	r3, #48	; 0x30
 8018936:	2b09      	cmp	r3, #9
 8018938:	d94d      	bls.n	80189d6 <_vfiprintf_r+0x1a6>
 801893a:	b1b0      	cbz	r0, 801896a <_vfiprintf_r+0x13a>
 801893c:	9207      	str	r2, [sp, #28]
 801893e:	e014      	b.n	801896a <_vfiprintf_r+0x13a>
 8018940:	eba0 0308 	sub.w	r3, r0, r8
 8018944:	fa09 f303 	lsl.w	r3, r9, r3
 8018948:	4313      	orrs	r3, r2
 801894a:	9304      	str	r3, [sp, #16]
 801894c:	46a2      	mov	sl, r4
 801894e:	e7d2      	b.n	80188f6 <_vfiprintf_r+0xc6>
 8018950:	9b03      	ldr	r3, [sp, #12]
 8018952:	1d19      	adds	r1, r3, #4
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	9103      	str	r1, [sp, #12]
 8018958:	2b00      	cmp	r3, #0
 801895a:	bfbb      	ittet	lt
 801895c:	425b      	neglt	r3, r3
 801895e:	f042 0202 	orrlt.w	r2, r2, #2
 8018962:	9307      	strge	r3, [sp, #28]
 8018964:	9307      	strlt	r3, [sp, #28]
 8018966:	bfb8      	it	lt
 8018968:	9204      	strlt	r2, [sp, #16]
 801896a:	7823      	ldrb	r3, [r4, #0]
 801896c:	2b2e      	cmp	r3, #46	; 0x2e
 801896e:	d10c      	bne.n	801898a <_vfiprintf_r+0x15a>
 8018970:	7863      	ldrb	r3, [r4, #1]
 8018972:	2b2a      	cmp	r3, #42	; 0x2a
 8018974:	d134      	bne.n	80189e0 <_vfiprintf_r+0x1b0>
 8018976:	9b03      	ldr	r3, [sp, #12]
 8018978:	1d1a      	adds	r2, r3, #4
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	9203      	str	r2, [sp, #12]
 801897e:	2b00      	cmp	r3, #0
 8018980:	bfb8      	it	lt
 8018982:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018986:	3402      	adds	r4, #2
 8018988:	9305      	str	r3, [sp, #20]
 801898a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018a60 <_vfiprintf_r+0x230>
 801898e:	7821      	ldrb	r1, [r4, #0]
 8018990:	2203      	movs	r2, #3
 8018992:	4650      	mov	r0, sl
 8018994:	f7e7 fc34 	bl	8000200 <memchr>
 8018998:	b138      	cbz	r0, 80189aa <_vfiprintf_r+0x17a>
 801899a:	9b04      	ldr	r3, [sp, #16]
 801899c:	eba0 000a 	sub.w	r0, r0, sl
 80189a0:	2240      	movs	r2, #64	; 0x40
 80189a2:	4082      	lsls	r2, r0
 80189a4:	4313      	orrs	r3, r2
 80189a6:	3401      	adds	r4, #1
 80189a8:	9304      	str	r3, [sp, #16]
 80189aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189ae:	4829      	ldr	r0, [pc, #164]	; (8018a54 <_vfiprintf_r+0x224>)
 80189b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189b4:	2206      	movs	r2, #6
 80189b6:	f7e7 fc23 	bl	8000200 <memchr>
 80189ba:	2800      	cmp	r0, #0
 80189bc:	d03f      	beq.n	8018a3e <_vfiprintf_r+0x20e>
 80189be:	4b26      	ldr	r3, [pc, #152]	; (8018a58 <_vfiprintf_r+0x228>)
 80189c0:	bb1b      	cbnz	r3, 8018a0a <_vfiprintf_r+0x1da>
 80189c2:	9b03      	ldr	r3, [sp, #12]
 80189c4:	3307      	adds	r3, #7
 80189c6:	f023 0307 	bic.w	r3, r3, #7
 80189ca:	3308      	adds	r3, #8
 80189cc:	9303      	str	r3, [sp, #12]
 80189ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189d0:	443b      	add	r3, r7
 80189d2:	9309      	str	r3, [sp, #36]	; 0x24
 80189d4:	e768      	b.n	80188a8 <_vfiprintf_r+0x78>
 80189d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80189da:	460c      	mov	r4, r1
 80189dc:	2001      	movs	r0, #1
 80189de:	e7a6      	b.n	801892e <_vfiprintf_r+0xfe>
 80189e0:	2300      	movs	r3, #0
 80189e2:	3401      	adds	r4, #1
 80189e4:	9305      	str	r3, [sp, #20]
 80189e6:	4619      	mov	r1, r3
 80189e8:	f04f 0c0a 	mov.w	ip, #10
 80189ec:	4620      	mov	r0, r4
 80189ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189f2:	3a30      	subs	r2, #48	; 0x30
 80189f4:	2a09      	cmp	r2, #9
 80189f6:	d903      	bls.n	8018a00 <_vfiprintf_r+0x1d0>
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d0c6      	beq.n	801898a <_vfiprintf_r+0x15a>
 80189fc:	9105      	str	r1, [sp, #20]
 80189fe:	e7c4      	b.n	801898a <_vfiprintf_r+0x15a>
 8018a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a04:	4604      	mov	r4, r0
 8018a06:	2301      	movs	r3, #1
 8018a08:	e7f0      	b.n	80189ec <_vfiprintf_r+0x1bc>
 8018a0a:	ab03      	add	r3, sp, #12
 8018a0c:	9300      	str	r3, [sp, #0]
 8018a0e:	462a      	mov	r2, r5
 8018a10:	4b12      	ldr	r3, [pc, #72]	; (8018a5c <_vfiprintf_r+0x22c>)
 8018a12:	a904      	add	r1, sp, #16
 8018a14:	4630      	mov	r0, r6
 8018a16:	f3af 8000 	nop.w
 8018a1a:	4607      	mov	r7, r0
 8018a1c:	1c78      	adds	r0, r7, #1
 8018a1e:	d1d6      	bne.n	80189ce <_vfiprintf_r+0x19e>
 8018a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a22:	07d9      	lsls	r1, r3, #31
 8018a24:	d405      	bmi.n	8018a32 <_vfiprintf_r+0x202>
 8018a26:	89ab      	ldrh	r3, [r5, #12]
 8018a28:	059a      	lsls	r2, r3, #22
 8018a2a:	d402      	bmi.n	8018a32 <_vfiprintf_r+0x202>
 8018a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a2e:	f7ff fce8 	bl	8018402 <__retarget_lock_release_recursive>
 8018a32:	89ab      	ldrh	r3, [r5, #12]
 8018a34:	065b      	lsls	r3, r3, #25
 8018a36:	f53f af1d 	bmi.w	8018874 <_vfiprintf_r+0x44>
 8018a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a3c:	e71c      	b.n	8018878 <_vfiprintf_r+0x48>
 8018a3e:	ab03      	add	r3, sp, #12
 8018a40:	9300      	str	r3, [sp, #0]
 8018a42:	462a      	mov	r2, r5
 8018a44:	4b05      	ldr	r3, [pc, #20]	; (8018a5c <_vfiprintf_r+0x22c>)
 8018a46:	a904      	add	r1, sp, #16
 8018a48:	4630      	mov	r0, r6
 8018a4a:	f000 f879 	bl	8018b40 <_printf_i>
 8018a4e:	e7e4      	b.n	8018a1a <_vfiprintf_r+0x1ea>
 8018a50:	08019de8 	.word	0x08019de8
 8018a54:	08019df2 	.word	0x08019df2
 8018a58:	00000000 	.word	0x00000000
 8018a5c:	0801880b 	.word	0x0801880b
 8018a60:	08019dee 	.word	0x08019dee

08018a64 <_printf_common>:
 8018a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a68:	4616      	mov	r6, r2
 8018a6a:	4699      	mov	r9, r3
 8018a6c:	688a      	ldr	r2, [r1, #8]
 8018a6e:	690b      	ldr	r3, [r1, #16]
 8018a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018a74:	4293      	cmp	r3, r2
 8018a76:	bfb8      	it	lt
 8018a78:	4613      	movlt	r3, r2
 8018a7a:	6033      	str	r3, [r6, #0]
 8018a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018a80:	4607      	mov	r7, r0
 8018a82:	460c      	mov	r4, r1
 8018a84:	b10a      	cbz	r2, 8018a8a <_printf_common+0x26>
 8018a86:	3301      	adds	r3, #1
 8018a88:	6033      	str	r3, [r6, #0]
 8018a8a:	6823      	ldr	r3, [r4, #0]
 8018a8c:	0699      	lsls	r1, r3, #26
 8018a8e:	bf42      	ittt	mi
 8018a90:	6833      	ldrmi	r3, [r6, #0]
 8018a92:	3302      	addmi	r3, #2
 8018a94:	6033      	strmi	r3, [r6, #0]
 8018a96:	6825      	ldr	r5, [r4, #0]
 8018a98:	f015 0506 	ands.w	r5, r5, #6
 8018a9c:	d106      	bne.n	8018aac <_printf_common+0x48>
 8018a9e:	f104 0a19 	add.w	sl, r4, #25
 8018aa2:	68e3      	ldr	r3, [r4, #12]
 8018aa4:	6832      	ldr	r2, [r6, #0]
 8018aa6:	1a9b      	subs	r3, r3, r2
 8018aa8:	42ab      	cmp	r3, r5
 8018aaa:	dc26      	bgt.n	8018afa <_printf_common+0x96>
 8018aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018ab0:	1e13      	subs	r3, r2, #0
 8018ab2:	6822      	ldr	r2, [r4, #0]
 8018ab4:	bf18      	it	ne
 8018ab6:	2301      	movne	r3, #1
 8018ab8:	0692      	lsls	r2, r2, #26
 8018aba:	d42b      	bmi.n	8018b14 <_printf_common+0xb0>
 8018abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018ac0:	4649      	mov	r1, r9
 8018ac2:	4638      	mov	r0, r7
 8018ac4:	47c0      	blx	r8
 8018ac6:	3001      	adds	r0, #1
 8018ac8:	d01e      	beq.n	8018b08 <_printf_common+0xa4>
 8018aca:	6823      	ldr	r3, [r4, #0]
 8018acc:	6922      	ldr	r2, [r4, #16]
 8018ace:	f003 0306 	and.w	r3, r3, #6
 8018ad2:	2b04      	cmp	r3, #4
 8018ad4:	bf02      	ittt	eq
 8018ad6:	68e5      	ldreq	r5, [r4, #12]
 8018ad8:	6833      	ldreq	r3, [r6, #0]
 8018ada:	1aed      	subeq	r5, r5, r3
 8018adc:	68a3      	ldr	r3, [r4, #8]
 8018ade:	bf0c      	ite	eq
 8018ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018ae4:	2500      	movne	r5, #0
 8018ae6:	4293      	cmp	r3, r2
 8018ae8:	bfc4      	itt	gt
 8018aea:	1a9b      	subgt	r3, r3, r2
 8018aec:	18ed      	addgt	r5, r5, r3
 8018aee:	2600      	movs	r6, #0
 8018af0:	341a      	adds	r4, #26
 8018af2:	42b5      	cmp	r5, r6
 8018af4:	d11a      	bne.n	8018b2c <_printf_common+0xc8>
 8018af6:	2000      	movs	r0, #0
 8018af8:	e008      	b.n	8018b0c <_printf_common+0xa8>
 8018afa:	2301      	movs	r3, #1
 8018afc:	4652      	mov	r2, sl
 8018afe:	4649      	mov	r1, r9
 8018b00:	4638      	mov	r0, r7
 8018b02:	47c0      	blx	r8
 8018b04:	3001      	adds	r0, #1
 8018b06:	d103      	bne.n	8018b10 <_printf_common+0xac>
 8018b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b10:	3501      	adds	r5, #1
 8018b12:	e7c6      	b.n	8018aa2 <_printf_common+0x3e>
 8018b14:	18e1      	adds	r1, r4, r3
 8018b16:	1c5a      	adds	r2, r3, #1
 8018b18:	2030      	movs	r0, #48	; 0x30
 8018b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018b1e:	4422      	add	r2, r4
 8018b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018b28:	3302      	adds	r3, #2
 8018b2a:	e7c7      	b.n	8018abc <_printf_common+0x58>
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	4622      	mov	r2, r4
 8018b30:	4649      	mov	r1, r9
 8018b32:	4638      	mov	r0, r7
 8018b34:	47c0      	blx	r8
 8018b36:	3001      	adds	r0, #1
 8018b38:	d0e6      	beq.n	8018b08 <_printf_common+0xa4>
 8018b3a:	3601      	adds	r6, #1
 8018b3c:	e7d9      	b.n	8018af2 <_printf_common+0x8e>
	...

08018b40 <_printf_i>:
 8018b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018b44:	7e0f      	ldrb	r7, [r1, #24]
 8018b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018b48:	2f78      	cmp	r7, #120	; 0x78
 8018b4a:	4691      	mov	r9, r2
 8018b4c:	4680      	mov	r8, r0
 8018b4e:	460c      	mov	r4, r1
 8018b50:	469a      	mov	sl, r3
 8018b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018b56:	d807      	bhi.n	8018b68 <_printf_i+0x28>
 8018b58:	2f62      	cmp	r7, #98	; 0x62
 8018b5a:	d80a      	bhi.n	8018b72 <_printf_i+0x32>
 8018b5c:	2f00      	cmp	r7, #0
 8018b5e:	f000 80d4 	beq.w	8018d0a <_printf_i+0x1ca>
 8018b62:	2f58      	cmp	r7, #88	; 0x58
 8018b64:	f000 80c0 	beq.w	8018ce8 <_printf_i+0x1a8>
 8018b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018b70:	e03a      	b.n	8018be8 <_printf_i+0xa8>
 8018b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018b76:	2b15      	cmp	r3, #21
 8018b78:	d8f6      	bhi.n	8018b68 <_printf_i+0x28>
 8018b7a:	a101      	add	r1, pc, #4	; (adr r1, 8018b80 <_printf_i+0x40>)
 8018b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018b80:	08018bd9 	.word	0x08018bd9
 8018b84:	08018bed 	.word	0x08018bed
 8018b88:	08018b69 	.word	0x08018b69
 8018b8c:	08018b69 	.word	0x08018b69
 8018b90:	08018b69 	.word	0x08018b69
 8018b94:	08018b69 	.word	0x08018b69
 8018b98:	08018bed 	.word	0x08018bed
 8018b9c:	08018b69 	.word	0x08018b69
 8018ba0:	08018b69 	.word	0x08018b69
 8018ba4:	08018b69 	.word	0x08018b69
 8018ba8:	08018b69 	.word	0x08018b69
 8018bac:	08018cf1 	.word	0x08018cf1
 8018bb0:	08018c19 	.word	0x08018c19
 8018bb4:	08018cab 	.word	0x08018cab
 8018bb8:	08018b69 	.word	0x08018b69
 8018bbc:	08018b69 	.word	0x08018b69
 8018bc0:	08018d13 	.word	0x08018d13
 8018bc4:	08018b69 	.word	0x08018b69
 8018bc8:	08018c19 	.word	0x08018c19
 8018bcc:	08018b69 	.word	0x08018b69
 8018bd0:	08018b69 	.word	0x08018b69
 8018bd4:	08018cb3 	.word	0x08018cb3
 8018bd8:	682b      	ldr	r3, [r5, #0]
 8018bda:	1d1a      	adds	r2, r3, #4
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	602a      	str	r2, [r5, #0]
 8018be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018be8:	2301      	movs	r3, #1
 8018bea:	e09f      	b.n	8018d2c <_printf_i+0x1ec>
 8018bec:	6820      	ldr	r0, [r4, #0]
 8018bee:	682b      	ldr	r3, [r5, #0]
 8018bf0:	0607      	lsls	r7, r0, #24
 8018bf2:	f103 0104 	add.w	r1, r3, #4
 8018bf6:	6029      	str	r1, [r5, #0]
 8018bf8:	d501      	bpl.n	8018bfe <_printf_i+0xbe>
 8018bfa:	681e      	ldr	r6, [r3, #0]
 8018bfc:	e003      	b.n	8018c06 <_printf_i+0xc6>
 8018bfe:	0646      	lsls	r6, r0, #25
 8018c00:	d5fb      	bpl.n	8018bfa <_printf_i+0xba>
 8018c02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018c06:	2e00      	cmp	r6, #0
 8018c08:	da03      	bge.n	8018c12 <_printf_i+0xd2>
 8018c0a:	232d      	movs	r3, #45	; 0x2d
 8018c0c:	4276      	negs	r6, r6
 8018c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c12:	485a      	ldr	r0, [pc, #360]	; (8018d7c <_printf_i+0x23c>)
 8018c14:	230a      	movs	r3, #10
 8018c16:	e012      	b.n	8018c3e <_printf_i+0xfe>
 8018c18:	682b      	ldr	r3, [r5, #0]
 8018c1a:	6820      	ldr	r0, [r4, #0]
 8018c1c:	1d19      	adds	r1, r3, #4
 8018c1e:	6029      	str	r1, [r5, #0]
 8018c20:	0605      	lsls	r5, r0, #24
 8018c22:	d501      	bpl.n	8018c28 <_printf_i+0xe8>
 8018c24:	681e      	ldr	r6, [r3, #0]
 8018c26:	e002      	b.n	8018c2e <_printf_i+0xee>
 8018c28:	0641      	lsls	r1, r0, #25
 8018c2a:	d5fb      	bpl.n	8018c24 <_printf_i+0xe4>
 8018c2c:	881e      	ldrh	r6, [r3, #0]
 8018c2e:	4853      	ldr	r0, [pc, #332]	; (8018d7c <_printf_i+0x23c>)
 8018c30:	2f6f      	cmp	r7, #111	; 0x6f
 8018c32:	bf0c      	ite	eq
 8018c34:	2308      	moveq	r3, #8
 8018c36:	230a      	movne	r3, #10
 8018c38:	2100      	movs	r1, #0
 8018c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018c3e:	6865      	ldr	r5, [r4, #4]
 8018c40:	60a5      	str	r5, [r4, #8]
 8018c42:	2d00      	cmp	r5, #0
 8018c44:	bfa2      	ittt	ge
 8018c46:	6821      	ldrge	r1, [r4, #0]
 8018c48:	f021 0104 	bicge.w	r1, r1, #4
 8018c4c:	6021      	strge	r1, [r4, #0]
 8018c4e:	b90e      	cbnz	r6, 8018c54 <_printf_i+0x114>
 8018c50:	2d00      	cmp	r5, #0
 8018c52:	d04b      	beq.n	8018cec <_printf_i+0x1ac>
 8018c54:	4615      	mov	r5, r2
 8018c56:	fbb6 f1f3 	udiv	r1, r6, r3
 8018c5a:	fb03 6711 	mls	r7, r3, r1, r6
 8018c5e:	5dc7      	ldrb	r7, [r0, r7]
 8018c60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018c64:	4637      	mov	r7, r6
 8018c66:	42bb      	cmp	r3, r7
 8018c68:	460e      	mov	r6, r1
 8018c6a:	d9f4      	bls.n	8018c56 <_printf_i+0x116>
 8018c6c:	2b08      	cmp	r3, #8
 8018c6e:	d10b      	bne.n	8018c88 <_printf_i+0x148>
 8018c70:	6823      	ldr	r3, [r4, #0]
 8018c72:	07de      	lsls	r6, r3, #31
 8018c74:	d508      	bpl.n	8018c88 <_printf_i+0x148>
 8018c76:	6923      	ldr	r3, [r4, #16]
 8018c78:	6861      	ldr	r1, [r4, #4]
 8018c7a:	4299      	cmp	r1, r3
 8018c7c:	bfde      	ittt	le
 8018c7e:	2330      	movle	r3, #48	; 0x30
 8018c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018c84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018c88:	1b52      	subs	r2, r2, r5
 8018c8a:	6122      	str	r2, [r4, #16]
 8018c8c:	f8cd a000 	str.w	sl, [sp]
 8018c90:	464b      	mov	r3, r9
 8018c92:	aa03      	add	r2, sp, #12
 8018c94:	4621      	mov	r1, r4
 8018c96:	4640      	mov	r0, r8
 8018c98:	f7ff fee4 	bl	8018a64 <_printf_common>
 8018c9c:	3001      	adds	r0, #1
 8018c9e:	d14a      	bne.n	8018d36 <_printf_i+0x1f6>
 8018ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ca4:	b004      	add	sp, #16
 8018ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018caa:	6823      	ldr	r3, [r4, #0]
 8018cac:	f043 0320 	orr.w	r3, r3, #32
 8018cb0:	6023      	str	r3, [r4, #0]
 8018cb2:	4833      	ldr	r0, [pc, #204]	; (8018d80 <_printf_i+0x240>)
 8018cb4:	2778      	movs	r7, #120	; 0x78
 8018cb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018cba:	6823      	ldr	r3, [r4, #0]
 8018cbc:	6829      	ldr	r1, [r5, #0]
 8018cbe:	061f      	lsls	r7, r3, #24
 8018cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8018cc4:	d402      	bmi.n	8018ccc <_printf_i+0x18c>
 8018cc6:	065f      	lsls	r7, r3, #25
 8018cc8:	bf48      	it	mi
 8018cca:	b2b6      	uxthmi	r6, r6
 8018ccc:	07df      	lsls	r7, r3, #31
 8018cce:	bf48      	it	mi
 8018cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8018cd4:	6029      	str	r1, [r5, #0]
 8018cd6:	bf48      	it	mi
 8018cd8:	6023      	strmi	r3, [r4, #0]
 8018cda:	b91e      	cbnz	r6, 8018ce4 <_printf_i+0x1a4>
 8018cdc:	6823      	ldr	r3, [r4, #0]
 8018cde:	f023 0320 	bic.w	r3, r3, #32
 8018ce2:	6023      	str	r3, [r4, #0]
 8018ce4:	2310      	movs	r3, #16
 8018ce6:	e7a7      	b.n	8018c38 <_printf_i+0xf8>
 8018ce8:	4824      	ldr	r0, [pc, #144]	; (8018d7c <_printf_i+0x23c>)
 8018cea:	e7e4      	b.n	8018cb6 <_printf_i+0x176>
 8018cec:	4615      	mov	r5, r2
 8018cee:	e7bd      	b.n	8018c6c <_printf_i+0x12c>
 8018cf0:	682b      	ldr	r3, [r5, #0]
 8018cf2:	6826      	ldr	r6, [r4, #0]
 8018cf4:	6961      	ldr	r1, [r4, #20]
 8018cf6:	1d18      	adds	r0, r3, #4
 8018cf8:	6028      	str	r0, [r5, #0]
 8018cfa:	0635      	lsls	r5, r6, #24
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	d501      	bpl.n	8018d04 <_printf_i+0x1c4>
 8018d00:	6019      	str	r1, [r3, #0]
 8018d02:	e002      	b.n	8018d0a <_printf_i+0x1ca>
 8018d04:	0670      	lsls	r0, r6, #25
 8018d06:	d5fb      	bpl.n	8018d00 <_printf_i+0x1c0>
 8018d08:	8019      	strh	r1, [r3, #0]
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	6123      	str	r3, [r4, #16]
 8018d0e:	4615      	mov	r5, r2
 8018d10:	e7bc      	b.n	8018c8c <_printf_i+0x14c>
 8018d12:	682b      	ldr	r3, [r5, #0]
 8018d14:	1d1a      	adds	r2, r3, #4
 8018d16:	602a      	str	r2, [r5, #0]
 8018d18:	681d      	ldr	r5, [r3, #0]
 8018d1a:	6862      	ldr	r2, [r4, #4]
 8018d1c:	2100      	movs	r1, #0
 8018d1e:	4628      	mov	r0, r5
 8018d20:	f7e7 fa6e 	bl	8000200 <memchr>
 8018d24:	b108      	cbz	r0, 8018d2a <_printf_i+0x1ea>
 8018d26:	1b40      	subs	r0, r0, r5
 8018d28:	6060      	str	r0, [r4, #4]
 8018d2a:	6863      	ldr	r3, [r4, #4]
 8018d2c:	6123      	str	r3, [r4, #16]
 8018d2e:	2300      	movs	r3, #0
 8018d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d34:	e7aa      	b.n	8018c8c <_printf_i+0x14c>
 8018d36:	6923      	ldr	r3, [r4, #16]
 8018d38:	462a      	mov	r2, r5
 8018d3a:	4649      	mov	r1, r9
 8018d3c:	4640      	mov	r0, r8
 8018d3e:	47d0      	blx	sl
 8018d40:	3001      	adds	r0, #1
 8018d42:	d0ad      	beq.n	8018ca0 <_printf_i+0x160>
 8018d44:	6823      	ldr	r3, [r4, #0]
 8018d46:	079b      	lsls	r3, r3, #30
 8018d48:	d413      	bmi.n	8018d72 <_printf_i+0x232>
 8018d4a:	68e0      	ldr	r0, [r4, #12]
 8018d4c:	9b03      	ldr	r3, [sp, #12]
 8018d4e:	4298      	cmp	r0, r3
 8018d50:	bfb8      	it	lt
 8018d52:	4618      	movlt	r0, r3
 8018d54:	e7a6      	b.n	8018ca4 <_printf_i+0x164>
 8018d56:	2301      	movs	r3, #1
 8018d58:	4632      	mov	r2, r6
 8018d5a:	4649      	mov	r1, r9
 8018d5c:	4640      	mov	r0, r8
 8018d5e:	47d0      	blx	sl
 8018d60:	3001      	adds	r0, #1
 8018d62:	d09d      	beq.n	8018ca0 <_printf_i+0x160>
 8018d64:	3501      	adds	r5, #1
 8018d66:	68e3      	ldr	r3, [r4, #12]
 8018d68:	9903      	ldr	r1, [sp, #12]
 8018d6a:	1a5b      	subs	r3, r3, r1
 8018d6c:	42ab      	cmp	r3, r5
 8018d6e:	dcf2      	bgt.n	8018d56 <_printf_i+0x216>
 8018d70:	e7eb      	b.n	8018d4a <_printf_i+0x20a>
 8018d72:	2500      	movs	r5, #0
 8018d74:	f104 0619 	add.w	r6, r4, #25
 8018d78:	e7f5      	b.n	8018d66 <_printf_i+0x226>
 8018d7a:	bf00      	nop
 8018d7c:	08019df9 	.word	0x08019df9
 8018d80:	08019e0a 	.word	0x08019e0a

08018d84 <__sflush_r>:
 8018d84:	898a      	ldrh	r2, [r1, #12]
 8018d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d8a:	4605      	mov	r5, r0
 8018d8c:	0710      	lsls	r0, r2, #28
 8018d8e:	460c      	mov	r4, r1
 8018d90:	d458      	bmi.n	8018e44 <__sflush_r+0xc0>
 8018d92:	684b      	ldr	r3, [r1, #4]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	dc05      	bgt.n	8018da4 <__sflush_r+0x20>
 8018d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	dc02      	bgt.n	8018da4 <__sflush_r+0x20>
 8018d9e:	2000      	movs	r0, #0
 8018da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018da6:	2e00      	cmp	r6, #0
 8018da8:	d0f9      	beq.n	8018d9e <__sflush_r+0x1a>
 8018daa:	2300      	movs	r3, #0
 8018dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018db0:	682f      	ldr	r7, [r5, #0]
 8018db2:	6a21      	ldr	r1, [r4, #32]
 8018db4:	602b      	str	r3, [r5, #0]
 8018db6:	d032      	beq.n	8018e1e <__sflush_r+0x9a>
 8018db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018dba:	89a3      	ldrh	r3, [r4, #12]
 8018dbc:	075a      	lsls	r2, r3, #29
 8018dbe:	d505      	bpl.n	8018dcc <__sflush_r+0x48>
 8018dc0:	6863      	ldr	r3, [r4, #4]
 8018dc2:	1ac0      	subs	r0, r0, r3
 8018dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018dc6:	b10b      	cbz	r3, 8018dcc <__sflush_r+0x48>
 8018dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018dca:	1ac0      	subs	r0, r0, r3
 8018dcc:	2300      	movs	r3, #0
 8018dce:	4602      	mov	r2, r0
 8018dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018dd2:	6a21      	ldr	r1, [r4, #32]
 8018dd4:	4628      	mov	r0, r5
 8018dd6:	47b0      	blx	r6
 8018dd8:	1c43      	adds	r3, r0, #1
 8018dda:	89a3      	ldrh	r3, [r4, #12]
 8018ddc:	d106      	bne.n	8018dec <__sflush_r+0x68>
 8018dde:	6829      	ldr	r1, [r5, #0]
 8018de0:	291d      	cmp	r1, #29
 8018de2:	d82b      	bhi.n	8018e3c <__sflush_r+0xb8>
 8018de4:	4a29      	ldr	r2, [pc, #164]	; (8018e8c <__sflush_r+0x108>)
 8018de6:	410a      	asrs	r2, r1
 8018de8:	07d6      	lsls	r6, r2, #31
 8018dea:	d427      	bmi.n	8018e3c <__sflush_r+0xb8>
 8018dec:	2200      	movs	r2, #0
 8018dee:	6062      	str	r2, [r4, #4]
 8018df0:	04d9      	lsls	r1, r3, #19
 8018df2:	6922      	ldr	r2, [r4, #16]
 8018df4:	6022      	str	r2, [r4, #0]
 8018df6:	d504      	bpl.n	8018e02 <__sflush_r+0x7e>
 8018df8:	1c42      	adds	r2, r0, #1
 8018dfa:	d101      	bne.n	8018e00 <__sflush_r+0x7c>
 8018dfc:	682b      	ldr	r3, [r5, #0]
 8018dfe:	b903      	cbnz	r3, 8018e02 <__sflush_r+0x7e>
 8018e00:	6560      	str	r0, [r4, #84]	; 0x54
 8018e02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e04:	602f      	str	r7, [r5, #0]
 8018e06:	2900      	cmp	r1, #0
 8018e08:	d0c9      	beq.n	8018d9e <__sflush_r+0x1a>
 8018e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e0e:	4299      	cmp	r1, r3
 8018e10:	d002      	beq.n	8018e18 <__sflush_r+0x94>
 8018e12:	4628      	mov	r0, r5
 8018e14:	f7ff fb36 	bl	8018484 <_free_r>
 8018e18:	2000      	movs	r0, #0
 8018e1a:	6360      	str	r0, [r4, #52]	; 0x34
 8018e1c:	e7c0      	b.n	8018da0 <__sflush_r+0x1c>
 8018e1e:	2301      	movs	r3, #1
 8018e20:	4628      	mov	r0, r5
 8018e22:	47b0      	blx	r6
 8018e24:	1c41      	adds	r1, r0, #1
 8018e26:	d1c8      	bne.n	8018dba <__sflush_r+0x36>
 8018e28:	682b      	ldr	r3, [r5, #0]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d0c5      	beq.n	8018dba <__sflush_r+0x36>
 8018e2e:	2b1d      	cmp	r3, #29
 8018e30:	d001      	beq.n	8018e36 <__sflush_r+0xb2>
 8018e32:	2b16      	cmp	r3, #22
 8018e34:	d101      	bne.n	8018e3a <__sflush_r+0xb6>
 8018e36:	602f      	str	r7, [r5, #0]
 8018e38:	e7b1      	b.n	8018d9e <__sflush_r+0x1a>
 8018e3a:	89a3      	ldrh	r3, [r4, #12]
 8018e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e40:	81a3      	strh	r3, [r4, #12]
 8018e42:	e7ad      	b.n	8018da0 <__sflush_r+0x1c>
 8018e44:	690f      	ldr	r7, [r1, #16]
 8018e46:	2f00      	cmp	r7, #0
 8018e48:	d0a9      	beq.n	8018d9e <__sflush_r+0x1a>
 8018e4a:	0793      	lsls	r3, r2, #30
 8018e4c:	680e      	ldr	r6, [r1, #0]
 8018e4e:	bf08      	it	eq
 8018e50:	694b      	ldreq	r3, [r1, #20]
 8018e52:	600f      	str	r7, [r1, #0]
 8018e54:	bf18      	it	ne
 8018e56:	2300      	movne	r3, #0
 8018e58:	eba6 0807 	sub.w	r8, r6, r7
 8018e5c:	608b      	str	r3, [r1, #8]
 8018e5e:	f1b8 0f00 	cmp.w	r8, #0
 8018e62:	dd9c      	ble.n	8018d9e <__sflush_r+0x1a>
 8018e64:	6a21      	ldr	r1, [r4, #32]
 8018e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018e68:	4643      	mov	r3, r8
 8018e6a:	463a      	mov	r2, r7
 8018e6c:	4628      	mov	r0, r5
 8018e6e:	47b0      	blx	r6
 8018e70:	2800      	cmp	r0, #0
 8018e72:	dc06      	bgt.n	8018e82 <__sflush_r+0xfe>
 8018e74:	89a3      	ldrh	r3, [r4, #12]
 8018e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e7a:	81a3      	strh	r3, [r4, #12]
 8018e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e80:	e78e      	b.n	8018da0 <__sflush_r+0x1c>
 8018e82:	4407      	add	r7, r0
 8018e84:	eba8 0800 	sub.w	r8, r8, r0
 8018e88:	e7e9      	b.n	8018e5e <__sflush_r+0xda>
 8018e8a:	bf00      	nop
 8018e8c:	dfbffffe 	.word	0xdfbffffe

08018e90 <_fflush_r>:
 8018e90:	b538      	push	{r3, r4, r5, lr}
 8018e92:	690b      	ldr	r3, [r1, #16]
 8018e94:	4605      	mov	r5, r0
 8018e96:	460c      	mov	r4, r1
 8018e98:	b913      	cbnz	r3, 8018ea0 <_fflush_r+0x10>
 8018e9a:	2500      	movs	r5, #0
 8018e9c:	4628      	mov	r0, r5
 8018e9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ea0:	b118      	cbz	r0, 8018eaa <_fflush_r+0x1a>
 8018ea2:	6a03      	ldr	r3, [r0, #32]
 8018ea4:	b90b      	cbnz	r3, 8018eaa <_fflush_r+0x1a>
 8018ea6:	f7ff f8f5 	bl	8018094 <__sinit>
 8018eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d0f3      	beq.n	8018e9a <_fflush_r+0xa>
 8018eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018eb4:	07d0      	lsls	r0, r2, #31
 8018eb6:	d404      	bmi.n	8018ec2 <_fflush_r+0x32>
 8018eb8:	0599      	lsls	r1, r3, #22
 8018eba:	d402      	bmi.n	8018ec2 <_fflush_r+0x32>
 8018ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ebe:	f7ff fa9f 	bl	8018400 <__retarget_lock_acquire_recursive>
 8018ec2:	4628      	mov	r0, r5
 8018ec4:	4621      	mov	r1, r4
 8018ec6:	f7ff ff5d 	bl	8018d84 <__sflush_r>
 8018eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ecc:	07da      	lsls	r2, r3, #31
 8018ece:	4605      	mov	r5, r0
 8018ed0:	d4e4      	bmi.n	8018e9c <_fflush_r+0xc>
 8018ed2:	89a3      	ldrh	r3, [r4, #12]
 8018ed4:	059b      	lsls	r3, r3, #22
 8018ed6:	d4e1      	bmi.n	8018e9c <_fflush_r+0xc>
 8018ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018eda:	f7ff fa92 	bl	8018402 <__retarget_lock_release_recursive>
 8018ede:	e7dd      	b.n	8018e9c <_fflush_r+0xc>

08018ee0 <fiprintf>:
 8018ee0:	b40e      	push	{r1, r2, r3}
 8018ee2:	b503      	push	{r0, r1, lr}
 8018ee4:	4601      	mov	r1, r0
 8018ee6:	ab03      	add	r3, sp, #12
 8018ee8:	4805      	ldr	r0, [pc, #20]	; (8018f00 <fiprintf+0x20>)
 8018eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8018eee:	6800      	ldr	r0, [r0, #0]
 8018ef0:	9301      	str	r3, [sp, #4]
 8018ef2:	f7ff fc9d 	bl	8018830 <_vfiprintf_r>
 8018ef6:	b002      	add	sp, #8
 8018ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018efc:	b003      	add	sp, #12
 8018efe:	4770      	bx	lr
 8018f00:	2000012c 	.word	0x2000012c

08018f04 <__swbuf_r>:
 8018f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f06:	460e      	mov	r6, r1
 8018f08:	4614      	mov	r4, r2
 8018f0a:	4605      	mov	r5, r0
 8018f0c:	b118      	cbz	r0, 8018f16 <__swbuf_r+0x12>
 8018f0e:	6a03      	ldr	r3, [r0, #32]
 8018f10:	b90b      	cbnz	r3, 8018f16 <__swbuf_r+0x12>
 8018f12:	f7ff f8bf 	bl	8018094 <__sinit>
 8018f16:	69a3      	ldr	r3, [r4, #24]
 8018f18:	60a3      	str	r3, [r4, #8]
 8018f1a:	89a3      	ldrh	r3, [r4, #12]
 8018f1c:	071a      	lsls	r2, r3, #28
 8018f1e:	d525      	bpl.n	8018f6c <__swbuf_r+0x68>
 8018f20:	6923      	ldr	r3, [r4, #16]
 8018f22:	b31b      	cbz	r3, 8018f6c <__swbuf_r+0x68>
 8018f24:	6823      	ldr	r3, [r4, #0]
 8018f26:	6922      	ldr	r2, [r4, #16]
 8018f28:	1a98      	subs	r0, r3, r2
 8018f2a:	6963      	ldr	r3, [r4, #20]
 8018f2c:	b2f6      	uxtb	r6, r6
 8018f2e:	4283      	cmp	r3, r0
 8018f30:	4637      	mov	r7, r6
 8018f32:	dc04      	bgt.n	8018f3e <__swbuf_r+0x3a>
 8018f34:	4621      	mov	r1, r4
 8018f36:	4628      	mov	r0, r5
 8018f38:	f7ff ffaa 	bl	8018e90 <_fflush_r>
 8018f3c:	b9e0      	cbnz	r0, 8018f78 <__swbuf_r+0x74>
 8018f3e:	68a3      	ldr	r3, [r4, #8]
 8018f40:	3b01      	subs	r3, #1
 8018f42:	60a3      	str	r3, [r4, #8]
 8018f44:	6823      	ldr	r3, [r4, #0]
 8018f46:	1c5a      	adds	r2, r3, #1
 8018f48:	6022      	str	r2, [r4, #0]
 8018f4a:	701e      	strb	r6, [r3, #0]
 8018f4c:	6962      	ldr	r2, [r4, #20]
 8018f4e:	1c43      	adds	r3, r0, #1
 8018f50:	429a      	cmp	r2, r3
 8018f52:	d004      	beq.n	8018f5e <__swbuf_r+0x5a>
 8018f54:	89a3      	ldrh	r3, [r4, #12]
 8018f56:	07db      	lsls	r3, r3, #31
 8018f58:	d506      	bpl.n	8018f68 <__swbuf_r+0x64>
 8018f5a:	2e0a      	cmp	r6, #10
 8018f5c:	d104      	bne.n	8018f68 <__swbuf_r+0x64>
 8018f5e:	4621      	mov	r1, r4
 8018f60:	4628      	mov	r0, r5
 8018f62:	f7ff ff95 	bl	8018e90 <_fflush_r>
 8018f66:	b938      	cbnz	r0, 8018f78 <__swbuf_r+0x74>
 8018f68:	4638      	mov	r0, r7
 8018f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f6c:	4621      	mov	r1, r4
 8018f6e:	4628      	mov	r0, r5
 8018f70:	f000 f806 	bl	8018f80 <__swsetup_r>
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d0d5      	beq.n	8018f24 <__swbuf_r+0x20>
 8018f78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018f7c:	e7f4      	b.n	8018f68 <__swbuf_r+0x64>
	...

08018f80 <__swsetup_r>:
 8018f80:	b538      	push	{r3, r4, r5, lr}
 8018f82:	4b2a      	ldr	r3, [pc, #168]	; (801902c <__swsetup_r+0xac>)
 8018f84:	4605      	mov	r5, r0
 8018f86:	6818      	ldr	r0, [r3, #0]
 8018f88:	460c      	mov	r4, r1
 8018f8a:	b118      	cbz	r0, 8018f94 <__swsetup_r+0x14>
 8018f8c:	6a03      	ldr	r3, [r0, #32]
 8018f8e:	b90b      	cbnz	r3, 8018f94 <__swsetup_r+0x14>
 8018f90:	f7ff f880 	bl	8018094 <__sinit>
 8018f94:	89a3      	ldrh	r3, [r4, #12]
 8018f96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018f9a:	0718      	lsls	r0, r3, #28
 8018f9c:	d422      	bmi.n	8018fe4 <__swsetup_r+0x64>
 8018f9e:	06d9      	lsls	r1, r3, #27
 8018fa0:	d407      	bmi.n	8018fb2 <__swsetup_r+0x32>
 8018fa2:	2309      	movs	r3, #9
 8018fa4:	602b      	str	r3, [r5, #0]
 8018fa6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018faa:	81a3      	strh	r3, [r4, #12]
 8018fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fb0:	e034      	b.n	801901c <__swsetup_r+0x9c>
 8018fb2:	0758      	lsls	r0, r3, #29
 8018fb4:	d512      	bpl.n	8018fdc <__swsetup_r+0x5c>
 8018fb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018fb8:	b141      	cbz	r1, 8018fcc <__swsetup_r+0x4c>
 8018fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fbe:	4299      	cmp	r1, r3
 8018fc0:	d002      	beq.n	8018fc8 <__swsetup_r+0x48>
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f7ff fa5e 	bl	8018484 <_free_r>
 8018fc8:	2300      	movs	r3, #0
 8018fca:	6363      	str	r3, [r4, #52]	; 0x34
 8018fcc:	89a3      	ldrh	r3, [r4, #12]
 8018fce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018fd2:	81a3      	strh	r3, [r4, #12]
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	6063      	str	r3, [r4, #4]
 8018fd8:	6923      	ldr	r3, [r4, #16]
 8018fda:	6023      	str	r3, [r4, #0]
 8018fdc:	89a3      	ldrh	r3, [r4, #12]
 8018fde:	f043 0308 	orr.w	r3, r3, #8
 8018fe2:	81a3      	strh	r3, [r4, #12]
 8018fe4:	6923      	ldr	r3, [r4, #16]
 8018fe6:	b94b      	cbnz	r3, 8018ffc <__swsetup_r+0x7c>
 8018fe8:	89a3      	ldrh	r3, [r4, #12]
 8018fea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ff2:	d003      	beq.n	8018ffc <__swsetup_r+0x7c>
 8018ff4:	4621      	mov	r1, r4
 8018ff6:	4628      	mov	r0, r5
 8018ff8:	f000 f861 	bl	80190be <__smakebuf_r>
 8018ffc:	89a0      	ldrh	r0, [r4, #12]
 8018ffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019002:	f010 0301 	ands.w	r3, r0, #1
 8019006:	d00a      	beq.n	801901e <__swsetup_r+0x9e>
 8019008:	2300      	movs	r3, #0
 801900a:	60a3      	str	r3, [r4, #8]
 801900c:	6963      	ldr	r3, [r4, #20]
 801900e:	425b      	negs	r3, r3
 8019010:	61a3      	str	r3, [r4, #24]
 8019012:	6923      	ldr	r3, [r4, #16]
 8019014:	b943      	cbnz	r3, 8019028 <__swsetup_r+0xa8>
 8019016:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801901a:	d1c4      	bne.n	8018fa6 <__swsetup_r+0x26>
 801901c:	bd38      	pop	{r3, r4, r5, pc}
 801901e:	0781      	lsls	r1, r0, #30
 8019020:	bf58      	it	pl
 8019022:	6963      	ldrpl	r3, [r4, #20]
 8019024:	60a3      	str	r3, [r4, #8]
 8019026:	e7f4      	b.n	8019012 <__swsetup_r+0x92>
 8019028:	2000      	movs	r0, #0
 801902a:	e7f7      	b.n	801901c <__swsetup_r+0x9c>
 801902c:	2000012c 	.word	0x2000012c

08019030 <memmove>:
 8019030:	4288      	cmp	r0, r1
 8019032:	b510      	push	{r4, lr}
 8019034:	eb01 0402 	add.w	r4, r1, r2
 8019038:	d902      	bls.n	8019040 <memmove+0x10>
 801903a:	4284      	cmp	r4, r0
 801903c:	4623      	mov	r3, r4
 801903e:	d807      	bhi.n	8019050 <memmove+0x20>
 8019040:	1e43      	subs	r3, r0, #1
 8019042:	42a1      	cmp	r1, r4
 8019044:	d008      	beq.n	8019058 <memmove+0x28>
 8019046:	f811 2b01 	ldrb.w	r2, [r1], #1
 801904a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801904e:	e7f8      	b.n	8019042 <memmove+0x12>
 8019050:	4402      	add	r2, r0
 8019052:	4601      	mov	r1, r0
 8019054:	428a      	cmp	r2, r1
 8019056:	d100      	bne.n	801905a <memmove+0x2a>
 8019058:	bd10      	pop	{r4, pc}
 801905a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801905e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019062:	e7f7      	b.n	8019054 <memmove+0x24>

08019064 <abort>:
 8019064:	b508      	push	{r3, lr}
 8019066:	2006      	movs	r0, #6
 8019068:	f000 f88e 	bl	8019188 <raise>
 801906c:	2001      	movs	r0, #1
 801906e:	f7e8 fdc5 	bl	8001bfc <_exit>

08019072 <__swhatbuf_r>:
 8019072:	b570      	push	{r4, r5, r6, lr}
 8019074:	460c      	mov	r4, r1
 8019076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801907a:	2900      	cmp	r1, #0
 801907c:	b096      	sub	sp, #88	; 0x58
 801907e:	4615      	mov	r5, r2
 8019080:	461e      	mov	r6, r3
 8019082:	da0d      	bge.n	80190a0 <__swhatbuf_r+0x2e>
 8019084:	89a3      	ldrh	r3, [r4, #12]
 8019086:	f013 0f80 	tst.w	r3, #128	; 0x80
 801908a:	f04f 0100 	mov.w	r1, #0
 801908e:	bf0c      	ite	eq
 8019090:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019094:	2340      	movne	r3, #64	; 0x40
 8019096:	2000      	movs	r0, #0
 8019098:	6031      	str	r1, [r6, #0]
 801909a:	602b      	str	r3, [r5, #0]
 801909c:	b016      	add	sp, #88	; 0x58
 801909e:	bd70      	pop	{r4, r5, r6, pc}
 80190a0:	466a      	mov	r2, sp
 80190a2:	f000 f879 	bl	8019198 <_fstat_r>
 80190a6:	2800      	cmp	r0, #0
 80190a8:	dbec      	blt.n	8019084 <__swhatbuf_r+0x12>
 80190aa:	9901      	ldr	r1, [sp, #4]
 80190ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80190b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80190b4:	4259      	negs	r1, r3
 80190b6:	4159      	adcs	r1, r3
 80190b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80190bc:	e7eb      	b.n	8019096 <__swhatbuf_r+0x24>

080190be <__smakebuf_r>:
 80190be:	898b      	ldrh	r3, [r1, #12]
 80190c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80190c2:	079d      	lsls	r5, r3, #30
 80190c4:	4606      	mov	r6, r0
 80190c6:	460c      	mov	r4, r1
 80190c8:	d507      	bpl.n	80190da <__smakebuf_r+0x1c>
 80190ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80190ce:	6023      	str	r3, [r4, #0]
 80190d0:	6123      	str	r3, [r4, #16]
 80190d2:	2301      	movs	r3, #1
 80190d4:	6163      	str	r3, [r4, #20]
 80190d6:	b002      	add	sp, #8
 80190d8:	bd70      	pop	{r4, r5, r6, pc}
 80190da:	ab01      	add	r3, sp, #4
 80190dc:	466a      	mov	r2, sp
 80190de:	f7ff ffc8 	bl	8019072 <__swhatbuf_r>
 80190e2:	9900      	ldr	r1, [sp, #0]
 80190e4:	4605      	mov	r5, r0
 80190e6:	4630      	mov	r0, r6
 80190e8:	f7fe fdae 	bl	8017c48 <_malloc_r>
 80190ec:	b948      	cbnz	r0, 8019102 <__smakebuf_r+0x44>
 80190ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190f2:	059a      	lsls	r2, r3, #22
 80190f4:	d4ef      	bmi.n	80190d6 <__smakebuf_r+0x18>
 80190f6:	f023 0303 	bic.w	r3, r3, #3
 80190fa:	f043 0302 	orr.w	r3, r3, #2
 80190fe:	81a3      	strh	r3, [r4, #12]
 8019100:	e7e3      	b.n	80190ca <__smakebuf_r+0xc>
 8019102:	89a3      	ldrh	r3, [r4, #12]
 8019104:	6020      	str	r0, [r4, #0]
 8019106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801910a:	81a3      	strh	r3, [r4, #12]
 801910c:	9b00      	ldr	r3, [sp, #0]
 801910e:	6163      	str	r3, [r4, #20]
 8019110:	9b01      	ldr	r3, [sp, #4]
 8019112:	6120      	str	r0, [r4, #16]
 8019114:	b15b      	cbz	r3, 801912e <__smakebuf_r+0x70>
 8019116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801911a:	4630      	mov	r0, r6
 801911c:	f000 f84e 	bl	80191bc <_isatty_r>
 8019120:	b128      	cbz	r0, 801912e <__smakebuf_r+0x70>
 8019122:	89a3      	ldrh	r3, [r4, #12]
 8019124:	f023 0303 	bic.w	r3, r3, #3
 8019128:	f043 0301 	orr.w	r3, r3, #1
 801912c:	81a3      	strh	r3, [r4, #12]
 801912e:	89a3      	ldrh	r3, [r4, #12]
 8019130:	431d      	orrs	r5, r3
 8019132:	81a5      	strh	r5, [r4, #12]
 8019134:	e7cf      	b.n	80190d6 <__smakebuf_r+0x18>

08019136 <_raise_r>:
 8019136:	291f      	cmp	r1, #31
 8019138:	b538      	push	{r3, r4, r5, lr}
 801913a:	4604      	mov	r4, r0
 801913c:	460d      	mov	r5, r1
 801913e:	d904      	bls.n	801914a <_raise_r+0x14>
 8019140:	2316      	movs	r3, #22
 8019142:	6003      	str	r3, [r0, #0]
 8019144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019148:	bd38      	pop	{r3, r4, r5, pc}
 801914a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801914c:	b112      	cbz	r2, 8019154 <_raise_r+0x1e>
 801914e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019152:	b94b      	cbnz	r3, 8019168 <_raise_r+0x32>
 8019154:	4620      	mov	r0, r4
 8019156:	f000 f853 	bl	8019200 <_getpid_r>
 801915a:	462a      	mov	r2, r5
 801915c:	4601      	mov	r1, r0
 801915e:	4620      	mov	r0, r4
 8019160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019164:	f000 b83a 	b.w	80191dc <_kill_r>
 8019168:	2b01      	cmp	r3, #1
 801916a:	d00a      	beq.n	8019182 <_raise_r+0x4c>
 801916c:	1c59      	adds	r1, r3, #1
 801916e:	d103      	bne.n	8019178 <_raise_r+0x42>
 8019170:	2316      	movs	r3, #22
 8019172:	6003      	str	r3, [r0, #0]
 8019174:	2001      	movs	r0, #1
 8019176:	e7e7      	b.n	8019148 <_raise_r+0x12>
 8019178:	2400      	movs	r4, #0
 801917a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801917e:	4628      	mov	r0, r5
 8019180:	4798      	blx	r3
 8019182:	2000      	movs	r0, #0
 8019184:	e7e0      	b.n	8019148 <_raise_r+0x12>
	...

08019188 <raise>:
 8019188:	4b02      	ldr	r3, [pc, #8]	; (8019194 <raise+0xc>)
 801918a:	4601      	mov	r1, r0
 801918c:	6818      	ldr	r0, [r3, #0]
 801918e:	f7ff bfd2 	b.w	8019136 <_raise_r>
 8019192:	bf00      	nop
 8019194:	2000012c 	.word	0x2000012c

08019198 <_fstat_r>:
 8019198:	b538      	push	{r3, r4, r5, lr}
 801919a:	4d07      	ldr	r5, [pc, #28]	; (80191b8 <_fstat_r+0x20>)
 801919c:	2300      	movs	r3, #0
 801919e:	4604      	mov	r4, r0
 80191a0:	4608      	mov	r0, r1
 80191a2:	4611      	mov	r1, r2
 80191a4:	602b      	str	r3, [r5, #0]
 80191a6:	f7e8 fd78 	bl	8001c9a <_fstat>
 80191aa:	1c43      	adds	r3, r0, #1
 80191ac:	d102      	bne.n	80191b4 <_fstat_r+0x1c>
 80191ae:	682b      	ldr	r3, [r5, #0]
 80191b0:	b103      	cbz	r3, 80191b4 <_fstat_r+0x1c>
 80191b2:	6023      	str	r3, [r4, #0]
 80191b4:	bd38      	pop	{r3, r4, r5, pc}
 80191b6:	bf00      	nop
 80191b8:	2000e4bc 	.word	0x2000e4bc

080191bc <_isatty_r>:
 80191bc:	b538      	push	{r3, r4, r5, lr}
 80191be:	4d06      	ldr	r5, [pc, #24]	; (80191d8 <_isatty_r+0x1c>)
 80191c0:	2300      	movs	r3, #0
 80191c2:	4604      	mov	r4, r0
 80191c4:	4608      	mov	r0, r1
 80191c6:	602b      	str	r3, [r5, #0]
 80191c8:	f7e8 fd77 	bl	8001cba <_isatty>
 80191cc:	1c43      	adds	r3, r0, #1
 80191ce:	d102      	bne.n	80191d6 <_isatty_r+0x1a>
 80191d0:	682b      	ldr	r3, [r5, #0]
 80191d2:	b103      	cbz	r3, 80191d6 <_isatty_r+0x1a>
 80191d4:	6023      	str	r3, [r4, #0]
 80191d6:	bd38      	pop	{r3, r4, r5, pc}
 80191d8:	2000e4bc 	.word	0x2000e4bc

080191dc <_kill_r>:
 80191dc:	b538      	push	{r3, r4, r5, lr}
 80191de:	4d07      	ldr	r5, [pc, #28]	; (80191fc <_kill_r+0x20>)
 80191e0:	2300      	movs	r3, #0
 80191e2:	4604      	mov	r4, r0
 80191e4:	4608      	mov	r0, r1
 80191e6:	4611      	mov	r1, r2
 80191e8:	602b      	str	r3, [r5, #0]
 80191ea:	f7e8 fcf7 	bl	8001bdc <_kill>
 80191ee:	1c43      	adds	r3, r0, #1
 80191f0:	d102      	bne.n	80191f8 <_kill_r+0x1c>
 80191f2:	682b      	ldr	r3, [r5, #0]
 80191f4:	b103      	cbz	r3, 80191f8 <_kill_r+0x1c>
 80191f6:	6023      	str	r3, [r4, #0]
 80191f8:	bd38      	pop	{r3, r4, r5, pc}
 80191fa:	bf00      	nop
 80191fc:	2000e4bc 	.word	0x2000e4bc

08019200 <_getpid_r>:
 8019200:	f7e8 bce4 	b.w	8001bcc <_getpid>

08019204 <_init>:
 8019204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019206:	bf00      	nop
 8019208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801920a:	bc08      	pop	{r3}
 801920c:	469e      	mov	lr, r3
 801920e:	4770      	bx	lr

08019210 <_fini>:
 8019210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019212:	bf00      	nop
 8019214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019216:	bc08      	pop	{r3}
 8019218:	469e      	mov	lr, r3
 801921a:	4770      	bx	lr
