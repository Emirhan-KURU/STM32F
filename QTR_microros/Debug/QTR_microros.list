
QTR_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  08012ab8  08012ab8  00022ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013750  08013750  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08013750  08013750  00023750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013758  08013758  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013758  08013758  00023758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013760  08013760  00023760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08013764  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          0000dcbc  20000110  20000110  00030110  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000ddcc  2000ddcc  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016bdc  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003af4  00000000  00000000  00046d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001238  00000000  00000000  0004a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000de8  00000000  00000000  0004bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000882f  00000000  00000000  0004c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016d66  00000000  00000000  000550d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4253  00000000  00000000  0006be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000582c  00000000  00000000  00150090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001558bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012a9c 	.word	0x08012a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08012a9c 	.word	0x08012a9c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bb 	b.w	8000638 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b970 	b.w	8000638 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	460d      	mov	r5, r1
 8000378:	4604      	mov	r4, r0
 800037a:	460f      	mov	r7, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4694      	mov	ip, r2
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0xe2>
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	b143      	cbz	r3, 800039e <__udivmoddi4+0x2e>
 800038c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000390:	f1c3 0220 	rsb	r2, r3, #32
 8000394:	409f      	lsls	r7, r3
 8000396:	fa20 f202 	lsr.w	r2, r0, r2
 800039a:	4317      	orrs	r7, r2
 800039c:	409c      	lsls	r4, r3
 800039e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a2:	fa1f f58c 	uxth.w	r5, ip
 80003a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003aa:	0c22      	lsrs	r2, r4, #16
 80003ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80003b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003b4:	fb01 f005 	mul.w	r0, r1, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003c4:	f080 811c 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003c8:	4290      	cmp	r0, r2
 80003ca:	f240 8119 	bls.w	8000600 <__udivmoddi4+0x290>
 80003ce:	3902      	subs	r1, #2
 80003d0:	4462      	add	r2, ip
 80003d2:	1a12      	subs	r2, r2, r0
 80003d4:	b2a4      	uxth	r4, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e2:	fb00 f505 	mul.w	r5, r0, r5
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d90a      	bls.n	8000400 <__udivmoddi4+0x90>
 80003ea:	eb1c 0404 	adds.w	r4, ip, r4
 80003ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f2:	f080 8107 	bcs.w	8000604 <__udivmoddi4+0x294>
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	f240 8104 	bls.w	8000604 <__udivmoddi4+0x294>
 80003fc:	4464      	add	r4, ip
 80003fe:	3802      	subs	r0, #2
 8000400:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	2100      	movs	r1, #0
 8000408:	b11e      	cbz	r6, 8000412 <__udivmoddi4+0xa2>
 800040a:	40dc      	lsrs	r4, r3
 800040c:	2300      	movs	r3, #0
 800040e:	e9c6 4300 	strd	r4, r3, [r6]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0xbc>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80ed 	beq.w	80005fa <__udivmoddi4+0x28a>
 8000420:	2100      	movs	r1, #0
 8000422:	e9c6 0500 	strd	r0, r5, [r6]
 8000426:	4608      	mov	r0, r1
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	fab3 f183 	clz	r1, r3
 8000430:	2900      	cmp	r1, #0
 8000432:	d149      	bne.n	80004c8 <__udivmoddi4+0x158>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d302      	bcc.n	800043e <__udivmoddi4+0xce>
 8000438:	4282      	cmp	r2, r0
 800043a:	f200 80f8 	bhi.w	800062e <__udivmoddi4+0x2be>
 800043e:	1a84      	subs	r4, r0, r2
 8000440:	eb65 0203 	sbc.w	r2, r5, r3
 8000444:	2001      	movs	r0, #1
 8000446:	4617      	mov	r7, r2
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0e2      	beq.n	8000412 <__udivmoddi4+0xa2>
 800044c:	e9c6 4700 	strd	r4, r7, [r6]
 8000450:	e7df      	b.n	8000412 <__udivmoddi4+0xa2>
 8000452:	b902      	cbnz	r2, 8000456 <__udivmoddi4+0xe6>
 8000454:	deff      	udf	#255	; 0xff
 8000456:	fab2 f382 	clz	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8090 	bne.w	8000580 <__udivmoddi4+0x210>
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000466:	fa1f fe8c 	uxth.w	lr, ip
 800046a:	2101      	movs	r1, #1
 800046c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000470:	fb07 2015 	mls	r0, r7, r5, r2
 8000474:	0c22      	lsrs	r2, r4, #16
 8000476:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800047a:	fb0e f005 	mul.w	r0, lr, r5
 800047e:	4290      	cmp	r0, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x124>
 8000482:	eb1c 0202 	adds.w	r2, ip, r2
 8000486:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4290      	cmp	r0, r2
 800048e:	f200 80cb 	bhi.w	8000628 <__udivmoddi4+0x2b8>
 8000492:	4645      	mov	r5, r8
 8000494:	1a12      	subs	r2, r2, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb2 f0f7 	udiv	r0, r2, r7
 800049c:	fb07 2210 	mls	r2, r7, r0, r2
 80004a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004a4:	fb0e fe00 	mul.w	lr, lr, r0
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x14e>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x14c>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f200 80bb 	bhi.w	8000632 <__udivmoddi4+0x2c2>
 80004bc:	4610      	mov	r0, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004c6:	e79f      	b.n	8000408 <__udivmoddi4+0x98>
 80004c8:	f1c1 0720 	rsb	r7, r1, #32
 80004cc:	408b      	lsls	r3, r1
 80004ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80004d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004d6:	fa05 f401 	lsl.w	r4, r5, r1
 80004da:	fa20 f307 	lsr.w	r3, r0, r7
 80004de:	40fd      	lsrs	r5, r7
 80004e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	fb09 5518 	mls	r5, r9, r8, r5
 80004f2:	0c1c      	lsrs	r4, r3, #16
 80004f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004f8:	fb08 f50e 	mul.w	r5, r8, lr
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000502:	fa00 f001 	lsl.w	r0, r0, r1
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000510:	f080 8088 	bcs.w	8000624 <__udivmoddi4+0x2b4>
 8000514:	42a5      	cmp	r5, r4
 8000516:	f240 8085 	bls.w	8000624 <__udivmoddi4+0x2b4>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	4464      	add	r4, ip
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	b29d      	uxth	r5, r3
 8000524:	fbb4 f3f9 	udiv	r3, r4, r9
 8000528:	fb09 4413 	mls	r4, r9, r3, r4
 800052c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000530:	fb03 fe0e 	mul.w	lr, r3, lr
 8000534:	45a6      	cmp	lr, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000540:	d26c      	bcs.n	800061c <__udivmoddi4+0x2ac>
 8000542:	45a6      	cmp	lr, r4
 8000544:	d96a      	bls.n	800061c <__udivmoddi4+0x2ac>
 8000546:	3b02      	subs	r3, #2
 8000548:	4464      	add	r4, ip
 800054a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054e:	fba3 9502 	umull	r9, r5, r3, r2
 8000552:	eba4 040e 	sub.w	r4, r4, lr
 8000556:	42ac      	cmp	r4, r5
 8000558:	46c8      	mov	r8, r9
 800055a:	46ae      	mov	lr, r5
 800055c:	d356      	bcc.n	800060c <__udivmoddi4+0x29c>
 800055e:	d053      	beq.n	8000608 <__udivmoddi4+0x298>
 8000560:	b156      	cbz	r6, 8000578 <__udivmoddi4+0x208>
 8000562:	ebb0 0208 	subs.w	r2, r0, r8
 8000566:	eb64 040e 	sbc.w	r4, r4, lr
 800056a:	fa04 f707 	lsl.w	r7, r4, r7
 800056e:	40ca      	lsrs	r2, r1
 8000570:	40cc      	lsrs	r4, r1
 8000572:	4317      	orrs	r7, r2
 8000574:	e9c6 7400 	strd	r7, r4, [r6]
 8000578:	4618      	mov	r0, r3
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	f1c3 0120 	rsb	r1, r3, #32
 8000584:	fa02 fc03 	lsl.w	ip, r2, r3
 8000588:	fa20 f201 	lsr.w	r2, r0, r1
 800058c:	fa25 f101 	lsr.w	r1, r5, r1
 8000590:	409d      	lsls	r5, r3
 8000592:	432a      	orrs	r2, r5
 8000594:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a0:	fb07 1510 	mls	r5, r7, r0, r1
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005aa:	fb00 f50e 	mul.w	r5, r0, lr
 80005ae:	428d      	cmp	r5, r1
 80005b0:	fa04 f403 	lsl.w	r4, r4, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x258>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005be:	d22f      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d92d      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005c4:	3802      	subs	r0, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1b49      	subs	r1, r1, r5
 80005ca:	b292      	uxth	r2, r2
 80005cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005d0:	fb07 1115 	mls	r1, r7, r5, r1
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	fb05 f10e 	mul.w	r1, r5, lr
 80005dc:	4291      	cmp	r1, r2
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x282>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005e8:	d216      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 80005ea:	4291      	cmp	r1, r2
 80005ec:	d914      	bls.n	8000618 <__udivmoddi4+0x2a8>
 80005ee:	3d02      	subs	r5, #2
 80005f0:	4462      	add	r2, ip
 80005f2:	1a52      	subs	r2, r2, r1
 80005f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005f8:	e738      	b.n	800046c <__udivmoddi4+0xfc>
 80005fa:	4631      	mov	r1, r6
 80005fc:	4630      	mov	r0, r6
 80005fe:	e708      	b.n	8000412 <__udivmoddi4+0xa2>
 8000600:	4639      	mov	r1, r7
 8000602:	e6e6      	b.n	80003d2 <__udivmoddi4+0x62>
 8000604:	4610      	mov	r0, r2
 8000606:	e6fb      	b.n	8000400 <__udivmoddi4+0x90>
 8000608:	4548      	cmp	r0, r9
 800060a:	d2a9      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 800060c:	ebb9 0802 	subs.w	r8, r9, r2
 8000610:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000614:	3b01      	subs	r3, #1
 8000616:	e7a3      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000618:	4645      	mov	r5, r8
 800061a:	e7ea      	b.n	80005f2 <__udivmoddi4+0x282>
 800061c:	462b      	mov	r3, r5
 800061e:	e794      	b.n	800054a <__udivmoddi4+0x1da>
 8000620:	4640      	mov	r0, r8
 8000622:	e7d1      	b.n	80005c8 <__udivmoddi4+0x258>
 8000624:	46d0      	mov	r8, sl
 8000626:	e77b      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000628:	3d02      	subs	r5, #2
 800062a:	4462      	add	r2, ip
 800062c:	e732      	b.n	8000494 <__udivmoddi4+0x124>
 800062e:	4608      	mov	r0, r1
 8000630:	e70a      	b.n	8000448 <__udivmoddi4+0xd8>
 8000632:	4464      	add	r4, ip
 8000634:	3802      	subs	r0, #2
 8000636:	e742      	b.n	80004be <__udivmoddi4+0x14e>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000648:	f006 f800 	bl	800664c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800064c:	4b58      	ldr	r3, [pc, #352]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000654:	f000 f980 	bl	8000958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000658:	4b56      	ldr	r3, [pc, #344]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	f040 808e 	bne.w	8000782 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01d      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800066c:	2208      	movs	r2, #8
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	2b00      	cmp	r3, #0
 800067c:	d014      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 0307 	bic.w	r3, r3, #7
 8000684:	3308      	adds	r3, #8
 8000686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00a      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d069      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d864      	bhi.n	8000782 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c2:	e004      	b.n	80006ce <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d903      	bls.n	80006e0 <pvPortMallocMicroROS+0xa4>
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f1      	bne.n	80006c4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d04b      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2208      	movs	r2, #8
 80006f0:	4413      	add	r3, r2
 80006f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1ad2      	subs	r2, r2, r3
 8000704:	2308      	movs	r3, #8
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	429a      	cmp	r2, r3
 800070a:	d91f      	bls.n	800074c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800070c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00a      	beq.n	8000734 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f3bf 8f6f 	isb	sy
 800072a:	f3bf 8f4f 	dsb	sy
 800072e:	613b      	str	r3, [r7, #16]
}
 8000730:	bf00      	nop
 8000732:	e7fe      	b.n	8000732 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000746:	69b8      	ldr	r0, [r7, #24]
 8000748:	f000 f968 	bl	8000a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d203      	bcs.n	800076e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 800076c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	431a      	orrs	r2, r3
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000782:	f005 ff71 	bl	8006668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	60fb      	str	r3, [r7, #12]
}
 80007a2:	bf00      	nop
 80007a4:	e7fe      	b.n	80007a4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007a6:	69fb      	ldr	r3, [r7, #28]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20003d34 	.word	0x20003d34
 80007b4:	20003d40 	.word	0x20003d40
 80007b8:	20003d38 	.word	0x20003d38
 80007bc:	20003d2c 	.word	0x20003d2c
 80007c0:	20003d3c 	.word	0x20003d3c

080007c4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d048      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d6:	2308      	movs	r3, #8
 80007d8:	425b      	negs	r3, r3
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <vPortFreeMicroROS+0xac>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <vPortFreeMicroROS+0x44>
	__asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	60fb      	str	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00a      	beq.n	8000826 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	f3bf 8f6f 	isb	sy
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	60bb      	str	r3, [r7, #8]
}
 8000822:	bf00      	nop
 8000824:	e7fe      	b.n	8000824 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <vPortFreeMicroROS+0xac>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <vPortFreeMicroROS+0xac>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800084c:	f005 fefe 	bl	800664c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <vPortFreeMicroROS+0xb0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <vPortFreeMicroROS+0xb0>)
 800085c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f000 f8dc 	bl	8000a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000864:	f005 ff00 	bl	8006668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20003d40 	.word	0x20003d40
 8000874:	20003d38 	.word	0x20003d38

08000878 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000884:	2308      	movs	r3, #8
 8000886:	425b      	negs	r3, r3
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <getBlockSize+0x38>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	return count;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20003d40 	.word	0x20003d40

080008b4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008be:	f005 fec5 	bl	800664c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff feba 	bl	800063c <pvPortMallocMicroROS>
 80008c8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffce 	bl	8000878 <getBlockSize>
 80008dc:	4603      	mov	r3, r0
 80008de:	2208      	movs	r2, #8
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d201      	bcs.n	80008f0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f011 f9d9 	bl	8011cac <memcpy>

		vPortFreeMicroROS(pv);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff62 	bl	80007c4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000900:	f005 feb2 	bl	8006668 <xTaskResumeAll>

	return newmem;
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000918:	f005 fe98 	bl	800664c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff fe88 	bl	800063c <pvPortMallocMicroROS>
 800092c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000932:	e004      	b.n	800093e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	617a      	str	r2, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000948:	f005 fe8e 	bl	8006668 <xTaskResumeAll>
  	return mem;
 800094c:	68fb      	ldr	r3, [r7, #12]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <prvHeapInit+0xac>)
 8000966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3307      	adds	r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <prvHeapInit+0xac>)
 8000988:	4413      	add	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <prvHeapInit+0xb0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <prvHeapInit+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009a4:	2208      	movs	r2, #8
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <prvHeapInit+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <prvHeapInit+0xb4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <prvHeapInit+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <prvHeapInit+0xb4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <prvHeapInit+0xb8>)
 80009e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <prvHeapInit+0xbc>)
 80009ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <prvHeapInit+0xc0>)
 80009f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	2000012c 	.word	0x2000012c
 8000a08:	20003d2c 	.word	0x20003d2c
 8000a0c:	20003d34 	.word	0x20003d34
 8000a10:	20003d3c 	.word	0x20003d3c
 8000a14:	20003d38 	.word	0x20003d38
 8000a18:	20003d40 	.word	0x20003d40

08000a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <prvInsertBlockIntoFreeList+0xac>)
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <prvInsertBlockIntoFreeList+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d108      	bne.n	8000a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	441a      	add	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d118      	bne.n	8000aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00d      	beq.n	8000a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e008      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e003      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20003d2c 	.word	0x20003d2c
 8000acc:	20003d34 	.word	0x20003d34

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad4:	f001 f83e 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad8:	f000 f828 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000adc:	f000 f9b6 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae0:	f000 f96e 	bl	8000dc0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ae4:	f000 f88c 	bl	8000c00 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ae8:	f000 f8ec 	bl	8000cc4 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000aec:	f000 f93e 	bl	8000d6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <main+0x48>)
 8000af2:	f001 fa75 	bl	8001fe0 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8000af6:	4809      	ldr	r0, [pc, #36]	; (8000b1c <main+0x4c>)
 8000af8:	f001 fa72 	bl	8001fe0 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000afc:	f004 fc9e 	bl	800543c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <main+0x50>)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <main+0x54>)
 8000b06:	f004 fce3 	bl	80054d0 <osThreadNew>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <main+0x58>)
 8000b0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b10:	f004 fcb8 	bl	8005484 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x44>
 8000b16:	bf00      	nop
 8000b18:	20003d44 	.word	0x20003d44
 8000b1c:	20003d8c 	.word	0x20003d8c
 8000b20:	08012b58 	.word	0x08012b58
 8000b24:	08000ed5 	.word	0x08000ed5
 8000b28:	20003f98 	.word	0x20003f98

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b094      	sub	sp, #80	; 0x50
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f010 ffee 	bl	8011b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <SystemClock_Config+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <SystemClock_Config+0xd0>)
 8000b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <SystemClock_Config+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ba0:	23a8      	movs	r3, #168	; 0xa8
 8000ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 fd07 	bl	80035c4 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bbc:	f000 fa60 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2105      	movs	r1, #5
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 ff68 	bl	8003ab4 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bea:	f000 fa49 	bl	8001080 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c14:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <MX_ADC1_Init+0xbc>)
 8000c16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c44:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <MX_ADC1_Init+0xc0>)
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c64:	f000 ffe8 	bl	8001c38 <HAL_ADC_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000c6e:	f000 fa07 	bl	8001080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4619      	mov	r1, r3
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c84:	f001 fbc6 	bl	8002414 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c8e:	f000 f9f7 	bl	8001080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000ca0:	f001 fbb8 	bl	8002414 <HAL_ADC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000caa:	f000 f9e9 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20003d44 	.word	0x20003d44
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	0f000001 	.word	0x0f000001

08000cc4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000cd8:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <MX_ADC2_Init+0xa0>)
 8000cda:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ce2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <MX_ADC2_Init+0xa4>)
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d28:	f000 ff86 	bl	8001c38 <HAL_ADC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000d32:	f000 f9a5 	bl	8001080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_ADC2_Init+0x9c>)
 8000d48:	f001 fb64 	bl	8002414 <HAL_ADC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000d52:	f000 f995 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20003d8c 	.word	0x20003d8c
 8000d64:	40012100 	.word	0x40012100
 8000d68:	0f000001 	.word	0x0f000001

08000d6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <MX_USART2_UART_Init+0x50>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f003 f8a6 	bl	8003ef4 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dae:	f000 f967 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20003e94 	.word	0x20003e94
 8000dbc:	40004400 	.word	0x40004400

08000dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_DMA_Init+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_DMA_Init+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2010      	movs	r0, #16
 8000e04:	f001 fe09 	bl	8002a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e08:	2010      	movs	r0, #16
 8000e0a:	f001 fe22 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	2011      	movs	r0, #17
 8000e14:	f001 fe01 	bl	8002a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f001 fe1a 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	2038      	movs	r0, #56	; 0x38
 8000e24:	f001 fdf9 	bl	8002a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e28:	2038      	movs	r0, #56	; 0x38
 8000e2a:	f001 fe12 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	203a      	movs	r0, #58	; 0x3a
 8000e34:	f001 fdf1 	bl	8002a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e38:	203a      	movs	r0, #58	; 0x3a
 8000e3a:	f001 fe0a 	bl	8002a52 <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b0aa      	sub	sp, #168	; 0xa8
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000edc:	4b56      	ldr	r3, [pc, #344]	; (8001038 <StartDefaultTask+0x164>)
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	4b56      	ldr	r3, [pc, #344]	; (800103c <StartDefaultTask+0x168>)
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	4b56      	ldr	r3, [pc, #344]	; (8001040 <StartDefaultTask+0x16c>)
 8000ee6:	4a57      	ldr	r2, [pc, #348]	; (8001044 <StartDefaultTask+0x170>)
 8000ee8:	4957      	ldr	r1, [pc, #348]	; (8001048 <StartDefaultTask+0x174>)
 8000eea:	2001      	movs	r0, #1
 8000eec:	f007 fa80 	bl	80083f0 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000ef0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 f9fd 	bl	80082f4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000efa:	4b54      	ldr	r3, [pc, #336]	; (800104c <StartDefaultTask+0x178>)
 8000efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000f00:	4b53      	ldr	r3, [pc, #332]	; (8001050 <StartDefaultTask+0x17c>)
 8000f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000f06:	4b53      	ldr	r3, [pc, #332]	; (8001054 <StartDefaultTask+0x180>)
 8000f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000f0c:	4b52      	ldr	r3, [pc, #328]	; (8001058 <StartDefaultTask+0x184>)
 8000f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f12:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f16:	4618      	mov	r0, r3
 8000f18:	f007 f9fa 	bl	8008310 <rcutils_set_default_allocator>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f083 0301 	eor.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <StartDefaultTask+0x5e>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000f28:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8000f2c:	484b      	ldr	r0, [pc, #300]	; (800105c <StartDefaultTask+0x188>)
 8000f2e:	f010 fd33 	bl	8011998 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rcl_subscription_t subscriber;
	  //rclc_executor_t executor;

	  allocator = rcl_get_default_allocator();
 8000f32:	463b      	mov	r3, r7
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fa09 	bl	800834c <rcutils_get_default_allocator>
 8000f3a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000f3e:	463d      	mov	r5, r7
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000f48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f4c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	f007 f8d8 	bl	8008108 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "STM32_Discovery", &support);
 8000f58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f5c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f60:	4a3f      	ldr	r2, [pc, #252]	; (8001060 <StartDefaultTask+0x18c>)
 8000f62:	4940      	ldr	r1, [pc, #256]	; (8001064 <StartDefaultTask+0x190>)
 8000f64:	f007 f91a 	bl	800819c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8000f68:	f007 fec8 	bl	8008cfc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f72:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8000f76:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <StartDefaultTask+0x194>)
 8000f78:	f007 f94c 	bl	8008214 <rclc_publisher_init_default>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "QTR_FM");

	  //create subscriber
	  rclc_subscription_init_default(
 8000f7c:	f007 febe 	bl	8008cfc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <StartDefaultTask+0x198>)
 8000f8c:	f007 f976 	bl	800827c <rclc_subscription_init_default>
		&subscriber,
		msg,
		&subscription_callback,
		ON_NEW_DATA);*/

	  msg[0].data = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	67bb      	str	r3, [r7, #120]	; 0x78
	  msg[1].data = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	67fb      	str	r3, [r7, #124]	; 0x7c

	  for(;;)
	  {

		    HAL_ADC_Start(&hadc1);
 8000f98:	4835      	ldr	r0, [pc, #212]	; (8001070 <StartDefaultTask+0x19c>)
 8000f9a:	f000 fe91 	bl	8001cc0 <HAL_ADC_Start>

		    if (HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
 8000f9e:	4935      	ldr	r1, [pc, #212]	; (8001074 <StartDefaultTask+0x1a0>)
 8000fa0:	4833      	ldr	r0, [pc, #204]	; (8001070 <StartDefaultTask+0x19c>)
 8000fa2:	f000 ff92 	bl	8001eca <HAL_ADC_PollForConversion>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d104      	bne.n	8000fb6 <StartDefaultTask+0xe2>
		    	msg[0].data = HAL_ADC_GetValue(&hadc1);
 8000fac:	4830      	ldr	r0, [pc, #192]	; (8001070 <StartDefaultTask+0x19c>)
 8000fae:	f001 fa05 	bl	80023bc <HAL_ADC_GetValue>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	67bb      	str	r3, [r7, #120]	; 0x78

		    HAL_ADC_Stop(&hadc1);
 8000fb6:	482e      	ldr	r0, [pc, #184]	; (8001070 <StartDefaultTask+0x19c>)
 8000fb8:	f000 ff54 	bl	8001e64 <HAL_ADC_Stop>
		    HAL_ADC_Start(&hadc2);
 8000fbc:	482e      	ldr	r0, [pc, #184]	; (8001078 <StartDefaultTask+0x1a4>)
 8000fbe:	f000 fe7f 	bl	8001cc0 <HAL_ADC_Start>

		    if (HAL_ADC_PollForConversion(&hadc2, 100000) == HAL_OK)
 8000fc2:	492c      	ldr	r1, [pc, #176]	; (8001074 <StartDefaultTask+0x1a0>)
 8000fc4:	482c      	ldr	r0, [pc, #176]	; (8001078 <StartDefaultTask+0x1a4>)
 8000fc6:	f000 ff80 	bl	8001eca <HAL_ADC_PollForConversion>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <StartDefaultTask+0x106>
		    	msg[1].data = HAL_ADC_GetValue(&hadc2);
 8000fd0:	4829      	ldr	r0, [pc, #164]	; (8001078 <StartDefaultTask+0x1a4>)
 8000fd2:	f001 f9f3 	bl	80023bc <HAL_ADC_GetValue>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	67fb      	str	r3, [r7, #124]	; 0x7c

		    HAL_ADC_Stop(&hadc2);
 8000fda:	4827      	ldr	r0, [pc, #156]	; (8001078 <StartDefaultTask+0x1a4>)
 8000fdc:	f000 ff42 	bl	8001e64 <HAL_ADC_Stop>
	    if (ret != RCL_RET_OK)
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
	    }*/

		    rcl_ret_t ret =rcl_publish(&publisher, &msg[1], NULL);
 8000fe0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fe4:	1d19      	adds	r1, r3, #4
 8000fe6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fea:	2200      	movs	r2, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 f867 	bl	80080c0 <rcl_publish>
 8000ff2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		    if (ret != RCL_RET_OK)
 8000ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <StartDefaultTask+0x134>
		    {
		    	printf("Error publishing (line %d)\n", __LINE__);
 8000ffe:	f240 212d 	movw	r1, #557	; 0x22d
 8001002:	481e      	ldr	r0, [pc, #120]	; (800107c <StartDefaultTask+0x1a8>)
 8001004:	f010 fcc8 	bl	8011998 <iprintf>
		    }
		    rcl_ret_t ret2 = rcl_publish(&publisher, &msg[0], NULL);
 8001008:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800100c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001010:	2200      	movs	r2, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f007 f854 	bl	80080c0 <rcl_publish>
 8001018:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		    if (ret2 != RCL_RET_OK)
 800101c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <StartDefaultTask+0x15a>
		    {
		    	printf("Error publishing (line %d)\n", __LINE__);
 8001024:	f240 2132 	movw	r1, #562	; 0x232
 8001028:	4814      	ldr	r0, [pc, #80]	; (800107c <StartDefaultTask+0x1a8>)
 800102a:	f010 fcb5 	bl	8011998 <iprintf>
		    }
		//rclc_executor_spin(&executor);

	    //msg.data++;
	    osDelay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f004 fae0 	bl	80055f4 <osDelay>
	  {
 8001034:	e7b0      	b.n	8000f98 <StartDefaultTask+0xc4>
 8001036:	bf00      	nop
 8001038:	08001a59 	.word	0x08001a59
 800103c:	080019f1 	.word	0x080019f1
 8001040:	080019d1 	.word	0x080019d1
 8001044:	080019a5 	.word	0x080019a5
 8001048:	20003e94 	.word	0x20003e94
 800104c:	0800108d 	.word	0x0800108d
 8001050:	080010d1 	.word	0x080010d1
 8001054:	08001109 	.word	0x08001109
 8001058:	08001175 	.word	0x08001175
 800105c:	08012ac4 	.word	0x08012ac4
 8001060:	08012aec 	.word	0x08012aec
 8001064:	08012afc 	.word	0x08012afc
 8001068:	08012b08 	.word	0x08012b08
 800106c:	08012b10 	.word	0x08012b10
 8001070:	20003d44 	.word	0x20003d44
 8001074:	000186a0 	.word	0x000186a0
 8001078:	20003d8c 	.word	0x20003d8c
 800107c:	08012b18 	.word	0x08012b18

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <microros_allocate+0x3c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <microros_allocate+0x3c>)
 80010a4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <microros_allocate+0x40>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <microros_allocate+0x40>)
 80010b4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fac0 	bl	800063c <pvPortMallocMicroROS>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20003f9c 	.word	0x20003f9c
 80010cc:	20003fa0 	.word	0x20003fa0

080010d0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00c      	beq.n	80010fa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fbc9 	bl	8000878 <getBlockSize>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <microros_deallocate+0x34>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <microros_deallocate+0x34>)
 80010f2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fb65 	bl	80007c4 <vPortFreeMicroROS>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20003fa0 	.word	0x20003fa0

08001108 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <microros_reallocate+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4413      	add	r3, r2
 800111e:	461a      	mov	r2, r3
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <microros_reallocate+0x64>)
 8001122:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <microros_reallocate+0x68>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	461a      	mov	r2, r3
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <microros_reallocate+0x68>)
 8001132:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d104      	bne.n	8001144 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f7ff fa7e 	bl	800063c <pvPortMallocMicroROS>
 8001140:	4603      	mov	r3, r0
 8001142:	e00e      	b.n	8001162 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff fb97 	bl	8000878 <getBlockSize>
 800114a:	4603      	mov	r3, r0
 800114c:	4a08      	ldr	r2, [pc, #32]	; (8001170 <microros_reallocate+0x68>)
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	461a      	mov	r2, r3
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <microros_reallocate+0x68>)
 8001156:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f7ff fbaa 	bl	80008b4 <pvPortReallocMicroROS>
 8001160:	4603      	mov	r3, r0
  }
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20003f9c 	.word	0x20003f9c
 8001170:	20003fa0 	.word	0x20003fa0

08001174 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <microros_zero_allocate+0x48>)
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	4413      	add	r3, r2
 800118e:	461a      	mov	r2, r3
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <microros_zero_allocate+0x48>)
 8001192:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <microros_zero_allocate+0x4c>)
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <microros_zero_allocate+0x4c>)
 80011a6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f7ff fbaf 	bl	800090e <pvPortCallocMicroROS>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20003f9c 	.word	0x20003f9c
 80011c0:	20003fa0 	.word	0x20003fa0
 80011c4:	00000000 	.word	0x00000000

080011c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80011c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80011da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011de:	a320      	add	r3, pc, #128	; (adr r3, 8001260 <UTILS_NanosecondsToTimespec+0x98>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff f85c 	bl	80002a0 <__aeabi_ldivmod>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80011f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f6:	a31a      	add	r3, pc, #104	; (adr r3, 8001260 <UTILS_NanosecondsToTimespec+0x98>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f850 	bl	80002a0 <__aeabi_ldivmod>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da20      	bge.n	800124e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <UTILS_NanosecondsToTimespec+0x90>)
 8001212:	fb82 1203 	smull	r1, r2, r2, r3
 8001216:	1712      	asrs	r2, r2, #28
 8001218:	17db      	asrs	r3, r3, #31
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	17c8      	asrs	r0, r1, #31
 800122a:	460c      	mov	r4, r1
 800122c:	4605      	mov	r5, r0
 800122e:	ebb2 0804 	subs.w	r8, r2, r4
 8001232:	eb63 0905 	sbc.w	r9, r3, r5
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	4906      	ldr	r1, [pc, #24]	; (800125c <UTILS_NanosecondsToTimespec+0x94>)
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	441a      	add	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]
    }
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001258:	44b82fa1 	.word	0x44b82fa1
 800125c:	3b9aca00 	.word	0x3b9aca00
 8001260:	3b9aca00 	.word	0x3b9aca00
 8001264:	00000000 	.word	0x00000000

08001268 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800126c:	b08e      	sub	sp, #56	; 0x38
 800126e:	af00      	add	r7, sp, #0
 8001270:	6278      	str	r0, [r7, #36]	; 0x24
 8001272:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001274:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001278:	2300      	movs	r3, #0
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fc64 	bl	8006b5c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	17da      	asrs	r2, r3, #31
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	61fa      	str	r2, [r7, #28]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	69b9      	ldr	r1, [r7, #24]
 80012a6:	000b      	movs	r3, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	2200      	movs	r2, #0
 80012b2:	461c      	mov	r4, r3
 80012b4:	4615      	mov	r5, r2
 80012b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012ba:	1911      	adds	r1, r2, r4
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	416b      	adcs	r3, r5
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80012ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	f04f 0400 	mov.w	r4, #0
 80012d6:	f04f 0500 	mov.w	r5, #0
 80012da:	015d      	lsls	r5, r3, #5
 80012dc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80012e0:	0154      	lsls	r4, r2, #5
 80012e2:	4622      	mov	r2, r4
 80012e4:	462b      	mov	r3, r5
 80012e6:	ebb2 0800 	subs.w	r8, r2, r0
 80012ea:	eb63 0901 	sbc.w	r9, r3, r1
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80012fa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80012fe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001302:	4690      	mov	r8, r2
 8001304:	4699      	mov	r9, r3
 8001306:	eb18 0a00 	adds.w	sl, r8, r0
 800130a:	eb49 0b01 	adc.w	fp, r9, r1
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800131a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800131e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001322:	ebb2 040a 	subs.w	r4, r2, sl
 8001326:	603c      	str	r4, [r7, #0]
 8001328:	eb63 030b 	sbc.w	r3, r3, fp
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001332:	4623      	mov	r3, r4
 8001334:	181b      	adds	r3, r3, r0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	462b      	mov	r3, r5
 800133a:	eb41 0303 	adc.w	r3, r1, r3
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	6a3a      	ldr	r2, [r7, #32]
 8001342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001346:	f7ff ff3f 	bl	80011c8 <UTILS_NanosecondsToTimespec>

    return 0;
 800134a:	2300      	movs	r3, #0
 800134c:	4618      	mov	r0, r3
 800134e:	3738      	adds	r7, #56	; 0x38
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_MspInit+0x4c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a66      	ldr	r2, [pc, #408]	; (8001560 <HAL_ADC_MspInit+0x1b8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d161      	bne.n	800148e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a64      	ldr	r2, [pc, #400]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a5d      	ldr	r2, [pc, #372]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001402:	2303      	movs	r3, #3
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4854      	ldr	r0, [pc, #336]	; (8001568 <HAL_ADC_MspInit+0x1c0>)
 8001416:	f001 ff39 	bl	800328c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800141a:	4b54      	ldr	r3, [pc, #336]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 800141c:	4a54      	ldr	r2, [pc, #336]	; (8001570 <HAL_ADC_MspInit+0x1c8>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001420:	4b52      	ldr	r3, [pc, #328]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143a:	4b4c      	ldr	r3, [pc, #304]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 800143c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800144a:	4b48      	ldr	r3, [pc, #288]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001452:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001454:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001458:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001460:	4842      	ldr	r0, [pc, #264]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001462:	f001 fb11 	bl	8002a88 <HAL_DMA_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800146c:	f7ff fe08 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a3e      	ldr	r2, [pc, #248]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
 8001476:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_ADC_MspInit+0x1c4>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2105      	movs	r1, #5
 8001480:	2012      	movs	r0, #18
 8001482:	f001 faca 	bl	8002a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001486:	2012      	movs	r0, #18
 8001488:	f001 fae3 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800148c:	e064      	b.n	8001558 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a38      	ldr	r2, [pc, #224]	; (8001574 <HAL_ADC_MspInit+0x1cc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d15f      	bne.n	8001558 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80014a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a6:	6453      	str	r3, [r2, #68]	; 0x44
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a29      	ldr	r2, [pc, #164]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_ADC_MspInit+0x1bc>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d0:	2304      	movs	r3, #4
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4821      	ldr	r0, [pc, #132]	; (8001568 <HAL_ADC_MspInit+0x1c0>)
 80014e4:	f001 fed2 	bl	800328c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014ea:	4a24      	ldr	r2, [pc, #144]	; (800157c <HAL_ADC_MspInit+0x1d4>)
 80014ec:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001508:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 800150c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001510:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001518:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 800152e:	f001 faab 	bl	8002a88 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8001538:	f7ff fda2 	bl	8001080 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001540:	639a      	str	r2, [r3, #56]	; 0x38
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_ADC_MspInit+0x1d0>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2105      	movs	r1, #5
 800154c:	2012      	movs	r0, #18
 800154e:	f001 fa64 	bl	8002a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001552:	2012      	movs	r0, #18
 8001554:	f001 fa7d 	bl	8002a52 <HAL_NVIC_EnableIRQ>
}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40012000 	.word	0x40012000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000
 800156c:	20003dd4 	.word	0x20003dd4
 8001570:	40026410 	.word	0x40026410
 8001574:	40012100 	.word	0x40012100
 8001578:	20003e34 	.word	0x20003e34
 800157c:	40026440 	.word	0x40026440

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a5b      	ldr	r2, [pc, #364]	; (800170c <HAL_UART_MspInit+0x18c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	f040 80b0 	bne.w	8001704 <HAL_UART_MspInit+0x184>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a51      	ldr	r2, [pc, #324]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6313      	str	r3, [r2, #48]	; 0x30
 80015ec:	4b48      	ldr	r3, [pc, #288]	; (8001710 <HAL_UART_MspInit+0x190>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015f8:	2308      	movs	r3, #8
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001608:	2307      	movs	r3, #7
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4840      	ldr	r0, [pc, #256]	; (8001714 <HAL_UART_MspInit+0x194>)
 8001614:	f001 fe3a 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001618:	2320      	movs	r3, #32
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4839      	ldr	r0, [pc, #228]	; (8001718 <HAL_UART_MspInit+0x198>)
 8001634:	f001 fe2a 	bl	800328c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_UART_MspInit+0x19c>)
 800163a:	4a39      	ldr	r2, [pc, #228]	; (8001720 <HAL_UART_MspInit+0x1a0>)
 800163c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_UART_MspInit+0x19c>)
 8001640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001644:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_UART_MspInit+0x19c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_UART_MspInit+0x19c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <HAL_UART_MspInit+0x19c>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_UART_MspInit+0x19c>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_UART_MspInit+0x19c>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_UART_MspInit+0x19c>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_UART_MspInit+0x19c>)
 800166e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001672:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_UART_MspInit+0x19c>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800167a:	4828      	ldr	r0, [pc, #160]	; (800171c <HAL_UART_MspInit+0x19c>)
 800167c:	f001 fa04 	bl	8002a88 <HAL_DMA_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001686:	f7ff fcfb 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_UART_MspInit+0x19c>)
 800168e:	639a      	str	r2, [r3, #56]	; 0x38
 8001690:	4a22      	ldr	r2, [pc, #136]	; (800171c <HAL_UART_MspInit+0x19c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 8001698:	4a23      	ldr	r2, [pc, #140]	; (8001728 <HAL_UART_MspInit+0x1a8>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 800169e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016a6:	2240      	movs	r2, #64	; 0x40
 80016a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016da:	f001 f9d5 	bl	8002a88 <HAL_DMA_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80016e4:	f7ff fccc 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
 80016ee:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_UART_MspInit+0x1a4>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2105      	movs	r1, #5
 80016f8:	2026      	movs	r0, #38	; 0x26
 80016fa:	f001 f98e 	bl	8002a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016fe:	2026      	movs	r0, #38	; 0x26
 8001700:	f001 f9a7 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40004400 	.word	0x40004400
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020c00 	.word	0x40020c00
 800171c:	20003ed8 	.word	0x20003ed8
 8001720:	40026088 	.word	0x40026088
 8001724:	20003f38 	.word	0x20003f38
 8001728:	400260a0 	.word	0x400260a0

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 fa4c 	bl	8001bf8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001760:	f005 fb7c 	bl	8006e5c <xTaskGetSchedulerState>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800176a:	f006 f965 	bl	8007a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Stream5_IRQHandler+0x10>)
 800177a:	f001 fb1d 	bl	8002db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20003ed8 	.word	0x20003ed8

08001788 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Stream6_IRQHandler+0x10>)
 800178e:	f001 fb13 	bl	8002db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20003f38 	.word	0x20003f38

0800179c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <ADC_IRQHandler+0x14>)
 80017a2:	f000 fcfb 	bl	800219c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <ADC_IRQHandler+0x18>)
 80017a8:	f000 fcf8 	bl	800219c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20003d44 	.word	0x20003d44
 80017b4:	20003d8c 	.word	0x20003d8c

080017b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <USART2_IRQHandler+0x10>)
 80017be:	f002 fd15 	bl	80041ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20003e94 	.word	0x20003e94

080017cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <DMA2_Stream0_IRQHandler+0x10>)
 80017d2:	f001 faf1 	bl	8002db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20003dd4 	.word	0x20003dd4

080017e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <DMA2_Stream2_IRQHandler+0x10>)
 80017e6:	f001 fae7 	bl	8002db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20003e34 	.word	0x20003e34

080017f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_kill>:

int _kill(int pid, int sig)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180e:	f010 fa19 	bl	8011c44 <__errno>
 8001812:	4603      	mov	r3, r0
 8001814:	2216      	movs	r2, #22
 8001816:	601a      	str	r2, [r3, #0]
  return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_exit>:

void _exit (int status)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffe7 	bl	8001804 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001836:	e7fe      	b.n	8001836 <_exit+0x12>

08001838 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e00a      	b.n	8001860 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184a:	f3af 8000 	nop.w
 800184e:	4601      	mov	r1, r0
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	60ba      	str	r2, [r7, #8]
 8001856:	b2ca      	uxtb	r2, r1
 8001858:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf0      	blt.n	800184a <_read+0x12>
  }

  return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e009      	b.n	8001898 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf1      	blt.n	8001884 <_write+0x12>
  }
  return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_close>:

int _close(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d2:	605a      	str	r2, [r3, #4]
  return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_isatty>:

int _isatty(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f010 f97e 	bl	8011c44 <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20020000 	.word	0x20020000
 8001974:	00000400 	.word	0x00000400
 8001978:	20003fa8 	.word	0x20003fa8
 800197c:	2000ddd0 	.word	0x2000ddd0

08001980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <SystemInit+0x20>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <SystemInit+0x20>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019b2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80019b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b8:	4904      	ldr	r1, [pc, #16]	; (80019cc <cubemx_transport_open+0x28>)
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f002 fb66 	bl	800408c <HAL_UART_Receive_DMA>
    return true;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20003fac 	.word	0x20003fac

080019d0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019de:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f002 fb83 	bl	80040ec <HAL_UART_DMAStop>
    return true;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a04:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	d11c      	bne.n	8001a4c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f002 fab8 	bl	8003f90 <HAL_UART_Transmit_DMA>
 8001a20:	4603      	mov	r3, r0
 8001a22:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a24:	e002      	b.n	8001a2c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f003 fde4 	bl	80055f4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a2c:	7cfb      	ldrb	r3, [r7, #19]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <cubemx_transport_write+0x4e>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d1f3      	bne.n	8001a26 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001a3e:	7cfb      	ldrb	r3, [r7, #19]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <cubemx_transport_write+0x58>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	e002      	b.n	8001a4e <cubemx_transport_write+0x5e>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001a4c:	2300      	movs	r3, #0
    }
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a6c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a72:	b672      	cpsid	i
}
 8001a74:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <cubemx_transport_read+0x9c>)
 8001a84:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a86:	b662      	cpsie	i
}
 8001a88:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f003 fdaf 	bl	80055f4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <cubemx_transport_read+0xa0>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <cubemx_transport_read+0x9c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d103      	bne.n	8001aaa <cubemx_transport_read+0x52>
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbe3      	blt.n	8001a72 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001aae:	e011      	b.n	8001ad4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <cubemx_transport_read+0xa0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	440b      	add	r3, r1
 8001aba:	4910      	ldr	r1, [pc, #64]	; (8001afc <cubemx_transport_read+0xa4>)
 8001abc:	5c8a      	ldrb	r2, [r1, r2]
 8001abe:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <cubemx_transport_read+0xa0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <cubemx_transport_read+0xa0>)
 8001acc:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <cubemx_transport_read+0xa0>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <cubemx_transport_read+0x9c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d003      	beq.n	8001ae8 <cubemx_transport_read+0x90>
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3e3      	bcc.n	8001ab0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200047b0 	.word	0x200047b0
 8001af8:	200047ac 	.word	0x200047ac
 8001afc:	20003fac 	.word	0x20003fac

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ff29 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f010 f88f 	bl	8011c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7fe ffcd 	bl	8000ad0 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001b44:	08013764 	.word	0x08013764
  ldr r2, =_sbss
 8001b48:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001b4c:	2000ddcc 	.word	0x2000ddcc

08001b50 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <CAN1_RX0_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 ff41 	bl	8002a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fbe6 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 ff59 	bl	8002a6e <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd4:	f000 ff21 	bl	8002a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	200047b4 	.word	0x200047b4

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200047b4 	.word	0x200047b4

08001c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e033      	b.n	8001cb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fba6 	bl	80013a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c7e:	f023 0302 	bic.w	r3, r3, #2
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fce4 	bl	8002658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ca6:	e001      	b.n	8001cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Start+0x1a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e0b2      	b.n	8001e40 <HAL_ADC_Start+0x180>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d018      	beq.n	8001d22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d00:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_ADC_Start+0x18c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_ADC_Start+0x190>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9a      	lsrs	r2, r3, #18
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d17a      	bne.n	8001e26 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6e:	d106      	bne.n	8001d7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f023 0206 	bic.w	r2, r3, #6
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_ADC_Start+0x194>)
 8001d8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d12a      	bne.n	8001dfc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_ADC_Start+0x198>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d015      	beq.n	8001ddc <HAL_ADC_Start+0x11c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <HAL_ADC_Start+0x19c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_Start+0x106>
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_ADC_Start+0x194>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <HAL_ADC_Start+0x1a0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d136      	bne.n	8001e3e <HAL_ADC_Start+0x17e>
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_ADC_Start+0x194>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d130      	bne.n	8001e3e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d129      	bne.n	8001e3e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	e020      	b.n	8001e3e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <HAL_ADC_Start+0x198>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d11b      	bne.n	8001e3e <HAL_ADC_Start+0x17e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d114      	bne.n	8001e3e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	e00b      	b.n	8001e3e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f043 0210 	orr.w	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000
 8001e5c:	40012100 	.word	0x40012100
 8001e60:	40012200 	.word	0x40012200

08001e64 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Stop+0x16>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e021      	b.n	8001ebe <HAL_ADC_Stop+0x5a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee6:	d113      	bne.n	8001f10 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e063      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f10:	f7ff fe86 	bl	8001c20 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f16:	e021      	b.n	8001f5c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f1e:	d01d      	beq.n	8001f5c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x6c>
 8001f26:	f7ff fe7b 	bl	8001c20 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d212      	bcs.n	8001f5c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d00b      	beq.n	8001f5c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f043 0204 	orr.w	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e03d      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1d6      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f06f 0212 	mvn.w	r2, #18
 8001f72:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d123      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d11f      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d111      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Start_IT+0x1a>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0bd      	b.n	8002176 <HAL_ADC_Start_IT+0x196>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d018      	beq.n	8002042 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002020:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_ADC_Start_IT+0x1a4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_ADC_Start_IT+0x1a8>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9a      	lsrs	r2, r3, #18
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002034:	e002      	b.n	800203c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3b01      	subs	r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	f040 8085 	bne.w	800215c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800207c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002090:	d106      	bne.n	80020a0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f023 0206 	bic.w	r2, r3, #6
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
 800209e:	e002      	b.n	80020a6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_ADC_Start_IT+0x1ac>)
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020ba:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ca:	f043 0320 	orr.w	r3, r3, #32
 80020ce:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12a      	bne.n	8002132 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2b      	ldr	r2, [pc, #172]	; (8002190 <HAL_ADC_Start_IT+0x1b0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d015      	beq.n	8002112 <HAL_ADC_Start_IT+0x132>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_ADC_Start_IT+0x1b4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_Start_IT+0x11c>
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_ADC_Start_IT+0x1ac>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a25      	ldr	r2, [pc, #148]	; (8002198 <HAL_ADC_Start_IT+0x1b8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d136      	bne.n	8002174 <HAL_ADC_Start_IT+0x194>
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_ADC_Start_IT+0x1ac>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d130      	bne.n	8002174 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d129      	bne.n	8002174 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	e020      	b.n	8002174 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a16      	ldr	r2, [pc, #88]	; (8002190 <HAL_ADC_Start_IT+0x1b0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d11b      	bne.n	8002174 <HAL_ADC_Start_IT+0x194>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e00b      	b.n	8002174 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000004 	.word	0x20000004
 8002188:	431bde83 	.word	0x431bde83
 800218c:	40012300 	.word	0x40012300
 8002190:	40012000 	.word	0x40012000
 8002194:	40012100 	.word	0x40012100
 8002198:	40012200 	.word	0x40012200

0800219c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d049      	beq.n	8002266 <HAL_ADC_IRQHandler+0xca>
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d046      	beq.n	8002266 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12b      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d127      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0220 	bic.w	r2, r2, #32
 8002230:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8bd 	bl	80023d6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0212 	mvn.w	r2, #18
 8002264:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d057      	beq.n	800232c <HAL_ADC_IRQHandler+0x190>
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d054      	beq.n	800232c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d139      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d12b      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d124      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11d      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d119      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fa97 	bl	8002850 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 020c 	mvn.w	r2, #12
 800232a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d017      	beq.n	8002372 <HAL_ADC_IRQHandler+0x1d6>
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d10d      	bne.n	8002372 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f841 	bl	80023ea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002380:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x218>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0220 	mvn.w	r2, #32
 80023a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f82a 	bl	80023fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f06f 0220 	mvn.w	r2, #32
 80023b2:	601a      	str	r2, [r3, #0]
  }
}
 80023b4:	bf00      	nop
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1c>
 800242c:	2302      	movs	r3, #2
 800242e:	e105      	b.n	800263c <HAL_ADC_ConfigChannel+0x228>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d925      	bls.n	800248c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43da      	mvns	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	400a      	ands	r2, r1
 8002464:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68d9      	ldr	r1, [r3, #12]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	4603      	mov	r3, r0
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4403      	add	r3, r0
 800247e:	3b1e      	subs	r3, #30
 8002480:	409a      	lsls	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	e022      	b.n	80024d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	2207      	movs	r2, #7
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	400a      	ands	r2, r1
 80024ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4403      	add	r3, r0
 80024c8:	409a      	lsls	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d824      	bhi.n	8002524 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	3b05      	subs	r3, #5
 80024ec:	221f      	movs	r2, #31
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	400a      	ands	r2, r1
 80024fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b05      	subs	r3, #5
 8002516:	fa00 f203 	lsl.w	r2, r0, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	635a      	str	r2, [r3, #52]	; 0x34
 8002522:	e04c      	b.n	80025be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d824      	bhi.n	8002576 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b23      	subs	r3, #35	; 0x23
 800253e:	221f      	movs	r2, #31
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	3b23      	subs	r3, #35	; 0x23
 8002568:	fa00 f203 	lsl.w	r2, r0, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
 8002574:	e023      	b.n	80025be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b41      	subs	r3, #65	; 0x41
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	3b41      	subs	r3, #65	; 0x41
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_ADC_ConfigChannel+0x234>)
 80025c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <HAL_ADC_ConfigChannel+0x238>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d109      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1cc>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d105      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_ADC_ConfigChannel+0x238>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d123      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x21e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d003      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x1e6>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b11      	cmp	r3, #17
 80025f8:	d11b      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b10      	cmp	r3, #16
 800260c:	d111      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_ADC_ConfigChannel+0x23c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_ADC_ConfigChannel+0x240>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9a      	lsrs	r2, r3, #18
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002624:	e002      	b.n	800262c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40012300 	.word	0x40012300
 800264c:	40012000 	.word	0x40012000
 8002650:	20000004 	.word	0x20000004
 8002654:	431bde83 	.word	0x431bde83

08002658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002660:	4b79      	ldr	r3, [pc, #484]	; (8002848 <ADC_Init+0x1f0>)
 8002662:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	431a      	orrs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800268c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	021a      	lsls	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6899      	ldr	r1, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	4a58      	ldr	r2, [pc, #352]	; (800284c <ADC_Init+0x1f4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6899      	ldr	r1, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	e00f      	b.n	8002756 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002754:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0202 	bic.w	r2, r2, #2
 8002764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7e1b      	ldrb	r3, [r3, #24]
 8002770:	005a      	lsls	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002792:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	3b01      	subs	r3, #1
 80027b0:	035a      	lsls	r2, r3, #13
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	e007      	b.n	80027cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	051a      	lsls	r2, r3, #20
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280e:	025a      	lsls	r2, r3, #9
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6899      	ldr	r1, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	029a      	lsls	r2, r3, #10
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40012300 	.word	0x40012300
 800284c:	0f000001 	.word	0x0f000001

08002850 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800288c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	60d3      	str	r3, [r2, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <__NVIC_GetPriorityGrouping+0x18>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 0307 	and.w	r3, r3, #7
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	db0b      	blt.n	80028f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <__NVIC_EnableIRQ+0x38>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2001      	movs	r0, #1
 80028ea:	fa00 f202 	lsl.w	r2, r0, r2
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e100 	.word	0xe000e100

08002904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	490c      	ldr	r1, [pc, #48]	; (8002950 <__NVIC_SetPriority+0x4c>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	440b      	add	r3, r1
 8002928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800292c:	e00a      	b.n	8002944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4908      	ldr	r1, [pc, #32]	; (8002954 <__NVIC_SetPriority+0x50>)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3b04      	subs	r3, #4
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	440b      	add	r3, r1
 8002942:	761a      	strb	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f1c3 0307 	rsb	r3, r3, #7
 8002972:	2b04      	cmp	r3, #4
 8002974:	bf28      	it	cs
 8002976:	2304      	movcs	r3, #4
 8002978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3304      	adds	r3, #4
 800297e:	2b06      	cmp	r3, #6
 8002980:	d902      	bls.n	8002988 <NVIC_EncodePriority+0x30>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3b03      	subs	r3, #3
 8002986:	e000      	b.n	800298a <NVIC_EncodePriority+0x32>
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	401a      	ands	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43d9      	mvns	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	4313      	orrs	r3, r2
         );
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d0:	d301      	bcc.n	80029d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00f      	b.n	80029f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <SysTick_Config+0x40>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029de:	210f      	movs	r1, #15
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e4:	f7ff ff8e 	bl	8002904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <SysTick_Config+0x40>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <SysTick_Config+0x40>)
 80029f0:	2207      	movs	r2, #7
 80029f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	e000e010 	.word	0xe000e010

08002a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff29 	bl	8002864 <__NVIC_SetPriorityGrouping>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a2c:	f7ff ff3e 	bl	80028ac <__NVIC_GetPriorityGrouping>
 8002a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f7ff ff8e 	bl	8002958 <NVIC_EncodePriority>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff5d 	bl	8002904 <__NVIC_SetPriority>
}
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff31 	bl	80028c8 <__NVIC_EnableIRQ>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ffa2 	bl	80029c0 <SysTick_Config>
 8002a7c:	4603      	mov	r3, r0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff f8c4 	bl	8001c20 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e099      	b.n	8002bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac4:	e00f      	b.n	8002ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac6:	f7ff f8ab 	bl	8001c20 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d908      	bls.n	8002ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e078      	b.n	8002bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e8      	bne.n	8002ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_DMA_Init+0x158>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d117      	bne.n	8002baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fb01 	bl	8003194 <DMA_CheckFifoParam>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e016      	b.n	8002bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fab8 	bl	8003128 <DMA_CalcBaseAndBitshift>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	223f      	movs	r2, #63	; 0x3f
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	f010803f 	.word	0xf010803f

08002be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA_Start_IT+0x26>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e040      	b.n	8002c8c <HAL_DMA_Start_IT+0xa8>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d12f      	bne.n	8002c7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fa4a 	bl	80030cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	223f      	movs	r2, #63	; 0x3f
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0216 	orr.w	r2, r2, #22
 8002c52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0208 	orr.w	r2, r2, #8
 8002c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e005      	b.n	8002c8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
 8002c88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ca2:	f7fe ffbd 	bl	8001c20 <HAL_GetTick>
 8002ca6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d008      	beq.n	8002cc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e052      	b.n	8002d6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0216 	bic.w	r2, r2, #22
 8002cd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <HAL_DMA_Abort+0x62>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0208 	bic.w	r2, r2, #8
 8002d04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d16:	e013      	b.n	8002d40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d18:	f7fe ff82 	bl	8001c20 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d90c      	bls.n	8002d40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2203      	movs	r2, #3
 8002d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e015      	b.n	8002d6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e4      	bne.n	8002d18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	223f      	movs	r2, #63	; 0x3f
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d004      	beq.n	8002d92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2280      	movs	r2, #128	; 0x80
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00c      	b.n	8002dac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2205      	movs	r2, #5
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dc4:	4b8e      	ldr	r3, [pc, #568]	; (8003000 <HAL_DMA_IRQHandler+0x248>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a8e      	ldr	r2, [pc, #568]	; (8003004 <HAL_DMA_IRQHandler+0x24c>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0a9b      	lsrs	r3, r3, #10
 8002dd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	2208      	movs	r2, #8
 8002de4:	409a      	lsls	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d01a      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0204 	bic.w	r2, r2, #4
 8002e0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	2208      	movs	r2, #8
 8002e12:	409a      	lsls	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	2201      	movs	r2, #1
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d012      	beq.n	8002e5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2201      	movs	r2, #1
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f043 0202 	orr.w	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	2204      	movs	r2, #4
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	2210      	movs	r2, #16
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d043      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03c      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d018      	beq.n	8002efa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d024      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
 8002ee6:	e01f      	b.n	8002f28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
 8002ef8:	e016      	b.n	8002f28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0208 	bic.w	r2, r2, #8
 8002f16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 808f 	beq.w	8003058 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8087 	beq.w	8003058 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2220      	movs	r2, #32
 8002f50:	409a      	lsls	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d136      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0216 	bic.w	r2, r2, #22
 8002f70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x1da>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0208 	bic.w	r2, r2, #8
 8002fa0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	223f      	movs	r2, #63	; 0x3f
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d07e      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
        }
        return;
 8002fce:	e079      	b.n	80030c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01d      	beq.n	800301a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10d      	bne.n	8003008 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
 8002ffc:	e02c      	b.n	8003058 <HAL_DMA_IRQHandler+0x2a0>
 8002ffe:	bf00      	nop
 8003000:	20000004 	.word	0x20000004
 8003004:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d023      	beq.n	8003058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
 8003018:	e01e      	b.n	8003058 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10f      	bne.n	8003048 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0210 	bic.w	r2, r2, #16
 8003036:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	2b00      	cmp	r3, #0
 800305e:	d032      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2205      	movs	r2, #5
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	3301      	adds	r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	d307      	bcc.n	80030a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f2      	bne.n	8003084 <HAL_DMA_IRQHandler+0x2cc>
 800309e:	e000      	b.n	80030a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
 80030c2:	e000      	b.n	80030c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030c4:	bf00      	nop
    }
  }
}
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d108      	bne.n	800310c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800310a:	e007      	b.n	800311c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	3b10      	subs	r3, #16
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <DMA_CalcBaseAndBitshift+0x64>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <DMA_CalcBaseAndBitshift+0x68>)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d909      	bls.n	800316a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800315e:	f023 0303 	bic.w	r3, r3, #3
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	659a      	str	r2, [r3, #88]	; 0x58
 8003168:	e007      	b.n	800317a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	aaaaaaab 	.word	0xaaaaaaab
 8003190:	08012b94 	.word	0x08012b94

08003194 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11f      	bne.n	80031ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d856      	bhi.n	8003262 <DMA_CheckFifoParam+0xce>
 80031b4:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <DMA_CheckFifoParam+0x28>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031df 	.word	0x080031df
 80031c4:	080031cd 	.word	0x080031cd
 80031c8:	08003263 	.word	0x08003263
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d046      	beq.n	8003266 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031dc:	e043      	b.n	8003266 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031e6:	d140      	bne.n	800326a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ec:	e03d      	b.n	800326a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	d121      	bne.n	800323c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d837      	bhi.n	800326e <DMA_CheckFifoParam+0xda>
 80031fe:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <DMA_CheckFifoParam+0x70>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003215 	.word	0x08003215
 8003208:	0800321b 	.word	0x0800321b
 800320c:	08003215 	.word	0x08003215
 8003210:	0800322d 	.word	0x0800322d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
      break;
 8003218:	e030      	b.n	800327c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d025      	beq.n	8003272 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322a:	e022      	b.n	8003272 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003234:	d11f      	bne.n	8003276 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800323a:	e01c      	b.n	8003276 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d903      	bls.n	800324a <DMA_CheckFifoParam+0xb6>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d003      	beq.n	8003250 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003248:	e018      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      break;
 800324e:	e015      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00e      	beq.n	800327a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      break;
 8003260:	e00b      	b.n	800327a <DMA_CheckFifoParam+0xe6>
      break;
 8003262:	bf00      	nop
 8003264:	e00a      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      break;
 8003266:	bf00      	nop
 8003268:	e008      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      break;
 800326a:	bf00      	nop
 800326c:	e006      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      break;
 800326e:	bf00      	nop
 8003270:	e004      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      break;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      break;   
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
    }
  } 
  
  return status; 
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e16b      	b.n	8003580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f040 815a 	bne.w	800357a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d005      	beq.n	80032de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d130      	bne.n	8003340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	2203      	movs	r2, #3
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 0201 	and.w	r2, r3, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b03      	cmp	r3, #3
 800334a:	d017      	beq.n	800337c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d123      	bne.n	80033d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	08da      	lsrs	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3208      	adds	r2, #8
 80033ca:	69b9      	ldr	r1, [r7, #24]
 80033cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80b4 	beq.w	800357a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b60      	ldr	r3, [pc, #384]	; (8003598 <HAL_GPIO_Init+0x30c>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4a5f      	ldr	r2, [pc, #380]	; (8003598 <HAL_GPIO_Init+0x30c>)
 800341c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
 8003422:	4b5d      	ldr	r3, [pc, #372]	; (8003598 <HAL_GPIO_Init+0x30c>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800342e:	4a5b      	ldr	r2, [pc, #364]	; (800359c <HAL_GPIO_Init+0x310>)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <HAL_GPIO_Init+0x314>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02b      	beq.n	80034b2 <HAL_GPIO_Init+0x226>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a51      	ldr	r2, [pc, #324]	; (80035a4 <HAL_GPIO_Init+0x318>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d025      	beq.n	80034ae <HAL_GPIO_Init+0x222>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a50      	ldr	r2, [pc, #320]	; (80035a8 <HAL_GPIO_Init+0x31c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <HAL_GPIO_Init+0x21e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4f      	ldr	r2, [pc, #316]	; (80035ac <HAL_GPIO_Init+0x320>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d019      	beq.n	80034a6 <HAL_GPIO_Init+0x21a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_GPIO_Init+0x324>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_GPIO_Init+0x216>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4d      	ldr	r2, [pc, #308]	; (80035b4 <HAL_GPIO_Init+0x328>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00d      	beq.n	800349e <HAL_GPIO_Init+0x212>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4c      	ldr	r2, [pc, #304]	; (80035b8 <HAL_GPIO_Init+0x32c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <HAL_GPIO_Init+0x20e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4b      	ldr	r2, [pc, #300]	; (80035bc <HAL_GPIO_Init+0x330>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_GPIO_Init+0x20a>
 8003492:	2307      	movs	r3, #7
 8003494:	e00e      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 8003496:	2308      	movs	r3, #8
 8003498:	e00c      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 800349a:	2306      	movs	r3, #6
 800349c:	e00a      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 800349e:	2305      	movs	r3, #5
 80034a0:	e008      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 80034a2:	2304      	movs	r3, #4
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 80034a6:	2303      	movs	r3, #3
 80034a8:	e004      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e002      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_GPIO_Init+0x228>
 80034b2:	2300      	movs	r3, #0
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	f002 0203 	and.w	r2, r2, #3
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	4093      	lsls	r3, r2
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c4:	4935      	ldr	r1, [pc, #212]	; (800359c <HAL_GPIO_Init+0x310>)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_GPIO_Init+0x334>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f6:	4a32      	ldr	r2, [pc, #200]	; (80035c0 <HAL_GPIO_Init+0x334>)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_GPIO_Init+0x334>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <HAL_GPIO_Init+0x334>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_GPIO_Init+0x334>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_GPIO_Init+0x334>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_GPIO_Init+0x334>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003574:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <HAL_GPIO_Init+0x334>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3301      	adds	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	f67f ae90 	bls.w	80032a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3724      	adds	r7, #36	; 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	40013800 	.word	0x40013800
 80035a0:	40020000 	.word	0x40020000
 80035a4:	40020400 	.word	0x40020400
 80035a8:	40020800 	.word	0x40020800
 80035ac:	40020c00 	.word	0x40020c00
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40021400 	.word	0x40021400
 80035b8:	40021800 	.word	0x40021800
 80035bc:	40021c00 	.word	0x40021c00
 80035c0:	40013c00 	.word	0x40013c00

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e267      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d075      	beq.n	80036ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e2:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d00c      	beq.n	8003608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ee:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d112      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b82      	ldr	r3, [pc, #520]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003606:	d10b      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	4b7e      	ldr	r3, [pc, #504]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d05b      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d157      	bne.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e242      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x74>
 800362a:	4b76      	ldr	r3, [pc, #472]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a75      	ldr	r2, [pc, #468]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e01d      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x98>
 8003642:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6f      	ldr	r2, [pc, #444]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6c      	ldr	r2, [pc, #432]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a68      	ldr	r2, [pc, #416]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800366e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d013      	beq.n	80036a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fad0 	bl	8001c20 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe facc 	bl	8001c20 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e207      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0xc0>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe fabc 	bl	8001c20 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fab8 	bl	8001c20 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1f3      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	4b51      	ldr	r3, [pc, #324]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11c      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b44      	ldr	r3, [pc, #272]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1c7      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4937      	ldr	r1, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	e03a      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003734:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x244>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fe fa71 	bl	8001c20 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003742:	f7fe fa6d 	bl	8001c20 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e1a8      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003760:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4925      	ldr	r1, [pc, #148]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]
 8003774:	e015      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_RCC_OscConfig+0x244>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fa50 	bl	8001c20 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003784:	f7fe fa4c 	bl	8001c20 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e187      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d036      	beq.n	800381c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b6:	4b15      	ldr	r3, [pc, #84]	; (800380c <HAL_RCC_OscConfig+0x248>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe fa30 	bl	8001c20 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c4:	f7fe fa2c 	bl	8001c20 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e167      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80037d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x200>
 80037e2:	e01b      	b.n	800381c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_OscConfig+0x248>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fe fa19 	bl	8001c20 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f0:	e00e      	b.n	8003810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f2:	f7fe fa15 	bl	8001c20 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d907      	bls.n	8003810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e150      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
 8003804:	40023800 	.word	0x40023800
 8003808:	42470000 	.word	0x42470000
 800380c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	4b88      	ldr	r3, [pc, #544]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ea      	bne.n	80037f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8097 	beq.w	8003958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4b81      	ldr	r3, [pc, #516]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10f      	bne.n	800385a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	4b7d      	ldr	r3, [pc, #500]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a7c      	ldr	r2, [pc, #496]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b77      	ldr	r3, [pc, #476]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d118      	bne.n	8003898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003866:	4b74      	ldr	r3, [pc, #464]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a73      	ldr	r2, [pc, #460]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003872:	f7fe f9d5 	bl	8001c20 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387a:	f7fe f9d1 	bl	8001c20 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e10c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x2ea>
 80038a0:	4b64      	ldr	r3, [pc, #400]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a63      	ldr	r2, [pc, #396]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
 80038ac:	e01c      	b.n	80038e8 <HAL_RCC_OscConfig+0x324>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x30c>
 80038b6:	4b5f      	ldr	r3, [pc, #380]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a5e      	ldr	r2, [pc, #376]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	4b5c      	ldr	r3, [pc, #368]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a5b      	ldr	r2, [pc, #364]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0x324>
 80038d0:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a57      	ldr	r2, [pc, #348]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	4b55      	ldr	r3, [pc, #340]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a54      	ldr	r2, [pc, #336]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fe f996 	bl	8001c20 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe f992 	bl	8001c20 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0cb      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390e:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ee      	beq.n	80038f8 <HAL_RCC_OscConfig+0x334>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fe f980 	bl	8001c20 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fe f97c 	bl	8001c20 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0b5      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ee      	bne.n	8003924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394c:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	4a38      	ldr	r2, [pc, #224]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a1 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b08      	cmp	r3, #8
 800396c:	d05c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d141      	bne.n	80039fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_OscConfig+0x478>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe f950 	bl	8001c20 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe f94c 	bl	8001c20 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e087      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	3b01      	subs	r3, #1
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	491b      	ldr	r1, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x478>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe f925 	bl	8001c20 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe f921 	bl	8001c20 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e05c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x416>
 80039f8:	e054      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_OscConfig+0x478>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe f90e 	bl	8001c20 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe f90a 	bl	8001c20 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e045      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x444>
 8003a26:	e03d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e038      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCC_OscConfig+0x4ec>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d028      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d121      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d11a      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d111      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0cc      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d90c      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b8      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	494d      	ldr	r1, [pc, #308]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d044      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d119      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e07f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d003      	beq.n	8003b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e067      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4934      	ldr	r1, [pc, #208]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe f83c 	bl	8001c20 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fe f838 	bl	8001c20 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e04f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d20c      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e032      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4916      	ldr	r1, [pc, #88]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	490e      	ldr	r1, [pc, #56]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c3a:	f000 f821 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	490a      	ldr	r1, [pc, #40]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	5ccb      	ldrb	r3, [r1, r3]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fd ff9c 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023c00 	.word	0x40023c00
 8003c70:	40023800 	.word	0x40023800
 8003c74:	08012b7c 	.word	0x08012b7c
 8003c78:	20000004 	.word	0x20000004
 8003c7c:	20000008 	.word	0x20000008

08003c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b094      	sub	sp, #80	; 0x50
 8003c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c90:	2300      	movs	r3, #0
 8003c92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c98:	4b79      	ldr	r3, [pc, #484]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	f200 80e1 	bhi.w	8003e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x3a>
 8003cb2:	e0db      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cb8:	e0db      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cba:	4b73      	ldr	r3, [pc, #460]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cbe:	e0d8      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cca:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d063      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	099b      	lsrs	r3, r3, #6
 8003cdc:	2200      	movs	r2, #0
 8003cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cea:	2300      	movs	r3, #0
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
 8003cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	f04f 0000 	mov.w	r0, #0
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	0159      	lsls	r1, r3, #5
 8003d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d04:	0150      	lsls	r0, r2, #5
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	1a51      	subs	r1, r2, r1
 8003d0e:	6139      	str	r1, [r7, #16]
 8003d10:	4629      	mov	r1, r5
 8003d12:	eb63 0301 	sbc.w	r3, r3, r1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d24:	4659      	mov	r1, fp
 8003d26:	018b      	lsls	r3, r1, #6
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d2e:	4651      	mov	r1, sl
 8003d30:	018a      	lsls	r2, r1, #6
 8003d32:	4651      	mov	r1, sl
 8003d34:	ebb2 0801 	subs.w	r8, r2, r1
 8003d38:	4659      	mov	r1, fp
 8003d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d52:	4690      	mov	r8, r2
 8003d54:	4699      	mov	r9, r3
 8003d56:	4623      	mov	r3, r4
 8003d58:	eb18 0303 	adds.w	r3, r8, r3
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	462b      	mov	r3, r5
 8003d60:	eb49 0303 	adc.w	r3, r9, r3
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d72:	4629      	mov	r1, r5
 8003d74:	024b      	lsls	r3, r1, #9
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	024a      	lsls	r2, r1, #9
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d90:	f7fc fad6 	bl	8000340 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d9c:	e058      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	2200      	movs	r2, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	4611      	mov	r1, r2
 8003daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	2300      	movs	r3, #0
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	f04f 0000 	mov.w	r0, #0
 8003dc0:	f04f 0100 	mov.w	r1, #0
 8003dc4:	0159      	lsls	r1, r3, #5
 8003dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dca:	0150      	lsls	r0, r2, #5
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003df0:	ebb2 040a 	subs.w	r4, r2, sl
 8003df4:	eb63 050b 	sbc.w	r5, r3, fp
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	00eb      	lsls	r3, r5, #3
 8003e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e06:	00e2      	lsls	r2, r4, #3
 8003e08:	4614      	mov	r4, r2
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	4643      	mov	r3, r8
 8003e0e:	18e3      	adds	r3, r4, r3
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	464b      	mov	r3, r9
 8003e14:	eb45 0303 	adc.w	r3, r5, r3
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e26:	4629      	mov	r1, r5
 8003e28:	028b      	lsls	r3, r1, #10
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e30:	4621      	mov	r1, r4
 8003e32:	028a      	lsls	r2, r1, #10
 8003e34:	4610      	mov	r0, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	61fa      	str	r2, [r7, #28]
 8003e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e44:	f7fc fa7c 	bl	8000340 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e6a:	e002      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3750      	adds	r7, #80	; 0x50
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	00f42400 	.word	0x00f42400
 8003e88:	007a1200 	.word	0x007a1200

08003e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ea8:	f7ff fff0 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0a9b      	lsrs	r3, r3, #10
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	08012b8c 	.word	0x08012b8c

08003ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed0:	f7ff ffdc 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0b5b      	lsrs	r3, r3, #13
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4903      	ldr	r1, [pc, #12]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08012b8c 	.word	0x08012b8c

08003ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e03f      	b.n	8003f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fb30 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 ffd7 	bl	8004eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	; 0x30
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d165      	bne.n	8004076 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_Transmit_DMA+0x26>
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e05e      	b.n	8004078 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_UART_Transmit_DMA+0x38>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e057      	b.n	8004078 <HAL_UART_Transmit_DMA+0xe8>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	; 0x21
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	4a22      	ldr	r2, [pc, #136]	; (8004080 <HAL_UART_Transmit_DMA+0xf0>)
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	4a21      	ldr	r2, [pc, #132]	; (8004084 <HAL_UART_Transmit_DMA+0xf4>)
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	4a20      	ldr	r2, [pc, #128]	; (8004088 <HAL_UART_Transmit_DMA+0xf8>)
 8004006:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	2200      	movs	r2, #0
 800400e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3304      	adds	r3, #4
 8004024:	461a      	mov	r2, r3
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	f7fe fddc 	bl	8002be4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004034:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	617b      	str	r3, [r7, #20]
   return(result);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405e:	627a      	str	r2, [r7, #36]	; 0x24
 8004060:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6a39      	ldr	r1, [r7, #32]
 8004064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	61fb      	str	r3, [r7, #28]
   return(result);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3730      	adds	r7, #48	; 0x30
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	08004785 	.word	0x08004785
 8004084:	0800481f 	.word	0x0800481f
 8004088:	08004997 	.word	0x08004997

0800408c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d11d      	bne.n	80040e2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_UART_Receive_DMA+0x26>
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e016      	b.n	80040e4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Receive_DMA+0x38>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e00f      	b.n	80040e4 <HAL_UART_Receive_DMA+0x58>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	461a      	mov	r2, r3
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fca7 	bl	8004a2c <UART_Start_Receive_DMA>
 80040de:	4603      	mov	r3, r0
 80040e0:	e000      	b.n	80040e4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b090      	sub	sp, #64	; 0x40
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b21      	cmp	r3, #33	; 0x21
 8004118:	d128      	bne.n	800416c <HAL_UART_DMAStop+0x80>
 800411a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d025      	beq.n	800416c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	623b      	str	r3, [r7, #32]
   return(result);
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004140:	633a      	str	r2, [r7, #48]	; 0x30
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe fd97 	bl	8002c94 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fcfe 	bl	8004b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b22      	cmp	r3, #34	; 0x22
 800418c:	d128      	bne.n	80041e0 <HAL_UART_DMAStop+0xf4>
 800418e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d025      	beq.n	80041e0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3314      	adds	r3, #20
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	61fa      	str	r2, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	69b9      	ldr	r1, [r7, #24]
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	617b      	str	r3, [r7, #20]
   return(result);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fd5d 	bl	8002c94 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fcec 	bl	8004bb8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3740      	adds	r7, #64	; 0x40
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0ba      	sub	sp, #232	; 0xe8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800422a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_UART_IRQHandler+0x66>
 800423e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fd93 	bl	8004d76 <UART_Receive_IT>
      return;
 8004250:	e256      	b.n	8004700 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80de 	beq.w	8004418 <HAL_UART_IRQHandler+0x22c>
 800425c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80d1 	beq.w	8004418 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <HAL_UART_IRQHandler+0xae>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_UART_IRQHandler+0xd2>
 80042a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0202 	orr.w	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_UART_IRQHandler+0xf6>
 80042ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0204 	orr.w	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d011      	beq.n	8004312 <HAL_UART_IRQHandler+0x126>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f043 0208 	orr.w	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 81ed 	beq.w	80046f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800431c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_UART_IRQHandler+0x14e>
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fd1e 	bl	8004d76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_UART_IRQHandler+0x17a>
 800435e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04f      	beq.n	8004406 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fc26 	bl	8004bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d141      	bne.n	80043fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004390:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1d9      	bne.n	800437a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d013      	beq.n	80043f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	4a7d      	ldr	r2, [pc, #500]	; (80045c8 <HAL_UART_IRQHandler+0x3dc>)
 80043d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fcca 	bl	8002d74 <HAL_DMA_Abort_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043f0:	4610      	mov	r0, r2
 80043f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	e00e      	b.n	8004414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9ae 	bl	8004758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	e00a      	b.n	8004414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9aa 	bl	8004758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e006      	b.n	8004414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9a6 	bl	8004758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004412:	e170      	b.n	80046f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	bf00      	nop
    return;
 8004416:	e16e      	b.n	80046f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2b01      	cmp	r3, #1
 800441e:	f040 814a 	bne.w	80046b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8143 	beq.w	80046b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 813c 	beq.w	80046b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	f040 80b4 	bne.w	80045cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8140 	beq.w	80046fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800447e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004482:	429a      	cmp	r2, r3
 8004484:	f080 8139 	bcs.w	80046fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800448e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449a:	f000 8088 	beq.w	80045ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1d9      	bne.n	800449e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800450e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004512:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e1      	bne.n	80044ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800454a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800454c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004550:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e3      	bne.n	8004526 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800457c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457e:	f023 0310 	bic.w	r3, r3, #16
 8004582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004590:	65ba      	str	r2, [r7, #88]	; 0x58
 8004592:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004596:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800459e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e3      	bne.n	800456c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fb73 	bl	8002c94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f8d4 	bl	800476c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045c4:	e099      	b.n	80046fa <HAL_UART_IRQHandler+0x50e>
 80045c6:	bf00      	nop
 80045c8:	08004c7f 	.word	0x08004c7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 808b 	beq.w	80046fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8086 	beq.w	80046fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004616:	647a      	str	r2, [r7, #68]	; 0x44
 8004618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800461c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e3      	bne.n	80045f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	623b      	str	r3, [r7, #32]
   return(result);
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800464e:	633a      	str	r2, [r7, #48]	; 0x30
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004694:	61fa      	str	r2, [r7, #28]
 8004696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	617b      	str	r3, [r7, #20]
   return(result);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e3      	bne.n	8004670 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f85c 	bl	800476c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046b4:	e023      	b.n	80046fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_UART_IRQHandler+0x4ea>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fae9 	bl	8004ca6 <UART_Transmit_IT>
    return;
 80046d4:	e014      	b.n	8004700 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <HAL_UART_IRQHandler+0x514>
 80046e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fb29 	bl	8004d46 <UART_EndTransmit_IT>
    return;
 80046f4:	e004      	b.n	8004700 <HAL_UART_IRQHandler+0x514>
    return;
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <HAL_UART_IRQHandler+0x514>
      return;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_UART_IRQHandler+0x514>
      return;
 80046fe:	bf00      	nop
  }
}
 8004700:	37e8      	adds	r7, #232	; 0xe8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop

08004708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b090      	sub	sp, #64	; 0x40
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d137      	bne.n	8004810 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80047a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a2:	2200      	movs	r2, #0
 80047a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	623b      	str	r3, [r7, #32]
   return(result);
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3314      	adds	r3, #20
 80047c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047c6:	633a      	str	r2, [r7, #48]	; 0x30
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047fa:	61fa      	str	r2, [r7, #28]
 80047fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	69b9      	ldr	r1, [r7, #24]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	617b      	str	r3, [r7, #20]
   return(result);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800480e:	e002      	b.n	8004816 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004812:	f7ff ff79 	bl	8004708 <HAL_UART_TxCpltCallback>
}
 8004816:	bf00      	nop
 8004818:	3740      	adds	r7, #64	; 0x40
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff ff75 	bl	800471c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b09c      	sub	sp, #112	; 0x70
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d172      	bne.n	800493c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004858:	2200      	movs	r2, #0
 800485a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800486c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004872:	66bb      	str	r3, [r7, #104]	; 0x68
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800487c:	65ba      	str	r2, [r7, #88]	; 0x58
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800488a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3314      	adds	r3, #20
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	667b      	str	r3, [r7, #100]	; 0x64
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048b0:	647a      	str	r2, [r7, #68]	; 0x44
 80048b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e5      	bne.n	8004890 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	623b      	str	r3, [r7, #32]
   return(result);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	663b      	str	r3, [r7, #96]	; 0x60
 80048dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048e4:	633a      	str	r2, [r7, #48]	; 0x30
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	2b01      	cmp	r3, #1
 8004906:	d119      	bne.n	800493c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	60fb      	str	r3, [r7, #12]
   return(result);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004928:	61fa      	str	r2, [r7, #28]
 800492a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	617b      	str	r3, [r7, #20]
   return(result);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	2b01      	cmp	r3, #1
 8004942:	d106      	bne.n	8004952 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004948:	4619      	mov	r1, r3
 800494a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800494c:	f7ff ff0e 	bl	800476c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004950:	e002      	b.n	8004958 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004952:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004954:	f7ff feec 	bl	8004730 <HAL_UART_RxCpltCallback>
}
 8004958:	bf00      	nop
 800495a:	3770      	adds	r7, #112	; 0x70
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	2b01      	cmp	r3, #1
 8004974:	d108      	bne.n	8004988 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	4619      	mov	r1, r3
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff fef3 	bl	800476c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004986:	e002      	b.n	800498e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fedb 	bl	8004744 <HAL_UART_RxHalfCpltCallback>
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b21      	cmp	r3, #33	; 0x21
 80049c8:	d108      	bne.n	80049dc <UART_DMAError+0x46>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2200      	movs	r2, #0
 80049d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f000 f8c6 	bl	8004b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b22      	cmp	r3, #34	; 0x22
 80049fc:	d108      	bne.n	8004a10 <UART_DMAError+0x7a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f000 f8d4 	bl	8004bb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f043 0210 	orr.w	r2, r3, #16
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f7ff fe9b 	bl	8004758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b098      	sub	sp, #96	; 0x60
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	88fa      	ldrh	r2, [r7, #6]
 8004a44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2222      	movs	r2, #34	; 0x22
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	4a40      	ldr	r2, [pc, #256]	; (8004b5c <UART_Start_Receive_DMA+0x130>)
 8004a5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	4a3f      	ldr	r2, [pc, #252]	; (8004b60 <UART_Start_Receive_DMA+0x134>)
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	4a3e      	ldr	r2, [pc, #248]	; (8004b64 <UART_Start_Receive_DMA+0x138>)
 8004a6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a74:	f107 0308 	add.w	r3, r7, #8
 8004a78:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	f7fe f8aa 	bl	8002be4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d019      	beq.n	8004aea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ad6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e5      	bne.n	8004ab6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	657b      	str	r3, [r7, #84]	; 0x54
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b34:	653b      	str	r3, [r7, #80]	; 0x50
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b3e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6a39      	ldr	r1, [r7, #32]
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3760      	adds	r7, #96	; 0x60
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	0800483b 	.word	0x0800483b
 8004b60:	08004961 	.word	0x08004961
 8004b64:	08004997 	.word	0x08004997

08004b68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	; 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	61ba      	str	r2, [r7, #24]
 8004b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6979      	ldr	r1, [r7, #20]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e5      	bne.n	8004b70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004bac:	bf00      	nop
 8004bae:	3724      	adds	r7, #36	; 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b095      	sub	sp, #84	; 0x54
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004be0:	643a      	str	r2, [r7, #64]	; 0x40
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e5      	bne.n	8004bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3314      	adds	r3, #20
 8004c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e5      	bne.n	8004bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d119      	bne.n	8004c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0310 	bic.w	r3, r3, #16
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c50:	61ba      	str	r2, [r7, #24]
 8004c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6979      	ldr	r1, [r7, #20]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c72:	bf00      	nop
 8004c74:	3754      	adds	r7, #84	; 0x54
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fd5d 	bl	8004758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b21      	cmp	r3, #33	; 0x21
 8004cb8:	d13e      	bne.n	8004d38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc2:	d114      	bne.n	8004cee <UART_Transmit_IT+0x48>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d110      	bne.n	8004cee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	621a      	str	r2, [r3, #32]
 8004cec:	e008      	b.n	8004d00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6211      	str	r1, [r2, #32]
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10f      	bne.n	8004d34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fcce 	bl	8004708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b08c      	sub	sp, #48	; 0x30
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b22      	cmp	r3, #34	; 0x22
 8004d88:	f040 80ab 	bne.w	8004ee2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d94:	d117      	bne.n	8004dc6 <UART_Receive_IT+0x50>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d113      	bne.n	8004dc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004dc4:	e026      	b.n	8004e14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	d007      	beq.n	8004dea <UART_Receive_IT+0x74>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <UART_Receive_IT+0x82>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e008      	b.n	8004e0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4619      	mov	r1, r3
 8004e22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d15a      	bne.n	8004ede <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0220 	bic.w	r2, r2, #32
 8004e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d135      	bne.n	8004ed4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	623a      	str	r2, [r7, #32]
 8004e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	69f9      	ldr	r1, [r7, #28]
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d10a      	bne.n	8004ec6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fc4d 	bl	800476c <HAL_UARTEx_RxEventCallback>
 8004ed2:	e002      	b.n	8004eda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff fc2b 	bl	8004730 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e002      	b.n	8004ee4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e000      	b.n	8004ee4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ee2:	2302      	movs	r3, #2
  }
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3730      	adds	r7, #48	; 0x30
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef0:	b0c0      	sub	sp, #256	; 0x100
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	68d9      	ldr	r1, [r3, #12]
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	ea40 0301 	orr.w	r3, r0, r1
 8004f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f44:	f021 010c 	bic.w	r1, r1, #12
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f52:	430b      	orrs	r3, r1
 8004f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f66:	6999      	ldr	r1, [r3, #24]
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	ea40 0301 	orr.w	r3, r0, r1
 8004f72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b8f      	ldr	r3, [pc, #572]	; (80051b8 <UART_SetConfig+0x2cc>)
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d005      	beq.n	8004f8c <UART_SetConfig+0xa0>
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b8d      	ldr	r3, [pc, #564]	; (80051bc <UART_SetConfig+0x2d0>)
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d104      	bne.n	8004f96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fe ff9e 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8004f90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f94:	e003      	b.n	8004f9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f96:	f7fe ff85 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8004f9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa8:	f040 810c 	bne.w	80051c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	462b      	mov	r3, r5
 8004fc2:	1891      	adds	r1, r2, r2
 8004fc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fc6:	415b      	adcs	r3, r3
 8004fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fce:	4621      	mov	r1, r4
 8004fd0:	eb12 0801 	adds.w	r8, r2, r1
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	eb43 0901 	adc.w	r9, r3, r1
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fee:	4690      	mov	r8, r2
 8004ff0:	4699      	mov	r9, r3
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	eb18 0303 	adds.w	r3, r8, r3
 8004ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	eb49 0303 	adc.w	r3, r9, r3
 8005002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005012:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800501a:	460b      	mov	r3, r1
 800501c:	18db      	adds	r3, r3, r3
 800501e:	653b      	str	r3, [r7, #80]	; 0x50
 8005020:	4613      	mov	r3, r2
 8005022:	eb42 0303 	adc.w	r3, r2, r3
 8005026:	657b      	str	r3, [r7, #84]	; 0x54
 8005028:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800502c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005030:	f7fb f986 	bl	8000340 <__aeabi_uldivmod>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4b61      	ldr	r3, [pc, #388]	; (80051c0 <UART_SetConfig+0x2d4>)
 800503a:	fba3 2302 	umull	r2, r3, r3, r2
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	011c      	lsls	r4, r3, #4
 8005042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800504c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005050:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	1891      	adds	r1, r2, r2
 800505a:	64b9      	str	r1, [r7, #72]	; 0x48
 800505c:	415b      	adcs	r3, r3
 800505e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005060:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005064:	4641      	mov	r1, r8
 8005066:	eb12 0a01 	adds.w	sl, r2, r1
 800506a:	4649      	mov	r1, r9
 800506c:	eb43 0b01 	adc.w	fp, r3, r1
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800507c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005084:	4692      	mov	sl, r2
 8005086:	469b      	mov	fp, r3
 8005088:	4643      	mov	r3, r8
 800508a:	eb1a 0303 	adds.w	r3, sl, r3
 800508e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005092:	464b      	mov	r3, r9
 8005094:	eb4b 0303 	adc.w	r3, fp, r3
 8005098:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050b0:	460b      	mov	r3, r1
 80050b2:	18db      	adds	r3, r3, r3
 80050b4:	643b      	str	r3, [r7, #64]	; 0x40
 80050b6:	4613      	mov	r3, r2
 80050b8:	eb42 0303 	adc.w	r3, r2, r3
 80050bc:	647b      	str	r3, [r7, #68]	; 0x44
 80050be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050c6:	f7fb f93b 	bl	8000340 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <UART_SetConfig+0x2d4>)
 80050d2:	fba3 2301 	umull	r2, r3, r3, r1
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2264      	movs	r2, #100	; 0x64
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	1acb      	subs	r3, r1, r3
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050e6:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <UART_SetConfig+0x2d4>)
 80050e8:	fba3 2302 	umull	r2, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050f4:	441c      	add	r4, r3
 80050f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005100:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005104:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005108:	4642      	mov	r2, r8
 800510a:	464b      	mov	r3, r9
 800510c:	1891      	adds	r1, r2, r2
 800510e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005110:	415b      	adcs	r3, r3
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005118:	4641      	mov	r1, r8
 800511a:	1851      	adds	r1, r2, r1
 800511c:	6339      	str	r1, [r7, #48]	; 0x30
 800511e:	4649      	mov	r1, r9
 8005120:	414b      	adcs	r3, r1
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005130:	4659      	mov	r1, fp
 8005132:	00cb      	lsls	r3, r1, #3
 8005134:	4651      	mov	r1, sl
 8005136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513a:	4651      	mov	r1, sl
 800513c:	00ca      	lsls	r2, r1, #3
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	4603      	mov	r3, r0
 8005144:	4642      	mov	r2, r8
 8005146:	189b      	adds	r3, r3, r2
 8005148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800514c:	464b      	mov	r3, r9
 800514e:	460a      	mov	r2, r1
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005164:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800516c:	460b      	mov	r3, r1
 800516e:	18db      	adds	r3, r3, r3
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
 8005172:	4613      	mov	r3, r2
 8005174:	eb42 0303 	adc.w	r3, r2, r3
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800517e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005182:	f7fb f8dd 	bl	8000340 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <UART_SetConfig+0x2d4>)
 800518c:	fba3 1302 	umull	r1, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	2164      	movs	r1, #100	; 0x64
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	3332      	adds	r3, #50	; 0x32
 800519e:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <UART_SetConfig+0x2d4>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f003 0207 	and.w	r2, r3, #7
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4422      	add	r2, r4
 80051b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051b4:	e106      	b.n	80053c4 <UART_SetConfig+0x4d8>
 80051b6:	bf00      	nop
 80051b8:	40011000 	.word	0x40011000
 80051bc:	40011400 	.word	0x40011400
 80051c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051d6:	4642      	mov	r2, r8
 80051d8:	464b      	mov	r3, r9
 80051da:	1891      	adds	r1, r2, r2
 80051dc:	6239      	str	r1, [r7, #32]
 80051de:	415b      	adcs	r3, r3
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051e6:	4641      	mov	r1, r8
 80051e8:	1854      	adds	r4, r2, r1
 80051ea:	4649      	mov	r1, r9
 80051ec:	eb43 0501 	adc.w	r5, r3, r1
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	00eb      	lsls	r3, r5, #3
 80051fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051fe:	00e2      	lsls	r2, r4, #3
 8005200:	4614      	mov	r4, r2
 8005202:	461d      	mov	r5, r3
 8005204:	4643      	mov	r3, r8
 8005206:	18e3      	adds	r3, r4, r3
 8005208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800520c:	464b      	mov	r3, r9
 800520e:	eb45 0303 	adc.w	r3, r5, r3
 8005212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005222:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005232:	4629      	mov	r1, r5
 8005234:	008b      	lsls	r3, r1, #2
 8005236:	4621      	mov	r1, r4
 8005238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523c:	4621      	mov	r1, r4
 800523e:	008a      	lsls	r2, r1, #2
 8005240:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005244:	f7fb f87c 	bl	8000340 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4b60      	ldr	r3, [pc, #384]	; (80053d0 <UART_SetConfig+0x4e4>)
 800524e:	fba3 2302 	umull	r2, r3, r3, r2
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	011c      	lsls	r4, r3, #4
 8005256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800525a:	2200      	movs	r2, #0
 800525c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005260:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005264:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005268:	4642      	mov	r2, r8
 800526a:	464b      	mov	r3, r9
 800526c:	1891      	adds	r1, r2, r2
 800526e:	61b9      	str	r1, [r7, #24]
 8005270:	415b      	adcs	r3, r3
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005278:	4641      	mov	r1, r8
 800527a:	1851      	adds	r1, r2, r1
 800527c:	6139      	str	r1, [r7, #16]
 800527e:	4649      	mov	r1, r9
 8005280:	414b      	adcs	r3, r1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005290:	4659      	mov	r1, fp
 8005292:	00cb      	lsls	r3, r1, #3
 8005294:	4651      	mov	r1, sl
 8005296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800529a:	4651      	mov	r1, sl
 800529c:	00ca      	lsls	r2, r1, #3
 800529e:	4610      	mov	r0, r2
 80052a0:	4619      	mov	r1, r3
 80052a2:	4603      	mov	r3, r0
 80052a4:	4642      	mov	r2, r8
 80052a6:	189b      	adds	r3, r3, r2
 80052a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052ac:	464b      	mov	r3, r9
 80052ae:	460a      	mov	r2, r1
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80052c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052d0:	4649      	mov	r1, r9
 80052d2:	008b      	lsls	r3, r1, #2
 80052d4:	4641      	mov	r1, r8
 80052d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052da:	4641      	mov	r1, r8
 80052dc:	008a      	lsls	r2, r1, #2
 80052de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052e2:	f7fb f82d 	bl	8000340 <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4611      	mov	r1, r2
 80052ec:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <UART_SetConfig+0x4e4>)
 80052ee:	fba3 2301 	umull	r2, r3, r3, r1
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	2264      	movs	r2, #100	; 0x64
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	1acb      	subs	r3, r1, r3
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	3332      	adds	r3, #50	; 0x32
 8005300:	4a33      	ldr	r2, [pc, #204]	; (80053d0 <UART_SetConfig+0x4e4>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530c:	441c      	add	r4, r3
 800530e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005312:	2200      	movs	r2, #0
 8005314:	673b      	str	r3, [r7, #112]	; 0x70
 8005316:	677a      	str	r2, [r7, #116]	; 0x74
 8005318:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800531c:	4642      	mov	r2, r8
 800531e:	464b      	mov	r3, r9
 8005320:	1891      	adds	r1, r2, r2
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	415b      	adcs	r3, r3
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800532c:	4641      	mov	r1, r8
 800532e:	1851      	adds	r1, r2, r1
 8005330:	6039      	str	r1, [r7, #0]
 8005332:	4649      	mov	r1, r9
 8005334:	414b      	adcs	r3, r1
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005344:	4659      	mov	r1, fp
 8005346:	00cb      	lsls	r3, r1, #3
 8005348:	4651      	mov	r1, sl
 800534a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800534e:	4651      	mov	r1, sl
 8005350:	00ca      	lsls	r2, r1, #3
 8005352:	4610      	mov	r0, r2
 8005354:	4619      	mov	r1, r3
 8005356:	4603      	mov	r3, r0
 8005358:	4642      	mov	r2, r8
 800535a:	189b      	adds	r3, r3, r2
 800535c:	66bb      	str	r3, [r7, #104]	; 0x68
 800535e:	464b      	mov	r3, r9
 8005360:	460a      	mov	r2, r1
 8005362:	eb42 0303 	adc.w	r3, r2, r3
 8005366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	663b      	str	r3, [r7, #96]	; 0x60
 8005372:	667a      	str	r2, [r7, #100]	; 0x64
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005380:	4649      	mov	r1, r9
 8005382:	008b      	lsls	r3, r1, #2
 8005384:	4641      	mov	r1, r8
 8005386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538a:	4641      	mov	r1, r8
 800538c:	008a      	lsls	r2, r1, #2
 800538e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005392:	f7fa ffd5 	bl	8000340 <__aeabi_uldivmod>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <UART_SetConfig+0x4e4>)
 800539c:	fba3 1302 	umull	r1, r3, r3, r2
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	2164      	movs	r1, #100	; 0x64
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	3332      	adds	r3, #50	; 0x32
 80053ae:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <UART_SetConfig+0x4e4>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	f003 020f 	and.w	r2, r3, #15
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4422      	add	r2, r4
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d0:	51eb851f 	.word	0x51eb851f

080053d4 <__NVIC_SetPriority>:
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	6039      	str	r1, [r7, #0]
 80053de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	db0a      	blt.n	80053fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	490c      	ldr	r1, [pc, #48]	; (8005420 <__NVIC_SetPriority+0x4c>)
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	0112      	lsls	r2, r2, #4
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	440b      	add	r3, r1
 80053f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053fc:	e00a      	b.n	8005414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4908      	ldr	r1, [pc, #32]	; (8005424 <__NVIC_SetPriority+0x50>)
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	3b04      	subs	r3, #4
 800540c:	0112      	lsls	r2, r2, #4
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	440b      	add	r3, r1
 8005412:	761a      	strb	r2, [r3, #24]
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	e000e100 	.word	0xe000e100
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800542c:	2100      	movs	r1, #0
 800542e:	f06f 0004 	mvn.w	r0, #4
 8005432:	f7ff ffcf 	bl	80053d4 <__NVIC_SetPriority>
#endif
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005442:	f3ef 8305 	mrs	r3, IPSR
 8005446:	603b      	str	r3, [r7, #0]
  return(result);
 8005448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800544e:	f06f 0305 	mvn.w	r3, #5
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	e00c      	b.n	8005470 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <osKernelInitialize+0x44>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <osKernelInitialize+0x44>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005464:	2300      	movs	r3, #0
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	e002      	b.n	8005470 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800546e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005470:	687b      	ldr	r3, [r7, #4]
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	200047b8 	.word	0x200047b8

08005484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548a:	f3ef 8305 	mrs	r3, IPSR
 800548e:	603b      	str	r3, [r7, #0]
  return(result);
 8005490:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005496:	f06f 0305 	mvn.w	r3, #5
 800549a:	607b      	str	r3, [r7, #4]
 800549c:	e010      	b.n	80054c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <osKernelStart+0x48>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d109      	bne.n	80054ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054a6:	f7ff ffbf 	bl	8005428 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054aa:	4b08      	ldr	r3, [pc, #32]	; (80054cc <osKernelStart+0x48>)
 80054ac:	2202      	movs	r2, #2
 80054ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054b0:	f001 f866 	bl	8006580 <vTaskStartScheduler>
      stat = osOK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	607b      	str	r3, [r7, #4]
 80054b8:	e002      	b.n	80054c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054c0:	687b      	ldr	r3, [r7, #4]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	200047b8 	.word	0x200047b8

080054d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	; 0x38
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e0:	f3ef 8305 	mrs	r3, IPSR
 80054e4:	617b      	str	r3, [r7, #20]
  return(result);
 80054e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d17e      	bne.n	80055ea <osThreadNew+0x11a>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d07b      	beq.n	80055ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054f6:	2318      	movs	r3, #24
 80054f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005502:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d045      	beq.n	8005596 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <osThreadNew+0x48>
        name = attr->name;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <osThreadNew+0x6e>
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b38      	cmp	r3, #56	; 0x38
 8005530:	d805      	bhi.n	800553e <osThreadNew+0x6e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <osThreadNew+0x72>
        return (NULL);
 800553e:	2300      	movs	r3, #0
 8005540:	e054      	b.n	80055ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <osThreadNew+0xa8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b5b      	cmp	r3, #91	; 0x5b
 8005560:	d90a      	bls.n	8005578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005566:	2b00      	cmp	r3, #0
 8005568:	d006      	beq.n	8005578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <osThreadNew+0xa8>
        mem = 1;
 8005572:	2301      	movs	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e010      	b.n	800559a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10c      	bne.n	800559a <osThreadNew+0xca>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <osThreadNew+0xca>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <osThreadNew+0xca>
          mem = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e001      	b.n	800559a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d110      	bne.n	80055c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055a8:	9202      	str	r2, [sp, #8]
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6a3a      	ldr	r2, [r7, #32]
 80055b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fe0c 	bl	80061d4 <xTaskCreateStatic>
 80055bc:	4603      	mov	r3, r0
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	e013      	b.n	80055ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d110      	bne.n	80055ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f107 0310 	add.w	r3, r7, #16
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fe57 	bl	800628e <xTaskCreate>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d001      	beq.n	80055ea <osThreadNew+0x11a>
            hTask = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055ea:	693b      	ldr	r3, [r7, #16]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3728      	adds	r7, #40	; 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fc:	f3ef 8305 	mrs	r3, IPSR
 8005600:	60bb      	str	r3, [r7, #8]
  return(result);
 8005602:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <osDelay+0x1c>
    stat = osErrorISR;
 8005608:	f06f 0305 	mvn.w	r3, #5
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e007      	b.n	8005620 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <osDelay+0x2c>
      vTaskDelay(ticks);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 ff7c 	bl	8006518 <vTaskDelay>
    }
  }

  return (stat);
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a07      	ldr	r2, [pc, #28]	; (8005658 <vApplicationGetIdleTaskMemory+0x2c>)
 800563c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <vApplicationGetIdleTaskMemory+0x30>)
 8005642:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	200047bc 	.word	0x200047bc
 800565c:	20004818 	.word	0x20004818

08005660 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a07      	ldr	r2, [pc, #28]	; (800568c <vApplicationGetTimerTaskMemory+0x2c>)
 8005670:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4a06      	ldr	r2, [pc, #24]	; (8005690 <vApplicationGetTimerTaskMemory+0x30>)
 8005676:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800567e:	601a      	str	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20004a18 	.word	0x20004a18
 8005690:	20004a74 	.word	0x20004a74

08005694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f103 0208 	add.w	r2, r3, #8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f103 0208 	add.w	r2, r3, #8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f103 0208 	add.w	r2, r3, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ee:	b480      	push	{r7}
 80056f0:	b085      	sub	sp, #20
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574c:	d103      	bne.n	8005756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e00c      	b.n	8005770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3308      	adds	r3, #8
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e002      	b.n	8005764 <vListInsert+0x2e>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	d2f6      	bcs.n	800575e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6892      	ldr	r2, [r2, #8]
 80057be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6852      	ldr	r2, [r2, #4]
 80057c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d103      	bne.n	80057dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	1e5a      	subs	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xQueueGenericReset+0x2a>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60bb      	str	r3, [r7, #8]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005826:	f002 f875 	bl	8007914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	441a      	add	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	3b01      	subs	r3, #1
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	441a      	add	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	22ff      	movs	r2, #255	; 0xff
 800586a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	22ff      	movs	r2, #255	; 0xff
 8005872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d114      	bne.n	80058a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3310      	adds	r3, #16
 8005888:	4618      	mov	r0, r3
 800588a:	f001 f903 	bl	8006a94 <xTaskRemoveFromEventList>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d012      	beq.n	80058ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <xQueueGenericReset+0xcc>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	e009      	b.n	80058ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3310      	adds	r3, #16
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fef2 	bl	8005694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3324      	adds	r3, #36	; 0x24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff feed 	bl	8005694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058ba:	f002 f85b 	bl	8007974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058be:	2301      	movs	r3, #1
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08e      	sub	sp, #56	; 0x38
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <xQueueGenericCreateStatic+0x52>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <xQueueGenericCreateStatic+0x56>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueGenericCreateStatic+0x58>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	623b      	str	r3, [r7, #32]
}
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <xQueueGenericCreateStatic+0x7e>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <xQueueGenericCreateStatic+0x82>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <xQueueGenericCreateStatic+0x84>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	61fb      	str	r3, [r7, #28]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800596a:	2350      	movs	r3, #80	; 0x50
 800596c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b50      	cmp	r3, #80	; 0x50
 8005972:	d00a      	beq.n	800598a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	61bb      	str	r3, [r7, #24]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800598a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800599e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f805 	bl	80059bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3730      	adds	r7, #48	; 0x30
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e002      	b.n	80059de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059ea:	2101      	movs	r1, #1
 80059ec:	69b8      	ldr	r0, [r7, #24]
 80059ee:	f7ff ff05 	bl	80057fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08e      	sub	sp, #56	; 0x38
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueGenericSend+0x32>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <xQueueGenericSend+0x40>
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <xQueueGenericSend+0x44>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <xQueueGenericSend+0x46>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <xQueueGenericSend+0x60>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d103      	bne.n	8005a72 <xQueueGenericSend+0x6e>
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <xQueueGenericSend+0x72>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <xQueueGenericSend+0x74>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericSend+0x8e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	623b      	str	r3, [r7, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a92:	f001 f9e3 	bl	8006e5c <xTaskGetSchedulerState>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <xQueueGenericSend+0x9e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <xQueueGenericSend+0xa2>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <xQueueGenericSend+0xa4>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	61fb      	str	r3, [r7, #28]
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ac2:	f001 ff27 	bl	8007914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <xQueueGenericSend+0xd4>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d129      	bne.n	8005b2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ade:	f000 fa0b 	bl	8005ef8 <prvCopyDataToQueue>
 8005ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d010      	beq.n	8005b0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	3324      	adds	r3, #36	; 0x24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 ffcf 	bl	8006a94 <xTaskRemoveFromEventList>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d013      	beq.n	8005b24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005afc:	4b3f      	ldr	r3, [pc, #252]	; (8005bfc <xQueueGenericSend+0x1f8>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	e00a      	b.n	8005b24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b14:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <xQueueGenericSend+0x1f8>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b24:	f001 ff26 	bl	8007974 <vPortExitCritical>
				return pdPASS;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e063      	b.n	8005bf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b32:	f001 ff1f 	bl	8007974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e05c      	b.n	8005bf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 f82f 	bl	8006ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b4e:	f001 ff11 	bl	8007974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b52:	f000 fd7b 	bl	800664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b56:	f001 fedd 	bl	8007914 <vPortEnterCritical>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b60:	b25b      	sxtb	r3, r3
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b66:	d103      	bne.n	8005b70 <xQueueGenericSend+0x16c>
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b76:	b25b      	sxtb	r3, r3
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b7c:	d103      	bne.n	8005b86 <xQueueGenericSend+0x182>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b86:	f001 fef5 	bl	8007974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b8a:	1d3a      	adds	r2, r7, #4
 8005b8c:	f107 0314 	add.w	r3, r7, #20
 8005b90:	4611      	mov	r1, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 f81e 	bl	8006bd4 <xTaskCheckForTimeOut>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d124      	bne.n	8005be8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba0:	f000 faa2 	bl	80060e8 <prvIsQueueFull>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d018      	beq.n	8005bdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	3310      	adds	r3, #16
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 ff1e 	bl	80069f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bba:	f000 fa2d 	bl	8006018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bbe:	f000 fd53 	bl	8006668 <xTaskResumeAll>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f47f af7c 	bne.w	8005ac2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <xQueueGenericSend+0x1f8>)
 8005bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	e772      	b.n	8005ac2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bde:	f000 fa1b 	bl	8006018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005be2:	f000 fd41 	bl	8006668 <xTaskResumeAll>
 8005be6:	e76c      	b.n	8005ac2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bea:	f000 fa15 	bl	8006018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bee:	f000 fd3b 	bl	8006668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3738      	adds	r7, #56	; 0x38
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b090      	sub	sp, #64	; 0x40
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <xQueueGenericSendFromISR+0x3c>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <xQueueGenericSendFromISR+0x40>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <xQueueGenericSendFromISR+0x42>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d103      	bne.n	8005c6a <xQueueGenericSendFromISR+0x6a>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <xQueueGenericSendFromISR+0x6e>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <xQueueGenericSendFromISR+0x70>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	623b      	str	r3, [r7, #32]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c8a:	f001 ff25 	bl	8007ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61fa      	str	r2, [r7, #28]
 8005ca4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <xQueueGenericSendFromISR+0xbc>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d12f      	bne.n	8005d1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cd2:	f000 f911 	bl	8005ef8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cde:	d112      	bne.n	8005d06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d016      	beq.n	8005d16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	3324      	adds	r3, #36	; 0x24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fed1 	bl	8006a94 <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00e      	beq.n	8005d16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e007      	b.n	8005d16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	b25a      	sxtb	r2, r3
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d16:	2301      	movs	r3, #1
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d1a:	e001      	b.n	8005d20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3740      	adds	r7, #64	; 0x40
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	; 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d44:	2300      	movs	r3, #0
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <xQueueReceive+0x30>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	623b      	str	r3, [r7, #32]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <xQueueReceive+0x3e>
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <xQueueReceive+0x42>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <xQueueReceive+0x44>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <xQueueReceive+0x5e>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	61fb      	str	r3, [r7, #28]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d96:	f001 f861 	bl	8006e5c <xTaskGetSchedulerState>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <xQueueReceive+0x6e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <xQueueReceive+0x72>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <xQueueReceive+0x74>
 8005daa:	2300      	movs	r3, #0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueReceive+0x8e>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	61bb      	str	r3, [r7, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dc6:	f001 fda5 	bl	8007914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01f      	beq.n	8005e16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dda:	f000 f8f7 	bl	8005fcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00f      	beq.n	8005e0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	3310      	adds	r3, #16
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fe4e 	bl	8006a94 <xTaskRemoveFromEventList>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dfe:	4b3d      	ldr	r3, [pc, #244]	; (8005ef4 <xQueueReceive+0x1bc>)
 8005e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e0e:	f001 fdb1 	bl	8007974 <vPortExitCritical>
				return pdPASS;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e069      	b.n	8005eea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d103      	bne.n	8005e24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e1c:	f001 fdaa 	bl	8007974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e20:	2300      	movs	r3, #0
 8005e22:	e062      	b.n	8005eea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e2a:	f107 0310 	add.w	r3, r7, #16
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 feba 	bl	8006ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e38:	f001 fd9c 	bl	8007974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e3c:	f000 fc06 	bl	800664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e40:	f001 fd68 	bl	8007914 <vPortEnterCritical>
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e50:	d103      	bne.n	8005e5a <xQueueReceive+0x122>
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e66:	d103      	bne.n	8005e70 <xQueueReceive+0x138>
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e70:	f001 fd80 	bl	8007974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e74:	1d3a      	adds	r2, r7, #4
 8005e76:	f107 0310 	add.w	r3, r7, #16
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fea9 	bl	8006bd4 <xTaskCheckForTimeOut>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d123      	bne.n	8005ed0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8a:	f000 f917 	bl	80060bc <prvIsQueueEmpty>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d017      	beq.n	8005ec4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	3324      	adds	r3, #36	; 0x24
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fda9 	bl	80069f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea4:	f000 f8b8 	bl	8006018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ea8:	f000 fbde 	bl	8006668 <xTaskResumeAll>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d189      	bne.n	8005dc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005eb2:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <xQueueReceive+0x1bc>)
 8005eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	e780      	b.n	8005dc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec6:	f000 f8a7 	bl	8006018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eca:	f000 fbcd 	bl	8006668 <xTaskResumeAll>
 8005ece:	e77a      	b.n	8005dc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ed2:	f000 f8a1 	bl	8006018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ed6:	f000 fbc7 	bl	8006668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005edc:	f000 f8ee 	bl	80060bc <prvIsQueueEmpty>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f43f af6f 	beq.w	8005dc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3730      	adds	r7, #48	; 0x30
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10d      	bne.n	8005f32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d14d      	bne.n	8005fba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 ffb8 	bl	8006e98 <xTaskPriorityDisinherit>
 8005f28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	609a      	str	r2, [r3, #8]
 8005f30:	e043      	b.n	8005fba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d119      	bne.n	8005f6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6858      	ldr	r0, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	461a      	mov	r2, r3
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	f00b feb2 	bl	8011cac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	441a      	add	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d32b      	bcc.n	8005fba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	e026      	b.n	8005fba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68d8      	ldr	r0, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	461a      	mov	r2, r3
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	f00b fe98 	bl	8011cac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	425b      	negs	r3, r3
 8005f86:	441a      	add	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d207      	bcs.n	8005fa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	441a      	add	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d105      	bne.n	8005fba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fc2:	697b      	ldr	r3, [r7, #20]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d018      	beq.n	8006010 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	441a      	add	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d303      	bcc.n	8006000 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68d9      	ldr	r1, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	461a      	mov	r2, r3
 800600a:	6838      	ldr	r0, [r7, #0]
 800600c:	f00b fe4e 	bl	8011cac <memcpy>
	}
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006020:	f001 fc78 	bl	8007914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800602a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800602c:	e011      	b.n	8006052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d012      	beq.n	800605c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fd2a 	bl	8006a94 <xTaskRemoveFromEventList>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006046:	f000 fe27 	bl	8006c98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	3b01      	subs	r3, #1
 800604e:	b2db      	uxtb	r3, r3
 8006050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	dce9      	bgt.n	800602e <prvUnlockQueue+0x16>
 800605a:	e000      	b.n	800605e <prvUnlockQueue+0x46>
					break;
 800605c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	22ff      	movs	r2, #255	; 0xff
 8006062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006066:	f001 fc85 	bl	8007974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800606a:	f001 fc53 	bl	8007914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006076:	e011      	b.n	800609c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d012      	beq.n	80060a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3310      	adds	r3, #16
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fd05 	bl	8006a94 <xTaskRemoveFromEventList>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006090:	f000 fe02 	bl	8006c98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	3b01      	subs	r3, #1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800609c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	dce9      	bgt.n	8006078 <prvUnlockQueue+0x60>
 80060a4:	e000      	b.n	80060a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	22ff      	movs	r2, #255	; 0xff
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060b0:	f001 fc60 	bl	8007974 <vPortExitCritical>
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060c4:	f001 fc26 	bl	8007914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e001      	b.n	80060da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060da:	f001 fc4b 	bl	8007974 <vPortExitCritical>

	return xReturn;
 80060de:	68fb      	ldr	r3, [r7, #12]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060f0:	f001 fc10 	bl	8007914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d102      	bne.n	8006106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	e001      	b.n	800610a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800610a:	f001 fc33 	bl	8007974 <vPortExitCritical>

	return xReturn;
 800610e:	68fb      	ldr	r3, [r7, #12]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e014      	b.n	8006152 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006128:	4a0f      	ldr	r2, [pc, #60]	; (8006168 <vQueueAddToRegistry+0x50>)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006134:	490c      	ldr	r1, [pc, #48]	; (8006168 <vQueueAddToRegistry+0x50>)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800613e:	4a0a      	ldr	r2, [pc, #40]	; (8006168 <vQueueAddToRegistry+0x50>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800614a:	e006      	b.n	800615a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b07      	cmp	r3, #7
 8006156:	d9e7      	bls.n	8006128 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20004e74 	.word	0x20004e74

0800616c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800617c:	f001 fbca 	bl	8007914 <vPortEnterCritical>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006186:	b25b      	sxtb	r3, r3
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800618c:	d103      	bne.n	8006196 <vQueueWaitForMessageRestricted+0x2a>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800619c:	b25b      	sxtb	r3, r3
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a2:	d103      	bne.n	80061ac <vQueueWaitForMessageRestricted+0x40>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ac:	f001 fbe2 	bl	8007974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	3324      	adds	r3, #36	; 0x24
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fc3b 	bl	8006a3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061c6:	6978      	ldr	r0, [r7, #20]
 80061c8:	f7ff ff26 	bl	8006018 <prvUnlockQueue>
	}
 80061cc:	bf00      	nop
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08e      	sub	sp, #56	; 0x38
 80061d8:	af04      	add	r7, sp, #16
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	623b      	str	r3, [r7, #32]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xTaskCreateStatic+0x46>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	61fb      	str	r3, [r7, #28]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800621a:	235c      	movs	r3, #92	; 0x5c
 800621c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b5c      	cmp	r3, #92	; 0x5c
 8006222:	d00a      	beq.n	800623a <xTaskCreateStatic+0x66>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	61bb      	str	r3, [r7, #24]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800623a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01e      	beq.n	8006280 <xTaskCreateStatic+0xac>
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01b      	beq.n	8006280 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006250:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	2202      	movs	r2, #2
 8006256:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800625a:	2300      	movs	r3, #0
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	9302      	str	r3, [sp, #8]
 8006262:	f107 0314 	add.w	r3, r7, #20
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f850 	bl	8006318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800627a:	f000 f8dd 	bl	8006438 <prvAddNewTaskToReadyList>
 800627e:	e001      	b.n	8006284 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006284:	697b      	ldr	r3, [r7, #20]
	}
 8006286:	4618      	mov	r0, r3
 8006288:	3728      	adds	r7, #40	; 0x28
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800628e:	b580      	push	{r7, lr}
 8006290:	b08c      	sub	sp, #48	; 0x30
 8006292:	af04      	add	r7, sp, #16
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fc58 	bl	8007b58 <pvPortMalloc>
 80062a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00e      	beq.n	80062ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062b0:	205c      	movs	r0, #92	; 0x5c
 80062b2:	f001 fc51 	bl	8007b58 <pvPortMalloc>
 80062b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
 80062c4:	e005      	b.n	80062d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062c6:	6978      	ldr	r0, [r7, #20]
 80062c8:	f001 fd12 	bl	8007cf0 <vPortFree>
 80062cc:	e001      	b.n	80062d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d017      	beq.n	8006308 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	2300      	movs	r3, #0
 80062e4:	9303      	str	r3, [sp, #12]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f80e 	bl	8006318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062fc:	69f8      	ldr	r0, [r7, #28]
 80062fe:	f000 f89b 	bl	8006438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006302:	2301      	movs	r3, #1
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e002      	b.n	800630e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800630c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800630e:	69bb      	ldr	r3, [r7, #24]
	}
 8006310:	4618      	mov	r0, r3
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	461a      	mov	r2, r3
 8006330:	21a5      	movs	r1, #165	; 0xa5
 8006332:	f00b fbf3 	bl	8011b1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006340:	3b01      	subs	r3, #1
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f023 0307 	bic.w	r3, r3, #7
 800634e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <prvInitialiseNewTask+0x58>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	617b      	str	r3, [r7, #20]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01f      	beq.n	80063b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	e012      	b.n	80063a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	7819      	ldrb	r1, [r3, #0]
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	3334      	adds	r3, #52	; 0x34
 800638c:	460a      	mov	r2, r1
 800638e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	3301      	adds	r3, #1
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b0f      	cmp	r3, #15
 80063a6:	d9e9      	bls.n	800637c <prvInitialiseNewTask+0x64>
 80063a8:	e000      	b.n	80063ac <prvInitialiseNewTask+0x94>
			{
				break;
 80063aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063b4:	e003      	b.n	80063be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	2b37      	cmp	r3, #55	; 0x37
 80063c2:	d901      	bls.n	80063c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063c4:	2337      	movs	r3, #55	; 0x37
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	2200      	movs	r2, #0
 80063d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	3304      	adds	r3, #4
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff f978 	bl	80056d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	3318      	adds	r3, #24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff f973 	bl	80056d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	2200      	movs	r2, #0
 8006408:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	68f9      	ldr	r1, [r7, #12]
 8006416:	69b8      	ldr	r0, [r7, #24]
 8006418:	f001 f94e 	bl	80076b8 <pxPortInitialiseStack>
 800641c:	4602      	mov	r2, r0
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800642e:	bf00      	nop
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006440:	f001 fa68 	bl	8007914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006444:	4b2d      	ldr	r3, [pc, #180]	; (80064fc <prvAddNewTaskToReadyList+0xc4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	4a2c      	ldr	r2, [pc, #176]	; (80064fc <prvAddNewTaskToReadyList+0xc4>)
 800644c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800644e:	4b2c      	ldr	r3, [pc, #176]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006456:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800645c:	4b27      	ldr	r3, [pc, #156]	; (80064fc <prvAddNewTaskToReadyList+0xc4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d110      	bne.n	8006486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006464:	f000 fc3c 	bl	8006ce0 <prvInitialiseTaskLists>
 8006468:	e00d      	b.n	8006486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800646a:	4b26      	ldr	r3, [pc, #152]	; (8006504 <prvAddNewTaskToReadyList+0xcc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	429a      	cmp	r2, r3
 800647e:	d802      	bhi.n	8006486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006486:	4b20      	ldr	r3, [pc, #128]	; (8006508 <prvAddNewTaskToReadyList+0xd0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	4a1e      	ldr	r2, [pc, #120]	; (8006508 <prvAddNewTaskToReadyList+0xd0>)
 800648e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006490:	4b1d      	ldr	r3, [pc, #116]	; (8006508 <prvAddNewTaskToReadyList+0xd0>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <prvAddNewTaskToReadyList+0xd4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d903      	bls.n	80064ac <prvAddNewTaskToReadyList+0x74>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a18      	ldr	r2, [pc, #96]	; (800650c <prvAddNewTaskToReadyList+0xd4>)
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <prvAddNewTaskToReadyList+0xd8>)
 80064ba:	441a      	add	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7ff f913 	bl	80056ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064c8:	f001 fa54 	bl	8007974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <prvAddNewTaskToReadyList+0xcc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d207      	bcs.n	80064f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <prvAddNewTaskToReadyList+0xdc>)
 80064e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20005388 	.word	0x20005388
 8006500:	20004eb4 	.word	0x20004eb4
 8006504:	20005394 	.word	0x20005394
 8006508:	200053a4 	.word	0x200053a4
 800650c:	20005390 	.word	0x20005390
 8006510:	20004eb8 	.word	0x20004eb8
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d017      	beq.n	800655a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800652a:	4b13      	ldr	r3, [pc, #76]	; (8006578 <vTaskDelay+0x60>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <vTaskDelay+0x30>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60bb      	str	r3, [r7, #8]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006548:	f000 f880 	bl	800664c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800654c:	2100      	movs	r1, #0
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fd10 	bl	8006f74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006554:	f000 f888 	bl	8006668 <xTaskResumeAll>
 8006558:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d107      	bne.n	8006570 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <vTaskDelay+0x64>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	200053b0 	.word	0x200053b0
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800658e:	463a      	mov	r2, r7
 8006590:	1d39      	adds	r1, r7, #4
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff f848 	bl	800562c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	9202      	str	r2, [sp, #8]
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	2300      	movs	r3, #0
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	460a      	mov	r2, r1
 80065ae:	4921      	ldr	r1, [pc, #132]	; (8006634 <vTaskStartScheduler+0xb4>)
 80065b0:	4821      	ldr	r0, [pc, #132]	; (8006638 <vTaskStartScheduler+0xb8>)
 80065b2:	f7ff fe0f 	bl	80061d4 <xTaskCreateStatic>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4a20      	ldr	r2, [pc, #128]	; (800663c <vTaskStartScheduler+0xbc>)
 80065ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065bc:	4b1f      	ldr	r3, [pc, #124]	; (800663c <vTaskStartScheduler+0xbc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e001      	b.n	80065ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d102      	bne.n	80065da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065d4:	f000 fd22 	bl	800701c <xTimerCreateTimerTask>
 80065d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d116      	bne.n	800660e <vTaskStartScheduler+0x8e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
}
 80065f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <vTaskStartScheduler+0xc0>)
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065fc:	4b11      	ldr	r3, [pc, #68]	; (8006644 <vTaskStartScheduler+0xc4>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <vTaskStartScheduler+0xc8>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006608:	f001 f8e2 	bl	80077d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800660c:	e00e      	b.n	800662c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006614:	d10a      	bne.n	800662c <vTaskStartScheduler+0xac>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	60fb      	str	r3, [r7, #12]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <vTaskStartScheduler+0xaa>
}
 800662c:	bf00      	nop
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	08012b34 	.word	0x08012b34
 8006638:	08006cb1 	.word	0x08006cb1
 800663c:	200053ac 	.word	0x200053ac
 8006640:	200053a8 	.word	0x200053a8
 8006644:	20005394 	.word	0x20005394
 8006648:	2000538c 	.word	0x2000538c

0800664c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <vTaskSuspendAll+0x18>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	4a03      	ldr	r2, [pc, #12]	; (8006664 <vTaskSuspendAll+0x18>)
 8006658:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	200053b0 	.word	0x200053b0

08006668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006676:	4b42      	ldr	r3, [pc, #264]	; (8006780 <xTaskResumeAll+0x118>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <xTaskResumeAll+0x2c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	603b      	str	r3, [r7, #0]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006694:	f001 f93e 	bl	8007914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006698:	4b39      	ldr	r3, [pc, #228]	; (8006780 <xTaskResumeAll+0x118>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3b01      	subs	r3, #1
 800669e:	4a38      	ldr	r2, [pc, #224]	; (8006780 <xTaskResumeAll+0x118>)
 80066a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a2:	4b37      	ldr	r3, [pc, #220]	; (8006780 <xTaskResumeAll+0x118>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d162      	bne.n	8006770 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066aa:	4b36      	ldr	r3, [pc, #216]	; (8006784 <xTaskResumeAll+0x11c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d05e      	beq.n	8006770 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b2:	e02f      	b.n	8006714 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b4:	4b34      	ldr	r3, [pc, #208]	; (8006788 <xTaskResumeAll+0x120>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3318      	adds	r3, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff f871 	bl	80057a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff f86c 	bl	80057a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	4b2d      	ldr	r3, [pc, #180]	; (800678c <xTaskResumeAll+0x124>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d903      	bls.n	80066e4 <xTaskResumeAll+0x7c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4a2a      	ldr	r2, [pc, #168]	; (800678c <xTaskResumeAll+0x124>)
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <xTaskResumeAll+0x128>)
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f7fe fff7 	bl	80056ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4b23      	ldr	r3, [pc, #140]	; (8006794 <xTaskResumeAll+0x12c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	429a      	cmp	r2, r3
 800670c:	d302      	bcc.n	8006714 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800670e:	4b22      	ldr	r3, [pc, #136]	; (8006798 <xTaskResumeAll+0x130>)
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <xTaskResumeAll+0x120>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1cb      	bne.n	80066b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006722:	f000 fb7b 	bl	8006e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <xTaskResumeAll+0x134>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d010      	beq.n	8006754 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006732:	f000 f847 	bl	80067c4 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800673c:	4b16      	ldr	r3, [pc, #88]	; (8006798 <xTaskResumeAll+0x130>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3b01      	subs	r3, #1
 8006746:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <xTaskResumeAll+0x134>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006754:	4b10      	ldr	r3, [pc, #64]	; (8006798 <xTaskResumeAll+0x130>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800675c:	2301      	movs	r3, #1
 800675e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <xTaskResumeAll+0x138>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006770:	f001 f900 	bl	8007974 <vPortExitCritical>

	return xAlreadyYielded;
 8006774:	68bb      	ldr	r3, [r7, #8]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200053b0 	.word	0x200053b0
 8006784:	20005388 	.word	0x20005388
 8006788:	20005348 	.word	0x20005348
 800678c:	20005390 	.word	0x20005390
 8006790:	20004eb8 	.word	0x20004eb8
 8006794:	20004eb4 	.word	0x20004eb4
 8006798:	2000539c 	.word	0x2000539c
 800679c:	20005398 	.word	0x20005398
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <xTaskGetTickCount+0x1c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067b0:	687b      	ldr	r3, [r7, #4]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	2000538c 	.word	0x2000538c

080067c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ce:	4b4f      	ldr	r3, [pc, #316]	; (800690c <xTaskIncrementTick+0x148>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 808f 	bne.w	80068f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067d8:	4b4d      	ldr	r3, [pc, #308]	; (8006910 <xTaskIncrementTick+0x14c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067e0:	4a4b      	ldr	r2, [pc, #300]	; (8006910 <xTaskIncrementTick+0x14c>)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d120      	bne.n	800682e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067ec:	4b49      	ldr	r3, [pc, #292]	; (8006914 <xTaskIncrementTick+0x150>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <xTaskIncrementTick+0x48>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	603b      	str	r3, [r7, #0]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <xTaskIncrementTick+0x46>
 800680c:	4b41      	ldr	r3, [pc, #260]	; (8006914 <xTaskIncrementTick+0x150>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	4b41      	ldr	r3, [pc, #260]	; (8006918 <xTaskIncrementTick+0x154>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a3f      	ldr	r2, [pc, #252]	; (8006914 <xTaskIncrementTick+0x150>)
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	4a3f      	ldr	r2, [pc, #252]	; (8006918 <xTaskIncrementTick+0x154>)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	4b3e      	ldr	r3, [pc, #248]	; (800691c <xTaskIncrementTick+0x158>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	4a3d      	ldr	r2, [pc, #244]	; (800691c <xTaskIncrementTick+0x158>)
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	f000 faf7 	bl	8006e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800682e:	4b3c      	ldr	r3, [pc, #240]	; (8006920 <xTaskIncrementTick+0x15c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	d349      	bcc.n	80068cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006838:	4b36      	ldr	r3, [pc, #216]	; (8006914 <xTaskIncrementTick+0x150>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006842:	4b37      	ldr	r3, [pc, #220]	; (8006920 <xTaskIncrementTick+0x15c>)
 8006844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006848:	601a      	str	r2, [r3, #0]
					break;
 800684a:	e03f      	b.n	80068cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800684c:	4b31      	ldr	r3, [pc, #196]	; (8006914 <xTaskIncrementTick+0x150>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d203      	bcs.n	800686c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006864:	4a2e      	ldr	r2, [pc, #184]	; (8006920 <xTaskIncrementTick+0x15c>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800686a:	e02f      	b.n	80068cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe ff99 	bl	80057a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	3318      	adds	r3, #24
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe ff90 	bl	80057a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <xTaskIncrementTick+0x160>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <xTaskIncrementTick+0xd8>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a22      	ldr	r2, [pc, #136]	; (8006924 <xTaskIncrementTick+0x160>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <xTaskIncrementTick+0x164>)
 80068aa:	441a      	add	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe ff1b 	bl	80056ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <xTaskIncrementTick+0x168>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d3b8      	bcc.n	8006838 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ca:	e7b5      	b.n	8006838 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068cc:	4b17      	ldr	r3, [pc, #92]	; (800692c <xTaskIncrementTick+0x168>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d2:	4915      	ldr	r1, [pc, #84]	; (8006928 <xTaskIncrementTick+0x164>)
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d901      	bls.n	80068e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <xTaskIncrementTick+0x16c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068f0:	2301      	movs	r3, #1
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e004      	b.n	8006900 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068f6:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <xTaskIncrementTick+0x170>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	4a0d      	ldr	r2, [pc, #52]	; (8006934 <xTaskIncrementTick+0x170>)
 80068fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006900:	697b      	ldr	r3, [r7, #20]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	200053b0 	.word	0x200053b0
 8006910:	2000538c 	.word	0x2000538c
 8006914:	20005340 	.word	0x20005340
 8006918:	20005344 	.word	0x20005344
 800691c:	200053a0 	.word	0x200053a0
 8006920:	200053a8 	.word	0x200053a8
 8006924:	20005390 	.word	0x20005390
 8006928:	20004eb8 	.word	0x20004eb8
 800692c:	20004eb4 	.word	0x20004eb4
 8006930:	2000539c 	.word	0x2000539c
 8006934:	20005398 	.word	0x20005398

08006938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800693e:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <vTaskSwitchContext+0xa8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006946:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <vTaskSwitchContext+0xac>)
 8006948:	2201      	movs	r2, #1
 800694a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800694c:	e041      	b.n	80069d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800694e:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <vTaskSwitchContext+0xac>)
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006954:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <vTaskSwitchContext+0xb0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e010      	b.n	800697e <vTaskSwitchContext+0x46>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <vTaskSwitchContext+0x40>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	607b      	str	r3, [r7, #4]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <vTaskSwitchContext+0x3e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3b01      	subs	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	491b      	ldr	r1, [pc, #108]	; (80069ec <vTaskSwitchContext+0xb4>)
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0e4      	beq.n	800695c <vTaskSwitchContext+0x24>
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <vTaskSwitchContext+0xb4>)
 800699e:	4413      	add	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3308      	adds	r3, #8
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d104      	bne.n	80069c2 <vTaskSwitchContext+0x8a>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <vTaskSwitchContext+0xb8>)
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4a06      	ldr	r2, [pc, #24]	; (80069e8 <vTaskSwitchContext+0xb0>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6013      	str	r3, [r2, #0]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	200053b0 	.word	0x200053b0
 80069e4:	2000539c 	.word	0x2000539c
 80069e8:	20005390 	.word	0x20005390
 80069ec:	20004eb8 	.word	0x20004eb8
 80069f0:	20004eb4 	.word	0x20004eb4

080069f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <vTaskPlaceOnEventList+0x44>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fe fe87 	bl	8005736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a28:	2101      	movs	r1, #1
 8006a2a:	6838      	ldr	r0, [r7, #0]
 8006a2c:	f000 faa2 	bl	8006f74 <prvAddCurrentTaskToDelayedList>
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20004eb4 	.word	0x20004eb4

08006a3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	617b      	str	r3, [r7, #20]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3318      	adds	r3, #24
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7fe fe3e 	bl	80056ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f000 fa77 	bl	8006f74 <prvAddCurrentTaskToDelayedList>
	}
 8006a86:	bf00      	nop
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20004eb4 	.word	0x20004eb4

08006a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fe6f 	bl	80057a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11d      	bne.n	8006b0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fe66 	bl	80057a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d903      	bls.n	8006af0 <xTaskRemoveFromEventList+0x5c>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <xTaskRemoveFromEventList+0xb8>)
 8006afe:	441a      	add	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe fdf1 	bl	80056ee <vListInsertEnd>
 8006b0c:	e005      	b.n	8006b1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3318      	adds	r3, #24
 8006b12:	4619      	mov	r1, r3
 8006b14:	480e      	ldr	r0, [pc, #56]	; (8006b50 <xTaskRemoveFromEventList+0xbc>)
 8006b16:	f7fe fdea 	bl	80056ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <xTaskRemoveFromEventList+0xc0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d905      	bls.n	8006b34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <xTaskRemoveFromEventList+0xc4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e001      	b.n	8006b38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b38:	697b      	ldr	r3, [r7, #20]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200053b0 	.word	0x200053b0
 8006b48:	20005390 	.word	0x20005390
 8006b4c:	20004eb8 	.word	0x20004eb8
 8006b50:	20005348 	.word	0x20005348
 8006b54:	20004eb4 	.word	0x20004eb4
 8006b58:	2000539c 	.word	0x2000539c

08006b5c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60fb      	str	r3, [r7, #12]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006b80:	f000 fec8 	bl	8007914 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <vTaskSetTimeOutState+0x44>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <vTaskSetTimeOutState+0x48>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006b94:	f000 feee 	bl	8007974 <vPortExitCritical>
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	200053a0 	.word	0x200053a0
 8006ba4:	2000538c 	.word	0x2000538c

08006ba8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <vTaskInternalSetTimeOutState+0x24>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <vTaskInternalSetTimeOutState+0x28>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	605a      	str	r2, [r3, #4]
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	200053a0 	.word	0x200053a0
 8006bd0:	2000538c 	.word	0x2000538c

08006bd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	613b      	str	r3, [r7, #16]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60fb      	str	r3, [r7, #12]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c16:	f000 fe7d 	bl	8007914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <xTaskCheckForTimeOut+0xbc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c32:	d102      	bne.n	8006c3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	e023      	b.n	8006c82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b15      	ldr	r3, [pc, #84]	; (8006c94 <xTaskCheckForTimeOut+0xc0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d007      	beq.n	8006c56 <xTaskCheckForTimeOut+0x82>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d302      	bcc.n	8006c56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c50:	2301      	movs	r3, #1
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e015      	b.n	8006c82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d20b      	bcs.n	8006c78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	1ad2      	subs	r2, r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff ff9b 	bl	8006ba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	e004      	b.n	8006c82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c82:	f000 fe77 	bl	8007974 <vPortExitCritical>

	return xReturn;
 8006c86:	69fb      	ldr	r3, [r7, #28]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	2000538c 	.word	0x2000538c
 8006c94:	200053a0 	.word	0x200053a0

08006c98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c9c:	4b03      	ldr	r3, [pc, #12]	; (8006cac <vTaskMissedYield+0x14>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	2000539c 	.word	0x2000539c

08006cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cb8:	f000 f852 	bl	8006d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <prvIdleTask+0x28>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d9f9      	bls.n	8006cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <prvIdleTask+0x2c>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cd4:	e7f0      	b.n	8006cb8 <prvIdleTask+0x8>
 8006cd6:	bf00      	nop
 8006cd8:	20004eb8 	.word	0x20004eb8
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	e00c      	b.n	8006d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4a12      	ldr	r2, [pc, #72]	; (8006d40 <prvInitialiseTaskLists+0x60>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fcca 	bl	8005694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b37      	cmp	r3, #55	; 0x37
 8006d0a:	d9ef      	bls.n	8006cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d0c:	480d      	ldr	r0, [pc, #52]	; (8006d44 <prvInitialiseTaskLists+0x64>)
 8006d0e:	f7fe fcc1 	bl	8005694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d12:	480d      	ldr	r0, [pc, #52]	; (8006d48 <prvInitialiseTaskLists+0x68>)
 8006d14:	f7fe fcbe 	bl	8005694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d18:	480c      	ldr	r0, [pc, #48]	; (8006d4c <prvInitialiseTaskLists+0x6c>)
 8006d1a:	f7fe fcbb 	bl	8005694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d1e:	480c      	ldr	r0, [pc, #48]	; (8006d50 <prvInitialiseTaskLists+0x70>)
 8006d20:	f7fe fcb8 	bl	8005694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d24:	480b      	ldr	r0, [pc, #44]	; (8006d54 <prvInitialiseTaskLists+0x74>)
 8006d26:	f7fe fcb5 	bl	8005694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <prvInitialiseTaskLists+0x78>)
 8006d2c:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <prvInitialiseTaskLists+0x64>)
 8006d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <prvInitialiseTaskLists+0x7c>)
 8006d32:	4a05      	ldr	r2, [pc, #20]	; (8006d48 <prvInitialiseTaskLists+0x68>)
 8006d34:	601a      	str	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20004eb8 	.word	0x20004eb8
 8006d44:	20005318 	.word	0x20005318
 8006d48:	2000532c 	.word	0x2000532c
 8006d4c:	20005348 	.word	0x20005348
 8006d50:	2000535c 	.word	0x2000535c
 8006d54:	20005374 	.word	0x20005374
 8006d58:	20005340 	.word	0x20005340
 8006d5c:	20005344 	.word	0x20005344

08006d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d66:	e019      	b.n	8006d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d68:	f000 fdd4 	bl	8007914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <prvCheckTasksWaitingTermination+0x50>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fd15 	bl	80057a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <prvCheckTasksWaitingTermination+0x54>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	4a0b      	ldr	r2, [pc, #44]	; (8006db4 <prvCheckTasksWaitingTermination+0x54>)
 8006d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d88:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d92:	f000 fdef 	bl	8007974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f810 	bl	8006dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e1      	bne.n	8006d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	2000535c 	.word	0x2000535c
 8006db4:	20005388 	.word	0x20005388
 8006db8:	20005370 	.word	0x20005370

08006dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 ff8c 	bl	8007cf0 <vPortFree>
				vPortFree( pxTCB );
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 ff89 	bl	8007cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dde:	e018      	b.n	8006e12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d103      	bne.n	8006df2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ff80 	bl	8007cf0 <vPortFree>
	}
 8006df0:	e00f      	b.n	8006e12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d00a      	beq.n	8006e12 <prvDeleteTCB+0x56>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <prvDeleteTCB+0x54>
	}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <prvResetNextTaskUnblockTime+0x38>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <prvResetNextTaskUnblockTime+0x3c>)
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e34:	e008      	b.n	8006e48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e36:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <prvResetNextTaskUnblockTime+0x38>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <prvResetNextTaskUnblockTime+0x3c>)
 8006e46:	6013      	str	r3, [r2, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	20005340 	.word	0x20005340
 8006e58:	200053a8 	.word	0x200053a8

08006e5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e62:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <xTaskGetSchedulerState+0x34>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	607b      	str	r3, [r7, #4]
 8006e6e:	e008      	b.n	8006e82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e70:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <xTaskGetSchedulerState+0x38>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	607b      	str	r3, [r7, #4]
 8006e7c:	e001      	b.n	8006e82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e82:	687b      	ldr	r3, [r7, #4]
	}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	20005394 	.word	0x20005394
 8006e94:	200053b0 	.word	0x200053b0

08006e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d056      	beq.n	8006f5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006eae:	4b2e      	ldr	r3, [pc, #184]	; (8006f68 <xTaskPriorityDisinherit+0xd0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d00a      	beq.n	8006ece <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10a      	bne.n	8006eec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60bb      	str	r3, [r7, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	e7fe      	b.n	8006eea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef0:	1e5a      	subs	r2, r3, #1
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d02c      	beq.n	8006f5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d128      	bne.n	8006f5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fc4a 	bl	80057a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <xTaskPriorityDisinherit+0xd4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d903      	bls.n	8006f3c <xTaskPriorityDisinherit+0xa4>
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a0c      	ldr	r2, [pc, #48]	; (8006f6c <xTaskPriorityDisinherit+0xd4>)
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <xTaskPriorityDisinherit+0xd8>)
 8006f4a:	441a      	add	r2, r3
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4619      	mov	r1, r3
 8006f52:	4610      	mov	r0, r2
 8006f54:	f7fe fbcb 	bl	80056ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f5c:	697b      	ldr	r3, [r7, #20]
	}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20004eb4 	.word	0x20004eb4
 8006f6c:	20005390 	.word	0x20005390
 8006f70:	20004eb8 	.word	0x20004eb8

08006f74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f7e:	4b21      	ldr	r3, [pc, #132]	; (8007004 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f84:	4b20      	ldr	r3, [pc, #128]	; (8007008 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fc0c 	bl	80057a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f96:	d10a      	bne.n	8006fae <prvAddCurrentTaskToDelayedList+0x3a>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4819      	ldr	r0, [pc, #100]	; (800700c <prvAddCurrentTaskToDelayedList+0x98>)
 8006fa8:	f7fe fba1 	bl	80056ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fac:	e026      	b.n	8006ffc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d209      	bcs.n	8006fda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fe fbaf 	bl	8005736 <vListInsert>
}
 8006fd8:	e010      	b.n	8006ffc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7fe fba5 	bl	8005736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d202      	bcs.n	8006ffc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ff6:	4a08      	ldr	r2, [pc, #32]	; (8007018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	6013      	str	r3, [r2, #0]
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	2000538c 	.word	0x2000538c
 8007008:	20004eb4 	.word	0x20004eb4
 800700c:	20005374 	.word	0x20005374
 8007010:	20005344 	.word	0x20005344
 8007014:	20005340 	.word	0x20005340
 8007018:	200053a8 	.word	0x200053a8

0800701c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007026:	f000 fb07 	bl	8007638 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800702a:	4b1c      	ldr	r3, [pc, #112]	; (800709c <xTimerCreateTimerTask+0x80>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d021      	beq.n	8007076 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800703a:	1d3a      	adds	r2, r7, #4
 800703c:	f107 0108 	add.w	r1, r7, #8
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fb0b 	bl	8005660 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	9202      	str	r2, [sp, #8]
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	2302      	movs	r3, #2
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	2300      	movs	r3, #0
 800705a:	460a      	mov	r2, r1
 800705c:	4910      	ldr	r1, [pc, #64]	; (80070a0 <xTimerCreateTimerTask+0x84>)
 800705e:	4811      	ldr	r0, [pc, #68]	; (80070a4 <xTimerCreateTimerTask+0x88>)
 8007060:	f7ff f8b8 	bl	80061d4 <xTaskCreateStatic>
 8007064:	4603      	mov	r3, r0
 8007066:	4a10      	ldr	r2, [pc, #64]	; (80070a8 <xTimerCreateTimerTask+0x8c>)
 8007068:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800706a:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <xTimerCreateTimerTask+0x8c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007072:	2301      	movs	r3, #1
 8007074:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	613b      	str	r3, [r7, #16]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007092:	697b      	ldr	r3, [r7, #20]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	200053e4 	.word	0x200053e4
 80070a0:	08012b3c 	.word	0x08012b3c
 80070a4:	080071e1 	.word	0x080071e1
 80070a8:	200053e8 	.word	0x200053e8

080070ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	; 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <xTimerGenericCommand+0x2e>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	623b      	str	r3, [r7, #32]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070da:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <xTimerGenericCommand+0x98>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d02a      	beq.n	8007138 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b05      	cmp	r3, #5
 80070f2:	dc18      	bgt.n	8007126 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070f4:	f7ff feb2 	bl	8006e5c <xTaskGetSchedulerState>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d109      	bne.n	8007112 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <xTimerGenericCommand+0x98>)
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	f107 0110 	add.w	r1, r7, #16
 8007106:	2300      	movs	r3, #0
 8007108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710a:	f7fe fc7b 	bl	8005a04 <xQueueGenericSend>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24
 8007110:	e012      	b.n	8007138 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007112:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <xTimerGenericCommand+0x98>)
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	f107 0110 	add.w	r1, r7, #16
 800711a:	2300      	movs	r3, #0
 800711c:	2200      	movs	r2, #0
 800711e:	f7fe fc71 	bl	8005a04 <xQueueGenericSend>
 8007122:	6278      	str	r0, [r7, #36]	; 0x24
 8007124:	e008      	b.n	8007138 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <xTimerGenericCommand+0x98>)
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f107 0110 	add.w	r1, r7, #16
 800712e:	2300      	movs	r3, #0
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	f7fe fd65 	bl	8005c00 <xQueueGenericSendFromISR>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800713a:	4618      	mov	r0, r3
 800713c:	3728      	adds	r7, #40	; 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200053e4 	.word	0x200053e4

08007148 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af02      	add	r7, sp, #8
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007152:	4b22      	ldr	r3, [pc, #136]	; (80071dc <prvProcessExpiredTimer+0x94>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3304      	adds	r3, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fb21 	bl	80057a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d022      	beq.n	80071ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	18d1      	adds	r1, r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	6978      	ldr	r0, [r7, #20]
 8007182:	f000 f8d1 	bl	8007328 <prvInsertTimerInActiveList>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01f      	beq.n	80071cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800718c:	2300      	movs	r3, #0
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	2100      	movs	r1, #0
 8007196:	6978      	ldr	r0, [r7, #20]
 8007198:	f7ff ff88 	bl	80070ac <xTimerGenericCommand>
 800719c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d113      	bne.n	80071cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	60fb      	str	r3, [r7, #12]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	6978      	ldr	r0, [r7, #20]
 80071d2:	4798      	blx	r3
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200053dc 	.word	0x200053dc

080071e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071e8:	f107 0308 	add.w	r3, r7, #8
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f857 	bl	80072a0 <prvGetNextExpireTime>
 80071f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4619      	mov	r1, r3
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f803 	bl	8007204 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071fe:	f000 f8d5 	bl	80073ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007202:	e7f1      	b.n	80071e8 <prvTimerTask+0x8>

08007204 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800720e:	f7ff fa1d 	bl	800664c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007212:	f107 0308 	add.w	r3, r7, #8
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f866 	bl	80072e8 <prvSampleTimeNow>
 800721c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d130      	bne.n	8007286 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <prvProcessTimerOrBlockTask+0x3c>
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	429a      	cmp	r2, r3
 8007230:	d806      	bhi.n	8007240 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007232:	f7ff fa19 	bl	8006668 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ff85 	bl	8007148 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800723e:	e024      	b.n	800728a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <prvProcessTimerOrBlockTask+0x90>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <prvProcessTimerOrBlockTask+0x50>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <prvProcessTimerOrBlockTask+0x52>
 8007254:	2300      	movs	r3, #0
 8007256:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007258:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <prvProcessTimerOrBlockTask+0x94>)
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	4619      	mov	r1, r3
 8007266:	f7fe ff81 	bl	800616c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800726a:	f7ff f9fd 	bl	8006668 <xTaskResumeAll>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007274:	4b09      	ldr	r3, [pc, #36]	; (800729c <prvProcessTimerOrBlockTask+0x98>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
}
 8007284:	e001      	b.n	800728a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007286:	f7ff f9ef 	bl	8006668 <xTaskResumeAll>
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	200053e0 	.word	0x200053e0
 8007298:	200053e4 	.word	0x200053e4
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072a8:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <prvGetNextExpireTime+0x44>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <prvGetNextExpireTime+0x16>
 80072b2:	2201      	movs	r2, #1
 80072b4:	e000      	b.n	80072b8 <prvGetNextExpireTime+0x18>
 80072b6:	2200      	movs	r2, #0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <prvGetNextExpireTime+0x44>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	e001      	b.n	80072d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	200053dc 	.word	0x200053dc

080072e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072f0:	f7ff fa58 	bl	80067a4 <xTaskGetTickCount>
 80072f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <prvSampleTimeNow+0x3c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d205      	bcs.n	800730c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007300:	f000 f936 	bl	8007570 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	e002      	b.n	8007312 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007312:	4a04      	ldr	r2, [pc, #16]	; (8007324 <prvSampleTimeNow+0x3c>)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007318:	68fb      	ldr	r3, [r7, #12]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200053ec 	.word	0x200053ec

08007328 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	429a      	cmp	r2, r3
 800734c:	d812      	bhi.n	8007374 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	1ad2      	subs	r2, r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	429a      	cmp	r2, r3
 800735a:	d302      	bcc.n	8007362 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800735c:	2301      	movs	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	e01b      	b.n	800739a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007362:	4b10      	ldr	r3, [pc, #64]	; (80073a4 <prvInsertTimerInActiveList+0x7c>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fe f9e2 	bl	8005736 <vListInsert>
 8007372:	e012      	b.n	800739a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d206      	bcs.n	800738a <prvInsertTimerInActiveList+0x62>
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d302      	bcc.n	800738a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e007      	b.n	800739a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800738a:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <prvInsertTimerInActiveList+0x80>)
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3304      	adds	r3, #4
 8007392:	4619      	mov	r1, r3
 8007394:	4610      	mov	r0, r2
 8007396:	f7fe f9ce 	bl	8005736 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800739a:	697b      	ldr	r3, [r7, #20]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	200053e0 	.word	0x200053e0
 80073a8:	200053dc 	.word	0x200053dc

080073ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	; 0x38
 80073b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073b2:	e0ca      	b.n	800754a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da18      	bge.n	80073ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073ba:	1d3b      	adds	r3, r7, #4
 80073bc:	3304      	adds	r3, #4
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	61fb      	str	r3, [r7, #28]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e2:	6850      	ldr	r0, [r2, #4]
 80073e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e6:	6892      	ldr	r2, [r2, #8]
 80073e8:	4611      	mov	r1, r2
 80073ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f2c0 80ab 	blt.w	800754a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d004      	beq.n	800740a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	3304      	adds	r3, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe f9cf 	bl	80057a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800740a:	463b      	mov	r3, r7
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff ff6b 	bl	80072e8 <prvSampleTimeNow>
 8007412:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b09      	cmp	r3, #9
 8007418:	f200 8096 	bhi.w	8007548 <prvProcessReceivedCommands+0x19c>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <prvProcessReceivedCommands+0x78>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	0800744d 	.word	0x0800744d
 8007428:	0800744d 	.word	0x0800744d
 800742c:	0800744d 	.word	0x0800744d
 8007430:	080074c1 	.word	0x080074c1
 8007434:	080074d5 	.word	0x080074d5
 8007438:	0800751f 	.word	0x0800751f
 800743c:	0800744d 	.word	0x0800744d
 8007440:	0800744d 	.word	0x0800744d
 8007444:	080074c1 	.word	0x080074c1
 8007448:	080074d5 	.word	0x080074d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	b2da      	uxtb	r2, r3
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	18d1      	adds	r1, r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746c:	f7ff ff5c 	bl	8007328 <prvInsertTimerInActiveList>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d069      	beq.n	800754a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800747c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d05e      	beq.n	800754a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	441a      	add	r2, r3
 8007494:	2300      	movs	r3, #0
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	2300      	movs	r3, #0
 800749a:	2100      	movs	r1, #0
 800749c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800749e:	f7ff fe05 	bl	80070ac <xTimerGenericCommand>
 80074a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d14f      	bne.n	800754a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	61bb      	str	r3, [r7, #24]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c6:	f023 0301 	bic.w	r3, r3, #1
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074d2:	e03a      	b.n	800754a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074da:	f043 0301 	orr.w	r3, r3, #1
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	617b      	str	r3, [r7, #20]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	18d1      	adds	r1, r2, r3
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007518:	f7ff ff06 	bl	8007328 <prvInsertTimerInActiveList>
					break;
 800751c:	e015      	b.n	800754a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800752c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752e:	f000 fbdf 	bl	8007cf0 <vPortFree>
 8007532:	e00a      	b.n	800754a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800753a:	f023 0301 	bic.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007546:	e000      	b.n	800754a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007548:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <prvProcessReceivedCommands+0x1c0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1d39      	adds	r1, r7, #4
 8007550:	2200      	movs	r2, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fbf0 	bl	8005d38 <xQueueReceive>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	f47f af2a 	bne.w	80073b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3730      	adds	r7, #48	; 0x30
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200053e4 	.word	0x200053e4

08007570 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007576:	e048      	b.n	800760a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007578:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <prvSwitchTimerLists+0xc0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007582:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <prvSwitchTimerLists+0xc0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3304      	adds	r3, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe f909 	bl	80057a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02e      	beq.n	800760a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4413      	add	r3, r2
 80075b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d90e      	bls.n	80075dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ca:	4b19      	ldr	r3, [pc, #100]	; (8007630 <prvSwitchTimerLists+0xc0>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7fe f8ae 	bl	8005736 <vListInsert>
 80075da:	e016      	b.n	800760a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075dc:	2300      	movs	r3, #0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2300      	movs	r3, #0
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	2100      	movs	r1, #0
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fd60 	bl	80070ac <xTimerGenericCommand>
 80075ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	603b      	str	r3, [r7, #0]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800760a:	4b09      	ldr	r3, [pc, #36]	; (8007630 <prvSwitchTimerLists+0xc0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1b1      	bne.n	8007578 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <prvSwitchTimerLists+0xc0>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <prvSwitchTimerLists+0xc4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a04      	ldr	r2, [pc, #16]	; (8007630 <prvSwitchTimerLists+0xc0>)
 8007620:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007622:	4a04      	ldr	r2, [pc, #16]	; (8007634 <prvSwitchTimerLists+0xc4>)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	6013      	str	r3, [r2, #0]
}
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	200053dc 	.word	0x200053dc
 8007634:	200053e0 	.word	0x200053e0

08007638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800763e:	f000 f969 	bl	8007914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <prvCheckForValidListAndQueue+0x60>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d120      	bne.n	800768c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800764a:	4814      	ldr	r0, [pc, #80]	; (800769c <prvCheckForValidListAndQueue+0x64>)
 800764c:	f7fe f822 	bl	8005694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007650:	4813      	ldr	r0, [pc, #76]	; (80076a0 <prvCheckForValidListAndQueue+0x68>)
 8007652:	f7fe f81f 	bl	8005694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007656:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <prvCheckForValidListAndQueue+0x6c>)
 8007658:	4a10      	ldr	r2, [pc, #64]	; (800769c <prvCheckForValidListAndQueue+0x64>)
 800765a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800765c:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <prvCheckForValidListAndQueue+0x70>)
 800765e:	4a10      	ldr	r2, [pc, #64]	; (80076a0 <prvCheckForValidListAndQueue+0x68>)
 8007660:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007662:	2300      	movs	r3, #0
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	4b11      	ldr	r3, [pc, #68]	; (80076ac <prvCheckForValidListAndQueue+0x74>)
 8007668:	4a11      	ldr	r2, [pc, #68]	; (80076b0 <prvCheckForValidListAndQueue+0x78>)
 800766a:	2110      	movs	r1, #16
 800766c:	200a      	movs	r0, #10
 800766e:	f7fe f92d 	bl	80058cc <xQueueGenericCreateStatic>
 8007672:	4603      	mov	r3, r0
 8007674:	4a08      	ldr	r2, [pc, #32]	; (8007698 <prvCheckForValidListAndQueue+0x60>)
 8007676:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <prvCheckForValidListAndQueue+0x60>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <prvCheckForValidListAndQueue+0x60>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	490b      	ldr	r1, [pc, #44]	; (80076b4 <prvCheckForValidListAndQueue+0x7c>)
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fd46 	bl	8006118 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800768c:	f000 f972 	bl	8007974 <vPortExitCritical>
}
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200053e4 	.word	0x200053e4
 800769c:	200053b4 	.word	0x200053b4
 80076a0:	200053c8 	.word	0x200053c8
 80076a4:	200053dc 	.word	0x200053dc
 80076a8:	200053e0 	.word	0x200053e0
 80076ac:	20005490 	.word	0x20005490
 80076b0:	200053f0 	.word	0x200053f0
 80076b4:	08012b44 	.word	0x08012b44

080076b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3b04      	subs	r3, #4
 80076c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f023 0201 	bic.w	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3b04      	subs	r3, #4
 80076e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076e8:	4a0c      	ldr	r2, [pc, #48]	; (800771c <pxPortInitialiseStack+0x64>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3b14      	subs	r3, #20
 80076f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f06f 0202 	mvn.w	r2, #2
 8007706:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3b20      	subs	r3, #32
 800770c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800770e:	68fb      	ldr	r3, [r7, #12]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	08007721 	.word	0x08007721

08007720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <prvTaskExitError+0x54>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007732:	d00a      	beq.n	800774a <prvTaskExitError+0x2a>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <prvTaskExitError+0x28>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	60bb      	str	r3, [r7, #8]
}
 800775c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800775e:	bf00      	nop
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0fc      	beq.n	8007760 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	20000010 	.word	0x20000010
	...

08007780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <pxCurrentTCBConst2>)
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	6808      	ldr	r0, [r1, #0]
 8007786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778a:	f380 8809 	msr	PSP, r0
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8811 	msr	BASEPRI, r0
 800779a:	4770      	bx	lr
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst2>:
 80077a0:	20004eb4 	.word	0x20004eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077a8:	4808      	ldr	r0, [pc, #32]	; (80077cc <prvPortStartFirstTask+0x24>)
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	6800      	ldr	r0, [r0, #0]
 80077ae:	f380 8808 	msr	MSP, r0
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8814 	msr	CONTROL, r0
 80077ba:	b662      	cpsie	i
 80077bc:	b661      	cpsie	f
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	df00      	svc	0
 80077c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ca:	bf00      	nop
 80077cc:	e000ed08 	.word	0xe000ed08

080077d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077d6:	4b46      	ldr	r3, [pc, #280]	; (80078f0 <xPortStartScheduler+0x120>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a46      	ldr	r2, [pc, #280]	; (80078f4 <xPortStartScheduler+0x124>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10a      	bne.n	80077f6 <xPortStartScheduler+0x26>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077f6:	4b3e      	ldr	r3, [pc, #248]	; (80078f0 <xPortStartScheduler+0x120>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a3f      	ldr	r2, [pc, #252]	; (80078f8 <xPortStartScheduler+0x128>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10a      	bne.n	8007816 <xPortStartScheduler+0x46>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60fb      	str	r3, [r7, #12]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007816:	4b39      	ldr	r3, [pc, #228]	; (80078fc <xPortStartScheduler+0x12c>)
 8007818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	22ff      	movs	r2, #255	; 0xff
 8007826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4b31      	ldr	r3, [pc, #196]	; (8007900 <xPortStartScheduler+0x130>)
 800783c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800783e:	4b31      	ldr	r3, [pc, #196]	; (8007904 <xPortStartScheduler+0x134>)
 8007840:	2207      	movs	r2, #7
 8007842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007844:	e009      	b.n	800785a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007846:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <xPortStartScheduler+0x134>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3b01      	subs	r3, #1
 800784c:	4a2d      	ldr	r2, [pc, #180]	; (8007904 <xPortStartScheduler+0x134>)
 800784e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d0ef      	beq.n	8007846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007866:	4b27      	ldr	r3, [pc, #156]	; (8007904 <xPortStartScheduler+0x134>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1c3 0307 	rsb	r3, r3, #7
 800786e:	2b04      	cmp	r3, #4
 8007870:	d00a      	beq.n	8007888 <xPortStartScheduler+0xb8>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60bb      	str	r3, [r7, #8]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007888:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <xPortStartScheduler+0x134>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <xPortStartScheduler+0x134>)
 8007890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007892:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <xPortStartScheduler+0x134>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800789a:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <xPortStartScheduler+0x134>)
 800789c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <xPortStartScheduler+0x138>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a17      	ldr	r2, [pc, #92]	; (8007908 <xPortStartScheduler+0x138>)
 80078ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078b2:	4b15      	ldr	r3, [pc, #84]	; (8007908 <xPortStartScheduler+0x138>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a14      	ldr	r2, [pc, #80]	; (8007908 <xPortStartScheduler+0x138>)
 80078b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078be:	f000 f8dd 	bl	8007a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078c2:	4b12      	ldr	r3, [pc, #72]	; (800790c <xPortStartScheduler+0x13c>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078c8:	f000 f8fc 	bl	8007ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078cc:	4b10      	ldr	r3, [pc, #64]	; (8007910 <xPortStartScheduler+0x140>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0f      	ldr	r2, [pc, #60]	; (8007910 <xPortStartScheduler+0x140>)
 80078d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078d8:	f7ff ff66 	bl	80077a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078dc:	f7ff f82c 	bl	8006938 <vTaskSwitchContext>
	prvTaskExitError();
 80078e0:	f7ff ff1e 	bl	8007720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	e000ed00 	.word	0xe000ed00
 80078f4:	410fc271 	.word	0x410fc271
 80078f8:	410fc270 	.word	0x410fc270
 80078fc:	e000e400 	.word	0xe000e400
 8007900:	200054e0 	.word	0x200054e0
 8007904:	200054e4 	.word	0x200054e4
 8007908:	e000ed20 	.word	0xe000ed20
 800790c:	20000010 	.word	0x20000010
 8007910:	e000ef34 	.word	0xe000ef34

08007914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	607b      	str	r3, [r7, #4]
}
 800792c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <vPortEnterCritical+0x58>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	4a0d      	ldr	r2, [pc, #52]	; (800796c <vPortEnterCritical+0x58>)
 8007936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <vPortEnterCritical+0x58>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d10f      	bne.n	8007960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <vPortEnterCritical+0x5c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <vPortEnterCritical+0x4c>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	603b      	str	r3, [r7, #0]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <vPortEnterCritical+0x4a>
	}
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000010 	.word	0x20000010
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <vPortExitCritical+0x50>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <vPortExitCritical+0x24>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	607b      	str	r3, [r7, #4]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <vPortExitCritical+0x50>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3b01      	subs	r3, #1
 800799e:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <vPortExitCritical+0x50>)
 80079a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <vPortExitCritical+0x50>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d105      	bne.n	80079b6 <vPortExitCritical+0x42>
 80079aa:	2300      	movs	r3, #0
 80079ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	f383 8811 	msr	BASEPRI, r3
}
 80079b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000010 	.word	0x20000010
	...

080079d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <pxCurrentTCBConst>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f01e 0f10 	tst.w	lr, #16
 80079e0:	bf08      	it	eq
 80079e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	6010      	str	r0, [r2, #0]
 80079ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079f4:	f380 8811 	msr	BASEPRI, r0
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f7fe ff9a 	bl	8006938 <vTaskSwitchContext>
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f380 8811 	msr	BASEPRI, r0
 8007a0c:	bc09      	pop	{r0, r3}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	f01e 0f10 	tst.w	lr, #16
 8007a1a:	bf08      	it	eq
 8007a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a20:	f380 8809 	msr	PSP, r0
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst>:
 8007a30:	20004eb4 	.word	0x20004eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
}
 8007a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a52:	f7fe feb7 	bl	80067c4 <xTaskIncrementTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a5c:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <xPortSysTickHandler+0x40>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
}
 8007a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <vPortSetupTimerInterrupt+0x38>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <vPortSetupTimerInterrupt+0x3c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0a      	ldr	r2, [pc, #40]	; (8007abc <vPortSetupTimerInterrupt+0x40>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <vPortSetupTimerInterrupt+0x44>)
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a9e:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	e000e010 	.word	0xe000e010
 8007ab4:	e000e018 	.word	0xe000e018
 8007ab8:	20000004 	.word	0x20000004
 8007abc:	10624dd3 	.word	0x10624dd3
 8007ac0:	e000e014 	.word	0xe000e014

08007ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ad4 <vPortEnableVFP+0x10>
 8007ac8:	6801      	ldr	r1, [r0, #0]
 8007aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ace:	6001      	str	r1, [r0, #0]
 8007ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed88 	.word	0xe000ed88

08007ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ade:	f3ef 8305 	mrs	r3, IPSR
 8007ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d914      	bls.n	8007b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aea:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <vPortValidateInterruptPriority+0x70>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007af4:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <vPortValidateInterruptPriority+0x74>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	7afa      	ldrb	r2, [r7, #11]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d20a      	bcs.n	8007b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
 8007b12:	e7fe      	b.n	8007b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b14:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <vPortValidateInterruptPriority+0x78>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <vPortValidateInterruptPriority+0x7c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d90a      	bls.n	8007b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	603b      	str	r3, [r7, #0]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <vPortValidateInterruptPriority+0x60>
	}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	e000e3f0 	.word	0xe000e3f0
 8007b4c:	200054e0 	.word	0x200054e0
 8007b50:	e000ed0c 	.word	0xe000ed0c
 8007b54:	200054e4 	.word	0x200054e4

08007b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b64:	f7fe fd72 	bl	800664c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b68:	4b5b      	ldr	r3, [pc, #364]	; (8007cd8 <pvPortMalloc+0x180>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b70:	f000 f920 	bl	8007db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b74:	4b59      	ldr	r3, [pc, #356]	; (8007cdc <pvPortMalloc+0x184>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 8093 	bne.w	8007ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01d      	beq.n	8007bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b88:	2208      	movs	r2, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d014      	beq.n	8007bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f023 0307 	bic.w	r3, r3, #7
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	617b      	str	r3, [r7, #20]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d06e      	beq.n	8007ca8 <pvPortMalloc+0x150>
 8007bca:	4b45      	ldr	r3, [pc, #276]	; (8007ce0 <pvPortMalloc+0x188>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d869      	bhi.n	8007ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bd4:	4b43      	ldr	r3, [pc, #268]	; (8007ce4 <pvPortMalloc+0x18c>)
 8007bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bd8:	4b42      	ldr	r3, [pc, #264]	; (8007ce4 <pvPortMalloc+0x18c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bde:	e004      	b.n	8007bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d903      	bls.n	8007bfc <pvPortMalloc+0xa4>
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1f1      	bne.n	8007be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bfc:	4b36      	ldr	r3, [pc, #216]	; (8007cd8 <pvPortMalloc+0x180>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d050      	beq.n	8007ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	4413      	add	r3, r2
 8007c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	2308      	movs	r3, #8
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d91f      	bls.n	8007c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <pvPortMalloc+0xf8>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	613b      	str	r3, [r7, #16]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	1ad2      	subs	r2, r2, r3
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c62:	69b8      	ldr	r0, [r7, #24]
 8007c64:	f000 f908 	bl	8007e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c68:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c76:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <pvPortMalloc+0x190>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d203      	bcs.n	8007c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c82:	4b17      	ldr	r3, [pc, #92]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <pvPortMalloc+0x190>)
 8007c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <pvPortMalloc+0x184>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c9e:	4b13      	ldr	r3, [pc, #76]	; (8007cec <pvPortMalloc+0x194>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	4a11      	ldr	r2, [pc, #68]	; (8007cec <pvPortMalloc+0x194>)
 8007ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ca8:	f7fe fcde 	bl	8006668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <pvPortMalloc+0x174>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <pvPortMalloc+0x172>
	return pvReturn;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3728      	adds	r7, #40	; 0x28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200090f0 	.word	0x200090f0
 8007cdc:	20009104 	.word	0x20009104
 8007ce0:	200090f4 	.word	0x200090f4
 8007ce4:	200090e8 	.word	0x200090e8
 8007ce8:	200090f8 	.word	0x200090f8
 8007cec:	200090fc 	.word	0x200090fc

08007cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d04d      	beq.n	8007d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d02:	2308      	movs	r3, #8
 8007d04:	425b      	negs	r3, r3
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4413      	add	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <vPortFree+0xb8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <vPortFree+0x44>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	60fb      	str	r3, [r7, #12]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <vPortFree+0x62>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	60bb      	str	r3, [r7, #8]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <vPortFree+0xb8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01e      	beq.n	8007d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11a      	bne.n	8007d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <vPortFree+0xb8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	43db      	mvns	r3, r3
 8007d72:	401a      	ands	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d78:	f7fe fc68 	bl	800664c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <vPortFree+0xbc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4413      	add	r3, r2
 8007d86:	4a09      	ldr	r2, [pc, #36]	; (8007dac <vPortFree+0xbc>)
 8007d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d8a:	6938      	ldr	r0, [r7, #16]
 8007d8c:	f000 f874 	bl	8007e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <vPortFree+0xc0>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a06      	ldr	r2, [pc, #24]	; (8007db0 <vPortFree+0xc0>)
 8007d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d9a:	f7fe fc65 	bl	8006668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d9e:	bf00      	nop
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20009104 	.word	0x20009104
 8007dac:	200090f4 	.word	0x200090f4
 8007db0:	20009100 	.word	0x20009100

08007db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dc0:	4b27      	ldr	r3, [pc, #156]	; (8007e60 <prvHeapInit+0xac>)
 8007dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00c      	beq.n	8007de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3307      	adds	r3, #7
 8007dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0307 	bic.w	r3, r3, #7
 8007dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	4a1f      	ldr	r2, [pc, #124]	; (8007e60 <prvHeapInit+0xac>)
 8007de4:	4413      	add	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dec:	4a1d      	ldr	r2, [pc, #116]	; (8007e64 <prvHeapInit+0xb0>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007df2:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <prvHeapInit+0xb0>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e00:	2208      	movs	r2, #8
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0307 	bic.w	r3, r3, #7
 8007e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <prvHeapInit+0xb4>)
 8007e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <prvHeapInit+0xb4>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e1e:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <prvHeapInit+0xb4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <prvHeapInit+0xb4>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <prvHeapInit+0xb8>)
 8007e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4a09      	ldr	r2, [pc, #36]	; (8007e70 <prvHeapInit+0xbc>)
 8007e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <prvHeapInit+0xc0>)
 8007e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e52:	601a      	str	r2, [r3, #0]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	200054e8 	.word	0x200054e8
 8007e64:	200090e8 	.word	0x200090e8
 8007e68:	200090f0 	.word	0x200090f0
 8007e6c:	200090f8 	.word	0x200090f8
 8007e70:	200090f4 	.word	0x200090f4
 8007e74:	20009104 	.word	0x20009104

08007e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e80:	4b28      	ldr	r3, [pc, #160]	; (8007f24 <prvInsertBlockIntoFreeList+0xac>)
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	e002      	b.n	8007e8c <prvInsertBlockIntoFreeList+0x14>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d8f7      	bhi.n	8007e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d108      	bne.n	8007eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	441a      	add	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d118      	bne.n	8007f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d00d      	beq.n	8007ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	e008      	b.n	8007f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	e003      	b.n	8007f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d002      	beq.n	8007f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	200090e8 	.word	0x200090e8
 8007f28:	200090f0 	.word	0x200090f0

08007f2c <rcl_get_zero_initialized_publisher>:
 8007f2c:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <rcl_get_zero_initialized_publisher+0x8>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	08012b9c 	.word	0x08012b9c

08007f38 <rcl_publisher_init>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	b088      	sub	sp, #32
 8007f3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	d069      	beq.n	8008018 <rcl_publisher_init+0xe0>
 8007f44:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4648      	mov	r0, r9
 8007f4c:	460e      	mov	r6, r1
 8007f4e:	4690      	mov	r8, r2
 8007f50:	461f      	mov	r7, r3
 8007f52:	f000 fa09 	bl	8008368 <rcutils_allocator_is_valid>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d05e      	beq.n	8008018 <rcl_publisher_init+0xe0>
 8007f5a:	2c00      	cmp	r4, #0
 8007f5c:	d05c      	beq.n	8008018 <rcl_publisher_init+0xe0>
 8007f5e:	f8d4 a000 	ldr.w	sl, [r4]
 8007f62:	f1ba 0f00 	cmp.w	sl, #0
 8007f66:	d004      	beq.n	8007f72 <rcl_publisher_init+0x3a>
 8007f68:	2764      	movs	r7, #100	; 0x64
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	b008      	add	sp, #32
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	4630      	mov	r0, r6
 8007f74:	f005 f980 	bl	800d278 <rcl_node_is_valid>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d052      	beq.n	8008022 <rcl_publisher_init+0xea>
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	d04a      	beq.n	8008018 <rcl_publisher_init+0xe0>
 8007f82:	2f00      	cmp	r7, #0
 8007f84:	d048      	beq.n	8008018 <rcl_publisher_init+0xe0>
 8007f86:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8007f8a:	aa07      	add	r2, sp, #28
 8007f8c:	9205      	str	r2, [sp, #20]
 8007f8e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007f92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007f9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	e899 000c 	ldmia.w	r9, {r2, r3}
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f005 f9bb 	bl	800d320 <rcl_node_resolve_name>
 8007faa:	4607      	mov	r7, r0
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d14f      	bne.n	8008050 <rcl_publisher_init+0x118>
 8007fb0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007fb2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007fb4:	20c8      	movs	r0, #200	; 0xc8
 8007fb6:	4798      	blx	r3
 8007fb8:	6020      	str	r0, [r4, #0]
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d04e      	beq.n	800805c <rcl_publisher_init+0x124>
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f005 f97c 	bl	800d2bc <rcl_node_get_rmw_handle>
 8007fc4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	9a07      	ldr	r2, [sp, #28]
 8007fcc:	6827      	ldr	r7, [r4, #0]
 8007fce:	462b      	mov	r3, r5
 8007fd0:	4641      	mov	r1, r8
 8007fd2:	f000 fa87 	bl	80084e4 <rmw_create_publisher>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8007fdc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007fe0:	b370      	cbz	r0, 8008040 <rcl_publisher_init+0x108>
 8007fe2:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007fe6:	f000 fb5b 	bl	80086a0 <rmw_publisher_get_actual_qos>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	4607      	mov	r7, r0
 8007fee:	b9d0      	cbnz	r0, 8008026 <rcl_publisher_init+0xee>
 8007ff0:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8007ff4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	2270      	movs	r2, #112	; 0x70
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f009 fe55 	bl	8011cac <memcpy>
 8008002:	6832      	ldr	r2, [r6, #0]
 8008004:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8008008:	9807      	ldr	r0, [sp, #28]
 800800a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800800c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800800e:	4798      	blx	r3
 8008010:	4638      	mov	r0, r7
 8008012:	b008      	add	sp, #32
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	270b      	movs	r7, #11
 800801a:	4638      	mov	r0, r7
 800801c:	b008      	add	sp, #32
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	27c8      	movs	r7, #200	; 0xc8
 8008024:	e7a1      	b.n	8007f6a <rcl_publisher_init+0x32>
 8008026:	b18b      	cbz	r3, 800804c <rcl_publisher_init+0x114>
 8008028:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800802c:	b142      	cbz	r2, 8008040 <rcl_publisher_init+0x108>
 800802e:	4630      	mov	r0, r6
 8008030:	f005 f944 	bl	800d2bc <rcl_node_get_rmw_handle>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800803a:	f000 fb41 	bl	80086c0 <rmw_destroy_publisher>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8008042:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008044:	4618      	mov	r0, r3
 8008046:	4790      	blx	r2
 8008048:	2300      	movs	r3, #0
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	2701      	movs	r7, #1
 800804e:	e7db      	b.n	8008008 <rcl_publisher_init+0xd0>
 8008050:	2867      	cmp	r0, #103	; 0x67
 8008052:	d0d9      	beq.n	8008008 <rcl_publisher_init+0xd0>
 8008054:	2869      	cmp	r0, #105	; 0x69
 8008056:	d003      	beq.n	8008060 <rcl_publisher_init+0x128>
 8008058:	280a      	cmp	r0, #10
 800805a:	d1f7      	bne.n	800804c <rcl_publisher_init+0x114>
 800805c:	270a      	movs	r7, #10
 800805e:	e7d3      	b.n	8008008 <rcl_publisher_init+0xd0>
 8008060:	2767      	movs	r7, #103	; 0x67
 8008062:	e7d1      	b.n	8008008 <rcl_publisher_init+0xd0>

08008064 <rcl_publisher_get_default_options>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4d14      	ldr	r5, [pc, #80]	; (80080b8 <rcl_publisher_get_default_options+0x54>)
 8008068:	4914      	ldr	r1, [pc, #80]	; (80080bc <rcl_publisher_get_default_options+0x58>)
 800806a:	b088      	sub	sp, #32
 800806c:	4604      	mov	r4, r0
 800806e:	2250      	movs	r2, #80	; 0x50
 8008070:	4628      	mov	r0, r5
 8008072:	f009 fe1b 	bl	8011cac <memcpy>
 8008076:	a802      	add	r0, sp, #8
 8008078:	f000 f968 	bl	800834c <rcutils_get_default_allocator>
 800807c:	f10d 0c08 	add.w	ip, sp, #8
 8008080:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008084:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8008088:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800808c:	466e      	mov	r6, sp
 800808e:	f8dc 3000 	ldr.w	r3, [ip]
 8008092:	f8ce 3000 	str.w	r3, [lr]
 8008096:	4630      	mov	r0, r6
 8008098:	f000 f9a6 	bl	80083e8 <rmw_get_default_publisher_options>
 800809c:	e896 0003 	ldmia.w	r6, {r0, r1}
 80080a0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80080a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80080a8:	2270      	movs	r2, #112	; 0x70
 80080aa:	4629      	mov	r1, r5
 80080ac:	4620      	mov	r0, r4
 80080ae:	f009 fdfd 	bl	8011cac <memcpy>
 80080b2:	4620      	mov	r0, r4
 80080b4:	b008      	add	sp, #32
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	20009108 	.word	0x20009108
 80080bc:	08012ba0 	.word	0x08012ba0

080080c0 <rcl_publish>:
 80080c0:	b1f8      	cbz	r0, 8008102 <rcl_publish+0x42>
 80080c2:	6803      	ldr	r3, [r0, #0]
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	b1b3      	cbz	r3, 80080f8 <rcl_publish+0x38>
 80080ca:	4616      	mov	r6, r2
 80080cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80080d0:	b192      	cbz	r2, 80080f8 <rcl_publish+0x38>
 80080d2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80080d6:	460d      	mov	r5, r1
 80080d8:	f004 fcf4 	bl	800cac4 <rcl_context_is_valid>
 80080dc:	b160      	cbz	r0, 80080f8 <rcl_publish+0x38>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80080e4:	b140      	cbz	r0, 80080f8 <rcl_publish+0x38>
 80080e6:	b155      	cbz	r5, 80080fe <rcl_publish+0x3e>
 80080e8:	4632      	mov	r2, r6
 80080ea:	4629      	mov	r1, r5
 80080ec:	f000 f99a 	bl	8008424 <rmw_publish>
 80080f0:	3800      	subs	r0, #0
 80080f2:	bf18      	it	ne
 80080f4:	2001      	movne	r0, #1
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	200b      	movs	r0, #11
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008106:	4770      	bx	lr

08008108 <rclc_support_init>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	b086      	sub	sp, #24
 800810e:	b3b8      	cbz	r0, 8008180 <rclc_support_init+0x78>
 8008110:	461c      	mov	r4, r3
 8008112:	b3ab      	cbz	r3, 8008180 <rclc_support_init+0x78>
 8008114:	460f      	mov	r7, r1
 8008116:	4690      	mov	r8, r2
 8008118:	4606      	mov	r6, r0
 800811a:	f004 fe3d 	bl	800cd98 <rcl_get_zero_initialized_init_options>
 800811e:	f104 030c 	add.w	r3, r4, #12
 8008122:	9005      	str	r0, [sp, #20]
 8008124:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008128:	e88d 0003 	stmia.w	sp, {r0, r1}
 800812c:	a805      	add	r0, sp, #20
 800812e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008132:	f004 fe33 	bl	800cd9c <rcl_init_options_init>
 8008136:	4605      	mov	r5, r0
 8008138:	b9e0      	cbnz	r0, 8008174 <rclc_support_init+0x6c>
 800813a:	ad02      	add	r5, sp, #8
 800813c:	4628      	mov	r0, r5
 800813e:	f004 fcb7 	bl	800cab0 <rcl_get_zero_initialized_context>
 8008142:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008146:	4633      	mov	r3, r6
 8008148:	e886 0003 	stmia.w	r6, {r0, r1}
 800814c:	aa05      	add	r2, sp, #20
 800814e:	4641      	mov	r1, r8
 8008150:	4638      	mov	r0, r7
 8008152:	f004 fd1d 	bl	800cb90 <rcl_init>
 8008156:	4605      	mov	r5, r0
 8008158:	b9b8      	cbnz	r0, 800818a <rclc_support_init+0x82>
 800815a:	60b4      	str	r4, [r6, #8]
 800815c:	4622      	mov	r2, r4
 800815e:	f106 010c 	add.w	r1, r6, #12
 8008162:	2003      	movs	r0, #3
 8008164:	f005 fb74 	bl	800d850 <rcl_clock_init>
 8008168:	4605      	mov	r5, r0
 800816a:	b970      	cbnz	r0, 800818a <rclc_support_init+0x82>
 800816c:	a805      	add	r0, sp, #20
 800816e:	f004 fe7b 	bl	800ce68 <rcl_init_options_fini>
 8008172:	b108      	cbz	r0, 8008178 <rclc_support_init+0x70>
 8008174:	f000 f91c 	bl	80083b0 <rcutils_reset_error>
 8008178:	4628      	mov	r0, r5
 800817a:	b006      	add	sp, #24
 800817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008180:	250b      	movs	r5, #11
 8008182:	4628      	mov	r0, r5
 8008184:	b006      	add	sp, #24
 8008186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800818a:	f000 f911 	bl	80083b0 <rcutils_reset_error>
 800818e:	a805      	add	r0, sp, #20
 8008190:	f004 fe6a 	bl	800ce68 <rcl_init_options_fini>
 8008194:	2800      	cmp	r0, #0
 8008196:	d0ef      	beq.n	8008178 <rclc_support_init+0x70>
 8008198:	e7ec      	b.n	8008174 <rclc_support_init+0x6c>
 800819a:	bf00      	nop

0800819c <rclc_node_init_default>:
 800819c:	b3b8      	cbz	r0, 800820e <rclc_node_init_default+0x72>
 800819e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081a2:	460d      	mov	r5, r1
 80081a4:	b0a1      	sub	sp, #132	; 0x84
 80081a6:	b329      	cbz	r1, 80081f4 <rclc_node_init_default+0x58>
 80081a8:	4616      	mov	r6, r2
 80081aa:	b31a      	cbz	r2, 80081f4 <rclc_node_init_default+0x58>
 80081ac:	461f      	mov	r7, r3
 80081ae:	b30b      	cbz	r3, 80081f4 <rclc_node_init_default+0x58>
 80081b0:	f10d 0810 	add.w	r8, sp, #16
 80081b4:	4604      	mov	r4, r0
 80081b6:	4640      	mov	r0, r8
 80081b8:	f004 ff0e 	bl	800cfd8 <rcl_get_zero_initialized_node>
 80081bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80081c0:	f10d 0918 	add.w	r9, sp, #24
 80081c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80081c8:	4648      	mov	r0, r9
 80081ca:	f005 f87d 	bl	800d2c8 <rcl_node_get_default_options>
 80081ce:	4640      	mov	r0, r8
 80081d0:	f004 ff02 	bl	800cfd8 <rcl_get_zero_initialized_node>
 80081d4:	f8cd 9000 	str.w	r9, [sp]
 80081d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80081dc:	463b      	mov	r3, r7
 80081de:	e884 0003 	stmia.w	r4, {r0, r1}
 80081e2:	4632      	mov	r2, r6
 80081e4:	4629      	mov	r1, r5
 80081e6:	4620      	mov	r0, r4
 80081e8:	f004 ff00 	bl	800cfec <rcl_node_init>
 80081ec:	b930      	cbnz	r0, 80081fc <rclc_node_init_default+0x60>
 80081ee:	b021      	add	sp, #132	; 0x84
 80081f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081f4:	200b      	movs	r0, #11
 80081f6:	b021      	add	sp, #132	; 0x84
 80081f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081fc:	9003      	str	r0, [sp, #12]
 80081fe:	f000 f8d7 	bl	80083b0 <rcutils_reset_error>
 8008202:	f000 f8d5 	bl	80083b0 <rcutils_reset_error>
 8008206:	9803      	ldr	r0, [sp, #12]
 8008208:	b021      	add	sp, #132	; 0x84
 800820a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800820e:	200b      	movs	r0, #11
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop

08008214 <rclc_publisher_init_default>:
 8008214:	b368      	cbz	r0, 8008272 <rclc_publisher_init_default+0x5e>
 8008216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821a:	460d      	mov	r5, r1
 800821c:	b0a0      	sub	sp, #128	; 0x80
 800821e:	b321      	cbz	r1, 800826a <rclc_publisher_init_default+0x56>
 8008220:	4616      	mov	r6, r2
 8008222:	b312      	cbz	r2, 800826a <rclc_publisher_init_default+0x56>
 8008224:	461f      	mov	r7, r3
 8008226:	b303      	cbz	r3, 800826a <rclc_publisher_init_default+0x56>
 8008228:	4604      	mov	r4, r0
 800822a:	f7ff fe7f 	bl	8007f2c <rcl_get_zero_initialized_publisher>
 800822e:	f10d 0810 	add.w	r8, sp, #16
 8008232:	6020      	str	r0, [r4, #0]
 8008234:	4640      	mov	r0, r8
 8008236:	f7ff ff15 	bl	8008064 <rcl_publisher_get_default_options>
 800823a:	490f      	ldr	r1, [pc, #60]	; (8008278 <rclc_publisher_init_default+0x64>)
 800823c:	2250      	movs	r2, #80	; 0x50
 800823e:	4640      	mov	r0, r8
 8008240:	f009 fd34 	bl	8011cac <memcpy>
 8008244:	f8cd 8000 	str.w	r8, [sp]
 8008248:	463b      	mov	r3, r7
 800824a:	4632      	mov	r2, r6
 800824c:	4629      	mov	r1, r5
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff fe72 	bl	8007f38 <rcl_publisher_init>
 8008254:	b910      	cbnz	r0, 800825c <rclc_publisher_init_default+0x48>
 8008256:	b020      	add	sp, #128	; 0x80
 8008258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800825c:	9003      	str	r0, [sp, #12]
 800825e:	f000 f8a7 	bl	80083b0 <rcutils_reset_error>
 8008262:	9803      	ldr	r0, [sp, #12]
 8008264:	b020      	add	sp, #128	; 0x80
 8008266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826a:	200b      	movs	r0, #11
 800826c:	b020      	add	sp, #128	; 0x80
 800826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008272:	200b      	movs	r0, #11
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	08012bf0 	.word	0x08012bf0

0800827c <rclc_subscription_init_default>:
 800827c:	b368      	cbz	r0, 80082da <rclc_subscription_init_default+0x5e>
 800827e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008282:	460d      	mov	r5, r1
 8008284:	b0a0      	sub	sp, #128	; 0x80
 8008286:	b321      	cbz	r1, 80082d2 <rclc_subscription_init_default+0x56>
 8008288:	4616      	mov	r6, r2
 800828a:	b312      	cbz	r2, 80082d2 <rclc_subscription_init_default+0x56>
 800828c:	461f      	mov	r7, r3
 800828e:	b303      	cbz	r3, 80082d2 <rclc_subscription_init_default+0x56>
 8008290:	4604      	mov	r4, r0
 8008292:	f005 f9e9 	bl	800d668 <rcl_get_zero_initialized_subscription>
 8008296:	f10d 0810 	add.w	r8, sp, #16
 800829a:	6020      	str	r0, [r4, #0]
 800829c:	4640      	mov	r0, r8
 800829e:	f005 fa91 	bl	800d7c4 <rcl_subscription_get_default_options>
 80082a2:	490f      	ldr	r1, [pc, #60]	; (80082e0 <rclc_subscription_init_default+0x64>)
 80082a4:	2250      	movs	r2, #80	; 0x50
 80082a6:	4640      	mov	r0, r8
 80082a8:	f009 fd00 	bl	8011cac <memcpy>
 80082ac:	f8cd 8000 	str.w	r8, [sp]
 80082b0:	463b      	mov	r3, r7
 80082b2:	4632      	mov	r2, r6
 80082b4:	4629      	mov	r1, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	f005 f9dc 	bl	800d674 <rcl_subscription_init>
 80082bc:	b910      	cbnz	r0, 80082c4 <rclc_subscription_init_default+0x48>
 80082be:	b020      	add	sp, #128	; 0x80
 80082c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c4:	9003      	str	r0, [sp, #12]
 80082c6:	f000 f873 	bl	80083b0 <rcutils_reset_error>
 80082ca:	9803      	ldr	r0, [sp, #12]
 80082cc:	b020      	add	sp, #128	; 0x80
 80082ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d2:	200b      	movs	r0, #11
 80082d4:	b020      	add	sp, #128	; 0x80
 80082d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082da:	200b      	movs	r0, #11
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	08012c40 	.word	0x08012c40

080082e4 <__default_zero_allocate>:
 80082e4:	f009 b866 	b.w	80113b4 <calloc>

080082e8 <__default_reallocate>:
 80082e8:	f009 b9f2 	b.w	80116d0 <realloc>

080082ec <__default_deallocate>:
 80082ec:	f009 b8d0 	b.w	8011490 <free>

080082f0 <__default_allocate>:
 80082f0:	f009 b8c6 	b.w	8011480 <malloc>

080082f4 <rcutils_get_zero_initialized_allocator>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	4c05      	ldr	r4, [pc, #20]	; (800830c <rcutils_get_zero_initialized_allocator+0x18>)
 80082f8:	4686      	mov	lr, r0
 80082fa:	4684      	mov	ip, r0
 80082fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	f8cc 3000 	str.w	r3, [ip]
 8008308:	4670      	mov	r0, lr
 800830a:	bd10      	pop	{r4, pc}
 800830c:	08012c90 	.word	0x08012c90

08008310 <rcutils_set_default_allocator>:
 8008310:	b1a8      	cbz	r0, 800833e <rcutils_set_default_allocator+0x2e>
 8008312:	6802      	ldr	r2, [r0, #0]
 8008314:	b1a2      	cbz	r2, 8008340 <rcutils_set_default_allocator+0x30>
 8008316:	6841      	ldr	r1, [r0, #4]
 8008318:	b1a1      	cbz	r1, 8008344 <rcutils_set_default_allocator+0x34>
 800831a:	b410      	push	{r4}
 800831c:	68c4      	ldr	r4, [r0, #12]
 800831e:	b164      	cbz	r4, 800833a <rcutils_set_default_allocator+0x2a>
 8008320:	6880      	ldr	r0, [r0, #8]
 8008322:	b138      	cbz	r0, 8008334 <rcutils_set_default_allocator+0x24>
 8008324:	4b08      	ldr	r3, [pc, #32]	; (8008348 <rcutils_set_default_allocator+0x38>)
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	2200      	movs	r2, #0
 800832a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800832e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8008332:	2001      	movs	r0, #1
 8008334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	4620      	mov	r0, r4
 800833c:	e7fa      	b.n	8008334 <rcutils_set_default_allocator+0x24>
 800833e:	4770      	bx	lr
 8008340:	4610      	mov	r0, r2
 8008342:	4770      	bx	lr
 8008344:	4608      	mov	r0, r1
 8008346:	4770      	bx	lr
 8008348:	20000014 	.word	0x20000014

0800834c <rcutils_get_default_allocator>:
 800834c:	b510      	push	{r4, lr}
 800834e:	4c05      	ldr	r4, [pc, #20]	; (8008364 <rcutils_get_default_allocator+0x18>)
 8008350:	4686      	mov	lr, r0
 8008352:	4684      	mov	ip, r0
 8008354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008356:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f8cc 3000 	str.w	r3, [ip]
 8008360:	4670      	mov	r0, lr
 8008362:	bd10      	pop	{r4, pc}
 8008364:	20000014 	.word	0x20000014

08008368 <rcutils_allocator_is_valid>:
 8008368:	b158      	cbz	r0, 8008382 <rcutils_allocator_is_valid+0x1a>
 800836a:	6803      	ldr	r3, [r0, #0]
 800836c:	b143      	cbz	r3, 8008380 <rcutils_allocator_is_valid+0x18>
 800836e:	6843      	ldr	r3, [r0, #4]
 8008370:	b133      	cbz	r3, 8008380 <rcutils_allocator_is_valid+0x18>
 8008372:	68c3      	ldr	r3, [r0, #12]
 8008374:	b123      	cbz	r3, 8008380 <rcutils_allocator_is_valid+0x18>
 8008376:	6880      	ldr	r0, [r0, #8]
 8008378:	3800      	subs	r0, #0
 800837a:	bf18      	it	ne
 800837c:	2001      	movne	r0, #1
 800837e:	4770      	bx	lr
 8008380:	4618      	mov	r0, r3
 8008382:	4770      	bx	lr

08008384 <rcutils_get_error_string>:
 8008384:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <rcutils_get_error_string+0x1c>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	b13b      	cbz	r3, 800839a <rcutils_get_error_string+0x16>
 800838a:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <rcutils_get_error_string+0x20>)
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	b90a      	cbnz	r2, 8008394 <rcutils_get_error_string+0x10>
 8008390:	2201      	movs	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <rcutils_get_error_string+0x24>)
 8008396:	7818      	ldrb	r0, [r3, #0]
 8008398:	4770      	bx	lr
 800839a:	4b04      	ldr	r3, [pc, #16]	; (80083ac <rcutils_get_error_string+0x28>)
 800839c:	7818      	ldrb	r0, [r3, #0]
 800839e:	4770      	bx	lr
 80083a0:	20009178 	.word	0x20009178
 80083a4:	20009191 	.word	0x20009191
 80083a8:	20009190 	.word	0x20009190
 80083ac:	08012ca4 	.word	0x08012ca4

080083b0 <rcutils_reset_error>:
 80083b0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80083d0 <rcutils_reset_error+0x20>
 80083b4:	4a08      	ldr	r2, [pc, #32]	; (80083d8 <rcutils_reset_error+0x28>)
 80083b6:	4809      	ldr	r0, [pc, #36]	; (80083dc <rcutils_reset_error+0x2c>)
 80083b8:	4909      	ldr	r1, [pc, #36]	; (80083e0 <rcutils_reset_error+0x30>)
 80083ba:	2300      	movs	r3, #0
 80083bc:	8013      	strh	r3, [r2, #0]
 80083be:	ed82 7b02 	vstr	d7, [r2, #8]
 80083c2:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <rcutils_reset_error+0x34>)
 80083c4:	7003      	strb	r3, [r0, #0]
 80083c6:	700b      	strb	r3, [r1, #0]
 80083c8:	7013      	strb	r3, [r2, #0]
 80083ca:	4770      	bx	lr
 80083cc:	f3af 8000 	nop.w
	...
 80083d8:	20009180 	.word	0x20009180
 80083dc:	20009191 	.word	0x20009191
 80083e0:	20009190 	.word	0x20009190
 80083e4:	20009178 	.word	0x20009178

080083e8 <rmw_get_default_publisher_options>:
 80083e8:	2200      	movs	r2, #0
 80083ea:	6002      	str	r2, [r0, #0]
 80083ec:	7102      	strb	r2, [r0, #4]
 80083ee:	4770      	bx	lr

080083f0 <rmw_uros_set_custom_transport>:
 80083f0:	b470      	push	{r4, r5, r6}
 80083f2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80083f6:	b162      	cbz	r2, 8008412 <rmw_uros_set_custom_transport+0x22>
 80083f8:	b15b      	cbz	r3, 8008412 <rmw_uros_set_custom_transport+0x22>
 80083fa:	b155      	cbz	r5, 8008412 <rmw_uros_set_custom_transport+0x22>
 80083fc:	b14e      	cbz	r6, 8008412 <rmw_uros_set_custom_transport+0x22>
 80083fe:	4c06      	ldr	r4, [pc, #24]	; (8008418 <rmw_uros_set_custom_transport+0x28>)
 8008400:	7020      	strb	r0, [r4, #0]
 8008402:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008406:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800840a:	6166      	str	r6, [r4, #20]
 800840c:	2000      	movs	r0, #0
 800840e:	bc70      	pop	{r4, r5, r6}
 8008410:	4770      	bx	lr
 8008412:	200b      	movs	r0, #11
 8008414:	bc70      	pop	{r4, r5, r6}
 8008416:	4770      	bx	lr
 8008418:	20009194 	.word	0x20009194

0800841c <flush_session>:
 800841c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800841e:	f002 bbe5 	b.w	800abec <uxr_run_session_until_confirm_delivery>
 8008422:	bf00      	nop

08008424 <rmw_publish>:
 8008424:	2800      	cmp	r0, #0
 8008426:	d053      	beq.n	80084d0 <rmw_publish+0xac>
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	460d      	mov	r5, r1
 800842c:	b08e      	sub	sp, #56	; 0x38
 800842e:	2900      	cmp	r1, #0
 8008430:	d04b      	beq.n	80084ca <rmw_publish+0xa6>
 8008432:	4604      	mov	r4, r0
 8008434:	6800      	ldr	r0, [r0, #0]
 8008436:	f000 fc47 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 800843a:	2800      	cmp	r0, #0
 800843c:	d045      	beq.n	80084ca <rmw_publish+0xa6>
 800843e:	6866      	ldr	r6, [r4, #4]
 8008440:	2e00      	cmp	r6, #0
 8008442:	d042      	beq.n	80084ca <rmw_publish+0xa6>
 8008444:	69b4      	ldr	r4, [r6, #24]
 8008446:	4628      	mov	r0, r5
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	4798      	blx	r3
 800844c:	69f3      	ldr	r3, [r6, #28]
 800844e:	9005      	str	r0, [sp, #20]
 8008450:	b113      	cbz	r3, 8008458 <rmw_publish+0x34>
 8008452:	a805      	add	r0, sp, #20
 8008454:	4798      	blx	r3
 8008456:	9805      	ldr	r0, [sp, #20]
 8008458:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	9000      	str	r0, [sp, #0]
 8008460:	6972      	ldr	r2, [r6, #20]
 8008462:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008464:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008468:	ab06      	add	r3, sp, #24
 800846a:	f003 f9ab 	bl	800b7c4 <uxr_prepare_output_stream>
 800846e:	b1d8      	cbz	r0, 80084a8 <rmw_publish+0x84>
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	a906      	add	r1, sp, #24
 8008474:	4628      	mov	r0, r5
 8008476:	4798      	blx	r3
 8008478:	6a33      	ldr	r3, [r6, #32]
 800847a:	4604      	mov	r4, r0
 800847c:	b10b      	cbz	r3, 8008482 <rmw_publish+0x5e>
 800847e:	a806      	add	r0, sp, #24
 8008480:	4798      	blx	r3
 8008482:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8008486:	2b01      	cmp	r3, #1
 8008488:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800848c:	d022      	beq.n	80084d4 <rmw_publish+0xb0>
 800848e:	6918      	ldr	r0, [r3, #16]
 8008490:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8008492:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008496:	f002 fba9 	bl	800abec <uxr_run_session_until_confirm_delivery>
 800849a:	4020      	ands	r0, r4
 800849c:	b2c4      	uxtb	r4, r0
 800849e:	f084 0001 	eor.w	r0, r4, #1
 80084a2:	b2c0      	uxtb	r0, r0
 80084a4:	b00e      	add	sp, #56	; 0x38
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80084ac:	6918      	ldr	r0, [r3, #16]
 80084ae:	9b05      	ldr	r3, [sp, #20]
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <rmw_publish+0xbc>)
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	9602      	str	r6, [sp, #8]
 80084b8:	6972      	ldr	r2, [r6, #20]
 80084ba:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80084bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80084c0:	ab06      	add	r3, sp, #24
 80084c2:	f003 f9af 	bl	800b824 <uxr_prepare_output_stream_fragmented>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d1d2      	bne.n	8008470 <rmw_publish+0x4c>
 80084ca:	2001      	movs	r0, #1
 80084cc:	b00e      	add	sp, #56	; 0x38
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	2001      	movs	r0, #1
 80084d2:	4770      	bx	lr
 80084d4:	6918      	ldr	r0, [r3, #16]
 80084d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80084da:	f002 f801 	bl	800a4e0 <uxr_flash_output_streams>
 80084de:	e7de      	b.n	800849e <rmw_publish+0x7a>
 80084e0:	0800841d 	.word	0x0800841d

080084e4 <rmw_create_publisher>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	b087      	sub	sp, #28
 80084ea:	2800      	cmp	r0, #0
 80084ec:	f000 80cc 	beq.w	8008688 <rmw_create_publisher+0x1a4>
 80084f0:	460e      	mov	r6, r1
 80084f2:	2900      	cmp	r1, #0
 80084f4:	f000 80c8 	beq.w	8008688 <rmw_create_publisher+0x1a4>
 80084f8:	4604      	mov	r4, r0
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	4615      	mov	r5, r2
 80084fe:	4698      	mov	r8, r3
 8008500:	f000 fbe2 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 8008504:	2800      	cmp	r0, #0
 8008506:	f000 80bf 	beq.w	8008688 <rmw_create_publisher+0x1a4>
 800850a:	2d00      	cmp	r5, #0
 800850c:	f000 80bc 	beq.w	8008688 <rmw_create_publisher+0x1a4>
 8008510:	782b      	ldrb	r3, [r5, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80b8 	beq.w	8008688 <rmw_create_publisher+0x1a4>
 8008518:	f1b8 0f00 	cmp.w	r8, #0
 800851c:	f000 80b4 	beq.w	8008688 <rmw_create_publisher+0x1a4>
 8008520:	485c      	ldr	r0, [pc, #368]	; (8008694 <rmw_create_publisher+0x1b0>)
 8008522:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008526:	f005 ff2b 	bl	800e380 <get_memory>
 800852a:	2800      	cmp	r0, #0
 800852c:	f000 80ac 	beq.w	8008688 <rmw_create_publisher+0x1a4>
 8008530:	6884      	ldr	r4, [r0, #8]
 8008532:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8008536:	f005 ff47 	bl	800e3c8 <rmw_get_implementation_identifier>
 800853a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800853e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8008542:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8008546:	4628      	mov	r0, r5
 8008548:	f7f7 fe4c 	bl	80001e4 <strlen>
 800854c:	3001      	adds	r0, #1
 800854e:	283c      	cmp	r0, #60	; 0x3c
 8008550:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8008554:	f200 8091 	bhi.w	800867a <rmw_create_publisher+0x196>
 8008558:	4a4f      	ldr	r2, [pc, #316]	; (8008698 <rmw_create_publisher+0x1b4>)
 800855a:	462b      	mov	r3, r5
 800855c:	213c      	movs	r1, #60	; 0x3c
 800855e:	4650      	mov	r0, sl
 8008560:	f009 fa2c 	bl	80119bc <sniprintf>
 8008564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008568:	67e3      	str	r3, [r4, #124]	; 0x7c
 800856a:	4641      	mov	r1, r8
 800856c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8008570:	2250      	movs	r2, #80	; 0x50
 8008572:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008576:	f009 fb99 	bl	8011cac <memcpy>
 800857a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800857e:	4947      	ldr	r1, [pc, #284]	; (800869c <rmw_create_publisher+0x1b8>)
 8008580:	2b02      	cmp	r3, #2
 8008582:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008586:	bf0c      	ite	eq
 8008588:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800858c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8008590:	67a3      	str	r3, [r4, #120]	; 0x78
 8008592:	2300      	movs	r3, #0
 8008594:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008598:	4630      	mov	r0, r6
 800859a:	f000 fba3 	bl	8008ce4 <get_message_typesupport_handle>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d06b      	beq.n	800867a <rmw_create_publisher+0x196>
 80085a2:	6842      	ldr	r2, [r0, #4]
 80085a4:	61a2      	str	r2, [r4, #24]
 80085a6:	2a00      	cmp	r2, #0
 80085a8:	d067      	beq.n	800867a <rmw_create_publisher+0x196>
 80085aa:	4629      	mov	r1, r5
 80085ac:	4643      	mov	r3, r8
 80085ae:	4648      	mov	r0, r9
 80085b0:	f006 f970 	bl	800e894 <create_topic>
 80085b4:	6260      	str	r0, [r4, #36]	; 0x24
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d063      	beq.n	8008682 <rmw_create_publisher+0x19e>
 80085ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c2:	2103      	movs	r1, #3
 80085c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 80085c8:	1c42      	adds	r2, r0, #1
 80085ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 80085ce:	f001 fe39 	bl	800a244 <uxr_object_id>
 80085d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80085d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085da:	6120      	str	r0, [r4, #16]
 80085dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80085e0:	6910      	ldr	r0, [r2, #16]
 80085e2:	2506      	movs	r5, #6
 80085e4:	9500      	str	r5, [sp, #0]
 80085e6:	6819      	ldr	r1, [r3, #0]
 80085e8:	6922      	ldr	r2, [r4, #16]
 80085ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80085ee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80085f2:	f001 fcd9 	bl	8009fa8 <uxr_buffer_create_publisher_bin>
 80085f6:	4602      	mov	r2, r0
 80085f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80085fc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008600:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008604:	f000 fae0 	bl	8008bc8 <run_xrce_session>
 8008608:	b3b8      	cbz	r0, 800867a <rmw_create_publisher+0x196>
 800860a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800860e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008612:	2105      	movs	r1, #5
 8008614:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8008618:	1c42      	adds	r2, r0, #1
 800861a:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800861e:	f001 fe11 	bl	800a244 <uxr_object_id>
 8008622:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008626:	6160      	str	r0, [r4, #20]
 8008628:	691e      	ldr	r6, [r3, #16]
 800862a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800862e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8008632:	f10d 0a10 	add.w	sl, sp, #16
 8008636:	4641      	mov	r1, r8
 8008638:	4650      	mov	r0, sl
 800863a:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800863e:	f000 fadf 	bl	8008c00 <convert_qos_profile>
 8008642:	9503      	str	r5, [sp, #12]
 8008644:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008648:	9001      	str	r0, [sp, #4]
 800864a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800864e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8008658:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800865c:	f8d8 1000 	ldr.w	r1, [r8]
 8008660:	4630      	mov	r0, r6
 8008662:	f001 fd01 	bl	800a068 <uxr_buffer_create_datawriter_bin>
 8008666:	4602      	mov	r2, r0
 8008668:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800866c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008670:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008674:	f000 faa8 	bl	8008bc8 <run_xrce_session>
 8008678:	b938      	cbnz	r0, 800868a <rmw_create_publisher+0x1a6>
 800867a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800867c:	b108      	cbz	r0, 8008682 <rmw_create_publisher+0x19e>
 800867e:	f000 fa47 	bl	8008b10 <rmw_uxrce_fini_topic_memory>
 8008682:	4638      	mov	r0, r7
 8008684:	f000 f9ec 	bl	8008a60 <rmw_uxrce_fini_publisher_memory>
 8008688:	2700      	movs	r7, #0
 800868a:	4638      	mov	r0, r7
 800868c:	b007      	add	sp, #28
 800868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008692:	bf00      	nop
 8008694:	2000da8c 	.word	0x2000da8c
 8008698:	08012cdc 	.word	0x08012cdc
 800869c:	08012ca8 	.word	0x08012ca8

080086a0 <rmw_publisher_get_actual_qos>:
 80086a0:	b150      	cbz	r0, 80086b8 <rmw_publisher_get_actual_qos+0x18>
 80086a2:	b508      	push	{r3, lr}
 80086a4:	460b      	mov	r3, r1
 80086a6:	b149      	cbz	r1, 80086bc <rmw_publisher_get_actual_qos+0x1c>
 80086a8:	6841      	ldr	r1, [r0, #4]
 80086aa:	2250      	movs	r2, #80	; 0x50
 80086ac:	3128      	adds	r1, #40	; 0x28
 80086ae:	4618      	mov	r0, r3
 80086b0:	f009 fafc 	bl	8011cac <memcpy>
 80086b4:	2000      	movs	r0, #0
 80086b6:	bd08      	pop	{r3, pc}
 80086b8:	200b      	movs	r0, #11
 80086ba:	4770      	bx	lr
 80086bc:	200b      	movs	r0, #11
 80086be:	bd08      	pop	{r3, pc}

080086c0 <rmw_destroy_publisher>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	b128      	cbz	r0, 80086d0 <rmw_destroy_publisher+0x10>
 80086c4:	4604      	mov	r4, r0
 80086c6:	6800      	ldr	r0, [r0, #0]
 80086c8:	460d      	mov	r5, r1
 80086ca:	f000 fafd 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 80086ce:	b910      	cbnz	r0, 80086d6 <rmw_destroy_publisher+0x16>
 80086d0:	2401      	movs	r4, #1
 80086d2:	4620      	mov	r0, r4
 80086d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d6:	6863      	ldr	r3, [r4, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0f9      	beq.n	80086d0 <rmw_destroy_publisher+0x10>
 80086dc:	2d00      	cmp	r5, #0
 80086de:	d0f7      	beq.n	80086d0 <rmw_destroy_publisher+0x10>
 80086e0:	6828      	ldr	r0, [r5, #0]
 80086e2:	f000 faf1 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0f2      	beq.n	80086d0 <rmw_destroy_publisher+0x10>
 80086ea:	686c      	ldr	r4, [r5, #4]
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	d0ef      	beq.n	80086d0 <rmw_destroy_publisher+0x10>
 80086f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086f2:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80086f6:	f006 f91d 	bl	800e934 <destroy_topic>
 80086fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80086fe:	6962      	ldr	r2, [r4, #20]
 8008700:	6918      	ldr	r0, [r3, #16]
 8008702:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8008706:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800870a:	6819      	ldr	r1, [r3, #0]
 800870c:	f001 fb98 	bl	8009e40 <uxr_buffer_delete_entity>
 8008710:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800871c:	4604      	mov	r4, r0
 800871e:	6809      	ldr	r1, [r1, #0]
 8008720:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008724:	f001 fb8c 	bl	8009e40 <uxr_buffer_delete_entity>
 8008728:	693e      	ldr	r6, [r7, #16]
 800872a:	4622      	mov	r2, r4
 800872c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8008730:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8008734:	4604      	mov	r4, r0
 8008736:	4630      	mov	r0, r6
 8008738:	f000 fa46 	bl	8008bc8 <run_xrce_session>
 800873c:	693e      	ldr	r6, [r7, #16]
 800873e:	4622      	mov	r2, r4
 8008740:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8008744:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8008748:	4604      	mov	r4, r0
 800874a:	4630      	mov	r0, r6
 800874c:	f000 fa3c 	bl	8008bc8 <run_xrce_session>
 8008750:	b12c      	cbz	r4, 800875e <rmw_destroy_publisher+0x9e>
 8008752:	b120      	cbz	r0, 800875e <rmw_destroy_publisher+0x9e>
 8008754:	2400      	movs	r4, #0
 8008756:	4628      	mov	r0, r5
 8008758:	f000 f982 	bl	8008a60 <rmw_uxrce_fini_publisher_memory>
 800875c:	e7b9      	b.n	80086d2 <rmw_destroy_publisher+0x12>
 800875e:	2402      	movs	r4, #2
 8008760:	e7f9      	b.n	8008756 <rmw_destroy_publisher+0x96>
 8008762:	bf00      	nop

08008764 <rmw_uxrce_init_service_memory>:
 8008764:	b1e2      	cbz	r2, 80087a0 <rmw_uxrce_init_service_memory+0x3c>
 8008766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876a:	7b05      	ldrb	r5, [r0, #12]
 800876c:	4606      	mov	r6, r0
 800876e:	b9ad      	cbnz	r5, 800879c <rmw_uxrce_init_service_memory+0x38>
 8008770:	23c8      	movs	r3, #200	; 0xc8
 8008772:	e9c0 5500 	strd	r5, r5, [r0]
 8008776:	6083      	str	r3, [r0, #8]
 8008778:	f240 1301 	movw	r3, #257	; 0x101
 800877c:	4617      	mov	r7, r2
 800877e:	8183      	strh	r3, [r0, #12]
 8008780:	460c      	mov	r4, r1
 8008782:	46a8      	mov	r8, r5
 8008784:	4621      	mov	r1, r4
 8008786:	4630      	mov	r0, r6
 8008788:	3501      	adds	r5, #1
 800878a:	f005 fe09 	bl	800e3a0 <put_memory>
 800878e:	42af      	cmp	r7, r5
 8008790:	60a4      	str	r4, [r4, #8]
 8008792:	f884 800c 	strb.w	r8, [r4, #12]
 8008796:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800879a:	d1f3      	bne.n	8008784 <rmw_uxrce_init_service_memory+0x20>
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop

080087a4 <rmw_uxrce_init_client_memory>:
 80087a4:	b1e2      	cbz	r2, 80087e0 <rmw_uxrce_init_client_memory+0x3c>
 80087a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087aa:	7b05      	ldrb	r5, [r0, #12]
 80087ac:	4606      	mov	r6, r0
 80087ae:	b9ad      	cbnz	r5, 80087dc <rmw_uxrce_init_client_memory+0x38>
 80087b0:	23c8      	movs	r3, #200	; 0xc8
 80087b2:	e9c0 5500 	strd	r5, r5, [r0]
 80087b6:	6083      	str	r3, [r0, #8]
 80087b8:	f240 1301 	movw	r3, #257	; 0x101
 80087bc:	4617      	mov	r7, r2
 80087be:	8183      	strh	r3, [r0, #12]
 80087c0:	460c      	mov	r4, r1
 80087c2:	46a8      	mov	r8, r5
 80087c4:	4621      	mov	r1, r4
 80087c6:	4630      	mov	r0, r6
 80087c8:	3501      	adds	r5, #1
 80087ca:	f005 fde9 	bl	800e3a0 <put_memory>
 80087ce:	42af      	cmp	r7, r5
 80087d0:	60a4      	str	r4, [r4, #8]
 80087d2:	f884 800c 	strb.w	r8, [r4, #12]
 80087d6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80087da:	d1f3      	bne.n	80087c4 <rmw_uxrce_init_client_memory+0x20>
 80087dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop

080087e4 <rmw_uxrce_init_publisher_memory>:
 80087e4:	b1e2      	cbz	r2, 8008820 <rmw_uxrce_init_publisher_memory+0x3c>
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	7b05      	ldrb	r5, [r0, #12]
 80087ec:	4606      	mov	r6, r0
 80087ee:	b9ad      	cbnz	r5, 800881c <rmw_uxrce_init_publisher_memory+0x38>
 80087f0:	23d8      	movs	r3, #216	; 0xd8
 80087f2:	e9c0 5500 	strd	r5, r5, [r0]
 80087f6:	6083      	str	r3, [r0, #8]
 80087f8:	f240 1301 	movw	r3, #257	; 0x101
 80087fc:	4617      	mov	r7, r2
 80087fe:	8183      	strh	r3, [r0, #12]
 8008800:	460c      	mov	r4, r1
 8008802:	46a8      	mov	r8, r5
 8008804:	4621      	mov	r1, r4
 8008806:	4630      	mov	r0, r6
 8008808:	3501      	adds	r5, #1
 800880a:	f005 fdc9 	bl	800e3a0 <put_memory>
 800880e:	42af      	cmp	r7, r5
 8008810:	60a4      	str	r4, [r4, #8]
 8008812:	f884 800c 	strb.w	r8, [r4, #12]
 8008816:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800881a:	d1f3      	bne.n	8008804 <rmw_uxrce_init_publisher_memory+0x20>
 800881c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <rmw_uxrce_init_subscription_memory>:
 8008824:	b1e2      	cbz	r2, 8008860 <rmw_uxrce_init_subscription_memory+0x3c>
 8008826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882a:	7b05      	ldrb	r5, [r0, #12]
 800882c:	4606      	mov	r6, r0
 800882e:	b9ad      	cbnz	r5, 800885c <rmw_uxrce_init_subscription_memory+0x38>
 8008830:	23d8      	movs	r3, #216	; 0xd8
 8008832:	e9c0 5500 	strd	r5, r5, [r0]
 8008836:	6083      	str	r3, [r0, #8]
 8008838:	f240 1301 	movw	r3, #257	; 0x101
 800883c:	4617      	mov	r7, r2
 800883e:	8183      	strh	r3, [r0, #12]
 8008840:	460c      	mov	r4, r1
 8008842:	46a8      	mov	r8, r5
 8008844:	4621      	mov	r1, r4
 8008846:	4630      	mov	r0, r6
 8008848:	3501      	adds	r5, #1
 800884a:	f005 fda9 	bl	800e3a0 <put_memory>
 800884e:	42af      	cmp	r7, r5
 8008850:	60a4      	str	r4, [r4, #8]
 8008852:	f884 800c 	strb.w	r8, [r4, #12]
 8008856:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800885a:	d1f3      	bne.n	8008844 <rmw_uxrce_init_subscription_memory+0x20>
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop

08008864 <rmw_uxrce_init_node_memory>:
 8008864:	b1e2      	cbz	r2, 80088a0 <rmw_uxrce_init_node_memory+0x3c>
 8008866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886a:	7b05      	ldrb	r5, [r0, #12]
 800886c:	4606      	mov	r6, r0
 800886e:	b9ad      	cbnz	r5, 800889c <rmw_uxrce_init_node_memory+0x38>
 8008870:	23a4      	movs	r3, #164	; 0xa4
 8008872:	e9c0 5500 	strd	r5, r5, [r0]
 8008876:	6083      	str	r3, [r0, #8]
 8008878:	f240 1301 	movw	r3, #257	; 0x101
 800887c:	4617      	mov	r7, r2
 800887e:	8183      	strh	r3, [r0, #12]
 8008880:	460c      	mov	r4, r1
 8008882:	46a8      	mov	r8, r5
 8008884:	4621      	mov	r1, r4
 8008886:	4630      	mov	r0, r6
 8008888:	3501      	adds	r5, #1
 800888a:	f005 fd89 	bl	800e3a0 <put_memory>
 800888e:	42af      	cmp	r7, r5
 8008890:	60a4      	str	r4, [r4, #8]
 8008892:	f884 800c 	strb.w	r8, [r4, #12]
 8008896:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800889a:	d1f3      	bne.n	8008884 <rmw_uxrce_init_node_memory+0x20>
 800889c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop

080088a4 <rmw_uxrce_init_session_memory>:
 80088a4:	b1ea      	cbz	r2, 80088e2 <rmw_uxrce_init_session_memory+0x3e>
 80088a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088aa:	7b05      	ldrb	r5, [r0, #12]
 80088ac:	4606      	mov	r6, r0
 80088ae:	b9b5      	cbnz	r5, 80088de <rmw_uxrce_init_session_memory+0x3a>
 80088b0:	e9c0 5500 	strd	r5, r5, [r0]
 80088b4:	f241 58a8 	movw	r8, #5544	; 0x15a8
 80088b8:	f240 1301 	movw	r3, #257	; 0x101
 80088bc:	4617      	mov	r7, r2
 80088be:	f8c0 8008 	str.w	r8, [r0, #8]
 80088c2:	460c      	mov	r4, r1
 80088c4:	8183      	strh	r3, [r0, #12]
 80088c6:	46a9      	mov	r9, r5
 80088c8:	4621      	mov	r1, r4
 80088ca:	4630      	mov	r0, r6
 80088cc:	3501      	adds	r5, #1
 80088ce:	f005 fd67 	bl	800e3a0 <put_memory>
 80088d2:	42af      	cmp	r7, r5
 80088d4:	60a4      	str	r4, [r4, #8]
 80088d6:	f884 900c 	strb.w	r9, [r4, #12]
 80088da:	4444      	add	r4, r8
 80088dc:	d1f4      	bne.n	80088c8 <rmw_uxrce_init_session_memory+0x24>
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	4770      	bx	lr

080088e4 <rmw_uxrce_init_topic_memory>:
 80088e4:	b1e2      	cbz	r2, 8008920 <rmw_uxrce_init_topic_memory+0x3c>
 80088e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ea:	7b05      	ldrb	r5, [r0, #12]
 80088ec:	4606      	mov	r6, r0
 80088ee:	b9ad      	cbnz	r5, 800891c <rmw_uxrce_init_topic_memory+0x38>
 80088f0:	231c      	movs	r3, #28
 80088f2:	e9c0 5500 	strd	r5, r5, [r0]
 80088f6:	6083      	str	r3, [r0, #8]
 80088f8:	f240 1301 	movw	r3, #257	; 0x101
 80088fc:	4617      	mov	r7, r2
 80088fe:	8183      	strh	r3, [r0, #12]
 8008900:	460c      	mov	r4, r1
 8008902:	46a8      	mov	r8, r5
 8008904:	4621      	mov	r1, r4
 8008906:	4630      	mov	r0, r6
 8008908:	3501      	adds	r5, #1
 800890a:	f005 fd49 	bl	800e3a0 <put_memory>
 800890e:	42af      	cmp	r7, r5
 8008910:	60a4      	str	r4, [r4, #8]
 8008912:	f884 800c 	strb.w	r8, [r4, #12]
 8008916:	f104 041c 	add.w	r4, r4, #28
 800891a:	d1f3      	bne.n	8008904 <rmw_uxrce_init_topic_memory+0x20>
 800891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop

08008924 <rmw_uxrce_init_static_input_buffer_memory>:
 8008924:	b1ea      	cbz	r2, 8008962 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8008926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892a:	7b05      	ldrb	r5, [r0, #12]
 800892c:	4606      	mov	r6, r0
 800892e:	b9b5      	cbnz	r5, 800895e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8008930:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8008934:	e9c0 5500 	strd	r5, r5, [r0]
 8008938:	6083      	str	r3, [r0, #8]
 800893a:	f240 1301 	movw	r3, #257	; 0x101
 800893e:	4617      	mov	r7, r2
 8008940:	8183      	strh	r3, [r0, #12]
 8008942:	460c      	mov	r4, r1
 8008944:	46a8      	mov	r8, r5
 8008946:	4621      	mov	r1, r4
 8008948:	4630      	mov	r0, r6
 800894a:	3501      	adds	r5, #1
 800894c:	f005 fd28 	bl	800e3a0 <put_memory>
 8008950:	42af      	cmp	r7, r5
 8008952:	60a4      	str	r4, [r4, #8]
 8008954:	f884 800c 	strb.w	r8, [r4, #12]
 8008958:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800895c:	d1f3      	bne.n	8008946 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800895e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008962:	4770      	bx	lr

08008964 <rmw_uxrce_init_init_options_impl_memory>:
 8008964:	b1e2      	cbz	r2, 80089a0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8008966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	7b05      	ldrb	r5, [r0, #12]
 800896c:	4606      	mov	r6, r0
 800896e:	b9ad      	cbnz	r5, 800899c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8008970:	232c      	movs	r3, #44	; 0x2c
 8008972:	e9c0 5500 	strd	r5, r5, [r0]
 8008976:	6083      	str	r3, [r0, #8]
 8008978:	f240 1301 	movw	r3, #257	; 0x101
 800897c:	4617      	mov	r7, r2
 800897e:	8183      	strh	r3, [r0, #12]
 8008980:	460c      	mov	r4, r1
 8008982:	46a8      	mov	r8, r5
 8008984:	4621      	mov	r1, r4
 8008986:	4630      	mov	r0, r6
 8008988:	3501      	adds	r5, #1
 800898a:	f005 fd09 	bl	800e3a0 <put_memory>
 800898e:	42af      	cmp	r7, r5
 8008990:	60a4      	str	r4, [r4, #8]
 8008992:	f884 800c 	strb.w	r8, [r4, #12]
 8008996:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800899a:	d1f3      	bne.n	8008984 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop

080089a4 <rmw_uxrce_init_wait_set_memory>:
 80089a4:	b1e2      	cbz	r2, 80089e0 <rmw_uxrce_init_wait_set_memory+0x3c>
 80089a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089aa:	7b05      	ldrb	r5, [r0, #12]
 80089ac:	4606      	mov	r6, r0
 80089ae:	b9ad      	cbnz	r5, 80089dc <rmw_uxrce_init_wait_set_memory+0x38>
 80089b0:	231c      	movs	r3, #28
 80089b2:	e9c0 5500 	strd	r5, r5, [r0]
 80089b6:	6083      	str	r3, [r0, #8]
 80089b8:	f240 1301 	movw	r3, #257	; 0x101
 80089bc:	4617      	mov	r7, r2
 80089be:	8183      	strh	r3, [r0, #12]
 80089c0:	460c      	mov	r4, r1
 80089c2:	46a8      	mov	r8, r5
 80089c4:	4621      	mov	r1, r4
 80089c6:	4630      	mov	r0, r6
 80089c8:	3501      	adds	r5, #1
 80089ca:	f005 fce9 	bl	800e3a0 <put_memory>
 80089ce:	42af      	cmp	r7, r5
 80089d0:	60a4      	str	r4, [r4, #8]
 80089d2:	f884 800c 	strb.w	r8, [r4, #12]
 80089d6:	f104 041c 	add.w	r4, r4, #28
 80089da:	d1f3      	bne.n	80089c4 <rmw_uxrce_init_wait_set_memory+0x20>
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop

080089e4 <rmw_uxrce_init_guard_condition_memory>:
 80089e4:	b1e2      	cbz	r2, 8008a20 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80089e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ea:	7b05      	ldrb	r5, [r0, #12]
 80089ec:	4606      	mov	r6, r0
 80089ee:	b9ad      	cbnz	r5, 8008a1c <rmw_uxrce_init_guard_condition_memory+0x38>
 80089f0:	2320      	movs	r3, #32
 80089f2:	e9c0 5500 	strd	r5, r5, [r0]
 80089f6:	6083      	str	r3, [r0, #8]
 80089f8:	f240 1301 	movw	r3, #257	; 0x101
 80089fc:	4617      	mov	r7, r2
 80089fe:	8183      	strh	r3, [r0, #12]
 8008a00:	460c      	mov	r4, r1
 8008a02:	46a8      	mov	r8, r5
 8008a04:	4621      	mov	r1, r4
 8008a06:	4630      	mov	r0, r6
 8008a08:	3501      	adds	r5, #1
 8008a0a:	f005 fcc9 	bl	800e3a0 <put_memory>
 8008a0e:	42af      	cmp	r7, r5
 8008a10:	60a4      	str	r4, [r4, #8]
 8008a12:	f884 800c 	strb.w	r8, [r4, #12]
 8008a16:	f104 0420 	add.w	r4, r4, #32
 8008a1a:	d1f3      	bne.n	8008a04 <rmw_uxrce_init_guard_condition_memory+0x20>
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop

08008a24 <rmw_uxrce_fini_session_memory>:
 8008a24:	4601      	mov	r1, r0
 8008a26:	4801      	ldr	r0, [pc, #4]	; (8008a2c <rmw_uxrce_fini_session_memory+0x8>)
 8008a28:	f005 bcba 	b.w	800e3a0 <put_memory>
 8008a2c:	2000daac 	.word	0x2000daac

08008a30 <rmw_uxrce_fini_node_memory>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4604      	mov	r4, r0
 8008a34:	6800      	ldr	r0, [r0, #0]
 8008a36:	b128      	cbz	r0, 8008a44 <rmw_uxrce_fini_node_memory+0x14>
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <rmw_uxrce_fini_node_memory+0x28>)
 8008a3a:	6819      	ldr	r1, [r3, #0]
 8008a3c:	f7f7 fbc8 	bl	80001d0 <strcmp>
 8008a40:	b940      	cbnz	r0, 8008a54 <rmw_uxrce_fini_node_memory+0x24>
 8008a42:	6020      	str	r0, [r4, #0]
 8008a44:	6861      	ldr	r1, [r4, #4]
 8008a46:	b129      	cbz	r1, 8008a54 <rmw_uxrce_fini_node_memory+0x24>
 8008a48:	2500      	movs	r5, #0
 8008a4a:	4804      	ldr	r0, [pc, #16]	; (8008a5c <rmw_uxrce_fini_node_memory+0x2c>)
 8008a4c:	610d      	str	r5, [r1, #16]
 8008a4e:	f005 fca7 	bl	800e3a0 <put_memory>
 8008a52:	6065      	str	r5, [r4, #4]
 8008a54:	bd38      	pop	{r3, r4, r5, pc}
 8008a56:	bf00      	nop
 8008a58:	08013318 	.word	0x08013318
 8008a5c:	2000da7c 	.word	0x2000da7c

08008a60 <rmw_uxrce_fini_publisher_memory>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4604      	mov	r4, r0
 8008a64:	6800      	ldr	r0, [r0, #0]
 8008a66:	b128      	cbz	r0, 8008a74 <rmw_uxrce_fini_publisher_memory+0x14>
 8008a68:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <rmw_uxrce_fini_publisher_memory+0x24>)
 8008a6a:	6819      	ldr	r1, [r3, #0]
 8008a6c:	f7f7 fbb0 	bl	80001d0 <strcmp>
 8008a70:	b938      	cbnz	r0, 8008a82 <rmw_uxrce_fini_publisher_memory+0x22>
 8008a72:	6020      	str	r0, [r4, #0]
 8008a74:	6861      	ldr	r1, [r4, #4]
 8008a76:	b121      	cbz	r1, 8008a82 <rmw_uxrce_fini_publisher_memory+0x22>
 8008a78:	4803      	ldr	r0, [pc, #12]	; (8008a88 <rmw_uxrce_fini_publisher_memory+0x28>)
 8008a7a:	f005 fc91 	bl	800e3a0 <put_memory>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6063      	str	r3, [r4, #4]
 8008a82:	bd10      	pop	{r4, pc}
 8008a84:	08013318 	.word	0x08013318
 8008a88:	2000da8c 	.word	0x2000da8c

08008a8c <rmw_uxrce_fini_subscription_memory>:
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	6800      	ldr	r0, [r0, #0]
 8008a92:	b128      	cbz	r0, 8008aa0 <rmw_uxrce_fini_subscription_memory+0x14>
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8008a96:	6819      	ldr	r1, [r3, #0]
 8008a98:	f7f7 fb9a 	bl	80001d0 <strcmp>
 8008a9c:	b938      	cbnz	r0, 8008aae <rmw_uxrce_fini_subscription_memory+0x22>
 8008a9e:	6020      	str	r0, [r4, #0]
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	b121      	cbz	r1, 8008aae <rmw_uxrce_fini_subscription_memory+0x22>
 8008aa4:	4803      	ldr	r0, [pc, #12]	; (8008ab4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8008aa6:	f005 fc7b 	bl	800e3a0 <put_memory>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	bd10      	pop	{r4, pc}
 8008ab0:	08013318 	.word	0x08013318
 8008ab4:	2000dacc 	.word	0x2000dacc

08008ab8 <rmw_uxrce_fini_service_memory>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	6800      	ldr	r0, [r0, #0]
 8008abe:	b128      	cbz	r0, 8008acc <rmw_uxrce_fini_service_memory+0x14>
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <rmw_uxrce_fini_service_memory+0x24>)
 8008ac2:	6819      	ldr	r1, [r3, #0]
 8008ac4:	f7f7 fb84 	bl	80001d0 <strcmp>
 8008ac8:	b938      	cbnz	r0, 8008ada <rmw_uxrce_fini_service_memory+0x22>
 8008aca:	6020      	str	r0, [r4, #0]
 8008acc:	6861      	ldr	r1, [r4, #4]
 8008ace:	b121      	cbz	r1, 8008ada <rmw_uxrce_fini_service_memory+0x22>
 8008ad0:	4803      	ldr	r0, [pc, #12]	; (8008ae0 <rmw_uxrce_fini_service_memory+0x28>)
 8008ad2:	f005 fc65 	bl	800e3a0 <put_memory>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	6063      	str	r3, [r4, #4]
 8008ada:	bd10      	pop	{r4, pc}
 8008adc:	08013318 	.word	0x08013318
 8008ae0:	2000da9c 	.word	0x2000da9c

08008ae4 <rmw_uxrce_fini_client_memory>:
 8008ae4:	b510      	push	{r4, lr}
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	6800      	ldr	r0, [r0, #0]
 8008aea:	b128      	cbz	r0, 8008af8 <rmw_uxrce_fini_client_memory+0x14>
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <rmw_uxrce_fini_client_memory+0x24>)
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	f7f7 fb6e 	bl	80001d0 <strcmp>
 8008af4:	b938      	cbnz	r0, 8008b06 <rmw_uxrce_fini_client_memory+0x22>
 8008af6:	6020      	str	r0, [r4, #0]
 8008af8:	6861      	ldr	r1, [r4, #4]
 8008afa:	b121      	cbz	r1, 8008b06 <rmw_uxrce_fini_client_memory+0x22>
 8008afc:	4803      	ldr	r0, [pc, #12]	; (8008b0c <rmw_uxrce_fini_client_memory+0x28>)
 8008afe:	f005 fc4f 	bl	800e3a0 <put_memory>
 8008b02:	2300      	movs	r3, #0
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	bd10      	pop	{r4, pc}
 8008b08:	08013318 	.word	0x08013318
 8008b0c:	200091b0 	.word	0x200091b0

08008b10 <rmw_uxrce_fini_topic_memory>:
 8008b10:	b510      	push	{r4, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	4621      	mov	r1, r4
 8008b16:	4803      	ldr	r0, [pc, #12]	; (8008b24 <rmw_uxrce_fini_topic_memory+0x14>)
 8008b18:	f005 fc42 	bl	800e3a0 <put_memory>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61a3      	str	r3, [r4, #24]
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	bf00      	nop
 8008b24:	2000dadc 	.word	0x2000dadc

08008b28 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008b28:	b082      	sub	sp, #8
 8008b2a:	b530      	push	{r4, r5, lr}
 8008b2c:	4925      	ldr	r1, [pc, #148]	; (8008bc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008b2e:	680d      	ldr	r5, [r1, #0]
 8008b30:	ac03      	add	r4, sp, #12
 8008b32:	e884 000c 	stmia.w	r4, {r2, r3}
 8008b36:	461c      	mov	r4, r3
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	d041      	beq.n	8008bc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8008b3c:	462b      	mov	r3, r5
 8008b3e:	2100      	movs	r1, #0
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8008b48:	4290      	cmp	r0, r2
 8008b4a:	bf08      	it	eq
 8008b4c:	3101      	addeq	r1, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f6      	bne.n	8008b40 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8008b52:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d029      	beq.n	8008bae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008b5a:	d907      	bls.n	8008b6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d005      	beq.n	8008b6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008b60:	2100      	movs	r1, #0
 8008b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b66:	4608      	mov	r0, r1
 8008b68:	b002      	add	sp, #8
 8008b6a:	4770      	bx	lr
 8008b6c:	b314      	cbz	r4, 8008bb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008b6e:	428c      	cmp	r4, r1
 8008b70:	d820      	bhi.n	8008bb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	d0f4      	beq.n	8008b60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008b76:	2100      	movs	r1, #0
 8008b78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008b7c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008b80:	e002      	b.n	8008b88 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8008b82:	686d      	ldr	r5, [r5, #4]
 8008b84:	2d00      	cmp	r5, #0
 8008b86:	d0ec      	beq.n	8008b62 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8008b88:	68ab      	ldr	r3, [r5, #8]
 8008b8a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8008b8e:	4290      	cmp	r0, r2
 8008b90:	d1f7      	bne.n	8008b82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008b92:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8008b96:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008b9a:	4562      	cmp	r2, ip
 8008b9c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008ba0:	eb73 0e04 	sbcs.w	lr, r3, r4
 8008ba4:	daed      	bge.n	8008b82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008ba6:	4694      	mov	ip, r2
 8008ba8:	461c      	mov	r4, r3
 8008baa:	4629      	mov	r1, r5
 8008bac:	e7e9      	b.n	8008b82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008bae:	b10c      	cbz	r4, 8008bb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008bb0:	428c      	cmp	r4, r1
 8008bb2:	d9d5      	bls.n	8008b60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bb8:	4802      	ldr	r0, [pc, #8]	; (8008bc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008bba:	b002      	add	sp, #8
 8008bbc:	f005 bbe0 	b.w	800e380 <get_memory>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	e7c6      	b.n	8008b52 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8008bc4:	2000dabc 	.word	0x2000dabc

08008bc8 <run_xrce_session>:
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	788c      	ldrb	r4, [r1, #2]
 8008bcc:	b086      	sub	sp, #24
 8008bce:	2c01      	cmp	r4, #1
 8008bd0:	f8ad 200e 	strh.w	r2, [sp, #14]
 8008bd4:	d00c      	beq.n	8008bf0 <run_xrce_session+0x28>
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	2301      	movs	r3, #1
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	f10d 020e 	add.w	r2, sp, #14
 8008be0:	f10d 0317 	add.w	r3, sp, #23
 8008be4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008be8:	f002 f826 	bl	800ac38 <uxr_run_session_until_all_status>
 8008bec:	b006      	add	sp, #24
 8008bee:	bd10      	pop	{r4, pc}
 8008bf0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008bf4:	f001 fc74 	bl	800a4e0 <uxr_flash_output_streams>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	b006      	add	sp, #24
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	bf00      	nop

08008c00 <convert_qos_profile>:
 8008c00:	7a4a      	ldrb	r2, [r1, #9]
 8008c02:	f891 c008 	ldrb.w	ip, [r1, #8]
 8008c06:	2a02      	cmp	r2, #2
 8008c08:	bf18      	it	ne
 8008c0a:	2200      	movne	r2, #0
 8008c0c:	7002      	strb	r2, [r0, #0]
 8008c0e:	780a      	ldrb	r2, [r1, #0]
 8008c10:	8889      	ldrh	r1, [r1, #4]
 8008c12:	8081      	strh	r1, [r0, #4]
 8008c14:	f1ac 0c02 	sub.w	ip, ip, #2
 8008c18:	f1a2 0202 	sub.w	r2, r2, #2
 8008c1c:	fabc fc8c 	clz	ip, ip
 8008c20:	fab2 f282 	clz	r2, r2
 8008c24:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008c28:	0952      	lsrs	r2, r2, #5
 8008c2a:	f880 c001 	strb.w	ip, [r0, #1]
 8008c2e:	7082      	strb	r2, [r0, #2]
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <generate_type_name>:
 8008c34:	b530      	push	{r4, r5, lr}
 8008c36:	2300      	movs	r3, #0
 8008c38:	700b      	strb	r3, [r1, #0]
 8008c3a:	6803      	ldr	r3, [r0, #0]
 8008c3c:	b087      	sub	sp, #28
 8008c3e:	4614      	mov	r4, r2
 8008c40:	b1d3      	cbz	r3, 8008c78 <generate_type_name+0x44>
 8008c42:	4a0f      	ldr	r2, [pc, #60]	; (8008c80 <generate_type_name+0x4c>)
 8008c44:	4615      	mov	r5, r2
 8008c46:	9203      	str	r2, [sp, #12]
 8008c48:	9500      	str	r5, [sp, #0]
 8008c4a:	6842      	ldr	r2, [r0, #4]
 8008c4c:	480d      	ldr	r0, [pc, #52]	; (8008c84 <generate_type_name+0x50>)
 8008c4e:	9001      	str	r0, [sp, #4]
 8008c50:	4608      	mov	r0, r1
 8008c52:	490d      	ldr	r1, [pc, #52]	; (8008c88 <generate_type_name+0x54>)
 8008c54:	9204      	str	r2, [sp, #16]
 8008c56:	9105      	str	r1, [sp, #20]
 8008c58:	9102      	str	r1, [sp, #8]
 8008c5a:	4a0c      	ldr	r2, [pc, #48]	; (8008c8c <generate_type_name+0x58>)
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f008 fead 	bl	80119bc <sniprintf>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	db05      	blt.n	8008c72 <generate_type_name+0x3e>
 8008c66:	4284      	cmp	r4, r0
 8008c68:	bfd4      	ite	le
 8008c6a:	2000      	movle	r0, #0
 8008c6c:	2001      	movgt	r0, #1
 8008c6e:	b007      	add	sp, #28
 8008c70:	bd30      	pop	{r4, r5, pc}
 8008c72:	2000      	movs	r0, #0
 8008c74:	b007      	add	sp, #28
 8008c76:	bd30      	pop	{r4, r5, pc}
 8008c78:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <generate_type_name+0x5c>)
 8008c7a:	4a01      	ldr	r2, [pc, #4]	; (8008c80 <generate_type_name+0x4c>)
 8008c7c:	461d      	mov	r5, r3
 8008c7e:	e7e2      	b.n	8008c46 <generate_type_name+0x12>
 8008c80:	08012ccc 	.word	0x08012ccc
 8008c84:	08012ce4 	.word	0x08012ce4
 8008c88:	08012ce0 	.word	0x08012ce0
 8008c8c:	08012cd0 	.word	0x08012cd0
 8008c90:	080130f0 	.word	0x080130f0

08008c94 <generate_topic_name>:
 8008c94:	b510      	push	{r4, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	4614      	mov	r4, r2
 8008c9a:	9000      	str	r0, [sp, #0]
 8008c9c:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <generate_topic_name+0x2c>)
 8008c9e:	4a09      	ldr	r2, [pc, #36]	; (8008cc4 <generate_topic_name+0x30>)
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	f008 fe8a 	bl	80119bc <sniprintf>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	db05      	blt.n	8008cb8 <generate_topic_name+0x24>
 8008cac:	4284      	cmp	r4, r0
 8008cae:	bfd4      	ite	le
 8008cb0:	2000      	movle	r0, #0
 8008cb2:	2001      	movgt	r0, #1
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd10      	pop	{r4, pc}
 8008cb8:	2000      	movs	r0, #0
 8008cba:	b002      	add	sp, #8
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	bf00      	nop
 8008cc0:	08012cf0 	.word	0x08012cf0
 8008cc4:	08012ce8 	.word	0x08012ce8

08008cc8 <is_uxrce_rmw_identifier_valid>:
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	4604      	mov	r4, r0
 8008ccc:	b140      	cbz	r0, 8008ce0 <is_uxrce_rmw_identifier_valid+0x18>
 8008cce:	f005 fb7b 	bl	800e3c8 <rmw_get_implementation_identifier>
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f7f7 fa7b 	bl	80001d0 <strcmp>
 8008cda:	fab0 f080 	clz	r0, r0
 8008cde:	0940      	lsrs	r0, r0, #5
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop

08008ce4 <get_message_typesupport_handle>:
 8008ce4:	6883      	ldr	r3, [r0, #8]
 8008ce6:	4718      	bx	r3

08008ce8 <get_message_typesupport_handle_function>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	4604      	mov	r4, r0
 8008cec:	6800      	ldr	r0, [r0, #0]
 8008cee:	f7f7 fa6f 	bl	80001d0 <strcmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	bf0c      	ite	eq
 8008cf6:	4620      	moveq	r0, r4
 8008cf8:	2000      	movne	r0, #0
 8008cfa:	bd10      	pop	{r4, pc}

08008cfc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008cfc:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	b10a      	cbz	r2, 8008d06 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008d02:	4803      	ldr	r0, [pc, #12]	; (8008d10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008d04:	4770      	bx	lr
 8008d06:	4a03      	ldr	r2, [pc, #12]	; (8008d14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008d08:	4801      	ldr	r0, [pc, #4]	; (8008d10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008d0a:	6812      	ldr	r2, [r2, #0]
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	4770      	bx	lr
 8008d10:	20000030 	.word	0x20000030
 8008d14:	200000ac 	.word	0x200000ac

08008d18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008d18:	4a02      	ldr	r2, [pc, #8]	; (8008d24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8008d1a:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8008d1c:	6812      	ldr	r2, [r2, #0]
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	200000ac 	.word	0x200000ac
 8008d28:	20000030 	.word	0x20000030

08008d2c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8008d2c:	f006 b922 	b.w	800ef74 <std_msgs__msg__Int32__init>

08008d30 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8008d30:	f006 b924 	b.w	800ef7c <std_msgs__msg__Int32__fini>

08008d34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008d34:	4b04      	ldr	r3, [pc, #16]	; (8008d48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	b10a      	cbz	r2, 8008d3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008d3a:	4803      	ldr	r0, [pc, #12]	; (8008d48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008d3c:	4770      	bx	lr
 8008d3e:	4a03      	ldr	r2, [pc, #12]	; (8008d4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008d42:	6812      	ldr	r2, [r2, #0]
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	4770      	bx	lr
 8008d48:	20000078 	.word	0x20000078
 8008d4c:	200000b0 	.word	0x200000b0

08008d50 <_Int32__max_serialized_size>:
 8008d50:	b508      	push	{r3, lr}
 8008d52:	2104      	movs	r1, #4
 8008d54:	2000      	movs	r0, #0
 8008d56:	f001 f807 	bl	8009d68 <ucdr_alignment>
 8008d5a:	3004      	adds	r0, #4
 8008d5c:	bd08      	pop	{r3, pc}
 8008d5e:	bf00      	nop

08008d60 <_Int32__cdr_deserialize>:
 8008d60:	b109      	cbz	r1, 8008d66 <_Int32__cdr_deserialize+0x6>
 8008d62:	f000 bf19 	b.w	8009b98 <ucdr_deserialize_int32_t>
 8008d66:	4608      	mov	r0, r1
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop

08008d6c <get_serialized_size_std_msgs__msg__Int32>:
 8008d6c:	b138      	cbz	r0, 8008d7e <get_serialized_size_std_msgs__msg__Int32+0x12>
 8008d6e:	b508      	push	{r3, lr}
 8008d70:	460b      	mov	r3, r1
 8008d72:	4618      	mov	r0, r3
 8008d74:	2104      	movs	r1, #4
 8008d76:	f000 fff7 	bl	8009d68 <ucdr_alignment>
 8008d7a:	3004      	adds	r0, #4
 8008d7c:	bd08      	pop	{r3, pc}
 8008d7e:	4770      	bx	lr

08008d80 <_Int32__cdr_serialize>:
 8008d80:	460a      	mov	r2, r1
 8008d82:	b118      	cbz	r0, 8008d8c <_Int32__cdr_serialize+0xc>
 8008d84:	6801      	ldr	r1, [r0, #0]
 8008d86:	4610      	mov	r0, r2
 8008d88:	f000 be6e 	b.w	8009a68 <ucdr_serialize_int32_t>
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop

08008d90 <_Int32__get_serialized_size>:
 8008d90:	b130      	cbz	r0, 8008da0 <_Int32__get_serialized_size+0x10>
 8008d92:	b508      	push	{r3, lr}
 8008d94:	2104      	movs	r1, #4
 8008d96:	2000      	movs	r0, #0
 8008d98:	f000 ffe6 	bl	8009d68 <ucdr_alignment>
 8008d9c:	3004      	adds	r0, #4
 8008d9e:	bd08      	pop	{r3, pc}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop

08008da4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008da4:	4800      	ldr	r0, [pc, #0]	; (8008da8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8008da6:	4770      	bx	lr
 8008da8:	20000084 	.word	0x20000084

08008dac <ucdr_serialize_bool>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	460d      	mov	r5, r1
 8008db0:	2101      	movs	r1, #1
 8008db2:	4604      	mov	r4, r0
 8008db4:	f000 ff8c 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008db8:	b148      	cbz	r0, 8008dce <ucdr_serialize_bool+0x22>
 8008dba:	68a3      	ldr	r3, [r4, #8]
 8008dbc:	701d      	strb	r5, [r3, #0]
 8008dbe:	68a2      	ldr	r2, [r4, #8]
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	440a      	add	r2, r1
 8008dc6:	440b      	add	r3, r1
 8008dc8:	60a2      	str	r2, [r4, #8]
 8008dca:	6123      	str	r3, [r4, #16]
 8008dcc:	7561      	strb	r1, [r4, #21]
 8008dce:	7da0      	ldrb	r0, [r4, #22]
 8008dd0:	f080 0001 	eor.w	r0, r0, #1
 8008dd4:	bd38      	pop	{r3, r4, r5, pc}
 8008dd6:	bf00      	nop

08008dd8 <ucdr_deserialize_bool>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	460d      	mov	r5, r1
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4604      	mov	r4, r0
 8008de0:	f000 ff76 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008de4:	b160      	cbz	r0, 8008e00 <ucdr_deserialize_bool+0x28>
 8008de6:	68a2      	ldr	r2, [r4, #8]
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008dee:	3900      	subs	r1, #0
 8008df0:	bf18      	it	ne
 8008df2:	2101      	movne	r1, #1
 8008df4:	7029      	strb	r1, [r5, #0]
 8008df6:	3301      	adds	r3, #1
 8008df8:	2101      	movs	r1, #1
 8008dfa:	60a2      	str	r2, [r4, #8]
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	7561      	strb	r1, [r4, #21]
 8008e00:	7da0      	ldrb	r0, [r4, #22]
 8008e02:	f080 0001 	eor.w	r0, r0, #1
 8008e06:	bd38      	pop	{r3, r4, r5, pc}

08008e08 <ucdr_serialize_uint8_t>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	460d      	mov	r5, r1
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	4604      	mov	r4, r0
 8008e10:	f000 ff5e 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008e14:	b148      	cbz	r0, 8008e2a <ucdr_serialize_uint8_t+0x22>
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	701d      	strb	r5, [r3, #0]
 8008e1a:	68a2      	ldr	r2, [r4, #8]
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	2101      	movs	r1, #1
 8008e20:	440a      	add	r2, r1
 8008e22:	440b      	add	r3, r1
 8008e24:	60a2      	str	r2, [r4, #8]
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	7561      	strb	r1, [r4, #21]
 8008e2a:	7da0      	ldrb	r0, [r4, #22]
 8008e2c:	f080 0001 	eor.w	r0, r0, #1
 8008e30:	bd38      	pop	{r3, r4, r5, pc}
 8008e32:	bf00      	nop

08008e34 <ucdr_deserialize_uint8_t>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	460d      	mov	r5, r1
 8008e38:	2101      	movs	r1, #1
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	f000 ff48 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008e40:	b150      	cbz	r0, 8008e58 <ucdr_deserialize_uint8_t+0x24>
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	702b      	strb	r3, [r5, #0]
 8008e48:	68a2      	ldr	r2, [r4, #8]
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	440a      	add	r2, r1
 8008e50:	440b      	add	r3, r1
 8008e52:	60a2      	str	r2, [r4, #8]
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	7561      	strb	r1, [r4, #21]
 8008e58:	7da0      	ldrb	r0, [r4, #22]
 8008e5a:	f080 0001 	eor.w	r0, r0, #1
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}

08008e60 <ucdr_serialize_uint16_t>:
 8008e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	460b      	mov	r3, r1
 8008e68:	2102      	movs	r1, #2
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008e70:	f000 ff82 	bl	8009d78 <ucdr_buffer_alignment>
 8008e74:	4601      	mov	r1, r0
 8008e76:	4620      	mov	r0, r4
 8008e78:	7d67      	ldrb	r7, [r4, #21]
 8008e7a:	f000 ffc1 	bl	8009e00 <ucdr_advance_buffer>
 8008e7e:	2102      	movs	r1, #2
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 ff19 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8008e86:	bb78      	cbnz	r0, 8008ee8 <ucdr_serialize_uint16_t+0x88>
 8008e88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008e8c:	42ab      	cmp	r3, r5
 8008e8e:	d926      	bls.n	8008ede <ucdr_serialize_uint16_t+0x7e>
 8008e90:	1b5e      	subs	r6, r3, r5
 8008e92:	60a3      	str	r3, [r4, #8]
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	f1c6 0802 	rsb	r8, r6, #2
 8008e9a:	4433      	add	r3, r6
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	4641      	mov	r1, r8
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 ff15 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d03b      	beq.n	8008f22 <ucdr_serialize_uint16_t+0xc2>
 8008eaa:	7d23      	ldrb	r3, [r4, #20]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d04a      	beq.n	8008f46 <ucdr_serialize_uint16_t+0xe6>
 8008eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008eb4:	702b      	strb	r3, [r5, #0]
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	d040      	beq.n	8008f3c <ucdr_serialize_uint16_t+0xdc>
 8008eba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ebe:	706b      	strb	r3, [r5, #1]
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	68a2      	ldr	r2, [r4, #8]
 8008ec4:	7da0      	ldrb	r0, [r4, #22]
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	1b9e      	subs	r6, r3, r6
 8008eca:	4442      	add	r2, r8
 8008ecc:	2302      	movs	r3, #2
 8008ece:	f080 0001 	eor.w	r0, r0, #1
 8008ed2:	60a2      	str	r2, [r4, #8]
 8008ed4:	6126      	str	r6, [r4, #16]
 8008ed6:	7563      	strb	r3, [r4, #21]
 8008ed8:	b002      	add	sp, #8
 8008eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ede:	2102      	movs	r1, #2
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 fef5 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008ee6:	b190      	cbz	r0, 8008f0e <ucdr_serialize_uint16_t+0xae>
 8008ee8:	7d23      	ldrb	r3, [r4, #20]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	68a3      	ldr	r3, [r4, #8]
 8008eee:	d014      	beq.n	8008f1a <ucdr_serialize_uint16_t+0xba>
 8008ef0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008efc:	705a      	strb	r2, [r3, #1]
 8008efe:	68a2      	ldr	r2, [r4, #8]
 8008f00:	6923      	ldr	r3, [r4, #16]
 8008f02:	3202      	adds	r2, #2
 8008f04:	3302      	adds	r3, #2
 8008f06:	2102      	movs	r1, #2
 8008f08:	60a2      	str	r2, [r4, #8]
 8008f0a:	6123      	str	r3, [r4, #16]
 8008f0c:	7561      	strb	r1, [r4, #21]
 8008f0e:	7da0      	ldrb	r0, [r4, #22]
 8008f10:	f080 0001 	eor.w	r0, r0, #1
 8008f14:	b002      	add	sp, #8
 8008f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008f1e:	801a      	strh	r2, [r3, #0]
 8008f20:	e7ed      	b.n	8008efe <ucdr_serialize_uint16_t+0x9e>
 8008f22:	68a2      	ldr	r2, [r4, #8]
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	7da0      	ldrb	r0, [r4, #22]
 8008f28:	7567      	strb	r7, [r4, #21]
 8008f2a:	1b92      	subs	r2, r2, r6
 8008f2c:	1b9b      	subs	r3, r3, r6
 8008f2e:	f080 0001 	eor.w	r0, r0, #1
 8008f32:	60a2      	str	r2, [r4, #8]
 8008f34:	6123      	str	r3, [r4, #16]
 8008f36:	b002      	add	sp, #8
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	68a3      	ldr	r3, [r4, #8]
 8008f3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	e7bc      	b.n	8008ec0 <ucdr_serialize_uint16_t+0x60>
 8008f46:	4628      	mov	r0, r5
 8008f48:	f10d 0506 	add.w	r5, sp, #6
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4632      	mov	r2, r6
 8008f50:	f008 feac 	bl	8011cac <memcpy>
 8008f54:	68a0      	ldr	r0, [r4, #8]
 8008f56:	4642      	mov	r2, r8
 8008f58:	19a9      	adds	r1, r5, r6
 8008f5a:	f008 fea7 	bl	8011cac <memcpy>
 8008f5e:	e7af      	b.n	8008ec0 <ucdr_serialize_uint16_t+0x60>

08008f60 <ucdr_serialize_endian_uint16_t>:
 8008f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f64:	b083      	sub	sp, #12
 8008f66:	460d      	mov	r5, r1
 8008f68:	2102      	movs	r1, #2
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008f70:	f000 ff02 	bl	8009d78 <ucdr_buffer_alignment>
 8008f74:	4601      	mov	r1, r0
 8008f76:	4620      	mov	r0, r4
 8008f78:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008f7c:	f000 ff40 	bl	8009e00 <ucdr_advance_buffer>
 8008f80:	2102      	movs	r1, #2
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fe98 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8008f88:	bb70      	cbnz	r0, 8008fe8 <ucdr_serialize_endian_uint16_t+0x88>
 8008f8a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008f8e:	42be      	cmp	r6, r7
 8008f90:	d925      	bls.n	8008fde <ucdr_serialize_endian_uint16_t+0x7e>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	60a6      	str	r6, [r4, #8]
 8008f96:	1bf6      	subs	r6, r6, r7
 8008f98:	4433      	add	r3, r6
 8008f9a:	f1c6 0902 	rsb	r9, r6, #2
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fe94 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d039      	beq.n	8009020 <ucdr_serialize_endian_uint16_t+0xc0>
 8008fac:	2d01      	cmp	r5, #1
 8008fae:	d04a      	beq.n	8009046 <ucdr_serialize_endian_uint16_t+0xe6>
 8008fb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008fb4:	703b      	strb	r3, [r7, #0]
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	d040      	beq.n	800903c <ucdr_serialize_endian_uint16_t+0xdc>
 8008fba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008fbe:	707b      	strb	r3, [r7, #1]
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	68a2      	ldr	r2, [r4, #8]
 8008fc4:	7da0      	ldrb	r0, [r4, #22]
 8008fc6:	3302      	adds	r3, #2
 8008fc8:	444a      	add	r2, r9
 8008fca:	1b9b      	subs	r3, r3, r6
 8008fcc:	2102      	movs	r1, #2
 8008fce:	f080 0001 	eor.w	r0, r0, #1
 8008fd2:	60a2      	str	r2, [r4, #8]
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	7561      	strb	r1, [r4, #21]
 8008fd8:	b003      	add	sp, #12
 8008fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fde:	2102      	movs	r1, #2
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fe75 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8008fe6:	b188      	cbz	r0, 800900c <ucdr_serialize_endian_uint16_t+0xac>
 8008fe8:	2d01      	cmp	r5, #1
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	d014      	beq.n	8009018 <ucdr_serialize_endian_uint16_t+0xb8>
 8008fee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	68a3      	ldr	r3, [r4, #8]
 8008ff6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ffa:	705a      	strb	r2, [r3, #1]
 8008ffc:	68a2      	ldr	r2, [r4, #8]
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	3202      	adds	r2, #2
 8009002:	3302      	adds	r3, #2
 8009004:	2102      	movs	r1, #2
 8009006:	60a2      	str	r2, [r4, #8]
 8009008:	6123      	str	r3, [r4, #16]
 800900a:	7561      	strb	r1, [r4, #21]
 800900c:	7da0      	ldrb	r0, [r4, #22]
 800900e:	f080 0001 	eor.w	r0, r0, #1
 8009012:	b003      	add	sp, #12
 8009014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009018:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800901c:	801a      	strh	r2, [r3, #0]
 800901e:	e7ed      	b.n	8008ffc <ucdr_serialize_endian_uint16_t+0x9c>
 8009020:	68a2      	ldr	r2, [r4, #8]
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	7da0      	ldrb	r0, [r4, #22]
 8009026:	f884 8015 	strb.w	r8, [r4, #21]
 800902a:	1b92      	subs	r2, r2, r6
 800902c:	1b9b      	subs	r3, r3, r6
 800902e:	f080 0001 	eor.w	r0, r0, #1
 8009032:	60a2      	str	r2, [r4, #8]
 8009034:	6123      	str	r3, [r4, #16]
 8009036:	b003      	add	sp, #12
 8009038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800903c:	68a3      	ldr	r3, [r4, #8]
 800903e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009042:	701a      	strb	r2, [r3, #0]
 8009044:	e7bc      	b.n	8008fc0 <ucdr_serialize_endian_uint16_t+0x60>
 8009046:	f10d 0506 	add.w	r5, sp, #6
 800904a:	4629      	mov	r1, r5
 800904c:	4632      	mov	r2, r6
 800904e:	4638      	mov	r0, r7
 8009050:	f008 fe2c 	bl	8011cac <memcpy>
 8009054:	68a0      	ldr	r0, [r4, #8]
 8009056:	464a      	mov	r2, r9
 8009058:	19a9      	adds	r1, r5, r6
 800905a:	f008 fe27 	bl	8011cac <memcpy>
 800905e:	e7af      	b.n	8008fc0 <ucdr_serialize_endian_uint16_t+0x60>

08009060 <ucdr_deserialize_uint16_t>:
 8009060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009064:	460d      	mov	r5, r1
 8009066:	2102      	movs	r1, #2
 8009068:	4604      	mov	r4, r0
 800906a:	f000 fe85 	bl	8009d78 <ucdr_buffer_alignment>
 800906e:	4601      	mov	r1, r0
 8009070:	4620      	mov	r0, r4
 8009072:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009076:	f000 fec3 	bl	8009e00 <ucdr_advance_buffer>
 800907a:	2102      	movs	r1, #2
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fe1b 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8009082:	bb60      	cbnz	r0, 80090de <ucdr_deserialize_uint16_t+0x7e>
 8009084:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009088:	42be      	cmp	r6, r7
 800908a:	d923      	bls.n	80090d4 <ucdr_deserialize_uint16_t+0x74>
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	60a6      	str	r6, [r4, #8]
 8009090:	1bf6      	subs	r6, r6, r7
 8009092:	4433      	add	r3, r6
 8009094:	f1c6 0902 	rsb	r9, r6, #2
 8009098:	6123      	str	r3, [r4, #16]
 800909a:	4649      	mov	r1, r9
 800909c:	4620      	mov	r0, r4
 800909e:	f000 fe17 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d034      	beq.n	8009110 <ucdr_deserialize_uint16_t+0xb0>
 80090a6:	7d23      	ldrb	r3, [r4, #20]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d042      	beq.n	8009132 <ucdr_deserialize_uint16_t+0xd2>
 80090ac:	787b      	ldrb	r3, [r7, #1]
 80090ae:	702b      	strb	r3, [r5, #0]
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	d03a      	beq.n	800912a <ucdr_deserialize_uint16_t+0xca>
 80090b4:	783b      	ldrb	r3, [r7, #0]
 80090b6:	706b      	strb	r3, [r5, #1]
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	68a2      	ldr	r2, [r4, #8]
 80090bc:	7da0      	ldrb	r0, [r4, #22]
 80090be:	2102      	movs	r1, #2
 80090c0:	3302      	adds	r3, #2
 80090c2:	444a      	add	r2, r9
 80090c4:	1b9b      	subs	r3, r3, r6
 80090c6:	7561      	strb	r1, [r4, #21]
 80090c8:	60a2      	str	r2, [r4, #8]
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	f080 0001 	eor.w	r0, r0, #1
 80090d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d4:	2102      	movs	r1, #2
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fdfa 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80090dc:	b180      	cbz	r0, 8009100 <ucdr_deserialize_uint16_t+0xa0>
 80090de:	7d23      	ldrb	r3, [r4, #20]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	d011      	beq.n	800910a <ucdr_deserialize_uint16_t+0xaa>
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	702b      	strb	r3, [r5, #0]
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	706b      	strb	r3, [r5, #1]
 80090f0:	68a2      	ldr	r2, [r4, #8]
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	3202      	adds	r2, #2
 80090f6:	3302      	adds	r3, #2
 80090f8:	2102      	movs	r1, #2
 80090fa:	60a2      	str	r2, [r4, #8]
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	7561      	strb	r1, [r4, #21]
 8009100:	7da0      	ldrb	r0, [r4, #22]
 8009102:	f080 0001 	eor.w	r0, r0, #1
 8009106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	802b      	strh	r3, [r5, #0]
 800910e:	e7ef      	b.n	80090f0 <ucdr_deserialize_uint16_t+0x90>
 8009110:	68a2      	ldr	r2, [r4, #8]
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	7da0      	ldrb	r0, [r4, #22]
 8009116:	f884 8015 	strb.w	r8, [r4, #21]
 800911a:	1b92      	subs	r2, r2, r6
 800911c:	1b9b      	subs	r3, r3, r6
 800911e:	60a2      	str	r2, [r4, #8]
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	f080 0001 	eor.w	r0, r0, #1
 8009126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	706b      	strb	r3, [r5, #1]
 8009130:	e7c2      	b.n	80090b8 <ucdr_deserialize_uint16_t+0x58>
 8009132:	4639      	mov	r1, r7
 8009134:	4632      	mov	r2, r6
 8009136:	4628      	mov	r0, r5
 8009138:	f008 fdb8 	bl	8011cac <memcpy>
 800913c:	68a1      	ldr	r1, [r4, #8]
 800913e:	464a      	mov	r2, r9
 8009140:	19a8      	adds	r0, r5, r6
 8009142:	f008 fdb3 	bl	8011cac <memcpy>
 8009146:	e7b7      	b.n	80090b8 <ucdr_deserialize_uint16_t+0x58>

08009148 <ucdr_deserialize_endian_uint16_t>:
 8009148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	460e      	mov	r6, r1
 800914e:	2102      	movs	r1, #2
 8009150:	4604      	mov	r4, r0
 8009152:	4615      	mov	r5, r2
 8009154:	f000 fe10 	bl	8009d78 <ucdr_buffer_alignment>
 8009158:	4601      	mov	r1, r0
 800915a:	4620      	mov	r0, r4
 800915c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009160:	f000 fe4e 	bl	8009e00 <ucdr_advance_buffer>
 8009164:	2102      	movs	r1, #2
 8009166:	4620      	mov	r0, r4
 8009168:	f000 fda6 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800916c:	bb70      	cbnz	r0, 80091cc <ucdr_deserialize_endian_uint16_t+0x84>
 800916e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8009172:	4547      	cmp	r7, r8
 8009174:	d925      	bls.n	80091c2 <ucdr_deserialize_endian_uint16_t+0x7a>
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	60a7      	str	r7, [r4, #8]
 800917a:	eba7 0708 	sub.w	r7, r7, r8
 800917e:	443b      	add	r3, r7
 8009180:	f1c7 0a02 	rsb	sl, r7, #2
 8009184:	6123      	str	r3, [r4, #16]
 8009186:	4651      	mov	r1, sl
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fda1 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 800918e:	2800      	cmp	r0, #0
 8009190:	d034      	beq.n	80091fc <ucdr_deserialize_endian_uint16_t+0xb4>
 8009192:	2e01      	cmp	r6, #1
 8009194:	d043      	beq.n	800921e <ucdr_deserialize_endian_uint16_t+0xd6>
 8009196:	f898 3001 	ldrb.w	r3, [r8, #1]
 800919a:	702b      	strb	r3, [r5, #0]
 800919c:	2f00      	cmp	r7, #0
 800919e:	d03a      	beq.n	8009216 <ucdr_deserialize_endian_uint16_t+0xce>
 80091a0:	f898 3000 	ldrb.w	r3, [r8]
 80091a4:	706b      	strb	r3, [r5, #1]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	68a2      	ldr	r2, [r4, #8]
 80091aa:	7da0      	ldrb	r0, [r4, #22]
 80091ac:	2102      	movs	r1, #2
 80091ae:	3302      	adds	r3, #2
 80091b0:	4452      	add	r2, sl
 80091b2:	1bdb      	subs	r3, r3, r7
 80091b4:	7561      	strb	r1, [r4, #21]
 80091b6:	60a2      	str	r2, [r4, #8]
 80091b8:	6123      	str	r3, [r4, #16]
 80091ba:	f080 0001 	eor.w	r0, r0, #1
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	2102      	movs	r1, #2
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fd83 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80091ca:	b178      	cbz	r0, 80091ec <ucdr_deserialize_endian_uint16_t+0xa4>
 80091cc:	2e01      	cmp	r6, #1
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	d011      	beq.n	80091f6 <ucdr_deserialize_endian_uint16_t+0xae>
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	702b      	strb	r3, [r5, #0]
 80091d6:	68a3      	ldr	r3, [r4, #8]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	706b      	strb	r3, [r5, #1]
 80091dc:	68a2      	ldr	r2, [r4, #8]
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	3202      	adds	r2, #2
 80091e2:	3302      	adds	r3, #2
 80091e4:	2102      	movs	r1, #2
 80091e6:	60a2      	str	r2, [r4, #8]
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	7561      	strb	r1, [r4, #21]
 80091ec:	7da0      	ldrb	r0, [r4, #22]
 80091ee:	f080 0001 	eor.w	r0, r0, #1
 80091f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	802b      	strh	r3, [r5, #0]
 80091fa:	e7ef      	b.n	80091dc <ucdr_deserialize_endian_uint16_t+0x94>
 80091fc:	68a2      	ldr	r2, [r4, #8]
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	7da0      	ldrb	r0, [r4, #22]
 8009202:	f884 9015 	strb.w	r9, [r4, #21]
 8009206:	1bd2      	subs	r2, r2, r7
 8009208:	1bdb      	subs	r3, r3, r7
 800920a:	60a2      	str	r2, [r4, #8]
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	f080 0001 	eor.w	r0, r0, #1
 8009212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	706b      	strb	r3, [r5, #1]
 800921c:	e7c3      	b.n	80091a6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800921e:	4641      	mov	r1, r8
 8009220:	463a      	mov	r2, r7
 8009222:	4628      	mov	r0, r5
 8009224:	f008 fd42 	bl	8011cac <memcpy>
 8009228:	68a1      	ldr	r1, [r4, #8]
 800922a:	4652      	mov	r2, sl
 800922c:	19e8      	adds	r0, r5, r7
 800922e:	f008 fd3d 	bl	8011cac <memcpy>
 8009232:	e7b8      	b.n	80091a6 <ucdr_deserialize_endian_uint16_t+0x5e>

08009234 <ucdr_serialize_uint32_t>:
 8009234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	4604      	mov	r4, r0
 800923c:	9101      	str	r1, [sp, #4]
 800923e:	2104      	movs	r1, #4
 8009240:	f000 fd9a 	bl	8009d78 <ucdr_buffer_alignment>
 8009244:	4601      	mov	r1, r0
 8009246:	4620      	mov	r0, r4
 8009248:	7d67      	ldrb	r7, [r4, #21]
 800924a:	f000 fdd9 	bl	8009e00 <ucdr_advance_buffer>
 800924e:	2104      	movs	r1, #4
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fd31 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8009256:	2800      	cmp	r0, #0
 8009258:	d139      	bne.n	80092ce <ucdr_serialize_uint32_t+0x9a>
 800925a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800925e:	42ab      	cmp	r3, r5
 8009260:	d930      	bls.n	80092c4 <ucdr_serialize_uint32_t+0x90>
 8009262:	1b5e      	subs	r6, r3, r5
 8009264:	60a3      	str	r3, [r4, #8]
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	f1c6 0804 	rsb	r8, r6, #4
 800926c:	4433      	add	r3, r6
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	4641      	mov	r1, r8
 8009272:	4620      	mov	r0, r4
 8009274:	f000 fd2c 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009278:	2800      	cmp	r0, #0
 800927a:	d04c      	beq.n	8009316 <ucdr_serialize_uint32_t+0xe2>
 800927c:	7d23      	ldrb	r3, [r4, #20]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d063      	beq.n	800934a <ucdr_serialize_uint32_t+0x116>
 8009282:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009286:	702b      	strb	r3, [r5, #0]
 8009288:	2e00      	cmp	r6, #0
 800928a:	d051      	beq.n	8009330 <ucdr_serialize_uint32_t+0xfc>
 800928c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009290:	706b      	strb	r3, [r5, #1]
 8009292:	2e01      	cmp	r6, #1
 8009294:	d050      	beq.n	8009338 <ucdr_serialize_uint32_t+0x104>
 8009296:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800929a:	70ab      	strb	r3, [r5, #2]
 800929c:	2e02      	cmp	r6, #2
 800929e:	d04f      	beq.n	8009340 <ucdr_serialize_uint32_t+0x10c>
 80092a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80092a4:	70eb      	strb	r3, [r5, #3]
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	68a2      	ldr	r2, [r4, #8]
 80092aa:	7da0      	ldrb	r0, [r4, #22]
 80092ac:	3304      	adds	r3, #4
 80092ae:	1b9e      	subs	r6, r3, r6
 80092b0:	4442      	add	r2, r8
 80092b2:	2304      	movs	r3, #4
 80092b4:	f080 0001 	eor.w	r0, r0, #1
 80092b8:	60a2      	str	r2, [r4, #8]
 80092ba:	6126      	str	r6, [r4, #16]
 80092bc:	7563      	strb	r3, [r4, #21]
 80092be:	b002      	add	sp, #8
 80092c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c4:	2104      	movs	r1, #4
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 fd02 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80092cc:	b1d0      	cbz	r0, 8009304 <ucdr_serialize_uint32_t+0xd0>
 80092ce:	7d23      	ldrb	r3, [r4, #20]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	68a3      	ldr	r3, [r4, #8]
 80092d4:	d01c      	beq.n	8009310 <ucdr_serialize_uint32_t+0xdc>
 80092d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80092da:	701a      	strb	r2, [r3, #0]
 80092dc:	68a3      	ldr	r3, [r4, #8]
 80092de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80092e2:	705a      	strb	r2, [r3, #1]
 80092e4:	68a3      	ldr	r3, [r4, #8]
 80092e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80092ea:	709a      	strb	r2, [r3, #2]
 80092ec:	68a3      	ldr	r3, [r4, #8]
 80092ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80092f2:	70da      	strb	r2, [r3, #3]
 80092f4:	68a2      	ldr	r2, [r4, #8]
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	3204      	adds	r2, #4
 80092fa:	3304      	adds	r3, #4
 80092fc:	2104      	movs	r1, #4
 80092fe:	60a2      	str	r2, [r4, #8]
 8009300:	6123      	str	r3, [r4, #16]
 8009302:	7561      	strb	r1, [r4, #21]
 8009304:	7da0      	ldrb	r0, [r4, #22]
 8009306:	f080 0001 	eor.w	r0, r0, #1
 800930a:	b002      	add	sp, #8
 800930c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009310:	9a01      	ldr	r2, [sp, #4]
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e7ee      	b.n	80092f4 <ucdr_serialize_uint32_t+0xc0>
 8009316:	68a2      	ldr	r2, [r4, #8]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	7da0      	ldrb	r0, [r4, #22]
 800931c:	7567      	strb	r7, [r4, #21]
 800931e:	1b92      	subs	r2, r2, r6
 8009320:	1b9b      	subs	r3, r3, r6
 8009322:	f080 0001 	eor.w	r0, r0, #1
 8009326:	60a2      	str	r2, [r4, #8]
 8009328:	6123      	str	r3, [r4, #16]
 800932a:	b002      	add	sp, #8
 800932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	68a3      	ldr	r3, [r4, #8]
 800933a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	68a3      	ldr	r3, [r4, #8]
 8009342:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009346:	701a      	strb	r2, [r3, #0]
 8009348:	e7ad      	b.n	80092a6 <ucdr_serialize_uint32_t+0x72>
 800934a:	4628      	mov	r0, r5
 800934c:	ad01      	add	r5, sp, #4
 800934e:	4629      	mov	r1, r5
 8009350:	4632      	mov	r2, r6
 8009352:	f008 fcab 	bl	8011cac <memcpy>
 8009356:	68a0      	ldr	r0, [r4, #8]
 8009358:	4642      	mov	r2, r8
 800935a:	19a9      	adds	r1, r5, r6
 800935c:	f008 fca6 	bl	8011cac <memcpy>
 8009360:	e7a1      	b.n	80092a6 <ucdr_serialize_uint32_t+0x72>
 8009362:	bf00      	nop

08009364 <ucdr_serialize_endian_uint32_t>:
 8009364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009368:	b083      	sub	sp, #12
 800936a:	460d      	mov	r5, r1
 800936c:	2104      	movs	r1, #4
 800936e:	4604      	mov	r4, r0
 8009370:	9201      	str	r2, [sp, #4]
 8009372:	f000 fd01 	bl	8009d78 <ucdr_buffer_alignment>
 8009376:	4601      	mov	r1, r0
 8009378:	4620      	mov	r0, r4
 800937a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800937e:	f000 fd3f 	bl	8009e00 <ucdr_advance_buffer>
 8009382:	2104      	movs	r1, #4
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fc97 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800938a:	2800      	cmp	r0, #0
 800938c:	d138      	bne.n	8009400 <ucdr_serialize_endian_uint32_t+0x9c>
 800938e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009392:	42b7      	cmp	r7, r6
 8009394:	d92f      	bls.n	80093f6 <ucdr_serialize_endian_uint32_t+0x92>
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	60a7      	str	r7, [r4, #8]
 800939a:	1bbf      	subs	r7, r7, r6
 800939c:	443b      	add	r3, r7
 800939e:	f1c7 0904 	rsb	r9, r7, #4
 80093a2:	6123      	str	r3, [r4, #16]
 80093a4:	4649      	mov	r1, r9
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 fc92 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d04a      	beq.n	8009446 <ucdr_serialize_endian_uint32_t+0xe2>
 80093b0:	2d01      	cmp	r5, #1
 80093b2:	d063      	beq.n	800947c <ucdr_serialize_endian_uint32_t+0x118>
 80093b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80093b8:	7033      	strb	r3, [r6, #0]
 80093ba:	2f00      	cmp	r7, #0
 80093bc:	d051      	beq.n	8009462 <ucdr_serialize_endian_uint32_t+0xfe>
 80093be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80093c2:	7073      	strb	r3, [r6, #1]
 80093c4:	2f01      	cmp	r7, #1
 80093c6:	d050      	beq.n	800946a <ucdr_serialize_endian_uint32_t+0x106>
 80093c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80093cc:	70b3      	strb	r3, [r6, #2]
 80093ce:	2f02      	cmp	r7, #2
 80093d0:	d04f      	beq.n	8009472 <ucdr_serialize_endian_uint32_t+0x10e>
 80093d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80093d6:	70f3      	strb	r3, [r6, #3]
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	68a2      	ldr	r2, [r4, #8]
 80093dc:	7da0      	ldrb	r0, [r4, #22]
 80093de:	3304      	adds	r3, #4
 80093e0:	444a      	add	r2, r9
 80093e2:	1bdb      	subs	r3, r3, r7
 80093e4:	2104      	movs	r1, #4
 80093e6:	f080 0001 	eor.w	r0, r0, #1
 80093ea:	60a2      	str	r2, [r4, #8]
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	7561      	strb	r1, [r4, #21]
 80093f0:	b003      	add	sp, #12
 80093f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093f6:	2104      	movs	r1, #4
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 fc69 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80093fe:	b1c8      	cbz	r0, 8009434 <ucdr_serialize_endian_uint32_t+0xd0>
 8009400:	2d01      	cmp	r5, #1
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	d01c      	beq.n	8009440 <ucdr_serialize_endian_uint32_t+0xdc>
 8009406:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800940a:	701a      	strb	r2, [r3, #0]
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009412:	705a      	strb	r2, [r3, #1]
 8009414:	68a3      	ldr	r3, [r4, #8]
 8009416:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800941a:	709a      	strb	r2, [r3, #2]
 800941c:	68a3      	ldr	r3, [r4, #8]
 800941e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009422:	70da      	strb	r2, [r3, #3]
 8009424:	68a2      	ldr	r2, [r4, #8]
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	3204      	adds	r2, #4
 800942a:	3304      	adds	r3, #4
 800942c:	2104      	movs	r1, #4
 800942e:	60a2      	str	r2, [r4, #8]
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	7561      	strb	r1, [r4, #21]
 8009434:	7da0      	ldrb	r0, [r4, #22]
 8009436:	f080 0001 	eor.w	r0, r0, #1
 800943a:	b003      	add	sp, #12
 800943c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009440:	9a01      	ldr	r2, [sp, #4]
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	e7ee      	b.n	8009424 <ucdr_serialize_endian_uint32_t+0xc0>
 8009446:	68a2      	ldr	r2, [r4, #8]
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	7da0      	ldrb	r0, [r4, #22]
 800944c:	f884 8015 	strb.w	r8, [r4, #21]
 8009450:	1bd2      	subs	r2, r2, r7
 8009452:	1bdb      	subs	r3, r3, r7
 8009454:	f080 0001 	eor.w	r0, r0, #1
 8009458:	60a2      	str	r2, [r4, #8]
 800945a:	6123      	str	r3, [r4, #16]
 800945c:	b003      	add	sp, #12
 800945e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	68a3      	ldr	r3, [r4, #8]
 800946c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	e7ad      	b.n	80093d8 <ucdr_serialize_endian_uint32_t+0x74>
 800947c:	ad01      	add	r5, sp, #4
 800947e:	4629      	mov	r1, r5
 8009480:	463a      	mov	r2, r7
 8009482:	4630      	mov	r0, r6
 8009484:	f008 fc12 	bl	8011cac <memcpy>
 8009488:	68a0      	ldr	r0, [r4, #8]
 800948a:	464a      	mov	r2, r9
 800948c:	19e9      	adds	r1, r5, r7
 800948e:	f008 fc0d 	bl	8011cac <memcpy>
 8009492:	e7a1      	b.n	80093d8 <ucdr_serialize_endian_uint32_t+0x74>

08009494 <ucdr_deserialize_uint32_t>:
 8009494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009498:	460d      	mov	r5, r1
 800949a:	2104      	movs	r1, #4
 800949c:	4604      	mov	r4, r0
 800949e:	f000 fc6b 	bl	8009d78 <ucdr_buffer_alignment>
 80094a2:	4601      	mov	r1, r0
 80094a4:	4620      	mov	r0, r4
 80094a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80094aa:	f000 fca9 	bl	8009e00 <ucdr_advance_buffer>
 80094ae:	2104      	movs	r1, #4
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fc01 	bl	8009cb8 <ucdr_check_buffer_available_for>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d138      	bne.n	800952c <ucdr_deserialize_uint32_t+0x98>
 80094ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80094be:	42b7      	cmp	r7, r6
 80094c0:	d92f      	bls.n	8009522 <ucdr_deserialize_uint32_t+0x8e>
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	60a7      	str	r7, [r4, #8]
 80094c6:	1bbf      	subs	r7, r7, r6
 80094c8:	443b      	add	r3, r7
 80094ca:	f1c7 0904 	rsb	r9, r7, #4
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	4649      	mov	r1, r9
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fbfc 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d046      	beq.n	800956a <ucdr_deserialize_uint32_t+0xd6>
 80094dc:	7d23      	ldrb	r3, [r4, #20]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d05c      	beq.n	800959c <ucdr_deserialize_uint32_t+0x108>
 80094e2:	78f3      	ldrb	r3, [r6, #3]
 80094e4:	702b      	strb	r3, [r5, #0]
 80094e6:	2f00      	cmp	r7, #0
 80094e8:	d04c      	beq.n	8009584 <ucdr_deserialize_uint32_t+0xf0>
 80094ea:	78b3      	ldrb	r3, [r6, #2]
 80094ec:	706b      	strb	r3, [r5, #1]
 80094ee:	2f01      	cmp	r7, #1
 80094f0:	f105 0302 	add.w	r3, r5, #2
 80094f4:	d04a      	beq.n	800958c <ucdr_deserialize_uint32_t+0xf8>
 80094f6:	7873      	ldrb	r3, [r6, #1]
 80094f8:	70ab      	strb	r3, [r5, #2]
 80094fa:	2f02      	cmp	r7, #2
 80094fc:	f105 0303 	add.w	r3, r5, #3
 8009500:	d048      	beq.n	8009594 <ucdr_deserialize_uint32_t+0x100>
 8009502:	7833      	ldrb	r3, [r6, #0]
 8009504:	70eb      	strb	r3, [r5, #3]
 8009506:	6923      	ldr	r3, [r4, #16]
 8009508:	68a2      	ldr	r2, [r4, #8]
 800950a:	7da0      	ldrb	r0, [r4, #22]
 800950c:	2104      	movs	r1, #4
 800950e:	3304      	adds	r3, #4
 8009510:	444a      	add	r2, r9
 8009512:	1bdb      	subs	r3, r3, r7
 8009514:	7561      	strb	r1, [r4, #21]
 8009516:	60a2      	str	r2, [r4, #8]
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	f080 0001 	eor.w	r0, r0, #1
 800951e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009522:	2104      	movs	r1, #4
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fbd3 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 800952a:	b1b0      	cbz	r0, 800955a <ucdr_deserialize_uint32_t+0xc6>
 800952c:	7d23      	ldrb	r3, [r4, #20]
 800952e:	2b01      	cmp	r3, #1
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	d017      	beq.n	8009564 <ucdr_deserialize_uint32_t+0xd0>
 8009534:	78db      	ldrb	r3, [r3, #3]
 8009536:	702b      	strb	r3, [r5, #0]
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	789b      	ldrb	r3, [r3, #2]
 800953c:	706b      	strb	r3, [r5, #1]
 800953e:	68a3      	ldr	r3, [r4, #8]
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	70ab      	strb	r3, [r5, #2]
 8009544:	68a3      	ldr	r3, [r4, #8]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	70eb      	strb	r3, [r5, #3]
 800954a:	68a2      	ldr	r2, [r4, #8]
 800954c:	6923      	ldr	r3, [r4, #16]
 800954e:	3204      	adds	r2, #4
 8009550:	3304      	adds	r3, #4
 8009552:	2104      	movs	r1, #4
 8009554:	60a2      	str	r2, [r4, #8]
 8009556:	6123      	str	r3, [r4, #16]
 8009558:	7561      	strb	r1, [r4, #21]
 800955a:	7da0      	ldrb	r0, [r4, #22]
 800955c:	f080 0001 	eor.w	r0, r0, #1
 8009560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	e7ef      	b.n	800954a <ucdr_deserialize_uint32_t+0xb6>
 800956a:	68a2      	ldr	r2, [r4, #8]
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	7da0      	ldrb	r0, [r4, #22]
 8009570:	f884 8015 	strb.w	r8, [r4, #21]
 8009574:	1bd2      	subs	r2, r2, r7
 8009576:	1bdb      	subs	r3, r3, r7
 8009578:	60a2      	str	r2, [r4, #8]
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	f080 0001 	eor.w	r0, r0, #1
 8009580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009584:	68a3      	ldr	r3, [r4, #8]
 8009586:	789b      	ldrb	r3, [r3, #2]
 8009588:	706b      	strb	r3, [r5, #1]
 800958a:	1cab      	adds	r3, r5, #2
 800958c:	68a2      	ldr	r2, [r4, #8]
 800958e:	7852      	ldrb	r2, [r2, #1]
 8009590:	f803 2b01 	strb.w	r2, [r3], #1
 8009594:	68a2      	ldr	r2, [r4, #8]
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	e7b4      	b.n	8009506 <ucdr_deserialize_uint32_t+0x72>
 800959c:	4631      	mov	r1, r6
 800959e:	463a      	mov	r2, r7
 80095a0:	4628      	mov	r0, r5
 80095a2:	f008 fb83 	bl	8011cac <memcpy>
 80095a6:	68a1      	ldr	r1, [r4, #8]
 80095a8:	464a      	mov	r2, r9
 80095aa:	19e8      	adds	r0, r5, r7
 80095ac:	f008 fb7e 	bl	8011cac <memcpy>
 80095b0:	e7a9      	b.n	8009506 <ucdr_deserialize_uint32_t+0x72>
 80095b2:	bf00      	nop

080095b4 <ucdr_deserialize_endian_uint32_t>:
 80095b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	460e      	mov	r6, r1
 80095ba:	2104      	movs	r1, #4
 80095bc:	4604      	mov	r4, r0
 80095be:	4615      	mov	r5, r2
 80095c0:	f000 fbda 	bl	8009d78 <ucdr_buffer_alignment>
 80095c4:	4601      	mov	r1, r0
 80095c6:	4620      	mov	r0, r4
 80095c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 80095cc:	f000 fc18 	bl	8009e00 <ucdr_advance_buffer>
 80095d0:	2104      	movs	r1, #4
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fb70 	bl	8009cb8 <ucdr_check_buffer_available_for>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d13c      	bne.n	8009656 <ucdr_deserialize_endian_uint32_t+0xa2>
 80095dc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80095e0:	42bb      	cmp	r3, r7
 80095e2:	d933      	bls.n	800964c <ucdr_deserialize_endian_uint32_t+0x98>
 80095e4:	eba3 0807 	sub.w	r8, r3, r7
 80095e8:	60a3      	str	r3, [r4, #8]
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	f1c8 0a04 	rsb	sl, r8, #4
 80095f0:	4443      	add	r3, r8
 80095f2:	6123      	str	r3, [r4, #16]
 80095f4:	4651      	mov	r1, sl
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 fb6a 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d048      	beq.n	8009692 <ucdr_deserialize_endian_uint32_t+0xde>
 8009600:	2e01      	cmp	r6, #1
 8009602:	d061      	beq.n	80096c8 <ucdr_deserialize_endian_uint32_t+0x114>
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	702b      	strb	r3, [r5, #0]
 8009608:	f1b8 0f00 	cmp.w	r8, #0
 800960c:	d050      	beq.n	80096b0 <ucdr_deserialize_endian_uint32_t+0xfc>
 800960e:	78bb      	ldrb	r3, [r7, #2]
 8009610:	706b      	strb	r3, [r5, #1]
 8009612:	f1b8 0f01 	cmp.w	r8, #1
 8009616:	f105 0302 	add.w	r3, r5, #2
 800961a:	d04d      	beq.n	80096b8 <ucdr_deserialize_endian_uint32_t+0x104>
 800961c:	787b      	ldrb	r3, [r7, #1]
 800961e:	70ab      	strb	r3, [r5, #2]
 8009620:	f1b8 0f02 	cmp.w	r8, #2
 8009624:	f105 0303 	add.w	r3, r5, #3
 8009628:	d04a      	beq.n	80096c0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800962a:	783b      	ldrb	r3, [r7, #0]
 800962c:	70eb      	strb	r3, [r5, #3]
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	68a2      	ldr	r2, [r4, #8]
 8009632:	7da0      	ldrb	r0, [r4, #22]
 8009634:	2104      	movs	r1, #4
 8009636:	3304      	adds	r3, #4
 8009638:	4452      	add	r2, sl
 800963a:	eba3 0308 	sub.w	r3, r3, r8
 800963e:	7561      	strb	r1, [r4, #21]
 8009640:	60a2      	str	r2, [r4, #8]
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	f080 0001 	eor.w	r0, r0, #1
 8009648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964c:	2104      	movs	r1, #4
 800964e:	4620      	mov	r0, r4
 8009650:	f000 fb3e 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009654:	b1a8      	cbz	r0, 8009682 <ucdr_deserialize_endian_uint32_t+0xce>
 8009656:	2e01      	cmp	r6, #1
 8009658:	68a3      	ldr	r3, [r4, #8]
 800965a:	d017      	beq.n	800968c <ucdr_deserialize_endian_uint32_t+0xd8>
 800965c:	78db      	ldrb	r3, [r3, #3]
 800965e:	702b      	strb	r3, [r5, #0]
 8009660:	68a3      	ldr	r3, [r4, #8]
 8009662:	789b      	ldrb	r3, [r3, #2]
 8009664:	706b      	strb	r3, [r5, #1]
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	70ab      	strb	r3, [r5, #2]
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	70eb      	strb	r3, [r5, #3]
 8009672:	68a2      	ldr	r2, [r4, #8]
 8009674:	6923      	ldr	r3, [r4, #16]
 8009676:	3204      	adds	r2, #4
 8009678:	3304      	adds	r3, #4
 800967a:	2104      	movs	r1, #4
 800967c:	60a2      	str	r2, [r4, #8]
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	7561      	strb	r1, [r4, #21]
 8009682:	7da0      	ldrb	r0, [r4, #22]
 8009684:	f080 0001 	eor.w	r0, r0, #1
 8009688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	e7ef      	b.n	8009672 <ucdr_deserialize_endian_uint32_t+0xbe>
 8009692:	68a2      	ldr	r2, [r4, #8]
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	7da0      	ldrb	r0, [r4, #22]
 8009698:	f884 9015 	strb.w	r9, [r4, #21]
 800969c:	eba2 0208 	sub.w	r2, r2, r8
 80096a0:	eba3 0308 	sub.w	r3, r3, r8
 80096a4:	60a2      	str	r2, [r4, #8]
 80096a6:	6123      	str	r3, [r4, #16]
 80096a8:	f080 0001 	eor.w	r0, r0, #1
 80096ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	789b      	ldrb	r3, [r3, #2]
 80096b4:	706b      	strb	r3, [r5, #1]
 80096b6:	1cab      	adds	r3, r5, #2
 80096b8:	68a2      	ldr	r2, [r4, #8]
 80096ba:	7852      	ldrb	r2, [r2, #1]
 80096bc:	f803 2b01 	strb.w	r2, [r3], #1
 80096c0:	68a2      	ldr	r2, [r4, #8]
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	e7b2      	b.n	800962e <ucdr_deserialize_endian_uint32_t+0x7a>
 80096c8:	4639      	mov	r1, r7
 80096ca:	4642      	mov	r2, r8
 80096cc:	4628      	mov	r0, r5
 80096ce:	f008 faed 	bl	8011cac <memcpy>
 80096d2:	68a1      	ldr	r1, [r4, #8]
 80096d4:	4652      	mov	r2, sl
 80096d6:	eb05 0008 	add.w	r0, r5, r8
 80096da:	f008 fae7 	bl	8011cac <memcpy>
 80096de:	e7a6      	b.n	800962e <ucdr_deserialize_endian_uint32_t+0x7a>

080096e0 <ucdr_serialize_uint64_t>:
 80096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e4:	2108      	movs	r1, #8
 80096e6:	b082      	sub	sp, #8
 80096e8:	4604      	mov	r4, r0
 80096ea:	e9cd 2300 	strd	r2, r3, [sp]
 80096ee:	f000 fb43 	bl	8009d78 <ucdr_buffer_alignment>
 80096f2:	4601      	mov	r1, r0
 80096f4:	4620      	mov	r0, r4
 80096f6:	7d67      	ldrb	r7, [r4, #21]
 80096f8:	f000 fb82 	bl	8009e00 <ucdr_advance_buffer>
 80096fc:	2108      	movs	r1, #8
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 fada 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8009704:	2800      	cmp	r0, #0
 8009706:	d14e      	bne.n	80097a6 <ucdr_serialize_uint64_t+0xc6>
 8009708:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800970c:	42ab      	cmp	r3, r5
 800970e:	d945      	bls.n	800979c <ucdr_serialize_uint64_t+0xbc>
 8009710:	1b5e      	subs	r6, r3, r5
 8009712:	60a3      	str	r3, [r4, #8]
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	f1c6 0808 	rsb	r8, r6, #8
 800971a:	4433      	add	r3, r6
 800971c:	6123      	str	r3, [r4, #16]
 800971e:	4641      	mov	r1, r8
 8009720:	4620      	mov	r0, r4
 8009722:	f000 fad5 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009726:	2800      	cmp	r0, #0
 8009728:	d074      	beq.n	8009814 <ucdr_serialize_uint64_t+0x134>
 800972a:	7d23      	ldrb	r3, [r4, #20]
 800972c:	2b01      	cmp	r3, #1
 800972e:	f000 809b 	beq.w	8009868 <ucdr_serialize_uint64_t+0x188>
 8009732:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009736:	702b      	strb	r3, [r5, #0]
 8009738:	2e00      	cmp	r6, #0
 800973a:	d078      	beq.n	800982e <ucdr_serialize_uint64_t+0x14e>
 800973c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009740:	706b      	strb	r3, [r5, #1]
 8009742:	2e01      	cmp	r6, #1
 8009744:	d077      	beq.n	8009836 <ucdr_serialize_uint64_t+0x156>
 8009746:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800974a:	70ab      	strb	r3, [r5, #2]
 800974c:	2e02      	cmp	r6, #2
 800974e:	d076      	beq.n	800983e <ucdr_serialize_uint64_t+0x15e>
 8009750:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009754:	70eb      	strb	r3, [r5, #3]
 8009756:	2e03      	cmp	r6, #3
 8009758:	d075      	beq.n	8009846 <ucdr_serialize_uint64_t+0x166>
 800975a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800975e:	712b      	strb	r3, [r5, #4]
 8009760:	2e04      	cmp	r6, #4
 8009762:	d074      	beq.n	800984e <ucdr_serialize_uint64_t+0x16e>
 8009764:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009768:	716b      	strb	r3, [r5, #5]
 800976a:	2e05      	cmp	r6, #5
 800976c:	d073      	beq.n	8009856 <ucdr_serialize_uint64_t+0x176>
 800976e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009772:	71ab      	strb	r3, [r5, #6]
 8009774:	2e06      	cmp	r6, #6
 8009776:	d072      	beq.n	800985e <ucdr_serialize_uint64_t+0x17e>
 8009778:	f89d 3000 	ldrb.w	r3, [sp]
 800977c:	71eb      	strb	r3, [r5, #7]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	68a2      	ldr	r2, [r4, #8]
 8009782:	7da0      	ldrb	r0, [r4, #22]
 8009784:	3308      	adds	r3, #8
 8009786:	1b9e      	subs	r6, r3, r6
 8009788:	4442      	add	r2, r8
 800978a:	2308      	movs	r3, #8
 800978c:	f080 0001 	eor.w	r0, r0, #1
 8009790:	60a2      	str	r2, [r4, #8]
 8009792:	6126      	str	r6, [r4, #16]
 8009794:	7563      	strb	r3, [r4, #21]
 8009796:	b002      	add	sp, #8
 8009798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800979c:	2108      	movs	r1, #8
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 fa96 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80097a4:	b350      	cbz	r0, 80097fc <ucdr_serialize_uint64_t+0x11c>
 80097a6:	7d23      	ldrb	r3, [r4, #20]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d02d      	beq.n	8009808 <ucdr_serialize_uint64_t+0x128>
 80097ac:	68a3      	ldr	r3, [r4, #8]
 80097ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	68a3      	ldr	r3, [r4, #8]
 80097b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80097ba:	705a      	strb	r2, [r3, #1]
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80097c2:	709a      	strb	r2, [r3, #2]
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097ca:	70da      	strb	r2, [r3, #3]
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80097d2:	711a      	strb	r2, [r3, #4]
 80097d4:	68a3      	ldr	r3, [r4, #8]
 80097d6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80097da:	715a      	strb	r2, [r3, #5]
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80097e2:	719a      	strb	r2, [r3, #6]
 80097e4:	68a3      	ldr	r3, [r4, #8]
 80097e6:	f89d 2000 	ldrb.w	r2, [sp]
 80097ea:	71da      	strb	r2, [r3, #7]
 80097ec:	68a2      	ldr	r2, [r4, #8]
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	3208      	adds	r2, #8
 80097f2:	3308      	adds	r3, #8
 80097f4:	2108      	movs	r1, #8
 80097f6:	60a2      	str	r2, [r4, #8]
 80097f8:	6123      	str	r3, [r4, #16]
 80097fa:	7561      	strb	r1, [r4, #21]
 80097fc:	7da0      	ldrb	r0, [r4, #22]
 80097fe:	f080 0001 	eor.w	r0, r0, #1
 8009802:	b002      	add	sp, #8
 8009804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009808:	466b      	mov	r3, sp
 800980a:	cb03      	ldmia	r3!, {r0, r1}
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	6018      	str	r0, [r3, #0]
 8009810:	6059      	str	r1, [r3, #4]
 8009812:	e7eb      	b.n	80097ec <ucdr_serialize_uint64_t+0x10c>
 8009814:	68a2      	ldr	r2, [r4, #8]
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	7da0      	ldrb	r0, [r4, #22]
 800981a:	7567      	strb	r7, [r4, #21]
 800981c:	1b92      	subs	r2, r2, r6
 800981e:	1b9b      	subs	r3, r3, r6
 8009820:	f080 0001 	eor.w	r0, r0, #1
 8009824:	60a2      	str	r2, [r4, #8]
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	b002      	add	sp, #8
 800982a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	68a3      	ldr	r3, [r4, #8]
 8009840:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	68a3      	ldr	r3, [r4, #8]
 8009858:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	f89d 2000 	ldrb.w	r2, [sp]
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	e78a      	b.n	800977e <ucdr_serialize_uint64_t+0x9e>
 8009868:	4628      	mov	r0, r5
 800986a:	466d      	mov	r5, sp
 800986c:	4629      	mov	r1, r5
 800986e:	4632      	mov	r2, r6
 8009870:	f008 fa1c 	bl	8011cac <memcpy>
 8009874:	68a0      	ldr	r0, [r4, #8]
 8009876:	4642      	mov	r2, r8
 8009878:	19a9      	adds	r1, r5, r6
 800987a:	f008 fa17 	bl	8011cac <memcpy>
 800987e:	e77e      	b.n	800977e <ucdr_serialize_uint64_t+0x9e>

08009880 <ucdr_serialize_int16_t>:
 8009880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	460b      	mov	r3, r1
 8009888:	2102      	movs	r1, #2
 800988a:	4604      	mov	r4, r0
 800988c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009890:	f000 fa72 	bl	8009d78 <ucdr_buffer_alignment>
 8009894:	4601      	mov	r1, r0
 8009896:	4620      	mov	r0, r4
 8009898:	7d67      	ldrb	r7, [r4, #21]
 800989a:	f000 fab1 	bl	8009e00 <ucdr_advance_buffer>
 800989e:	2102      	movs	r1, #2
 80098a0:	4620      	mov	r0, r4
 80098a2:	f000 fa09 	bl	8009cb8 <ucdr_check_buffer_available_for>
 80098a6:	bb78      	cbnz	r0, 8009908 <ucdr_serialize_int16_t+0x88>
 80098a8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80098ac:	42ab      	cmp	r3, r5
 80098ae:	d926      	bls.n	80098fe <ucdr_serialize_int16_t+0x7e>
 80098b0:	1b5e      	subs	r6, r3, r5
 80098b2:	60a3      	str	r3, [r4, #8]
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	f1c6 0802 	rsb	r8, r6, #2
 80098ba:	4433      	add	r3, r6
 80098bc:	6123      	str	r3, [r4, #16]
 80098be:	4641      	mov	r1, r8
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fa05 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d03b      	beq.n	8009942 <ucdr_serialize_int16_t+0xc2>
 80098ca:	7d23      	ldrb	r3, [r4, #20]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d04a      	beq.n	8009966 <ucdr_serialize_int16_t+0xe6>
 80098d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098d4:	702b      	strb	r3, [r5, #0]
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d040      	beq.n	800995c <ucdr_serialize_int16_t+0xdc>
 80098da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80098de:	706b      	strb	r3, [r5, #1]
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	68a2      	ldr	r2, [r4, #8]
 80098e4:	7da0      	ldrb	r0, [r4, #22]
 80098e6:	3302      	adds	r3, #2
 80098e8:	1b9e      	subs	r6, r3, r6
 80098ea:	4442      	add	r2, r8
 80098ec:	2302      	movs	r3, #2
 80098ee:	f080 0001 	eor.w	r0, r0, #1
 80098f2:	60a2      	str	r2, [r4, #8]
 80098f4:	6126      	str	r6, [r4, #16]
 80098f6:	7563      	strb	r3, [r4, #21]
 80098f8:	b002      	add	sp, #8
 80098fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fe:	2102      	movs	r1, #2
 8009900:	4620      	mov	r0, r4
 8009902:	f000 f9e5 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009906:	b190      	cbz	r0, 800992e <ucdr_serialize_int16_t+0xae>
 8009908:	7d23      	ldrb	r3, [r4, #20]
 800990a:	2b01      	cmp	r3, #1
 800990c:	68a3      	ldr	r3, [r4, #8]
 800990e:	d014      	beq.n	800993a <ucdr_serialize_int16_t+0xba>
 8009910:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	68a3      	ldr	r3, [r4, #8]
 8009918:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800991c:	705a      	strb	r2, [r3, #1]
 800991e:	68a2      	ldr	r2, [r4, #8]
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	3202      	adds	r2, #2
 8009924:	3302      	adds	r3, #2
 8009926:	2102      	movs	r1, #2
 8009928:	60a2      	str	r2, [r4, #8]
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	7561      	strb	r1, [r4, #21]
 800992e:	7da0      	ldrb	r0, [r4, #22]
 8009930:	f080 0001 	eor.w	r0, r0, #1
 8009934:	b002      	add	sp, #8
 8009936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	e7ed      	b.n	800991e <ucdr_serialize_int16_t+0x9e>
 8009942:	68a2      	ldr	r2, [r4, #8]
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	7da0      	ldrb	r0, [r4, #22]
 8009948:	7567      	strb	r7, [r4, #21]
 800994a:	1b92      	subs	r2, r2, r6
 800994c:	1b9b      	subs	r3, r3, r6
 800994e:	f080 0001 	eor.w	r0, r0, #1
 8009952:	60a2      	str	r2, [r4, #8]
 8009954:	6123      	str	r3, [r4, #16]
 8009956:	b002      	add	sp, #8
 8009958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800995c:	68a3      	ldr	r3, [r4, #8]
 800995e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009962:	701a      	strb	r2, [r3, #0]
 8009964:	e7bc      	b.n	80098e0 <ucdr_serialize_int16_t+0x60>
 8009966:	4628      	mov	r0, r5
 8009968:	f10d 0506 	add.w	r5, sp, #6
 800996c:	4629      	mov	r1, r5
 800996e:	4632      	mov	r2, r6
 8009970:	f008 f99c 	bl	8011cac <memcpy>
 8009974:	68a0      	ldr	r0, [r4, #8]
 8009976:	4642      	mov	r2, r8
 8009978:	19a9      	adds	r1, r5, r6
 800997a:	f008 f997 	bl	8011cac <memcpy>
 800997e:	e7af      	b.n	80098e0 <ucdr_serialize_int16_t+0x60>

08009980 <ucdr_deserialize_int16_t>:
 8009980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009984:	460d      	mov	r5, r1
 8009986:	2102      	movs	r1, #2
 8009988:	4604      	mov	r4, r0
 800998a:	f000 f9f5 	bl	8009d78 <ucdr_buffer_alignment>
 800998e:	4601      	mov	r1, r0
 8009990:	4620      	mov	r0, r4
 8009992:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009996:	f000 fa33 	bl	8009e00 <ucdr_advance_buffer>
 800999a:	2102      	movs	r1, #2
 800999c:	4620      	mov	r0, r4
 800999e:	f000 f98b 	bl	8009cb8 <ucdr_check_buffer_available_for>
 80099a2:	bb60      	cbnz	r0, 80099fe <ucdr_deserialize_int16_t+0x7e>
 80099a4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80099a8:	42be      	cmp	r6, r7
 80099aa:	d923      	bls.n	80099f4 <ucdr_deserialize_int16_t+0x74>
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	60a6      	str	r6, [r4, #8]
 80099b0:	1bf6      	subs	r6, r6, r7
 80099b2:	4433      	add	r3, r6
 80099b4:	f1c6 0902 	rsb	r9, r6, #2
 80099b8:	6123      	str	r3, [r4, #16]
 80099ba:	4649      	mov	r1, r9
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 f987 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d034      	beq.n	8009a30 <ucdr_deserialize_int16_t+0xb0>
 80099c6:	7d23      	ldrb	r3, [r4, #20]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d042      	beq.n	8009a52 <ucdr_deserialize_int16_t+0xd2>
 80099cc:	787b      	ldrb	r3, [r7, #1]
 80099ce:	702b      	strb	r3, [r5, #0]
 80099d0:	2e00      	cmp	r6, #0
 80099d2:	d03a      	beq.n	8009a4a <ucdr_deserialize_int16_t+0xca>
 80099d4:	783b      	ldrb	r3, [r7, #0]
 80099d6:	706b      	strb	r3, [r5, #1]
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	68a2      	ldr	r2, [r4, #8]
 80099dc:	7da0      	ldrb	r0, [r4, #22]
 80099de:	2102      	movs	r1, #2
 80099e0:	3302      	adds	r3, #2
 80099e2:	444a      	add	r2, r9
 80099e4:	1b9b      	subs	r3, r3, r6
 80099e6:	7561      	strb	r1, [r4, #21]
 80099e8:	60a2      	str	r2, [r4, #8]
 80099ea:	6123      	str	r3, [r4, #16]
 80099ec:	f080 0001 	eor.w	r0, r0, #1
 80099f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f4:	2102      	movs	r1, #2
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 f96a 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 80099fc:	b180      	cbz	r0, 8009a20 <ucdr_deserialize_int16_t+0xa0>
 80099fe:	7d23      	ldrb	r3, [r4, #20]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	d011      	beq.n	8009a2a <ucdr_deserialize_int16_t+0xaa>
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	702b      	strb	r3, [r5, #0]
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	706b      	strb	r3, [r5, #1]
 8009a10:	68a2      	ldr	r2, [r4, #8]
 8009a12:	6923      	ldr	r3, [r4, #16]
 8009a14:	3202      	adds	r2, #2
 8009a16:	3302      	adds	r3, #2
 8009a18:	2102      	movs	r1, #2
 8009a1a:	60a2      	str	r2, [r4, #8]
 8009a1c:	6123      	str	r3, [r4, #16]
 8009a1e:	7561      	strb	r1, [r4, #21]
 8009a20:	7da0      	ldrb	r0, [r4, #22]
 8009a22:	f080 0001 	eor.w	r0, r0, #1
 8009a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	802b      	strh	r3, [r5, #0]
 8009a2e:	e7ef      	b.n	8009a10 <ucdr_deserialize_int16_t+0x90>
 8009a30:	68a2      	ldr	r2, [r4, #8]
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	7da0      	ldrb	r0, [r4, #22]
 8009a36:	f884 8015 	strb.w	r8, [r4, #21]
 8009a3a:	1b92      	subs	r2, r2, r6
 8009a3c:	1b9b      	subs	r3, r3, r6
 8009a3e:	60a2      	str	r2, [r4, #8]
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	f080 0001 	eor.w	r0, r0, #1
 8009a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	706b      	strb	r3, [r5, #1]
 8009a50:	e7c2      	b.n	80099d8 <ucdr_deserialize_int16_t+0x58>
 8009a52:	4639      	mov	r1, r7
 8009a54:	4632      	mov	r2, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	f008 f928 	bl	8011cac <memcpy>
 8009a5c:	68a1      	ldr	r1, [r4, #8]
 8009a5e:	464a      	mov	r2, r9
 8009a60:	19a8      	adds	r0, r5, r6
 8009a62:	f008 f923 	bl	8011cac <memcpy>
 8009a66:	e7b7      	b.n	80099d8 <ucdr_deserialize_int16_t+0x58>

08009a68 <ucdr_serialize_int32_t>:
 8009a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	4604      	mov	r4, r0
 8009a70:	9101      	str	r1, [sp, #4]
 8009a72:	2104      	movs	r1, #4
 8009a74:	f000 f980 	bl	8009d78 <ucdr_buffer_alignment>
 8009a78:	4601      	mov	r1, r0
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	7d67      	ldrb	r7, [r4, #21]
 8009a7e:	f000 f9bf 	bl	8009e00 <ucdr_advance_buffer>
 8009a82:	2104      	movs	r1, #4
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 f917 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d139      	bne.n	8009b02 <ucdr_serialize_int32_t+0x9a>
 8009a8e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009a92:	42ab      	cmp	r3, r5
 8009a94:	d930      	bls.n	8009af8 <ucdr_serialize_int32_t+0x90>
 8009a96:	1b5e      	subs	r6, r3, r5
 8009a98:	60a3      	str	r3, [r4, #8]
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	f1c6 0804 	rsb	r8, r6, #4
 8009aa0:	4433      	add	r3, r6
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 f912 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d04c      	beq.n	8009b4a <ucdr_serialize_int32_t+0xe2>
 8009ab0:	7d23      	ldrb	r3, [r4, #20]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d063      	beq.n	8009b7e <ucdr_serialize_int32_t+0x116>
 8009ab6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009aba:	702b      	strb	r3, [r5, #0]
 8009abc:	2e00      	cmp	r6, #0
 8009abe:	d051      	beq.n	8009b64 <ucdr_serialize_int32_t+0xfc>
 8009ac0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009ac4:	706b      	strb	r3, [r5, #1]
 8009ac6:	2e01      	cmp	r6, #1
 8009ac8:	d050      	beq.n	8009b6c <ucdr_serialize_int32_t+0x104>
 8009aca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009ace:	70ab      	strb	r3, [r5, #2]
 8009ad0:	2e02      	cmp	r6, #2
 8009ad2:	d04f      	beq.n	8009b74 <ucdr_serialize_int32_t+0x10c>
 8009ad4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009ad8:	70eb      	strb	r3, [r5, #3]
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	68a2      	ldr	r2, [r4, #8]
 8009ade:	7da0      	ldrb	r0, [r4, #22]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	1b9e      	subs	r6, r3, r6
 8009ae4:	4442      	add	r2, r8
 8009ae6:	2304      	movs	r3, #4
 8009ae8:	f080 0001 	eor.w	r0, r0, #1
 8009aec:	60a2      	str	r2, [r4, #8]
 8009aee:	6126      	str	r6, [r4, #16]
 8009af0:	7563      	strb	r3, [r4, #21]
 8009af2:	b002      	add	sp, #8
 8009af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af8:	2104      	movs	r1, #4
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 f8e8 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009b00:	b1d0      	cbz	r0, 8009b38 <ucdr_serialize_int32_t+0xd0>
 8009b02:	7d23      	ldrb	r3, [r4, #20]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	d01c      	beq.n	8009b44 <ucdr_serialize_int32_t+0xdc>
 8009b0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	68a3      	ldr	r3, [r4, #8]
 8009b12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009b16:	705a      	strb	r2, [r3, #1]
 8009b18:	68a3      	ldr	r3, [r4, #8]
 8009b1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b1e:	709a      	strb	r2, [r3, #2]
 8009b20:	68a3      	ldr	r3, [r4, #8]
 8009b22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b26:	70da      	strb	r2, [r3, #3]
 8009b28:	68a2      	ldr	r2, [r4, #8]
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	3204      	adds	r2, #4
 8009b2e:	3304      	adds	r3, #4
 8009b30:	2104      	movs	r1, #4
 8009b32:	60a2      	str	r2, [r4, #8]
 8009b34:	6123      	str	r3, [r4, #16]
 8009b36:	7561      	strb	r1, [r4, #21]
 8009b38:	7da0      	ldrb	r0, [r4, #22]
 8009b3a:	f080 0001 	eor.w	r0, r0, #1
 8009b3e:	b002      	add	sp, #8
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b44:	9a01      	ldr	r2, [sp, #4]
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	e7ee      	b.n	8009b28 <ucdr_serialize_int32_t+0xc0>
 8009b4a:	68a2      	ldr	r2, [r4, #8]
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	7da0      	ldrb	r0, [r4, #22]
 8009b50:	7567      	strb	r7, [r4, #21]
 8009b52:	1b92      	subs	r2, r2, r6
 8009b54:	1b9b      	subs	r3, r3, r6
 8009b56:	f080 0001 	eor.w	r0, r0, #1
 8009b5a:	60a2      	str	r2, [r4, #8]
 8009b5c:	6123      	str	r3, [r4, #16]
 8009b5e:	b002      	add	sp, #8
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	68a3      	ldr	r3, [r4, #8]
 8009b66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	68a3      	ldr	r3, [r4, #8]
 8009b6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b72:	701a      	strb	r2, [r3, #0]
 8009b74:	68a3      	ldr	r3, [r4, #8]
 8009b76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b7a:	701a      	strb	r2, [r3, #0]
 8009b7c:	e7ad      	b.n	8009ada <ucdr_serialize_int32_t+0x72>
 8009b7e:	4628      	mov	r0, r5
 8009b80:	ad01      	add	r5, sp, #4
 8009b82:	4629      	mov	r1, r5
 8009b84:	4632      	mov	r2, r6
 8009b86:	f008 f891 	bl	8011cac <memcpy>
 8009b8a:	68a0      	ldr	r0, [r4, #8]
 8009b8c:	4642      	mov	r2, r8
 8009b8e:	19a9      	adds	r1, r5, r6
 8009b90:	f008 f88c 	bl	8011cac <memcpy>
 8009b94:	e7a1      	b.n	8009ada <ucdr_serialize_int32_t+0x72>
 8009b96:	bf00      	nop

08009b98 <ucdr_deserialize_int32_t>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	2104      	movs	r1, #4
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	f000 f8e9 	bl	8009d78 <ucdr_buffer_alignment>
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009bae:	f000 f927 	bl	8009e00 <ucdr_advance_buffer>
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 f87f 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d138      	bne.n	8009c30 <ucdr_deserialize_int32_t+0x98>
 8009bbe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009bc2:	42b7      	cmp	r7, r6
 8009bc4:	d92f      	bls.n	8009c26 <ucdr_deserialize_int32_t+0x8e>
 8009bc6:	6923      	ldr	r3, [r4, #16]
 8009bc8:	60a7      	str	r7, [r4, #8]
 8009bca:	1bbf      	subs	r7, r7, r6
 8009bcc:	443b      	add	r3, r7
 8009bce:	f1c7 0904 	rsb	r9, r7, #4
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 f87a 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d046      	beq.n	8009c6e <ucdr_deserialize_int32_t+0xd6>
 8009be0:	7d23      	ldrb	r3, [r4, #20]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d05c      	beq.n	8009ca0 <ucdr_deserialize_int32_t+0x108>
 8009be6:	78f3      	ldrb	r3, [r6, #3]
 8009be8:	702b      	strb	r3, [r5, #0]
 8009bea:	2f00      	cmp	r7, #0
 8009bec:	d04c      	beq.n	8009c88 <ucdr_deserialize_int32_t+0xf0>
 8009bee:	78b3      	ldrb	r3, [r6, #2]
 8009bf0:	706b      	strb	r3, [r5, #1]
 8009bf2:	2f01      	cmp	r7, #1
 8009bf4:	f105 0302 	add.w	r3, r5, #2
 8009bf8:	d04a      	beq.n	8009c90 <ucdr_deserialize_int32_t+0xf8>
 8009bfa:	7873      	ldrb	r3, [r6, #1]
 8009bfc:	70ab      	strb	r3, [r5, #2]
 8009bfe:	2f02      	cmp	r7, #2
 8009c00:	f105 0303 	add.w	r3, r5, #3
 8009c04:	d048      	beq.n	8009c98 <ucdr_deserialize_int32_t+0x100>
 8009c06:	7833      	ldrb	r3, [r6, #0]
 8009c08:	70eb      	strb	r3, [r5, #3]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	68a2      	ldr	r2, [r4, #8]
 8009c0e:	7da0      	ldrb	r0, [r4, #22]
 8009c10:	2104      	movs	r1, #4
 8009c12:	3304      	adds	r3, #4
 8009c14:	444a      	add	r2, r9
 8009c16:	1bdb      	subs	r3, r3, r7
 8009c18:	7561      	strb	r1, [r4, #21]
 8009c1a:	60a2      	str	r2, [r4, #8]
 8009c1c:	6123      	str	r3, [r4, #16]
 8009c1e:	f080 0001 	eor.w	r0, r0, #1
 8009c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c26:	2104      	movs	r1, #4
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 f851 	bl	8009cd0 <ucdr_check_final_buffer_behavior>
 8009c2e:	b1b0      	cbz	r0, 8009c5e <ucdr_deserialize_int32_t+0xc6>
 8009c30:	7d23      	ldrb	r3, [r4, #20]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	68a3      	ldr	r3, [r4, #8]
 8009c36:	d017      	beq.n	8009c68 <ucdr_deserialize_int32_t+0xd0>
 8009c38:	78db      	ldrb	r3, [r3, #3]
 8009c3a:	702b      	strb	r3, [r5, #0]
 8009c3c:	68a3      	ldr	r3, [r4, #8]
 8009c3e:	789b      	ldrb	r3, [r3, #2]
 8009c40:	706b      	strb	r3, [r5, #1]
 8009c42:	68a3      	ldr	r3, [r4, #8]
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	70ab      	strb	r3, [r5, #2]
 8009c48:	68a3      	ldr	r3, [r4, #8]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	70eb      	strb	r3, [r5, #3]
 8009c4e:	68a2      	ldr	r2, [r4, #8]
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	3204      	adds	r2, #4
 8009c54:	3304      	adds	r3, #4
 8009c56:	2104      	movs	r1, #4
 8009c58:	60a2      	str	r2, [r4, #8]
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	7561      	strb	r1, [r4, #21]
 8009c5e:	7da0      	ldrb	r0, [r4, #22]
 8009c60:	f080 0001 	eor.w	r0, r0, #1
 8009c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	e7ef      	b.n	8009c4e <ucdr_deserialize_int32_t+0xb6>
 8009c6e:	68a2      	ldr	r2, [r4, #8]
 8009c70:	6923      	ldr	r3, [r4, #16]
 8009c72:	7da0      	ldrb	r0, [r4, #22]
 8009c74:	f884 8015 	strb.w	r8, [r4, #21]
 8009c78:	1bd2      	subs	r2, r2, r7
 8009c7a:	1bdb      	subs	r3, r3, r7
 8009c7c:	60a2      	str	r2, [r4, #8]
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	f080 0001 	eor.w	r0, r0, #1
 8009c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c88:	68a3      	ldr	r3, [r4, #8]
 8009c8a:	789b      	ldrb	r3, [r3, #2]
 8009c8c:	706b      	strb	r3, [r5, #1]
 8009c8e:	1cab      	adds	r3, r5, #2
 8009c90:	68a2      	ldr	r2, [r4, #8]
 8009c92:	7852      	ldrb	r2, [r2, #1]
 8009c94:	f803 2b01 	strb.w	r2, [r3], #1
 8009c98:	68a2      	ldr	r2, [r4, #8]
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	e7b4      	b.n	8009c0a <ucdr_deserialize_int32_t+0x72>
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	463a      	mov	r2, r7
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f008 f801 	bl	8011cac <memcpy>
 8009caa:	68a1      	ldr	r1, [r4, #8]
 8009cac:	464a      	mov	r2, r9
 8009cae:	19e8      	adds	r0, r5, r7
 8009cb0:	f007 fffc 	bl	8011cac <memcpy>
 8009cb4:	e7a9      	b.n	8009c0a <ucdr_deserialize_int32_t+0x72>
 8009cb6:	bf00      	nop

08009cb8 <ucdr_check_buffer_available_for>:
 8009cb8:	7d83      	ldrb	r3, [r0, #22]
 8009cba:	b93b      	cbnz	r3, 8009ccc <ucdr_check_buffer_available_for+0x14>
 8009cbc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009cc0:	4419      	add	r1, r3
 8009cc2:	4288      	cmp	r0, r1
 8009cc4:	bf34      	ite	cc
 8009cc6:	2000      	movcc	r0, #0
 8009cc8:	2001      	movcs	r0, #1
 8009cca:	4770      	bx	lr
 8009ccc:	2000      	movs	r0, #0
 8009cce:	4770      	bx	lr

08009cd0 <ucdr_check_final_buffer_behavior>:
 8009cd0:	7d83      	ldrb	r3, [r0, #22]
 8009cd2:	b943      	cbnz	r3, 8009ce6 <ucdr_check_final_buffer_behavior+0x16>
 8009cd4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009cd8:	4291      	cmp	r1, r2
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	4604      	mov	r4, r0
 8009cde:	d205      	bcs.n	8009cec <ucdr_check_final_buffer_behavior+0x1c>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	4770      	bx	lr
 8009cec:	6982      	ldr	r2, [r0, #24]
 8009cee:	b13a      	cbz	r2, 8009d00 <ucdr_check_final_buffer_behavior+0x30>
 8009cf0:	69c1      	ldr	r1, [r0, #28]
 8009cf2:	4790      	blx	r2
 8009cf4:	f080 0301 	eor.w	r3, r0, #1
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	75a0      	strb	r0, [r4, #22]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	bd10      	pop	{r4, pc}
 8009d00:	2001      	movs	r0, #1
 8009d02:	75a0      	strb	r0, [r4, #22]
 8009d04:	e7fa      	b.n	8009cfc <ucdr_check_final_buffer_behavior+0x2c>
 8009d06:	bf00      	nop

08009d08 <ucdr_set_on_full_buffer_callback>:
 8009d08:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop

08009d10 <ucdr_init_buffer_origin_offset_endian>:
 8009d10:	b410      	push	{r4}
 8009d12:	9c01      	ldr	r4, [sp, #4]
 8009d14:	6001      	str	r1, [r0, #0]
 8009d16:	440a      	add	r2, r1
 8009d18:	6042      	str	r2, [r0, #4]
 8009d1a:	190a      	adds	r2, r1, r4
 8009d1c:	441c      	add	r4, r3
 8009d1e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009d22:	6082      	str	r2, [r0, #8]
 8009d24:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009d28:	7503      	strb	r3, [r0, #20]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d34:	7542      	strb	r2, [r0, #21]
 8009d36:	7582      	strb	r2, [r0, #22]
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop

08009d3c <ucdr_init_buffer_origin_offset>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	9c04      	ldr	r4, [sp, #16]
 8009d42:	9400      	str	r4, [sp, #0]
 8009d44:	2401      	movs	r4, #1
 8009d46:	9401      	str	r4, [sp, #4]
 8009d48:	f7ff ffe2 	bl	8009d10 <ucdr_init_buffer_origin_offset_endian>
 8009d4c:	b002      	add	sp, #8
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <ucdr_init_buffer_origin>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	2400      	movs	r4, #0
 8009d56:	9400      	str	r4, [sp, #0]
 8009d58:	f7ff fff0 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 8009d5c:	b002      	add	sp, #8
 8009d5e:	bd10      	pop	{r4, pc}

08009d60 <ucdr_init_buffer>:
 8009d60:	2300      	movs	r3, #0
 8009d62:	f7ff bff5 	b.w	8009d50 <ucdr_init_buffer_origin>
 8009d66:	bf00      	nop

08009d68 <ucdr_alignment>:
 8009d68:	fbb0 f3f1 	udiv	r3, r0, r1
 8009d6c:	fb03 0011 	mls	r0, r3, r1, r0
 8009d70:	1a08      	subs	r0, r1, r0
 8009d72:	3901      	subs	r1, #1
 8009d74:	4008      	ands	r0, r1
 8009d76:	4770      	bx	lr

08009d78 <ucdr_buffer_alignment>:
 8009d78:	7d43      	ldrb	r3, [r0, #21]
 8009d7a:	428b      	cmp	r3, r1
 8009d7c:	d208      	bcs.n	8009d90 <ucdr_buffer_alignment+0x18>
 8009d7e:	6900      	ldr	r0, [r0, #16]
 8009d80:	fbb0 f3f1 	udiv	r3, r0, r1
 8009d84:	fb01 0013 	mls	r0, r1, r3, r0
 8009d88:	1a08      	subs	r0, r1, r0
 8009d8a:	3901      	subs	r1, #1
 8009d8c:	4008      	ands	r0, r1
 8009d8e:	4770      	bx	lr
 8009d90:	2000      	movs	r0, #0
 8009d92:	4770      	bx	lr

08009d94 <ucdr_align_to>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	f7ff ffed 	bl	8009d78 <ucdr_buffer_alignment>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	6921      	ldr	r1, [r4, #16]
 8009da2:	7565      	strb	r5, [r4, #21]
 8009da4:	181a      	adds	r2, r3, r0
 8009da6:	6863      	ldr	r3, [r4, #4]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	4408      	add	r0, r1
 8009dac:	bf28      	it	cs
 8009dae:	4613      	movcs	r3, r2
 8009db0:	6120      	str	r0, [r4, #16]
 8009db2:	60a3      	str	r3, [r4, #8]
 8009db4:	bd38      	pop	{r3, r4, r5, pc}
 8009db6:	bf00      	nop

08009db8 <ucdr_buffer_length>:
 8009db8:	6882      	ldr	r2, [r0, #8]
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	1a10      	subs	r0, r2, r0
 8009dbe:	4770      	bx	lr

08009dc0 <ucdr_buffer_remaining>:
 8009dc0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009dc4:	1a10      	subs	r0, r2, r0
 8009dc6:	4770      	bx	lr

08009dc8 <ucdr_check_final_buffer_behavior_array>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	7d83      	ldrb	r3, [r0, #22]
 8009dcc:	b963      	cbnz	r3, 8009de8 <ucdr_check_final_buffer_behavior_array+0x20>
 8009dce:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	d308      	bcc.n	8009dec <ucdr_check_final_buffer_behavior_array+0x24>
 8009dda:	b139      	cbz	r1, 8009dec <ucdr_check_final_buffer_behavior_array+0x24>
 8009ddc:	6983      	ldr	r3, [r0, #24]
 8009dde:	b163      	cbz	r3, 8009dfa <ucdr_check_final_buffer_behavior_array+0x32>
 8009de0:	69c1      	ldr	r1, [r0, #28]
 8009de2:	4798      	blx	r3
 8009de4:	75a0      	strb	r0, [r4, #22]
 8009de6:	b108      	cbz	r0, 8009dec <ucdr_check_final_buffer_behavior_array+0x24>
 8009de8:	2000      	movs	r0, #0
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff ffe7 	bl	8009dc0 <ucdr_buffer_remaining>
 8009df2:	42a8      	cmp	r0, r5
 8009df4:	bf28      	it	cs
 8009df6:	4628      	movcs	r0, r5
 8009df8:	bd38      	pop	{r3, r4, r5, pc}
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	7583      	strb	r3, [r0, #22]
 8009dfe:	e7f3      	b.n	8009de8 <ucdr_check_final_buffer_behavior_array+0x20>

08009e00 <ucdr_advance_buffer>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4604      	mov	r4, r0
 8009e04:	460d      	mov	r5, r1
 8009e06:	f7ff ff57 	bl	8009cb8 <ucdr_check_buffer_available_for>
 8009e0a:	b178      	cbz	r0, 8009e2c <ucdr_advance_buffer+0x2c>
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	68a2      	ldr	r2, [r4, #8]
 8009e10:	442b      	add	r3, r5
 8009e12:	6123      	str	r3, [r4, #16]
 8009e14:	2301      	movs	r3, #1
 8009e16:	442a      	add	r2, r5
 8009e18:	7563      	strb	r3, [r4, #21]
 8009e1a:	60a2      	str	r2, [r4, #8]
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
 8009e1e:	68a2      	ldr	r2, [r4, #8]
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	4402      	add	r2, r0
 8009e24:	4403      	add	r3, r0
 8009e26:	1a2d      	subs	r5, r5, r0
 8009e28:	60a2      	str	r2, [r4, #8]
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4620      	mov	r0, r4
 8009e32:	f7ff ffc9 	bl	8009dc8 <ucdr_check_final_buffer_behavior_array>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d1f1      	bne.n	8009e1e <ucdr_advance_buffer+0x1e>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	7563      	strb	r3, [r4, #21]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}

08009e40 <uxr_buffer_delete_entity>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	2300      	movs	r3, #0
 8009e44:	b08e      	sub	sp, #56	; 0x38
 8009e46:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	2204      	movs	r2, #4
 8009e50:	ab06      	add	r3, sp, #24
 8009e52:	4604      	mov	r4, r0
 8009e54:	9103      	str	r1, [sp, #12]
 8009e56:	f001 f917 	bl	800b088 <uxr_prepare_stream_to_write_submessage>
 8009e5a:	b918      	cbnz	r0, 8009e64 <uxr_buffer_delete_entity+0x24>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4620      	mov	r0, r4
 8009e60:	b00e      	add	sp, #56	; 0x38
 8009e62:	bd10      	pop	{r4, pc}
 8009e64:	9902      	ldr	r1, [sp, #8]
 8009e66:	aa05      	add	r2, sp, #20
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f001 fa43 	bl	800b2f4 <uxr_init_base_object_request>
 8009e6e:	a905      	add	r1, sp, #20
 8009e70:	4604      	mov	r4, r0
 8009e72:	a806      	add	r0, sp, #24
 8009e74:	f002 fc94 	bl	800c7a0 <uxr_serialize_DELETE_Payload>
 8009e78:	4620      	mov	r0, r4
 8009e7a:	b00e      	add	sp, #56	; 0x38
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	bf00      	nop

08009e80 <uxr_common_create_entity>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8009e86:	b08c      	sub	sp, #48	; 0x30
 8009e88:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009e8c:	f1bc 0f01 	cmp.w	ip, #1
 8009e90:	bf0c      	ite	eq
 8009e92:	f003 0201 	andeq.w	r2, r3, #1
 8009e96:	2200      	movne	r2, #0
 8009e98:	330e      	adds	r3, #14
 8009e9a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8009e9e:	9101      	str	r1, [sp, #4]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	9903      	ldr	r1, [sp, #12]
 8009ea8:	ab04      	add	r3, sp, #16
 8009eaa:	b292      	uxth	r2, r2
 8009eac:	4604      	mov	r4, r0
 8009eae:	f001 f8eb 	bl	800b088 <uxr_prepare_stream_to_write_submessage>
 8009eb2:	b918      	cbnz	r0, 8009ebc <uxr_common_create_entity+0x3c>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	b00c      	add	sp, #48	; 0x30
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	9902      	ldr	r1, [sp, #8]
 8009ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 fa17 	bl	800b2f4 <uxr_init_base_object_request>
 8009ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ec8:	4604      	mov	r4, r0
 8009eca:	a804      	add	r0, sp, #16
 8009ecc:	f002 fbc4 	bl	800c658 <uxr_serialize_CREATE_Payload>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	b00c      	add	sp, #48	; 0x30
 8009ed4:	bd10      	pop	{r4, pc}
 8009ed6:	bf00      	nop

08009ed8 <uxr_buffer_create_participant_bin>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8009ede:	ac11      	add	r4, sp, #68	; 0x44
 8009ee0:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009eea:	7223      	strb	r3, [r4, #8]
 8009eec:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8009eee:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	7122      	strb	r2, [r4, #4]
 8009efa:	f88d 1014 	strb.w	r1, [sp, #20]
 8009efe:	b1cb      	cbz	r3, 8009f34 <uxr_buffer_create_participant_bin+0x5c>
 8009f00:	f88d 201c 	strb.w	r2, [sp, #28]
 8009f04:	9308      	str	r3, [sp, #32]
 8009f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f0a:	a915      	add	r1, sp, #84	; 0x54
 8009f0c:	a809      	add	r0, sp, #36	; 0x24
 8009f0e:	f7ff ff27 	bl	8009d60 <ucdr_init_buffer>
 8009f12:	a905      	add	r1, sp, #20
 8009f14:	a809      	add	r0, sp, #36	; 0x24
 8009f16:	f001 ff81 	bl	800be1c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1c:	9600      	str	r6, [sp, #0]
 8009f1e:	9401      	str	r4, [sp, #4]
 8009f20:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f24:	60e3      	str	r3, [r4, #12]
 8009f26:	4628      	mov	r0, r5
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	f7ff ffa9 	bl	8009e80 <uxr_common_create_entity>
 8009f2e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	f88d 301c 	strb.w	r3, [sp, #28]
 8009f38:	e7e5      	b.n	8009f06 <uxr_buffer_create_participant_bin+0x2e>
 8009f3a:	bf00      	nop

08009f3c <uxr_buffer_create_topic_bin>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8009f42:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009f46:	9105      	str	r1, [sp, #20]
 8009f48:	4605      	mov	r5, r0
 8009f4a:	a997      	add	r1, sp, #604	; 0x25c
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	2302      	movs	r3, #2
 8009f50:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8009f54:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8009f58:	f000 f996 	bl	800a288 <uxr_object_id_to_raw>
 8009f5c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8009f5e:	9306      	str	r3, [sp, #24]
 8009f60:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8009f62:	930a      	str	r3, [sp, #40]	; 0x28
 8009f64:	2303      	movs	r3, #3
 8009f66:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009f74:	a917      	add	r1, sp, #92	; 0x5c
 8009f76:	2300      	movs	r3, #0
 8009f78:	a80b      	add	r0, sp, #44	; 0x2c
 8009f7a:	f88d 301c 	strb.w	r3, [sp, #28]
 8009f7e:	f7ff feef 	bl	8009d60 <ucdr_init_buffer>
 8009f82:	a906      	add	r1, sp, #24
 8009f84:	a80b      	add	r0, sp, #44	; 0x2c
 8009f86:	f001 ff6b 	bl	800be60 <uxr_serialize_OBJK_Topic_Binary>
 8009f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f8c:	9316      	str	r3, [sp, #88]	; 0x58
 8009f8e:	ac13      	add	r4, sp, #76	; 0x4c
 8009f90:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009f94:	9600      	str	r6, [sp, #0]
 8009f96:	9401      	str	r4, [sp, #4]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f7ff ff70 	bl	8009e80 <uxr_common_create_entity>
 8009fa0:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8009fa4:	bd70      	pop	{r4, r5, r6, pc}
 8009fa6:	bf00      	nop

08009fa8 <uxr_buffer_create_publisher_bin>:
 8009fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009faa:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8009fae:	4605      	mov	r5, r0
 8009fb0:	9105      	str	r1, [sp, #20]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	2603      	movs	r6, #3
 8009fb6:	a992      	add	r1, sp, #584	; 0x248
 8009fb8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009fbc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8009fc0:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8009fc4:	f000 f960 	bl	800a288 <uxr_object_id_to_raw>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fce:	a912      	add	r1, sp, #72	; 0x48
 8009fd0:	a806      	add	r0, sp, #24
 8009fd2:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8009fd6:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8009fda:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8009fde:	f7ff febf 	bl	8009d60 <ucdr_init_buffer>
 8009fe2:	a993      	add	r1, sp, #588	; 0x24c
 8009fe4:	a806      	add	r0, sp, #24
 8009fe6:	f001 ffef 	bl	800bfc8 <uxr_serialize_OBJK_Publisher_Binary>
 8009fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fec:	9311      	str	r3, [sp, #68]	; 0x44
 8009fee:	ac0e      	add	r4, sp, #56	; 0x38
 8009ff0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009ff4:	9700      	str	r7, [sp, #0]
 8009ff6:	9401      	str	r4, [sp, #4]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f7ff ff40 	bl	8009e80 <uxr_common_create_entity>
 800a000:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800a004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a006:	bf00      	nop

0800a008 <uxr_buffer_create_subscriber_bin>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800a00e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a012:	9105      	str	r1, [sp, #20]
 800a014:	4605      	mov	r5, r0
 800a016:	a992      	add	r1, sp, #584	; 0x248
 800a018:	4618      	mov	r0, r3
 800a01a:	2304      	movs	r3, #4
 800a01c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800a020:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800a024:	f000 f930 	bl	800a288 <uxr_object_id_to_raw>
 800a028:	2300      	movs	r3, #0
 800a02a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a02e:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800a032:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800a036:	a912      	add	r1, sp, #72	; 0x48
 800a038:	2303      	movs	r3, #3
 800a03a:	a806      	add	r0, sp, #24
 800a03c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800a040:	f7ff fe8e 	bl	8009d60 <ucdr_init_buffer>
 800a044:	a993      	add	r1, sp, #588	; 0x24c
 800a046:	a806      	add	r0, sp, #24
 800a048:	f002 f86e 	bl	800c128 <uxr_serialize_OBJK_Subscriber_Binary>
 800a04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04e:	9311      	str	r3, [sp, #68]	; 0x44
 800a050:	ac0e      	add	r4, sp, #56	; 0x38
 800a052:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a056:	9600      	str	r6, [sp, #0]
 800a058:	9401      	str	r4, [sp, #4]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4628      	mov	r0, r5
 800a05e:	f7ff ff0f 	bl	8009e80 <uxr_common_create_entity>
 800a062:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800a066:	bd70      	pop	{r4, r5, r6, pc}

0800a068 <uxr_buffer_create_datawriter_bin>:
 800a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a070:	ac1d      	add	r4, sp, #116	; 0x74
 800a072:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a076:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800a07a:	9105      	str	r1, [sp, #20]
 800a07c:	4606      	mov	r6, r0
 800a07e:	a9a1      	add	r1, sp, #644	; 0x284
 800a080:	4618      	mov	r0, r3
 800a082:	2305      	movs	r3, #5
 800a084:	7123      	strb	r3, [r4, #4]
 800a086:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800a08a:	2703      	movs	r7, #3
 800a08c:	f000 f8fc 	bl	800a288 <uxr_object_id_to_raw>
 800a090:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800a092:	7227      	strb	r7, [r4, #8]
 800a094:	a90e      	add	r1, sp, #56	; 0x38
 800a096:	f000 f8f7 	bl	800a288 <uxr_object_id_to_raw>
 800a09a:	2300      	movs	r3, #0
 800a09c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800a0a0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800a0a4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800a0a8:	3d00      	subs	r5, #0
 800a0aa:	bf18      	it	ne
 800a0ac:	2501      	movne	r5, #1
 800a0ae:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800a0b2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800a0b6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a0ba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800a0c4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800a0c8:	bb8a      	cbnz	r2, 800a12e <uxr_buffer_create_datawriter_bin+0xc6>
 800a0ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a0ce:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800a0d2:	f04f 0c13 	mov.w	ip, #19
 800a0d6:	250b      	movs	r5, #11
 800a0d8:	2221      	movs	r2, #33	; 0x21
 800a0da:	2111      	movs	r1, #17
 800a0dc:	2009      	movs	r0, #9
 800a0de:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800a0e2:	b923      	cbnz	r3, 800a0ee <uxr_buffer_create_datawriter_bin+0x86>
 800a0e4:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800a0e8:	4672      	mov	r2, lr
 800a0ea:	4661      	mov	r1, ip
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d025      	beq.n	800a142 <uxr_buffer_create_datawriter_bin+0xda>
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d029      	beq.n	800a14e <uxr_buffer_create_datawriter_bin+0xe6>
 800a0fa:	b32b      	cbz	r3, 800a148 <uxr_buffer_create_datawriter_bin+0xe0>
 800a0fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a100:	a921      	add	r1, sp, #132	; 0x84
 800a102:	a806      	add	r0, sp, #24
 800a104:	f7ff fe2c 	bl	8009d60 <ucdr_init_buffer>
 800a108:	a90e      	add	r1, sp, #56	; 0x38
 800a10a:	a806      	add	r0, sp, #24
 800a10c:	f002 f8be 	bl	800c28c <uxr_serialize_OBJK_DataWriter_Binary>
 800a110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a112:	f8cd 8000 	str.w	r8, [sp]
 800a116:	9401      	str	r4, [sp, #4]
 800a118:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a11c:	60e3      	str	r3, [r4, #12]
 800a11e:	4630      	mov	r0, r6
 800a120:	b29b      	uxth	r3, r3
 800a122:	f7ff fead 	bl	8009e80 <uxr_common_create_entity>
 800a126:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a12e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800a132:	f04f 0c12 	mov.w	ip, #18
 800a136:	250a      	movs	r5, #10
 800a138:	2220      	movs	r2, #32
 800a13a:	2110      	movs	r1, #16
 800a13c:	2008      	movs	r0, #8
 800a13e:	2702      	movs	r7, #2
 800a140:	e7cd      	b.n	800a0de <uxr_buffer_create_datawriter_bin+0x76>
 800a142:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800a146:	e7d9      	b.n	800a0fc <uxr_buffer_create_datawriter_bin+0x94>
 800a148:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800a14c:	e7d6      	b.n	800a0fc <uxr_buffer_create_datawriter_bin+0x94>
 800a14e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800a152:	e7d3      	b.n	800a0fc <uxr_buffer_create_datawriter_bin+0x94>

0800a154 <uxr_buffer_create_datareader_bin>:
 800a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a158:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800a15c:	ac1f      	add	r4, sp, #124	; 0x7c
 800a15e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a162:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800a166:	9105      	str	r1, [sp, #20]
 800a168:	4606      	mov	r6, r0
 800a16a:	a9a3      	add	r1, sp, #652	; 0x28c
 800a16c:	4618      	mov	r0, r3
 800a16e:	2306      	movs	r3, #6
 800a170:	7123      	strb	r3, [r4, #4]
 800a172:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800a176:	2703      	movs	r7, #3
 800a178:	f000 f886 	bl	800a288 <uxr_object_id_to_raw>
 800a17c:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800a17e:	7227      	strb	r7, [r4, #8]
 800a180:	a90e      	add	r1, sp, #56	; 0x38
 800a182:	f000 f881 	bl	800a288 <uxr_object_id_to_raw>
 800a186:	2300      	movs	r3, #0
 800a188:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800a18c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800a190:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800a194:	3d00      	subs	r5, #0
 800a196:	bf18      	it	ne
 800a198:	2501      	movne	r5, #1
 800a19a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800a19e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800a1a2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800a1a6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a1aa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800a1b4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800a1b8:	bb8a      	cbnz	r2, 800a21e <uxr_buffer_create_datareader_bin+0xca>
 800a1ba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a1be:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800a1c2:	f04f 0c13 	mov.w	ip, #19
 800a1c6:	250b      	movs	r5, #11
 800a1c8:	2221      	movs	r2, #33	; 0x21
 800a1ca:	2111      	movs	r1, #17
 800a1cc:	2009      	movs	r0, #9
 800a1ce:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800a1d2:	b923      	cbnz	r3, 800a1de <uxr_buffer_create_datareader_bin+0x8a>
 800a1d4:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800a1d8:	4672      	mov	r2, lr
 800a1da:	4661      	mov	r1, ip
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d025      	beq.n	800a232 <uxr_buffer_create_datareader_bin+0xde>
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d029      	beq.n	800a23e <uxr_buffer_create_datareader_bin+0xea>
 800a1ea:	b32b      	cbz	r3, 800a238 <uxr_buffer_create_datareader_bin+0xe4>
 800a1ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1f0:	a923      	add	r1, sp, #140	; 0x8c
 800a1f2:	a806      	add	r0, sp, #24
 800a1f4:	f7ff fdb4 	bl	8009d60 <ucdr_init_buffer>
 800a1f8:	a90e      	add	r1, sp, #56	; 0x38
 800a1fa:	a806      	add	r0, sp, #24
 800a1fc:	f002 f80a 	bl	800c214 <uxr_serialize_OBJK_DataReader_Binary>
 800a200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a202:	f8cd 8000 	str.w	r8, [sp]
 800a206:	9401      	str	r4, [sp, #4]
 800a208:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a20c:	60e3      	str	r3, [r4, #12]
 800a20e:	4630      	mov	r0, r6
 800a210:	b29b      	uxth	r3, r3
 800a212:	f7ff fe35 	bl	8009e80 <uxr_common_create_entity>
 800a216:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800a21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800a222:	f04f 0c12 	mov.w	ip, #18
 800a226:	250a      	movs	r5, #10
 800a228:	2220      	movs	r2, #32
 800a22a:	2110      	movs	r1, #16
 800a22c:	2008      	movs	r0, #8
 800a22e:	2702      	movs	r7, #2
 800a230:	e7cd      	b.n	800a1ce <uxr_buffer_create_datareader_bin+0x7a>
 800a232:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800a236:	e7d9      	b.n	800a1ec <uxr_buffer_create_datareader_bin+0x98>
 800a238:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800a23c:	e7d6      	b.n	800a1ec <uxr_buffer_create_datareader_bin+0x98>
 800a23e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800a242:	e7d3      	b.n	800a1ec <uxr_buffer_create_datareader_bin+0x98>

0800a244 <uxr_object_id>:
 800a244:	b082      	sub	sp, #8
 800a246:	2300      	movs	r3, #0
 800a248:	f88d 1006 	strb.w	r1, [sp, #6]
 800a24c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a250:	f360 030f 	bfi	r3, r0, #0, #16
 800a254:	f362 431f 	bfi	r3, r2, #16, #16
 800a258:	4618      	mov	r0, r3
 800a25a:	b002      	add	sp, #8
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop

0800a260 <uxr_object_id_from_raw>:
 800a260:	7843      	ldrb	r3, [r0, #1]
 800a262:	7801      	ldrb	r1, [r0, #0]
 800a264:	b082      	sub	sp, #8
 800a266:	f003 020f 	and.w	r2, r3, #15
 800a26a:	f88d 2006 	strb.w	r2, [sp, #6]
 800a26e:	091b      	lsrs	r3, r3, #4
 800a270:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a274:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800a278:	2000      	movs	r0, #0
 800a27a:	f363 000f 	bfi	r0, r3, #0, #16
 800a27e:	f362 401f 	bfi	r0, r2, #16, #16
 800a282:	b002      	add	sp, #8
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop

0800a288 <uxr_object_id_to_raw>:
 800a288:	4602      	mov	r2, r0
 800a28a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800a28e:	b082      	sub	sp, #8
 800a290:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800a294:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800a298:	f881 c000 	strb.w	ip, [r1]
 800a29c:	7048      	strb	r0, [r1, #1]
 800a29e:	b002      	add	sp, #8
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop

0800a2a4 <on_get_fragmentation_info>:
 800a2a4:	b500      	push	{lr}
 800a2a6:	b08b      	sub	sp, #44	; 0x2c
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	2204      	movs	r2, #4
 800a2ac:	a802      	add	r0, sp, #8
 800a2ae:	f7ff fd57 	bl	8009d60 <ucdr_init_buffer>
 800a2b2:	f10d 0305 	add.w	r3, sp, #5
 800a2b6:	f10d 0206 	add.w	r2, sp, #6
 800a2ba:	a901      	add	r1, sp, #4
 800a2bc:	a802      	add	r0, sp, #8
 800a2be:	f001 f99b 	bl	800b5f8 <uxr_read_submessage_header>
 800a2c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a2c6:	2b0d      	cmp	r3, #13
 800a2c8:	d003      	beq.n	800a2d2 <on_get_fragmentation_info+0x2e>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	b00b      	add	sp, #44	; 0x2c
 800a2ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a2d6:	f013 0f02 	tst.w	r3, #2
 800a2da:	bf14      	ite	ne
 800a2dc:	2002      	movne	r0, #2
 800a2de:	2001      	moveq	r0, #1
 800a2e0:	b00b      	add	sp, #44	; 0x2c
 800a2e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2e6:	bf00      	nop

0800a2e8 <read_submessage_get_info>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	2500      	movs	r5, #0
 800a2ec:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	f44f 7224 	mov.w	r2, #656	; 0x290
 800a2f6:	460e      	mov	r6, r1
 800a2f8:	a810      	add	r0, sp, #64	; 0x40
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800a300:	f007 fc0c 	bl	8011b1c <memset>
 800a304:	a903      	add	r1, sp, #12
 800a306:	4630      	mov	r0, r6
 800a308:	f002 fa36 	bl	800c778 <uxr_deserialize_GET_INFO_Payload>
 800a30c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a310:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a314:	4620      	mov	r0, r4
 800a316:	f000 ffe5 	bl	800b2e4 <uxr_session_header_offset>
 800a31a:	462b      	mov	r3, r5
 800a31c:	9000      	str	r0, [sp, #0]
 800a31e:	220c      	movs	r2, #12
 800a320:	a905      	add	r1, sp, #20
 800a322:	a808      	add	r0, sp, #32
 800a324:	f7ff fd0a 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800a328:	a910      	add	r1, sp, #64	; 0x40
 800a32a:	a808      	add	r0, sp, #32
 800a32c:	f002 fa96 	bl	800c85c <uxr_serialize_INFO_Payload>
 800a330:	9b08      	ldr	r3, [sp, #32]
 800a332:	462a      	mov	r2, r5
 800a334:	4629      	mov	r1, r5
 800a336:	4620      	mov	r0, r4
 800a338:	f000 ff7e 	bl	800b238 <uxr_stamp_session_header>
 800a33c:	a808      	add	r0, sp, #32
 800a33e:	f7ff fd3b 	bl	8009db8 <ucdr_buffer_length>
 800a342:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a344:	4602      	mov	r2, r0
 800a346:	a905      	add	r1, sp, #20
 800a348:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a34c:	47a0      	blx	r4
 800a34e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800a352:	bd70      	pop	{r4, r5, r6, pc}

0800a354 <write_submessage_acknack.isra.0>:
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	b092      	sub	sp, #72	; 0x48
 800a358:	4605      	mov	r5, r0
 800a35a:	460e      	mov	r6, r1
 800a35c:	4614      	mov	r4, r2
 800a35e:	f000 ffc1 	bl	800b2e4 <uxr_session_header_offset>
 800a362:	a905      	add	r1, sp, #20
 800a364:	9000      	str	r0, [sp, #0]
 800a366:	2300      	movs	r3, #0
 800a368:	a80a      	add	r0, sp, #40	; 0x28
 800a36a:	2211      	movs	r2, #17
 800a36c:	f7ff fce6 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800a370:	2218      	movs	r2, #24
 800a372:	fb02 5404 	mla	r4, r2, r4, r5
 800a376:	2300      	movs	r3, #0
 800a378:	2205      	movs	r2, #5
 800a37a:	3450      	adds	r4, #80	; 0x50
 800a37c:	210a      	movs	r1, #10
 800a37e:	a80a      	add	r0, sp, #40	; 0x28
 800a380:	f001 f920 	bl	800b5c4 <uxr_buffer_submessage_header>
 800a384:	a903      	add	r1, sp, #12
 800a386:	4620      	mov	r0, r4
 800a388:	f005 f9fa 	bl	800f780 <uxr_compute_acknack>
 800a38c:	ba40      	rev16	r0, r0
 800a38e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800a392:	a903      	add	r1, sp, #12
 800a394:	a80a      	add	r0, sp, #40	; 0x28
 800a396:	f88d 6010 	strb.w	r6, [sp, #16]
 800a39a:	f002 facf 	bl	800c93c <uxr_serialize_ACKNACK_Payload>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f000 ff47 	bl	800b238 <uxr_stamp_session_header>
 800a3aa:	a80a      	add	r0, sp, #40	; 0x28
 800a3ac:	f7ff fd04 	bl	8009db8 <ucdr_buffer_length>
 800a3b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	a905      	add	r1, sp, #20
 800a3b6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a3ba:	47a0      	blx	r4
 800a3bc:	b012      	add	sp, #72	; 0x48
 800a3be:	bd70      	pop	{r4, r5, r6, pc}

0800a3c0 <uxr_init_session>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800a3f8 <uxr_init_session+0x38>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800a3d2:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800a3d6:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800a3da:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800a3de:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800a3e2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800a3e6:	2181      	movs	r1, #129	; 0x81
 800a3e8:	f000 fe92 	bl	800b110 <uxr_init_session_info>
 800a3ec:	f104 0008 	add.w	r0, r4, #8
 800a3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f4:	f001 b802 	b.w	800b3fc <uxr_init_stream_storage>
	...

0800a400 <uxr_set_status_callback>:
 800a400:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop

0800a408 <uxr_set_topic_callback>:
 800a408:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop

0800a410 <uxr_set_request_callback>:
 800a410:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop

0800a418 <uxr_set_reply_callback>:
 800a418:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop

0800a420 <uxr_create_output_best_effort_stream>:
 800a420:	b510      	push	{r4, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	e9cd 2100 	strd	r2, r1, [sp]
 800a428:	4604      	mov	r4, r0
 800a42a:	f000 ff5b 	bl	800b2e4 <uxr_session_header_offset>
 800a42e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a432:	4603      	mov	r3, r0
 800a434:	f104 0008 	add.w	r0, r4, #8
 800a438:	b004      	add	sp, #16
 800a43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43e:	f001 b827 	b.w	800b490 <uxr_add_output_best_effort_buffer>
 800a442:	bf00      	nop

0800a444 <uxr_create_output_reliable_stream>:
 800a444:	b510      	push	{r4, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800a44c:	4604      	mov	r4, r0
 800a44e:	9303      	str	r3, [sp, #12]
 800a450:	f000 ff48 	bl	800b2e4 <uxr_session_header_offset>
 800a454:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a458:	9000      	str	r0, [sp, #0]
 800a45a:	9905      	ldr	r1, [sp, #20]
 800a45c:	f104 0008 	add.w	r0, r4, #8
 800a460:	f001 f82a 	bl	800b4b8 <uxr_add_output_reliable_buffer>
 800a464:	2200      	movs	r2, #0
 800a466:	b2c3      	uxtb	r3, r0
 800a468:	f363 0207 	bfi	r2, r3, #0, #8
 800a46c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a470:	f363 220f 	bfi	r2, r3, #8, #8
 800a474:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a478:	f363 4217 	bfi	r2, r3, #16, #8
 800a47c:	0e03      	lsrs	r3, r0, #24
 800a47e:	f363 621f 	bfi	r2, r3, #24, #8
 800a482:	4610      	mov	r0, r2
 800a484:	b008      	add	sp, #32
 800a486:	bd10      	pop	{r4, pc}

0800a488 <uxr_create_input_best_effort_stream>:
 800a488:	b082      	sub	sp, #8
 800a48a:	3008      	adds	r0, #8
 800a48c:	b002      	add	sp, #8
 800a48e:	f001 b82d 	b.w	800b4ec <uxr_add_input_best_effort_buffer>
 800a492:	bf00      	nop

0800a494 <uxr_create_input_reliable_stream>:
 800a494:	b510      	push	{r4, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	4c0b      	ldr	r4, [pc, #44]	; (800a4c8 <uxr_create_input_reliable_stream+0x34>)
 800a49a:	9400      	str	r4, [sp, #0]
 800a49c:	3008      	adds	r0, #8
 800a49e:	f001 f83b 	bl	800b518 <uxr_add_input_reliable_buffer>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	b2c3      	uxtb	r3, r0
 800a4a6:	f363 0207 	bfi	r2, r3, #0, #8
 800a4aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a4ae:	f363 220f 	bfi	r2, r3, #8, #8
 800a4b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a4b6:	f363 4217 	bfi	r2, r3, #16, #8
 800a4ba:	0e03      	lsrs	r3, r0, #24
 800a4bc:	f363 621f 	bfi	r2, r3, #24, #8
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	b004      	add	sp, #16
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	bf00      	nop
 800a4c8:	0800a2a5 	.word	0x0800a2a5

0800a4cc <uxr_epoch_nanos>:
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	f001 f8d8 	bl	800b684 <uxr_nanos>
 800a4d4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800a4d8:	1ac0      	subs	r0, r0, r3
 800a4da:	eb61 0102 	sbc.w	r1, r1, r2
 800a4de:	bd10      	pop	{r4, pc}

0800a4e0 <uxr_flash_output_streams>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	7e03      	ldrb	r3, [r0, #24]
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d035      	beq.n	800a55a <uxr_flash_output_streams+0x7a>
 800a4ee:	f04f 0900 	mov.w	r9, #0
 800a4f2:	4648      	mov	r0, r9
 800a4f4:	f10d 0802 	add.w	r8, sp, #2
 800a4f8:	af03      	add	r7, sp, #12
 800a4fa:	ae02      	add	r6, sp, #8
 800a4fc:	e006      	b.n	800a50c <uxr_flash_output_streams+0x2c>
 800a4fe:	7e23      	ldrb	r3, [r4, #24]
 800a500:	f109 0901 	add.w	r9, r9, #1
 800a504:	fa5f f089 	uxtb.w	r0, r9
 800a508:	4283      	cmp	r3, r0
 800a50a:	d926      	bls.n	800a55a <uxr_flash_output_streams+0x7a>
 800a50c:	2201      	movs	r2, #1
 800a50e:	4611      	mov	r1, r2
 800a510:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800a514:	f000 ff1e 	bl	800b354 <uxr_stream_id>
 800a518:	3508      	adds	r5, #8
 800a51a:	4684      	mov	ip, r0
 800a51c:	4643      	mov	r3, r8
 800a51e:	463a      	mov	r2, r7
 800a520:	4631      	mov	r1, r6
 800a522:	4628      	mov	r0, r5
 800a524:	f8cd c004 	str.w	ip, [sp, #4]
 800a528:	f005 f9b0 	bl	800f88c <uxr_prepare_best_effort_buffer_to_send>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d0e6      	beq.n	800a4fe <uxr_flash_output_streams+0x1e>
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a536:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fe7c 	bl	800b238 <uxr_stamp_session_header>
 800a540:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a542:	9a03      	ldr	r2, [sp, #12]
 800a544:	685d      	ldr	r5, [r3, #4]
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	9902      	ldr	r1, [sp, #8]
 800a54a:	47a8      	blx	r5
 800a54c:	f109 0901 	add.w	r9, r9, #1
 800a550:	7e23      	ldrb	r3, [r4, #24]
 800a552:	fa5f f089 	uxtb.w	r0, r9
 800a556:	4283      	cmp	r3, r0
 800a558:	d8d8      	bhi.n	800a50c <uxr_flash_output_streams+0x2c>
 800a55a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a55e:	b38b      	cbz	r3, 800a5c4 <uxr_flash_output_streams+0xe4>
 800a560:	f04f 0900 	mov.w	r9, #0
 800a564:	f10d 0802 	add.w	r8, sp, #2
 800a568:	af03      	add	r7, sp, #12
 800a56a:	ae02      	add	r6, sp, #8
 800a56c:	4648      	mov	r0, r9
 800a56e:	2201      	movs	r2, #1
 800a570:	2102      	movs	r1, #2
 800a572:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800a576:	f000 feed 	bl	800b354 <uxr_stream_id>
 800a57a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a57e:	3520      	adds	r5, #32
 800a580:	9001      	str	r0, [sp, #4]
 800a582:	e00d      	b.n	800a5a0 <uxr_flash_output_streams+0xc0>
 800a584:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a588:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a58c:	9b02      	ldr	r3, [sp, #8]
 800a58e:	f000 fe53 	bl	800b238 <uxr_stamp_session_header>
 800a592:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a594:	9a03      	ldr	r2, [sp, #12]
 800a596:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800a59a:	9902      	ldr	r1, [sp, #8]
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	47d0      	blx	sl
 800a5a0:	4643      	mov	r3, r8
 800a5a2:	463a      	mov	r2, r7
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f005 fb8e 	bl	800fcc8 <uxr_prepare_next_reliable_buffer_to_send>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e7      	bne.n	800a584 <uxr_flash_output_streams+0xa4>
 800a5b4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a5b8:	f109 0901 	add.w	r9, r9, #1
 800a5bc:	fa5f f089 	uxtb.w	r0, r9
 800a5c0:	4283      	cmp	r3, r0
 800a5c2:	d8d4      	bhi.n	800a56e <uxr_flash_output_streams+0x8e>
 800a5c4:	b004      	add	sp, #16
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	bf00      	nop

0800a5cc <read_submessage_info>:
 800a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d0:	460d      	mov	r5, r1
 800a5d2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800a5d6:	4669      	mov	r1, sp
 800a5d8:	4607      	mov	r7, r0
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f001 ffda 	bl	800c594 <uxr_deserialize_BaseObjectReply>
 800a5e0:	a902      	add	r1, sp, #8
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800a5ea:	f7fe fbf5 	bl	8008dd8 <ucdr_deserialize_bool>
 800a5ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a5f2:	4004      	ands	r4, r0
 800a5f4:	b2e4      	uxtb	r4, r4
 800a5f6:	b95b      	cbnz	r3, 800a610 <read_submessage_info+0x44>
 800a5f8:	a987      	add	r1, sp, #540	; 0x21c
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f7fe fbec 	bl	8008dd8 <ucdr_deserialize_bool>
 800a600:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800a604:	4606      	mov	r6, r0
 800a606:	b94b      	cbnz	r3, 800a61c <read_submessage_info+0x50>
 800a608:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800a60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a610:	a903      	add	r1, sp, #12
 800a612:	4628      	mov	r0, r5
 800a614:	f001 fe66 	bl	800c2e4 <uxr_deserialize_ObjectVariant>
 800a618:	4004      	ands	r4, r0
 800a61a:	e7ed      	b.n	800a5f8 <read_submessage_info+0x2c>
 800a61c:	a988      	add	r1, sp, #544	; 0x220
 800a61e:	4628      	mov	r0, r5
 800a620:	f7fe fc08 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800a624:	4234      	tst	r4, r6
 800a626:	d0ef      	beq.n	800a608 <read_submessage_info+0x3c>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d0ed      	beq.n	800a608 <read_submessage_info+0x3c>
 800a62c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800a630:	2b0d      	cmp	r3, #13
 800a632:	d1e9      	bne.n	800a608 <read_submessage_info+0x3c>
 800a634:	a98a      	add	r1, sp, #552	; 0x228
 800a636:	4628      	mov	r0, r5
 800a638:	f7ff f9a2 	bl	8009980 <ucdr_deserialize_int16_t>
 800a63c:	b140      	cbz	r0, 800a650 <read_submessage_info+0x84>
 800a63e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800a642:	2b00      	cmp	r3, #0
 800a644:	dd07      	ble.n	800a656 <read_submessage_info+0x8a>
 800a646:	f1b8 0f00 	cmp.w	r8, #0
 800a64a:	bf14      	ite	ne
 800a64c:	2001      	movne	r0, #1
 800a64e:	2002      	moveq	r0, #2
 800a650:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800a654:	e7d8      	b.n	800a608 <read_submessage_info+0x3c>
 800a656:	2000      	movs	r0, #0
 800a658:	e7fa      	b.n	800a650 <read_submessage_info+0x84>
 800a65a:	bf00      	nop

0800a65c <read_submessage_list>:
 800a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	b097      	sub	sp, #92	; 0x5c
 800a662:	4ec1      	ldr	r6, [pc, #772]	; (800a968 <read_submessage_list+0x30c>)
 800a664:	9209      	str	r2, [sp, #36]	; 0x24
 800a666:	4604      	mov	r4, r0
 800a668:	460d      	mov	r5, r1
 800a66a:	f04f 0801 	mov.w	r8, #1
 800a66e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800a672:	aa0c      	add	r2, sp, #48	; 0x30
 800a674:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 ffbd 	bl	800b5f8 <uxr_read_submessage_header>
 800a67e:	2800      	cmp	r0, #0
 800a680:	f000 813e 	beq.w	800a900 <read_submessage_list+0x2a4>
 800a684:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800a688:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800a68c:	3b02      	subs	r3, #2
 800a68e:	2b0d      	cmp	r3, #13
 800a690:	d8ed      	bhi.n	800a66e <read_submessage_list+0x12>
 800a692:	a101      	add	r1, pc, #4	; (adr r1, 800a698 <read_submessage_list+0x3c>)
 800a694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a698:	0800a8f7 	.word	0x0800a8f7
 800a69c:	0800a66f 	.word	0x0800a66f
 800a6a0:	0800a8e7 	.word	0x0800a8e7
 800a6a4:	0800a885 	.word	0x0800a885
 800a6a8:	0800a87b 	.word	0x0800a87b
 800a6ac:	0800a66f 	.word	0x0800a66f
 800a6b0:	0800a66f 	.word	0x0800a66f
 800a6b4:	0800a7db 	.word	0x0800a7db
 800a6b8:	0800a76b 	.word	0x0800a76b
 800a6bc:	0800a72b 	.word	0x0800a72b
 800a6c0:	0800a66f 	.word	0x0800a66f
 800a6c4:	0800a66f 	.word	0x0800a66f
 800a6c8:	0800a66f 	.word	0x0800a66f
 800a6cc:	0800a6d1 	.word	0x0800a6d1
 800a6d0:	a910      	add	r1, sp, #64	; 0x40
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f002 f982 	bl	800c9dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800a6d8:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800a6dc:	f1b9 0f00 	cmp.w	r9, #0
 800a6e0:	f000 8116 	beq.w	800a910 <read_submessage_list+0x2b4>
 800a6e4:	f000 ffce 	bl	800b684 <uxr_nanos>
 800a6e8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	468c      	mov	ip, r1
 800a6f4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800a6f8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800a6fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6fe:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a700:	468c      	mov	ip, r1
 800a702:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800a706:	46e2      	mov	sl, ip
 800a708:	46bc      	mov	ip, r7
 800a70a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800a70e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800a712:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800a716:	e9cd 7100 	strd	r7, r1, [sp]
 800a71a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a71e:	9106      	str	r1, [sp, #24]
 800a720:	4620      	mov	r0, r4
 800a722:	47c8      	blx	r9
 800a724:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800a728:	e7a1      	b.n	800a66e <read_submessage_list+0x12>
 800a72a:	a910      	add	r1, sp, #64	; 0x40
 800a72c:	4628      	mov	r0, r5
 800a72e:	f002 f943 	bl	800c9b8 <uxr_deserialize_HEARTBEAT_Payload>
 800a732:	2100      	movs	r1, #0
 800a734:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a738:	f000 fe36 	bl	800b3a8 <uxr_stream_id_from_raw>
 800a73c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a740:	900f      	str	r0, [sp, #60]	; 0x3c
 800a742:	4639      	mov	r1, r7
 800a744:	f104 0008 	add.w	r0, r4, #8
 800a748:	f000 ff1c 	bl	800b584 <uxr_get_input_reliable_stream>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d08e      	beq.n	800a66e <read_submessage_list+0x12>
 800a750:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800a754:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800a758:	f005 f806 	bl	800f768 <uxr_process_heartbeat>
 800a75c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800a760:	463a      	mov	r2, r7
 800a762:	4620      	mov	r0, r4
 800a764:	f7ff fdf6 	bl	800a354 <write_submessage_acknack.isra.0>
 800a768:	e781      	b.n	800a66e <read_submessage_list+0x12>
 800a76a:	a910      	add	r1, sp, #64	; 0x40
 800a76c:	4628      	mov	r0, r5
 800a76e:	f002 f8fb 	bl	800c968 <uxr_deserialize_ACKNACK_Payload>
 800a772:	2100      	movs	r1, #0
 800a774:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a778:	f000 fe16 	bl	800b3a8 <uxr_stream_id_from_raw>
 800a77c:	900d      	str	r0, [sp, #52]	; 0x34
 800a77e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a782:	f104 0008 	add.w	r0, r4, #8
 800a786:	f000 fee9 	bl	800b55c <uxr_get_output_reliable_stream>
 800a78a:	4607      	mov	r7, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	f43f af6e 	beq.w	800a66e <read_submessage_list+0x12>
 800a792:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a796:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800a79a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800a79e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a7a2:	b289      	uxth	r1, r1
 800a7a4:	f005 fb3a 	bl	800fe1c <uxr_process_acknack>
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f005 faf7 	bl	800fd9c <uxr_begin_output_nack_buffer_it>
 800a7ae:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a7b2:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800a7b6:	e006      	b.n	800a7c6 <read_submessage_list+0x16a>
 800a7b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a7c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	47c8      	blx	r9
 800a7c6:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800a7ca:	aa0f      	add	r2, sp, #60	; 0x3c
 800a7cc:	4651      	mov	r1, sl
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	f005 fae6 	bl	800fda0 <uxr_next_reliable_nack_buffer_to_send>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d1ef      	bne.n	800a7b8 <read_submessage_list+0x15c>
 800a7d8:	e749      	b.n	800a66e <read_submessage_list+0x12>
 800a7da:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a7de:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800a7e2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a7e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a7ea:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800a7ee:	4651      	mov	r1, sl
 800a7f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a7f4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800a7f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800a7fc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800a800:	4628      	mov	r0, r5
 800a802:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800a806:	f001 fe0f 	bl	800c428 <uxr_deserialize_BaseObjectRequest>
 800a80a:	4650      	mov	r0, sl
 800a80c:	a90f      	add	r1, sp, #60	; 0x3c
 800a80e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800a812:	f000 fd8d 	bl	800b330 <uxr_parse_base_object_request>
 800a816:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800a81a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a81c:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800a820:	9110      	str	r1, [sp, #64]	; 0x40
 800a822:	3f04      	subs	r7, #4
 800a824:	f009 090e 	and.w	r9, r9, #14
 800a828:	b2bf      	uxth	r7, r7
 800a82a:	f1bb 0f00 	cmp.w	fp, #0
 800a82e:	d006      	beq.n	800a83e <read_submessage_list+0x1e2>
 800a830:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4652      	mov	r2, sl
 800a838:	2300      	movs	r3, #0
 800a83a:	4620      	mov	r0, r4
 800a83c:	47d8      	blx	fp
 800a83e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a840:	b16a      	cbz	r2, 800a85e <read_submessage_list+0x202>
 800a842:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a844:	2100      	movs	r1, #0
 800a846:	3802      	subs	r0, #2
 800a848:	e002      	b.n	800a850 <read_submessage_list+0x1f4>
 800a84a:	3101      	adds	r1, #1
 800a84c:	4291      	cmp	r1, r2
 800a84e:	d006      	beq.n	800a85e <read_submessage_list+0x202>
 800a850:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a854:	4553      	cmp	r3, sl
 800a856:	d1f8      	bne.n	800a84a <read_submessage_list+0x1ee>
 800a858:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a85a:	2200      	movs	r2, #0
 800a85c:	545a      	strb	r2, [r3, r1]
 800a85e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800a862:	9102      	str	r1, [sp, #8]
 800a864:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a866:	9101      	str	r1, [sp, #4]
 800a868:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a86a:	9100      	str	r1, [sp, #0]
 800a86c:	464b      	mov	r3, r9
 800a86e:	463a      	mov	r2, r7
 800a870:	4629      	mov	r1, r5
 800a872:	4620      	mov	r0, r4
 800a874:	f005 fb90 	bl	800ff98 <read_submessage_format>
 800a878:	e6f9      	b.n	800a66e <read_submessage_list+0x12>
 800a87a:	4629      	mov	r1, r5
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7ff fea5 	bl	800a5cc <read_submessage_info>
 800a882:	e6f4      	b.n	800a66e <read_submessage_list+0x12>
 800a884:	2a00      	cmp	r2, #0
 800a886:	d03e      	beq.n	800a906 <read_submessage_list+0x2aa>
 800a888:	a910      	add	r1, sp, #64	; 0x40
 800a88a:	4628      	mov	r0, r5
 800a88c:	f001 ffc8 	bl	800c820 <uxr_deserialize_STATUS_Payload>
 800a890:	a90e      	add	r1, sp, #56	; 0x38
 800a892:	aa0d      	add	r2, sp, #52	; 0x34
 800a894:	a810      	add	r0, sp, #64	; 0x40
 800a896:	f000 fd4b 	bl	800b330 <uxr_parse_base_object_request>
 800a89a:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800a89e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a8a0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800a8a4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800a8a8:	910f      	str	r1, [sp, #60]	; 0x3c
 800a8aa:	f1ba 0f00 	cmp.w	sl, #0
 800a8ae:	d006      	beq.n	800a8be <read_submessage_list+0x262>
 800a8b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	463a      	mov	r2, r7
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	47d0      	blx	sl
 800a8be:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a8c0:	2a00      	cmp	r2, #0
 800a8c2:	f43f aed4 	beq.w	800a66e <read_submessage_list+0x12>
 800a8c6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	3802      	subs	r0, #2
 800a8cc:	e003      	b.n	800a8d6 <read_submessage_list+0x27a>
 800a8ce:	3101      	adds	r1, #1
 800a8d0:	4291      	cmp	r1, r2
 800a8d2:	f43f aecc 	beq.w	800a66e <read_submessage_list+0x12>
 800a8d6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a8da:	42bb      	cmp	r3, r7
 800a8dc:	d1f7      	bne.n	800a8ce <read_submessage_list+0x272>
 800a8de:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a8e0:	f803 9001 	strb.w	r9, [r3, r1]
 800a8e4:	e6c3      	b.n	800a66e <read_submessage_list+0x12>
 800a8e6:	2a00      	cmp	r2, #0
 800a8e8:	f47f aec1 	bne.w	800a66e <read_submessage_list+0x12>
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 fc64 	bl	800b1bc <uxr_read_create_session_status>
 800a8f4:	e6bb      	b.n	800a66e <read_submessage_list+0x12>
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f7ff fcf5 	bl	800a2e8 <read_submessage_get_info>
 800a8fe:	e6b6      	b.n	800a66e <read_submessage_list+0x12>
 800a900:	b017      	add	sp, #92	; 0x5c
 800a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a906:	4629      	mov	r1, r5
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fc63 	bl	800b1d4 <uxr_read_delete_session_status>
 800a90e:	e6ae      	b.n	800a66e <read_submessage_list+0x12>
 800a910:	f000 feb8 	bl	800b684 <uxr_nanos>
 800a914:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a916:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a918:	464f      	mov	r7, r9
 800a91a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800a91e:	1812      	adds	r2, r2, r0
 800a920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a922:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a924:	eb47 0101 	adc.w	r1, r7, r1
 800a928:	464f      	mov	r7, r9
 800a92a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800a92e:	463b      	mov	r3, r7
 800a930:	4684      	mov	ip, r0
 800a932:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800a936:	fbc7 0906 	smlal	r0, r9, r7, r6
 800a93a:	eb1c 0c00 	adds.w	ip, ip, r0
 800a93e:	464f      	mov	r7, r9
 800a940:	eb43 0307 	adc.w	r3, r3, r7
 800a944:	ebb2 0c0c 	subs.w	ip, r2, ip
 800a948:	eb61 0303 	sbc.w	r3, r1, r3
 800a94c:	0fda      	lsrs	r2, r3, #31
 800a94e:	eb12 020c 	adds.w	r2, r2, ip
 800a952:	f143 0300 	adc.w	r3, r3, #0
 800a956:	0852      	lsrs	r2, r2, #1
 800a958:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800a95c:	105b      	asrs	r3, r3, #1
 800a95e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800a962:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800a966:	e6dd      	b.n	800a724 <read_submessage_list+0xc8>
 800a968:	3b9aca00 	.word	0x3b9aca00

0800a96c <listen_message_reliably>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	1e0b      	subs	r3, r1, #0
 800a972:	b09d      	sub	sp, #116	; 0x74
 800a974:	bfb8      	it	lt
 800a976:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800a97a:	4680      	mov	r8, r0
 800a97c:	9305      	str	r3, [sp, #20]
 800a97e:	f000 fe67 	bl	800b650 <uxr_millis>
 800a982:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800a986:	4681      	mov	r9, r0
 800a988:	2a00      	cmp	r2, #0
 800a98a:	f000 80a1 	beq.w	800aad0 <listen_message_reliably+0x164>
 800a98e:	2600      	movs	r6, #0
 800a990:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a994:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a998:	9303      	str	r3, [sp, #12]
 800a99a:	4630      	mov	r0, r6
 800a99c:	460f      	mov	r7, r1
 800a99e:	e00f      	b.n	800a9c0 <listen_message_reliably+0x54>
 800a9a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a9a4:	9903      	ldr	r1, [sp, #12]
 800a9a6:	455a      	cmp	r2, fp
 800a9a8:	f106 0601 	add.w	r6, r6, #1
 800a9ac:	eb73 0101 	sbcs.w	r1, r3, r1
 800a9b0:	b2f0      	uxtb	r0, r6
 800a9b2:	da01      	bge.n	800a9b8 <listen_message_reliably+0x4c>
 800a9b4:	4693      	mov	fp, r2
 800a9b6:	9303      	str	r3, [sp, #12]
 800a9b8:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800a9bc:	4283      	cmp	r3, r0
 800a9be:	d960      	bls.n	800aa82 <listen_message_reliably+0x116>
 800a9c0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a9c4:	2102      	movs	r1, #2
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f000 fcc4 	bl	800b354 <uxr_stream_id>
 800a9cc:	00e4      	lsls	r4, r4, #3
 800a9ce:	f104 0520 	add.w	r5, r4, #32
 800a9d2:	4445      	add	r5, r8
 800a9d4:	4601      	mov	r1, r0
 800a9d6:	463b      	mov	r3, r7
 800a9d8:	464a      	mov	r2, r9
 800a9da:	4628      	mov	r0, r5
 800a9dc:	9109      	str	r1, [sp, #36]	; 0x24
 800a9de:	f005 f9b3 	bl	800fd48 <uxr_update_output_stream_heartbeat_timestamp>
 800a9e2:	eb08 0304 	add.w	r3, r8, r4
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d0da      	beq.n	800a9a0 <listen_message_reliably+0x34>
 800a9ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a9ee:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	f000 fc75 	bl	800b2e4 <uxr_session_header_offset>
 800a9fa:	3501      	adds	r5, #1
 800a9fc:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800aa00:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800aa04:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800aa08:	2300      	movs	r3, #0
 800aa0a:	2211      	movs	r2, #17
 800aa0c:	9000      	str	r0, [sp, #0]
 800aa0e:	a90c      	add	r1, sp, #48	; 0x30
 800aa10:	4650      	mov	r0, sl
 800aa12:	f7ff f993 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800aa16:	2300      	movs	r3, #0
 800aa18:	2205      	movs	r2, #5
 800aa1a:	210b      	movs	r1, #11
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	f000 fdd1 	bl	800b5c4 <uxr_buffer_submessage_header>
 800aa22:	8968      	ldrh	r0, [r5, #10]
 800aa24:	2101      	movs	r1, #1
 800aa26:	f005 fb81 	bl	801012c <uxr_seq_num_add>
 800aa2a:	892b      	ldrh	r3, [r5, #8]
 800aa2c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800aa30:	4602      	mov	r2, r0
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800aa38:	a90a      	add	r1, sp, #40	; 0x28
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800aa40:	f001 ffa6 	bl	800c990 <uxr_serialize_HEARTBEAT_Payload>
 800aa44:	2200      	movs	r2, #0
 800aa46:	4611      	mov	r1, r2
 800aa48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	f000 fbf4 	bl	800b238 <uxr_stamp_session_header>
 800aa50:	4650      	mov	r0, sl
 800aa52:	f7ff f9b1 	bl	8009db8 <ucdr_buffer_length>
 800aa56:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	a90c      	add	r1, sp, #48	; 0x30
 800aa5e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800aa62:	4444      	add	r4, r8
 800aa64:	47a8      	blx	r5
 800aa66:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800aa6a:	9903      	ldr	r1, [sp, #12]
 800aa6c:	455a      	cmp	r2, fp
 800aa6e:	f106 0601 	add.w	r6, r6, #1
 800aa72:	eb73 0101 	sbcs.w	r1, r3, r1
 800aa76:	b2f0      	uxtb	r0, r6
 800aa78:	db9c      	blt.n	800a9b4 <listen_message_reliably+0x48>
 800aa7a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800aa7e:	4283      	cmp	r3, r0
 800aa80:	d89e      	bhi.n	800a9c0 <listen_message_reliably+0x54>
 800aa82:	9a03      	ldr	r2, [sp, #12]
 800aa84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	bf08      	it	eq
 800aa8c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800aa90:	d01e      	beq.n	800aad0 <listen_message_reliably+0x164>
 800aa92:	ebab 0309 	sub.w	r3, fp, r9
 800aa96:	9905      	ldr	r1, [sp, #20]
 800aa98:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bf08      	it	eq
 800aaa0:	2301      	moveq	r3, #1
 800aaa2:	4299      	cmp	r1, r3
 800aaa4:	bfa8      	it	ge
 800aaa6:	4619      	movge	r1, r3
 800aaa8:	6894      	ldr	r4, [r2, #8]
 800aaaa:	6810      	ldr	r0, [r2, #0]
 800aaac:	4689      	mov	r9, r1
 800aaae:	460b      	mov	r3, r1
 800aab0:	aa08      	add	r2, sp, #32
 800aab2:	a907      	add	r1, sp, #28
 800aab4:	47a0      	blx	r4
 800aab6:	b968      	cbnz	r0, 800aad4 <listen_message_reliably+0x168>
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	eba3 0309 	sub.w	r3, r3, r9
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	9305      	str	r3, [sp, #20]
 800aac2:	f73f af5c 	bgt.w	800a97e <listen_message_reliably+0x12>
 800aac6:	4604      	mov	r4, r0
 800aac8:	4620      	mov	r0, r4
 800aaca:	b01d      	add	sp, #116	; 0x74
 800aacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad0:	9b05      	ldr	r3, [sp, #20]
 800aad2:	e7e0      	b.n	800aa96 <listen_message_reliably+0x12a>
 800aad4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800aad8:	4604      	mov	r4, r0
 800aada:	a80c      	add	r0, sp, #48	; 0x30
 800aadc:	f7ff f940 	bl	8009d60 <ucdr_init_buffer>
 800aae0:	2500      	movs	r5, #0
 800aae2:	f10d 031a 	add.w	r3, sp, #26
 800aae6:	aa06      	add	r2, sp, #24
 800aae8:	a90c      	add	r1, sp, #48	; 0x30
 800aaea:	4640      	mov	r0, r8
 800aaec:	f88d 5018 	strb.w	r5, [sp, #24]
 800aaf0:	f000 fbb6 	bl	800b260 <uxr_read_session_header>
 800aaf4:	b918      	cbnz	r0, 800aafe <listen_message_reliably+0x192>
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	b01d      	add	sp, #116	; 0x74
 800aafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafe:	4629      	mov	r1, r5
 800ab00:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ab04:	f000 fc50 	bl	800b3a8 <uxr_stream_id_from_raw>
 800ab08:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800ab0c:	2d01      	cmp	r5, #1
 800ab0e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800ab12:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800ab16:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ab1a:	d04b      	beq.n	800abb4 <listen_message_reliably+0x248>
 800ab1c:	2d02      	cmp	r5, #2
 800ab1e:	d00f      	beq.n	800ab40 <listen_message_reliably+0x1d4>
 800ab20:	2d00      	cmp	r5, #0
 800ab22:	d1e8      	bne.n	800aaf6 <listen_message_reliably+0x18a>
 800ab24:	4629      	mov	r1, r5
 800ab26:	4628      	mov	r0, r5
 800ab28:	f000 fc3e 	bl	800b3a8 <uxr_stream_id_from_raw>
 800ab2c:	a90c      	add	r1, sp, #48	; 0x30
 800ab2e:	4602      	mov	r2, r0
 800ab30:	4640      	mov	r0, r8
 800ab32:	920a      	str	r2, [sp, #40]	; 0x28
 800ab34:	f7ff fd92 	bl	800a65c <read_submessage_list>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	b01d      	add	sp, #116	; 0x74
 800ab3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab40:	4631      	mov	r1, r6
 800ab42:	f108 0008 	add.w	r0, r8, #8
 800ab46:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800ab4a:	f000 fd1b 	bl	800b584 <uxr_get_input_reliable_stream>
 800ab4e:	4607      	mov	r7, r0
 800ab50:	b338      	cbz	r0, 800aba2 <listen_message_reliably+0x236>
 800ab52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab54:	9203      	str	r2, [sp, #12]
 800ab56:	a80c      	add	r0, sp, #48	; 0x30
 800ab58:	f7ff f932 	bl	8009dc0 <ucdr_buffer_remaining>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f10d 0019 	add.w	r0, sp, #25
 800ab62:	9000      	str	r0, [sp, #0]
 800ab64:	9a03      	ldr	r2, [sp, #12]
 800ab66:	4651      	mov	r1, sl
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f004 fd03 	bl	800f574 <uxr_receive_reliable_message>
 800ab6e:	b1c0      	cbz	r0, 800aba2 <listen_message_reliably+0x236>
 800ab70:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ab74:	b393      	cbz	r3, 800abdc <listen_message_reliably+0x270>
 800ab76:	ad14      	add	r5, sp, #80	; 0x50
 800ab78:	f04f 0a02 	mov.w	sl, #2
 800ab7c:	e00a      	b.n	800ab94 <listen_message_reliably+0x228>
 800ab7e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800ab82:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800ab86:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800ab8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f7ff fd64 	bl	800a65c <read_submessage_list>
 800ab94:	2204      	movs	r2, #4
 800ab96:	4629      	mov	r1, r5
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f004 fd6b 	bl	800f674 <uxr_next_input_reliable_buffer_available>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d1ed      	bne.n	800ab7e <listen_message_reliably+0x212>
 800aba2:	4640      	mov	r0, r8
 800aba4:	4632      	mov	r2, r6
 800aba6:	4649      	mov	r1, r9
 800aba8:	f7ff fbd4 	bl	800a354 <write_submessage_acknack.isra.0>
 800abac:	4620      	mov	r0, r4
 800abae:	b01d      	add	sp, #116	; 0x74
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb4:	4631      	mov	r1, r6
 800abb6:	f108 0008 	add.w	r0, r8, #8
 800abba:	f000 fcd9 	bl	800b570 <uxr_get_input_best_effort_stream>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d099      	beq.n	800aaf6 <listen_message_reliably+0x18a>
 800abc2:	4651      	mov	r1, sl
 800abc4:	f004 fc42 	bl	800f44c <uxr_receive_best_effort_message>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d094      	beq.n	800aaf6 <listen_message_reliably+0x18a>
 800abcc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800abd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd2:	a90c      	add	r1, sp, #48	; 0x30
 800abd4:	4640      	mov	r0, r8
 800abd6:	f7ff fd41 	bl	800a65c <read_submessage_list>
 800abda:	e78c      	b.n	800aaf6 <listen_message_reliably+0x18a>
 800abdc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800abe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abe2:	a90c      	add	r1, sp, #48	; 0x30
 800abe4:	4640      	mov	r0, r8
 800abe6:	f7ff fd39 	bl	800a65c <read_submessage_list>
 800abea:	e7c4      	b.n	800ab76 <listen_message_reliably+0x20a>

0800abec <uxr_run_session_until_confirm_delivery>:
 800abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf0:	4606      	mov	r6, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	f000 fd2c 	bl	800b650 <uxr_millis>
 800abf8:	4607      	mov	r7, r0
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7ff fc70 	bl	800a4e0 <uxr_flash_output_streams>
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	f106 0808 	add.w	r8, r6, #8
 800ac06:	bfa8      	it	ge
 800ac08:	462c      	movge	r4, r5
 800ac0a:	da07      	bge.n	800ac1c <uxr_run_session_until_confirm_delivery+0x30>
 800ac0c:	e00e      	b.n	800ac2c <uxr_run_session_until_confirm_delivery+0x40>
 800ac0e:	f7ff fead 	bl	800a96c <listen_message_reliably>
 800ac12:	f000 fd1d 	bl	800b650 <uxr_millis>
 800ac16:	1bc3      	subs	r3, r0, r7
 800ac18:	1aec      	subs	r4, r5, r3
 800ac1a:	d407      	bmi.n	800ac2c <uxr_run_session_until_confirm_delivery+0x40>
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	f000 fcbb 	bl	800b598 <uxr_output_streams_confirmed>
 800ac22:	4603      	mov	r3, r0
 800ac24:	4621      	mov	r1, r4
 800ac26:	4630      	mov	r0, r6
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0f0      	beq.n	800ac0e <uxr_run_session_until_confirm_delivery+0x22>
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac32:	f000 bcb1 	b.w	800b598 <uxr_output_streams_confirmed>
 800ac36:	bf00      	nop

0800ac38 <uxr_run_session_until_all_status>:
 800ac38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	9c08      	ldr	r4, [sp, #32]
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460f      	mov	r7, r1
 800ac42:	4691      	mov	r9, r2
 800ac44:	461d      	mov	r5, r3
 800ac46:	f7ff fc4b 	bl	800a4e0 <uxr_flash_output_streams>
 800ac4a:	b124      	cbz	r4, 800ac56 <uxr_run_session_until_all_status+0x1e>
 800ac4c:	4622      	mov	r2, r4
 800ac4e:	21ff      	movs	r1, #255	; 0xff
 800ac50:	4628      	mov	r0, r5
 800ac52:	f006 ff63 	bl	8011b1c <memset>
 800ac56:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800ac5a:	67f4      	str	r4, [r6, #124]	; 0x7c
 800ac5c:	f000 fcf8 	bl	800b650 <uxr_millis>
 800ac60:	3d01      	subs	r5, #1
 800ac62:	f1a9 0902 	sub.w	r9, r9, #2
 800ac66:	4680      	mov	r8, r0
 800ac68:	4639      	mov	r1, r7
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff fe7e 	bl	800a96c <listen_message_reliably>
 800ac70:	f000 fcee 	bl	800b650 <uxr_millis>
 800ac74:	eba0 0008 	sub.w	r0, r0, r8
 800ac78:	1a39      	subs	r1, r7, r0
 800ac7a:	b344      	cbz	r4, 800acce <uxr_run_session_until_all_status+0x96>
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	46ac      	mov	ip, r5
 800ac80:	2301      	movs	r3, #1
 800ac82:	e002      	b.n	800ac8a <uxr_run_session_until_all_status+0x52>
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	d20d      	bcs.n	800aca4 <uxr_run_session_until_all_status+0x6c>
 800ac88:	3301      	adds	r3, #1
 800ac8a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ac8e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800ac92:	d1f7      	bne.n	800ac84 <uxr_run_session_until_all_status+0x4c>
 800ac94:	42a3      	cmp	r3, r4
 800ac96:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ac9a:	d213      	bcs.n	800acc4 <uxr_run_session_until_all_status+0x8c>
 800ac9c:	2a00      	cmp	r2, #0
 800ac9e:	d0f3      	beq.n	800ac88 <uxr_run_session_until_all_status+0x50>
 800aca0:	2900      	cmp	r1, #0
 800aca2:	dce2      	bgt.n	800ac6a <uxr_run_session_until_all_status+0x32>
 800aca4:	2300      	movs	r3, #0
 800aca6:	67f3      	str	r3, [r6, #124]	; 0x7c
 800aca8:	442c      	add	r4, r5
 800acaa:	e001      	b.n	800acb0 <uxr_run_session_until_all_status+0x78>
 800acac:	2b01      	cmp	r3, #1
 800acae:	d812      	bhi.n	800acd6 <uxr_run_session_until_all_status+0x9e>
 800acb0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800acb4:	4284      	cmp	r4, r0
 800acb6:	d1f9      	bne.n	800acac <uxr_run_session_until_all_status+0x74>
 800acb8:	2b01      	cmp	r3, #1
 800acba:	bf8c      	ite	hi
 800acbc:	2000      	movhi	r0, #0
 800acbe:	2001      	movls	r0, #1
 800acc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc4:	2900      	cmp	r1, #0
 800acc6:	dded      	ble.n	800aca4 <uxr_run_session_until_all_status+0x6c>
 800acc8:	2a00      	cmp	r2, #0
 800acca:	d1ce      	bne.n	800ac6a <uxr_run_session_until_all_status+0x32>
 800accc:	e7ea      	b.n	800aca4 <uxr_run_session_until_all_status+0x6c>
 800acce:	67f4      	str	r4, [r6, #124]	; 0x7c
 800acd0:	2001      	movs	r0, #1
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd6:	2000      	movs	r0, #0
 800acd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800acdc <wait_session_status>:
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	4604      	mov	r4, r0
 800ace2:	b09d      	sub	sp, #116	; 0x74
 800ace4:	20ff      	movs	r0, #255	; 0xff
 800ace6:	7160      	strb	r0, [r4, #5]
 800ace8:	9303      	str	r3, [sp, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 80b6 	beq.w	800ae5c <wait_session_status+0x180>
 800acf0:	468a      	mov	sl, r1
 800acf2:	4691      	mov	r9, r2
 800acf4:	f04f 0b00 	mov.w	fp, #0
 800acf8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800acfa:	464a      	mov	r2, r9
 800acfc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ad00:	4651      	mov	r1, sl
 800ad02:	47a8      	blx	r5
 800ad04:	f000 fca4 	bl	800b650 <uxr_millis>
 800ad08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	e009      	b.n	800ad24 <wait_session_status+0x48>
 800ad10:	f000 fc9e 	bl	800b650 <uxr_millis>
 800ad14:	1b40      	subs	r0, r0, r5
 800ad16:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	dd40      	ble.n	800ada0 <wait_session_status+0xc4>
 800ad1e:	7960      	ldrb	r0, [r4, #5]
 800ad20:	28ff      	cmp	r0, #255	; 0xff
 800ad22:	d145      	bne.n	800adb0 <wait_session_status+0xd4>
 800ad24:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ad26:	a908      	add	r1, sp, #32
 800ad28:	6896      	ldr	r6, [r2, #8]
 800ad2a:	6810      	ldr	r0, [r2, #0]
 800ad2c:	aa09      	add	r2, sp, #36	; 0x24
 800ad2e:	47b0      	blx	r6
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d0ed      	beq.n	800ad10 <wait_session_status+0x34>
 800ad34:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ad38:	a80c      	add	r0, sp, #48	; 0x30
 800ad3a:	f7ff f811 	bl	8009d60 <ucdr_init_buffer>
 800ad3e:	2600      	movs	r6, #0
 800ad40:	f10d 031e 	add.w	r3, sp, #30
 800ad44:	aa07      	add	r2, sp, #28
 800ad46:	a90c      	add	r1, sp, #48	; 0x30
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f88d 601c 	strb.w	r6, [sp, #28]
 800ad4e:	f000 fa87 	bl	800b260 <uxr_read_session_header>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d0dc      	beq.n	800ad10 <wait_session_status+0x34>
 800ad56:	4631      	mov	r1, r6
 800ad58:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ad5c:	f000 fb24 	bl	800b3a8 <uxr_stream_id_from_raw>
 800ad60:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ad64:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ad68:	9302      	str	r3, [sp, #8]
 800ad6a:	2f01      	cmp	r7, #1
 800ad6c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800ad70:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ad74:	d05c      	beq.n	800ae30 <wait_session_status+0x154>
 800ad76:	2f02      	cmp	r7, #2
 800ad78:	d020      	beq.n	800adbc <wait_session_status+0xe0>
 800ad7a:	2f00      	cmp	r7, #0
 800ad7c:	d1c8      	bne.n	800ad10 <wait_session_status+0x34>
 800ad7e:	4639      	mov	r1, r7
 800ad80:	4638      	mov	r0, r7
 800ad82:	f000 fb11 	bl	800b3a8 <uxr_stream_id_from_raw>
 800ad86:	a90c      	add	r1, sp, #48	; 0x30
 800ad88:	4602      	mov	r2, r0
 800ad8a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f7ff fc65 	bl	800a65c <read_submessage_list>
 800ad92:	f000 fc5d 	bl	800b650 <uxr_millis>
 800ad96:	1b40      	subs	r0, r0, r5
 800ad98:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dcbe      	bgt.n	800ad1e <wait_session_status+0x42>
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	7960      	ldrb	r0, [r4, #5]
 800ada4:	f10b 0b01 	add.w	fp, fp, #1
 800ada8:	455b      	cmp	r3, fp
 800adaa:	d001      	beq.n	800adb0 <wait_session_status+0xd4>
 800adac:	28ff      	cmp	r0, #255	; 0xff
 800adae:	d0a3      	beq.n	800acf8 <wait_session_status+0x1c>
 800adb0:	38ff      	subs	r0, #255	; 0xff
 800adb2:	bf18      	it	ne
 800adb4:	2001      	movne	r0, #1
 800adb6:	b01d      	add	sp, #116	; 0x74
 800adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800adc0:	9304      	str	r3, [sp, #16]
 800adc2:	4631      	mov	r1, r6
 800adc4:	f104 0008 	add.w	r0, r4, #8
 800adc8:	f000 fbdc 	bl	800b584 <uxr_get_input_reliable_stream>
 800adcc:	4680      	mov	r8, r0
 800adce:	b348      	cbz	r0, 800ae24 <wait_session_status+0x148>
 800add0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800add2:	9205      	str	r2, [sp, #20]
 800add4:	a80c      	add	r0, sp, #48	; 0x30
 800add6:	f7fe fff3 	bl	8009dc0 <ucdr_buffer_remaining>
 800adda:	4603      	mov	r3, r0
 800addc:	f10d 001d 	add.w	r0, sp, #29
 800ade0:	9000      	str	r0, [sp, #0]
 800ade2:	9a05      	ldr	r2, [sp, #20]
 800ade4:	9902      	ldr	r1, [sp, #8]
 800ade6:	4640      	mov	r0, r8
 800ade8:	f004 fbc4 	bl	800f574 <uxr_receive_reliable_message>
 800adec:	b1d0      	cbz	r0, 800ae24 <wait_session_status+0x148>
 800adee:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d03a      	beq.n	800ae6c <wait_session_status+0x190>
 800adf6:	9f04      	ldr	r7, [sp, #16]
 800adf8:	e00a      	b.n	800ae10 <wait_session_status+0x134>
 800adfa:	f04f 0302 	mov.w	r3, #2
 800adfe:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800ae02:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ae06:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800ae0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae0c:	f7ff fc26 	bl	800a65c <read_submessage_list>
 800ae10:	a914      	add	r1, sp, #80	; 0x50
 800ae12:	2204      	movs	r2, #4
 800ae14:	4640      	mov	r0, r8
 800ae16:	f004 fc2d 	bl	800f674 <uxr_next_input_reliable_buffer_available>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	a914      	add	r1, sp, #80	; 0x50
 800ae1e:	4620      	mov	r0, r4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1ea      	bne.n	800adfa <wait_session_status+0x11e>
 800ae24:	9904      	ldr	r1, [sp, #16]
 800ae26:	4632      	mov	r2, r6
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f7ff fa93 	bl	800a354 <write_submessage_acknack.isra.0>
 800ae2e:	e76f      	b.n	800ad10 <wait_session_status+0x34>
 800ae30:	4631      	mov	r1, r6
 800ae32:	f104 0008 	add.w	r0, r4, #8
 800ae36:	f000 fb9b 	bl	800b570 <uxr_get_input_best_effort_stream>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	f43f af68 	beq.w	800ad10 <wait_session_status+0x34>
 800ae40:	9902      	ldr	r1, [sp, #8]
 800ae42:	f004 fb03 	bl	800f44c <uxr_receive_best_effort_message>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f43f af62 	beq.w	800ad10 <wait_session_status+0x34>
 800ae4c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ae50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae52:	a90c      	add	r1, sp, #48	; 0x30
 800ae54:	4620      	mov	r0, r4
 800ae56:	f7ff fc01 	bl	800a65c <read_submessage_list>
 800ae5a:	e759      	b.n	800ad10 <wait_session_status+0x34>
 800ae5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae5e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ae62:	47a0      	blx	r4
 800ae64:	2001      	movs	r0, #1
 800ae66:	b01d      	add	sp, #116	; 0x74
 800ae68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ae70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae72:	a90c      	add	r1, sp, #48	; 0x30
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7ff fbf1 	bl	800a65c <read_submessage_list>
 800ae7a:	e7bc      	b.n	800adf6 <wait_session_status+0x11a>

0800ae7c <uxr_delete_session_retries>:
 800ae7c:	b530      	push	{r4, r5, lr}
 800ae7e:	b08f      	sub	sp, #60	; 0x3c
 800ae80:	4604      	mov	r4, r0
 800ae82:	460d      	mov	r5, r1
 800ae84:	f000 fa2e 	bl	800b2e4 <uxr_session_header_offset>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	2210      	movs	r2, #16
 800ae8c:	9000      	str	r0, [sp, #0]
 800ae8e:	a902      	add	r1, sp, #8
 800ae90:	a806      	add	r0, sp, #24
 800ae92:	f7fe ff53 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800ae96:	a906      	add	r1, sp, #24
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 f973 	bl	800b184 <uxr_buffer_delete_session>
 800ae9e:	2200      	movs	r2, #0
 800aea0:	4611      	mov	r1, r2
 800aea2:	9b06      	ldr	r3, [sp, #24]
 800aea4:	4620      	mov	r0, r4
 800aea6:	f000 f9c7 	bl	800b238 <uxr_stamp_session_header>
 800aeaa:	a806      	add	r0, sp, #24
 800aeac:	f7fe ff84 	bl	8009db8 <ucdr_buffer_length>
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	a902      	add	r1, sp, #8
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f7ff ff10 	bl	800acdc <wait_session_status>
 800aebc:	b118      	cbz	r0, 800aec6 <uxr_delete_session_retries+0x4a>
 800aebe:	7960      	ldrb	r0, [r4, #5]
 800aec0:	fab0 f080 	clz	r0, r0
 800aec4:	0940      	lsrs	r0, r0, #5
 800aec6:	b00f      	add	sp, #60	; 0x3c
 800aec8:	bd30      	pop	{r4, r5, pc}
 800aeca:	bf00      	nop

0800aecc <uxr_create_session>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	f100 0b08 	add.w	fp, r0, #8
 800aed4:	b0ab      	sub	sp, #172	; 0xac
 800aed6:	4604      	mov	r4, r0
 800aed8:	4658      	mov	r0, fp
 800aeda:	f000 fa99 	bl	800b410 <uxr_reset_stream_storage>
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fa00 	bl	800b2e4 <uxr_session_header_offset>
 800aee4:	2300      	movs	r3, #0
 800aee6:	9000      	str	r0, [sp, #0]
 800aee8:	221c      	movs	r2, #28
 800aeea:	a90b      	add	r1, sp, #44	; 0x2c
 800aeec:	a812      	add	r0, sp, #72	; 0x48
 800aeee:	f7fe ff25 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800aef2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aef4:	8a1a      	ldrh	r2, [r3, #16]
 800aef6:	3a04      	subs	r2, #4
 800aef8:	b292      	uxth	r2, r2
 800aefa:	a912      	add	r1, sp, #72	; 0x48
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 f917 	bl	800b130 <uxr_buffer_create_session>
 800af02:	9912      	ldr	r1, [sp, #72]	; 0x48
 800af04:	4620      	mov	r0, r4
 800af06:	f000 f983 	bl	800b210 <uxr_stamp_create_session_header>
 800af0a:	a812      	add	r0, sp, #72	; 0x48
 800af0c:	f7fe ff54 	bl	8009db8 <ucdr_buffer_length>
 800af10:	23ff      	movs	r3, #255	; 0xff
 800af12:	7163      	strb	r3, [r4, #5]
 800af14:	230a      	movs	r3, #10
 800af16:	46da      	mov	sl, fp
 800af18:	9303      	str	r3, [sp, #12]
 800af1a:	4683      	mov	fp, r0
 800af1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800af1e:	465a      	mov	r2, fp
 800af20:	e9d3 0500 	ldrd	r0, r5, [r3]
 800af24:	a90b      	add	r1, sp, #44	; 0x2c
 800af26:	47a8      	blx	r5
 800af28:	f000 fb92 	bl	800b650 <uxr_millis>
 800af2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af30:	4605      	mov	r5, r0
 800af32:	e009      	b.n	800af48 <uxr_create_session+0x7c>
 800af34:	f000 fb8c 	bl	800b650 <uxr_millis>
 800af38:	1b40      	subs	r0, r0, r5
 800af3a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800af3e:	2b00      	cmp	r3, #0
 800af40:	7962      	ldrb	r2, [r4, #5]
 800af42:	dd38      	ble.n	800afb6 <uxr_create_session+0xea>
 800af44:	2aff      	cmp	r2, #255	; 0xff
 800af46:	d13c      	bne.n	800afc2 <uxr_create_session+0xf6>
 800af48:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800af4a:	a907      	add	r1, sp, #28
 800af4c:	6896      	ldr	r6, [r2, #8]
 800af4e:	6810      	ldr	r0, [r2, #0]
 800af50:	aa08      	add	r2, sp, #32
 800af52:	47b0      	blx	r6
 800af54:	2800      	cmp	r0, #0
 800af56:	d0ed      	beq.n	800af34 <uxr_create_session+0x68>
 800af58:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800af5c:	a81a      	add	r0, sp, #104	; 0x68
 800af5e:	f7fe feff 	bl	8009d60 <ucdr_init_buffer>
 800af62:	2600      	movs	r6, #0
 800af64:	f10d 031a 	add.w	r3, sp, #26
 800af68:	aa06      	add	r2, sp, #24
 800af6a:	a91a      	add	r1, sp, #104	; 0x68
 800af6c:	4620      	mov	r0, r4
 800af6e:	f88d 6018 	strb.w	r6, [sp, #24]
 800af72:	f000 f975 	bl	800b260 <uxr_read_session_header>
 800af76:	2800      	cmp	r0, #0
 800af78:	d0dc      	beq.n	800af34 <uxr_create_session+0x68>
 800af7a:	4631      	mov	r1, r6
 800af7c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800af80:	f000 fa12 	bl	800b3a8 <uxr_stream_id_from_raw>
 800af84:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800af88:	2e01      	cmp	r6, #1
 800af8a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800af8e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800af92:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800af96:	d053      	beq.n	800b040 <uxr_create_session+0x174>
 800af98:	2e02      	cmp	r6, #2
 800af9a:	d018      	beq.n	800afce <uxr_create_session+0x102>
 800af9c:	2e00      	cmp	r6, #0
 800af9e:	d1c9      	bne.n	800af34 <uxr_create_session+0x68>
 800afa0:	4631      	mov	r1, r6
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 fa00 	bl	800b3a8 <uxr_stream_id_from_raw>
 800afa8:	a91a      	add	r1, sp, #104	; 0x68
 800afaa:	4602      	mov	r2, r0
 800afac:	900a      	str	r0, [sp, #40]	; 0x28
 800afae:	4620      	mov	r0, r4
 800afb0:	f7ff fb54 	bl	800a65c <read_submessage_list>
 800afb4:	e7be      	b.n	800af34 <uxr_create_session+0x68>
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	3b01      	subs	r3, #1
 800afba:	9303      	str	r3, [sp, #12]
 800afbc:	d001      	beq.n	800afc2 <uxr_create_session+0xf6>
 800afbe:	2aff      	cmp	r2, #255	; 0xff
 800afc0:	d0ac      	beq.n	800af1c <uxr_create_session+0x50>
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	d051      	beq.n	800b06a <uxr_create_session+0x19e>
 800afc6:	2000      	movs	r0, #0
 800afc8:	b02b      	add	sp, #172	; 0xac
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afce:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	4639      	mov	r1, r7
 800afd6:	4650      	mov	r0, sl
 800afd8:	f000 fad4 	bl	800b584 <uxr_get_input_reliable_stream>
 800afdc:	4680      	mov	r8, r0
 800afde:	b348      	cbz	r0, 800b034 <uxr_create_session+0x168>
 800afe0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afe2:	9205      	str	r2, [sp, #20]
 800afe4:	a81a      	add	r0, sp, #104	; 0x68
 800afe6:	f7fe feeb 	bl	8009dc0 <ucdr_buffer_remaining>
 800afea:	4603      	mov	r3, r0
 800afec:	f10d 0019 	add.w	r0, sp, #25
 800aff0:	9000      	str	r0, [sp, #0]
 800aff2:	9a05      	ldr	r2, [sp, #20]
 800aff4:	4649      	mov	r1, r9
 800aff6:	4640      	mov	r0, r8
 800aff8:	f004 fabc 	bl	800f574 <uxr_receive_reliable_message>
 800affc:	b1d0      	cbz	r0, 800b034 <uxr_create_session+0x168>
 800affe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d038      	beq.n	800b078 <uxr_create_session+0x1ac>
 800b006:	9e04      	ldr	r6, [sp, #16]
 800b008:	e00a      	b.n	800b020 <uxr_create_session+0x154>
 800b00a:	f04f 0302 	mov.w	r3, #2
 800b00e:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800b012:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800b016:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b01a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b01c:	f7ff fb1e 	bl	800a65c <read_submessage_list>
 800b020:	a922      	add	r1, sp, #136	; 0x88
 800b022:	2204      	movs	r2, #4
 800b024:	4640      	mov	r0, r8
 800b026:	f004 fb25 	bl	800f674 <uxr_next_input_reliable_buffer_available>
 800b02a:	4603      	mov	r3, r0
 800b02c:	a922      	add	r1, sp, #136	; 0x88
 800b02e:	4620      	mov	r0, r4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1ea      	bne.n	800b00a <uxr_create_session+0x13e>
 800b034:	9904      	ldr	r1, [sp, #16]
 800b036:	463a      	mov	r2, r7
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff f98b 	bl	800a354 <write_submessage_acknack.isra.0>
 800b03e:	e779      	b.n	800af34 <uxr_create_session+0x68>
 800b040:	4639      	mov	r1, r7
 800b042:	4650      	mov	r0, sl
 800b044:	f000 fa94 	bl	800b570 <uxr_get_input_best_effort_stream>
 800b048:	2800      	cmp	r0, #0
 800b04a:	f43f af73 	beq.w	800af34 <uxr_create_session+0x68>
 800b04e:	4649      	mov	r1, r9
 800b050:	f004 f9fc 	bl	800f44c <uxr_receive_best_effort_message>
 800b054:	2800      	cmp	r0, #0
 800b056:	f43f af6d 	beq.w	800af34 <uxr_create_session+0x68>
 800b05a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b05e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b060:	a91a      	add	r1, sp, #104	; 0x68
 800b062:	4620      	mov	r0, r4
 800b064:	f7ff fafa 	bl	800a65c <read_submessage_list>
 800b068:	e764      	b.n	800af34 <uxr_create_session+0x68>
 800b06a:	4650      	mov	r0, sl
 800b06c:	f000 f9d0 	bl	800b410 <uxr_reset_stream_storage>
 800b070:	2001      	movs	r0, #1
 800b072:	b02b      	add	sp, #172	; 0xac
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b07e:	a91a      	add	r1, sp, #104	; 0x68
 800b080:	4620      	mov	r0, r4
 800b082:	f7ff faeb 	bl	800a65c <read_submessage_list>
 800b086:	e7be      	b.n	800b006 <uxr_create_session+0x13a>

0800b088 <uxr_prepare_stream_to_write_submessage>:
 800b088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b08c:	b082      	sub	sp, #8
 800b08e:	4682      	mov	sl, r0
 800b090:	4610      	mov	r0, r2
 800b092:	4615      	mov	r5, r2
 800b094:	461e      	mov	r6, r3
 800b096:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800b09a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800b09e:	9101      	str	r1, [sp, #4]
 800b0a0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b0a4:	f000 face 	bl	800b644 <uxr_submessage_padding>
 800b0a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0ac:	f105 0904 	add.w	r9, r5, #4
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	4481      	add	r9, r0
 800b0b4:	d01d      	beq.n	800b0f2 <uxr_prepare_stream_to_write_submessage+0x6a>
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d116      	bne.n	800b0e8 <uxr_prepare_stream_to_write_submessage+0x60>
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	f10a 0008 	add.w	r0, sl, #8
 800b0c0:	f000 fa4c 	bl	800b55c <uxr_get_output_reliable_stream>
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	b158      	cbz	r0, 800b0e0 <uxr_prepare_stream_to_write_submessage+0x58>
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	4632      	mov	r2, r6
 800b0cc:	f004 fc8e 	bl	800f9ec <uxr_prepare_reliable_buffer_to_write>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	b12c      	cbz	r4, 800b0e0 <uxr_prepare_stream_to_write_submessage+0x58>
 800b0d4:	4643      	mov	r3, r8
 800b0d6:	b2aa      	uxth	r2, r5
 800b0d8:	4639      	mov	r1, r7
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f000 fa72 	bl	800b5c4 <uxr_buffer_submessage_header>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	b002      	add	sp, #8
 800b0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e8:	2400      	movs	r4, #0
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	b002      	add	sp, #8
 800b0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	f10a 0008 	add.w	r0, sl, #8
 800b0f8:	f000 fa28 	bl	800b54c <uxr_get_output_best_effort_stream>
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d0ee      	beq.n	800b0e0 <uxr_prepare_stream_to_write_submessage+0x58>
 800b102:	4649      	mov	r1, r9
 800b104:	4632      	mov	r2, r6
 800b106:	f004 fba1 	bl	800f84c <uxr_prepare_best_effort_buffer_to_write>
 800b10a:	4604      	mov	r4, r0
 800b10c:	e7e1      	b.n	800b0d2 <uxr_prepare_stream_to_write_submessage+0x4a>
 800b10e:	bf00      	nop

0800b110 <uxr_init_session_info>:
 800b110:	0e13      	lsrs	r3, r2, #24
 800b112:	7043      	strb	r3, [r0, #1]
 800b114:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800b118:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b11c:	7001      	strb	r1, [r0, #0]
 800b11e:	70c3      	strb	r3, [r0, #3]
 800b120:	2109      	movs	r1, #9
 800b122:	23ff      	movs	r3, #255	; 0xff
 800b124:	f880 c002 	strb.w	ip, [r0, #2]
 800b128:	7102      	strb	r2, [r0, #4]
 800b12a:	80c1      	strh	r1, [r0, #6]
 800b12c:	7143      	strb	r3, [r0, #5]
 800b12e:	4770      	bx	lr

0800b130 <uxr_buffer_create_session>:
 800b130:	b530      	push	{r4, r5, lr}
 800b132:	b089      	sub	sp, #36	; 0x24
 800b134:	2300      	movs	r3, #0
 800b136:	4d12      	ldr	r5, [pc, #72]	; (800b180 <uxr_buffer_create_session+0x50>)
 800b138:	9307      	str	r3, [sp, #28]
 800b13a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b13e:	2201      	movs	r2, #1
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	80c2      	strh	r2, [r0, #6]
 800b144:	f88d 2004 	strb.w	r2, [sp, #4]
 800b148:	682a      	ldr	r2, [r5, #0]
 800b14a:	9200      	str	r2, [sp, #0]
 800b14c:	88aa      	ldrh	r2, [r5, #4]
 800b14e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b152:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800b156:	9202      	str	r2, [sp, #8]
 800b158:	460c      	mov	r4, r1
 800b15a:	7802      	ldrb	r2, [r0, #0]
 800b15c:	9303      	str	r3, [sp, #12]
 800b15e:	4619      	mov	r1, r3
 800b160:	f88d 200c 	strb.w	r2, [sp, #12]
 800b164:	4620      	mov	r0, r4
 800b166:	2210      	movs	r2, #16
 800b168:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800b16c:	9306      	str	r3, [sp, #24]
 800b16e:	f000 fa29 	bl	800b5c4 <uxr_buffer_submessage_header>
 800b172:	4669      	mov	r1, sp
 800b174:	4620      	mov	r0, r4
 800b176:	f001 fa6d 	bl	800c654 <uxr_serialize_CREATE_CLIENT_Payload>
 800b17a:	b009      	add	sp, #36	; 0x24
 800b17c:	bd30      	pop	{r4, r5, pc}
 800b17e:	bf00      	nop
 800b180:	08012b4c 	.word	0x08012b4c

0800b184 <uxr_buffer_delete_session>:
 800b184:	b510      	push	{r4, lr}
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <uxr_buffer_delete_session+0x34>)
 800b188:	b082      	sub	sp, #8
 800b18a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800b18e:	f8ad c006 	strh.w	ip, [sp, #6]
 800b192:	460c      	mov	r4, r1
 800b194:	2202      	movs	r2, #2
 800b196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b19a:	80c2      	strh	r2, [r0, #6]
 800b19c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b1a0:	2204      	movs	r2, #4
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2103      	movs	r1, #3
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fa0c 	bl	800b5c4 <uxr_buffer_submessage_header>
 800b1ac:	a901      	add	r1, sp, #4
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f001 faf6 	bl	800c7a0 <uxr_serialize_DELETE_Payload>
 800b1b4:	b002      	add	sp, #8
 800b1b6:	bd10      	pop	{r4, pc}
 800b1b8:	08012b4c 	.word	0x08012b4c

0800b1bc <uxr_read_create_session_status>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	a901      	add	r1, sp, #4
 800b1c6:	f001 fafb 	bl	800c7c0 <uxr_deserialize_STATUS_AGENT_Payload>
 800b1ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b1ce:	7163      	strb	r3, [r4, #5]
 800b1d0:	b008      	add	sp, #32
 800b1d2:	bd10      	pop	{r4, pc}

0800b1d4 <uxr_read_delete_session_status>:
 800b1d4:	b510      	push	{r4, lr}
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	b084      	sub	sp, #16
 800b1da:	4608      	mov	r0, r1
 800b1dc:	a902      	add	r1, sp, #8
 800b1de:	f001 fb1f 	bl	800c820 <uxr_deserialize_STATUS_Payload>
 800b1e2:	88e3      	ldrh	r3, [r4, #6]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d001      	beq.n	800b1ec <uxr_read_delete_session_status+0x18>
 800b1e8:	b004      	add	sp, #16
 800b1ea:	bd10      	pop	{r4, pc}
 800b1ec:	f10d 000a 	add.w	r0, sp, #10
 800b1f0:	f7ff f836 	bl	800a260 <uxr_object_id_from_raw>
 800b1f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b1f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b1fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b200:	b29b      	uxth	r3, r3
 800b202:	2b02      	cmp	r3, #2
 800b204:	bf04      	itt	eq
 800b206:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800b20a:	7163      	strbeq	r3, [r4, #5]
 800b20c:	b004      	add	sp, #16
 800b20e:	bd10      	pop	{r4, pc}

0800b210 <uxr_stamp_create_session_header>:
 800b210:	b510      	push	{r4, lr}
 800b212:	2208      	movs	r2, #8
 800b214:	b08a      	sub	sp, #40	; 0x28
 800b216:	4604      	mov	r4, r0
 800b218:	eb0d 0002 	add.w	r0, sp, r2
 800b21c:	f7fe fda0 	bl	8009d60 <ucdr_init_buffer>
 800b220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b224:	9400      	str	r4, [sp, #0]
 800b226:	2300      	movs	r3, #0
 800b228:	461a      	mov	r2, r3
 800b22a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b22e:	a802      	add	r0, sp, #8
 800b230:	f000 fbc2 	bl	800b9b8 <uxr_serialize_message_header>
 800b234:	b00a      	add	sp, #40	; 0x28
 800b236:	bd10      	pop	{r4, pc}

0800b238 <uxr_stamp_session_header>:
 800b238:	b530      	push	{r4, r5, lr}
 800b23a:	b08d      	sub	sp, #52	; 0x34
 800b23c:	4604      	mov	r4, r0
 800b23e:	460d      	mov	r5, r1
 800b240:	9203      	str	r2, [sp, #12]
 800b242:	4619      	mov	r1, r3
 800b244:	a804      	add	r0, sp, #16
 800b246:	2208      	movs	r2, #8
 800b248:	f7fe fd8a 	bl	8009d60 <ucdr_init_buffer>
 800b24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	9400      	str	r4, [sp, #0]
 800b254:	462a      	mov	r2, r5
 800b256:	a804      	add	r0, sp, #16
 800b258:	f000 fbae 	bl	800b9b8 <uxr_serialize_message_header>
 800b25c:	b00d      	add	sp, #52	; 0x34
 800b25e:	bd30      	pop	{r4, r5, pc}

0800b260 <uxr_read_session_header>:
 800b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	4607      	mov	r7, r0
 800b266:	b084      	sub	sp, #16
 800b268:	4608      	mov	r0, r1
 800b26a:	460c      	mov	r4, r1
 800b26c:	4615      	mov	r5, r2
 800b26e:	461e      	mov	r6, r3
 800b270:	f7fe fda6 	bl	8009dc0 <ucdr_buffer_remaining>
 800b274:	2808      	cmp	r0, #8
 800b276:	d803      	bhi.n	800b280 <uxr_read_session_header+0x20>
 800b278:	2000      	movs	r0, #0
 800b27a:	b004      	add	sp, #16
 800b27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b280:	f10d 080c 	add.w	r8, sp, #12
 800b284:	4633      	mov	r3, r6
 800b286:	462a      	mov	r2, r5
 800b288:	f8cd 8000 	str.w	r8, [sp]
 800b28c:	4620      	mov	r0, r4
 800b28e:	f10d 010b 	add.w	r1, sp, #11
 800b292:	f000 fbaf 	bl	800b9f4 <uxr_deserialize_message_header>
 800b296:	783a      	ldrb	r2, [r7, #0]
 800b298:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d1eb      	bne.n	800b278 <uxr_read_session_header+0x18>
 800b2a0:	061b      	lsls	r3, r3, #24
 800b2a2:	d41c      	bmi.n	800b2de <uxr_read_session_header+0x7e>
 800b2a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b2a8:	787b      	ldrb	r3, [r7, #1]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d003      	beq.n	800b2b6 <uxr_read_session_header+0x56>
 800b2ae:	2001      	movs	r0, #1
 800b2b0:	f080 0001 	eor.w	r0, r0, #1
 800b2b4:	e7e1      	b.n	800b27a <uxr_read_session_header+0x1a>
 800b2b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800b2ba:	78bb      	ldrb	r3, [r7, #2]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	f107 0102 	add.w	r1, r7, #2
 800b2c2:	d1f4      	bne.n	800b2ae <uxr_read_session_header+0x4e>
 800b2c4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b2c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d1ee      	bne.n	800b2ae <uxr_read_session_header+0x4e>
 800b2d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b2d4:	784b      	ldrb	r3, [r1, #1]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d1e9      	bne.n	800b2ae <uxr_read_session_header+0x4e>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e7e8      	b.n	800b2b0 <uxr_read_session_header+0x50>
 800b2de:	2001      	movs	r0, #1
 800b2e0:	e7cb      	b.n	800b27a <uxr_read_session_header+0x1a>
 800b2e2:	bf00      	nop

0800b2e4 <uxr_session_header_offset>:
 800b2e4:	f990 3000 	ldrsb.w	r3, [r0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bfac      	ite	ge
 800b2ec:	2008      	movge	r0, #8
 800b2ee:	2004      	movlt	r0, #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop

0800b2f4 <uxr_init_base_object_request>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	88c3      	ldrh	r3, [r0, #6]
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800b2fe:	9101      	str	r1, [sp, #4]
 800b300:	f1a3 010a 	sub.w	r1, r3, #10
 800b304:	b289      	uxth	r1, r1
 800b306:	42a1      	cmp	r1, r4
 800b308:	d80e      	bhi.n	800b328 <uxr_init_base_object_request+0x34>
 800b30a:	3301      	adds	r3, #1
 800b30c:	b29c      	uxth	r4, r3
 800b30e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b312:	b2db      	uxtb	r3, r3
 800b314:	80c4      	strh	r4, [r0, #6]
 800b316:	9801      	ldr	r0, [sp, #4]
 800b318:	7011      	strb	r1, [r2, #0]
 800b31a:	7053      	strb	r3, [r2, #1]
 800b31c:	1c91      	adds	r1, r2, #2
 800b31e:	f7fe ffb3 	bl	800a288 <uxr_object_id_to_raw>
 800b322:	4620      	mov	r0, r4
 800b324:	b002      	add	sp, #8
 800b326:	bd10      	pop	{r4, pc}
 800b328:	230a      	movs	r3, #10
 800b32a:	2100      	movs	r1, #0
 800b32c:	461c      	mov	r4, r3
 800b32e:	e7f1      	b.n	800b314 <uxr_init_base_object_request+0x20>

0800b330 <uxr_parse_base_object_request>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	4604      	mov	r4, r0
 800b334:	3002      	adds	r0, #2
 800b336:	460d      	mov	r5, r1
 800b338:	4616      	mov	r6, r2
 800b33a:	f7fe ff91 	bl	800a260 <uxr_object_id_from_raw>
 800b33e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800b342:	8028      	strh	r0, [r5, #0]
 800b344:	806b      	strh	r3, [r5, #2]
 800b346:	7822      	ldrb	r2, [r4, #0]
 800b348:	7863      	ldrb	r3, [r4, #1]
 800b34a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b34e:	8033      	strh	r3, [r6, #0]
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	bf00      	nop

0800b354 <uxr_stream_id>:
 800b354:	2901      	cmp	r1, #1
 800b356:	b082      	sub	sp, #8
 800b358:	d01d      	beq.n	800b396 <uxr_stream_id+0x42>
 800b35a:	2902      	cmp	r1, #2
 800b35c:	f04f 0c00 	mov.w	ip, #0
 800b360:	d01e      	beq.n	800b3a0 <uxr_stream_id+0x4c>
 800b362:	2300      	movs	r3, #0
 800b364:	f36c 0307 	bfi	r3, ip, #0, #8
 800b368:	f360 230f 	bfi	r3, r0, #8, #8
 800b36c:	f361 4317 	bfi	r3, r1, #16, #8
 800b370:	f362 631f 	bfi	r3, r2, #24, #8
 800b374:	b2da      	uxtb	r2, r3
 800b376:	2000      	movs	r0, #0
 800b378:	f362 0007 	bfi	r0, r2, #0, #8
 800b37c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b380:	f362 200f 	bfi	r0, r2, #8, #8
 800b384:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b388:	f362 4017 	bfi	r0, r2, #16, #8
 800b38c:	0e1b      	lsrs	r3, r3, #24
 800b38e:	f363 601f 	bfi	r0, r3, #24, #8
 800b392:	b002      	add	sp, #8
 800b394:	4770      	bx	lr
 800b396:	f100 0c01 	add.w	ip, r0, #1
 800b39a:	fa5f fc8c 	uxtb.w	ip, ip
 800b39e:	e7e0      	b.n	800b362 <uxr_stream_id+0xe>
 800b3a0:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800b3a4:	e7dd      	b.n	800b362 <uxr_stream_id+0xe>
 800b3a6:	bf00      	nop

0800b3a8 <uxr_stream_id_from_raw>:
 800b3a8:	b082      	sub	sp, #8
 800b3aa:	b130      	cbz	r0, 800b3ba <uxr_stream_id_from_raw+0x12>
 800b3ac:	0603      	lsls	r3, r0, #24
 800b3ae:	d420      	bmi.n	800b3f2 <uxr_stream_id_from_raw+0x4a>
 800b3b0:	1e42      	subs	r2, r0, #1
 800b3b2:	b2d2      	uxtb	r2, r2
 800b3b4:	f04f 0c01 	mov.w	ip, #1
 800b3b8:	e001      	b.n	800b3be <uxr_stream_id_from_raw+0x16>
 800b3ba:	4684      	mov	ip, r0
 800b3bc:	4602      	mov	r2, r0
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f360 0307 	bfi	r3, r0, #0, #8
 800b3c4:	f362 230f 	bfi	r3, r2, #8, #8
 800b3c8:	f36c 4317 	bfi	r3, ip, #16, #8
 800b3cc:	f361 631f 	bfi	r3, r1, #24, #8
 800b3d0:	b2da      	uxtb	r2, r3
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	f362 0007 	bfi	r0, r2, #0, #8
 800b3d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b3dc:	f362 200f 	bfi	r0, r2, #8, #8
 800b3e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b3e4:	f362 4017 	bfi	r0, r2, #16, #8
 800b3e8:	0e1b      	lsrs	r3, r3, #24
 800b3ea:	f363 601f 	bfi	r0, r3, #24, #8
 800b3ee:	b002      	add	sp, #8
 800b3f0:	4770      	bx	lr
 800b3f2:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800b3f6:	f04f 0c02 	mov.w	ip, #2
 800b3fa:	e7e0      	b.n	800b3be <uxr_stream_id_from_raw+0x16>

0800b3fc <uxr_init_stream_storage>:
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	7403      	strb	r3, [r0, #16]
 800b400:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800b404:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800b408:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop

0800b410 <uxr_reset_stream_storage>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	7c03      	ldrb	r3, [r0, #16]
 800b414:	4604      	mov	r4, r0
 800b416:	b153      	cbz	r3, 800b42e <uxr_reset_stream_storage+0x1e>
 800b418:	4606      	mov	r6, r0
 800b41a:	2500      	movs	r5, #0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f004 fa0f 	bl	800f840 <uxr_reset_output_best_effort_stream>
 800b422:	7c23      	ldrb	r3, [r4, #16]
 800b424:	3501      	adds	r5, #1
 800b426:	42ab      	cmp	r3, r5
 800b428:	f106 0610 	add.w	r6, r6, #16
 800b42c:	d8f6      	bhi.n	800b41c <uxr_reset_stream_storage+0xc>
 800b42e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b432:	b163      	cbz	r3, 800b44e <uxr_reset_stream_storage+0x3e>
 800b434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b438:	2500      	movs	r5, #0
 800b43a:	4630      	mov	r0, r6
 800b43c:	f004 f802 	bl	800f444 <uxr_reset_input_best_effort_stream>
 800b440:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b444:	3501      	adds	r5, #1
 800b446:	42ab      	cmp	r3, r5
 800b448:	f106 0602 	add.w	r6, r6, #2
 800b44c:	d8f5      	bhi.n	800b43a <uxr_reset_stream_storage+0x2a>
 800b44e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b452:	b163      	cbz	r3, 800b46e <uxr_reset_stream_storage+0x5e>
 800b454:	f104 0618 	add.w	r6, r4, #24
 800b458:	2500      	movs	r5, #0
 800b45a:	4630      	mov	r0, r6
 800b45c:	f004 fa9c 	bl	800f998 <uxr_reset_output_reliable_stream>
 800b460:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b464:	3501      	adds	r5, #1
 800b466:	42ab      	cmp	r3, r5
 800b468:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b46c:	d8f5      	bhi.n	800b45a <uxr_reset_stream_storage+0x4a>
 800b46e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b472:	b163      	cbz	r3, 800b48e <uxr_reset_stream_storage+0x7e>
 800b474:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800b478:	2500      	movs	r5, #0
 800b47a:	4630      	mov	r0, r6
 800b47c:	f004 f856 	bl	800f52c <uxr_reset_input_reliable_stream>
 800b480:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b484:	3501      	adds	r5, #1
 800b486:	42ab      	cmp	r3, r5
 800b488:	f106 0618 	add.w	r6, r6, #24
 800b48c:	d8f5      	bhi.n	800b47a <uxr_reset_stream_storage+0x6a>
 800b48e:	bd70      	pop	{r4, r5, r6, pc}

0800b490 <uxr_add_output_best_effort_buffer>:
 800b490:	b510      	push	{r4, lr}
 800b492:	7c04      	ldrb	r4, [r0, #16]
 800b494:	f104 0c01 	add.w	ip, r4, #1
 800b498:	b082      	sub	sp, #8
 800b49a:	f880 c010 	strb.w	ip, [r0, #16]
 800b49e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800b4a2:	f004 f9c3 	bl	800f82c <uxr_init_output_best_effort_stream>
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	b002      	add	sp, #8
 800b4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b2:	f7ff bf4f 	b.w	800b354 <uxr_stream_id>
 800b4b6:	bf00      	nop

0800b4b8 <uxr_add_output_reliable_buffer>:
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	4684      	mov	ip, r0
 800b4be:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b4c2:	9000      	str	r0, [sp, #0]
 800b4c4:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800b4c8:	2028      	movs	r0, #40	; 0x28
 800b4ca:	fb00 c004 	mla	r0, r0, r4, ip
 800b4ce:	f104 0e01 	add.w	lr, r4, #1
 800b4d2:	3018      	adds	r0, #24
 800b4d4:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800b4d8:	f004 fa26 	bl	800f928 <uxr_init_output_reliable_stream>
 800b4dc:	2201      	movs	r2, #1
 800b4de:	2102      	movs	r1, #2
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	b004      	add	sp, #16
 800b4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e8:	f7ff bf34 	b.w	800b354 <uxr_stream_id>

0800b4ec <uxr_add_input_best_effort_buffer>:
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	1c62      	adds	r2, r4, #1
 800b4f6:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b504:	f003 ff9a 	bl	800f43c <uxr_init_input_best_effort_stream>
 800b508:	2200      	movs	r2, #0
 800b50a:	2101      	movs	r1, #1
 800b50c:	4620      	mov	r0, r4
 800b50e:	b002      	add	sp, #8
 800b510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b514:	f7ff bf1e 	b.w	800b354 <uxr_stream_id>

0800b518 <uxr_add_input_reliable_buffer>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	4684      	mov	ip, r0
 800b51e:	9806      	ldr	r0, [sp, #24]
 800b520:	9000      	str	r0, [sp, #0]
 800b522:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800b526:	2018      	movs	r0, #24
 800b528:	fb00 c004 	mla	r0, r0, r4, ip
 800b52c:	f104 0e01 	add.w	lr, r4, #1
 800b530:	3048      	adds	r0, #72	; 0x48
 800b532:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800b536:	f003 ffcd 	bl	800f4d4 <uxr_init_input_reliable_stream>
 800b53a:	2200      	movs	r2, #0
 800b53c:	2102      	movs	r1, #2
 800b53e:	4620      	mov	r0, r4
 800b540:	b004      	add	sp, #16
 800b542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b546:	f7ff bf05 	b.w	800b354 <uxr_stream_id>
 800b54a:	bf00      	nop

0800b54c <uxr_get_output_best_effort_stream>:
 800b54c:	7c03      	ldrb	r3, [r0, #16]
 800b54e:	428b      	cmp	r3, r1
 800b550:	bf8c      	ite	hi
 800b552:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800b556:	2000      	movls	r0, #0
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop

0800b55c <uxr_get_output_reliable_stream>:
 800b55c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b560:	428b      	cmp	r3, r1
 800b562:	bf83      	ittte	hi
 800b564:	2328      	movhi	r3, #40	; 0x28
 800b566:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b56a:	3018      	addhi	r0, #24
 800b56c:	2000      	movls	r0, #0
 800b56e:	4770      	bx	lr

0800b570 <uxr_get_input_best_effort_stream>:
 800b570:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b574:	428b      	cmp	r3, r1
 800b576:	bf86      	itte	hi
 800b578:	3121      	addhi	r1, #33	; 0x21
 800b57a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800b57e:	2000      	movls	r0, #0
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop

0800b584 <uxr_get_input_reliable_stream>:
 800b584:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800b588:	428b      	cmp	r3, r1
 800b58a:	bf83      	ittte	hi
 800b58c:	2318      	movhi	r3, #24
 800b58e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b592:	3048      	addhi	r0, #72	; 0x48
 800b594:	2000      	movls	r0, #0
 800b596:	4770      	bx	lr

0800b598 <uxr_output_streams_confirmed>:
 800b598:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b59c:	b183      	cbz	r3, 800b5c0 <uxr_output_streams_confirmed+0x28>
 800b59e:	b570      	push	{r4, r5, r6, lr}
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	f100 0518 	add.w	r5, r0, #24
 800b5a6:	2400      	movs	r4, #0
 800b5a8:	e001      	b.n	800b5ae <uxr_output_streams_confirmed+0x16>
 800b5aa:	3528      	adds	r5, #40	; 0x28
 800b5ac:	b138      	cbz	r0, 800b5be <uxr_output_streams_confirmed+0x26>
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f004 fc62 	bl	800fe78 <uxr_is_output_up_to_date>
 800b5b4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800b5b8:	3401      	adds	r4, #1
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	d8f5      	bhi.n	800b5aa <uxr_output_streams_confirmed+0x12>
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	4770      	bx	lr

0800b5c4 <uxr_buffer_submessage_header>:
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	460e      	mov	r6, r1
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	4615      	mov	r5, r2
 800b5ce:	461f      	mov	r7, r3
 800b5d0:	f7fe fbe0 	bl	8009d94 <ucdr_align_to>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	ea47 0203 	orr.w	r2, r7, r3
 800b5da:	4631      	mov	r1, r6
 800b5dc:	7523      	strb	r3, [r4, #20]
 800b5de:	4620      	mov	r0, r4
 800b5e0:	462b      	mov	r3, r5
 800b5e2:	f000 fa27 	bl	800ba34 <uxr_serialize_submessage_header>
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f7fe fbea 	bl	8009dc0 <ucdr_buffer_remaining>
 800b5ec:	42a8      	cmp	r0, r5
 800b5ee:	bf34      	ite	cc
 800b5f0:	2000      	movcc	r0, #0
 800b5f2:	2001      	movcs	r0, #1
 800b5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f6:	bf00      	nop

0800b5f8 <uxr_read_submessage_header>:
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	460d      	mov	r5, r1
 800b600:	2104      	movs	r1, #4
 800b602:	4616      	mov	r6, r2
 800b604:	4698      	mov	r8, r3
 800b606:	f7fe fbc5 	bl	8009d94 <ucdr_align_to>
 800b60a:	4620      	mov	r0, r4
 800b60c:	f7fe fbd8 	bl	8009dc0 <ucdr_buffer_remaining>
 800b610:	2803      	cmp	r0, #3
 800b612:	bf8c      	ite	hi
 800b614:	2701      	movhi	r7, #1
 800b616:	2700      	movls	r7, #0
 800b618:	d802      	bhi.n	800b620 <uxr_read_submessage_header+0x28>
 800b61a:	4638      	mov	r0, r7
 800b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b620:	4633      	mov	r3, r6
 800b622:	4642      	mov	r2, r8
 800b624:	4620      	mov	r0, r4
 800b626:	4629      	mov	r1, r5
 800b628:	f000 fa18 	bl	800ba5c <uxr_deserialize_submessage_header>
 800b62c:	f898 3000 	ldrb.w	r3, [r8]
 800b630:	f003 0201 	and.w	r2, r3, #1
 800b634:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b638:	f888 3000 	strb.w	r3, [r8]
 800b63c:	7522      	strb	r2, [r4, #20]
 800b63e:	4638      	mov	r0, r7
 800b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b644 <uxr_submessage_padding>:
 800b644:	f010 0003 	ands.w	r0, r0, #3
 800b648:	bf18      	it	ne
 800b64a:	f1c0 0004 	rsbne	r0, r0, #4
 800b64e:	4770      	bx	lr

0800b650 <uxr_millis>:
 800b650:	b510      	push	{r4, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	4669      	mov	r1, sp
 800b656:	2001      	movs	r0, #1
 800b658:	f7f5 fe06 	bl	8001268 <clock_gettime>
 800b65c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800b660:	4906      	ldr	r1, [pc, #24]	; (800b67c <uxr_millis+0x2c>)
 800b662:	fba0 0301 	umull	r0, r3, r0, r1
 800b666:	1900      	adds	r0, r0, r4
 800b668:	fb01 3102 	mla	r1, r1, r2, r3
 800b66c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b670:	4a03      	ldr	r2, [pc, #12]	; (800b680 <uxr_millis+0x30>)
 800b672:	2300      	movs	r3, #0
 800b674:	f7f4 fe14 	bl	80002a0 <__aeabi_ldivmod>
 800b678:	b004      	add	sp, #16
 800b67a:	bd10      	pop	{r4, pc}
 800b67c:	3b9aca00 	.word	0x3b9aca00
 800b680:	000f4240 	.word	0x000f4240

0800b684 <uxr_nanos>:
 800b684:	b510      	push	{r4, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	4669      	mov	r1, sp
 800b68a:	2001      	movs	r0, #1
 800b68c:	f7f5 fdec 	bl	8001268 <clock_gettime>
 800b690:	4a06      	ldr	r2, [pc, #24]	; (800b6ac <uxr_nanos+0x28>)
 800b692:	9800      	ldr	r0, [sp, #0]
 800b694:	9902      	ldr	r1, [sp, #8]
 800b696:	9c01      	ldr	r4, [sp, #4]
 800b698:	fba0 0302 	umull	r0, r3, r0, r2
 800b69c:	1840      	adds	r0, r0, r1
 800b69e:	fb02 3304 	mla	r3, r2, r4, r3
 800b6a2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800b6a6:	b004      	add	sp, #16
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	bf00      	nop
 800b6ac:	3b9aca00 	.word	0x3b9aca00

0800b6b0 <on_full_output_buffer_fragmented>:
 800b6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	b08a      	sub	sp, #40	; 0x28
 800b6b8:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800b6bc:	4606      	mov	r6, r0
 800b6be:	f104 0008 	add.w	r0, r4, #8
 800b6c2:	f7ff ff4b 	bl	800b55c <uxr_get_output_reliable_stream>
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	f004 fbe0 	bl	800fe8c <get_available_free_slots>
 800b6cc:	b968      	cbnz	r0, 800b6ea <on_full_output_buffer_fragmented+0x3a>
 800b6ce:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	4798      	blx	r3
 800b6d6:	b918      	cbnz	r0, 800b6e0 <on_full_output_buffer_fragmented+0x30>
 800b6d8:	2001      	movs	r0, #1
 800b6da:	b00a      	add	sp, #40	; 0x28
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f004 fbd3 	bl	800fe8c <get_available_free_slots>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0f6      	beq.n	800b6d8 <on_full_output_buffer_fragmented+0x28>
 800b6ea:	8929      	ldrh	r1, [r5, #8]
 800b6ec:	89eb      	ldrh	r3, [r5, #14]
 800b6ee:	7b28      	ldrb	r0, [r5, #12]
 800b6f0:	686a      	ldr	r2, [r5, #4]
 800b6f2:	fbb2 f8f1 	udiv	r8, r2, r1
 800b6f6:	fbb3 f2f1 	udiv	r2, r3, r1
 800b6fa:	fb01 3112 	mls	r1, r1, r2, r3
 800b6fe:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800b702:	b289      	uxth	r1, r1
 800b704:	fb08 f101 	mul.w	r1, r8, r1
 800b708:	30fc      	adds	r0, #252	; 0xfc
 800b70a:	f1a8 0804 	sub.w	r8, r8, #4
 800b70e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800b712:	4440      	add	r0, r8
 800b714:	b287      	uxth	r7, r0
 800b716:	1bdb      	subs	r3, r3, r7
 800b718:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	3104      	adds	r1, #4
 800b720:	4419      	add	r1, r3
 800b722:	4642      	mov	r2, r8
 800b724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	a802      	add	r0, sp, #8
 800b72c:	2300      	movs	r3, #0
 800b72e:	f7fe fb05 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800b732:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b736:	f102 0308 	add.w	r3, r2, #8
 800b73a:	4543      	cmp	r3, r8
 800b73c:	d928      	bls.n	800b790 <on_full_output_buffer_fragmented+0xe0>
 800b73e:	463a      	mov	r2, r7
 800b740:	2300      	movs	r3, #0
 800b742:	210d      	movs	r1, #13
 800b744:	a802      	add	r0, sp, #8
 800b746:	f7ff ff3d 	bl	800b5c4 <uxr_buffer_submessage_header>
 800b74a:	8929      	ldrh	r1, [r5, #8]
 800b74c:	89eb      	ldrh	r3, [r5, #14]
 800b74e:	fbb3 f2f1 	udiv	r2, r3, r1
 800b752:	fb01 3312 	mls	r3, r1, r2, r3
 800b756:	b29b      	uxth	r3, r3
 800b758:	686a      	ldr	r2, [r5, #4]
 800b75a:	fbb2 f2f1 	udiv	r2, r2, r1
 800b75e:	fb02 f303 	mul.w	r3, r2, r3
 800b762:	682a      	ldr	r2, [r5, #0]
 800b764:	f842 8003 	str.w	r8, [r2, r3]
 800b768:	89e8      	ldrh	r0, [r5, #14]
 800b76a:	2101      	movs	r1, #1
 800b76c:	f004 fcde 	bl	801012c <uxr_seq_num_add>
 800b770:	9904      	ldr	r1, [sp, #16]
 800b772:	9a03      	ldr	r2, [sp, #12]
 800b774:	81e8      	strh	r0, [r5, #14]
 800b776:	1a52      	subs	r2, r2, r1
 800b778:	4630      	mov	r0, r6
 800b77a:	f7fe faf1 	bl	8009d60 <ucdr_init_buffer>
 800b77e:	4630      	mov	r0, r6
 800b780:	490f      	ldr	r1, [pc, #60]	; (800b7c0 <on_full_output_buffer_fragmented+0x110>)
 800b782:	4622      	mov	r2, r4
 800b784:	f7fe fac0 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800b788:	2000      	movs	r0, #0
 800b78a:	b00a      	add	sp, #40	; 0x28
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	b292      	uxth	r2, r2
 800b792:	2302      	movs	r3, #2
 800b794:	210d      	movs	r1, #13
 800b796:	a802      	add	r0, sp, #8
 800b798:	f7ff ff14 	bl	800b5c4 <uxr_buffer_submessage_header>
 800b79c:	8928      	ldrh	r0, [r5, #8]
 800b79e:	89eb      	ldrh	r3, [r5, #14]
 800b7a0:	fbb3 f1f0 	udiv	r1, r3, r0
 800b7a4:	fb00 3311 	mls	r3, r0, r1, r3
 800b7a8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b7ac:	6869      	ldr	r1, [r5, #4]
 800b7ae:	fbb1 f1f0 	udiv	r1, r1, r0
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	fb01 f303 	mul.w	r3, r1, r3
 800b7b8:	6829      	ldr	r1, [r5, #0]
 800b7ba:	3208      	adds	r2, #8
 800b7bc:	50ca      	str	r2, [r1, r3]
 800b7be:	e7d3      	b.n	800b768 <on_full_output_buffer_fragmented+0xb8>
 800b7c0:	0800b6b1 	.word	0x0800b6b1

0800b7c4 <uxr_prepare_output_stream>:
 800b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	2707      	movs	r7, #7
 800b7ca:	9202      	str	r2, [sp, #8]
 800b7cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ce:	9103      	str	r1, [sp, #12]
 800b7d0:	2500      	movs	r5, #0
 800b7d2:	3204      	adds	r2, #4
 800b7d4:	e9cd 7500 	strd	r7, r5, [sp]
 800b7d8:	461c      	mov	r4, r3
 800b7da:	4606      	mov	r6, r0
 800b7dc:	f7ff fc54 	bl	800b088 <uxr_prepare_stream_to_write_submessage>
 800b7e0:	f080 0201 	eor.w	r2, r0, #1
 800b7e4:	b2d2      	uxtb	r2, r2
 800b7e6:	75a2      	strb	r2, [r4, #22]
 800b7e8:	b112      	cbz	r2, 800b7f0 <uxr_prepare_output_stream+0x2c>
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	b007      	add	sp, #28
 800b7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f0:	aa05      	add	r2, sp, #20
 800b7f2:	9902      	ldr	r1, [sp, #8]
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7ff fd7d 	bl	800b2f4 <uxr_init_base_object_request>
 800b7fa:	a905      	add	r1, sp, #20
 800b7fc:	4605      	mov	r5, r0
 800b7fe:	4620      	mov	r0, r4
 800b800:	f001 f88c 	bl	800c91c <uxr_serialize_WRITE_DATA_Payload_Data>
 800b804:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800b808:	69a6      	ldr	r6, [r4, #24]
 800b80a:	69e7      	ldr	r7, [r4, #28]
 800b80c:	1a52      	subs	r2, r2, r1
 800b80e:	4620      	mov	r0, r4
 800b810:	f7fe faa6 	bl	8009d60 <ucdr_init_buffer>
 800b814:	4620      	mov	r0, r4
 800b816:	463a      	mov	r2, r7
 800b818:	4631      	mov	r1, r6
 800b81a:	f7fe fa75 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800b81e:	4628      	mov	r0, r5
 800b820:	b007      	add	sp, #28
 800b822:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b824 <uxr_prepare_output_stream_fragmented>:
 800b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	b091      	sub	sp, #68	; 0x44
 800b82a:	4605      	mov	r5, r0
 800b82c:	9105      	str	r1, [sp, #20]
 800b82e:	3008      	adds	r0, #8
 800b830:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800b834:	461e      	mov	r6, r3
 800b836:	9204      	str	r2, [sp, #16]
 800b838:	f7ff fe90 	bl	800b55c <uxr_get_output_reliable_stream>
 800b83c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b840:	2b01      	cmp	r3, #1
 800b842:	f000 8091 	beq.w	800b968 <uxr_prepare_output_stream_fragmented+0x144>
 800b846:	4604      	mov	r4, r0
 800b848:	2800      	cmp	r0, #0
 800b84a:	f000 808d 	beq.w	800b968 <uxr_prepare_output_stream_fragmented+0x144>
 800b84e:	f004 fb1d 	bl	800fe8c <get_available_free_slots>
 800b852:	2800      	cmp	r0, #0
 800b854:	f000 8083 	beq.w	800b95e <uxr_prepare_output_stream_fragmented+0x13a>
 800b858:	8922      	ldrh	r2, [r4, #8]
 800b85a:	89e7      	ldrh	r7, [r4, #14]
 800b85c:	fbb7 f9f2 	udiv	r9, r7, r2
 800b860:	fb02 7919 	mls	r9, r2, r9, r7
 800b864:	fa1f f989 	uxth.w	r9, r9
 800b868:	6863      	ldr	r3, [r4, #4]
 800b86a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	9203      	str	r2, [sp, #12]
 800b872:	fb02 f909 	mul.w	r9, r2, r9
 800b876:	f109 0904 	add.w	r9, r9, #4
 800b87a:	4499      	add	r9, r3
 800b87c:	7b23      	ldrb	r3, [r4, #12]
 800b87e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b882:	4543      	cmp	r3, r8
 800b884:	f1a2 0b04 	sub.w	fp, r2, #4
 800b888:	d37a      	bcc.n	800b980 <uxr_prepare_output_stream_fragmented+0x15c>
 800b88a:	f1ab 0a04 	sub.w	sl, fp, #4
 800b88e:	ebaa 0a03 	sub.w	sl, sl, r3
 800b892:	465a      	mov	r2, fp
 800b894:	2300      	movs	r3, #0
 800b896:	4649      	mov	r1, r9
 800b898:	a808      	add	r0, sp, #32
 800b89a:	f8cd 8000 	str.w	r8, [sp]
 800b89e:	f7fe fa4d 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800b8a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b8a4:	fa1f fa8a 	uxth.w	sl, sl
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	f103 0a08 	add.w	sl, r3, #8
 800b8ae:	45da      	cmp	sl, fp
 800b8b0:	bf34      	ite	cc
 800b8b2:	2302      	movcc	r3, #2
 800b8b4:	2300      	movcs	r3, #0
 800b8b6:	210d      	movs	r1, #13
 800b8b8:	a808      	add	r0, sp, #32
 800b8ba:	f7ff fe83 	bl	800b5c4 <uxr_buffer_submessage_header>
 800b8be:	8921      	ldrh	r1, [r4, #8]
 800b8c0:	fbb7 f2f1 	udiv	r2, r7, r1
 800b8c4:	fb01 7212 	mls	r2, r1, r2, r7
 800b8c8:	b292      	uxth	r2, r2
 800b8ca:	6863      	ldr	r3, [r4, #4]
 800b8cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8d0:	fb02 f303 	mul.w	r3, r2, r3
 800b8d4:	6822      	ldr	r2, [r4, #0]
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	f842 b003 	str.w	fp, [r2, r3]
 800b8dc:	2101      	movs	r1, #1
 800b8de:	f004 fc25 	bl	801012c <uxr_seq_num_add>
 800b8e2:	9b03      	ldr	r3, [sp, #12]
 800b8e4:	f108 0104 	add.w	r1, r8, #4
 800b8e8:	f1a3 0208 	sub.w	r2, r3, #8
 800b8ec:	eba2 0208 	sub.w	r2, r2, r8
 800b8f0:	4449      	add	r1, r9
 800b8f2:	4607      	mov	r7, r0
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7fe fa33 	bl	8009d60 <ucdr_init_buffer>
 800b8fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b8fc:	81e7      	strh	r7, [r4, #14]
 800b8fe:	1d1a      	adds	r2, r3, #4
 800b900:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b904:	bf28      	it	cs
 800b906:	2200      	movcs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	b292      	uxth	r2, r2
 800b90c:	2107      	movs	r1, #7
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff fe58 	bl	800b5c4 <uxr_buffer_submessage_header>
 800b914:	9904      	ldr	r1, [sp, #16]
 800b916:	aa07      	add	r2, sp, #28
 800b918:	4628      	mov	r0, r5
 800b91a:	f7ff fceb 	bl	800b2f4 <uxr_init_base_object_request>
 800b91e:	4604      	mov	r4, r0
 800b920:	b318      	cbz	r0, 800b96a <uxr_prepare_output_stream_fragmented+0x146>
 800b922:	a907      	add	r1, sp, #28
 800b924:	4630      	mov	r0, r6
 800b926:	f000 fff9 	bl	800c91c <uxr_serialize_WRITE_DATA_Payload_Data>
 800b92a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800b92e:	4630      	mov	r0, r6
 800b930:	1a52      	subs	r2, r2, r1
 800b932:	f7fe fa15 	bl	8009d60 <ucdr_init_buffer>
 800b936:	9b05      	ldr	r3, [sp, #20]
 800b938:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800b93c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b93e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800b942:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b944:	491b      	ldr	r1, [pc, #108]	; (800b9b4 <uxr_prepare_output_stream_fragmented+0x190>)
 800b946:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800b94a:	4630      	mov	r0, r6
 800b94c:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800b950:	462a      	mov	r2, r5
 800b952:	f7fe f9d9 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800b956:	4620      	mov	r0, r4
 800b958:	b011      	add	sp, #68	; 0x44
 800b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b960:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b962:	4628      	mov	r0, r5
 800b964:	4798      	blx	r3
 800b966:	b920      	cbnz	r0, 800b972 <uxr_prepare_output_stream_fragmented+0x14e>
 800b968:	2400      	movs	r4, #0
 800b96a:	4620      	mov	r0, r4
 800b96c:	b011      	add	sp, #68	; 0x44
 800b96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b972:	4620      	mov	r0, r4
 800b974:	f004 fa8a 	bl	800fe8c <get_available_free_slots>
 800b978:	2800      	cmp	r0, #0
 800b97a:	f47f af6d 	bne.w	800b858 <uxr_prepare_output_stream_fragmented+0x34>
 800b97e:	e7f3      	b.n	800b968 <uxr_prepare_output_stream_fragmented+0x144>
 800b980:	4638      	mov	r0, r7
 800b982:	2101      	movs	r1, #1
 800b984:	f004 fbd2 	bl	801012c <uxr_seq_num_add>
 800b988:	8921      	ldrh	r1, [r4, #8]
 800b98a:	fbb0 f2f1 	udiv	r2, r0, r1
 800b98e:	fb01 0912 	mls	r9, r1, r2, r0
 800b992:	fa1f f289 	uxth.w	r2, r9
 800b996:	6863      	ldr	r3, [r4, #4]
 800b998:	fbb3 f9f1 	udiv	r9, r3, r1
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	fb02 f909 	mul.w	r9, r2, r9
 800b9a2:	f109 0904 	add.w	r9, r9, #4
 800b9a6:	4499      	add	r9, r3
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	7b23      	ldrb	r3, [r4, #12]
 800b9ac:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b9b0:	e76b      	b.n	800b88a <uxr_prepare_output_stream_fragmented+0x66>
 800b9b2:	bf00      	nop
 800b9b4:	0800b6b1 	.word	0x0800b6b1

0800b9b8 <uxr_serialize_message_header>:
 800b9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	4616      	mov	r6, r2
 800b9be:	4604      	mov	r4, r0
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	460d      	mov	r5, r1
 800b9c4:	9f08      	ldr	r7, [sp, #32]
 800b9c6:	f7fd fa1f 	bl	8008e08 <ucdr_serialize_uint8_t>
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7fd fa1b 	bl	8008e08 <ucdr_serialize_uint8_t>
 800b9d2:	9a01      	ldr	r2, [sp, #4]
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f7fd fac2 	bl	8008f60 <ucdr_serialize_endian_uint16_t>
 800b9dc:	062b      	lsls	r3, r5, #24
 800b9de:	d501      	bpl.n	800b9e4 <uxr_serialize_message_header+0x2c>
 800b9e0:	b003      	add	sp, #12
 800b9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	b003      	add	sp, #12
 800b9ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b9f0:	f003 bb2a 	b.w	800f048 <ucdr_serialize_array_uint8_t>

0800b9f4 <uxr_deserialize_message_header>:
 800b9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	4616      	mov	r6, r2
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	460d      	mov	r5, r1
 800ba00:	9f08      	ldr	r7, [sp, #32]
 800ba02:	f7fd fa17 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800ba06:	4631      	mov	r1, r6
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f7fd fa13 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800ba0e:	9a01      	ldr	r2, [sp, #4]
 800ba10:	2101      	movs	r1, #1
 800ba12:	4620      	mov	r0, r4
 800ba14:	f7fd fb98 	bl	8009148 <ucdr_deserialize_endian_uint16_t>
 800ba18:	f995 3000 	ldrsb.w	r3, [r5]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	da01      	bge.n	800ba24 <uxr_deserialize_message_header+0x30>
 800ba20:	b003      	add	sp, #12
 800ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba24:	2204      	movs	r2, #4
 800ba26:	4639      	mov	r1, r7
 800ba28:	4620      	mov	r0, r4
 800ba2a:	b003      	add	sp, #12
 800ba2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ba30:	f003 bb6e 	b.w	800f110 <ucdr_deserialize_array_uint8_t>

0800ba34 <uxr_serialize_submessage_header>:
 800ba34:	b530      	push	{r4, r5, lr}
 800ba36:	b083      	sub	sp, #12
 800ba38:	4615      	mov	r5, r2
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	f7fd f9e3 	bl	8008e08 <ucdr_serialize_uint8_t>
 800ba42:	4629      	mov	r1, r5
 800ba44:	4620      	mov	r0, r4
 800ba46:	f7fd f9df 	bl	8008e08 <ucdr_serialize_uint8_t>
 800ba4a:	9a01      	ldr	r2, [sp, #4]
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	4620      	mov	r0, r4
 800ba50:	b003      	add	sp, #12
 800ba52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba56:	f7fd ba83 	b.w	8008f60 <ucdr_serialize_endian_uint16_t>
 800ba5a:	bf00      	nop

0800ba5c <uxr_deserialize_submessage_header>:
 800ba5c:	b530      	push	{r4, r5, lr}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	4615      	mov	r5, r2
 800ba62:	4604      	mov	r4, r0
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	f7fd f9e5 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7fd f9e1 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800ba72:	9a01      	ldr	r2, [sp, #4]
 800ba74:	2101      	movs	r1, #1
 800ba76:	4620      	mov	r0, r4
 800ba78:	b003      	add	sp, #12
 800ba7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba7e:	f7fd bb63 	b.w	8009148 <ucdr_deserialize_endian_uint16_t>
 800ba82:	bf00      	nop

0800ba84 <uxr_serialize_CLIENT_Representation>:
 800ba84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba88:	2204      	movs	r2, #4
 800ba8a:	460e      	mov	r6, r1
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	f003 fadb 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800ba92:	2202      	movs	r2, #2
 800ba94:	4607      	mov	r7, r0
 800ba96:	1d31      	adds	r1, r6, #4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f003 fad5 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800ba9e:	4038      	ands	r0, r7
 800baa0:	2202      	movs	r2, #2
 800baa2:	1db1      	adds	r1, r6, #6
 800baa4:	b2c7      	uxtb	r7, r0
 800baa6:	4628      	mov	r0, r5
 800baa8:	f003 face 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800baac:	2204      	movs	r2, #4
 800baae:	4007      	ands	r7, r0
 800bab0:	f106 0108 	add.w	r1, r6, #8
 800bab4:	4628      	mov	r0, r5
 800bab6:	f003 fac7 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800baba:	7b31      	ldrb	r1, [r6, #12]
 800babc:	4007      	ands	r7, r0
 800babe:	4628      	mov	r0, r5
 800bac0:	f7fd f9a2 	bl	8008e08 <ucdr_serialize_uint8_t>
 800bac4:	7b71      	ldrb	r1, [r6, #13]
 800bac6:	4007      	ands	r7, r0
 800bac8:	4628      	mov	r0, r5
 800baca:	f7fd f96f 	bl	8008dac <ucdr_serialize_bool>
 800bace:	7b73      	ldrb	r3, [r6, #13]
 800bad0:	ea07 0800 	and.w	r8, r7, r0
 800bad4:	b93b      	cbnz	r3, 800bae6 <uxr_serialize_CLIENT_Representation+0x62>
 800bad6:	8bb1      	ldrh	r1, [r6, #28]
 800bad8:	4628      	mov	r0, r5
 800bada:	f7fd f9c1 	bl	8008e60 <ucdr_serialize_uint16_t>
 800bade:	ea08 0000 	and.w	r0, r8, r0
 800bae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae6:	6931      	ldr	r1, [r6, #16]
 800bae8:	4628      	mov	r0, r5
 800baea:	f7fd fba3 	bl	8009234 <ucdr_serialize_uint32_t>
 800baee:	6933      	ldr	r3, [r6, #16]
 800baf0:	b1e3      	cbz	r3, 800bb2c <uxr_serialize_CLIENT_Representation+0xa8>
 800baf2:	b1c0      	cbz	r0, 800bb26 <uxr_serialize_CLIENT_Representation+0xa2>
 800baf4:	4637      	mov	r7, r6
 800baf6:	f04f 0900 	mov.w	r9, #0
 800bafa:	e001      	b.n	800bb00 <uxr_serialize_CLIENT_Representation+0x7c>
 800bafc:	3708      	adds	r7, #8
 800bafe:	b194      	cbz	r4, 800bb26 <uxr_serialize_CLIENT_Representation+0xa2>
 800bb00:	6979      	ldr	r1, [r7, #20]
 800bb02:	4628      	mov	r0, r5
 800bb04:	f003 fbc0 	bl	800f288 <ucdr_serialize_string>
 800bb08:	69b9      	ldr	r1, [r7, #24]
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f003 fbbb 	bl	800f288 <ucdr_serialize_string>
 800bb12:	6933      	ldr	r3, [r6, #16]
 800bb14:	f109 0901 	add.w	r9, r9, #1
 800bb18:	4004      	ands	r4, r0
 800bb1a:	4599      	cmp	r9, r3
 800bb1c:	b2e4      	uxtb	r4, r4
 800bb1e:	d3ed      	bcc.n	800bafc <uxr_serialize_CLIENT_Representation+0x78>
 800bb20:	ea08 0804 	and.w	r8, r8, r4
 800bb24:	e7d7      	b.n	800bad6 <uxr_serialize_CLIENT_Representation+0x52>
 800bb26:	f04f 0800 	mov.w	r8, #0
 800bb2a:	e7d4      	b.n	800bad6 <uxr_serialize_CLIENT_Representation+0x52>
 800bb2c:	ea08 0800 	and.w	r8, r8, r0
 800bb30:	e7d1      	b.n	800bad6 <uxr_serialize_CLIENT_Representation+0x52>
 800bb32:	bf00      	nop

0800bb34 <uxr_deserialize_CLIENT_Representation>:
 800bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	2204      	movs	r2, #4
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	4605      	mov	r5, r0
 800bb3e:	f003 fae7 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800bb42:	2202      	movs	r2, #2
 800bb44:	4607      	mov	r7, r0
 800bb46:	1d21      	adds	r1, r4, #4
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f003 fae1 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800bb4e:	4038      	ands	r0, r7
 800bb50:	2202      	movs	r2, #2
 800bb52:	1da1      	adds	r1, r4, #6
 800bb54:	b2c6      	uxtb	r6, r0
 800bb56:	4628      	mov	r0, r5
 800bb58:	f003 fada 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	4006      	ands	r6, r0
 800bb60:	f104 0108 	add.w	r1, r4, #8
 800bb64:	4628      	mov	r0, r5
 800bb66:	f003 fad3 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800bb6a:	f104 010c 	add.w	r1, r4, #12
 800bb6e:	4006      	ands	r6, r0
 800bb70:	4628      	mov	r0, r5
 800bb72:	f7fd f95f 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800bb76:	f104 010d 	add.w	r1, r4, #13
 800bb7a:	ea06 0700 	and.w	r7, r6, r0
 800bb7e:	4628      	mov	r0, r5
 800bb80:	f7fd f92a 	bl	8008dd8 <ucdr_deserialize_bool>
 800bb84:	7b63      	ldrb	r3, [r4, #13]
 800bb86:	4007      	ands	r7, r0
 800bb88:	b93b      	cbnz	r3, 800bb9a <uxr_deserialize_CLIENT_Representation+0x66>
 800bb8a:	f104 011c 	add.w	r1, r4, #28
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f7fd fa66 	bl	8009060 <ucdr_deserialize_uint16_t>
 800bb94:	4038      	ands	r0, r7
 800bb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	f104 0110 	add.w	r1, r4, #16
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7fd fc78 	bl	8009494 <ucdr_deserialize_uint32_t>
 800bba4:	6923      	ldr	r3, [r4, #16]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d903      	bls.n	800bbb2 <uxr_deserialize_CLIENT_Representation+0x7e>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	75ab      	strb	r3, [r5, #22]
 800bbae:	2700      	movs	r7, #0
 800bbb0:	e7eb      	b.n	800bb8a <uxr_deserialize_CLIENT_Representation+0x56>
 800bbb2:	b30b      	cbz	r3, 800bbf8 <uxr_deserialize_CLIENT_Representation+0xc4>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d0fa      	beq.n	800bbae <uxr_deserialize_CLIENT_Representation+0x7a>
 800bbb8:	46a0      	mov	r8, r4
 800bbba:	f04f 0900 	mov.w	r9, #0
 800bbbe:	e001      	b.n	800bbc4 <uxr_deserialize_CLIENT_Representation+0x90>
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	d0f4      	beq.n	800bbae <uxr_deserialize_CLIENT_Representation+0x7a>
 800bbc4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bbc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f003 fb6b 	bl	800f2a8 <ucdr_deserialize_string>
 800bbd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f003 fb63 	bl	800f2a8 <ucdr_deserialize_string>
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	f109 0901 	add.w	r9, r9, #1
 800bbe8:	4006      	ands	r6, r0
 800bbea:	4599      	cmp	r9, r3
 800bbec:	f108 0808 	add.w	r8, r8, #8
 800bbf0:	b2f6      	uxtb	r6, r6
 800bbf2:	d3e5      	bcc.n	800bbc0 <uxr_deserialize_CLIENT_Representation+0x8c>
 800bbf4:	4037      	ands	r7, r6
 800bbf6:	e7c8      	b.n	800bb8a <uxr_deserialize_CLIENT_Representation+0x56>
 800bbf8:	4007      	ands	r7, r0
 800bbfa:	e7c6      	b.n	800bb8a <uxr_deserialize_CLIENT_Representation+0x56>

0800bbfc <uxr_serialize_AGENT_Representation>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	2204      	movs	r2, #4
 800bc02:	460f      	mov	r7, r1
 800bc04:	4605      	mov	r5, r0
 800bc06:	f003 fa1f 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	1d39      	adds	r1, r7, #4
 800bc10:	4628      	mov	r0, r5
 800bc12:	f003 fa19 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800bc16:	4020      	ands	r0, r4
 800bc18:	2202      	movs	r2, #2
 800bc1a:	1db9      	adds	r1, r7, #6
 800bc1c:	b2c4      	uxtb	r4, r0
 800bc1e:	4628      	mov	r0, r5
 800bc20:	f003 fa12 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800bc24:	7a39      	ldrb	r1, [r7, #8]
 800bc26:	4004      	ands	r4, r0
 800bc28:	4628      	mov	r0, r5
 800bc2a:	f7fd f8bf 	bl	8008dac <ucdr_serialize_bool>
 800bc2e:	7a3b      	ldrb	r3, [r7, #8]
 800bc30:	ea00 0804 	and.w	r8, r0, r4
 800bc34:	b913      	cbnz	r3, 800bc3c <uxr_serialize_AGENT_Representation+0x40>
 800bc36:	4640      	mov	r0, r8
 800bc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3c:	68f9      	ldr	r1, [r7, #12]
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f7fd faf8 	bl	8009234 <ucdr_serialize_uint32_t>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	b303      	cbz	r3, 800bc8a <uxr_serialize_AGENT_Representation+0x8e>
 800bc48:	b1d0      	cbz	r0, 800bc80 <uxr_serialize_AGENT_Representation+0x84>
 800bc4a:	463e      	mov	r6, r7
 800bc4c:	f04f 0900 	mov.w	r9, #0
 800bc50:	e001      	b.n	800bc56 <uxr_serialize_AGENT_Representation+0x5a>
 800bc52:	3608      	adds	r6, #8
 800bc54:	b1a4      	cbz	r4, 800bc80 <uxr_serialize_AGENT_Representation+0x84>
 800bc56:	6931      	ldr	r1, [r6, #16]
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f003 fb15 	bl	800f288 <ucdr_serialize_string>
 800bc5e:	6971      	ldr	r1, [r6, #20]
 800bc60:	4604      	mov	r4, r0
 800bc62:	4628      	mov	r0, r5
 800bc64:	f003 fb10 	bl	800f288 <ucdr_serialize_string>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f109 0901 	add.w	r9, r9, #1
 800bc6e:	4004      	ands	r4, r0
 800bc70:	4599      	cmp	r9, r3
 800bc72:	b2e4      	uxtb	r4, r4
 800bc74:	d3ed      	bcc.n	800bc52 <uxr_serialize_AGENT_Representation+0x56>
 800bc76:	ea08 0804 	and.w	r8, r8, r4
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc80:	f04f 0800 	mov.w	r8, #0
 800bc84:	4640      	mov	r0, r8
 800bc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc8a:	ea08 0800 	and.w	r8, r8, r0
 800bc8e:	e7d2      	b.n	800bc36 <uxr_serialize_AGENT_Representation+0x3a>

0800bc90 <uxr_serialize_DATAWRITER_Representation>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	460d      	mov	r5, r1
 800bc94:	7809      	ldrb	r1, [r1, #0]
 800bc96:	4606      	mov	r6, r0
 800bc98:	f7fd f8b6 	bl	8008e08 <ucdr_serialize_uint8_t>
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	b130      	cbz	r0, 800bcae <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bca0:	782b      	ldrb	r3, [r5, #0]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d00c      	beq.n	800bcc0 <uxr_serialize_DATAWRITER_Representation+0x30>
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d010      	beq.n	800bccc <uxr_serialize_DATAWRITER_Representation+0x3c>
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d008      	beq.n	800bcc0 <uxr_serialize_DATAWRITER_Representation+0x30>
 800bcae:	2202      	movs	r2, #2
 800bcb0:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f003 f9c7 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800bcba:	4020      	ands	r0, r4
 800bcbc:	b2c0      	uxtb	r0, r0
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}
 800bcc0:	6869      	ldr	r1, [r5, #4]
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f003 fae0 	bl	800f288 <ucdr_serialize_string>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	e7f0      	b.n	800bcae <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bccc:	4629      	mov	r1, r5
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800bcd4:	3104      	adds	r1, #4
 800bcd6:	f003 faab 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	e7e7      	b.n	800bcae <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bcde:	bf00      	nop

0800bce0 <uxr_serialize_ObjectVariant.part.0>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	780b      	ldrb	r3, [r1, #0]
 800bce4:	3b01      	subs	r3, #1
 800bce6:	460c      	mov	r4, r1
 800bce8:	4605      	mov	r5, r0
 800bcea:	2b0d      	cmp	r3, #13
 800bcec:	d854      	bhi.n	800bd98 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800bcee:	e8df f003 	tbb	[pc, r3]
 800bcf2:	0730      	.short	0x0730
 800bcf4:	07071b1b 	.word	0x07071b1b
 800bcf8:	0c530707 	.word	0x0c530707
 800bcfc:	494e0c0c 	.word	0x494e0c0c
 800bd00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd04:	3104      	adds	r1, #4
 800bd06:	f7ff bfc3 	b.w	800bc90 <uxr_serialize_DATAWRITER_Representation>
 800bd0a:	7909      	ldrb	r1, [r1, #4]
 800bd0c:	f7fd f87c 	bl	8008e08 <ucdr_serialize_uint8_t>
 800bd10:	b1e8      	cbz	r0, 800bd4e <uxr_serialize_ObjectVariant.part.0+0x6e>
 800bd12:	7923      	ldrb	r3, [r4, #4]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d001      	beq.n	800bd1c <uxr_serialize_ObjectVariant.part.0+0x3c>
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d13d      	bne.n	800bd98 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800bd1c:	68a1      	ldr	r1, [r4, #8]
 800bd1e:	4628      	mov	r0, r5
 800bd20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd24:	f003 bab0 	b.w	800f288 <ucdr_serialize_string>
 800bd28:	7909      	ldrb	r1, [r1, #4]
 800bd2a:	f7fd f86d 	bl	8008e08 <ucdr_serialize_uint8_t>
 800bd2e:	4606      	mov	r6, r0
 800bd30:	b120      	cbz	r0, 800bd3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bd32:	7923      	ldrb	r3, [r4, #4]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d039      	beq.n	800bdac <uxr_serialize_ObjectVariant.part.0+0xcc>
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d02f      	beq.n	800bd9c <uxr_serialize_ObjectVariant.part.0+0xbc>
 800bd3c:	2202      	movs	r2, #2
 800bd3e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800bd42:	4628      	mov	r0, r5
 800bd44:	f003 f980 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800bd48:	4030      	ands	r0, r6
 800bd4a:	b2c0      	uxtb	r0, r0
 800bd4c:	bd70      	pop	{r4, r5, r6, pc}
 800bd4e:	2000      	movs	r0, #0
 800bd50:	bd70      	pop	{r4, r5, r6, pc}
 800bd52:	7909      	ldrb	r1, [r1, #4]
 800bd54:	f7fd f858 	bl	8008e08 <ucdr_serialize_uint8_t>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	b158      	cbz	r0, 800bd74 <uxr_serialize_ObjectVariant.part.0+0x94>
 800bd5c:	7923      	ldrb	r3, [r4, #4]
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d003      	beq.n	800bd6a <uxr_serialize_ObjectVariant.part.0+0x8a>
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d028      	beq.n	800bdb8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d104      	bne.n	800bd74 <uxr_serialize_ObjectVariant.part.0+0x94>
 800bd6a:	68a1      	ldr	r1, [r4, #8]
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f003 fa8b 	bl	800f288 <ucdr_serialize_string>
 800bd72:	4606      	mov	r6, r0
 800bd74:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f7fd fd81 	bl	8009880 <ucdr_serialize_int16_t>
 800bd7e:	4030      	ands	r0, r6
 800bd80:	b2c0      	uxtb	r0, r0
 800bd82:	bd70      	pop	{r4, r5, r6, pc}
 800bd84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd88:	3104      	adds	r1, #4
 800bd8a:	f7ff be7b 	b.w	800ba84 <uxr_serialize_CLIENT_Representation>
 800bd8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd92:	3104      	adds	r1, #4
 800bd94:	f7ff bf32 	b.w	800bbfc <uxr_serialize_AGENT_Representation>
 800bd98:	2001      	movs	r0, #1
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	68a2      	ldr	r2, [r4, #8]
 800bd9e:	f104 010c 	add.w	r1, r4, #12
 800bda2:	4628      	mov	r0, r5
 800bda4:	f003 fa44 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800bda8:	4606      	mov	r6, r0
 800bdaa:	e7c7      	b.n	800bd3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bdac:	68a1      	ldr	r1, [r4, #8]
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f003 fa6a 	bl	800f288 <ucdr_serialize_string>
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	e7c1      	b.n	800bd3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bdb8:	68a2      	ldr	r2, [r4, #8]
 800bdba:	f104 010c 	add.w	r1, r4, #12
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f003 fa36 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	e7d5      	b.n	800bd74 <uxr_serialize_ObjectVariant.part.0+0x94>

0800bdc8 <uxr_deserialize_DATAWRITER_Representation>:
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	f7fd f831 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	b130      	cbz	r0, 800bde4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bdd6:	782b      	ldrb	r3, [r5, #0]
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d00c      	beq.n	800bdf6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d012      	beq.n	800be06 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d008      	beq.n	800bdf6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bde4:	2202      	movs	r2, #2
 800bde6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800bdea:	4630      	mov	r0, r6
 800bdec:	f003 f990 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800bdf0:	4020      	ands	r0, r4
 800bdf2:	b2c0      	uxtb	r0, r0
 800bdf4:	bd70      	pop	{r4, r5, r6, pc}
 800bdf6:	6869      	ldr	r1, [r5, #4]
 800bdf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f003 fa53 	bl	800f2a8 <ucdr_deserialize_string>
 800be02:	4604      	mov	r4, r0
 800be04:	e7ee      	b.n	800bde4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800be06:	1d2b      	adds	r3, r5, #4
 800be08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be0c:	f105 0108 	add.w	r1, r5, #8
 800be10:	4630      	mov	r0, r6
 800be12:	f003 fa1f 	bl	800f254 <ucdr_deserialize_sequence_uint8_t>
 800be16:	4604      	mov	r4, r0
 800be18:	e7e4      	b.n	800bde4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800be1a:	bf00      	nop

0800be1c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800be1c:	b570      	push	{r4, r5, r6, lr}
 800be1e:	460d      	mov	r5, r1
 800be20:	7809      	ldrb	r1, [r1, #0]
 800be22:	4606      	mov	r6, r0
 800be24:	f7fc ffc2 	bl	8008dac <ucdr_serialize_bool>
 800be28:	782b      	ldrb	r3, [r5, #0]
 800be2a:	4604      	mov	r4, r0
 800be2c:	b94b      	cbnz	r3, 800be42 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800be2e:	7a29      	ldrb	r1, [r5, #8]
 800be30:	4630      	mov	r0, r6
 800be32:	f7fc ffbb 	bl	8008dac <ucdr_serialize_bool>
 800be36:	7a2b      	ldrb	r3, [r5, #8]
 800be38:	4004      	ands	r4, r0
 800be3a:	b2e4      	uxtb	r4, r4
 800be3c:	b943      	cbnz	r3, 800be50 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800be3e:	4620      	mov	r0, r4
 800be40:	bd70      	pop	{r4, r5, r6, pc}
 800be42:	6869      	ldr	r1, [r5, #4]
 800be44:	4630      	mov	r0, r6
 800be46:	f003 fa1f 	bl	800f288 <ucdr_serialize_string>
 800be4a:	4004      	ands	r4, r0
 800be4c:	b2e4      	uxtb	r4, r4
 800be4e:	e7ee      	b.n	800be2e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800be50:	68e9      	ldr	r1, [r5, #12]
 800be52:	4630      	mov	r0, r6
 800be54:	f003 fa18 	bl	800f288 <ucdr_serialize_string>
 800be58:	4004      	ands	r4, r0
 800be5a:	4620      	mov	r0, r4
 800be5c:	bd70      	pop	{r4, r5, r6, pc}
 800be5e:	bf00      	nop

0800be60 <uxr_serialize_OBJK_Topic_Binary>:
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	460d      	mov	r5, r1
 800be64:	6809      	ldr	r1, [r1, #0]
 800be66:	4606      	mov	r6, r0
 800be68:	f003 fa0e 	bl	800f288 <ucdr_serialize_string>
 800be6c:	7929      	ldrb	r1, [r5, #4]
 800be6e:	4604      	mov	r4, r0
 800be70:	4630      	mov	r0, r6
 800be72:	f7fc ff9b 	bl	8008dac <ucdr_serialize_bool>
 800be76:	792b      	ldrb	r3, [r5, #4]
 800be78:	4004      	ands	r4, r0
 800be7a:	b2e4      	uxtb	r4, r4
 800be7c:	b943      	cbnz	r3, 800be90 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800be7e:	7b29      	ldrb	r1, [r5, #12]
 800be80:	4630      	mov	r0, r6
 800be82:	f7fc ff93 	bl	8008dac <ucdr_serialize_bool>
 800be86:	7b2b      	ldrb	r3, [r5, #12]
 800be88:	4004      	ands	r4, r0
 800be8a:	b93b      	cbnz	r3, 800be9c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800be8c:	4620      	mov	r0, r4
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	68a9      	ldr	r1, [r5, #8]
 800be92:	4630      	mov	r0, r6
 800be94:	f003 f9f8 	bl	800f288 <ucdr_serialize_string>
 800be98:	4004      	ands	r4, r0
 800be9a:	e7f0      	b.n	800be7e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800be9c:	6929      	ldr	r1, [r5, #16]
 800be9e:	4630      	mov	r0, r6
 800bea0:	f003 f9f2 	bl	800f288 <ucdr_serialize_string>
 800bea4:	4004      	ands	r4, r0
 800bea6:	b2e4      	uxtb	r4, r4
 800bea8:	4620      	mov	r0, r4
 800beaa:	bd70      	pop	{r4, r5, r6, pc}

0800beac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800beac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	7809      	ldrb	r1, [r1, #0]
 800beb4:	4606      	mov	r6, r0
 800beb6:	f7fc ff79 	bl	8008dac <ucdr_serialize_bool>
 800beba:	7823      	ldrb	r3, [r4, #0]
 800bebc:	4605      	mov	r5, r0
 800bebe:	b96b      	cbnz	r3, 800bedc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800bec0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7fc ff71 	bl	8008dac <ucdr_serialize_bool>
 800beca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bece:	4005      	ands	r5, r0
 800bed0:	b2ed      	uxtb	r5, r5
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d169      	bne.n	800bfaa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800bed6:	4628      	mov	r0, r5
 800bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bedc:	6861      	ldr	r1, [r4, #4]
 800bede:	4630      	mov	r0, r6
 800bee0:	f7fd f9a8 	bl	8009234 <ucdr_serialize_uint32_t>
 800bee4:	6863      	ldr	r3, [r4, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d06b      	beq.n	800bfc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800beea:	2800      	cmp	r0, #0
 800beec:	d067      	beq.n	800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800beee:	68a1      	ldr	r1, [r4, #8]
 800bef0:	4630      	mov	r0, r6
 800bef2:	f003 f9c9 	bl	800f288 <ucdr_serialize_string>
 800bef6:	6863      	ldr	r3, [r4, #4]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d953      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800befc:	2800      	cmp	r0, #0
 800befe:	d05e      	beq.n	800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf00:	68e1      	ldr	r1, [r4, #12]
 800bf02:	4630      	mov	r0, r6
 800bf04:	f003 f9c0 	bl	800f288 <ucdr_serialize_string>
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d94a      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d055      	beq.n	800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf12:	6921      	ldr	r1, [r4, #16]
 800bf14:	4630      	mov	r0, r6
 800bf16:	f003 f9b7 	bl	800f288 <ucdr_serialize_string>
 800bf1a:	6863      	ldr	r3, [r4, #4]
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	d941      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d04c      	beq.n	800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf24:	6961      	ldr	r1, [r4, #20]
 800bf26:	4630      	mov	r0, r6
 800bf28:	f003 f9ae 	bl	800f288 <ucdr_serialize_string>
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	d938      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d043      	beq.n	800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf36:	69a1      	ldr	r1, [r4, #24]
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f003 f9a5 	bl	800f288 <ucdr_serialize_string>
 800bf3e:	6863      	ldr	r3, [r4, #4]
 800bf40:	2b05      	cmp	r3, #5
 800bf42:	d92f      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d03a      	beq.n	800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf48:	69e1      	ldr	r1, [r4, #28]
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f003 f99c 	bl	800f288 <ucdr_serialize_string>
 800bf50:	6863      	ldr	r3, [r4, #4]
 800bf52:	2b06      	cmp	r3, #6
 800bf54:	d926      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf56:	b390      	cbz	r0, 800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf58:	6a21      	ldr	r1, [r4, #32]
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f003 f994 	bl	800f288 <ucdr_serialize_string>
 800bf60:	6863      	ldr	r3, [r4, #4]
 800bf62:	2b07      	cmp	r3, #7
 800bf64:	d91e      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf66:	b350      	cbz	r0, 800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f003 f98c 	bl	800f288 <ucdr_serialize_string>
 800bf70:	6863      	ldr	r3, [r4, #4]
 800bf72:	2b08      	cmp	r3, #8
 800bf74:	d916      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf76:	b310      	cbz	r0, 800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f003 f984 	bl	800f288 <ucdr_serialize_string>
 800bf80:	6863      	ldr	r3, [r4, #4]
 800bf82:	2b09      	cmp	r3, #9
 800bf84:	d90e      	bls.n	800bfa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bf86:	b1d0      	cbz	r0, 800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf88:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800bf8c:	2709      	movs	r7, #9
 800bf8e:	e000      	b.n	800bf92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800bf90:	b1a8      	cbz	r0, 800bfbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bf92:	f858 1b04 	ldr.w	r1, [r8], #4
 800bf96:	4630      	mov	r0, r6
 800bf98:	f003 f976 	bl	800f288 <ucdr_serialize_string>
 800bf9c:	6862      	ldr	r2, [r4, #4]
 800bf9e:	3701      	adds	r7, #1
 800bfa0:	4297      	cmp	r7, r2
 800bfa2:	d3f5      	bcc.n	800bf90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800bfa4:	4005      	ands	r5, r0
 800bfa6:	b2ed      	uxtb	r5, r5
 800bfa8:	e78a      	b.n	800bec0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bfaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bfac:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f003 f93d 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800bfb6:	4005      	ands	r5, r0
 800bfb8:	4628      	mov	r0, r5
 800bfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfbe:	2500      	movs	r5, #0
 800bfc0:	e77e      	b.n	800bec0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bfc2:	4028      	ands	r0, r5
 800bfc4:	b2c5      	uxtb	r5, r0
 800bfc6:	e77b      	b.n	800bec0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800bfc8 <uxr_serialize_OBJK_Publisher_Binary>:
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	460d      	mov	r5, r1
 800bfcc:	7809      	ldrb	r1, [r1, #0]
 800bfce:	4606      	mov	r6, r0
 800bfd0:	f7fc feec 	bl	8008dac <ucdr_serialize_bool>
 800bfd4:	782b      	ldrb	r3, [r5, #0]
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	b94b      	cbnz	r3, 800bfee <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800bfda:	7a29      	ldrb	r1, [r5, #8]
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7fc fee5 	bl	8008dac <ucdr_serialize_bool>
 800bfe2:	7a2b      	ldrb	r3, [r5, #8]
 800bfe4:	4004      	ands	r4, r0
 800bfe6:	b2e4      	uxtb	r4, r4
 800bfe8:	b943      	cbnz	r3, 800bffc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800bfea:	4620      	mov	r0, r4
 800bfec:	bd70      	pop	{r4, r5, r6, pc}
 800bfee:	6869      	ldr	r1, [r5, #4]
 800bff0:	4630      	mov	r0, r6
 800bff2:	f003 f949 	bl	800f288 <ucdr_serialize_string>
 800bff6:	4004      	ands	r4, r0
 800bff8:	b2e4      	uxtb	r4, r4
 800bffa:	e7ee      	b.n	800bfda <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800bffc:	f105 010c 	add.w	r1, r5, #12
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff ff53 	bl	800beac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c006:	4004      	ands	r4, r0
 800c008:	4620      	mov	r0, r4
 800c00a:	bd70      	pop	{r4, r5, r6, pc}

0800c00c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800c00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c010:	460c      	mov	r4, r1
 800c012:	7809      	ldrb	r1, [r1, #0]
 800c014:	4606      	mov	r6, r0
 800c016:	f7fc fec9 	bl	8008dac <ucdr_serialize_bool>
 800c01a:	7823      	ldrb	r3, [r4, #0]
 800c01c:	4605      	mov	r5, r0
 800c01e:	b96b      	cbnz	r3, 800c03c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800c020:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800c024:	4630      	mov	r0, r6
 800c026:	f7fc fec1 	bl	8008dac <ucdr_serialize_bool>
 800c02a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c02e:	4005      	ands	r5, r0
 800c030:	b2ed      	uxtb	r5, r5
 800c032:	2b00      	cmp	r3, #0
 800c034:	d169      	bne.n	800c10a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800c036:	4628      	mov	r0, r5
 800c038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c03c:	6861      	ldr	r1, [r4, #4]
 800c03e:	4630      	mov	r0, r6
 800c040:	f7fd f8f8 	bl	8009234 <ucdr_serialize_uint32_t>
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d06b      	beq.n	800c122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d067      	beq.n	800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c04e:	68a1      	ldr	r1, [r4, #8]
 800c050:	4630      	mov	r0, r6
 800c052:	f003 f919 	bl	800f288 <ucdr_serialize_string>
 800c056:	6863      	ldr	r3, [r4, #4]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d953      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d05e      	beq.n	800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c060:	68e1      	ldr	r1, [r4, #12]
 800c062:	4630      	mov	r0, r6
 800c064:	f003 f910 	bl	800f288 <ucdr_serialize_string>
 800c068:	6863      	ldr	r3, [r4, #4]
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d94a      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d055      	beq.n	800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c072:	6921      	ldr	r1, [r4, #16]
 800c074:	4630      	mov	r0, r6
 800c076:	f003 f907 	bl	800f288 <ucdr_serialize_string>
 800c07a:	6863      	ldr	r3, [r4, #4]
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	d941      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c080:	2800      	cmp	r0, #0
 800c082:	d04c      	beq.n	800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c084:	6961      	ldr	r1, [r4, #20]
 800c086:	4630      	mov	r0, r6
 800c088:	f003 f8fe 	bl	800f288 <ucdr_serialize_string>
 800c08c:	6863      	ldr	r3, [r4, #4]
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d938      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c092:	2800      	cmp	r0, #0
 800c094:	d043      	beq.n	800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c096:	69a1      	ldr	r1, [r4, #24]
 800c098:	4630      	mov	r0, r6
 800c09a:	f003 f8f5 	bl	800f288 <ucdr_serialize_string>
 800c09e:	6863      	ldr	r3, [r4, #4]
 800c0a0:	2b05      	cmp	r3, #5
 800c0a2:	d92f      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d03a      	beq.n	800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c0a8:	69e1      	ldr	r1, [r4, #28]
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f003 f8ec 	bl	800f288 <ucdr_serialize_string>
 800c0b0:	6863      	ldr	r3, [r4, #4]
 800c0b2:	2b06      	cmp	r3, #6
 800c0b4:	d926      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c0b6:	b390      	cbz	r0, 800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c0b8:	6a21      	ldr	r1, [r4, #32]
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f003 f8e4 	bl	800f288 <ucdr_serialize_string>
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	2b07      	cmp	r3, #7
 800c0c4:	d91e      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c0c6:	b350      	cbz	r0, 800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c0c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f003 f8dc 	bl	800f288 <ucdr_serialize_string>
 800c0d0:	6863      	ldr	r3, [r4, #4]
 800c0d2:	2b08      	cmp	r3, #8
 800c0d4:	d916      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c0d6:	b310      	cbz	r0, 800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c0d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f003 f8d4 	bl	800f288 <ucdr_serialize_string>
 800c0e0:	6863      	ldr	r3, [r4, #4]
 800c0e2:	2b09      	cmp	r3, #9
 800c0e4:	d90e      	bls.n	800c104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c0e6:	b1d0      	cbz	r0, 800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c0e8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800c0ec:	2709      	movs	r7, #9
 800c0ee:	e000      	b.n	800c0f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800c0f0:	b1a8      	cbz	r0, 800c11e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c0f2:	f858 1b04 	ldr.w	r1, [r8], #4
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f003 f8c6 	bl	800f288 <ucdr_serialize_string>
 800c0fc:	6862      	ldr	r2, [r4, #4]
 800c0fe:	3701      	adds	r7, #1
 800c100:	4297      	cmp	r7, r2
 800c102:	d3f5      	bcc.n	800c0f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800c104:	4005      	ands	r5, r0
 800c106:	b2ed      	uxtb	r5, r5
 800c108:	e78a      	b.n	800c020 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800c10a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c10c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c110:	4630      	mov	r0, r6
 800c112:	f003 f88d 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800c116:	4005      	ands	r5, r0
 800c118:	4628      	mov	r0, r5
 800c11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c11e:	2500      	movs	r5, #0
 800c120:	e77e      	b.n	800c020 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800c122:	4028      	ands	r0, r5
 800c124:	b2c5      	uxtb	r5, r0
 800c126:	e77b      	b.n	800c020 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800c128 <uxr_serialize_OBJK_Subscriber_Binary>:
 800c128:	b570      	push	{r4, r5, r6, lr}
 800c12a:	460d      	mov	r5, r1
 800c12c:	7809      	ldrb	r1, [r1, #0]
 800c12e:	4606      	mov	r6, r0
 800c130:	f7fc fe3c 	bl	8008dac <ucdr_serialize_bool>
 800c134:	782b      	ldrb	r3, [r5, #0]
 800c136:	4604      	mov	r4, r0
 800c138:	b94b      	cbnz	r3, 800c14e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800c13a:	7a29      	ldrb	r1, [r5, #8]
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7fc fe35 	bl	8008dac <ucdr_serialize_bool>
 800c142:	7a2b      	ldrb	r3, [r5, #8]
 800c144:	4004      	ands	r4, r0
 800c146:	b2e4      	uxtb	r4, r4
 800c148:	b943      	cbnz	r3, 800c15c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800c14a:	4620      	mov	r0, r4
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
 800c14e:	6869      	ldr	r1, [r5, #4]
 800c150:	4630      	mov	r0, r6
 800c152:	f003 f899 	bl	800f288 <ucdr_serialize_string>
 800c156:	4004      	ands	r4, r0
 800c158:	b2e4      	uxtb	r4, r4
 800c15a:	e7ee      	b.n	800c13a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800c15c:	f105 010c 	add.w	r1, r5, #12
 800c160:	4630      	mov	r0, r6
 800c162:	f7ff ff53 	bl	800c00c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800c166:	4004      	ands	r4, r0
 800c168:	4620      	mov	r0, r4
 800c16a:	bd70      	pop	{r4, r5, r6, pc}

0800c16c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800c16c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800c170:	4688      	mov	r8, r1
 800c172:	8809      	ldrh	r1, [r1, #0]
 800c174:	4681      	mov	r9, r0
 800c176:	f7fc fe73 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c17a:	f898 1002 	ldrb.w	r1, [r8, #2]
 800c17e:	4606      	mov	r6, r0
 800c180:	4648      	mov	r0, r9
 800c182:	f7fc fe13 	bl	8008dac <ucdr_serialize_bool>
 800c186:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c18a:	4006      	ands	r6, r0
 800c18c:	b2f5      	uxtb	r5, r6
 800c18e:	b9eb      	cbnz	r3, 800c1cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800c190:	f898 1006 	ldrb.w	r1, [r8, #6]
 800c194:	4648      	mov	r0, r9
 800c196:	f7fc fe09 	bl	8008dac <ucdr_serialize_bool>
 800c19a:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c19e:	4005      	ands	r5, r0
 800c1a0:	bb7b      	cbnz	r3, 800c202 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800c1a2:	f898 100c 	ldrb.w	r1, [r8, #12]
 800c1a6:	4648      	mov	r0, r9
 800c1a8:	f7fc fe00 	bl	8008dac <ucdr_serialize_bool>
 800c1ac:	f898 300c 	ldrb.w	r3, [r8, #12]
 800c1b0:	4005      	ands	r5, r0
 800c1b2:	b9f3      	cbnz	r3, 800c1f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800c1b4:	f898 1014 	ldrb.w	r1, [r8, #20]
 800c1b8:	4648      	mov	r0, r9
 800c1ba:	f7fc fdf7 	bl	8008dac <ucdr_serialize_bool>
 800c1be:	f898 3014 	ldrb.w	r3, [r8, #20]
 800c1c2:	4005      	ands	r5, r0
 800c1c4:	b94b      	cbnz	r3, 800c1da <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c1cc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800c1d0:	4648      	mov	r0, r9
 800c1d2:	f7fc fe45 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c1d6:	4005      	ands	r5, r0
 800c1d8:	e7da      	b.n	800c190 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800c1da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c1de:	f108 011c 	add.w	r1, r8, #28
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	f003 f824 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800c1e8:	4028      	ands	r0, r5
 800c1ea:	b2c5      	uxtb	r5, r0
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c1f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c1f6:	4648      	mov	r0, r9
 800c1f8:	f7fd f81c 	bl	8009234 <ucdr_serialize_uint32_t>
 800c1fc:	4028      	ands	r0, r5
 800c1fe:	b2c5      	uxtb	r5, r0
 800c200:	e7d8      	b.n	800c1b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800c202:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c206:	4648      	mov	r0, r9
 800c208:	f7fd f814 	bl	8009234 <ucdr_serialize_uint32_t>
 800c20c:	4028      	ands	r0, r5
 800c20e:	b2c5      	uxtb	r5, r0
 800c210:	e7c7      	b.n	800c1a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800c212:	bf00      	nop

0800c214 <uxr_serialize_OBJK_DataReader_Binary>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	2202      	movs	r2, #2
 800c218:	460c      	mov	r4, r1
 800c21a:	4606      	mov	r6, r0
 800c21c:	f002 ff14 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c220:	78a1      	ldrb	r1, [r4, #2]
 800c222:	4605      	mov	r5, r0
 800c224:	4630      	mov	r0, r6
 800c226:	f7fc fdc1 	bl	8008dac <ucdr_serialize_bool>
 800c22a:	78a3      	ldrb	r3, [r4, #2]
 800c22c:	4005      	ands	r5, r0
 800c22e:	b2ed      	uxtb	r5, r5
 800c230:	b90b      	cbnz	r3, 800c236 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800c232:	4628      	mov	r0, r5
 800c234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c236:	f104 0108 	add.w	r1, r4, #8
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ff96 	bl	800c16c <uxr_serialize_OBJK_Endpoint_QosBinary>
 800c240:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800c244:	4607      	mov	r7, r0
 800c246:	4630      	mov	r0, r6
 800c248:	f7fc fdb0 	bl	8008dac <ucdr_serialize_bool>
 800c24c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c250:	4038      	ands	r0, r7
 800c252:	b2c7      	uxtb	r7, r0
 800c254:	b95b      	cbnz	r3, 800c26e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800c256:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800c25a:	4630      	mov	r0, r6
 800c25c:	f7fc fda6 	bl	8008dac <ucdr_serialize_bool>
 800c260:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c264:	4007      	ands	r7, r0
 800c266:	b94b      	cbnz	r3, 800c27c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800c268:	403d      	ands	r5, r7
 800c26a:	4628      	mov	r0, r5
 800c26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c26e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800c272:	4630      	mov	r0, r6
 800c274:	f7fd fa34 	bl	80096e0 <ucdr_serialize_uint64_t>
 800c278:	4007      	ands	r7, r0
 800c27a:	e7ec      	b.n	800c256 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800c27c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c27e:	4630      	mov	r0, r6
 800c280:	f003 f802 	bl	800f288 <ucdr_serialize_string>
 800c284:	4007      	ands	r7, r0
 800c286:	b2ff      	uxtb	r7, r7
 800c288:	e7ee      	b.n	800c268 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800c28a:	bf00      	nop

0800c28c <uxr_serialize_OBJK_DataWriter_Binary>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	2202      	movs	r2, #2
 800c290:	460d      	mov	r5, r1
 800c292:	4606      	mov	r6, r0
 800c294:	f002 fed8 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c298:	78a9      	ldrb	r1, [r5, #2]
 800c29a:	4604      	mov	r4, r0
 800c29c:	4630      	mov	r0, r6
 800c29e:	f7fc fd85 	bl	8008dac <ucdr_serialize_bool>
 800c2a2:	78ab      	ldrb	r3, [r5, #2]
 800c2a4:	4004      	ands	r4, r0
 800c2a6:	b2e4      	uxtb	r4, r4
 800c2a8:	b90b      	cbnz	r3, 800c2ae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ae:	f105 0108 	add.w	r1, r5, #8
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7ff ff5a 	bl	800c16c <uxr_serialize_OBJK_Endpoint_QosBinary>
 800c2b8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800c2bc:	4607      	mov	r7, r0
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f7fc fd74 	bl	8008dac <ucdr_serialize_bool>
 800c2c4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800c2c8:	4038      	ands	r0, r7
 800c2ca:	b2c7      	uxtb	r7, r0
 800c2cc:	b913      	cbnz	r3, 800c2d4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800c2ce:	403c      	ands	r4, r7
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7fd fa01 	bl	80096e0 <ucdr_serialize_uint64_t>
 800c2de:	4007      	ands	r7, r0
 800c2e0:	e7f5      	b.n	800c2ce <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800c2e2:	bf00      	nop

0800c2e4 <uxr_deserialize_ObjectVariant>:
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	460e      	mov	r6, r1
 800c2ea:	f7fc fda3 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c2ee:	b168      	cbz	r0, 800c30c <uxr_deserialize_ObjectVariant+0x28>
 800c2f0:	7833      	ldrb	r3, [r6, #0]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	2b0d      	cmp	r3, #13
 800c2f8:	d809      	bhi.n	800c30e <uxr_deserialize_ObjectVariant+0x2a>
 800c2fa:	e8df f003 	tbb	[pc, r3]
 800c2fe:	0a41      	.short	0x0a41
 800c300:	0a0a2323 	.word	0x0a0a2323
 800c304:	10080a0a 	.word	0x10080a0a
 800c308:	565c1010 	.word	0x565c1010
 800c30c:	2400      	movs	r4, #0
 800c30e:	4620      	mov	r0, r4
 800c310:	bd70      	pop	{r4, r5, r6, pc}
 800c312:	1d31      	adds	r1, r6, #4
 800c314:	4628      	mov	r0, r5
 800c316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c31a:	f7ff bd55 	b.w	800bdc8 <uxr_deserialize_DATAWRITER_Representation>
 800c31e:	1d31      	adds	r1, r6, #4
 800c320:	4628      	mov	r0, r5
 800c322:	f7fc fd87 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c326:	2800      	cmp	r0, #0
 800c328:	d0f0      	beq.n	800c30c <uxr_deserialize_ObjectVariant+0x28>
 800c32a:	7933      	ldrb	r3, [r6, #4]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d001      	beq.n	800c334 <uxr_deserialize_ObjectVariant+0x50>
 800c330:	2b02      	cmp	r3, #2
 800c332:	d1ec      	bne.n	800c30e <uxr_deserialize_ObjectVariant+0x2a>
 800c334:	68b1      	ldr	r1, [r6, #8]
 800c336:	4628      	mov	r0, r5
 800c338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c33c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c340:	f002 bfb2 	b.w	800f2a8 <ucdr_deserialize_string>
 800c344:	1d31      	adds	r1, r6, #4
 800c346:	4628      	mov	r0, r5
 800c348:	f7fc fd74 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c34c:	4604      	mov	r4, r0
 800c34e:	b170      	cbz	r0, 800c36e <uxr_deserialize_ObjectVariant+0x8a>
 800c350:	7933      	ldrb	r3, [r6, #4]
 800c352:	2b02      	cmp	r3, #2
 800c354:	d04c      	beq.n	800c3f0 <uxr_deserialize_ObjectVariant+0x10c>
 800c356:	2b03      	cmp	r3, #3
 800c358:	d109      	bne.n	800c36e <uxr_deserialize_ObjectVariant+0x8a>
 800c35a:	f106 0308 	add.w	r3, r6, #8
 800c35e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c362:	f106 010c 	add.w	r1, r6, #12
 800c366:	4628      	mov	r0, r5
 800c368:	f002 ff74 	bl	800f254 <ucdr_deserialize_sequence_uint8_t>
 800c36c:	4604      	mov	r4, r0
 800c36e:	2202      	movs	r2, #2
 800c370:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800c374:	4628      	mov	r0, r5
 800c376:	f002 fecb 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c37a:	4020      	ands	r0, r4
 800c37c:	b2c4      	uxtb	r4, r0
 800c37e:	e7c6      	b.n	800c30e <uxr_deserialize_ObjectVariant+0x2a>
 800c380:	1d31      	adds	r1, r6, #4
 800c382:	4628      	mov	r0, r5
 800c384:	f7fc fd56 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c388:	4604      	mov	r4, r0
 800c38a:	b130      	cbz	r0, 800c39a <uxr_deserialize_ObjectVariant+0xb6>
 800c38c:	7933      	ldrb	r3, [r6, #4]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d036      	beq.n	800c400 <uxr_deserialize_ObjectVariant+0x11c>
 800c392:	2b03      	cmp	r3, #3
 800c394:	d03c      	beq.n	800c410 <uxr_deserialize_ObjectVariant+0x12c>
 800c396:	2b01      	cmp	r3, #1
 800c398:	d032      	beq.n	800c400 <uxr_deserialize_ObjectVariant+0x11c>
 800c39a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f7fd faee 	bl	8009980 <ucdr_deserialize_int16_t>
 800c3a4:	4020      	ands	r0, r4
 800c3a6:	b2c4      	uxtb	r4, r0
 800c3a8:	e7b1      	b.n	800c30e <uxr_deserialize_ObjectVariant+0x2a>
 800c3aa:	1d31      	adds	r1, r6, #4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3b2:	f7ff bbbf 	b.w	800bb34 <uxr_deserialize_CLIENT_Representation>
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	18b1      	adds	r1, r6, r2
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f002 fea8 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	f106 0108 	add.w	r1, r6, #8
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f002 fea1 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	4004      	ands	r4, r0
 800c3d2:	f106 010a 	add.w	r1, r6, #10
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f002 fe9a 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c3dc:	b2e4      	uxtb	r4, r4
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f106 010c 	add.w	r1, r6, #12
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	401c      	ands	r4, r3
 800c3e8:	f7fc fcf6 	bl	8008dd8 <ucdr_deserialize_bool>
 800c3ec:	4004      	ands	r4, r0
 800c3ee:	e78e      	b.n	800c30e <uxr_deserialize_ObjectVariant+0x2a>
 800c3f0:	68b1      	ldr	r1, [r6, #8]
 800c3f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f002 ff56 	bl	800f2a8 <ucdr_deserialize_string>
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	e7b6      	b.n	800c36e <uxr_deserialize_ObjectVariant+0x8a>
 800c400:	68b1      	ldr	r1, [r6, #8]
 800c402:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c406:	4628      	mov	r0, r5
 800c408:	f002 ff4e 	bl	800f2a8 <ucdr_deserialize_string>
 800c40c:	4604      	mov	r4, r0
 800c40e:	e7c4      	b.n	800c39a <uxr_deserialize_ObjectVariant+0xb6>
 800c410:	f106 0308 	add.w	r3, r6, #8
 800c414:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c418:	f106 010c 	add.w	r1, r6, #12
 800c41c:	4628      	mov	r0, r5
 800c41e:	f002 ff19 	bl	800f254 <ucdr_deserialize_sequence_uint8_t>
 800c422:	4604      	mov	r4, r0
 800c424:	e7b9      	b.n	800c39a <uxr_deserialize_ObjectVariant+0xb6>
 800c426:	bf00      	nop

0800c428 <uxr_deserialize_BaseObjectRequest>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	2202      	movs	r2, #2
 800c42c:	4605      	mov	r5, r0
 800c42e:	460e      	mov	r6, r1
 800c430:	f002 fe6e 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c434:	2202      	movs	r2, #2
 800c436:	4604      	mov	r4, r0
 800c438:	18b1      	adds	r1, r6, r2
 800c43a:	4628      	mov	r0, r5
 800c43c:	f002 fe68 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c440:	4020      	ands	r0, r4
 800c442:	b2c0      	uxtb	r0, r0
 800c444:	bd70      	pop	{r4, r5, r6, pc}
 800c446:	bf00      	nop

0800c448 <uxr_serialize_ActivityInfoVariant>:
 800c448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c44c:	460d      	mov	r5, r1
 800c44e:	7809      	ldrb	r1, [r1, #0]
 800c450:	4607      	mov	r7, r0
 800c452:	f7fc fcd9 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c456:	4681      	mov	r9, r0
 800c458:	b138      	cbz	r0, 800c46a <uxr_serialize_ActivityInfoVariant+0x22>
 800c45a:	782b      	ldrb	r3, [r5, #0]
 800c45c:	2b06      	cmp	r3, #6
 800c45e:	f000 8082 	beq.w	800c566 <uxr_serialize_ActivityInfoVariant+0x11e>
 800c462:	2b0d      	cmp	r3, #13
 800c464:	d016      	beq.n	800c494 <uxr_serialize_ActivityInfoVariant+0x4c>
 800c466:	2b05      	cmp	r3, #5
 800c468:	d002      	beq.n	800c470 <uxr_serialize_ActivityInfoVariant+0x28>
 800c46a:	4648      	mov	r0, r9
 800c46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c470:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c474:	4638      	mov	r0, r7
 800c476:	f7fd fa03 	bl	8009880 <ucdr_serialize_int16_t>
 800c47a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800c47e:	4681      	mov	r9, r0
 800c480:	4638      	mov	r0, r7
 800c482:	f7fd f92d 	bl	80096e0 <ucdr_serialize_uint64_t>
 800c486:	ea09 0000 	and.w	r0, r9, r0
 800c48a:	fa5f f980 	uxtb.w	r9, r0
 800c48e:	4648      	mov	r0, r9
 800c490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c494:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c498:	4638      	mov	r0, r7
 800c49a:	f7fd f9f1 	bl	8009880 <ucdr_serialize_int16_t>
 800c49e:	68e9      	ldr	r1, [r5, #12]
 800c4a0:	4681      	mov	r9, r0
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f7fc fec6 	bl	8009234 <ucdr_serialize_uint32_t>
 800c4a8:	68eb      	ldr	r3, [r5, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0eb      	beq.n	800c486 <uxr_serialize_ActivityInfoVariant+0x3e>
 800c4ae:	b320      	cbz	r0, 800c4fa <uxr_serialize_ActivityInfoVariant+0xb2>
 800c4b0:	f105 080c 	add.w	r8, r5, #12
 800c4b4:	2600      	movs	r6, #0
 800c4b6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800c4ba:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800c4be:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	f7fc fca0 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d053      	beq.n	800c574 <uxr_serialize_ActivityInfoVariant+0x12c>
 800c4cc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800c4d0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800c4d4:	0074      	lsls	r4, r6, #1
 800c4d6:	00c9      	lsls	r1, r1, #3
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d854      	bhi.n	800c586 <uxr_serialize_ActivityInfoVariant+0x13e>
 800c4dc:	e8df f003 	tbb	[pc, r3]
 800c4e0:	02102132 	.word	0x02102132
 800c4e4:	4441      	add	r1, r8
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	6889      	ldr	r1, [r1, #8]
 800c4ea:	f002 fecd 	bl	800f288 <ucdr_serialize_string>
 800c4ee:	68ea      	ldr	r2, [r5, #12]
 800c4f0:	3601      	adds	r6, #1
 800c4f2:	4296      	cmp	r6, r2
 800c4f4:	d242      	bcs.n	800c57c <uxr_serialize_ActivityInfoVariant+0x134>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d1dd      	bne.n	800c4b6 <uxr_serialize_ActivityInfoVariant+0x6e>
 800c4fa:	f04f 0900 	mov.w	r9, #0
 800c4fe:	e7b4      	b.n	800c46a <uxr_serialize_ActivityInfoVariant+0x22>
 800c500:	3108      	adds	r1, #8
 800c502:	4441      	add	r1, r8
 800c504:	2210      	movs	r2, #16
 800c506:	4638      	mov	r0, r7
 800c508:	f002 fd9e 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c50c:	4434      	add	r4, r6
 800c50e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c512:	4604      	mov	r4, r0
 800c514:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c516:	4638      	mov	r0, r7
 800c518:	f7fc fe8c 	bl	8009234 <ucdr_serialize_uint32_t>
 800c51c:	4020      	ands	r0, r4
 800c51e:	b2c0      	uxtb	r0, r0
 800c520:	e7e5      	b.n	800c4ee <uxr_serialize_ActivityInfoVariant+0xa6>
 800c522:	3108      	adds	r1, #8
 800c524:	4441      	add	r1, r8
 800c526:	2204      	movs	r2, #4
 800c528:	4638      	mov	r0, r7
 800c52a:	f002 fd8d 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c52e:	4434      	add	r4, r6
 800c530:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c534:	4604      	mov	r4, r0
 800c536:	8b19      	ldrh	r1, [r3, #24]
 800c538:	4638      	mov	r0, r7
 800c53a:	f7fc fc91 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c53e:	4020      	ands	r0, r4
 800c540:	b2c0      	uxtb	r0, r0
 800c542:	e7d4      	b.n	800c4ee <uxr_serialize_ActivityInfoVariant+0xa6>
 800c544:	3108      	adds	r1, #8
 800c546:	4441      	add	r1, r8
 800c548:	2202      	movs	r2, #2
 800c54a:	4638      	mov	r0, r7
 800c54c:	f002 fd7c 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c550:	4434      	add	r4, r6
 800c552:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c556:	4604      	mov	r4, r0
 800c558:	7d99      	ldrb	r1, [r3, #22]
 800c55a:	4638      	mov	r0, r7
 800c55c:	f7fc fc54 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c560:	4020      	ands	r0, r4
 800c562:	b2c0      	uxtb	r0, r0
 800c564:	e7c3      	b.n	800c4ee <uxr_serialize_ActivityInfoVariant+0xa6>
 800c566:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c56a:	4638      	mov	r0, r7
 800c56c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	f7fd b986 	b.w	8009880 <ucdr_serialize_int16_t>
 800c574:	68ea      	ldr	r2, [r5, #12]
 800c576:	3601      	adds	r6, #1
 800c578:	42b2      	cmp	r2, r6
 800c57a:	d8be      	bhi.n	800c4fa <uxr_serialize_ActivityInfoVariant+0xb2>
 800c57c:	ea09 0900 	and.w	r9, r9, r0
 800c580:	fa5f f989 	uxtb.w	r9, r9
 800c584:	e771      	b.n	800c46a <uxr_serialize_ActivityInfoVariant+0x22>
 800c586:	68eb      	ldr	r3, [r5, #12]
 800c588:	3601      	adds	r6, #1
 800c58a:	429e      	cmp	r6, r3
 800c58c:	f10a 0a18 	add.w	sl, sl, #24
 800c590:	d395      	bcc.n	800c4be <uxr_serialize_ActivityInfoVariant+0x76>
 800c592:	e76a      	b.n	800c46a <uxr_serialize_ActivityInfoVariant+0x22>

0800c594 <uxr_deserialize_BaseObjectReply>:
 800c594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c598:	2202      	movs	r2, #2
 800c59a:	4606      	mov	r6, r0
 800c59c:	460f      	mov	r7, r1
 800c59e:	f002 fdb7 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	18b9      	adds	r1, r7, r2
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f002 fdb1 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c5ae:	1d39      	adds	r1, r7, #4
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7fc fc3e 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c5b8:	1d79      	adds	r1, r7, #5
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7fc fc39 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c5c2:	ea05 0508 	and.w	r5, r5, r8
 800c5c6:	402c      	ands	r4, r5
 800c5c8:	4020      	ands	r0, r4
 800c5ca:	b2c0      	uxtb	r0, r0
 800c5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5d0 <uxr_serialize_ReadSpecification>:
 800c5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d4:	460e      	mov	r6, r1
 800c5d6:	7809      	ldrb	r1, [r1, #0]
 800c5d8:	4607      	mov	r7, r0
 800c5da:	f7fc fc15 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c5de:	7871      	ldrb	r1, [r6, #1]
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	f7fc fc10 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c5e8:	78b1      	ldrb	r1, [r6, #2]
 800c5ea:	4004      	ands	r4, r0
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7fc fbdd 	bl	8008dac <ucdr_serialize_bool>
 800c5f2:	78b3      	ldrb	r3, [r6, #2]
 800c5f4:	b2e4      	uxtb	r4, r4
 800c5f6:	4004      	ands	r4, r0
 800c5f8:	b94b      	cbnz	r3, 800c60e <uxr_serialize_ReadSpecification+0x3e>
 800c5fa:	7a31      	ldrb	r1, [r6, #8]
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f7fc fbd5 	bl	8008dac <ucdr_serialize_bool>
 800c602:	7a33      	ldrb	r3, [r6, #8]
 800c604:	4004      	ands	r4, r0
 800c606:	b943      	cbnz	r3, 800c61a <uxr_serialize_ReadSpecification+0x4a>
 800c608:	4620      	mov	r0, r4
 800c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60e:	6871      	ldr	r1, [r6, #4]
 800c610:	4638      	mov	r0, r7
 800c612:	f002 fe39 	bl	800f288 <ucdr_serialize_string>
 800c616:	4004      	ands	r4, r0
 800c618:	e7ef      	b.n	800c5fa <uxr_serialize_ReadSpecification+0x2a>
 800c61a:	8971      	ldrh	r1, [r6, #10]
 800c61c:	4638      	mov	r0, r7
 800c61e:	f7fc fc1f 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c622:	89b1      	ldrh	r1, [r6, #12]
 800c624:	4605      	mov	r5, r0
 800c626:	4638      	mov	r0, r7
 800c628:	f7fc fc1a 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c62c:	89f1      	ldrh	r1, [r6, #14]
 800c62e:	4005      	ands	r5, r0
 800c630:	4638      	mov	r0, r7
 800c632:	f7fc fc15 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c636:	8a31      	ldrh	r1, [r6, #16]
 800c638:	4680      	mov	r8, r0
 800c63a:	4638      	mov	r0, r7
 800c63c:	f7fc fc10 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c640:	b2ed      	uxtb	r5, r5
 800c642:	4025      	ands	r5, r4
 800c644:	ea08 0505 	and.w	r5, r8, r5
 800c648:	ea00 0405 	and.w	r4, r0, r5
 800c64c:	4620      	mov	r0, r4
 800c64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c652:	bf00      	nop

0800c654 <uxr_serialize_CREATE_CLIENT_Payload>:
 800c654:	f7ff ba16 	b.w	800ba84 <uxr_serialize_CLIENT_Representation>

0800c658 <uxr_serialize_CREATE_Payload>:
 800c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65a:	2202      	movs	r2, #2
 800c65c:	4607      	mov	r7, r0
 800c65e:	460e      	mov	r6, r1
 800c660:	f002 fcf2 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c664:	2202      	movs	r2, #2
 800c666:	18b1      	adds	r1, r6, r2
 800c668:	4605      	mov	r5, r0
 800c66a:	4638      	mov	r0, r7
 800c66c:	f002 fcec 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c670:	7931      	ldrb	r1, [r6, #4]
 800c672:	4604      	mov	r4, r0
 800c674:	4638      	mov	r0, r7
 800c676:	f7fc fbc7 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c67a:	b170      	cbz	r0, 800c69a <uxr_serialize_CREATE_Payload+0x42>
 800c67c:	7933      	ldrb	r3, [r6, #4]
 800c67e:	402c      	ands	r4, r5
 800c680:	3b01      	subs	r3, #1
 800c682:	b2e4      	uxtb	r4, r4
 800c684:	2b0d      	cmp	r3, #13
 800c686:	d809      	bhi.n	800c69c <uxr_serialize_CREATE_Payload+0x44>
 800c688:	e8df f003 	tbb	[pc, r3]
 800c68c:	23230a4c 	.word	0x23230a4c
 800c690:	0a0a0a0a 	.word	0x0a0a0a0a
 800c694:	12121208 	.word	0x12121208
 800c698:	3e45      	.short	0x3e45
 800c69a:	2400      	movs	r4, #0
 800c69c:	4620      	mov	r0, r4
 800c69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6a0:	f106 0108 	add.w	r1, r6, #8
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	f7ff faf3 	bl	800bc90 <uxr_serialize_DATAWRITER_Representation>
 800c6aa:	4004      	ands	r4, r0
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b0:	7a31      	ldrb	r1, [r6, #8]
 800c6b2:	4638      	mov	r0, r7
 800c6b4:	f7fc fba8 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d0ee      	beq.n	800c69a <uxr_serialize_CREATE_Payload+0x42>
 800c6bc:	7a33      	ldrb	r3, [r6, #8]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d001      	beq.n	800c6c6 <uxr_serialize_CREATE_Payload+0x6e>
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d1ea      	bne.n	800c69c <uxr_serialize_CREATE_Payload+0x44>
 800c6c6:	68f1      	ldr	r1, [r6, #12]
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f002 fddd 	bl	800f288 <ucdr_serialize_string>
 800c6ce:	4004      	ands	r4, r0
 800c6d0:	e7e4      	b.n	800c69c <uxr_serialize_CREATE_Payload+0x44>
 800c6d2:	7a31      	ldrb	r1, [r6, #8]
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f7fc fb97 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c6da:	4605      	mov	r5, r0
 800c6dc:	b158      	cbz	r0, 800c6f6 <uxr_serialize_CREATE_Payload+0x9e>
 800c6de:	7a33      	ldrb	r3, [r6, #8]
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d034      	beq.n	800c74e <uxr_serialize_CREATE_Payload+0xf6>
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	d106      	bne.n	800c6f6 <uxr_serialize_CREATE_Payload+0x9e>
 800c6e8:	68f2      	ldr	r2, [r6, #12]
 800c6ea:	f106 0110 	add.w	r1, r6, #16
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	f002 fd9e 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800c6fc:	4638      	mov	r0, r7
 800c6fe:	f002 fca3 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c702:	4028      	ands	r0, r5
 800c704:	4004      	ands	r4, r0
 800c706:	e7c9      	b.n	800c69c <uxr_serialize_CREATE_Payload+0x44>
 800c708:	f106 0108 	add.w	r1, r6, #8
 800c70c:	4638      	mov	r0, r7
 800c70e:	f7ff f9b9 	bl	800ba84 <uxr_serialize_CLIENT_Representation>
 800c712:	4004      	ands	r4, r0
 800c714:	e7c2      	b.n	800c69c <uxr_serialize_CREATE_Payload+0x44>
 800c716:	f106 0108 	add.w	r1, r6, #8
 800c71a:	4638      	mov	r0, r7
 800c71c:	f7ff fa6e 	bl	800bbfc <uxr_serialize_AGENT_Representation>
 800c720:	4004      	ands	r4, r0
 800c722:	e7bb      	b.n	800c69c <uxr_serialize_CREATE_Payload+0x44>
 800c724:	7a31      	ldrb	r1, [r6, #8]
 800c726:	4638      	mov	r0, r7
 800c728:	f7fc fb6e 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c72c:	4605      	mov	r5, r0
 800c72e:	b130      	cbz	r0, 800c73e <uxr_serialize_CREATE_Payload+0xe6>
 800c730:	7a33      	ldrb	r3, [r6, #8]
 800c732:	2b02      	cmp	r3, #2
 800c734:	d011      	beq.n	800c75a <uxr_serialize_CREATE_Payload+0x102>
 800c736:	2b03      	cmp	r3, #3
 800c738:	d015      	beq.n	800c766 <uxr_serialize_CREATE_Payload+0x10e>
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d00d      	beq.n	800c75a <uxr_serialize_CREATE_Payload+0x102>
 800c73e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800c742:	4638      	mov	r0, r7
 800c744:	f7fd f89c 	bl	8009880 <ucdr_serialize_int16_t>
 800c748:	4028      	ands	r0, r5
 800c74a:	4004      	ands	r4, r0
 800c74c:	e7a6      	b.n	800c69c <uxr_serialize_CREATE_Payload+0x44>
 800c74e:	68f1      	ldr	r1, [r6, #12]
 800c750:	4638      	mov	r0, r7
 800c752:	f002 fd99 	bl	800f288 <ucdr_serialize_string>
 800c756:	4605      	mov	r5, r0
 800c758:	e7cd      	b.n	800c6f6 <uxr_serialize_CREATE_Payload+0x9e>
 800c75a:	68f1      	ldr	r1, [r6, #12]
 800c75c:	4638      	mov	r0, r7
 800c75e:	f002 fd93 	bl	800f288 <ucdr_serialize_string>
 800c762:	4605      	mov	r5, r0
 800c764:	e7eb      	b.n	800c73e <uxr_serialize_CREATE_Payload+0xe6>
 800c766:	68f2      	ldr	r2, [r6, #12]
 800c768:	f106 0110 	add.w	r1, r6, #16
 800c76c:	4638      	mov	r0, r7
 800c76e:	f002 fd5f 	bl	800f230 <ucdr_serialize_sequence_uint8_t>
 800c772:	4605      	mov	r5, r0
 800c774:	e7e3      	b.n	800c73e <uxr_serialize_CREATE_Payload+0xe6>
 800c776:	bf00      	nop

0800c778 <uxr_deserialize_GET_INFO_Payload>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	2202      	movs	r2, #2
 800c77c:	4605      	mov	r5, r0
 800c77e:	460e      	mov	r6, r1
 800c780:	f002 fcc6 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c784:	2202      	movs	r2, #2
 800c786:	18b1      	adds	r1, r6, r2
 800c788:	4604      	mov	r4, r0
 800c78a:	4628      	mov	r0, r5
 800c78c:	f002 fcc0 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c790:	1d31      	adds	r1, r6, #4
 800c792:	4004      	ands	r4, r0
 800c794:	4628      	mov	r0, r5
 800c796:	f7fc fe7d 	bl	8009494 <ucdr_deserialize_uint32_t>
 800c79a:	b2e4      	uxtb	r4, r4
 800c79c:	4020      	ands	r0, r4
 800c79e:	bd70      	pop	{r4, r5, r6, pc}

0800c7a0 <uxr_serialize_DELETE_Payload>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	460e      	mov	r6, r1
 800c7a8:	f002 fc4e 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	18b1      	adds	r1, r6, r2
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f002 fc48 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c7b8:	4020      	ands	r0, r4
 800c7ba:	b2c0      	uxtb	r0, r0
 800c7bc:	bd70      	pop	{r4, r5, r6, pc}
 800c7be:	bf00      	nop

0800c7c0 <uxr_deserialize_STATUS_AGENT_Payload>:
 800c7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	460e      	mov	r6, r1
 800c7c8:	f7fc fb34 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c7cc:	1c71      	adds	r1, r6, #1
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	f7fc fb2f 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	18b1      	adds	r1, r6, r2
 800c7da:	4680      	mov	r8, r0
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f002 fc97 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c7e2:	f106 0108 	add.w	r1, r6, #8
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	2202      	movs	r2, #2
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f002 fc90 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c7f0:	ea04 0308 	and.w	r3, r4, r8
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	ea03 0407 	and.w	r4, r3, r7
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	f106 010a 	add.w	r1, r6, #10
 800c802:	4628      	mov	r0, r5
 800c804:	f002 fc84 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c808:	f106 010c 	add.w	r1, r6, #12
 800c80c:	4603      	mov	r3, r0
 800c80e:	4628      	mov	r0, r5
 800c810:	461d      	mov	r5, r3
 800c812:	f7fc fae1 	bl	8008dd8 <ucdr_deserialize_bool>
 800c816:	403c      	ands	r4, r7
 800c818:	4025      	ands	r5, r4
 800c81a:	4028      	ands	r0, r5
 800c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c820 <uxr_deserialize_STATUS_Payload>:
 800c820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c824:	2202      	movs	r2, #2
 800c826:	4606      	mov	r6, r0
 800c828:	460f      	mov	r7, r1
 800c82a:	f002 fc71 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c82e:	2202      	movs	r2, #2
 800c830:	18b9      	adds	r1, r7, r2
 800c832:	4605      	mov	r5, r0
 800c834:	4630      	mov	r0, r6
 800c836:	f002 fc6b 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c83a:	1d39      	adds	r1, r7, #4
 800c83c:	4680      	mov	r8, r0
 800c83e:	4630      	mov	r0, r6
 800c840:	f7fc faf8 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c844:	1d79      	adds	r1, r7, #5
 800c846:	4604      	mov	r4, r0
 800c848:	4630      	mov	r0, r6
 800c84a:	f7fc faf3 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c84e:	ea05 0508 	and.w	r5, r5, r8
 800c852:	402c      	ands	r4, r5
 800c854:	4020      	ands	r0, r4
 800c856:	b2c0      	uxtb	r0, r0
 800c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c85c <uxr_serialize_INFO_Payload>:
 800c85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c860:	2202      	movs	r2, #2
 800c862:	460c      	mov	r4, r1
 800c864:	4605      	mov	r5, r0
 800c866:	f002 fbef 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c86a:	2202      	movs	r2, #2
 800c86c:	18a1      	adds	r1, r4, r2
 800c86e:	4680      	mov	r8, r0
 800c870:	4628      	mov	r0, r5
 800c872:	f002 fbe9 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c876:	7921      	ldrb	r1, [r4, #4]
 800c878:	4607      	mov	r7, r0
 800c87a:	4628      	mov	r0, r5
 800c87c:	f7fc fac4 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c880:	7961      	ldrb	r1, [r4, #5]
 800c882:	4606      	mov	r6, r0
 800c884:	4628      	mov	r0, r5
 800c886:	f7fc fabf 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c88a:	ea08 0807 	and.w	r8, r8, r7
 800c88e:	ea06 0608 	and.w	r6, r6, r8
 800c892:	4006      	ands	r6, r0
 800c894:	7a21      	ldrb	r1, [r4, #8]
 800c896:	4628      	mov	r0, r5
 800c898:	f7fc fa88 	bl	8008dac <ucdr_serialize_bool>
 800c89c:	7a23      	ldrb	r3, [r4, #8]
 800c89e:	b2f7      	uxtb	r7, r6
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	b96b      	cbnz	r3, 800c8c0 <uxr_serialize_INFO_Payload+0x64>
 800c8a4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7fc fa7f 	bl	8008dac <ucdr_serialize_bool>
 800c8ae:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800c8b2:	4030      	ands	r0, r6
 800c8b4:	b2c6      	uxtb	r6, r0
 800c8b6:	b983      	cbnz	r3, 800c8da <uxr_serialize_INFO_Payload+0x7e>
 800c8b8:	ea06 0007 	and.w	r0, r6, r7
 800c8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c0:	7b21      	ldrb	r1, [r4, #12]
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f7fc faa0 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c8c8:	b188      	cbz	r0, 800c8ee <uxr_serialize_INFO_Payload+0x92>
 800c8ca:	f104 010c 	add.w	r1, r4, #12
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f7ff fa06 	bl	800bce0 <uxr_serialize_ObjectVariant.part.0>
 800c8d4:	4030      	ands	r0, r6
 800c8d6:	b2c6      	uxtb	r6, r0
 800c8d8:	e7e4      	b.n	800c8a4 <uxr_serialize_INFO_Payload+0x48>
 800c8da:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f7ff fdb2 	bl	800c448 <uxr_serialize_ActivityInfoVariant>
 800c8e4:	4006      	ands	r6, r0
 800c8e6:	ea06 0007 	and.w	r0, r6, r7
 800c8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	e7d8      	b.n	800c8a4 <uxr_serialize_INFO_Payload+0x48>
 800c8f2:	bf00      	nop

0800c8f4 <uxr_serialize_READ_DATA_Payload>:
 800c8f4:	b570      	push	{r4, r5, r6, lr}
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	460e      	mov	r6, r1
 800c8fc:	f002 fba4 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c900:	2202      	movs	r2, #2
 800c902:	18b1      	adds	r1, r6, r2
 800c904:	4604      	mov	r4, r0
 800c906:	4628      	mov	r0, r5
 800c908:	f002 fb9e 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c90c:	1d31      	adds	r1, r6, #4
 800c90e:	4004      	ands	r4, r0
 800c910:	4628      	mov	r0, r5
 800c912:	f7ff fe5d 	bl	800c5d0 <uxr_serialize_ReadSpecification>
 800c916:	b2e4      	uxtb	r4, r4
 800c918:	4020      	ands	r0, r4
 800c91a:	bd70      	pop	{r4, r5, r6, pc}

0800c91c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	2202      	movs	r2, #2
 800c920:	4605      	mov	r5, r0
 800c922:	460e      	mov	r6, r1
 800c924:	f002 fb90 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c928:	2202      	movs	r2, #2
 800c92a:	4604      	mov	r4, r0
 800c92c:	18b1      	adds	r1, r6, r2
 800c92e:	4628      	mov	r0, r5
 800c930:	f002 fb8a 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c934:	4020      	ands	r0, r4
 800c936:	b2c0      	uxtb	r0, r0
 800c938:	bd70      	pop	{r4, r5, r6, pc}
 800c93a:	bf00      	nop

0800c93c <uxr_serialize_ACKNACK_Payload>:
 800c93c:	b570      	push	{r4, r5, r6, lr}
 800c93e:	460c      	mov	r4, r1
 800c940:	460e      	mov	r6, r1
 800c942:	f834 1b02 	ldrh.w	r1, [r4], #2
 800c946:	4605      	mov	r5, r0
 800c948:	f7fc fa8a 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c94c:	2202      	movs	r2, #2
 800c94e:	4621      	mov	r1, r4
 800c950:	4604      	mov	r4, r0
 800c952:	4628      	mov	r0, r5
 800c954:	f002 fb78 	bl	800f048 <ucdr_serialize_array_uint8_t>
 800c958:	7931      	ldrb	r1, [r6, #4]
 800c95a:	4004      	ands	r4, r0
 800c95c:	4628      	mov	r0, r5
 800c95e:	f7fc fa53 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c962:	b2e4      	uxtb	r4, r4
 800c964:	4020      	ands	r0, r4
 800c966:	bd70      	pop	{r4, r5, r6, pc}

0800c968 <uxr_deserialize_ACKNACK_Payload>:
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	4605      	mov	r5, r0
 800c96c:	460e      	mov	r6, r1
 800c96e:	f7fc fb77 	bl	8009060 <ucdr_deserialize_uint16_t>
 800c972:	2202      	movs	r2, #2
 800c974:	18b1      	adds	r1, r6, r2
 800c976:	4604      	mov	r4, r0
 800c978:	4628      	mov	r0, r5
 800c97a:	f002 fbc9 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800c97e:	1d31      	adds	r1, r6, #4
 800c980:	4004      	ands	r4, r0
 800c982:	4628      	mov	r0, r5
 800c984:	f7fc fa56 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c988:	b2e4      	uxtb	r4, r4
 800c98a:	4020      	ands	r0, r4
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
 800c98e:	bf00      	nop

0800c990 <uxr_serialize_HEARTBEAT_Payload>:
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	460d      	mov	r5, r1
 800c994:	8809      	ldrh	r1, [r1, #0]
 800c996:	4606      	mov	r6, r0
 800c998:	f7fc fa62 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c99c:	8869      	ldrh	r1, [r5, #2]
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f7fc fa5d 	bl	8008e60 <ucdr_serialize_uint16_t>
 800c9a6:	7929      	ldrb	r1, [r5, #4]
 800c9a8:	4004      	ands	r4, r0
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f7fc fa2c 	bl	8008e08 <ucdr_serialize_uint8_t>
 800c9b0:	b2e4      	uxtb	r4, r4
 800c9b2:	4020      	ands	r0, r4
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
 800c9b6:	bf00      	nop

0800c9b8 <uxr_deserialize_HEARTBEAT_Payload>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	460e      	mov	r6, r1
 800c9be:	f7fc fb4f 	bl	8009060 <ucdr_deserialize_uint16_t>
 800c9c2:	1cb1      	adds	r1, r6, #2
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f7fc fb4a 	bl	8009060 <ucdr_deserialize_uint16_t>
 800c9cc:	1d31      	adds	r1, r6, #4
 800c9ce:	4004      	ands	r4, r0
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f7fc fa2f 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800c9d6:	b2e4      	uxtb	r4, r4
 800c9d8:	4020      	ands	r0, r4
 800c9da:	bd70      	pop	{r4, r5, r6, pc}

0800c9dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800c9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	460e      	mov	r6, r1
 800c9e4:	f7fd f8d8 	bl	8009b98 <ucdr_deserialize_int32_t>
 800c9e8:	1d31      	adds	r1, r6, #4
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f7fc fd51 	bl	8009494 <ucdr_deserialize_uint32_t>
 800c9f2:	f106 0108 	add.w	r1, r6, #8
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	f7fd f8cd 	bl	8009b98 <ucdr_deserialize_int32_t>
 800c9fe:	f106 010c 	add.w	r1, r6, #12
 800ca02:	4604      	mov	r4, r0
 800ca04:	4628      	mov	r0, r5
 800ca06:	f7fc fd45 	bl	8009494 <ucdr_deserialize_uint32_t>
 800ca0a:	ea07 0708 	and.w	r7, r7, r8
 800ca0e:	403c      	ands	r4, r7
 800ca10:	f106 0110 	add.w	r1, r6, #16
 800ca14:	4004      	ands	r4, r0
 800ca16:	4628      	mov	r0, r5
 800ca18:	f7fd f8be 	bl	8009b98 <ucdr_deserialize_int32_t>
 800ca1c:	f106 0114 	add.w	r1, r6, #20
 800ca20:	4607      	mov	r7, r0
 800ca22:	4628      	mov	r0, r5
 800ca24:	f7fc fd36 	bl	8009494 <ucdr_deserialize_uint32_t>
 800ca28:	b2e4      	uxtb	r4, r4
 800ca2a:	403c      	ands	r4, r7
 800ca2c:	4020      	ands	r0, r4
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca32:	bf00      	nop

0800ca34 <uxr_deserialize_SampleIdentity>:
 800ca34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca38:	220c      	movs	r2, #12
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	f002 fb67 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800ca42:	2203      	movs	r2, #3
 800ca44:	f105 010c 	add.w	r1, r5, #12
 800ca48:	4607      	mov	r7, r0
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f002 fb60 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 800ca50:	f105 010f 	add.w	r1, r5, #15
 800ca54:	4680      	mov	r8, r0
 800ca56:	4620      	mov	r0, r4
 800ca58:	f7fc f9ec 	bl	8008e34 <ucdr_deserialize_uint8_t>
 800ca5c:	f105 0110 	add.w	r1, r5, #16
 800ca60:	4606      	mov	r6, r0
 800ca62:	4620      	mov	r0, r4
 800ca64:	f7fd f898 	bl	8009b98 <ucdr_deserialize_int32_t>
 800ca68:	f105 0114 	add.w	r1, r5, #20
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	4620      	mov	r0, r4
 800ca70:	ea07 0708 	and.w	r7, r7, r8
 800ca74:	461c      	mov	r4, r3
 800ca76:	f7fc fd0d 	bl	8009494 <ucdr_deserialize_uint32_t>
 800ca7a:	403e      	ands	r6, r7
 800ca7c:	4034      	ands	r4, r6
 800ca7e:	4020      	ands	r0, r4
 800ca80:	b2c0      	uxtb	r0, r0
 800ca82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca86:	bf00      	nop

0800ca88 <rcl_convert_rmw_ret_to_rcl_ret>:
 800ca88:	280b      	cmp	r0, #11
 800ca8a:	dc0d      	bgt.n	800caa8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	db09      	blt.n	800caa4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ca90:	280b      	cmp	r0, #11
 800ca92:	d807      	bhi.n	800caa4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ca94:	e8df f000 	tbb	[pc, r0]
 800ca98:	07060607 	.word	0x07060607
 800ca9c:	06060606 	.word	0x06060606
 800caa0:	07070606 	.word	0x07070606
 800caa4:	2001      	movs	r0, #1
 800caa6:	4770      	bx	lr
 800caa8:	28cb      	cmp	r0, #203	; 0xcb
 800caaa:	bf18      	it	ne
 800caac:	2001      	movne	r0, #1
 800caae:	4770      	bx	lr

0800cab0 <rcl_get_zero_initialized_context>:
 800cab0:	4a03      	ldr	r2, [pc, #12]	; (800cac0 <rcl_get_zero_initialized_context+0x10>)
 800cab2:	4603      	mov	r3, r0
 800cab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cab8:	e883 0003 	stmia.w	r3, {r0, r1}
 800cabc:	4618      	mov	r0, r3
 800cabe:	4770      	bx	lr
 800cac0:	08012e44 	.word	0x08012e44

0800cac4 <rcl_context_is_valid>:
 800cac4:	b118      	cbz	r0, 800cace <rcl_context_is_valid+0xa>
 800cac6:	6840      	ldr	r0, [r0, #4]
 800cac8:	3800      	subs	r0, #0
 800caca:	bf18      	it	ne
 800cacc:	2001      	movne	r0, #1
 800cace:	4770      	bx	lr

0800cad0 <__cleanup_context>:
 800cad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cad4:	4606      	mov	r6, r0
 800cad6:	6800      	ldr	r0, [r0, #0]
 800cad8:	2300      	movs	r3, #0
 800cada:	6073      	str	r3, [r6, #4]
 800cadc:	2800      	cmp	r0, #0
 800cade:	d049      	beq.n	800cb74 <__cleanup_context+0xa4>
 800cae0:	6947      	ldr	r7, [r0, #20]
 800cae2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800cae6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800caea:	b137      	cbz	r7, 800cafa <__cleanup_context+0x2a>
 800caec:	3014      	adds	r0, #20
 800caee:	f000 f9bb 	bl	800ce68 <rcl_init_options_fini>
 800caf2:	4607      	mov	r7, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d144      	bne.n	800cb82 <__cleanup_context+0xb2>
 800caf8:	6830      	ldr	r0, [r6, #0]
 800cafa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cafc:	b143      	cbz	r3, 800cb10 <__cleanup_context+0x40>
 800cafe:	3028      	adds	r0, #40	; 0x28
 800cb00:	f001 fe96 	bl	800e830 <rmw_context_fini>
 800cb04:	b118      	cbz	r0, 800cb0e <__cleanup_context+0x3e>
 800cb06:	2f00      	cmp	r7, #0
 800cb08:	d03e      	beq.n	800cb88 <__cleanup_context+0xb8>
 800cb0a:	f7fb fc51 	bl	80083b0 <rcutils_reset_error>
 800cb0e:	6830      	ldr	r0, [r6, #0]
 800cb10:	6a03      	ldr	r3, [r0, #32]
 800cb12:	b1db      	cbz	r3, 800cb4c <__cleanup_context+0x7c>
 800cb14:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800cb18:	2a01      	cmp	r2, #1
 800cb1a:	f17c 0100 	sbcs.w	r1, ip, #0
 800cb1e:	db11      	blt.n	800cb44 <__cleanup_context+0x74>
 800cb20:	2400      	movs	r4, #0
 800cb22:	4625      	mov	r5, r4
 800cb24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cb28:	4649      	mov	r1, r9
 800cb2a:	b1b8      	cbz	r0, 800cb5c <__cleanup_context+0x8c>
 800cb2c:	47c0      	blx	r8
 800cb2e:	6833      	ldr	r3, [r6, #0]
 800cb30:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800cb34:	3401      	adds	r4, #1
 800cb36:	f145 0500 	adc.w	r5, r5, #0
 800cb3a:	4294      	cmp	r4, r2
 800cb3c:	eb75 010c 	sbcs.w	r1, r5, ip
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	dbef      	blt.n	800cb24 <__cleanup_context+0x54>
 800cb44:	4618      	mov	r0, r3
 800cb46:	4649      	mov	r1, r9
 800cb48:	47c0      	blx	r8
 800cb4a:	6830      	ldr	r0, [r6, #0]
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	47c0      	blx	r8
 800cb50:	2300      	movs	r3, #0
 800cb52:	e9c6 3300 	strd	r3, r3, [r6]
 800cb56:	4638      	mov	r0, r7
 800cb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb5c:	3401      	adds	r4, #1
 800cb5e:	f145 0500 	adc.w	r5, r5, #0
 800cb62:	4294      	cmp	r4, r2
 800cb64:	eb75 010c 	sbcs.w	r1, r5, ip
 800cb68:	dbdc      	blt.n	800cb24 <__cleanup_context+0x54>
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	47c0      	blx	r8
 800cb70:	6830      	ldr	r0, [r6, #0]
 800cb72:	e7eb      	b.n	800cb4c <__cleanup_context+0x7c>
 800cb74:	4607      	mov	r7, r0
 800cb76:	2300      	movs	r3, #0
 800cb78:	e9c6 3300 	strd	r3, r3, [r6]
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb82:	f7fb fc15 	bl	80083b0 <rcutils_reset_error>
 800cb86:	e7b7      	b.n	800caf8 <__cleanup_context+0x28>
 800cb88:	f7ff ff7e 	bl	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	e7bc      	b.n	800cb0a <__cleanup_context+0x3a>

0800cb90 <rcl_init>:
 800cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb94:	1e05      	subs	r5, r0, #0
 800cb96:	b09e      	sub	sp, #120	; 0x78
 800cb98:	460e      	mov	r6, r1
 800cb9a:	4690      	mov	r8, r2
 800cb9c:	461f      	mov	r7, r3
 800cb9e:	f340 809c 	ble.w	800ccda <rcl_init+0x14a>
 800cba2:	2900      	cmp	r1, #0
 800cba4:	f000 809c 	beq.w	800cce0 <rcl_init+0x150>
 800cba8:	f1a1 0e04 	sub.w	lr, r1, #4
 800cbac:	f04f 0c00 	mov.w	ip, #0
 800cbb0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800cbb4:	f10c 0c01 	add.w	ip, ip, #1
 800cbb8:	2c00      	cmp	r4, #0
 800cbba:	f000 8091 	beq.w	800cce0 <rcl_init+0x150>
 800cbbe:	4565      	cmp	r5, ip
 800cbc0:	d1f6      	bne.n	800cbb0 <rcl_init+0x20>
 800cbc2:	f1b8 0f00 	cmp.w	r8, #0
 800cbc6:	f000 808b 	beq.w	800cce0 <rcl_init+0x150>
 800cbca:	f8d8 4000 	ldr.w	r4, [r8]
 800cbce:	2c00      	cmp	r4, #0
 800cbd0:	f000 8086 	beq.w	800cce0 <rcl_init+0x150>
 800cbd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbd6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800cbda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbde:	6823      	ldr	r3, [r4, #0]
 800cbe0:	f8cc 3000 	str.w	r3, [ip]
 800cbe4:	a819      	add	r0, sp, #100	; 0x64
 800cbe6:	f7fb fbbf 	bl	8008368 <rcutils_allocator_is_valid>
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d078      	beq.n	800cce0 <rcl_init+0x150>
 800cbee:	2f00      	cmp	r7, #0
 800cbf0:	d076      	beq.n	800cce0 <rcl_init+0x150>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d178      	bne.n	800ccea <rcl_init+0x15a>
 800cbf8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800cbfc:	2178      	movs	r1, #120	; 0x78
 800cbfe:	2001      	movs	r0, #1
 800cc00:	4798      	blx	r3
 800cc02:	4604      	mov	r4, r0
 800cc04:	6038      	str	r0, [r7, #0]
 800cc06:	2800      	cmp	r0, #0
 800cc08:	f000 80b6 	beq.w	800cd78 <rcl_init+0x1e8>
 800cc0c:	a802      	add	r0, sp, #8
 800cc0e:	f001 fa33 	bl	800e078 <rmw_get_zero_initialized_context>
 800cc12:	a902      	add	r1, sp, #8
 800cc14:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cc18:	2250      	movs	r2, #80	; 0x50
 800cc1a:	ac19      	add	r4, sp, #100	; 0x64
 800cc1c:	f005 f846 	bl	8011cac <memcpy>
 800cc20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc22:	f8d7 e000 	ldr.w	lr, [r7]
 800cc26:	46f4      	mov	ip, lr
 800cc28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	f8cc 3000 	str.w	r3, [ip]
 800cc32:	f10e 0114 	add.w	r1, lr, #20
 800cc36:	4640      	mov	r0, r8
 800cc38:	f000 f940 	bl	800cebc <rcl_init_options_copy>
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d144      	bne.n	800cccc <rcl_init+0x13c>
 800cc42:	f8d7 9000 	ldr.w	r9, [r7]
 800cc46:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800cc4a:	f8c9 0020 	str.w	r0, [r9, #32]
 800cc4e:	f8c9 5018 	str.w	r5, [r9, #24]
 800cc52:	f8c9 801c 	str.w	r8, [r9, #28]
 800cc56:	2d00      	cmp	r5, #0
 800cc58:	d04e      	beq.n	800ccf8 <rcl_init+0x168>
 800cc5a:	2e00      	cmp	r6, #0
 800cc5c:	d04c      	beq.n	800ccf8 <rcl_init+0x168>
 800cc5e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800cc62:	2104      	movs	r1, #4
 800cc64:	4628      	mov	r0, r5
 800cc66:	4798      	blx	r3
 800cc68:	f8c9 0020 	str.w	r0, [r9, #32]
 800cc6c:	f8d7 9000 	ldr.w	r9, [r7]
 800cc70:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800cc74:	46ca      	mov	sl, r9
 800cc76:	b343      	cbz	r3, 800ccca <rcl_init+0x13a>
 800cc78:	2d01      	cmp	r5, #1
 800cc7a:	f178 0300 	sbcs.w	r3, r8, #0
 800cc7e:	db3b      	blt.n	800ccf8 <rcl_init+0x168>
 800cc80:	2400      	movs	r4, #0
 800cc82:	3e04      	subs	r6, #4
 800cc84:	46a1      	mov	r9, r4
 800cc86:	e00b      	b.n	800cca0 <rcl_init+0x110>
 800cc88:	6831      	ldr	r1, [r6, #0]
 800cc8a:	f005 f80f 	bl	8011cac <memcpy>
 800cc8e:	3401      	adds	r4, #1
 800cc90:	f149 0900 	adc.w	r9, r9, #0
 800cc94:	45c8      	cmp	r8, r9
 800cc96:	bf08      	it	eq
 800cc98:	42a5      	cmpeq	r5, r4
 800cc9a:	d02b      	beq.n	800ccf4 <rcl_init+0x164>
 800cc9c:	f8d7 a000 	ldr.w	sl, [r7]
 800cca0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800cca4:	f7f3 fa9e 	bl	80001e4 <strlen>
 800cca8:	1c42      	adds	r2, r0, #1
 800ccaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccac:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ccae:	f8da a020 	ldr.w	sl, [sl, #32]
 800ccb2:	9201      	str	r2, [sp, #4]
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	4798      	blx	r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800ccbe:	6a1b      	ldr	r3, [r3, #32]
 800ccc0:	9a01      	ldr	r2, [sp, #4]
 800ccc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d1de      	bne.n	800cc88 <rcl_init+0xf8>
 800ccca:	240a      	movs	r4, #10
 800cccc:	4638      	mov	r0, r7
 800ccce:	f7ff feff 	bl	800cad0 <__cleanup_context>
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	b01e      	add	sp, #120	; 0x78
 800ccd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccda:	2900      	cmp	r1, #0
 800ccdc:	f43f af71 	beq.w	800cbc2 <rcl_init+0x32>
 800cce0:	240b      	movs	r4, #11
 800cce2:	4620      	mov	r0, r4
 800cce4:	b01e      	add	sp, #120	; 0x78
 800cce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccea:	2464      	movs	r4, #100	; 0x64
 800ccec:	4620      	mov	r0, r4
 800ccee:	b01e      	add	sp, #120	; 0x78
 800ccf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf4:	f8d7 9000 	ldr.w	r9, [r7]
 800ccf8:	4926      	ldr	r1, [pc, #152]	; (800cd94 <rcl_init+0x204>)
 800ccfa:	680b      	ldr	r3, [r1, #0]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	d036      	beq.n	800cd6e <rcl_init+0x1de>
 800cd00:	600b      	str	r3, [r1, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	2400      	movs	r4, #0
 800cd06:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800cd0a:	607b      	str	r3, [r7, #4]
 800cd0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cd0e:	3301      	adds	r3, #1
 800cd10:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800cd14:	d034      	beq.n	800cd80 <rcl_init+0x1f0>
 800cd16:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800cd1a:	b93b      	cbnz	r3, 800cd2c <rcl_init+0x19c>
 800cd1c:	3030      	adds	r0, #48	; 0x30
 800cd1e:	f000 f939 	bl	800cf94 <rcl_get_localhost_only>
 800cd22:	4604      	mov	r4, r0
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d1d1      	bne.n	800cccc <rcl_init+0x13c>
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	6958      	ldr	r0, [r3, #20]
 800cd2c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cd2e:	aa18      	add	r2, sp, #96	; 0x60
 800cd30:	a917      	add	r1, sp, #92	; 0x5c
 800cd32:	f000 fe5d 	bl	800d9f0 <rcl_validate_enclave_name>
 800cd36:	4604      	mov	r4, r0
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d1c7      	bne.n	800cccc <rcl_init+0x13c>
 800cd3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd3e:	b9eb      	cbnz	r3, 800cd7c <rcl_init+0x1ec>
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	694b      	ldr	r3, [r1, #20]
 800cd44:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cd46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800cd4a:	f000 fc3d 	bl	800d5c8 <rcl_get_security_options_from_environment>
 800cd4e:	4604      	mov	r4, r0
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d1bb      	bne.n	800cccc <rcl_init+0x13c>
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	6948      	ldr	r0, [r1, #20]
 800cd58:	3128      	adds	r1, #40	; 0x28
 800cd5a:	3018      	adds	r0, #24
 800cd5c:	f001 fc32 	bl	800e5c4 <rmw_init>
 800cd60:	4604      	mov	r4, r0
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d0bd      	beq.n	800cce2 <rcl_init+0x152>
 800cd66:	f7ff fe8f 	bl	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	e7ae      	b.n	800cccc <rcl_init+0x13c>
 800cd6e:	2201      	movs	r2, #1
 800cd70:	461c      	mov	r4, r3
 800cd72:	600a      	str	r2, [r1, #0]
 800cd74:	4613      	mov	r3, r2
 800cd76:	e7c6      	b.n	800cd06 <rcl_init+0x176>
 800cd78:	240a      	movs	r4, #10
 800cd7a:	e7b2      	b.n	800cce2 <rcl_init+0x152>
 800cd7c:	2401      	movs	r4, #1
 800cd7e:	e7a5      	b.n	800cccc <rcl_init+0x13c>
 800cd80:	3024      	adds	r0, #36	; 0x24
 800cd82:	f003 fe85 	bl	8010a90 <rcl_get_default_domain_id>
 800cd86:	4604      	mov	r4, r0
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d19f      	bne.n	800cccc <rcl_init+0x13c>
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	6958      	ldr	r0, [r3, #20]
 800cd90:	e7c1      	b.n	800cd16 <rcl_init+0x186>
 800cd92:	bf00      	nop
 800cd94:	2000dafc 	.word	0x2000dafc

0800cd98 <rcl_get_zero_initialized_init_options>:
 800cd98:	2000      	movs	r0, #0
 800cd9a:	4770      	bx	lr

0800cd9c <rcl_init_options_init>:
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda0:	b097      	sub	sp, #92	; 0x5c
 800cda2:	ae1d      	add	r6, sp, #116	; 0x74
 800cda4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d058      	beq.n	800ce5e <rcl_init_options_init+0xc2>
 800cdac:	6803      	ldr	r3, [r0, #0]
 800cdae:	4605      	mov	r5, r0
 800cdb0:	b133      	cbz	r3, 800cdc0 <rcl_init_options_init+0x24>
 800cdb2:	2464      	movs	r4, #100	; 0x64
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	b017      	add	sp, #92	; 0x5c
 800cdb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cdbc:	b004      	add	sp, #16
 800cdbe:	4770      	bx	lr
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7fb fad1 	bl	8008368 <rcutils_allocator_is_valid>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d049      	beq.n	800ce5e <rcl_init_options_init+0xc2>
 800cdca:	46b4      	mov	ip, r6
 800cdcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cdd0:	ac11      	add	r4, sp, #68	; 0x44
 800cdd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdd4:	f8dc 3000 	ldr.w	r3, [ip]
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	9921      	ldr	r1, [sp, #132]	; 0x84
 800cddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cdde:	2050      	movs	r0, #80	; 0x50
 800cde0:	4798      	blx	r3
 800cde2:	4604      	mov	r4, r0
 800cde4:	6028      	str	r0, [r5, #0]
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d03b      	beq.n	800ce62 <rcl_init_options_init+0xc6>
 800cdea:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800cdee:	4686      	mov	lr, r0
 800cdf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cdf4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cdf8:	f8dc 3000 	ldr.w	r3, [ip]
 800cdfc:	f8ce 3000 	str.w	r3, [lr]
 800ce00:	a802      	add	r0, sp, #8
 800ce02:	f001 f949 	bl	800e098 <rmw_get_zero_initialized_init_options>
 800ce06:	f10d 0e08 	add.w	lr, sp, #8
 800ce0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce0e:	f104 0c18 	add.w	ip, r4, #24
 800ce12:	682f      	ldr	r7, [r5, #0]
 800ce14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ce2c:	ac20      	add	r4, sp, #128	; 0x80
 800ce2e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ce32:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ce36:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ce3a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ce3e:	f107 0018 	add.w	r0, r7, #24
 800ce42:	f001 fac7 	bl	800e3d4 <rmw_init_options_init>
 800ce46:	4604      	mov	r4, r0
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d0b3      	beq.n	800cdb4 <rcl_init_options_init+0x18>
 800ce4c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ce4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce50:	6828      	ldr	r0, [r5, #0]
 800ce52:	4798      	blx	r3
 800ce54:	4620      	mov	r0, r4
 800ce56:	f7ff fe17 	bl	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	e7aa      	b.n	800cdb4 <rcl_init_options_init+0x18>
 800ce5e:	240b      	movs	r4, #11
 800ce60:	e7a8      	b.n	800cdb4 <rcl_init_options_init+0x18>
 800ce62:	240a      	movs	r4, #10
 800ce64:	e7a6      	b.n	800cdb4 <rcl_init_options_init+0x18>
 800ce66:	bf00      	nop

0800ce68 <rcl_init_options_fini>:
 800ce68:	b530      	push	{r4, r5, lr}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	b1f0      	cbz	r0, 800ceac <rcl_init_options_fini+0x44>
 800ce6e:	6803      	ldr	r3, [r0, #0]
 800ce70:	4604      	mov	r4, r0
 800ce72:	b1db      	cbz	r3, 800ceac <rcl_init_options_fini+0x44>
 800ce74:	469c      	mov	ip, r3
 800ce76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce7a:	f10d 0e04 	add.w	lr, sp, #4
 800ce7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce82:	f8dc 3000 	ldr.w	r3, [ip]
 800ce86:	f8ce 3000 	str.w	r3, [lr]
 800ce8a:	a801      	add	r0, sp, #4
 800ce8c:	f7fb fa6c 	bl	8008368 <rcutils_allocator_is_valid>
 800ce90:	b160      	cbz	r0, 800ceac <rcl_init_options_fini+0x44>
 800ce92:	6820      	ldr	r0, [r4, #0]
 800ce94:	3018      	adds	r0, #24
 800ce96:	f001 fb4d 	bl	800e534 <rmw_init_options_fini>
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	b950      	cbnz	r0, 800ceb4 <rcl_init_options_fini+0x4c>
 800ce9e:	6820      	ldr	r0, [r4, #0]
 800cea0:	9b02      	ldr	r3, [sp, #8]
 800cea2:	9905      	ldr	r1, [sp, #20]
 800cea4:	4798      	blx	r3
 800cea6:	4628      	mov	r0, r5
 800cea8:	b007      	add	sp, #28
 800ceaa:	bd30      	pop	{r4, r5, pc}
 800ceac:	250b      	movs	r5, #11
 800ceae:	4628      	mov	r0, r5
 800ceb0:	b007      	add	sp, #28
 800ceb2:	bd30      	pop	{r4, r5, pc}
 800ceb4:	f7ff fde8 	bl	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 800ceb8:	4605      	mov	r5, r0
 800ceba:	e7f8      	b.n	800ceae <rcl_init_options_fini+0x46>

0800cebc <rcl_init_options_copy>:
 800cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	b094      	sub	sp, #80	; 0x50
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d058      	beq.n	800cf78 <rcl_init_options_copy+0xbc>
 800cec6:	4604      	mov	r4, r0
 800cec8:	6800      	ldr	r0, [r0, #0]
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d054      	beq.n	800cf78 <rcl_init_options_copy+0xbc>
 800cece:	460e      	mov	r6, r1
 800ced0:	f7fb fa4a 	bl	8008368 <rcutils_allocator_is_valid>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d04f      	beq.n	800cf78 <rcl_init_options_copy+0xbc>
 800ced8:	2e00      	cmp	r6, #0
 800ceda:	d04d      	beq.n	800cf78 <rcl_init_options_copy+0xbc>
 800cedc:	6833      	ldr	r3, [r6, #0]
 800cede:	b123      	cbz	r3, 800ceea <rcl_init_options_copy+0x2e>
 800cee0:	2464      	movs	r4, #100	; 0x64
 800cee2:	4620      	mov	r0, r4
 800cee4:	b014      	add	sp, #80	; 0x50
 800cee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceea:	6827      	ldr	r7, [r4, #0]
 800ceec:	46bc      	mov	ip, r7
 800ceee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cef2:	ad0f      	add	r5, sp, #60	; 0x3c
 800cef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cef6:	f8dc 3000 	ldr.w	r3, [ip]
 800cefa:	f8d7 8000 	ldr.w	r8, [r7]
 800cefe:	602b      	str	r3, [r5, #0]
 800cf00:	4619      	mov	r1, r3
 800cf02:	2050      	movs	r0, #80	; 0x50
 800cf04:	47c0      	blx	r8
 800cf06:	4605      	mov	r5, r0
 800cf08:	6030      	str	r0, [r6, #0]
 800cf0a:	b3d0      	cbz	r0, 800cf82 <rcl_init_options_copy+0xc6>
 800cf0c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800cf10:	4686      	mov	lr, r0
 800cf12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cf16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cf1a:	f8dc 3000 	ldr.w	r3, [ip]
 800cf1e:	f8ce 3000 	str.w	r3, [lr]
 800cf22:	4668      	mov	r0, sp
 800cf24:	f001 f8b8 	bl	800e098 <rmw_get_zero_initialized_init_options>
 800cf28:	46ee      	mov	lr, sp
 800cf2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf2e:	f105 0c18 	add.w	ip, r5, #24
 800cf32:	6824      	ldr	r4, [r4, #0]
 800cf34:	6835      	ldr	r5, [r6, #0]
 800cf36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf4a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cf4e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cf52:	f104 0018 	add.w	r0, r4, #24
 800cf56:	f105 0118 	add.w	r1, r5, #24
 800cf5a:	f001 faa3 	bl	800e4a4 <rmw_init_options_copy>
 800cf5e:	4604      	mov	r4, r0
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d0be      	beq.n	800cee2 <rcl_init_options_copy+0x26>
 800cf64:	f7fb fa0e 	bl	8008384 <rcutils_get_error_string>
 800cf68:	f7fb fa22 	bl	80083b0 <rcutils_reset_error>
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	f7ff ff7b 	bl	800ce68 <rcl_init_options_fini>
 800cf72:	b140      	cbz	r0, 800cf86 <rcl_init_options_copy+0xca>
 800cf74:	4604      	mov	r4, r0
 800cf76:	e7b4      	b.n	800cee2 <rcl_init_options_copy+0x26>
 800cf78:	240b      	movs	r4, #11
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	b014      	add	sp, #80	; 0x50
 800cf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf82:	240a      	movs	r4, #10
 800cf84:	e7ad      	b.n	800cee2 <rcl_init_options_copy+0x26>
 800cf86:	4620      	mov	r0, r4
 800cf88:	b014      	add	sp, #80	; 0x50
 800cf8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8e:	f7ff bd7b 	b.w	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 800cf92:	bf00      	nop

0800cf94 <rcl_get_localhost_only>:
 800cf94:	b510      	push	{r4, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	2300      	movs	r3, #0
 800cf9a:	9301      	str	r3, [sp, #4]
 800cf9c:	b1b8      	cbz	r0, 800cfce <rcl_get_localhost_only+0x3a>
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	a901      	add	r1, sp, #4
 800cfa2:	480c      	ldr	r0, [pc, #48]	; (800cfd4 <rcl_get_localhost_only+0x40>)
 800cfa4:	f000 fd6c 	bl	800da80 <rcutils_get_env>
 800cfa8:	b110      	cbz	r0, 800cfb0 <rcl_get_localhost_only+0x1c>
 800cfaa:	2001      	movs	r0, #1
 800cfac:	b002      	add	sp, #8
 800cfae:	bd10      	pop	{r4, pc}
 800cfb0:	9b01      	ldr	r3, [sp, #4]
 800cfb2:	b113      	cbz	r3, 800cfba <rcl_get_localhost_only+0x26>
 800cfb4:	781a      	ldrb	r2, [r3, #0]
 800cfb6:	2a31      	cmp	r2, #49	; 0x31
 800cfb8:	d004      	beq.n	800cfc4 <rcl_get_localhost_only+0x30>
 800cfba:	2302      	movs	r3, #2
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	7023      	strb	r3, [r4, #0]
 800cfc0:	b002      	add	sp, #8
 800cfc2:	bd10      	pop	{r4, pc}
 800cfc4:	785b      	ldrb	r3, [r3, #1]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1f7      	bne.n	800cfba <rcl_get_localhost_only+0x26>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e7f6      	b.n	800cfbc <rcl_get_localhost_only+0x28>
 800cfce:	200b      	movs	r0, #11
 800cfd0:	b002      	add	sp, #8
 800cfd2:	bd10      	pop	{r4, pc}
 800cfd4:	08012e4c 	.word	0x08012e4c

0800cfd8 <rcl_get_zero_initialized_node>:
 800cfd8:	4a03      	ldr	r2, [pc, #12]	; (800cfe8 <rcl_get_zero_initialized_node+0x10>)
 800cfda:	4603      	mov	r3, r0
 800cfdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfe0:	e883 0003 	stmia.w	r3, {r0, r1}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	4770      	bx	lr
 800cfe8:	08012e74 	.word	0x08012e74

0800cfec <rcl_node_init>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	b0a9      	sub	sp, #164	; 0xa4
 800cff2:	4604      	mov	r4, r0
 800cff4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800cff8:	a823      	add	r0, sp, #140	; 0x8c
 800cffa:	460e      	mov	r6, r1
 800cffc:	4615      	mov	r5, r2
 800cffe:	461f      	mov	r7, r3
 800d000:	f003 ff6e 	bl	8010ee0 <rcl_guard_condition_get_default_options>
 800d004:	f1b8 0f00 	cmp.w	r8, #0
 800d008:	f000 80e6 	beq.w	800d1d8 <rcl_node_init+0x1ec>
 800d00c:	4640      	mov	r0, r8
 800d00e:	f7fb f9ab 	bl	8008368 <rcutils_allocator_is_valid>
 800d012:	2800      	cmp	r0, #0
 800d014:	f000 80e0 	beq.w	800d1d8 <rcl_node_init+0x1ec>
 800d018:	2e00      	cmp	r6, #0
 800d01a:	f000 80dd 	beq.w	800d1d8 <rcl_node_init+0x1ec>
 800d01e:	2d00      	cmp	r5, #0
 800d020:	f000 80da 	beq.w	800d1d8 <rcl_node_init+0x1ec>
 800d024:	2c00      	cmp	r4, #0
 800d026:	f000 80d7 	beq.w	800d1d8 <rcl_node_init+0x1ec>
 800d02a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d02e:	f1b9 0f00 	cmp.w	r9, #0
 800d032:	f040 80fd 	bne.w	800d230 <rcl_node_init+0x244>
 800d036:	2f00      	cmp	r7, #0
 800d038:	f000 80ce 	beq.w	800d1d8 <rcl_node_init+0x1ec>
 800d03c:	4638      	mov	r0, r7
 800d03e:	f7ff fd41 	bl	800cac4 <rcl_context_is_valid>
 800d042:	4682      	mov	sl, r0
 800d044:	2800      	cmp	r0, #0
 800d046:	f000 80cd 	beq.w	800d1e4 <rcl_node_init+0x1f8>
 800d04a:	464a      	mov	r2, r9
 800d04c:	a922      	add	r1, sp, #136	; 0x88
 800d04e:	4630      	mov	r0, r6
 800d050:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800d054:	f001 f936 	bl	800e2c4 <rmw_validate_node_name>
 800d058:	4681      	mov	r9, r0
 800d05a:	2800      	cmp	r0, #0
 800d05c:	f040 80be 	bne.w	800d1dc <rcl_node_init+0x1f0>
 800d060:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d062:	2800      	cmp	r0, #0
 800d064:	f040 80f0 	bne.w	800d248 <rcl_node_init+0x25c>
 800d068:	4628      	mov	r0, r5
 800d06a:	f7f3 f8bb 	bl	80001e4 <strlen>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f040 80bb 	bne.w	800d1ea <rcl_node_init+0x1fe>
 800d074:	4d7c      	ldr	r5, [pc, #496]	; (800d268 <rcl_node_init+0x27c>)
 800d076:	a922      	add	r1, sp, #136	; 0x88
 800d078:	2200      	movs	r2, #0
 800d07a:	4628      	mov	r0, r5
 800d07c:	f001 f904 	bl	800e288 <rmw_validate_namespace>
 800d080:	4681      	mov	r9, r0
 800d082:	2800      	cmp	r0, #0
 800d084:	f040 80aa 	bne.w	800d1dc <rcl_node_init+0x1f0>
 800d088:	4682      	mov	sl, r0
 800d08a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d08c:	2800      	cmp	r0, #0
 800d08e:	f040 80e0 	bne.w	800d252 <rcl_node_init+0x266>
 800d092:	f8d8 3000 	ldr.w	r3, [r8]
 800d096:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d09a:	2078      	movs	r0, #120	; 0x78
 800d09c:	4798      	blx	r3
 800d09e:	4681      	mov	r9, r0
 800d0a0:	6060      	str	r0, [r4, #4]
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	f000 80ca 	beq.w	800d23c <rcl_node_init+0x250>
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800d0b0:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800d0b4:	a808      	add	r0, sp, #32
 800d0b6:	f000 f907 	bl	800d2c8 <rcl_node_get_default_options>
 800d0ba:	a908      	add	r1, sp, #32
 800d0bc:	4648      	mov	r0, r9
 800d0be:	2268      	movs	r2, #104	; 0x68
 800d0c0:	f004 fdf4 	bl	8011cac <memcpy>
 800d0c4:	6861      	ldr	r1, [r4, #4]
 800d0c6:	6027      	str	r7, [r4, #0]
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f000 f90b 	bl	800d2e4 <rcl_node_options_copy>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d158      	bne.n	800d184 <rcl_node_init+0x198>
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f7f3 f886 	bl	80001e4 <strlen>
 800d0d8:	4428      	add	r0, r5
 800d0da:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800d0de:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800d0e2:	2b2f      	cmp	r3, #47	; 0x2f
 800d0e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	bf0c      	ite	eq
 800d0ec:	4b5f      	ldreq	r3, [pc, #380]	; (800d26c <rcl_node_init+0x280>)
 800d0ee:	4b60      	ldrne	r3, [pc, #384]	; (800d270 <rcl_node_init+0x284>)
 800d0f0:	9302      	str	r3, [sp, #8]
 800d0f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0f6:	9301      	str	r3, [sp, #4]
 800d0f8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d0fc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d100:	f000 fce6 	bl	800dad0 <rcutils_format_string_limit>
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800d10a:	6818      	ldr	r0, [r3, #0]
 800d10c:	4631      	mov	r1, r6
 800d10e:	3028      	adds	r0, #40	; 0x28
 800d110:	462a      	mov	r2, r5
 800d112:	6866      	ldr	r6, [r4, #4]
 800d114:	f001 fcaa 	bl	800ea6c <rmw_create_node>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	66b0      	str	r0, [r6, #104]	; 0x68
 800d11c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d11e:	2800      	cmp	r0, #0
 800d120:	d032      	beq.n	800d188 <rcl_node_init+0x19c>
 800d122:	f001 fd37 	bl	800eb94 <rmw_node_get_graph_guard_condition>
 800d126:	4681      	mov	r9, r0
 800d128:	b360      	cbz	r0, 800d184 <rcl_node_init+0x198>
 800d12a:	f8d8 3000 	ldr.w	r3, [r8]
 800d12e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d132:	6866      	ldr	r6, [r4, #4]
 800d134:	2008      	movs	r0, #8
 800d136:	4798      	blx	r3
 800d138:	6863      	ldr	r3, [r4, #4]
 800d13a:	66f0      	str	r0, [r6, #108]	; 0x6c
 800d13c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800d140:	f1bb 0f00 	cmp.w	fp, #0
 800d144:	d020      	beq.n	800d188 <rcl_node_init+0x19c>
 800d146:	a806      	add	r0, sp, #24
 800d148:	f003 fe3a 	bl	8010dc0 <rcl_get_zero_initialized_guard_condition>
 800d14c:	a806      	add	r0, sp, #24
 800d14e:	c803      	ldmia	r0, {r0, r1}
 800d150:	6863      	ldr	r3, [r4, #4]
 800d152:	46c4      	mov	ip, r8
 800d154:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800d158:	e88b 0003 	stmia.w	fp, {r0, r1}
 800d15c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d160:	ae23      	add	r6, sp, #140	; 0x8c
 800d162:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d164:	f8dc 3000 	ldr.w	r3, [ip]
 800d168:	6033      	str	r3, [r6, #0]
 800d16a:	ab28      	add	r3, sp, #160	; 0xa0
 800d16c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800d170:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d174:	4649      	mov	r1, r9
 800d176:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d178:	463a      	mov	r2, r7
 800d17a:	4670      	mov	r0, lr
 800d17c:	f003 fe2a 	bl	8010dd4 <rcl_guard_condition_init_from_rmw>
 800d180:	4681      	mov	r9, r0
 800d182:	b328      	cbz	r0, 800d1d0 <rcl_node_init+0x1e4>
 800d184:	6863      	ldr	r3, [r4, #4]
 800d186:	b1f3      	cbz	r3, 800d1c6 <rcl_node_init+0x1da>
 800d188:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d18a:	b128      	cbz	r0, 800d198 <rcl_node_init+0x1ac>
 800d18c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d190:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d194:	4798      	blx	r3
 800d196:	6863      	ldr	r3, [r4, #4]
 800d198:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d19a:	b110      	cbz	r0, 800d1a2 <rcl_node_init+0x1b6>
 800d19c:	f001 fc7e 	bl	800ea9c <rmw_destroy_node>
 800d1a0:	6863      	ldr	r3, [r4, #4]
 800d1a2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d1a4:	b148      	cbz	r0, 800d1ba <rcl_node_init+0x1ce>
 800d1a6:	f003 fe75 	bl	8010e94 <rcl_guard_condition_fini>
 800d1aa:	6863      	ldr	r3, [r4, #4]
 800d1ac:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d1b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d1b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1b6:	4798      	blx	r3
 800d1b8:	6863      	ldr	r3, [r4, #4]
 800d1ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1c4:	4798      	blx	r3
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e9c4 3300 	strd	r3, r3, [r4]
 800d1cc:	f04f 0901 	mov.w	r9, #1
 800d1d0:	f1ba 0f00 	cmp.w	sl, #0
 800d1d4:	d125      	bne.n	800d222 <rcl_node_init+0x236>
 800d1d6:	e001      	b.n	800d1dc <rcl_node_init+0x1f0>
 800d1d8:	f04f 090b 	mov.w	r9, #11
 800d1dc:	4648      	mov	r0, r9
 800d1de:	b029      	add	sp, #164	; 0xa4
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	f04f 0965 	mov.w	r9, #101	; 0x65
 800d1e8:	e7f8      	b.n	800d1dc <rcl_node_init+0x1f0>
 800d1ea:	782b      	ldrb	r3, [r5, #0]
 800d1ec:	2b2f      	cmp	r3, #47	; 0x2f
 800d1ee:	f43f af42 	beq.w	800d076 <rcl_node_init+0x8a>
 800d1f2:	9503      	str	r5, [sp, #12]
 800d1f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	4b1e      	ldr	r3, [pc, #120]	; (800d274 <rcl_node_init+0x288>)
 800d1fc:	9302      	str	r3, [sp, #8]
 800d1fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d202:	9301      	str	r3, [sp, #4]
 800d204:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d208:	f000 fc62 	bl	800dad0 <rcutils_format_string_limit>
 800d20c:	4605      	mov	r5, r0
 800d20e:	b340      	cbz	r0, 800d262 <rcl_node_init+0x276>
 800d210:	2200      	movs	r2, #0
 800d212:	a922      	add	r1, sp, #136	; 0x88
 800d214:	9222      	str	r2, [sp, #136]	; 0x88
 800d216:	f001 f837 	bl	800e288 <rmw_validate_namespace>
 800d21a:	4681      	mov	r9, r0
 800d21c:	2800      	cmp	r0, #0
 800d21e:	f43f af34 	beq.w	800d08a <rcl_node_init+0x9e>
 800d222:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d226:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d22a:	4628      	mov	r0, r5
 800d22c:	4798      	blx	r3
 800d22e:	e7d5      	b.n	800d1dc <rcl_node_init+0x1f0>
 800d230:	f04f 0964 	mov.w	r9, #100	; 0x64
 800d234:	4648      	mov	r0, r9
 800d236:	b029      	add	sp, #164	; 0xa4
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	f04f 090a 	mov.w	r9, #10
 800d240:	f1ba 0f00 	cmp.w	sl, #0
 800d244:	d1ed      	bne.n	800d222 <rcl_node_init+0x236>
 800d246:	e7c9      	b.n	800d1dc <rcl_node_init+0x1f0>
 800d248:	f001 f88e 	bl	800e368 <rmw_node_name_validation_result_string>
 800d24c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800d250:	e7c4      	b.n	800d1dc <rcl_node_init+0x1f0>
 800d252:	f001 f82b 	bl	800e2ac <rmw_namespace_validation_result_string>
 800d256:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800d25a:	f1ba 0f00 	cmp.w	sl, #0
 800d25e:	d1e0      	bne.n	800d222 <rcl_node_init+0x236>
 800d260:	e7bc      	b.n	800d1dc <rcl_node_init+0x1f0>
 800d262:	f04f 090a 	mov.w	r9, #10
 800d266:	e7b9      	b.n	800d1dc <rcl_node_init+0x1f0>
 800d268:	08012e64 	.word	0x08012e64
 800d26c:	08012ce8 	.word	0x08012ce8
 800d270:	08012e6c 	.word	0x08012e6c
 800d274:	08012e68 	.word	0x08012e68

0800d278 <rcl_node_is_valid>:
 800d278:	b130      	cbz	r0, 800d288 <rcl_node_is_valid+0x10>
 800d27a:	6843      	ldr	r3, [r0, #4]
 800d27c:	b123      	cbz	r3, 800d288 <rcl_node_is_valid+0x10>
 800d27e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d280:	b113      	cbz	r3, 800d288 <rcl_node_is_valid+0x10>
 800d282:	6800      	ldr	r0, [r0, #0]
 800d284:	f7ff bc1e 	b.w	800cac4 <rcl_context_is_valid>
 800d288:	2000      	movs	r0, #0
 800d28a:	4770      	bx	lr

0800d28c <rcl_node_get_name>:
 800d28c:	b120      	cbz	r0, 800d298 <rcl_node_get_name+0xc>
 800d28e:	6840      	ldr	r0, [r0, #4]
 800d290:	b110      	cbz	r0, 800d298 <rcl_node_get_name+0xc>
 800d292:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800d294:	b100      	cbz	r0, 800d298 <rcl_node_get_name+0xc>
 800d296:	6880      	ldr	r0, [r0, #8]
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop

0800d29c <rcl_node_get_namespace>:
 800d29c:	b120      	cbz	r0, 800d2a8 <rcl_node_get_namespace+0xc>
 800d29e:	6840      	ldr	r0, [r0, #4]
 800d2a0:	b110      	cbz	r0, 800d2a8 <rcl_node_get_namespace+0xc>
 800d2a2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800d2a4:	b100      	cbz	r0, 800d2a8 <rcl_node_get_namespace+0xc>
 800d2a6:	68c0      	ldr	r0, [r0, #12]
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop

0800d2ac <rcl_node_get_options>:
 800d2ac:	b128      	cbz	r0, 800d2ba <rcl_node_get_options+0xe>
 800d2ae:	6840      	ldr	r0, [r0, #4]
 800d2b0:	b118      	cbz	r0, 800d2ba <rcl_node_get_options+0xe>
 800d2b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bf08      	it	eq
 800d2b8:	2000      	moveq	r0, #0
 800d2ba:	4770      	bx	lr

0800d2bc <rcl_node_get_rmw_handle>:
 800d2bc:	b110      	cbz	r0, 800d2c4 <rcl_node_get_rmw_handle+0x8>
 800d2be:	6840      	ldr	r0, [r0, #4]
 800d2c0:	b100      	cbz	r0, 800d2c4 <rcl_node_get_rmw_handle+0x8>
 800d2c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop

0800d2c8 <rcl_node_get_default_options>:
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	2268      	movs	r2, #104	; 0x68
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	f004 fc24 	bl	8011b1c <memset>
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f7fb f839 	bl	800834c <rcutils_get_default_allocator>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	7523      	strb	r3, [r4, #20]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	bd10      	pop	{r4, pc}
 800d2e2:	bf00      	nop

0800d2e4 <rcl_node_options_copy>:
 800d2e4:	b1d0      	cbz	r0, 800d31c <rcl_node_options_copy+0x38>
 800d2e6:	b570      	push	{r4, r5, r6, lr}
 800d2e8:	460c      	mov	r4, r1
 800d2ea:	b1a9      	cbz	r1, 800d318 <rcl_node_options_copy+0x34>
 800d2ec:	4288      	cmp	r0, r1
 800d2ee:	4684      	mov	ip, r0
 800d2f0:	d012      	beq.n	800d318 <rcl_node_options_copy+0x34>
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	8a86      	ldrh	r6, [r0, #20]
 800d2f6:	468e      	mov	lr, r1
 800d2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2fe:	682b      	ldr	r3, [r5, #0]
 800d300:	f8ce 3000 	str.w	r3, [lr]
 800d304:	f10c 0118 	add.w	r1, ip, #24
 800d308:	2250      	movs	r2, #80	; 0x50
 800d30a:	82a6      	strh	r6, [r4, #20]
 800d30c:	f104 0018 	add.w	r0, r4, #24
 800d310:	f004 fccc 	bl	8011cac <memcpy>
 800d314:	2000      	movs	r0, #0
 800d316:	bd70      	pop	{r4, r5, r6, pc}
 800d318:	200b      	movs	r0, #11
 800d31a:	bd70      	pop	{r4, r5, r6, pc}
 800d31c:	200b      	movs	r0, #11
 800d31e:	4770      	bx	lr

0800d320 <rcl_node_resolve_name>:
 800d320:	b082      	sub	sp, #8
 800d322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d326:	b091      	sub	sp, #68	; 0x44
 800d328:	ac1a      	add	r4, sp, #104	; 0x68
 800d32a:	e884 000c 	stmia.w	r4, {r2, r3}
 800d32e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800d332:	2800      	cmp	r0, #0
 800d334:	d03b      	beq.n	800d3ae <rcl_node_resolve_name+0x8e>
 800d336:	460c      	mov	r4, r1
 800d338:	4605      	mov	r5, r0
 800d33a:	f7ff ffb7 	bl	800d2ac <rcl_node_get_options>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d037      	beq.n	800d3b2 <rcl_node_resolve_name+0x92>
 800d342:	4628      	mov	r0, r5
 800d344:	f7ff ffa2 	bl	800d28c <rcl_node_get_name>
 800d348:	4606      	mov	r6, r0
 800d34a:	4628      	mov	r0, r5
 800d34c:	f7ff ffa6 	bl	800d29c <rcl_node_get_namespace>
 800d350:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800d354:	4681      	mov	r9, r0
 800d356:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d35a:	ad0b      	add	r5, sp, #44	; 0x2c
 800d35c:	46ac      	mov	ip, r5
 800d35e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d362:	f8de 3000 	ldr.w	r3, [lr]
 800d366:	f8cc 3000 	str.w	r3, [ip]
 800d36a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d36c:	b1fb      	cbz	r3, 800d3ae <rcl_node_resolve_name+0x8e>
 800d36e:	468a      	mov	sl, r1
 800d370:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800d374:	f000 fd04 	bl	800dd80 <rcutils_get_zero_initialized_string_map>
 800d378:	ab10      	add	r3, sp, #64	; 0x40
 800d37a:	9008      	str	r0, [sp, #32]
 800d37c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d380:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d384:	2100      	movs	r1, #0
 800d386:	e895 000c 	ldmia.w	r5, {r2, r3}
 800d38a:	a808      	add	r0, sp, #32
 800d38c:	f000 fd70 	bl	800de70 <rcutils_string_map_init>
 800d390:	4607      	mov	r7, r0
 800d392:	b180      	cbz	r0, 800d3b6 <rcl_node_resolve_name+0x96>
 800d394:	f7fa fff6 	bl	8008384 <rcutils_get_error_string>
 800d398:	f7fb f80a 	bl	80083b0 <rcutils_reset_error>
 800d39c:	2f0a      	cmp	r7, #10
 800d39e:	bf18      	it	ne
 800d3a0:	2701      	movne	r7, #1
 800d3a2:	4638      	mov	r0, r7
 800d3a4:	b011      	add	sp, #68	; 0x44
 800d3a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3aa:	b002      	add	sp, #8
 800d3ac:	4770      	bx	lr
 800d3ae:	270b      	movs	r7, #11
 800d3b0:	e7f7      	b.n	800d3a2 <rcl_node_resolve_name+0x82>
 800d3b2:	2701      	movs	r7, #1
 800d3b4:	e7f5      	b.n	800d3a2 <rcl_node_resolve_name+0x82>
 800d3b6:	9009      	str	r0, [sp, #36]	; 0x24
 800d3b8:	9007      	str	r0, [sp, #28]
 800d3ba:	a808      	add	r0, sp, #32
 800d3bc:	f003 fcfa 	bl	8010db4 <rcl_get_default_topic_name_substitutions>
 800d3c0:	4607      	mov	r7, r0
 800d3c2:	b1a8      	cbz	r0, 800d3f0 <rcl_node_resolve_name+0xd0>
 800d3c4:	280a      	cmp	r0, #10
 800d3c6:	9c07      	ldr	r4, [sp, #28]
 800d3c8:	d000      	beq.n	800d3cc <rcl_node_resolve_name+0xac>
 800d3ca:	2701      	movs	r7, #1
 800d3cc:	a808      	add	r0, sp, #32
 800d3ce:	f000 fd8f 	bl	800def0 <rcutils_string_map_fini>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d13d      	bne.n	800d452 <rcl_node_resolve_name+0x132>
 800d3d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3d8:	4659      	mov	r1, fp
 800d3da:	47d0      	blx	sl
 800d3dc:	4659      	mov	r1, fp
 800d3de:	4620      	mov	r0, r4
 800d3e0:	47d0      	blx	sl
 800d3e2:	f1b8 0f00 	cmp.w	r8, #0
 800d3e6:	d0dc      	beq.n	800d3a2 <rcl_node_resolve_name+0x82>
 800d3e8:	2f67      	cmp	r7, #103	; 0x67
 800d3ea:	bf08      	it	eq
 800d3ec:	2768      	moveq	r7, #104	; 0x68
 800d3ee:	e7d8      	b.n	800d3a2 <rcl_node_resolve_name+0x82>
 800d3f0:	ab09      	add	r3, sp, #36	; 0x24
 800d3f2:	9305      	str	r3, [sp, #20]
 800d3f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3f6:	46ec      	mov	ip, sp
 800d3f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	f8cc 3000 	str.w	r3, [ip]
 800d402:	464a      	mov	r2, r9
 800d404:	4631      	mov	r1, r6
 800d406:	4620      	mov	r0, r4
 800d408:	ab08      	add	r3, sp, #32
 800d40a:	f003 fb75 	bl	8010af8 <rcl_expand_topic_name>
 800d40e:	4607      	mov	r7, r0
 800d410:	b9b8      	cbnz	r0, 800d442 <rcl_node_resolve_name+0x122>
 800d412:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d414:	9009      	str	r0, [sp, #36]	; 0x24
 800d416:	4602      	mov	r2, r0
 800d418:	a90a      	add	r1, sp, #40	; 0x28
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 fe70 	bl	800e100 <rmw_validate_full_topic_name>
 800d420:	b988      	cbnz	r0, 800d446 <rcl_node_resolve_name+0x126>
 800d422:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d424:	b9d5      	cbnz	r5, 800d45c <rcl_node_resolve_name+0x13c>
 800d426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d428:	a808      	add	r0, sp, #32
 800d42a:	601c      	str	r4, [r3, #0]
 800d42c:	f000 fd60 	bl	800def0 <rcutils_string_map_fini>
 800d430:	4607      	mov	r7, r0
 800d432:	b1a8      	cbz	r0, 800d460 <rcl_node_resolve_name+0x140>
 800d434:	f7fa ffa6 	bl	8008384 <rcutils_get_error_string>
 800d438:	462c      	mov	r4, r5
 800d43a:	f7fa ffb9 	bl	80083b0 <rcutils_reset_error>
 800d43e:	2701      	movs	r7, #1
 800d440:	e7c9      	b.n	800d3d6 <rcl_node_resolve_name+0xb6>
 800d442:	9c07      	ldr	r4, [sp, #28]
 800d444:	e7c2      	b.n	800d3cc <rcl_node_resolve_name+0xac>
 800d446:	f7fa ff9d 	bl	8008384 <rcutils_get_error_string>
 800d44a:	2701      	movs	r7, #1
 800d44c:	f7fa ffb0 	bl	80083b0 <rcutils_reset_error>
 800d450:	e7bc      	b.n	800d3cc <rcl_node_resolve_name+0xac>
 800d452:	f7fa ff97 	bl	8008384 <rcutils_get_error_string>
 800d456:	f7fa ffab 	bl	80083b0 <rcutils_reset_error>
 800d45a:	e7bc      	b.n	800d3d6 <rcl_node_resolve_name+0xb6>
 800d45c:	2767      	movs	r7, #103	; 0x67
 800d45e:	e7b5      	b.n	800d3cc <rcl_node_resolve_name+0xac>
 800d460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d462:	4659      	mov	r1, fp
 800d464:	47d0      	blx	sl
 800d466:	4659      	mov	r1, fp
 800d468:	4638      	mov	r0, r7
 800d46a:	47d0      	blx	sl
 800d46c:	e799      	b.n	800d3a2 <rcl_node_resolve_name+0x82>
 800d46e:	bf00      	nop

0800d470 <exact_match_lookup>:
 800d470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d472:	f102 0708 	add.w	r7, r2, #8
 800d476:	460b      	mov	r3, r1
 800d478:	4614      	mov	r4, r2
 800d47a:	4606      	mov	r6, r0
 800d47c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d480:	b085      	sub	sp, #20
 800d482:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d486:	4618      	mov	r0, r3
 800d488:	4919      	ldr	r1, [pc, #100]	; (800d4f0 <exact_match_lookup+0x80>)
 800d48a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d48e:	f000 fb11 	bl	800dab4 <rcutils_join_path>
 800d492:	7833      	ldrb	r3, [r6, #0]
 800d494:	2b2f      	cmp	r3, #47	; 0x2f
 800d496:	4605      	mov	r5, r0
 800d498:	d023      	beq.n	800d4e2 <exact_match_lookup+0x72>
 800d49a:	f104 030c 	add.w	r3, r4, #12
 800d49e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d4a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d4a6:	1c70      	adds	r0, r6, #1
 800d4a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d4ac:	f000 fb08 	bl	800dac0 <rcutils_to_native_path>
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d4b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	f000 faf7 	bl	800dab4 <rcutils_join_path>
 800d4c6:	6862      	ldr	r2, [r4, #4]
 800d4c8:	6921      	ldr	r1, [r4, #16]
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	461e      	mov	r6, r3
 800d4d0:	4790      	blx	r2
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	6863      	ldr	r3, [r4, #4]
 800d4d6:	6921      	ldr	r1, [r4, #16]
 800d4d8:	4798      	blx	r3
 800d4da:	4635      	mov	r5, r6
 800d4dc:	4628      	mov	r0, r5
 800d4de:	b005      	add	sp, #20
 800d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4e2:	7873      	ldrb	r3, [r6, #1]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1d8      	bne.n	800d49a <exact_match_lookup+0x2a>
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	b005      	add	sp, #20
 800d4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	08012eb8 	.word	0x08012eb8

0800d4f4 <rcl_get_secure_root>:
 800d4f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4f8:	b085      	sub	sp, #20
 800d4fa:	b168      	cbz	r0, 800d518 <rcl_get_secure_root+0x24>
 800d4fc:	4607      	mov	r7, r0
 800d4fe:	4608      	mov	r0, r1
 800d500:	460c      	mov	r4, r1
 800d502:	f7fa ff31 	bl	8008368 <rcutils_allocator_is_valid>
 800d506:	b138      	cbz	r0, 800d518 <rcl_get_secure_root+0x24>
 800d508:	2300      	movs	r3, #0
 800d50a:	482d      	ldr	r0, [pc, #180]	; (800d5c0 <rcl_get_secure_root+0xcc>)
 800d50c:	9303      	str	r3, [sp, #12]
 800d50e:	a903      	add	r1, sp, #12
 800d510:	f000 fab6 	bl	800da80 <rcutils_get_env>
 800d514:	4605      	mov	r5, r0
 800d516:	b120      	cbz	r0, 800d522 <rcl_get_secure_root+0x2e>
 800d518:	2500      	movs	r5, #0
 800d51a:	4628      	mov	r0, r5
 800d51c:	b005      	add	sp, #20
 800d51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	781a      	ldrb	r2, [r3, #0]
 800d526:	2a00      	cmp	r2, #0
 800d528:	d0f6      	beq.n	800d518 <rcl_get_secure_root+0x24>
 800d52a:	f104 090c 	add.w	r9, r4, #12
 800d52e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d532:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d536:	4618      	mov	r0, r3
 800d538:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d53c:	f000 fbe2 	bl	800dd04 <rcutils_strdup>
 800d540:	4680      	mov	r8, r0
 800d542:	2800      	cmp	r0, #0
 800d544:	d0e8      	beq.n	800d518 <rcl_get_secure_root+0x24>
 800d546:	481f      	ldr	r0, [pc, #124]	; (800d5c4 <rcl_get_secure_root+0xd0>)
 800d548:	9503      	str	r5, [sp, #12]
 800d54a:	a903      	add	r1, sp, #12
 800d54c:	f000 fa98 	bl	800da80 <rcutils_get_env>
 800d550:	b160      	cbz	r0, 800d56c <rcl_get_secure_root+0x78>
 800d552:	2600      	movs	r6, #0
 800d554:	6863      	ldr	r3, [r4, #4]
 800d556:	6921      	ldr	r1, [r4, #16]
 800d558:	4630      	mov	r0, r6
 800d55a:	4798      	blx	r3
 800d55c:	4640      	mov	r0, r8
 800d55e:	6863      	ldr	r3, [r4, #4]
 800d560:	6921      	ldr	r1, [r4, #16]
 800d562:	4798      	blx	r3
 800d564:	4628      	mov	r0, r5
 800d566:	b005      	add	sp, #20
 800d568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d56c:	9b03      	ldr	r3, [sp, #12]
 800d56e:	781e      	ldrb	r6, [r3, #0]
 800d570:	b1f6      	cbz	r6, 800d5b0 <rcl_get_secure_root+0xbc>
 800d572:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d576:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d57a:	4618      	mov	r0, r3
 800d57c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d580:	f000 fbc0 	bl	800dd04 <rcutils_strdup>
 800d584:	4606      	mov	r6, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	d0e3      	beq.n	800d552 <rcl_get_secure_root+0x5e>
 800d58a:	4622      	mov	r2, r4
 800d58c:	4641      	mov	r1, r8
 800d58e:	f7ff ff6f 	bl	800d470 <exact_match_lookup>
 800d592:	4605      	mov	r5, r0
 800d594:	2d00      	cmp	r5, #0
 800d596:	d0dd      	beq.n	800d554 <rcl_get_secure_root+0x60>
 800d598:	4628      	mov	r0, r5
 800d59a:	f000 fa89 	bl	800dab0 <rcutils_is_directory>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1d7      	bne.n	800d554 <rcl_get_secure_root+0x60>
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	6921      	ldr	r1, [r4, #16]
 800d5a8:	461d      	mov	r5, r3
 800d5aa:	6863      	ldr	r3, [r4, #4]
 800d5ac:	4798      	blx	r3
 800d5ae:	e7d1      	b.n	800d554 <rcl_get_secure_root+0x60>
 800d5b0:	4622      	mov	r2, r4
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	4641      	mov	r1, r8
 800d5b6:	f7ff ff5b 	bl	800d470 <exact_match_lookup>
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	e7ea      	b.n	800d594 <rcl_get_secure_root+0xa0>
 800d5be:	bf00      	nop
 800d5c0:	08012ec4 	.word	0x08012ec4
 800d5c4:	08012edc 	.word	0x08012edc

0800d5c8 <rcl_get_security_options_from_environment>:
 800d5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	4606      	mov	r6, r0
 800d5d2:	460f      	mov	r7, r1
 800d5d4:	4820      	ldr	r0, [pc, #128]	; (800d658 <rcl_get_security_options_from_environment+0x90>)
 800d5d6:	9301      	str	r3, [sp, #4]
 800d5d8:	a901      	add	r1, sp, #4
 800d5da:	4690      	mov	r8, r2
 800d5dc:	f000 fa50 	bl	800da80 <rcutils_get_env>
 800d5e0:	b120      	cbz	r0, 800d5ec <rcl_get_security_options_from_environment+0x24>
 800d5e2:	2501      	movs	r5, #1
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	b002      	add	sp, #8
 800d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ec:	491b      	ldr	r1, [pc, #108]	; (800d65c <rcl_get_security_options_from_environment+0x94>)
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	9801      	ldr	r0, [sp, #4]
 800d5f2:	f7f2 fded 	bl	80001d0 <strcmp>
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	b9e8      	cbnz	r0, 800d636 <rcl_get_security_options_from_environment+0x6e>
 800d5fa:	9001      	str	r0, [sp, #4]
 800d5fc:	f1b8 0f00 	cmp.w	r8, #0
 800d600:	d020      	beq.n	800d644 <rcl_get_security_options_from_environment+0x7c>
 800d602:	4817      	ldr	r0, [pc, #92]	; (800d660 <rcl_get_security_options_from_environment+0x98>)
 800d604:	a901      	add	r1, sp, #4
 800d606:	f000 fa3b 	bl	800da80 <rcutils_get_env>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d1e9      	bne.n	800d5e2 <rcl_get_security_options_from_environment+0x1a>
 800d60e:	4915      	ldr	r1, [pc, #84]	; (800d664 <rcl_get_security_options_from_environment+0x9c>)
 800d610:	9801      	ldr	r0, [sp, #4]
 800d612:	f7f2 fddd 	bl	80001d0 <strcmp>
 800d616:	fab0 f080 	clz	r0, r0
 800d61a:	0940      	lsrs	r0, r0, #5
 800d61c:	f888 0000 	strb.w	r0, [r8]
 800d620:	4639      	mov	r1, r7
 800d622:	4630      	mov	r0, r6
 800d624:	f7ff ff66 	bl	800d4f4 <rcl_get_secure_root>
 800d628:	b170      	cbz	r0, 800d648 <rcl_get_security_options_from_environment+0x80>
 800d62a:	f8c8 0004 	str.w	r0, [r8, #4]
 800d62e:	4628      	mov	r0, r5
 800d630:	b002      	add	sp, #8
 800d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d636:	4625      	mov	r5, r4
 800d638:	4628      	mov	r0, r5
 800d63a:	f888 4000 	strb.w	r4, [r8]
 800d63e:	b002      	add	sp, #8
 800d640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d644:	250b      	movs	r5, #11
 800d646:	e7cd      	b.n	800d5e4 <rcl_get_security_options_from_environment+0x1c>
 800d648:	f898 5000 	ldrb.w	r5, [r8]
 800d64c:	f1a5 0501 	sub.w	r5, r5, #1
 800d650:	fab5 f585 	clz	r5, r5
 800d654:	096d      	lsrs	r5, r5, #5
 800d656:	e7c5      	b.n	800d5e4 <rcl_get_security_options_from_environment+0x1c>
 800d658:	08012e7c 	.word	0x08012e7c
 800d65c:	08012e90 	.word	0x08012e90
 800d660:	08012e98 	.word	0x08012e98
 800d664:	08012eb0 	.word	0x08012eb0

0800d668 <rcl_get_zero_initialized_subscription>:
 800d668:	4b01      	ldr	r3, [pc, #4]	; (800d670 <rcl_get_zero_initialized_subscription+0x8>)
 800d66a:	6818      	ldr	r0, [r3, #0]
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	08012efc 	.word	0x08012efc

0800d674 <rcl_subscription_init>:
 800d674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d678:	b089      	sub	sp, #36	; 0x24
 800d67a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800d67c:	b1d6      	cbz	r6, 800d6b4 <rcl_subscription_init+0x40>
 800d67e:	f106 0950 	add.w	r9, r6, #80	; 0x50
 800d682:	4604      	mov	r4, r0
 800d684:	4648      	mov	r0, r9
 800d686:	460d      	mov	r5, r1
 800d688:	4690      	mov	r8, r2
 800d68a:	461f      	mov	r7, r3
 800d68c:	f7fa fe6c 	bl	8008368 <rcutils_allocator_is_valid>
 800d690:	b180      	cbz	r0, 800d6b4 <rcl_subscription_init+0x40>
 800d692:	b17c      	cbz	r4, 800d6b4 <rcl_subscription_init+0x40>
 800d694:	4628      	mov	r0, r5
 800d696:	f7ff fdef 	bl	800d278 <rcl_node_is_valid>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d054      	beq.n	800d748 <rcl_subscription_init+0xd4>
 800d69e:	f1b8 0f00 	cmp.w	r8, #0
 800d6a2:	d007      	beq.n	800d6b4 <rcl_subscription_init+0x40>
 800d6a4:	b137      	cbz	r7, 800d6b4 <rcl_subscription_init+0x40>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	b14b      	cbz	r3, 800d6be <rcl_subscription_init+0x4a>
 800d6aa:	2764      	movs	r7, #100	; 0x64
 800d6ac:	4638      	mov	r0, r7
 800d6ae:	b009      	add	sp, #36	; 0x24
 800d6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6b4:	270b      	movs	r7, #11
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	b009      	add	sp, #36	; 0x24
 800d6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6be:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d6c2:	aa07      	add	r2, sp, #28
 800d6c4:	9205      	str	r2, [sp, #20]
 800d6c6:	9307      	str	r3, [sp, #28]
 800d6c8:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800d6cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d6d4:	4639      	mov	r1, r7
 800d6d6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f7ff fe20 	bl	800d320 <rcl_node_resolve_name>
 800d6e0:	4607      	mov	r7, r0
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d15f      	bne.n	800d7a6 <rcl_subscription_init+0x132>
 800d6e6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800d6ea:	21c8      	movs	r1, #200	; 0xc8
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	4798      	blx	r3
 800d6f0:	6020      	str	r0, [r4, #0]
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d05d      	beq.n	800d7b2 <rcl_subscription_init+0x13e>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f7ff fde0 	bl	800d2bc <rcl_node_get_rmw_handle>
 800d6fc:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	9a07      	ldr	r2, [sp, #28]
 800d704:	6827      	ldr	r7, [r4, #0]
 800d706:	4641      	mov	r1, r8
 800d708:	4633      	mov	r3, r6
 800d70a:	f001 fa8d 	bl	800ec28 <rmw_create_subscription>
 800d70e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800d712:	6827      	ldr	r7, [r4, #0]
 800d714:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800d718:	b348      	cbz	r0, 800d76e <rcl_subscription_init+0xfa>
 800d71a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800d71e:	f001 fb65 	bl	800edec <rmw_subscription_get_actual_qos>
 800d722:	4607      	mov	r7, r0
 800d724:	b9a8      	cbnz	r0, 800d752 <rcl_subscription_init+0xde>
 800d726:	6820      	ldr	r0, [r4, #0]
 800d728:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800d72c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800d730:	2270      	movs	r2, #112	; 0x70
 800d732:	4631      	mov	r1, r6
 800d734:	f004 faba 	bl	8011cac <memcpy>
 800d738:	9807      	ldr	r0, [sp, #28]
 800d73a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d73c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800d73e:	4798      	blx	r3
 800d740:	4638      	mov	r0, r7
 800d742:	b009      	add	sp, #36	; 0x24
 800d744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d748:	27c8      	movs	r7, #200	; 0xc8
 800d74a:	4638      	mov	r0, r7
 800d74c:	b009      	add	sp, #36	; 0x24
 800d74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d752:	6827      	ldr	r7, [r4, #0]
 800d754:	b32f      	cbz	r7, 800d7a2 <rcl_subscription_init+0x12e>
 800d756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d75a:	b14b      	cbz	r3, 800d770 <rcl_subscription_init+0xfc>
 800d75c:	4628      	mov	r0, r5
 800d75e:	f7ff fdad 	bl	800d2bc <rcl_node_get_rmw_handle>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800d768:	f001 fb50 	bl	800ee0c <rmw_destroy_subscription>
 800d76c:	6827      	ldr	r7, [r4, #0]
 800d76e:	b197      	cbz	r7, 800d796 <rcl_subscription_init+0x122>
 800d770:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800d774:	4628      	mov	r0, r5
 800d776:	f7fa fdf7 	bl	8008368 <rcutils_allocator_is_valid>
 800d77a:	b158      	cbz	r0, 800d794 <rcl_subscription_init+0x120>
 800d77c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d77e:	b148      	cbz	r0, 800d794 <rcl_subscription_init+0x120>
 800d780:	4629      	mov	r1, r5
 800d782:	f000 fc9d 	bl	800e0c0 <rmw_subscription_content_filter_options_fini>
 800d786:	4605      	mov	r5, r0
 800d788:	b9b8      	cbnz	r0, 800d7ba <rcl_subscription_init+0x146>
 800d78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d78c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d78e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d790:	4798      	blx	r3
 800d792:	66fd      	str	r5, [r7, #108]	; 0x6c
 800d794:	6827      	ldr	r7, [r4, #0]
 800d796:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d798:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800d79a:	4638      	mov	r0, r7
 800d79c:	4798      	blx	r3
 800d79e:	2300      	movs	r3, #0
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	2701      	movs	r7, #1
 800d7a4:	e7c8      	b.n	800d738 <rcl_subscription_init+0xc4>
 800d7a6:	2867      	cmp	r0, #103	; 0x67
 800d7a8:	d0c6      	beq.n	800d738 <rcl_subscription_init+0xc4>
 800d7aa:	2869      	cmp	r0, #105	; 0x69
 800d7ac:	d003      	beq.n	800d7b6 <rcl_subscription_init+0x142>
 800d7ae:	280a      	cmp	r0, #10
 800d7b0:	d1f7      	bne.n	800d7a2 <rcl_subscription_init+0x12e>
 800d7b2:	270a      	movs	r7, #10
 800d7b4:	e7c0      	b.n	800d738 <rcl_subscription_init+0xc4>
 800d7b6:	2767      	movs	r7, #103	; 0x67
 800d7b8:	e7be      	b.n	800d738 <rcl_subscription_init+0xc4>
 800d7ba:	f7ff f965 	bl	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 800d7be:	6827      	ldr	r7, [r4, #0]
 800d7c0:	e7e9      	b.n	800d796 <rcl_subscription_init+0x122>
 800d7c2:	bf00      	nop

0800d7c4 <rcl_subscription_get_default_options>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	4d14      	ldr	r5, [pc, #80]	; (800d818 <rcl_subscription_get_default_options+0x54>)
 800d7c8:	4914      	ldr	r1, [pc, #80]	; (800d81c <rcl_subscription_get_default_options+0x58>)
 800d7ca:	b08a      	sub	sp, #40	; 0x28
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	2250      	movs	r2, #80	; 0x50
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f004 fa6b 	bl	8011cac <memcpy>
 800d7d6:	a804      	add	r0, sp, #16
 800d7d8:	f7fa fdb8 	bl	800834c <rcutils_get_default_allocator>
 800d7dc:	f10d 0c10 	add.w	ip, sp, #16
 800d7e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7e4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800d7e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d7ec:	466e      	mov	r6, sp
 800d7ee:	f8dc 3000 	ldr.w	r3, [ip]
 800d7f2:	f8ce 3000 	str.w	r3, [lr]
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f000 fc7c 	bl	800e0f4 <rmw_get_default_subscription_options>
 800d7fc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800d800:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800d804:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d808:	2270      	movs	r2, #112	; 0x70
 800d80a:	4629      	mov	r1, r5
 800d80c:	4620      	mov	r0, r4
 800d80e:	f004 fa4d 	bl	8011cac <memcpy>
 800d812:	4620      	mov	r0, r4
 800d814:	b00a      	add	sp, #40	; 0x28
 800d816:	bd70      	pop	{r4, r5, r6, pc}
 800d818:	2000db00 	.word	0x2000db00
 800d81c:	08012f00 	.word	0x08012f00

0800d820 <rcl_get_system_time>:
 800d820:	4608      	mov	r0, r1
 800d822:	f000 bbd9 	b.w	800dfd8 <rcutils_system_time_now>
 800d826:	bf00      	nop

0800d828 <rcl_get_steady_time>:
 800d828:	4608      	mov	r0, r1
 800d82a:	f000 bbfd 	b.w	800e028 <rcutils_steady_time_now>
 800d82e:	bf00      	nop

0800d830 <rcl_get_ros_time>:
 800d830:	7a03      	ldrb	r3, [r0, #8]
 800d832:	b510      	push	{r4, lr}
 800d834:	460c      	mov	r4, r1
 800d836:	b133      	cbz	r3, 800d846 <rcl_get_ros_time+0x16>
 800d838:	2105      	movs	r1, #5
 800d83a:	f000 f8eb 	bl	800da14 <__atomic_load_8>
 800d83e:	e9c4 0100 	strd	r0, r1, [r4]
 800d842:	2000      	movs	r0, #0
 800d844:	bd10      	pop	{r4, pc}
 800d846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d84a:	4608      	mov	r0, r1
 800d84c:	f000 bbc4 	b.w	800dfd8 <rcutils_system_time_now>

0800d850 <rcl_clock_init>:
 800d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d852:	4605      	mov	r5, r0
 800d854:	4610      	mov	r0, r2
 800d856:	4614      	mov	r4, r2
 800d858:	460e      	mov	r6, r1
 800d85a:	f7fa fd85 	bl	8008368 <rcutils_allocator_is_valid>
 800d85e:	b128      	cbz	r0, 800d86c <rcl_clock_init+0x1c>
 800d860:	2d03      	cmp	r5, #3
 800d862:	d803      	bhi.n	800d86c <rcl_clock_init+0x1c>
 800d864:	e8df f005 	tbb	[pc, r5]
 800d868:	06532e1d 	.word	0x06532e1d
 800d86c:	f04f 0c0b 	mov.w	ip, #11
 800d870:	4660      	mov	r0, ip
 800d872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d874:	2e00      	cmp	r6, #0
 800d876:	d0f9      	beq.n	800d86c <rcl_clock_init+0x1c>
 800d878:	2c00      	cmp	r4, #0
 800d87a:	d0f7      	beq.n	800d86c <rcl_clock_init+0x1c>
 800d87c:	2300      	movs	r3, #0
 800d87e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d882:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800d938 <rcl_clock_init+0xe8>
 800d886:	6133      	str	r3, [r6, #16]
 800d888:	f106 0514 	add.w	r5, r6, #20
 800d88c:	469c      	mov	ip, r3
 800d88e:	2703      	movs	r7, #3
 800d890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	602b      	str	r3, [r5, #0]
 800d898:	7037      	strb	r7, [r6, #0]
 800d89a:	f8c6 e00c 	str.w	lr, [r6, #12]
 800d89e:	4660      	mov	r0, ip
 800d8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8a2:	2e00      	cmp	r6, #0
 800d8a4:	d0e2      	beq.n	800d86c <rcl_clock_init+0x1c>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	7033      	strb	r3, [r6, #0]
 800d8aa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d8ae:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800d8b2:	469c      	mov	ip, r3
 800d8b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8b6:	f106 0514 	add.w	r5, r6, #20
 800d8ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	602b      	str	r3, [r5, #0]
 800d8c0:	4660      	mov	r0, ip
 800d8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8c4:	2e00      	cmp	r6, #0
 800d8c6:	d0d1      	beq.n	800d86c <rcl_clock_init+0x1c>
 800d8c8:	2c00      	cmp	r4, #0
 800d8ca:	d0cf      	beq.n	800d86c <rcl_clock_init+0x1c>
 800d8cc:	2700      	movs	r7, #0
 800d8ce:	7037      	strb	r7, [r6, #0]
 800d8d0:	46a4      	mov	ip, r4
 800d8d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d8d6:	f106 0514 	add.w	r5, r6, #20
 800d8da:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800d8de:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800d8e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d8e4:	f8dc 3000 	ldr.w	r3, [ip]
 800d8e8:	602b      	str	r3, [r5, #0]
 800d8ea:	6921      	ldr	r1, [r4, #16]
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	2010      	movs	r0, #16
 800d8f0:	4798      	blx	r3
 800d8f2:	6130      	str	r0, [r6, #16]
 800d8f4:	b1d0      	cbz	r0, 800d92c <rcl_clock_init+0xdc>
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	e9c0 2300 	strd	r2, r3, [r0]
 800d8fe:	2301      	movs	r3, #1
 800d900:	7207      	strb	r7, [r0, #8]
 800d902:	4a0c      	ldr	r2, [pc, #48]	; (800d934 <rcl_clock_init+0xe4>)
 800d904:	7033      	strb	r3, [r6, #0]
 800d906:	46bc      	mov	ip, r7
 800d908:	60f2      	str	r2, [r6, #12]
 800d90a:	4660      	mov	r0, ip
 800d90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d90e:	2e00      	cmp	r6, #0
 800d910:	d0ac      	beq.n	800d86c <rcl_clock_init+0x1c>
 800d912:	2c00      	cmp	r4, #0
 800d914:	d0aa      	beq.n	800d86c <rcl_clock_init+0x1c>
 800d916:	2300      	movs	r3, #0
 800d918:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d91c:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800d93c <rcl_clock_init+0xec>
 800d920:	6133      	str	r3, [r6, #16]
 800d922:	f106 0514 	add.w	r5, r6, #20
 800d926:	469c      	mov	ip, r3
 800d928:	2702      	movs	r7, #2
 800d92a:	e7b1      	b.n	800d890 <rcl_clock_init+0x40>
 800d92c:	f04f 0c0a 	mov.w	ip, #10
 800d930:	e79e      	b.n	800d870 <rcl_clock_init+0x20>
 800d932:	bf00      	nop
 800d934:	0800d831 	.word	0x0800d831
 800d938:	0800d829 	.word	0x0800d829
 800d93c:	0800d821 	.word	0x0800d821

0800d940 <rcl_validate_enclave_name_with_size>:
 800d940:	b378      	cbz	r0, 800d9a2 <rcl_validate_enclave_name_with_size+0x62>
 800d942:	b570      	push	{r4, r5, r6, lr}
 800d944:	4615      	mov	r5, r2
 800d946:	b0c2      	sub	sp, #264	; 0x108
 800d948:	b302      	cbz	r2, 800d98c <rcl_validate_enclave_name_with_size+0x4c>
 800d94a:	461e      	mov	r6, r3
 800d94c:	466a      	mov	r2, sp
 800d94e:	ab01      	add	r3, sp, #4
 800d950:	460c      	mov	r4, r1
 800d952:	f000 fc4b 	bl	800e1ec <rmw_validate_namespace_with_size>
 800d956:	4684      	mov	ip, r0
 800d958:	b9e8      	cbnz	r0, 800d996 <rcl_validate_enclave_name_with_size+0x56>
 800d95a:	9b00      	ldr	r3, [sp, #0]
 800d95c:	b923      	cbnz	r3, 800d968 <rcl_validate_enclave_name_with_size+0x28>
 800d95e:	2300      	movs	r3, #0
 800d960:	602b      	str	r3, [r5, #0]
 800d962:	4660      	mov	r0, ip
 800d964:	b042      	add	sp, #264	; 0x108
 800d966:	bd70      	pop	{r4, r5, r6, pc}
 800d968:	2b07      	cmp	r3, #7
 800d96a:	d007      	beq.n	800d97c <rcl_validate_enclave_name_with_size+0x3c>
 800d96c:	1e5a      	subs	r2, r3, #1
 800d96e:	2a05      	cmp	r2, #5
 800d970:	d833      	bhi.n	800d9da <rcl_validate_enclave_name_with_size+0x9a>
 800d972:	e8df f002 	tbb	[pc, r2]
 800d976:	2c2f      	.short	0x2c2f
 800d978:	1a232629 	.word	0x1a232629
 800d97c:	2cff      	cmp	r4, #255	; 0xff
 800d97e:	d9ee      	bls.n	800d95e <rcl_validate_enclave_name_with_size+0x1e>
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	2e00      	cmp	r6, #0
 800d984:	d0ed      	beq.n	800d962 <rcl_validate_enclave_name_with_size+0x22>
 800d986:	23fe      	movs	r3, #254	; 0xfe
 800d988:	6033      	str	r3, [r6, #0]
 800d98a:	e7ea      	b.n	800d962 <rcl_validate_enclave_name_with_size+0x22>
 800d98c:	f04f 0c0b 	mov.w	ip, #11
 800d990:	4660      	mov	r0, ip
 800d992:	b042      	add	sp, #264	; 0x108
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	f7ff f877 	bl	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 800d99a:	4684      	mov	ip, r0
 800d99c:	4660      	mov	r0, ip
 800d99e:	b042      	add	sp, #264	; 0x108
 800d9a0:	bd70      	pop	{r4, r5, r6, pc}
 800d9a2:	f04f 0c0b 	mov.w	ip, #11
 800d9a6:	4660      	mov	r0, ip
 800d9a8:	4770      	bx	lr
 800d9aa:	2306      	movs	r3, #6
 800d9ac:	602b      	str	r3, [r5, #0]
 800d9ae:	2e00      	cmp	r6, #0
 800d9b0:	d0d7      	beq.n	800d962 <rcl_validate_enclave_name_with_size+0x22>
 800d9b2:	9b01      	ldr	r3, [sp, #4]
 800d9b4:	6033      	str	r3, [r6, #0]
 800d9b6:	4660      	mov	r0, ip
 800d9b8:	b042      	add	sp, #264	; 0x108
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}
 800d9bc:	2305      	movs	r3, #5
 800d9be:	602b      	str	r3, [r5, #0]
 800d9c0:	e7f5      	b.n	800d9ae <rcl_validate_enclave_name_with_size+0x6e>
 800d9c2:	2304      	movs	r3, #4
 800d9c4:	602b      	str	r3, [r5, #0]
 800d9c6:	e7f2      	b.n	800d9ae <rcl_validate_enclave_name_with_size+0x6e>
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	602b      	str	r3, [r5, #0]
 800d9cc:	e7ef      	b.n	800d9ae <rcl_validate_enclave_name_with_size+0x6e>
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	602b      	str	r3, [r5, #0]
 800d9d2:	e7ec      	b.n	800d9ae <rcl_validate_enclave_name_with_size+0x6e>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	602b      	str	r3, [r5, #0]
 800d9d8:	e7e9      	b.n	800d9ae <rcl_validate_enclave_name_with_size+0x6e>
 800d9da:	4a04      	ldr	r2, [pc, #16]	; (800d9ec <rcl_validate_enclave_name_with_size+0xac>)
 800d9dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9e0:	a802      	add	r0, sp, #8
 800d9e2:	f000 f963 	bl	800dcac <rcutils_snprintf>
 800d9e6:	f04f 0c01 	mov.w	ip, #1
 800d9ea:	e7ba      	b.n	800d962 <rcl_validate_enclave_name_with_size+0x22>
 800d9ec:	08012f50 	.word	0x08012f50

0800d9f0 <rcl_validate_enclave_name>:
 800d9f0:	b168      	cbz	r0, 800da0e <rcl_validate_enclave_name+0x1e>
 800d9f2:	b570      	push	{r4, r5, r6, lr}
 800d9f4:	460d      	mov	r5, r1
 800d9f6:	4616      	mov	r6, r2
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	f7f2 fbf3 	bl	80001e4 <strlen>
 800d9fe:	4633      	mov	r3, r6
 800da00:	4601      	mov	r1, r0
 800da02:	462a      	mov	r2, r5
 800da04:	4620      	mov	r0, r4
 800da06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da0a:	f7ff bf99 	b.w	800d940 <rcl_validate_enclave_name_with_size>
 800da0e:	200b      	movs	r0, #11
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop

0800da14 <__atomic_load_8>:
 800da14:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800da18:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800da1c:	4a15      	ldr	r2, [pc, #84]	; (800da74 <__atomic_load_8+0x60>)
 800da1e:	4b16      	ldr	r3, [pc, #88]	; (800da78 <__atomic_load_8+0x64>)
 800da20:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800da24:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800da28:	fb02 f101 	mul.w	r1, r2, r1
 800da2c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800da30:	fba3 2301 	umull	r2, r3, r3, r1
 800da34:	091b      	lsrs	r3, r3, #4
 800da36:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800da3a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800da3e:	b4d0      	push	{r4, r6, r7}
 800da40:	4c0e      	ldr	r4, [pc, #56]	; (800da7c <__atomic_load_8+0x68>)
 800da42:	1ac9      	subs	r1, r1, r3
 800da44:	1862      	adds	r2, r4, r1
 800da46:	f04f 0c01 	mov.w	ip, #1
 800da4a:	e8d2 3f4f 	ldrexb	r3, [r2]
 800da4e:	e8c2 cf46 	strexb	r6, ip, [r2]
 800da52:	2e00      	cmp	r6, #0
 800da54:	d1f9      	bne.n	800da4a <__atomic_load_8+0x36>
 800da56:	f3bf 8f5b 	dmb	ish
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1f4      	bne.n	800da4a <__atomic_load_8+0x36>
 800da60:	e9d0 6700 	ldrd	r6, r7, [r0]
 800da64:	f3bf 8f5b 	dmb	ish
 800da68:	5463      	strb	r3, [r4, r1]
 800da6a:	4630      	mov	r0, r6
 800da6c:	4639      	mov	r1, r7
 800da6e:	bcd0      	pop	{r4, r6, r7}
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	27d4eb2d 	.word	0x27d4eb2d
 800da78:	b21642c9 	.word	0xb21642c9
 800da7c:	2000db70 	.word	0x2000db70

0800da80 <rcutils_get_env>:
 800da80:	b168      	cbz	r0, 800da9e <rcutils_get_env+0x1e>
 800da82:	b510      	push	{r4, lr}
 800da84:	460c      	mov	r4, r1
 800da86:	b129      	cbz	r1, 800da94 <rcutils_get_env+0x14>
 800da88:	f003 fcb2 	bl	80113f0 <getenv>
 800da8c:	b120      	cbz	r0, 800da98 <rcutils_get_env+0x18>
 800da8e:	6020      	str	r0, [r4, #0]
 800da90:	2000      	movs	r0, #0
 800da92:	bd10      	pop	{r4, pc}
 800da94:	4803      	ldr	r0, [pc, #12]	; (800daa4 <rcutils_get_env+0x24>)
 800da96:	bd10      	pop	{r4, pc}
 800da98:	4b03      	ldr	r3, [pc, #12]	; (800daa8 <rcutils_get_env+0x28>)
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	bd10      	pop	{r4, pc}
 800da9e:	4803      	ldr	r0, [pc, #12]	; (800daac <rcutils_get_env+0x2c>)
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	08012fcc 	.word	0x08012fcc
 800daa8:	080130f0 	.word	0x080130f0
 800daac:	08012fb0 	.word	0x08012fb0

0800dab0 <rcutils_is_directory>:
 800dab0:	2000      	movs	r0, #0
 800dab2:	4770      	bx	lr

0800dab4 <rcutils_join_path>:
 800dab4:	b082      	sub	sp, #8
 800dab6:	e88d 000c 	stmia.w	sp, {r2, r3}
 800daba:	2000      	movs	r0, #0
 800dabc:	b002      	add	sp, #8
 800dabe:	4770      	bx	lr

0800dac0 <rcutils_to_native_path>:
 800dac0:	b084      	sub	sp, #16
 800dac2:	a801      	add	r0, sp, #4
 800dac4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800dac8:	b004      	add	sp, #16
 800daca:	2000      	movs	r0, #0
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop

0800dad0 <rcutils_format_string_limit>:
 800dad0:	b40f      	push	{r0, r1, r2, r3}
 800dad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dad4:	b083      	sub	sp, #12
 800dad6:	ac08      	add	r4, sp, #32
 800dad8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800dada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dade:	b34e      	cbz	r6, 800db34 <rcutils_format_string_limit+0x64>
 800dae0:	a808      	add	r0, sp, #32
 800dae2:	f7fa fc41 	bl	8008368 <rcutils_allocator_is_valid>
 800dae6:	b328      	cbz	r0, 800db34 <rcutils_format_string_limit+0x64>
 800dae8:	2100      	movs	r1, #0
 800daea:	ab0f      	add	r3, sp, #60	; 0x3c
 800daec:	4632      	mov	r2, r6
 800daee:	4608      	mov	r0, r1
 800daf0:	e9cd 3300 	strd	r3, r3, [sp]
 800daf4:	f000 f8f4 	bl	800dce0 <rcutils_vsnprintf>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	4605      	mov	r5, r0
 800dafc:	d01a      	beq.n	800db34 <rcutils_format_string_limit+0x64>
 800dafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db00:	990c      	ldr	r1, [sp, #48]	; 0x30
 800db02:	1c47      	adds	r7, r0, #1
 800db04:	429f      	cmp	r7, r3
 800db06:	bf84      	itt	hi
 800db08:	461f      	movhi	r7, r3
 800db0a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800db0e:	4638      	mov	r0, r7
 800db10:	9b08      	ldr	r3, [sp, #32]
 800db12:	4798      	blx	r3
 800db14:	4604      	mov	r4, r0
 800db16:	b168      	cbz	r0, 800db34 <rcutils_format_string_limit+0x64>
 800db18:	9b01      	ldr	r3, [sp, #4]
 800db1a:	4632      	mov	r2, r6
 800db1c:	4639      	mov	r1, r7
 800db1e:	f000 f8df 	bl	800dce0 <rcutils_vsnprintf>
 800db22:	2800      	cmp	r0, #0
 800db24:	db02      	blt.n	800db2c <rcutils_format_string_limit+0x5c>
 800db26:	2300      	movs	r3, #0
 800db28:	5563      	strb	r3, [r4, r5]
 800db2a:	e004      	b.n	800db36 <rcutils_format_string_limit+0x66>
 800db2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800db30:	4620      	mov	r0, r4
 800db32:	4798      	blx	r3
 800db34:	2400      	movs	r4, #0
 800db36:	4620      	mov	r0, r4
 800db38:	b003      	add	sp, #12
 800db3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db3e:	b004      	add	sp, #16
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop

0800db44 <rcutils_repl_str>:
 800db44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db48:	ed2d 8b02 	vpush	{d8}
 800db4c:	b087      	sub	sp, #28
 800db4e:	4680      	mov	r8, r0
 800db50:	4608      	mov	r0, r1
 800db52:	f8cd 8004 	str.w	r8, [sp, #4]
 800db56:	ee08 2a10 	vmov	s16, r2
 800db5a:	468a      	mov	sl, r1
 800db5c:	4699      	mov	r9, r3
 800db5e:	f7f2 fb41 	bl	80001e4 <strlen>
 800db62:	2600      	movs	r6, #0
 800db64:	4647      	mov	r7, r8
 800db66:	9002      	str	r0, [sp, #8]
 800db68:	46b3      	mov	fp, r6
 800db6a:	2510      	movs	r5, #16
 800db6c:	46b0      	mov	r8, r6
 800db6e:	e01d      	b.n	800dbac <rcutils_repl_str+0x68>
 800db70:	f10b 0b01 	add.w	fp, fp, #1
 800db74:	455e      	cmp	r6, fp
 800db76:	d211      	bcs.n	800db9c <rcutils_repl_str+0x58>
 800db78:	442e      	add	r6, r5
 800db7a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800db7e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800db82:	00b1      	lsls	r1, r6, #2
 800db84:	4798      	blx	r3
 800db86:	2800      	cmp	r0, #0
 800db88:	f000 8088 	beq.w	800dc9c <rcutils_repl_str+0x158>
 800db8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db90:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800db94:	4680      	mov	r8, r0
 800db96:	bf28      	it	cs
 800db98:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800db9c:	9a01      	ldr	r2, [sp, #4]
 800db9e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800dba2:	1aa2      	subs	r2, r4, r2
 800dba4:	f843 2c04 	str.w	r2, [r3, #-4]
 800dba8:	9b02      	ldr	r3, [sp, #8]
 800dbaa:	18e7      	adds	r7, r4, r3
 800dbac:	4651      	mov	r1, sl
 800dbae:	4638      	mov	r0, r7
 800dbb0:	f003 ffdb 	bl	8011b6a <strstr>
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	2c00      	cmp	r4, #0
 800dbba:	d1d9      	bne.n	800db70 <rcutils_repl_str+0x2c>
 800dbbc:	46b8      	mov	r8, r7
 800dbbe:	4607      	mov	r7, r0
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	f7f2 fb0f 	bl	80001e4 <strlen>
 800dbc6:	9b01      	ldr	r3, [sp, #4]
 800dbc8:	eba8 0303 	sub.w	r3, r8, r3
 800dbcc:	181c      	adds	r4, r3, r0
 800dbce:	9404      	str	r4, [sp, #16]
 800dbd0:	f1bb 0f00 	cmp.w	fp, #0
 800dbd4:	d04a      	beq.n	800dc6c <rcutils_repl_str+0x128>
 800dbd6:	ee18 0a10 	vmov	r0, s16
 800dbda:	f7f2 fb03 	bl	80001e4 <strlen>
 800dbde:	9b02      	ldr	r3, [sp, #8]
 800dbe0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dbe4:	1ac3      	subs	r3, r0, r3
 800dbe6:	fb0b 4303 	mla	r3, fp, r3, r4
 800dbea:	461a      	mov	r2, r3
 800dbec:	9305      	str	r3, [sp, #20]
 800dbee:	4606      	mov	r6, r0
 800dbf0:	f8d9 3000 	ldr.w	r3, [r9]
 800dbf4:	1c50      	adds	r0, r2, #1
 800dbf6:	4798      	blx	r3
 800dbf8:	9003      	str	r0, [sp, #12]
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d04f      	beq.n	800dc9e <rcutils_repl_str+0x15a>
 800dbfe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	4641      	mov	r1, r8
 800dc06:	f004 f851 	bl	8011cac <memcpy>
 800dc0a:	683d      	ldr	r5, [r7, #0]
 800dc0c:	9b03      	ldr	r3, [sp, #12]
 800dc0e:	9701      	str	r7, [sp, #4]
 800dc10:	46ba      	mov	sl, r7
 800dc12:	441d      	add	r5, r3
 800dc14:	9f02      	ldr	r7, [sp, #8]
 800dc16:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc1a:	2401      	movs	r4, #1
 800dc1c:	46d1      	mov	r9, sl
 800dc1e:	ee18 aa10 	vmov	sl, s16
 800dc22:	e00a      	b.n	800dc3a <rcutils_repl_str+0xf6>
 800dc24:	f8d9 5000 	ldr.w	r5, [r9]
 800dc28:	1aaa      	subs	r2, r5, r2
 800dc2a:	1885      	adds	r5, r0, r2
 800dc2c:	f004 f83e 	bl	8011cac <memcpy>
 800dc30:	45a3      	cmp	fp, r4
 800dc32:	f104 0201 	add.w	r2, r4, #1
 800dc36:	d935      	bls.n	800dca4 <rcutils_repl_str+0x160>
 800dc38:	4614      	mov	r4, r2
 800dc3a:	4632      	mov	r2, r6
 800dc3c:	4651      	mov	r1, sl
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f004 f834 	bl	8011cac <memcpy>
 800dc44:	f859 2b04 	ldr.w	r2, [r9], #4
 800dc48:	45a3      	cmp	fp, r4
 800dc4a:	443a      	add	r2, r7
 800dc4c:	eb05 0006 	add.w	r0, r5, r6
 800dc50:	eb08 0102 	add.w	r1, r8, r2
 800dc54:	d1e6      	bne.n	800dc24 <rcutils_repl_str+0xe0>
 800dc56:	9b04      	ldr	r3, [sp, #16]
 800dc58:	1a9a      	subs	r2, r3, r2
 800dc5a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dc5e:	f004 f825 	bl	8011cac <memcpy>
 800dc62:	9a03      	ldr	r2, [sp, #12]
 800dc64:	9905      	ldr	r1, [sp, #20]
 800dc66:	2300      	movs	r3, #0
 800dc68:	5453      	strb	r3, [r2, r1]
 800dc6a:	e00b      	b.n	800dc84 <rcutils_repl_str+0x140>
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f8d9 3000 	ldr.w	r3, [r9]
 800dc72:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dc76:	3001      	adds	r0, #1
 800dc78:	4798      	blx	r3
 800dc7a:	9003      	str	r0, [sp, #12]
 800dc7c:	b110      	cbz	r0, 800dc84 <rcutils_repl_str+0x140>
 800dc7e:	9901      	ldr	r1, [sp, #4]
 800dc80:	f004 f80c 	bl	8011c9c <strcpy>
 800dc84:	4638      	mov	r0, r7
 800dc86:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dc8a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dc8e:	4798      	blx	r3
 800dc90:	9803      	ldr	r0, [sp, #12]
 800dc92:	b007      	add	sp, #28
 800dc94:	ecbd 8b02 	vpop	{d8}
 800dc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9c:	4647      	mov	r7, r8
 800dc9e:	2300      	movs	r3, #0
 800dca0:	9303      	str	r3, [sp, #12]
 800dca2:	e7ef      	b.n	800dc84 <rcutils_repl_str+0x140>
 800dca4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dca8:	e7db      	b.n	800dc62 <rcutils_repl_str+0x11e>
 800dcaa:	bf00      	nop

0800dcac <rcutils_snprintf>:
 800dcac:	b40c      	push	{r2, r3}
 800dcae:	b530      	push	{r4, r5, lr}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	ab06      	add	r3, sp, #24
 800dcb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	b152      	cbz	r2, 800dcd2 <rcutils_snprintf+0x26>
 800dcbc:	b138      	cbz	r0, 800dcce <rcutils_snprintf+0x22>
 800dcbe:	b141      	cbz	r1, 800dcd2 <rcutils_snprintf+0x26>
 800dcc0:	f003 ff1e 	bl	8011b00 <vsniprintf>
 800dcc4:	b003      	add	sp, #12
 800dcc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcca:	b002      	add	sp, #8
 800dccc:	4770      	bx	lr
 800dcce:	2900      	cmp	r1, #0
 800dcd0:	d0f6      	beq.n	800dcc0 <rcutils_snprintf+0x14>
 800dcd2:	f003 ffb7 	bl	8011c44 <__errno>
 800dcd6:	2316      	movs	r3, #22
 800dcd8:	6003      	str	r3, [r0, #0]
 800dcda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcde:	e7f1      	b.n	800dcc4 <rcutils_snprintf+0x18>

0800dce0 <rcutils_vsnprintf>:
 800dce0:	b570      	push	{r4, r5, r6, lr}
 800dce2:	b13a      	cbz	r2, 800dcf4 <rcutils_vsnprintf+0x14>
 800dce4:	b120      	cbz	r0, 800dcf0 <rcutils_vsnprintf+0x10>
 800dce6:	b129      	cbz	r1, 800dcf4 <rcutils_vsnprintf+0x14>
 800dce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcec:	f003 bf08 	b.w	8011b00 <vsniprintf>
 800dcf0:	2900      	cmp	r1, #0
 800dcf2:	d0f9      	beq.n	800dce8 <rcutils_vsnprintf+0x8>
 800dcf4:	f003 ffa6 	bl	8011c44 <__errno>
 800dcf8:	2316      	movs	r3, #22
 800dcfa:	6003      	str	r3, [r0, #0]
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd00:	bd70      	pop	{r4, r5, r6, pc}
 800dd02:	bf00      	nop

0800dd04 <rcutils_strdup>:
 800dd04:	b084      	sub	sp, #16
 800dd06:	b570      	push	{r4, r5, r6, lr}
 800dd08:	b082      	sub	sp, #8
 800dd0a:	ac07      	add	r4, sp, #28
 800dd0c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800dd10:	4605      	mov	r5, r0
 800dd12:	b1b0      	cbz	r0, 800dd42 <rcutils_strdup+0x3e>
 800dd14:	f7f2 fa66 	bl	80001e4 <strlen>
 800dd18:	1c42      	adds	r2, r0, #1
 800dd1a:	9b07      	ldr	r3, [sp, #28]
 800dd1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd1e:	9201      	str	r2, [sp, #4]
 800dd20:	4606      	mov	r6, r0
 800dd22:	4610      	mov	r0, r2
 800dd24:	4798      	blx	r3
 800dd26:	4604      	mov	r4, r0
 800dd28:	b128      	cbz	r0, 800dd36 <rcutils_strdup+0x32>
 800dd2a:	9a01      	ldr	r2, [sp, #4]
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	f003 ffbd 	bl	8011cac <memcpy>
 800dd32:	2300      	movs	r3, #0
 800dd34:	55a3      	strb	r3, [r4, r6]
 800dd36:	4620      	mov	r0, r4
 800dd38:	b002      	add	sp, #8
 800dd3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd3e:	b004      	add	sp, #16
 800dd40:	4770      	bx	lr
 800dd42:	4604      	mov	r4, r0
 800dd44:	e7f7      	b.n	800dd36 <rcutils_strdup+0x32>
 800dd46:	bf00      	nop

0800dd48 <rcutils_strndup>:
 800dd48:	b082      	sub	sp, #8
 800dd4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4c:	ac06      	add	r4, sp, #24
 800dd4e:	e884 000c 	stmia.w	r4, {r2, r3}
 800dd52:	4605      	mov	r5, r0
 800dd54:	b188      	cbz	r0, 800dd7a <rcutils_strndup+0x32>
 800dd56:	1c4f      	adds	r7, r1, #1
 800dd58:	460e      	mov	r6, r1
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dd5e:	4790      	blx	r2
 800dd60:	4604      	mov	r4, r0
 800dd62:	b128      	cbz	r0, 800dd70 <rcutils_strndup+0x28>
 800dd64:	463a      	mov	r2, r7
 800dd66:	4629      	mov	r1, r5
 800dd68:	f003 ffa0 	bl	8011cac <memcpy>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	55a3      	strb	r3, [r4, r6]
 800dd70:	4620      	mov	r0, r4
 800dd72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd76:	b002      	add	sp, #8
 800dd78:	4770      	bx	lr
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	e7f8      	b.n	800dd70 <rcutils_strndup+0x28>
 800dd7e:	bf00      	nop

0800dd80 <rcutils_get_zero_initialized_string_map>:
 800dd80:	4b01      	ldr	r3, [pc, #4]	; (800dd88 <rcutils_get_zero_initialized_string_map+0x8>)
 800dd82:	2000      	movs	r0, #0
 800dd84:	6018      	str	r0, [r3, #0]
 800dd86:	4770      	bx	lr
 800dd88:	2000db88 	.word	0x2000db88

0800dd8c <rcutils_string_map_reserve>:
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d05f      	beq.n	800de50 <rcutils_string_map_reserve+0xc4>
 800dd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd94:	460c      	mov	r4, r1
 800dd96:	6801      	ldr	r1, [r0, #0]
 800dd98:	b082      	sub	sp, #8
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	b129      	cbz	r1, 800ddaa <rcutils_string_map_reserve+0x1e>
 800dd9e:	68cb      	ldr	r3, [r1, #12]
 800dda0:	42a3      	cmp	r3, r4
 800dda2:	d906      	bls.n	800ddb2 <rcutils_string_map_reserve+0x26>
 800dda4:	461c      	mov	r4, r3
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d1f9      	bne.n	800dd9e <rcutils_string_map_reserve+0x12>
 800ddaa:	201f      	movs	r0, #31
 800ddac:	b002      	add	sp, #8
 800ddae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb2:	688b      	ldr	r3, [r1, #8]
 800ddb4:	42a3      	cmp	r3, r4
 800ddb6:	d047      	beq.n	800de48 <rcutils_string_map_reserve+0xbc>
 800ddb8:	6a0e      	ldr	r6, [r1, #32]
 800ddba:	2c00      	cmp	r4, #0
 800ddbc:	d034      	beq.n	800de28 <rcutils_string_map_reserve+0x9c>
 800ddbe:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ddc2:	d243      	bcs.n	800de4c <rcutils_string_map_reserve+0xc0>
 800ddc4:	00a7      	lsls	r7, r4, #2
 800ddc6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800ddca:	6808      	ldr	r0, [r1, #0]
 800ddcc:	4632      	mov	r2, r6
 800ddce:	4639      	mov	r1, r7
 800ddd0:	47c0      	blx	r8
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d03a      	beq.n	800de4c <rcutils_string_map_reserve+0xc0>
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	4632      	mov	r2, r6
 800ddda:	6018      	str	r0, [r3, #0]
 800dddc:	4639      	mov	r1, r7
 800ddde:	6858      	ldr	r0, [r3, #4]
 800dde0:	47c0      	blx	r8
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d032      	beq.n	800de4c <rcutils_string_map_reserve+0xc0>
 800dde6:	682d      	ldr	r5, [r5, #0]
 800dde8:	68ab      	ldr	r3, [r5, #8]
 800ddea:	6068      	str	r0, [r5, #4]
 800ddec:	42a3      	cmp	r3, r4
 800ddee:	d226      	bcs.n	800de3e <rcutils_string_map_reserve+0xb2>
 800ddf0:	682a      	ldr	r2, [r5, #0]
 800ddf2:	eb00 0c07 	add.w	ip, r0, r7
 800ddf6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800ddfa:	45e6      	cmp	lr, ip
 800ddfc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800de00:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800de04:	d203      	bcs.n	800de0e <rcutils_string_map_reserve+0x82>
 800de06:	eb02 0c07 	add.w	ip, r2, r7
 800de0a:	4566      	cmp	r6, ip
 800de0c:	d322      	bcc.n	800de54 <rcutils_string_map_reserve+0xc8>
 800de0e:	1ae3      	subs	r3, r4, r3
 800de10:	009a      	lsls	r2, r3, #2
 800de12:	4670      	mov	r0, lr
 800de14:	2100      	movs	r1, #0
 800de16:	9201      	str	r2, [sp, #4]
 800de18:	f003 fe80 	bl	8011b1c <memset>
 800de1c:	9a01      	ldr	r2, [sp, #4]
 800de1e:	2100      	movs	r1, #0
 800de20:	4630      	mov	r0, r6
 800de22:	f003 fe7b 	bl	8011b1c <memset>
 800de26:	e00a      	b.n	800de3e <rcutils_string_map_reserve+0xb2>
 800de28:	694f      	ldr	r7, [r1, #20]
 800de2a:	6808      	ldr	r0, [r1, #0]
 800de2c:	4631      	mov	r1, r6
 800de2e:	47b8      	blx	r7
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	4631      	mov	r1, r6
 800de34:	6858      	ldr	r0, [r3, #4]
 800de36:	601c      	str	r4, [r3, #0]
 800de38:	47b8      	blx	r7
 800de3a:	682d      	ldr	r5, [r5, #0]
 800de3c:	606c      	str	r4, [r5, #4]
 800de3e:	2000      	movs	r0, #0
 800de40:	60ac      	str	r4, [r5, #8]
 800de42:	b002      	add	sp, #8
 800de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de48:	2000      	movs	r0, #0
 800de4a:	e7af      	b.n	800ddac <rcutils_string_map_reserve+0x20>
 800de4c:	200a      	movs	r0, #10
 800de4e:	e7ad      	b.n	800ddac <rcutils_string_map_reserve+0x20>
 800de50:	200b      	movs	r0, #11
 800de52:	4770      	bx	lr
 800de54:	1f0b      	subs	r3, r1, #4
 800de56:	4418      	add	r0, r3
 800de58:	4413      	add	r3, r2
 800de5a:	3a04      	subs	r2, #4
 800de5c:	4417      	add	r7, r2
 800de5e:	2200      	movs	r2, #0
 800de60:	f843 2f04 	str.w	r2, [r3, #4]!
 800de64:	42bb      	cmp	r3, r7
 800de66:	f840 2f04 	str.w	r2, [r0, #4]!
 800de6a:	d1f9      	bne.n	800de60 <rcutils_string_map_reserve+0xd4>
 800de6c:	e7e7      	b.n	800de3e <rcutils_string_map_reserve+0xb2>
 800de6e:	bf00      	nop

0800de70 <rcutils_string_map_init>:
 800de70:	b082      	sub	sp, #8
 800de72:	b570      	push	{r4, r5, r6, lr}
 800de74:	ac04      	add	r4, sp, #16
 800de76:	e884 000c 	stmia.w	r4, {r2, r3}
 800de7a:	b380      	cbz	r0, 800dede <rcutils_string_map_init+0x6e>
 800de7c:	6806      	ldr	r6, [r0, #0]
 800de7e:	4604      	mov	r4, r0
 800de80:	b12e      	cbz	r6, 800de8e <rcutils_string_map_init+0x1e>
 800de82:	251e      	movs	r5, #30
 800de84:	4628      	mov	r0, r5
 800de86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de8a:	b002      	add	sp, #8
 800de8c:	4770      	bx	lr
 800de8e:	a804      	add	r0, sp, #16
 800de90:	460d      	mov	r5, r1
 800de92:	f7fa fa69 	bl	8008368 <rcutils_allocator_is_valid>
 800de96:	b310      	cbz	r0, 800dede <rcutils_string_map_init+0x6e>
 800de98:	9b04      	ldr	r3, [sp, #16]
 800de9a:	9908      	ldr	r1, [sp, #32]
 800de9c:	2024      	movs	r0, #36	; 0x24
 800de9e:	4798      	blx	r3
 800dea0:	6020      	str	r0, [r4, #0]
 800dea2:	b310      	cbz	r0, 800deea <rcutils_string_map_init+0x7a>
 800dea4:	f10d 0e10 	add.w	lr, sp, #16
 800dea8:	e9c0 6600 	strd	r6, r6, [r0]
 800deac:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800deb0:	f100 0c10 	add.w	ip, r0, #16
 800deb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800deb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800debc:	f8de 3000 	ldr.w	r3, [lr]
 800dec0:	f8cc 3000 	str.w	r3, [ip]
 800dec4:	4629      	mov	r1, r5
 800dec6:	4620      	mov	r0, r4
 800dec8:	f7ff ff60 	bl	800dd8c <rcutils_string_map_reserve>
 800decc:	4605      	mov	r5, r0
 800dece:	2800      	cmp	r0, #0
 800ded0:	d0d8      	beq.n	800de84 <rcutils_string_map_init+0x14>
 800ded2:	9b05      	ldr	r3, [sp, #20]
 800ded4:	9908      	ldr	r1, [sp, #32]
 800ded6:	6820      	ldr	r0, [r4, #0]
 800ded8:	4798      	blx	r3
 800deda:	6026      	str	r6, [r4, #0]
 800dedc:	e7d2      	b.n	800de84 <rcutils_string_map_init+0x14>
 800dede:	250b      	movs	r5, #11
 800dee0:	4628      	mov	r0, r5
 800dee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dee6:	b002      	add	sp, #8
 800dee8:	4770      	bx	lr
 800deea:	250a      	movs	r5, #10
 800deec:	e7ca      	b.n	800de84 <rcutils_string_map_init+0x14>
 800deee:	bf00      	nop

0800def0 <rcutils_string_map_fini>:
 800def0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def4:	b082      	sub	sp, #8
 800def6:	2800      	cmp	r0, #0
 800def8:	d03a      	beq.n	800df70 <rcutils_string_map_fini+0x80>
 800defa:	6804      	ldr	r4, [r0, #0]
 800defc:	4606      	mov	r6, r0
 800defe:	2c00      	cmp	r4, #0
 800df00:	d032      	beq.n	800df68 <rcutils_string_map_fini+0x78>
 800df02:	68a3      	ldr	r3, [r4, #8]
 800df04:	b32b      	cbz	r3, 800df52 <rcutils_string_map_fini+0x62>
 800df06:	2500      	movs	r5, #0
 800df08:	6822      	ldr	r2, [r4, #0]
 800df0a:	462f      	mov	r7, r5
 800df0c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800df10:	b1e0      	cbz	r0, 800df4c <rcutils_string_map_fini+0x5c>
 800df12:	6a21      	ldr	r1, [r4, #32]
 800df14:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800df18:	9101      	str	r1, [sp, #4]
 800df1a:	47c0      	blx	r8
 800df1c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df20:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800df24:	9901      	ldr	r1, [sp, #4]
 800df26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df2a:	47c0      	blx	r8
 800df2c:	68e3      	ldr	r3, [r4, #12]
 800df2e:	6862      	ldr	r2, [r4, #4]
 800df30:	3b01      	subs	r3, #1
 800df32:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800df36:	60e3      	str	r3, [r4, #12]
 800df38:	6834      	ldr	r4, [r6, #0]
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	3501      	adds	r5, #1
 800df3e:	429d      	cmp	r5, r3
 800df40:	d207      	bcs.n	800df52 <rcutils_string_map_fini+0x62>
 800df42:	6822      	ldr	r2, [r4, #0]
 800df44:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800df48:	2800      	cmp	r0, #0
 800df4a:	d1e2      	bne.n	800df12 <rcutils_string_map_fini+0x22>
 800df4c:	3501      	adds	r5, #1
 800df4e:	429d      	cmp	r5, r3
 800df50:	d3dc      	bcc.n	800df0c <rcutils_string_map_fini+0x1c>
 800df52:	2100      	movs	r1, #0
 800df54:	4630      	mov	r0, r6
 800df56:	f7ff ff19 	bl	800dd8c <rcutils_string_map_reserve>
 800df5a:	4604      	mov	r4, r0
 800df5c:	b920      	cbnz	r0, 800df68 <rcutils_string_map_fini+0x78>
 800df5e:	6830      	ldr	r0, [r6, #0]
 800df60:	6943      	ldr	r3, [r0, #20]
 800df62:	6a01      	ldr	r1, [r0, #32]
 800df64:	4798      	blx	r3
 800df66:	6034      	str	r4, [r6, #0]
 800df68:	4620      	mov	r0, r4
 800df6a:	b002      	add	sp, #8
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	240b      	movs	r4, #11
 800df72:	4620      	mov	r0, r4
 800df74:	b002      	add	sp, #8
 800df76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df7a:	bf00      	nop

0800df7c <rcutils_string_map_getn>:
 800df7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	b300      	cbz	r0, 800dfc4 <rcutils_string_map_getn+0x48>
 800df82:	6807      	ldr	r7, [r0, #0]
 800df84:	b1ff      	cbz	r7, 800dfc6 <rcutils_string_map_getn+0x4a>
 800df86:	4688      	mov	r8, r1
 800df88:	b1e1      	cbz	r1, 800dfc4 <rcutils_string_map_getn+0x48>
 800df8a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800df8e:	683e      	ldr	r6, [r7, #0]
 800df90:	f1ba 0f00 	cmp.w	sl, #0
 800df94:	d016      	beq.n	800dfc4 <rcutils_string_map_getn+0x48>
 800df96:	4691      	mov	r9, r2
 800df98:	3e04      	subs	r6, #4
 800df9a:	2400      	movs	r4, #0
 800df9c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800dfa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	3401      	adds	r4, #1
 800dfa8:	b155      	cbz	r5, 800dfc0 <rcutils_string_map_getn+0x44>
 800dfaa:	f7f2 f91b 	bl	80001e4 <strlen>
 800dfae:	4548      	cmp	r0, r9
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	bf38      	it	cc
 800dfb6:	464a      	movcc	r2, r9
 800dfb8:	4640      	mov	r0, r8
 800dfba:	f003 fdc4 	bl	8011b46 <strncmp>
 800dfbe:	b128      	cbz	r0, 800dfcc <rcutils_string_map_getn+0x50>
 800dfc0:	45a2      	cmp	sl, r4
 800dfc2:	d1eb      	bne.n	800df9c <rcutils_string_map_getn+0x20>
 800dfc4:	2700      	movs	r7, #0
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f853 700b 	ldr.w	r7, [r3, fp]
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfd8 <rcutils_system_time_now>:
 800dfd8:	b308      	cbz	r0, 800e01e <rcutils_system_time_now+0x46>
 800dfda:	b570      	push	{r4, r5, r6, lr}
 800dfdc:	b084      	sub	sp, #16
 800dfde:	4604      	mov	r4, r0
 800dfe0:	4669      	mov	r1, sp
 800dfe2:	2001      	movs	r0, #1
 800dfe4:	f7f3 f940 	bl	8001268 <clock_gettime>
 800dfe8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dfec:	2d00      	cmp	r5, #0
 800dfee:	db13      	blt.n	800e018 <rcutils_system_time_now+0x40>
 800dff0:	9902      	ldr	r1, [sp, #8]
 800dff2:	2900      	cmp	r1, #0
 800dff4:	db0d      	blt.n	800e012 <rcutils_system_time_now+0x3a>
 800dff6:	4e0b      	ldr	r6, [pc, #44]	; (800e024 <rcutils_system_time_now+0x4c>)
 800dff8:	fba3 3206 	umull	r3, r2, r3, r6
 800dffc:	185b      	adds	r3, r3, r1
 800dffe:	fb06 2205 	mla	r2, r6, r5, r2
 800e002:	f04f 0000 	mov.w	r0, #0
 800e006:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e00a:	e9c4 3200 	strd	r3, r2, [r4]
 800e00e:	b004      	add	sp, #16
 800e010:	bd70      	pop	{r4, r5, r6, pc}
 800e012:	ea53 0205 	orrs.w	r2, r3, r5
 800e016:	d1ee      	bne.n	800dff6 <rcutils_system_time_now+0x1e>
 800e018:	2002      	movs	r0, #2
 800e01a:	b004      	add	sp, #16
 800e01c:	bd70      	pop	{r4, r5, r6, pc}
 800e01e:	200b      	movs	r0, #11
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	3b9aca00 	.word	0x3b9aca00

0800e028 <rcutils_steady_time_now>:
 800e028:	b308      	cbz	r0, 800e06e <rcutils_steady_time_now+0x46>
 800e02a:	b570      	push	{r4, r5, r6, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	4604      	mov	r4, r0
 800e030:	4669      	mov	r1, sp
 800e032:	2000      	movs	r0, #0
 800e034:	f7f3 f918 	bl	8001268 <clock_gettime>
 800e038:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e03c:	2d00      	cmp	r5, #0
 800e03e:	db13      	blt.n	800e068 <rcutils_steady_time_now+0x40>
 800e040:	9902      	ldr	r1, [sp, #8]
 800e042:	2900      	cmp	r1, #0
 800e044:	db0d      	blt.n	800e062 <rcutils_steady_time_now+0x3a>
 800e046:	4e0b      	ldr	r6, [pc, #44]	; (800e074 <rcutils_steady_time_now+0x4c>)
 800e048:	fba3 3206 	umull	r3, r2, r3, r6
 800e04c:	185b      	adds	r3, r3, r1
 800e04e:	fb06 2205 	mla	r2, r6, r5, r2
 800e052:	f04f 0000 	mov.w	r0, #0
 800e056:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e05a:	e9c4 3200 	strd	r3, r2, [r4]
 800e05e:	b004      	add	sp, #16
 800e060:	bd70      	pop	{r4, r5, r6, pc}
 800e062:	ea53 0205 	orrs.w	r2, r3, r5
 800e066:	d1ee      	bne.n	800e046 <rcutils_steady_time_now+0x1e>
 800e068:	2002      	movs	r0, #2
 800e06a:	b004      	add	sp, #16
 800e06c:	bd70      	pop	{r4, r5, r6, pc}
 800e06e:	200b      	movs	r0, #11
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	3b9aca00 	.word	0x3b9aca00

0800e078 <rmw_get_zero_initialized_context>:
 800e078:	b510      	push	{r4, lr}
 800e07a:	4604      	mov	r4, r0
 800e07c:	3010      	adds	r0, #16
 800e07e:	f000 f80b 	bl	800e098 <rmw_get_zero_initialized_init_options>
 800e082:	2300      	movs	r3, #0
 800e084:	2000      	movs	r0, #0
 800e086:	2100      	movs	r1, #0
 800e088:	e9c4 0100 	strd	r0, r1, [r4]
 800e08c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e090:	60a3      	str	r3, [r4, #8]
 800e092:	4620      	mov	r0, r4
 800e094:	bd10      	pop	{r4, pc}
 800e096:	bf00      	nop

0800e098 <rmw_get_zero_initialized_init_options>:
 800e098:	b510      	push	{r4, lr}
 800e09a:	2238      	movs	r2, #56	; 0x38
 800e09c:	4604      	mov	r4, r0
 800e09e:	2100      	movs	r1, #0
 800e0a0:	f003 fd3c 	bl	8011b1c <memset>
 800e0a4:	f104 0010 	add.w	r0, r4, #16
 800e0a8:	f000 f806 	bl	800e0b8 <rmw_get_default_security_options>
 800e0ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0b0:	60e3      	str	r3, [r4, #12]
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	bd10      	pop	{r4, pc}
 800e0b6:	bf00      	nop

0800e0b8 <rmw_get_default_security_options>:
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	7002      	strb	r2, [r0, #0]
 800e0bc:	6042      	str	r2, [r0, #4]
 800e0be:	4770      	bx	lr

0800e0c0 <rmw_subscription_content_filter_options_fini>:
 800e0c0:	b1b0      	cbz	r0, 800e0f0 <rmw_subscription_content_filter_options_fini+0x30>
 800e0c2:	b538      	push	{r3, r4, r5, lr}
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	4608      	mov	r0, r1
 800e0c8:	460d      	mov	r5, r1
 800e0ca:	f7fa f94d 	bl	8008368 <rcutils_allocator_is_valid>
 800e0ce:	b168      	cbz	r0, 800e0ec <rmw_subscription_content_filter_options_fini+0x2c>
 800e0d0:	6820      	ldr	r0, [r4, #0]
 800e0d2:	b120      	cbz	r0, 800e0de <rmw_subscription_content_filter_options_fini+0x1e>
 800e0d4:	686b      	ldr	r3, [r5, #4]
 800e0d6:	6929      	ldr	r1, [r5, #16]
 800e0d8:	4798      	blx	r3
 800e0da:	2300      	movs	r3, #0
 800e0dc:	6023      	str	r3, [r4, #0]
 800e0de:	1d20      	adds	r0, r4, #4
 800e0e0:	f002 ffec 	bl	80110bc <rcutils_string_array_fini>
 800e0e4:	3800      	subs	r0, #0
 800e0e6:	bf18      	it	ne
 800e0e8:	2001      	movne	r0, #1
 800e0ea:	bd38      	pop	{r3, r4, r5, pc}
 800e0ec:	200b      	movs	r0, #11
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	200b      	movs	r0, #11
 800e0f2:	4770      	bx	lr

0800e0f4 <rmw_get_default_subscription_options>:
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	e9c0 2200 	strd	r2, r2, [r0]
 800e0fa:	6082      	str	r2, [r0, #8]
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop

0800e100 <rmw_validate_full_topic_name>:
 800e100:	2800      	cmp	r0, #0
 800e102:	d057      	beq.n	800e1b4 <rmw_validate_full_topic_name+0xb4>
 800e104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e108:	460d      	mov	r5, r1
 800e10a:	2900      	cmp	r1, #0
 800e10c:	d054      	beq.n	800e1b8 <rmw_validate_full_topic_name+0xb8>
 800e10e:	4616      	mov	r6, r2
 800e110:	4604      	mov	r4, r0
 800e112:	f7f2 f867 	bl	80001e4 <strlen>
 800e116:	b148      	cbz	r0, 800e12c <rmw_validate_full_topic_name+0x2c>
 800e118:	7823      	ldrb	r3, [r4, #0]
 800e11a:	2b2f      	cmp	r3, #47	; 0x2f
 800e11c:	d00d      	beq.n	800e13a <rmw_validate_full_topic_name+0x3a>
 800e11e:	2302      	movs	r3, #2
 800e120:	602b      	str	r3, [r5, #0]
 800e122:	b13e      	cbz	r6, 800e134 <rmw_validate_full_topic_name+0x34>
 800e124:	2000      	movs	r0, #0
 800e126:	6030      	str	r0, [r6, #0]
 800e128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e12c:	2301      	movs	r3, #1
 800e12e:	602b      	str	r3, [r5, #0]
 800e130:	2e00      	cmp	r6, #0
 800e132:	d1f7      	bne.n	800e124 <rmw_validate_full_topic_name+0x24>
 800e134:	2000      	movs	r0, #0
 800e136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e13a:	1e43      	subs	r3, r0, #1
 800e13c:	5ce2      	ldrb	r2, [r4, r3]
 800e13e:	2a2f      	cmp	r2, #47	; 0x2f
 800e140:	d03c      	beq.n	800e1bc <rmw_validate_full_topic_name+0xbc>
 800e142:	1e63      	subs	r3, r4, #1
 800e144:	eb03 0800 	add.w	r8, r3, r0
 800e148:	f1c4 0e01 	rsb	lr, r4, #1
 800e14c:	eb0e 0703 	add.w	r7, lr, r3
 800e150:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e154:	f021 0220 	bic.w	r2, r1, #32
 800e158:	3a41      	subs	r2, #65	; 0x41
 800e15a:	2a19      	cmp	r2, #25
 800e15c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800e160:	d90b      	bls.n	800e17a <rmw_validate_full_topic_name+0x7a>
 800e162:	295f      	cmp	r1, #95	; 0x5f
 800e164:	d009      	beq.n	800e17a <rmw_validate_full_topic_name+0x7a>
 800e166:	f1bc 0f0a 	cmp.w	ip, #10
 800e16a:	d906      	bls.n	800e17a <rmw_validate_full_topic_name+0x7a>
 800e16c:	2304      	movs	r3, #4
 800e16e:	602b      	str	r3, [r5, #0]
 800e170:	2e00      	cmp	r6, #0
 800e172:	d0df      	beq.n	800e134 <rmw_validate_full_topic_name+0x34>
 800e174:	6037      	str	r7, [r6, #0]
 800e176:	2000      	movs	r0, #0
 800e178:	e7d6      	b.n	800e128 <rmw_validate_full_topic_name+0x28>
 800e17a:	4543      	cmp	r3, r8
 800e17c:	d1e6      	bne.n	800e14c <rmw_validate_full_topic_name+0x4c>
 800e17e:	4f1a      	ldr	r7, [pc, #104]	; (800e1e8 <rmw_validate_full_topic_name+0xe8>)
 800e180:	2301      	movs	r3, #1
 800e182:	e004      	b.n	800e18e <rmw_validate_full_topic_name+0x8e>
 800e184:	4298      	cmp	r0, r3
 800e186:	f104 0401 	add.w	r4, r4, #1
 800e18a:	d91c      	bls.n	800e1c6 <rmw_validate_full_topic_name+0xc6>
 800e18c:	4613      	mov	r3, r2
 800e18e:	4298      	cmp	r0, r3
 800e190:	f103 0201 	add.w	r2, r3, #1
 800e194:	d0f6      	beq.n	800e184 <rmw_validate_full_topic_name+0x84>
 800e196:	7821      	ldrb	r1, [r4, #0]
 800e198:	292f      	cmp	r1, #47	; 0x2f
 800e19a:	d1f3      	bne.n	800e184 <rmw_validate_full_topic_name+0x84>
 800e19c:	7861      	ldrb	r1, [r4, #1]
 800e19e:	292f      	cmp	r1, #47	; 0x2f
 800e1a0:	d01c      	beq.n	800e1dc <rmw_validate_full_topic_name+0xdc>
 800e1a2:	5dc9      	ldrb	r1, [r1, r7]
 800e1a4:	0749      	lsls	r1, r1, #29
 800e1a6:	d5ed      	bpl.n	800e184 <rmw_validate_full_topic_name+0x84>
 800e1a8:	2206      	movs	r2, #6
 800e1aa:	602a      	str	r2, [r5, #0]
 800e1ac:	2e00      	cmp	r6, #0
 800e1ae:	d0c1      	beq.n	800e134 <rmw_validate_full_topic_name+0x34>
 800e1b0:	6033      	str	r3, [r6, #0]
 800e1b2:	e7bf      	b.n	800e134 <rmw_validate_full_topic_name+0x34>
 800e1b4:	200b      	movs	r0, #11
 800e1b6:	4770      	bx	lr
 800e1b8:	200b      	movs	r0, #11
 800e1ba:	e7b5      	b.n	800e128 <rmw_validate_full_topic_name+0x28>
 800e1bc:	2203      	movs	r2, #3
 800e1be:	602a      	str	r2, [r5, #0]
 800e1c0:	2e00      	cmp	r6, #0
 800e1c2:	d1f5      	bne.n	800e1b0 <rmw_validate_full_topic_name+0xb0>
 800e1c4:	e7b6      	b.n	800e134 <rmw_validate_full_topic_name+0x34>
 800e1c6:	28f7      	cmp	r0, #247	; 0xf7
 800e1c8:	d802      	bhi.n	800e1d0 <rmw_validate_full_topic_name+0xd0>
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	6028      	str	r0, [r5, #0]
 800e1ce:	e7ab      	b.n	800e128 <rmw_validate_full_topic_name+0x28>
 800e1d0:	2307      	movs	r3, #7
 800e1d2:	602b      	str	r3, [r5, #0]
 800e1d4:	2e00      	cmp	r6, #0
 800e1d6:	d0ad      	beq.n	800e134 <rmw_validate_full_topic_name+0x34>
 800e1d8:	23f6      	movs	r3, #246	; 0xf6
 800e1da:	e7e9      	b.n	800e1b0 <rmw_validate_full_topic_name+0xb0>
 800e1dc:	2205      	movs	r2, #5
 800e1de:	602a      	str	r2, [r5, #0]
 800e1e0:	2e00      	cmp	r6, #0
 800e1e2:	d1e5      	bne.n	800e1b0 <rmw_validate_full_topic_name+0xb0>
 800e1e4:	e7a6      	b.n	800e134 <rmw_validate_full_topic_name+0x34>
 800e1e6:	bf00      	nop
 800e1e8:	080135e0 	.word	0x080135e0

0800e1ec <rmw_validate_namespace_with_size>:
 800e1ec:	b340      	cbz	r0, 800e240 <rmw_validate_namespace_with_size+0x54>
 800e1ee:	b570      	push	{r4, r5, r6, lr}
 800e1f0:	4614      	mov	r4, r2
 800e1f2:	b0c2      	sub	sp, #264	; 0x108
 800e1f4:	b332      	cbz	r2, 800e244 <rmw_validate_namespace_with_size+0x58>
 800e1f6:	2901      	cmp	r1, #1
 800e1f8:	460d      	mov	r5, r1
 800e1fa:	461e      	mov	r6, r3
 800e1fc:	d102      	bne.n	800e204 <rmw_validate_namespace_with_size+0x18>
 800e1fe:	7803      	ldrb	r3, [r0, #0]
 800e200:	2b2f      	cmp	r3, #47	; 0x2f
 800e202:	d012      	beq.n	800e22a <rmw_validate_namespace_with_size+0x3e>
 800e204:	aa01      	add	r2, sp, #4
 800e206:	4669      	mov	r1, sp
 800e208:	f7ff ff7a 	bl	800e100 <rmw_validate_full_topic_name>
 800e20c:	b978      	cbnz	r0, 800e22e <rmw_validate_namespace_with_size+0x42>
 800e20e:	9b00      	ldr	r3, [sp, #0]
 800e210:	b14b      	cbz	r3, 800e226 <rmw_validate_namespace_with_size+0x3a>
 800e212:	2b07      	cmp	r3, #7
 800e214:	d007      	beq.n	800e226 <rmw_validate_namespace_with_size+0x3a>
 800e216:	1e5a      	subs	r2, r3, #1
 800e218:	2a05      	cmp	r2, #5
 800e21a:	d82b      	bhi.n	800e274 <rmw_validate_namespace_with_size+0x88>
 800e21c:	e8df f002 	tbb	[pc, r2]
 800e220:	1e212427 	.word	0x1e212427
 800e224:	141b      	.short	0x141b
 800e226:	2df5      	cmp	r5, #245	; 0xf5
 800e228:	d803      	bhi.n	800e232 <rmw_validate_namespace_with_size+0x46>
 800e22a:	2000      	movs	r0, #0
 800e22c:	6020      	str	r0, [r4, #0]
 800e22e:	b042      	add	sp, #264	; 0x108
 800e230:	bd70      	pop	{r4, r5, r6, pc}
 800e232:	2307      	movs	r3, #7
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	2e00      	cmp	r6, #0
 800e238:	d0f9      	beq.n	800e22e <rmw_validate_namespace_with_size+0x42>
 800e23a:	23f4      	movs	r3, #244	; 0xf4
 800e23c:	6033      	str	r3, [r6, #0]
 800e23e:	e7f6      	b.n	800e22e <rmw_validate_namespace_with_size+0x42>
 800e240:	200b      	movs	r0, #11
 800e242:	4770      	bx	lr
 800e244:	200b      	movs	r0, #11
 800e246:	e7f2      	b.n	800e22e <rmw_validate_namespace_with_size+0x42>
 800e248:	2306      	movs	r3, #6
 800e24a:	6023      	str	r3, [r4, #0]
 800e24c:	2e00      	cmp	r6, #0
 800e24e:	d0ee      	beq.n	800e22e <rmw_validate_namespace_with_size+0x42>
 800e250:	9b01      	ldr	r3, [sp, #4]
 800e252:	6033      	str	r3, [r6, #0]
 800e254:	e7eb      	b.n	800e22e <rmw_validate_namespace_with_size+0x42>
 800e256:	2305      	movs	r3, #5
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	e7f7      	b.n	800e24c <rmw_validate_namespace_with_size+0x60>
 800e25c:	2304      	movs	r3, #4
 800e25e:	6023      	str	r3, [r4, #0]
 800e260:	e7f4      	b.n	800e24c <rmw_validate_namespace_with_size+0x60>
 800e262:	2303      	movs	r3, #3
 800e264:	6023      	str	r3, [r4, #0]
 800e266:	e7f1      	b.n	800e24c <rmw_validate_namespace_with_size+0x60>
 800e268:	2302      	movs	r3, #2
 800e26a:	6023      	str	r3, [r4, #0]
 800e26c:	e7ee      	b.n	800e24c <rmw_validate_namespace_with_size+0x60>
 800e26e:	2301      	movs	r3, #1
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	e7eb      	b.n	800e24c <rmw_validate_namespace_with_size+0x60>
 800e274:	4a03      	ldr	r2, [pc, #12]	; (800e284 <rmw_validate_namespace_with_size+0x98>)
 800e276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e27a:	a802      	add	r0, sp, #8
 800e27c:	f7ff fd16 	bl	800dcac <rcutils_snprintf>
 800e280:	2001      	movs	r0, #1
 800e282:	e7d4      	b.n	800e22e <rmw_validate_namespace_with_size+0x42>
 800e284:	08012fe8 	.word	0x08012fe8

0800e288 <rmw_validate_namespace>:
 800e288:	b168      	cbz	r0, 800e2a6 <rmw_validate_namespace+0x1e>
 800e28a:	b570      	push	{r4, r5, r6, lr}
 800e28c:	460d      	mov	r5, r1
 800e28e:	4616      	mov	r6, r2
 800e290:	4604      	mov	r4, r0
 800e292:	f7f1 ffa7 	bl	80001e4 <strlen>
 800e296:	4633      	mov	r3, r6
 800e298:	4601      	mov	r1, r0
 800e29a:	462a      	mov	r2, r5
 800e29c:	4620      	mov	r0, r4
 800e29e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2a2:	f7ff bfa3 	b.w	800e1ec <rmw_validate_namespace_with_size>
 800e2a6:	200b      	movs	r0, #11
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop

0800e2ac <rmw_namespace_validation_result_string>:
 800e2ac:	2807      	cmp	r0, #7
 800e2ae:	bf9a      	itte	ls
 800e2b0:	4b02      	ldrls	r3, [pc, #8]	; (800e2bc <rmw_namespace_validation_result_string+0x10>)
 800e2b2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e2b6:	4802      	ldrhi	r0, [pc, #8]	; (800e2c0 <rmw_namespace_validation_result_string+0x14>)
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	080131e0 	.word	0x080131e0
 800e2c0:	08013038 	.word	0x08013038

0800e2c4 <rmw_validate_node_name>:
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d03b      	beq.n	800e340 <rmw_validate_node_name+0x7c>
 800e2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2cc:	460d      	mov	r5, r1
 800e2ce:	2900      	cmp	r1, #0
 800e2d0:	d038      	beq.n	800e344 <rmw_validate_node_name+0x80>
 800e2d2:	4616      	mov	r6, r2
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	f7f1 ff85 	bl	80001e4 <strlen>
 800e2da:	b1e0      	cbz	r0, 800e316 <rmw_validate_node_name+0x52>
 800e2dc:	1e63      	subs	r3, r4, #1
 800e2de:	eb03 0800 	add.w	r8, r3, r0
 800e2e2:	f1c4 0101 	rsb	r1, r4, #1
 800e2e6:	18cf      	adds	r7, r1, r3
 800e2e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e2ec:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800e2f0:	f02e 0c20 	bic.w	ip, lr, #32
 800e2f4:	2a09      	cmp	r2, #9
 800e2f6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800e2fa:	d914      	bls.n	800e326 <rmw_validate_node_name+0x62>
 800e2fc:	f1bc 0f19 	cmp.w	ip, #25
 800e300:	d911      	bls.n	800e326 <rmw_validate_node_name+0x62>
 800e302:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800e306:	d00e      	beq.n	800e326 <rmw_validate_node_name+0x62>
 800e308:	2302      	movs	r3, #2
 800e30a:	602b      	str	r3, [r5, #0]
 800e30c:	b106      	cbz	r6, 800e310 <rmw_validate_node_name+0x4c>
 800e30e:	6037      	str	r7, [r6, #0]
 800e310:	2000      	movs	r0, #0
 800e312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e316:	2301      	movs	r3, #1
 800e318:	602b      	str	r3, [r5, #0]
 800e31a:	2e00      	cmp	r6, #0
 800e31c:	d0f8      	beq.n	800e310 <rmw_validate_node_name+0x4c>
 800e31e:	2000      	movs	r0, #0
 800e320:	6030      	str	r0, [r6, #0]
 800e322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e326:	4543      	cmp	r3, r8
 800e328:	d1dd      	bne.n	800e2e6 <rmw_validate_node_name+0x22>
 800e32a:	7822      	ldrb	r2, [r4, #0]
 800e32c:	4b0d      	ldr	r3, [pc, #52]	; (800e364 <rmw_validate_node_name+0xa0>)
 800e32e:	5cd3      	ldrb	r3, [r2, r3]
 800e330:	f013 0304 	ands.w	r3, r3, #4
 800e334:	d110      	bne.n	800e358 <rmw_validate_node_name+0x94>
 800e336:	28ff      	cmp	r0, #255	; 0xff
 800e338:	d806      	bhi.n	800e348 <rmw_validate_node_name+0x84>
 800e33a:	602b      	str	r3, [r5, #0]
 800e33c:	4618      	mov	r0, r3
 800e33e:	e7e8      	b.n	800e312 <rmw_validate_node_name+0x4e>
 800e340:	200b      	movs	r0, #11
 800e342:	4770      	bx	lr
 800e344:	200b      	movs	r0, #11
 800e346:	e7e4      	b.n	800e312 <rmw_validate_node_name+0x4e>
 800e348:	2204      	movs	r2, #4
 800e34a:	602a      	str	r2, [r5, #0]
 800e34c:	2e00      	cmp	r6, #0
 800e34e:	d0df      	beq.n	800e310 <rmw_validate_node_name+0x4c>
 800e350:	22fe      	movs	r2, #254	; 0xfe
 800e352:	6032      	str	r2, [r6, #0]
 800e354:	4618      	mov	r0, r3
 800e356:	e7dc      	b.n	800e312 <rmw_validate_node_name+0x4e>
 800e358:	2303      	movs	r3, #3
 800e35a:	602b      	str	r3, [r5, #0]
 800e35c:	2e00      	cmp	r6, #0
 800e35e:	d1de      	bne.n	800e31e <rmw_validate_node_name+0x5a>
 800e360:	e7d6      	b.n	800e310 <rmw_validate_node_name+0x4c>
 800e362:	bf00      	nop
 800e364:	080135e0 	.word	0x080135e0

0800e368 <rmw_node_name_validation_result_string>:
 800e368:	2804      	cmp	r0, #4
 800e36a:	bf9a      	itte	ls
 800e36c:	4b02      	ldrls	r3, [pc, #8]	; (800e378 <rmw_node_name_validation_result_string+0x10>)
 800e36e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e372:	4802      	ldrhi	r0, [pc, #8]	; (800e37c <rmw_node_name_validation_result_string+0x14>)
 800e374:	4770      	bx	lr
 800e376:	bf00      	nop
 800e378:	080132ec 	.word	0x080132ec
 800e37c:	08013200 	.word	0x08013200

0800e380 <get_memory>:
 800e380:	4603      	mov	r3, r0
 800e382:	6840      	ldr	r0, [r0, #4]
 800e384:	b158      	cbz	r0, 800e39e <get_memory+0x1e>
 800e386:	6842      	ldr	r2, [r0, #4]
 800e388:	605a      	str	r2, [r3, #4]
 800e38a:	b10a      	cbz	r2, 800e390 <get_memory+0x10>
 800e38c:	2100      	movs	r1, #0
 800e38e:	6011      	str	r1, [r2, #0]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	6042      	str	r2, [r0, #4]
 800e394:	b102      	cbz	r2, 800e398 <get_memory+0x18>
 800e396:	6010      	str	r0, [r2, #0]
 800e398:	2200      	movs	r2, #0
 800e39a:	6002      	str	r2, [r0, #0]
 800e39c:	6018      	str	r0, [r3, #0]
 800e39e:	4770      	bx	lr

0800e3a0 <put_memory>:
 800e3a0:	680b      	ldr	r3, [r1, #0]
 800e3a2:	b10b      	cbz	r3, 800e3a8 <put_memory+0x8>
 800e3a4:	684a      	ldr	r2, [r1, #4]
 800e3a6:	605a      	str	r2, [r3, #4]
 800e3a8:	684a      	ldr	r2, [r1, #4]
 800e3aa:	b102      	cbz	r2, 800e3ae <put_memory+0xe>
 800e3ac:	6013      	str	r3, [r2, #0]
 800e3ae:	6803      	ldr	r3, [r0, #0]
 800e3b0:	428b      	cmp	r3, r1
 800e3b2:	6843      	ldr	r3, [r0, #4]
 800e3b4:	bf08      	it	eq
 800e3b6:	6002      	streq	r2, [r0, #0]
 800e3b8:	604b      	str	r3, [r1, #4]
 800e3ba:	b103      	cbz	r3, 800e3be <put_memory+0x1e>
 800e3bc:	6019      	str	r1, [r3, #0]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	600b      	str	r3, [r1, #0]
 800e3c2:	6041      	str	r1, [r0, #4]
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop

0800e3c8 <rmw_get_implementation_identifier>:
 800e3c8:	4b01      	ldr	r3, [pc, #4]	; (800e3d0 <rmw_get_implementation_identifier+0x8>)
 800e3ca:	6818      	ldr	r0, [r3, #0]
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	08013318 	.word	0x08013318

0800e3d4 <rmw_init_options_init>:
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3d8:	b083      	sub	sp, #12
 800e3da:	ad09      	add	r5, sp, #36	; 0x24
 800e3dc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e3e0:	b130      	cbz	r0, 800e3f0 <rmw_init_options_init+0x1c>
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f7f9 ffbf 	bl	8008368 <rcutils_allocator_is_valid>
 800e3ea:	b108      	cbz	r0, 800e3f0 <rmw_init_options_init+0x1c>
 800e3ec:	68a6      	ldr	r6, [r4, #8]
 800e3ee:	b12e      	cbz	r6, 800e3fc <rmw_init_options_init+0x28>
 800e3f0:	200b      	movs	r0, #11
 800e3f2:	b003      	add	sp, #12
 800e3f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e3f8:	b004      	add	sp, #16
 800e3fa:	4770      	bx	lr
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2300      	movs	r3, #0
 800e400:	e9c4 2300 	strd	r2, r3, [r4]
 800e404:	4b22      	ldr	r3, [pc, #136]	; (800e490 <rmw_init_options_init+0xbc>)
 800e406:	f8df e098 	ldr.w	lr, [pc, #152]	; 800e4a0 <rmw_init_options_init+0xcc>
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	60a3      	str	r3, [r4, #8]
 800e40e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e410:	f104 0c20 	add.w	ip, r4, #32
 800e414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e418:	466f      	mov	r7, sp
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	f8cc 3000 	str.w	r3, [ip]
 800e420:	4638      	mov	r0, r7
 800e422:	f8c4 e01c 	str.w	lr, [r4, #28]
 800e426:	60e6      	str	r6, [r4, #12]
 800e428:	f7ff fe46 	bl	800e0b8 <rmw_get_default_security_options>
 800e42c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e430:	f104 0310 	add.w	r3, r4, #16
 800e434:	e883 0003 	stmia.w	r3, {r0, r1}
 800e438:	2203      	movs	r2, #3
 800e43a:	4816      	ldr	r0, [pc, #88]	; (800e494 <rmw_init_options_init+0xc0>)
 800e43c:	4916      	ldr	r1, [pc, #88]	; (800e498 <rmw_init_options_init+0xc4>)
 800e43e:	7626      	strb	r6, [r4, #24]
 800e440:	f7fa fa90 	bl	8008964 <rmw_uxrce_init_init_options_impl_memory>
 800e444:	4813      	ldr	r0, [pc, #76]	; (800e494 <rmw_init_options_init+0xc0>)
 800e446:	f7ff ff9b 	bl	800e380 <get_memory>
 800e44a:	b1f0      	cbz	r0, 800e48a <rmw_init_options_init+0xb6>
 800e44c:	4a13      	ldr	r2, [pc, #76]	; (800e49c <rmw_init_options_init+0xc8>)
 800e44e:	6883      	ldr	r3, [r0, #8]
 800e450:	6851      	ldr	r1, [r2, #4]
 800e452:	7810      	ldrb	r0, [r2, #0]
 800e454:	6363      	str	r3, [r4, #52]	; 0x34
 800e456:	7418      	strb	r0, [r3, #16]
 800e458:	6159      	str	r1, [r3, #20]
 800e45a:	68d1      	ldr	r1, [r2, #12]
 800e45c:	61d9      	str	r1, [r3, #28]
 800e45e:	6911      	ldr	r1, [r2, #16]
 800e460:	6219      	str	r1, [r3, #32]
 800e462:	6951      	ldr	r1, [r2, #20]
 800e464:	6892      	ldr	r2, [r2, #8]
 800e466:	619a      	str	r2, [r3, #24]
 800e468:	6259      	str	r1, [r3, #36]	; 0x24
 800e46a:	f7fd f90b 	bl	800b684 <uxr_nanos>
 800e46e:	f003 f8c3 	bl	80115f8 <srand>
 800e472:	f003 f8ef 	bl	8011654 <rand>
 800e476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e478:	6298      	str	r0, [r3, #40]	; 0x28
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d0f9      	beq.n	800e472 <rmw_init_options_init+0x9e>
 800e47e:	2000      	movs	r0, #0
 800e480:	b003      	add	sp, #12
 800e482:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e486:	b004      	add	sp, #16
 800e488:	4770      	bx	lr
 800e48a:	2001      	movs	r0, #1
 800e48c:	e7b1      	b.n	800e3f2 <rmw_init_options_init+0x1e>
 800e48e:	bf00      	nop
 800e490:	08013318 	.word	0x08013318
 800e494:	2000da6c 	.word	0x2000da6c
 800e498:	20009308 	.word	0x20009308
 800e49c:	20009194 	.word	0x20009194
 800e4a0:	08012e64 	.word	0x08012e64

0800e4a4 <rmw_init_options_copy>:
 800e4a4:	b570      	push	{r4, r5, r6, lr}
 800e4a6:	b158      	cbz	r0, 800e4c0 <rmw_init_options_copy+0x1c>
 800e4a8:	460d      	mov	r5, r1
 800e4aa:	b149      	cbz	r1, 800e4c0 <rmw_init_options_copy+0x1c>
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	6880      	ldr	r0, [r0, #8]
 800e4b0:	b120      	cbz	r0, 800e4bc <rmw_init_options_copy+0x18>
 800e4b2:	4b1e      	ldr	r3, [pc, #120]	; (800e52c <rmw_init_options_copy+0x88>)
 800e4b4:	6819      	ldr	r1, [r3, #0]
 800e4b6:	f7f1 fe8b 	bl	80001d0 <strcmp>
 800e4ba:	bb90      	cbnz	r0, 800e522 <rmw_init_options_copy+0x7e>
 800e4bc:	68ab      	ldr	r3, [r5, #8]
 800e4be:	b113      	cbz	r3, 800e4c6 <rmw_init_options_copy+0x22>
 800e4c0:	250b      	movs	r5, #11
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	bd70      	pop	{r4, r5, r6, pc}
 800e4c6:	4623      	mov	r3, r4
 800e4c8:	462a      	mov	r2, r5
 800e4ca:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e4ce:	f8d3 c000 	ldr.w	ip, [r3]
 800e4d2:	6858      	ldr	r0, [r3, #4]
 800e4d4:	6899      	ldr	r1, [r3, #8]
 800e4d6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e4da:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e4de:	3310      	adds	r3, #16
 800e4e0:	42b3      	cmp	r3, r6
 800e4e2:	f8c2 c000 	str.w	ip, [r2]
 800e4e6:	6050      	str	r0, [r2, #4]
 800e4e8:	6091      	str	r1, [r2, #8]
 800e4ea:	f102 0210 	add.w	r2, r2, #16
 800e4ee:	d1ee      	bne.n	800e4ce <rmw_init_options_copy+0x2a>
 800e4f0:	6819      	ldr	r1, [r3, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	480e      	ldr	r0, [pc, #56]	; (800e530 <rmw_init_options_copy+0x8c>)
 800e4f6:	6053      	str	r3, [r2, #4]
 800e4f8:	6011      	str	r1, [r2, #0]
 800e4fa:	f7ff ff41 	bl	800e380 <get_memory>
 800e4fe:	b198      	cbz	r0, 800e528 <rmw_init_options_copy+0x84>
 800e500:	6883      	ldr	r3, [r0, #8]
 800e502:	636b      	str	r3, [r5, #52]	; 0x34
 800e504:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e506:	f102 0c10 	add.w	ip, r2, #16
 800e50a:	f103 0410 	add.w	r4, r3, #16
 800e50e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e514:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e518:	2500      	movs	r5, #0
 800e51a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e51e:	4628      	mov	r0, r5
 800e520:	bd70      	pop	{r4, r5, r6, pc}
 800e522:	250c      	movs	r5, #12
 800e524:	4628      	mov	r0, r5
 800e526:	bd70      	pop	{r4, r5, r6, pc}
 800e528:	2501      	movs	r5, #1
 800e52a:	e7ca      	b.n	800e4c2 <rmw_init_options_copy+0x1e>
 800e52c:	08013318 	.word	0x08013318
 800e530:	2000da6c 	.word	0x2000da6c

0800e534 <rmw_init_options_fini>:
 800e534:	2800      	cmp	r0, #0
 800e536:	d03d      	beq.n	800e5b4 <rmw_init_options_fini+0x80>
 800e538:	b510      	push	{r4, lr}
 800e53a:	4604      	mov	r4, r0
 800e53c:	b08e      	sub	sp, #56	; 0x38
 800e53e:	3020      	adds	r0, #32
 800e540:	f7f9 ff12 	bl	8008368 <rcutils_allocator_is_valid>
 800e544:	b360      	cbz	r0, 800e5a0 <rmw_init_options_fini+0x6c>
 800e546:	68a0      	ldr	r0, [r4, #8]
 800e548:	b120      	cbz	r0, 800e554 <rmw_init_options_fini+0x20>
 800e54a:	4b1c      	ldr	r3, [pc, #112]	; (800e5bc <rmw_init_options_fini+0x88>)
 800e54c:	6819      	ldr	r1, [r3, #0]
 800e54e:	f7f1 fe3f 	bl	80001d0 <strcmp>
 800e552:	bb68      	cbnz	r0, 800e5b0 <rmw_init_options_fini+0x7c>
 800e554:	4b1a      	ldr	r3, [pc, #104]	; (800e5c0 <rmw_init_options_fini+0x8c>)
 800e556:	6819      	ldr	r1, [r3, #0]
 800e558:	b331      	cbz	r1, 800e5a8 <rmw_init_options_fini+0x74>
 800e55a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e55c:	e001      	b.n	800e562 <rmw_init_options_fini+0x2e>
 800e55e:	6849      	ldr	r1, [r1, #4]
 800e560:	b311      	cbz	r1, 800e5a8 <rmw_init_options_fini+0x74>
 800e562:	688b      	ldr	r3, [r1, #8]
 800e564:	429a      	cmp	r2, r3
 800e566:	d1fa      	bne.n	800e55e <rmw_init_options_fini+0x2a>
 800e568:	4815      	ldr	r0, [pc, #84]	; (800e5c0 <rmw_init_options_fini+0x8c>)
 800e56a:	f7ff ff19 	bl	800e3a0 <put_memory>
 800e56e:	4668      	mov	r0, sp
 800e570:	f7ff fd92 	bl	800e098 <rmw_get_zero_initialized_init_options>
 800e574:	46ee      	mov	lr, sp
 800e576:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e57a:	46a4      	mov	ip, r4
 800e57c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e580:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e58c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e590:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e594:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e598:	2300      	movs	r3, #0
 800e59a:	4618      	mov	r0, r3
 800e59c:	b00e      	add	sp, #56	; 0x38
 800e59e:	bd10      	pop	{r4, pc}
 800e5a0:	230b      	movs	r3, #11
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	b00e      	add	sp, #56	; 0x38
 800e5a6:	bd10      	pop	{r4, pc}
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	b00e      	add	sp, #56	; 0x38
 800e5ae:	bd10      	pop	{r4, pc}
 800e5b0:	230c      	movs	r3, #12
 800e5b2:	e7f2      	b.n	800e59a <rmw_init_options_fini+0x66>
 800e5b4:	230b      	movs	r3, #11
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop
 800e5bc:	08013318 	.word	0x08013318
 800e5c0:	2000da6c 	.word	0x2000da6c

0800e5c4 <rmw_init>:
 800e5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5c8:	b083      	sub	sp, #12
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	f000 80d3 	beq.w	800e776 <rmw_init+0x1b2>
 800e5d0:	460e      	mov	r6, r1
 800e5d2:	2900      	cmp	r1, #0
 800e5d4:	f000 80cf 	beq.w	800e776 <rmw_init+0x1b2>
 800e5d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5da:	4605      	mov	r5, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 80ca 	beq.w	800e776 <rmw_init+0x1b2>
 800e5e2:	4b78      	ldr	r3, [pc, #480]	; (800e7c4 <rmw_init+0x200>)
 800e5e4:	6880      	ldr	r0, [r0, #8]
 800e5e6:	681f      	ldr	r7, [r3, #0]
 800e5e8:	b128      	cbz	r0, 800e5f6 <rmw_init+0x32>
 800e5ea:	4639      	mov	r1, r7
 800e5ec:	f7f1 fdf0 	bl	80001d0 <strcmp>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	f040 80ca 	bne.w	800e78a <rmw_init+0x1c6>
 800e5f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5fa:	4c73      	ldr	r4, [pc, #460]	; (800e7c8 <rmw_init+0x204>)
 800e5fc:	4973      	ldr	r1, [pc, #460]	; (800e7cc <rmw_init+0x208>)
 800e5fe:	4874      	ldr	r0, [pc, #464]	; (800e7d0 <rmw_init+0x20c>)
 800e600:	60b7      	str	r7, [r6, #8]
 800e602:	e9c6 2300 	strd	r2, r3, [r6]
 800e606:	68eb      	ldr	r3, [r5, #12]
 800e608:	64b3      	str	r3, [r6, #72]	; 0x48
 800e60a:	2201      	movs	r2, #1
 800e60c:	f7fa f94a 	bl	80088a4 <rmw_uxrce_init_session_memory>
 800e610:	4620      	mov	r0, r4
 800e612:	4970      	ldr	r1, [pc, #448]	; (800e7d4 <rmw_init+0x210>)
 800e614:	2204      	movs	r2, #4
 800e616:	f7fa f985 	bl	8008924 <rmw_uxrce_init_static_input_buffer_memory>
 800e61a:	f04f 0800 	mov.w	r8, #0
 800e61e:	486c      	ldr	r0, [pc, #432]	; (800e7d0 <rmw_init+0x20c>)
 800e620:	f884 800d 	strb.w	r8, [r4, #13]
 800e624:	f7ff feac 	bl	800e380 <get_memory>
 800e628:	2800      	cmp	r0, #0
 800e62a:	f000 80a9 	beq.w	800e780 <rmw_init+0x1bc>
 800e62e:	6884      	ldr	r4, [r0, #8]
 800e630:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800e632:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e634:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e638:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e63c:	9101      	str	r1, [sp, #4]
 800e63e:	6a00      	ldr	r0, [r0, #32]
 800e640:	9000      	str	r0, [sp, #0]
 800e642:	f104 0910 	add.w	r9, r4, #16
 800e646:	4661      	mov	r1, ip
 800e648:	4648      	mov	r0, r9
 800e64a:	f000 feb1 	bl	800f3b0 <uxr_set_custom_transport_callbacks>
 800e64e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800e652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e656:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800e65a:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800e65e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800e662:	495d      	ldr	r1, [pc, #372]	; (800e7d8 <rmw_init+0x214>)
 800e664:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800e668:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800e66c:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800e670:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800e674:	4859      	ldr	r0, [pc, #356]	; (800e7dc <rmw_init+0x218>)
 800e676:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800e67a:	2201      	movs	r2, #1
 800e67c:	64f4      	str	r4, [r6, #76]	; 0x4c
 800e67e:	f7fa f8f1 	bl	8008864 <rmw_uxrce_init_node_memory>
 800e682:	4957      	ldr	r1, [pc, #348]	; (800e7e0 <rmw_init+0x21c>)
 800e684:	4857      	ldr	r0, [pc, #348]	; (800e7e4 <rmw_init+0x220>)
 800e686:	2205      	movs	r2, #5
 800e688:	f7fa f8cc 	bl	8008824 <rmw_uxrce_init_subscription_memory>
 800e68c:	4956      	ldr	r1, [pc, #344]	; (800e7e8 <rmw_init+0x224>)
 800e68e:	4857      	ldr	r0, [pc, #348]	; (800e7ec <rmw_init+0x228>)
 800e690:	220a      	movs	r2, #10
 800e692:	f7fa f8a7 	bl	80087e4 <rmw_uxrce_init_publisher_memory>
 800e696:	4956      	ldr	r1, [pc, #344]	; (800e7f0 <rmw_init+0x22c>)
 800e698:	4856      	ldr	r0, [pc, #344]	; (800e7f4 <rmw_init+0x230>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	f7fa f862 	bl	8008764 <rmw_uxrce_init_service_memory>
 800e6a0:	4955      	ldr	r1, [pc, #340]	; (800e7f8 <rmw_init+0x234>)
 800e6a2:	4856      	ldr	r0, [pc, #344]	; (800e7fc <rmw_init+0x238>)
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f7fa f87d 	bl	80087a4 <rmw_uxrce_init_client_memory>
 800e6aa:	4955      	ldr	r1, [pc, #340]	; (800e800 <rmw_init+0x23c>)
 800e6ac:	4855      	ldr	r0, [pc, #340]	; (800e804 <rmw_init+0x240>)
 800e6ae:	220f      	movs	r2, #15
 800e6b0:	f7fa f918 	bl	80088e4 <rmw_uxrce_init_topic_memory>
 800e6b4:	4954      	ldr	r1, [pc, #336]	; (800e808 <rmw_init+0x244>)
 800e6b6:	4855      	ldr	r0, [pc, #340]	; (800e80c <rmw_init+0x248>)
 800e6b8:	2203      	movs	r2, #3
 800e6ba:	f7fa f953 	bl	8008964 <rmw_uxrce_init_init_options_impl_memory>
 800e6be:	4954      	ldr	r1, [pc, #336]	; (800e810 <rmw_init+0x24c>)
 800e6c0:	4854      	ldr	r0, [pc, #336]	; (800e814 <rmw_init+0x250>)
 800e6c2:	2204      	movs	r2, #4
 800e6c4:	f7fa f96e 	bl	80089a4 <rmw_uxrce_init_wait_set_memory>
 800e6c8:	4953      	ldr	r1, [pc, #332]	; (800e818 <rmw_init+0x254>)
 800e6ca:	4854      	ldr	r0, [pc, #336]	; (800e81c <rmw_init+0x258>)
 800e6cc:	2204      	movs	r2, #4
 800e6ce:	f7fa f989 	bl	80089e4 <rmw_uxrce_init_guard_condition_memory>
 800e6d2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800e6d4:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800e6d6:	4642      	mov	r2, r8
 800e6d8:	f000 fbf8 	bl	800eecc <rmw_uxrce_transport_init>
 800e6dc:	4607      	mov	r7, r0
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d158      	bne.n	800e794 <rmw_init+0x1d0>
 800e6e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e6e4:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800e6e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6ea:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f7fb fe66 	bl	800a3c0 <uxr_init_session>
 800e6f4:	494a      	ldr	r1, [pc, #296]	; (800e820 <rmw_init+0x25c>)
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f7fb fe85 	bl	800a408 <uxr_set_topic_callback>
 800e6fe:	4949      	ldr	r1, [pc, #292]	; (800e824 <rmw_init+0x260>)
 800e700:	463a      	mov	r2, r7
 800e702:	4628      	mov	r0, r5
 800e704:	f7fb fe7c 	bl	800a400 <uxr_set_status_callback>
 800e708:	4947      	ldr	r1, [pc, #284]	; (800e828 <rmw_init+0x264>)
 800e70a:	463a      	mov	r2, r7
 800e70c:	4628      	mov	r0, r5
 800e70e:	f7fb fe7f 	bl	800a410 <uxr_set_request_callback>
 800e712:	4946      	ldr	r1, [pc, #280]	; (800e82c <rmw_init+0x268>)
 800e714:	463a      	mov	r2, r7
 800e716:	4628      	mov	r0, r5
 800e718:	f7fb fe7e 	bl	800a418 <uxr_set_reply_callback>
 800e71c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e720:	2304      	movs	r3, #4
 800e722:	0092      	lsls	r2, r2, #2
 800e724:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800e728:	4628      	mov	r0, r5
 800e72a:	f7fb feb3 	bl	800a494 <uxr_create_input_reliable_stream>
 800e72e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e732:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800e736:	0092      	lsls	r2, r2, #2
 800e738:	2304      	movs	r3, #4
 800e73a:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800e73e:	4628      	mov	r0, r5
 800e740:	f7fb fe80 	bl	800a444 <uxr_create_output_reliable_stream>
 800e744:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800e748:	4628      	mov	r0, r5
 800e74a:	f7fb fe9d 	bl	800a488 <uxr_create_input_best_effort_stream>
 800e74e:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800e752:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800e756:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e75a:	3114      	adds	r1, #20
 800e75c:	4628      	mov	r0, r5
 800e75e:	f7fb fe5f 	bl	800a420 <uxr_create_output_best_effort_stream>
 800e762:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800e766:	4628      	mov	r0, r5
 800e768:	f7fc fbb0 	bl	800aecc <uxr_create_session>
 800e76c:	b1f8      	cbz	r0, 800e7ae <rmw_init+0x1ea>
 800e76e:	4638      	mov	r0, r7
 800e770:	b003      	add	sp, #12
 800e772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e776:	270b      	movs	r7, #11
 800e778:	4638      	mov	r0, r7
 800e77a:	b003      	add	sp, #12
 800e77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e780:	2701      	movs	r7, #1
 800e782:	4638      	mov	r0, r7
 800e784:	b003      	add	sp, #12
 800e786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e78a:	270c      	movs	r7, #12
 800e78c:	4638      	mov	r0, r7
 800e78e:	b003      	add	sp, #12
 800e790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e794:	4648      	mov	r0, r9
 800e796:	f000 fe4d 	bl	800f434 <uxr_close_custom_transport>
 800e79a:	480d      	ldr	r0, [pc, #52]	; (800e7d0 <rmw_init+0x20c>)
 800e79c:	4621      	mov	r1, r4
 800e79e:	f7ff fdff 	bl	800e3a0 <put_memory>
 800e7a2:	4638      	mov	r0, r7
 800e7a4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800e7a8:	b003      	add	sp, #12
 800e7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7ae:	4648      	mov	r0, r9
 800e7b0:	f000 fe40 	bl	800f434 <uxr_close_custom_transport>
 800e7b4:	4806      	ldr	r0, [pc, #24]	; (800e7d0 <rmw_init+0x20c>)
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	f7ff fdf2 	bl	800e3a0 <put_memory>
 800e7bc:	64f7      	str	r7, [r6, #76]	; 0x4c
 800e7be:	2701      	movs	r7, #1
 800e7c0:	e7d5      	b.n	800e76e <rmw_init+0x1aa>
 800e7c2:	bf00      	nop
 800e7c4:	08013318 	.word	0x08013318
 800e7c8:	2000dabc 	.word	0x2000dabc
 800e7cc:	20009d68 	.word	0x20009d68
 800e7d0:	2000daac 	.word	0x2000daac
 800e7d4:	2000b310 	.word	0x2000b310
 800e7d8:	2000938c 	.word	0x2000938c
 800e7dc:	2000da7c 	.word	0x2000da7c
 800e7e0:	2000d410 	.word	0x2000d410
 800e7e4:	2000dacc 	.word	0x2000dacc
 800e7e8:	20009430 	.word	0x20009430
 800e7ec:	2000da8c 	.word	0x2000da8c
 800e7f0:	20009ca0 	.word	0x20009ca0
 800e7f4:	2000da9c 	.word	0x2000da9c
 800e7f8:	200091c0 	.word	0x200091c0
 800e7fc:	200091b0 	.word	0x200091b0
 800e800:	2000d848 	.word	0x2000d848
 800e804:	2000dadc 	.word	0x2000dadc
 800e808:	20009308 	.word	0x20009308
 800e80c:	2000da6c 	.word	0x2000da6c
 800e810:	2000d9ec 	.word	0x2000d9ec
 800e814:	2000daec 	.word	0x2000daec
 800e818:	20009288 	.word	0x20009288
 800e81c:	2000da5c 	.word	0x2000da5c
 800e820:	08011115 	.word	0x08011115
 800e824:	0801110d 	.word	0x0801110d
 800e828:	080111ad 	.word	0x080111ad
 800e82c:	08011249 	.word	0x08011249

0800e830 <rmw_context_fini>:
 800e830:	4b17      	ldr	r3, [pc, #92]	; (800e890 <rmw_context_fini+0x60>)
 800e832:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e834:	b570      	push	{r4, r5, r6, lr}
 800e836:	681c      	ldr	r4, [r3, #0]
 800e838:	4605      	mov	r5, r0
 800e83a:	b334      	cbz	r4, 800e88a <rmw_context_fini+0x5a>
 800e83c:	2600      	movs	r6, #0
 800e83e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e842:	6902      	ldr	r2, [r0, #16]
 800e844:	428a      	cmp	r2, r1
 800e846:	d018      	beq.n	800e87a <rmw_context_fini+0x4a>
 800e848:	2c00      	cmp	r4, #0
 800e84a:	d1f8      	bne.n	800e83e <rmw_context_fini+0xe>
 800e84c:	b189      	cbz	r1, 800e872 <rmw_context_fini+0x42>
 800e84e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800e852:	789b      	ldrb	r3, [r3, #2]
 800e854:	2b01      	cmp	r3, #1
 800e856:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800e85a:	bf14      	ite	ne
 800e85c:	210a      	movne	r1, #10
 800e85e:	2100      	moveq	r1, #0
 800e860:	f7fc fb0c 	bl	800ae7c <uxr_delete_session_retries>
 800e864:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800e866:	f7fa f8dd 	bl	8008a24 <rmw_uxrce_fini_session_memory>
 800e86a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800e86c:	3010      	adds	r0, #16
 800e86e:	f000 fde1 	bl	800f434 <uxr_close_custom_transport>
 800e872:	2300      	movs	r3, #0
 800e874:	64eb      	str	r3, [r5, #76]	; 0x4c
 800e876:	4630      	mov	r0, r6
 800e878:	bd70      	pop	{r4, r5, r6, pc}
 800e87a:	3018      	adds	r0, #24
 800e87c:	f000 f90e 	bl	800ea9c <rmw_destroy_node>
 800e880:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800e882:	4606      	mov	r6, r0
 800e884:	2c00      	cmp	r4, #0
 800e886:	d1da      	bne.n	800e83e <rmw_context_fini+0xe>
 800e888:	e7e0      	b.n	800e84c <rmw_context_fini+0x1c>
 800e88a:	4626      	mov	r6, r4
 800e88c:	e7de      	b.n	800e84c <rmw_context_fini+0x1c>
 800e88e:	bf00      	nop
 800e890:	2000da7c 	.word	0x2000da7c

0800e894 <create_topic>:
 800e894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e898:	4605      	mov	r5, r0
 800e89a:	b084      	sub	sp, #16
 800e89c:	4822      	ldr	r0, [pc, #136]	; (800e928 <create_topic+0x94>)
 800e89e:	460f      	mov	r7, r1
 800e8a0:	4616      	mov	r6, r2
 800e8a2:	f7ff fd6d 	bl	800e380 <get_memory>
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d039      	beq.n	800e920 <create_topic+0x8c>
 800e8ac:	692b      	ldr	r3, [r5, #16]
 800e8ae:	6884      	ldr	r4, [r0, #8]
 800e8b0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e930 <create_topic+0x9c>
 800e8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8b8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800e8bc:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800e8c0:	1c42      	adds	r2, r0, #1
 800e8c2:	2102      	movs	r1, #2
 800e8c4:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800e8c8:	f7fb fcbc 	bl	800a244 <uxr_object_id>
 800e8cc:	223c      	movs	r2, #60	; 0x3c
 800e8ce:	6120      	str	r0, [r4, #16]
 800e8d0:	4641      	mov	r1, r8
 800e8d2:	4638      	mov	r0, r7
 800e8d4:	f7fa f9de 	bl	8008c94 <generate_topic_name>
 800e8d8:	b1f0      	cbz	r0, 800e918 <create_topic+0x84>
 800e8da:	4f14      	ldr	r7, [pc, #80]	; (800e92c <create_topic+0x98>)
 800e8dc:	4630      	mov	r0, r6
 800e8de:	2264      	movs	r2, #100	; 0x64
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	f7fa f9a7 	bl	8008c34 <generate_type_name>
 800e8e6:	b1b8      	cbz	r0, 800e918 <create_topic+0x84>
 800e8e8:	6928      	ldr	r0, [r5, #16]
 800e8ea:	2306      	movs	r3, #6
 800e8ec:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e8f0:	f8cd 8000 	str.w	r8, [sp]
 800e8f4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800e8f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e8fc:	6811      	ldr	r1, [r2, #0]
 800e8fe:	696b      	ldr	r3, [r5, #20]
 800e900:	6922      	ldr	r2, [r4, #16]
 800e902:	f7fb fb1b 	bl	8009f3c <uxr_buffer_create_topic_bin>
 800e906:	4602      	mov	r2, r0
 800e908:	6928      	ldr	r0, [r5, #16]
 800e90a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e90e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e912:	f7fa f959 	bl	8008bc8 <run_xrce_session>
 800e916:	b918      	cbnz	r0, 800e920 <create_topic+0x8c>
 800e918:	4620      	mov	r0, r4
 800e91a:	f7fa f8f9 	bl	8008b10 <rmw_uxrce_fini_topic_memory>
 800e91e:	2400      	movs	r4, #0
 800e920:	4620      	mov	r0, r4
 800e922:	b004      	add	sp, #16
 800e924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e928:	2000dadc 	.word	0x2000dadc
 800e92c:	2000dbc8 	.word	0x2000dbc8
 800e930:	2000db8c 	.word	0x2000db8c

0800e934 <destroy_topic>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	6985      	ldr	r5, [r0, #24]
 800e938:	b1d5      	cbz	r5, 800e970 <destroy_topic+0x3c>
 800e93a:	4604      	mov	r4, r0
 800e93c:	6928      	ldr	r0, [r5, #16]
 800e93e:	6922      	ldr	r2, [r4, #16]
 800e940:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e944:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e948:	6819      	ldr	r1, [r3, #0]
 800e94a:	f7fb fa79 	bl	8009e40 <uxr_buffer_delete_entity>
 800e94e:	4602      	mov	r2, r0
 800e950:	6928      	ldr	r0, [r5, #16]
 800e952:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e956:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e95a:	f7fa f935 	bl	8008bc8 <run_xrce_session>
 800e95e:	2800      	cmp	r0, #0
 800e960:	4620      	mov	r0, r4
 800e962:	bf14      	ite	ne
 800e964:	2400      	movne	r4, #0
 800e966:	2402      	moveq	r4, #2
 800e968:	f7fa f8d2 	bl	8008b10 <rmw_uxrce_fini_topic_memory>
 800e96c:	4620      	mov	r0, r4
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	2401      	movs	r4, #1
 800e972:	4620      	mov	r0, r4
 800e974:	bd38      	pop	{r3, r4, r5, pc}
 800e976:	bf00      	nop

0800e978 <create_node>:
 800e978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e97c:	b083      	sub	sp, #12
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d05f      	beq.n	800ea42 <create_node+0xca>
 800e982:	4606      	mov	r6, r0
 800e984:	4835      	ldr	r0, [pc, #212]	; (800ea5c <create_node+0xe4>)
 800e986:	460f      	mov	r7, r1
 800e988:	4690      	mov	r8, r2
 800e98a:	461d      	mov	r5, r3
 800e98c:	f7ff fcf8 	bl	800e380 <get_memory>
 800e990:	2800      	cmp	r0, #0
 800e992:	d056      	beq.n	800ea42 <create_node+0xca>
 800e994:	6884      	ldr	r4, [r0, #8]
 800e996:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e998:	6123      	str	r3, [r4, #16]
 800e99a:	f7ff fd15 	bl	800e3c8 <rmw_get_implementation_identifier>
 800e99e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800e9a2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e9a6:	f8c4 9020 	str.w	r9, [r4, #32]
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f7f1 fc1a 	bl	80001e4 <strlen>
 800e9b0:	1c42      	adds	r2, r0, #1
 800e9b2:	2a3c      	cmp	r2, #60	; 0x3c
 800e9b4:	f104 0518 	add.w	r5, r4, #24
 800e9b8:	d840      	bhi.n	800ea3c <create_node+0xc4>
 800e9ba:	4648      	mov	r0, r9
 800e9bc:	4631      	mov	r1, r6
 800e9be:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800e9c2:	f003 f973 	bl	8011cac <memcpy>
 800e9c6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	f7f1 fc0a 	bl	80001e4 <strlen>
 800e9d0:	1c42      	adds	r2, r0, #1
 800e9d2:	2a3c      	cmp	r2, #60	; 0x3c
 800e9d4:	d832      	bhi.n	800ea3c <create_node+0xc4>
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	4648      	mov	r0, r9
 800e9da:	f003 f967 	bl	8011cac <memcpy>
 800e9de:	6923      	ldr	r3, [r4, #16]
 800e9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9e4:	2101      	movs	r1, #1
 800e9e6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800e9ea:	1842      	adds	r2, r0, r1
 800e9ec:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800e9f0:	f7fb fc28 	bl	800a244 <uxr_object_id>
 800e9f4:	6160      	str	r0, [r4, #20]
 800e9f6:	783b      	ldrb	r3, [r7, #0]
 800e9f8:	2b2f      	cmp	r3, #47	; 0x2f
 800e9fa:	d127      	bne.n	800ea4c <create_node+0xd4>
 800e9fc:	787b      	ldrb	r3, [r7, #1]
 800e9fe:	bb2b      	cbnz	r3, 800ea4c <create_node+0xd4>
 800ea00:	4a17      	ldr	r2, [pc, #92]	; (800ea60 <create_node+0xe8>)
 800ea02:	4818      	ldr	r0, [pc, #96]	; (800ea64 <create_node+0xec>)
 800ea04:	4633      	mov	r3, r6
 800ea06:	213c      	movs	r1, #60	; 0x3c
 800ea08:	f002 ffd8 	bl	80119bc <sniprintf>
 800ea0c:	6920      	ldr	r0, [r4, #16]
 800ea0e:	4915      	ldr	r1, [pc, #84]	; (800ea64 <create_node+0xec>)
 800ea10:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ea14:	9100      	str	r1, [sp, #0]
 800ea16:	2106      	movs	r1, #6
 800ea18:	9101      	str	r1, [sp, #4]
 800ea1a:	6811      	ldr	r1, [r2, #0]
 800ea1c:	6962      	ldr	r2, [r4, #20]
 800ea1e:	fa1f f388 	uxth.w	r3, r8
 800ea22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ea26:	f7fb fa57 	bl	8009ed8 <uxr_buffer_create_participant_bin>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	6920      	ldr	r0, [r4, #16]
 800ea2e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ea32:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ea36:	f7fa f8c7 	bl	8008bc8 <run_xrce_session>
 800ea3a:	b918      	cbnz	r0, 800ea44 <create_node+0xcc>
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f7f9 fff7 	bl	8008a30 <rmw_uxrce_fini_node_memory>
 800ea42:	2500      	movs	r5, #0
 800ea44:	4628      	mov	r0, r5
 800ea46:	b003      	add	sp, #12
 800ea48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea4c:	4a06      	ldr	r2, [pc, #24]	; (800ea68 <create_node+0xf0>)
 800ea4e:	9600      	str	r6, [sp, #0]
 800ea50:	463b      	mov	r3, r7
 800ea52:	213c      	movs	r1, #60	; 0x3c
 800ea54:	4803      	ldr	r0, [pc, #12]	; (800ea64 <create_node+0xec>)
 800ea56:	f002 ffb1 	bl	80119bc <sniprintf>
 800ea5a:	e7d7      	b.n	800ea0c <create_node+0x94>
 800ea5c:	2000da7c 	.word	0x2000da7c
 800ea60:	08012cdc 	.word	0x08012cdc
 800ea64:	2000dc2c 	.word	0x2000dc2c
 800ea68:	08012e6c 	.word	0x08012e6c

0800ea6c <rmw_create_node>:
 800ea6c:	b199      	cbz	r1, 800ea96 <rmw_create_node+0x2a>
 800ea6e:	780b      	ldrb	r3, [r1, #0]
 800ea70:	468c      	mov	ip, r1
 800ea72:	b183      	cbz	r3, 800ea96 <rmw_create_node+0x2a>
 800ea74:	b410      	push	{r4}
 800ea76:	4614      	mov	r4, r2
 800ea78:	b14a      	cbz	r2, 800ea8e <rmw_create_node+0x22>
 800ea7a:	7813      	ldrb	r3, [r2, #0]
 800ea7c:	b13b      	cbz	r3, 800ea8e <rmw_create_node+0x22>
 800ea7e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800ea80:	4603      	mov	r3, r0
 800ea82:	4621      	mov	r1, r4
 800ea84:	4660      	mov	r0, ip
 800ea86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea8a:	f7ff bf75 	b.w	800e978 <create_node>
 800ea8e:	2000      	movs	r0, #0
 800ea90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	2000      	movs	r0, #0
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop

0800ea9c <rmw_destroy_node>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	b328      	cbz	r0, 800eaec <rmw_destroy_node+0x50>
 800eaa0:	4607      	mov	r7, r0
 800eaa2:	6800      	ldr	r0, [r0, #0]
 800eaa4:	b120      	cbz	r0, 800eab0 <rmw_destroy_node+0x14>
 800eaa6:	4b36      	ldr	r3, [pc, #216]	; (800eb80 <rmw_destroy_node+0xe4>)
 800eaa8:	6819      	ldr	r1, [r3, #0]
 800eaaa:	f7f1 fb91 	bl	80001d0 <strcmp>
 800eaae:	b9e8      	cbnz	r0, 800eaec <rmw_destroy_node+0x50>
 800eab0:	687d      	ldr	r5, [r7, #4]
 800eab2:	b1dd      	cbz	r5, 800eaec <rmw_destroy_node+0x50>
 800eab4:	4b33      	ldr	r3, [pc, #204]	; (800eb84 <rmw_destroy_node+0xe8>)
 800eab6:	681c      	ldr	r4, [r3, #0]
 800eab8:	2c00      	cmp	r4, #0
 800eaba:	d05f      	beq.n	800eb7c <rmw_destroy_node+0xe0>
 800eabc:	2600      	movs	r6, #0
 800eabe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800eac2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800eac6:	429d      	cmp	r5, r3
 800eac8:	d013      	beq.n	800eaf2 <rmw_destroy_node+0x56>
 800eaca:	2c00      	cmp	r4, #0
 800eacc:	d1f7      	bne.n	800eabe <rmw_destroy_node+0x22>
 800eace:	4b2e      	ldr	r3, [pc, #184]	; (800eb88 <rmw_destroy_node+0xec>)
 800ead0:	681c      	ldr	r4, [r3, #0]
 800ead2:	b1c4      	cbz	r4, 800eb06 <rmw_destroy_node+0x6a>
 800ead4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ead8:	6a0b      	ldr	r3, [r1, #32]
 800eada:	429d      	cmp	r5, r3
 800eadc:	d1f9      	bne.n	800ead2 <rmw_destroy_node+0x36>
 800eade:	317c      	adds	r1, #124	; 0x7c
 800eae0:	4638      	mov	r0, r7
 800eae2:	f000 f993 	bl	800ee0c <rmw_destroy_subscription>
 800eae6:	2801      	cmp	r0, #1
 800eae8:	4606      	mov	r6, r0
 800eaea:	d1f2      	bne.n	800ead2 <rmw_destroy_node+0x36>
 800eaec:	2601      	movs	r6, #1
 800eaee:	4630      	mov	r0, r6
 800eaf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf2:	3184      	adds	r1, #132	; 0x84
 800eaf4:	4638      	mov	r0, r7
 800eaf6:	f7f9 fde3 	bl	80086c0 <rmw_destroy_publisher>
 800eafa:	2801      	cmp	r0, #1
 800eafc:	4606      	mov	r6, r0
 800eafe:	d0f5      	beq.n	800eaec <rmw_destroy_node+0x50>
 800eb00:	2c00      	cmp	r4, #0
 800eb02:	d1dc      	bne.n	800eabe <rmw_destroy_node+0x22>
 800eb04:	e7e3      	b.n	800eace <rmw_destroy_node+0x32>
 800eb06:	4b21      	ldr	r3, [pc, #132]	; (800eb8c <rmw_destroy_node+0xf0>)
 800eb08:	681c      	ldr	r4, [r3, #0]
 800eb0a:	b16c      	cbz	r4, 800eb28 <rmw_destroy_node+0x8c>
 800eb0c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800eb10:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800eb12:	429d      	cmp	r5, r3
 800eb14:	d1f9      	bne.n	800eb0a <rmw_destroy_node+0x6e>
 800eb16:	317c      	adds	r1, #124	; 0x7c
 800eb18:	4638      	mov	r0, r7
 800eb1a:	f000 f841 	bl	800eba0 <rmw_destroy_service>
 800eb1e:	2801      	cmp	r0, #1
 800eb20:	4606      	mov	r6, r0
 800eb22:	d0e3      	beq.n	800eaec <rmw_destroy_node+0x50>
 800eb24:	2c00      	cmp	r4, #0
 800eb26:	d1f1      	bne.n	800eb0c <rmw_destroy_node+0x70>
 800eb28:	4b19      	ldr	r3, [pc, #100]	; (800eb90 <rmw_destroy_node+0xf4>)
 800eb2a:	681c      	ldr	r4, [r3, #0]
 800eb2c:	b16c      	cbz	r4, 800eb4a <rmw_destroy_node+0xae>
 800eb2e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800eb32:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800eb34:	429d      	cmp	r5, r3
 800eb36:	d1f9      	bne.n	800eb2c <rmw_destroy_node+0x90>
 800eb38:	317c      	adds	r1, #124	; 0x7c
 800eb3a:	4638      	mov	r0, r7
 800eb3c:	f002 fbce 	bl	80112dc <rmw_destroy_client>
 800eb40:	2801      	cmp	r0, #1
 800eb42:	4606      	mov	r6, r0
 800eb44:	d0d2      	beq.n	800eaec <rmw_destroy_node+0x50>
 800eb46:	2c00      	cmp	r4, #0
 800eb48:	d1f1      	bne.n	800eb2e <rmw_destroy_node+0x92>
 800eb4a:	6928      	ldr	r0, [r5, #16]
 800eb4c:	696a      	ldr	r2, [r5, #20]
 800eb4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800eb52:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eb56:	6819      	ldr	r1, [r3, #0]
 800eb58:	f7fb f972 	bl	8009e40 <uxr_buffer_delete_entity>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	6928      	ldr	r0, [r5, #16]
 800eb60:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800eb64:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800eb68:	f7fa f82e 	bl	8008bc8 <run_xrce_session>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	bf08      	it	eq
 800eb70:	2602      	moveq	r6, #2
 800eb72:	4638      	mov	r0, r7
 800eb74:	f7f9 ff5c 	bl	8008a30 <rmw_uxrce_fini_node_memory>
 800eb78:	4630      	mov	r0, r6
 800eb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb7c:	4626      	mov	r6, r4
 800eb7e:	e7a6      	b.n	800eace <rmw_destroy_node+0x32>
 800eb80:	08013318 	.word	0x08013318
 800eb84:	2000da8c 	.word	0x2000da8c
 800eb88:	2000dacc 	.word	0x2000dacc
 800eb8c:	2000da9c 	.word	0x2000da9c
 800eb90:	200091b0 	.word	0x200091b0

0800eb94 <rmw_node_get_graph_guard_condition>:
 800eb94:	6843      	ldr	r3, [r0, #4]
 800eb96:	6918      	ldr	r0, [r3, #16]
 800eb98:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <rmw_destroy_service>:
 800eba0:	b570      	push	{r4, r5, r6, lr}
 800eba2:	b128      	cbz	r0, 800ebb0 <rmw_destroy_service+0x10>
 800eba4:	4604      	mov	r4, r0
 800eba6:	6800      	ldr	r0, [r0, #0]
 800eba8:	460d      	mov	r5, r1
 800ebaa:	f7fa f88d 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 800ebae:	b910      	cbnz	r0, 800ebb6 <rmw_destroy_service+0x16>
 800ebb0:	2401      	movs	r4, #1
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	bd70      	pop	{r4, r5, r6, pc}
 800ebb6:	6863      	ldr	r3, [r4, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d0f9      	beq.n	800ebb0 <rmw_destroy_service+0x10>
 800ebbc:	2d00      	cmp	r5, #0
 800ebbe:	d0f7      	beq.n	800ebb0 <rmw_destroy_service+0x10>
 800ebc0:	6828      	ldr	r0, [r5, #0]
 800ebc2:	f7fa f881 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d0f2      	beq.n	800ebb0 <rmw_destroy_service+0x10>
 800ebca:	686e      	ldr	r6, [r5, #4]
 800ebcc:	2e00      	cmp	r6, #0
 800ebce:	d0ef      	beq.n	800ebb0 <rmw_destroy_service+0x10>
 800ebd0:	6864      	ldr	r4, [r4, #4]
 800ebd2:	6932      	ldr	r2, [r6, #16]
 800ebd4:	6920      	ldr	r0, [r4, #16]
 800ebd6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ebda:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ebde:	6819      	ldr	r1, [r3, #0]
 800ebe0:	f001 f9ae 	bl	800ff40 <uxr_buffer_cancel_data>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	6920      	ldr	r0, [r4, #16]
 800ebe8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ebec:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ebf0:	f7f9 ffea 	bl	8008bc8 <run_xrce_session>
 800ebf4:	6920      	ldr	r0, [r4, #16]
 800ebf6:	6932      	ldr	r2, [r6, #16]
 800ebf8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ebfc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ec00:	6819      	ldr	r1, [r3, #0]
 800ec02:	f7fb f91d 	bl	8009e40 <uxr_buffer_delete_entity>
 800ec06:	4602      	mov	r2, r0
 800ec08:	6920      	ldr	r0, [r4, #16]
 800ec0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ec0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ec12:	f7f9 ffd9 	bl	8008bc8 <run_xrce_session>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	4628      	mov	r0, r5
 800ec1a:	bf14      	ite	ne
 800ec1c:	2400      	movne	r4, #0
 800ec1e:	2402      	moveq	r4, #2
 800ec20:	f7f9 ff4a 	bl	8008ab8 <rmw_uxrce_fini_service_memory>
 800ec24:	e7c5      	b.n	800ebb2 <rmw_destroy_service+0x12>
 800ec26:	bf00      	nop

0800ec28 <rmw_create_subscription>:
 800ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec2c:	b08d      	sub	sp, #52	; 0x34
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	f000 80d1 	beq.w	800edd6 <rmw_create_subscription+0x1ae>
 800ec34:	460e      	mov	r6, r1
 800ec36:	2900      	cmp	r1, #0
 800ec38:	f000 80cd 	beq.w	800edd6 <rmw_create_subscription+0x1ae>
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	6800      	ldr	r0, [r0, #0]
 800ec40:	4615      	mov	r5, r2
 800ec42:	4698      	mov	r8, r3
 800ec44:	f7fa f840 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	f000 80c4 	beq.w	800edd6 <rmw_create_subscription+0x1ae>
 800ec4e:	2d00      	cmp	r5, #0
 800ec50:	f000 80c1 	beq.w	800edd6 <rmw_create_subscription+0x1ae>
 800ec54:	782b      	ldrb	r3, [r5, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 80bd 	beq.w	800edd6 <rmw_create_subscription+0x1ae>
 800ec5c:	f1b8 0f00 	cmp.w	r8, #0
 800ec60:	f000 80b9 	beq.w	800edd6 <rmw_create_subscription+0x1ae>
 800ec64:	485e      	ldr	r0, [pc, #376]	; (800ede0 <rmw_create_subscription+0x1b8>)
 800ec66:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ec6a:	f7ff fb89 	bl	800e380 <get_memory>
 800ec6e:	4604      	mov	r4, r0
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f000 80b1 	beq.w	800edd8 <rmw_create_subscription+0x1b0>
 800ec76:	6887      	ldr	r7, [r0, #8]
 800ec78:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800ec7c:	f7ff fba4 	bl	800e3c8 <rmw_get_implementation_identifier>
 800ec80:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 800ec84:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ec86:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f7f1 faaa 	bl	80001e4 <strlen>
 800ec90:	3001      	adds	r0, #1
 800ec92:	283c      	cmp	r0, #60	; 0x3c
 800ec94:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800ec98:	f200 8096 	bhi.w	800edc8 <rmw_create_subscription+0x1a0>
 800ec9c:	4a51      	ldr	r2, [pc, #324]	; (800ede4 <rmw_create_subscription+0x1bc>)
 800ec9e:	462b      	mov	r3, r5
 800eca0:	213c      	movs	r1, #60	; 0x3c
 800eca2:	4650      	mov	r0, sl
 800eca4:	f002 fe8a 	bl	80119bc <sniprintf>
 800eca8:	4641      	mov	r1, r8
 800ecaa:	f8c7 9020 	str.w	r9, [r7, #32]
 800ecae:	2250      	movs	r2, #80	; 0x50
 800ecb0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ecb4:	f002 fffa 	bl	8011cac <memcpy>
 800ecb8:	494b      	ldr	r1, [pc, #300]	; (800ede8 <rmw_create_subscription+0x1c0>)
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7fa f812 	bl	8008ce4 <get_message_typesupport_handle>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	f000 8081 	beq.w	800edc8 <rmw_create_subscription+0x1a0>
 800ecc6:	6842      	ldr	r2, [r0, #4]
 800ecc8:	61ba      	str	r2, [r7, #24]
 800ecca:	2a00      	cmp	r2, #0
 800eccc:	d07c      	beq.n	800edc8 <rmw_create_subscription+0x1a0>
 800ecce:	4629      	mov	r1, r5
 800ecd0:	4643      	mov	r3, r8
 800ecd2:	4648      	mov	r0, r9
 800ecd4:	f7ff fdde 	bl	800e894 <create_topic>
 800ecd8:	61f8      	str	r0, [r7, #28]
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d078      	beq.n	800edd0 <rmw_create_subscription+0x1a8>
 800ecde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ece2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ece6:	2104      	movs	r1, #4
 800ece8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 800ecec:	1c42      	adds	r2, r0, #1
 800ecee:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 800ecf2:	f7fb faa7 	bl	800a244 <uxr_object_id>
 800ecf6:	6138      	str	r0, [r7, #16]
 800ecf8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ecfc:	2506      	movs	r5, #6
 800ecfe:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800ed02:	9500      	str	r5, [sp, #0]
 800ed04:	6819      	ldr	r1, [r3, #0]
 800ed06:	693a      	ldr	r2, [r7, #16]
 800ed08:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ed0c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed10:	f7fb f97a 	bl	800a008 <uxr_buffer_create_subscriber_bin>
 800ed14:	4602      	mov	r2, r0
 800ed16:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ed1a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ed1e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ed22:	f7f9 ff51 	bl	8008bc8 <run_xrce_session>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d04e      	beq.n	800edc8 <rmw_create_subscription+0x1a0>
 800ed2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed32:	4629      	mov	r1, r5
 800ed34:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 800ed38:	1c42      	adds	r2, r0, #1
 800ed3a:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 800ed3e:	f7fb fa81 	bl	800a244 <uxr_object_id>
 800ed42:	ae08      	add	r6, sp, #32
 800ed44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	6178      	str	r0, [r7, #20]
 800ed4c:	4641      	mov	r1, r8
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800ed54:	9305      	str	r3, [sp, #20]
 800ed56:	f7f9 ff53 	bl	8008c00 <convert_qos_profile>
 800ed5a:	9503      	str	r5, [sp, #12]
 800ed5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ed60:	9b05      	ldr	r3, [sp, #20]
 800ed62:	9001      	str	r0, [sp, #4]
 800ed64:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800ed70:	f8db 1000 	ldr.w	r1, [fp]
 800ed74:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800ed78:	f7fb f9ec 	bl	800a154 <uxr_buffer_create_datareader_bin>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ed82:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ed86:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ed8a:	f7f9 ff1d 	bl	8008bc8 <run_xrce_session>
 800ed8e:	b1d8      	cbz	r0, 800edc8 <rmw_create_subscription+0x1a0>
 800ed90:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ed94:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ed98:	2b02      	cmp	r3, #2
 800ed9a:	bf0c      	ite	eq
 800ed9c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800eda0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800eda4:	9307      	str	r3, [sp, #28]
 800eda6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800edaa:	2200      	movs	r2, #0
 800edac:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800edb0:	ab0a      	add	r3, sp, #40	; 0x28
 800edb2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	9b07      	ldr	r3, [sp, #28]
 800edbc:	6809      	ldr	r1, [r1, #0]
 800edbe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800edc2:	f001 f883 	bl	800fecc <uxr_buffer_request_data>
 800edc6:	e007      	b.n	800edd8 <rmw_create_subscription+0x1b0>
 800edc8:	69f8      	ldr	r0, [r7, #28]
 800edca:	b108      	cbz	r0, 800edd0 <rmw_create_subscription+0x1a8>
 800edcc:	f7f9 fea0 	bl	8008b10 <rmw_uxrce_fini_topic_memory>
 800edd0:	4620      	mov	r0, r4
 800edd2:	f7f9 fe5b 	bl	8008a8c <rmw_uxrce_fini_subscription_memory>
 800edd6:	2400      	movs	r4, #0
 800edd8:	4620      	mov	r0, r4
 800edda:	b00d      	add	sp, #52	; 0x34
 800eddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede0:	2000dacc 	.word	0x2000dacc
 800ede4:	08012cdc 	.word	0x08012cdc
 800ede8:	08012ca8 	.word	0x08012ca8

0800edec <rmw_subscription_get_actual_qos>:
 800edec:	b150      	cbz	r0, 800ee04 <rmw_subscription_get_actual_qos+0x18>
 800edee:	b508      	push	{r3, lr}
 800edf0:	460b      	mov	r3, r1
 800edf2:	b149      	cbz	r1, 800ee08 <rmw_subscription_get_actual_qos+0x1c>
 800edf4:	6841      	ldr	r1, [r0, #4]
 800edf6:	2250      	movs	r2, #80	; 0x50
 800edf8:	3128      	adds	r1, #40	; 0x28
 800edfa:	4618      	mov	r0, r3
 800edfc:	f002 ff56 	bl	8011cac <memcpy>
 800ee00:	2000      	movs	r0, #0
 800ee02:	bd08      	pop	{r3, pc}
 800ee04:	200b      	movs	r0, #11
 800ee06:	4770      	bx	lr
 800ee08:	200b      	movs	r0, #11
 800ee0a:	bd08      	pop	{r3, pc}

0800ee0c <rmw_destroy_subscription>:
 800ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0e:	b128      	cbz	r0, 800ee1c <rmw_destroy_subscription+0x10>
 800ee10:	4604      	mov	r4, r0
 800ee12:	6800      	ldr	r0, [r0, #0]
 800ee14:	460d      	mov	r5, r1
 800ee16:	f7f9 ff57 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 800ee1a:	b910      	cbnz	r0, 800ee22 <rmw_destroy_subscription+0x16>
 800ee1c:	2401      	movs	r4, #1
 800ee1e:	4620      	mov	r0, r4
 800ee20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee22:	6863      	ldr	r3, [r4, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d0f9      	beq.n	800ee1c <rmw_destroy_subscription+0x10>
 800ee28:	2d00      	cmp	r5, #0
 800ee2a:	d0f7      	beq.n	800ee1c <rmw_destroy_subscription+0x10>
 800ee2c:	6828      	ldr	r0, [r5, #0]
 800ee2e:	f7f9 ff4b 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d0f2      	beq.n	800ee1c <rmw_destroy_subscription+0x10>
 800ee36:	686c      	ldr	r4, [r5, #4]
 800ee38:	2c00      	cmp	r4, #0
 800ee3a:	d0ef      	beq.n	800ee1c <rmw_destroy_subscription+0x10>
 800ee3c:	6a26      	ldr	r6, [r4, #32]
 800ee3e:	6962      	ldr	r2, [r4, #20]
 800ee40:	6930      	ldr	r0, [r6, #16]
 800ee42:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ee46:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee4a:	6819      	ldr	r1, [r3, #0]
 800ee4c:	f001 f878 	bl	800ff40 <uxr_buffer_cancel_data>
 800ee50:	4602      	mov	r2, r0
 800ee52:	6930      	ldr	r0, [r6, #16]
 800ee54:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ee58:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ee5c:	f7f9 feb4 	bl	8008bc8 <run_xrce_session>
 800ee60:	69e0      	ldr	r0, [r4, #28]
 800ee62:	f7ff fd67 	bl	800e934 <destroy_topic>
 800ee66:	6a23      	ldr	r3, [r4, #32]
 800ee68:	6962      	ldr	r2, [r4, #20]
 800ee6a:	6918      	ldr	r0, [r3, #16]
 800ee6c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ee70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee74:	6819      	ldr	r1, [r3, #0]
 800ee76:	f7fa ffe3 	bl	8009e40 <uxr_buffer_delete_entity>
 800ee7a:	6a23      	ldr	r3, [r4, #32]
 800ee7c:	6922      	ldr	r2, [r4, #16]
 800ee7e:	691b      	ldr	r3, [r3, #16]
 800ee80:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800ee84:	4604      	mov	r4, r0
 800ee86:	6809      	ldr	r1, [r1, #0]
 800ee88:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ee8c:	f7fa ffd8 	bl	8009e40 <uxr_buffer_delete_entity>
 800ee90:	6937      	ldr	r7, [r6, #16]
 800ee92:	4622      	mov	r2, r4
 800ee94:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800ee98:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800ee9c:	4604      	mov	r4, r0
 800ee9e:	4638      	mov	r0, r7
 800eea0:	f7f9 fe92 	bl	8008bc8 <run_xrce_session>
 800eea4:	6936      	ldr	r6, [r6, #16]
 800eea6:	4622      	mov	r2, r4
 800eea8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800eeac:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7f9 fe88 	bl	8008bc8 <run_xrce_session>
 800eeb8:	b12c      	cbz	r4, 800eec6 <rmw_destroy_subscription+0xba>
 800eeba:	b120      	cbz	r0, 800eec6 <rmw_destroy_subscription+0xba>
 800eebc:	2400      	movs	r4, #0
 800eebe:	4628      	mov	r0, r5
 800eec0:	f7f9 fde4 	bl	8008a8c <rmw_uxrce_fini_subscription_memory>
 800eec4:	e7ab      	b.n	800ee1e <rmw_destroy_subscription+0x12>
 800eec6:	2402      	movs	r4, #2
 800eec8:	e7f9      	b.n	800eebe <rmw_destroy_subscription+0xb2>
 800eeca:	bf00      	nop

0800eecc <rmw_uxrce_transport_init>:
 800eecc:	b508      	push	{r3, lr}
 800eece:	b108      	cbz	r0, 800eed4 <rmw_uxrce_transport_init+0x8>
 800eed0:	f100 0210 	add.w	r2, r0, #16
 800eed4:	b139      	cbz	r1, 800eee6 <rmw_uxrce_transport_init+0x1a>
 800eed6:	6949      	ldr	r1, [r1, #20]
 800eed8:	4610      	mov	r0, r2
 800eeda:	f000 fa77 	bl	800f3cc <uxr_init_custom_transport>
 800eede:	f080 0001 	eor.w	r0, r0, #1
 800eee2:	b2c0      	uxtb	r0, r0
 800eee4:	bd08      	pop	{r3, pc}
 800eee6:	4b04      	ldr	r3, [pc, #16]	; (800eef8 <rmw_uxrce_transport_init+0x2c>)
 800eee8:	4610      	mov	r0, r2
 800eeea:	6859      	ldr	r1, [r3, #4]
 800eeec:	f000 fa6e 	bl	800f3cc <uxr_init_custom_transport>
 800eef0:	f080 0001 	eor.w	r0, r0, #1
 800eef4:	b2c0      	uxtb	r0, r0
 800eef6:	bd08      	pop	{r3, pc}
 800eef8:	20009194 	.word	0x20009194

0800eefc <rmw_uros_epoch_nanos>:
 800eefc:	4b05      	ldr	r3, [pc, #20]	; (800ef14 <rmw_uros_epoch_nanos+0x18>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	b123      	cbz	r3, 800ef0c <rmw_uros_epoch_nanos+0x10>
 800ef02:	6898      	ldr	r0, [r3, #8]
 800ef04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef08:	f7fb bae0 	b.w	800a4cc <uxr_epoch_nanos>
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	2100      	movs	r1, #0
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	2000daac 	.word	0x2000daac

0800ef18 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800ef18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1c:	6805      	ldr	r5, [r0, #0]
 800ef1e:	4604      	mov	r4, r0
 800ef20:	4628      	mov	r0, r5
 800ef22:	460e      	mov	r6, r1
 800ef24:	f7f1 f954 	bl	80001d0 <strcmp>
 800ef28:	b1c8      	cbz	r0, 800ef5e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800ef2a:	4b11      	ldr	r3, [pc, #68]	; (800ef70 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	429d      	cmp	r5, r3
 800ef30:	d112      	bne.n	800ef58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800ef32:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ef36:	f8d8 4000 	ldr.w	r4, [r8]
 800ef3a:	b16c      	cbz	r4, 800ef58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800ef3c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ef40:	2700      	movs	r7, #0
 800ef42:	3d04      	subs	r5, #4
 800ef44:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800ef48:	4631      	mov	r1, r6
 800ef4a:	f7f1 f941 	bl	80001d0 <strcmp>
 800ef4e:	00bb      	lsls	r3, r7, #2
 800ef50:	b140      	cbz	r0, 800ef64 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800ef52:	3701      	adds	r7, #1
 800ef54:	42bc      	cmp	r4, r7
 800ef56:	d1f5      	bne.n	800ef44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800ef58:	2000      	movs	r0, #0
 800ef5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5e:	4620      	mov	r0, r4
 800ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ef68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef6c:	58d3      	ldr	r3, [r2, r3]
 800ef6e:	4718      	bx	r3
 800ef70:	200000ac 	.word	0x200000ac

0800ef74 <std_msgs__msg__Int32__init>:
 800ef74:	3800      	subs	r0, #0
 800ef76:	bf18      	it	ne
 800ef78:	2001      	movne	r0, #1
 800ef7a:	4770      	bx	lr

0800ef7c <std_msgs__msg__Int32__fini>:
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop

0800ef80 <ucdr_serialize_endian_array_char>:
 800ef80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef84:	4619      	mov	r1, r3
 800ef86:	461f      	mov	r7, r3
 800ef88:	4605      	mov	r5, r0
 800ef8a:	4690      	mov	r8, r2
 800ef8c:	f7fa fe94 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800ef90:	b9e0      	cbnz	r0, 800efcc <ucdr_serialize_endian_array_char+0x4c>
 800ef92:	463e      	mov	r6, r7
 800ef94:	e009      	b.n	800efaa <ucdr_serialize_endian_array_char+0x2a>
 800ef96:	68a8      	ldr	r0, [r5, #8]
 800ef98:	f002 fe88 	bl	8011cac <memcpy>
 800ef9c:	68ab      	ldr	r3, [r5, #8]
 800ef9e:	6928      	ldr	r0, [r5, #16]
 800efa0:	4423      	add	r3, r4
 800efa2:	4420      	add	r0, r4
 800efa4:	1b36      	subs	r6, r6, r4
 800efa6:	60ab      	str	r3, [r5, #8]
 800efa8:	6128      	str	r0, [r5, #16]
 800efaa:	4631      	mov	r1, r6
 800efac:	2201      	movs	r2, #1
 800efae:	4628      	mov	r0, r5
 800efb0:	f7fa ff0a 	bl	8009dc8 <ucdr_check_final_buffer_behavior_array>
 800efb4:	1bb9      	subs	r1, r7, r6
 800efb6:	4441      	add	r1, r8
 800efb8:	4604      	mov	r4, r0
 800efba:	4602      	mov	r2, r0
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d1ea      	bne.n	800ef96 <ucdr_serialize_endian_array_char+0x16>
 800efc0:	2301      	movs	r3, #1
 800efc2:	7da8      	ldrb	r0, [r5, #22]
 800efc4:	756b      	strb	r3, [r5, #21]
 800efc6:	4058      	eors	r0, r3
 800efc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efcc:	463a      	mov	r2, r7
 800efce:	68a8      	ldr	r0, [r5, #8]
 800efd0:	4641      	mov	r1, r8
 800efd2:	f002 fe6b 	bl	8011cac <memcpy>
 800efd6:	68aa      	ldr	r2, [r5, #8]
 800efd8:	692b      	ldr	r3, [r5, #16]
 800efda:	443a      	add	r2, r7
 800efdc:	443b      	add	r3, r7
 800efde:	60aa      	str	r2, [r5, #8]
 800efe0:	612b      	str	r3, [r5, #16]
 800efe2:	e7ed      	b.n	800efc0 <ucdr_serialize_endian_array_char+0x40>

0800efe4 <ucdr_deserialize_endian_array_char>:
 800efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe8:	4619      	mov	r1, r3
 800efea:	461f      	mov	r7, r3
 800efec:	4605      	mov	r5, r0
 800efee:	4690      	mov	r8, r2
 800eff0:	f7fa fe62 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800eff4:	b9e0      	cbnz	r0, 800f030 <ucdr_deserialize_endian_array_char+0x4c>
 800eff6:	463e      	mov	r6, r7
 800eff8:	e009      	b.n	800f00e <ucdr_deserialize_endian_array_char+0x2a>
 800effa:	68a9      	ldr	r1, [r5, #8]
 800effc:	f002 fe56 	bl	8011cac <memcpy>
 800f000:	68ab      	ldr	r3, [r5, #8]
 800f002:	6928      	ldr	r0, [r5, #16]
 800f004:	4423      	add	r3, r4
 800f006:	4420      	add	r0, r4
 800f008:	1b36      	subs	r6, r6, r4
 800f00a:	60ab      	str	r3, [r5, #8]
 800f00c:	6128      	str	r0, [r5, #16]
 800f00e:	2201      	movs	r2, #1
 800f010:	4631      	mov	r1, r6
 800f012:	4628      	mov	r0, r5
 800f014:	f7fa fed8 	bl	8009dc8 <ucdr_check_final_buffer_behavior_array>
 800f018:	4604      	mov	r4, r0
 800f01a:	1bb8      	subs	r0, r7, r6
 800f01c:	4440      	add	r0, r8
 800f01e:	4622      	mov	r2, r4
 800f020:	2c00      	cmp	r4, #0
 800f022:	d1ea      	bne.n	800effa <ucdr_deserialize_endian_array_char+0x16>
 800f024:	2301      	movs	r3, #1
 800f026:	7da8      	ldrb	r0, [r5, #22]
 800f028:	756b      	strb	r3, [r5, #21]
 800f02a:	4058      	eors	r0, r3
 800f02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f030:	463a      	mov	r2, r7
 800f032:	68a9      	ldr	r1, [r5, #8]
 800f034:	4640      	mov	r0, r8
 800f036:	f002 fe39 	bl	8011cac <memcpy>
 800f03a:	68aa      	ldr	r2, [r5, #8]
 800f03c:	692b      	ldr	r3, [r5, #16]
 800f03e:	443a      	add	r2, r7
 800f040:	443b      	add	r3, r7
 800f042:	60aa      	str	r2, [r5, #8]
 800f044:	612b      	str	r3, [r5, #16]
 800f046:	e7ed      	b.n	800f024 <ucdr_deserialize_endian_array_char+0x40>

0800f048 <ucdr_serialize_array_uint8_t>:
 800f048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f04c:	4688      	mov	r8, r1
 800f04e:	4611      	mov	r1, r2
 800f050:	4617      	mov	r7, r2
 800f052:	4605      	mov	r5, r0
 800f054:	f7fa fe30 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800f058:	b9e0      	cbnz	r0, 800f094 <ucdr_serialize_array_uint8_t+0x4c>
 800f05a:	463e      	mov	r6, r7
 800f05c:	e009      	b.n	800f072 <ucdr_serialize_array_uint8_t+0x2a>
 800f05e:	68a8      	ldr	r0, [r5, #8]
 800f060:	f002 fe24 	bl	8011cac <memcpy>
 800f064:	68aa      	ldr	r2, [r5, #8]
 800f066:	692b      	ldr	r3, [r5, #16]
 800f068:	4422      	add	r2, r4
 800f06a:	4423      	add	r3, r4
 800f06c:	1b36      	subs	r6, r6, r4
 800f06e:	60aa      	str	r2, [r5, #8]
 800f070:	612b      	str	r3, [r5, #16]
 800f072:	4631      	mov	r1, r6
 800f074:	2201      	movs	r2, #1
 800f076:	4628      	mov	r0, r5
 800f078:	f7fa fea6 	bl	8009dc8 <ucdr_check_final_buffer_behavior_array>
 800f07c:	1bb9      	subs	r1, r7, r6
 800f07e:	4441      	add	r1, r8
 800f080:	4604      	mov	r4, r0
 800f082:	4602      	mov	r2, r0
 800f084:	2800      	cmp	r0, #0
 800f086:	d1ea      	bne.n	800f05e <ucdr_serialize_array_uint8_t+0x16>
 800f088:	2301      	movs	r3, #1
 800f08a:	7da8      	ldrb	r0, [r5, #22]
 800f08c:	756b      	strb	r3, [r5, #21]
 800f08e:	4058      	eors	r0, r3
 800f090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f094:	463a      	mov	r2, r7
 800f096:	68a8      	ldr	r0, [r5, #8]
 800f098:	4641      	mov	r1, r8
 800f09a:	f002 fe07 	bl	8011cac <memcpy>
 800f09e:	68aa      	ldr	r2, [r5, #8]
 800f0a0:	692b      	ldr	r3, [r5, #16]
 800f0a2:	443a      	add	r2, r7
 800f0a4:	443b      	add	r3, r7
 800f0a6:	60aa      	str	r2, [r5, #8]
 800f0a8:	612b      	str	r3, [r5, #16]
 800f0aa:	e7ed      	b.n	800f088 <ucdr_serialize_array_uint8_t+0x40>

0800f0ac <ucdr_serialize_endian_array_uint8_t>:
 800f0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	461f      	mov	r7, r3
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	4690      	mov	r8, r2
 800f0b8:	f7fa fdfe 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800f0bc:	b9e0      	cbnz	r0, 800f0f8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f0be:	463e      	mov	r6, r7
 800f0c0:	e009      	b.n	800f0d6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f0c2:	68a8      	ldr	r0, [r5, #8]
 800f0c4:	f002 fdf2 	bl	8011cac <memcpy>
 800f0c8:	68ab      	ldr	r3, [r5, #8]
 800f0ca:	6928      	ldr	r0, [r5, #16]
 800f0cc:	4423      	add	r3, r4
 800f0ce:	4420      	add	r0, r4
 800f0d0:	1b36      	subs	r6, r6, r4
 800f0d2:	60ab      	str	r3, [r5, #8]
 800f0d4:	6128      	str	r0, [r5, #16]
 800f0d6:	4631      	mov	r1, r6
 800f0d8:	2201      	movs	r2, #1
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f7fa fe74 	bl	8009dc8 <ucdr_check_final_buffer_behavior_array>
 800f0e0:	1bb9      	subs	r1, r7, r6
 800f0e2:	4441      	add	r1, r8
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d1ea      	bne.n	800f0c2 <ucdr_serialize_endian_array_uint8_t+0x16>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	7da8      	ldrb	r0, [r5, #22]
 800f0f0:	756b      	strb	r3, [r5, #21]
 800f0f2:	4058      	eors	r0, r3
 800f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f8:	463a      	mov	r2, r7
 800f0fa:	68a8      	ldr	r0, [r5, #8]
 800f0fc:	4641      	mov	r1, r8
 800f0fe:	f002 fdd5 	bl	8011cac <memcpy>
 800f102:	68aa      	ldr	r2, [r5, #8]
 800f104:	692b      	ldr	r3, [r5, #16]
 800f106:	443a      	add	r2, r7
 800f108:	443b      	add	r3, r7
 800f10a:	60aa      	str	r2, [r5, #8]
 800f10c:	612b      	str	r3, [r5, #16]
 800f10e:	e7ed      	b.n	800f0ec <ucdr_serialize_endian_array_uint8_t+0x40>

0800f110 <ucdr_deserialize_array_uint8_t>:
 800f110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f114:	4688      	mov	r8, r1
 800f116:	4611      	mov	r1, r2
 800f118:	4617      	mov	r7, r2
 800f11a:	4605      	mov	r5, r0
 800f11c:	f7fa fdcc 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800f120:	b9e0      	cbnz	r0, 800f15c <ucdr_deserialize_array_uint8_t+0x4c>
 800f122:	463e      	mov	r6, r7
 800f124:	e009      	b.n	800f13a <ucdr_deserialize_array_uint8_t+0x2a>
 800f126:	68a9      	ldr	r1, [r5, #8]
 800f128:	f002 fdc0 	bl	8011cac <memcpy>
 800f12c:	68aa      	ldr	r2, [r5, #8]
 800f12e:	692b      	ldr	r3, [r5, #16]
 800f130:	4422      	add	r2, r4
 800f132:	4423      	add	r3, r4
 800f134:	1b36      	subs	r6, r6, r4
 800f136:	60aa      	str	r2, [r5, #8]
 800f138:	612b      	str	r3, [r5, #16]
 800f13a:	2201      	movs	r2, #1
 800f13c:	4631      	mov	r1, r6
 800f13e:	4628      	mov	r0, r5
 800f140:	f7fa fe42 	bl	8009dc8 <ucdr_check_final_buffer_behavior_array>
 800f144:	4604      	mov	r4, r0
 800f146:	1bb8      	subs	r0, r7, r6
 800f148:	4440      	add	r0, r8
 800f14a:	4622      	mov	r2, r4
 800f14c:	2c00      	cmp	r4, #0
 800f14e:	d1ea      	bne.n	800f126 <ucdr_deserialize_array_uint8_t+0x16>
 800f150:	2301      	movs	r3, #1
 800f152:	7da8      	ldrb	r0, [r5, #22]
 800f154:	756b      	strb	r3, [r5, #21]
 800f156:	4058      	eors	r0, r3
 800f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15c:	463a      	mov	r2, r7
 800f15e:	68a9      	ldr	r1, [r5, #8]
 800f160:	4640      	mov	r0, r8
 800f162:	f002 fda3 	bl	8011cac <memcpy>
 800f166:	68aa      	ldr	r2, [r5, #8]
 800f168:	692b      	ldr	r3, [r5, #16]
 800f16a:	443a      	add	r2, r7
 800f16c:	443b      	add	r3, r7
 800f16e:	60aa      	str	r2, [r5, #8]
 800f170:	612b      	str	r3, [r5, #16]
 800f172:	e7ed      	b.n	800f150 <ucdr_deserialize_array_uint8_t+0x40>

0800f174 <ucdr_deserialize_endian_array_uint8_t>:
 800f174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f178:	4619      	mov	r1, r3
 800f17a:	461f      	mov	r7, r3
 800f17c:	4605      	mov	r5, r0
 800f17e:	4690      	mov	r8, r2
 800f180:	f7fa fd9a 	bl	8009cb8 <ucdr_check_buffer_available_for>
 800f184:	b9e0      	cbnz	r0, 800f1c0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f186:	463e      	mov	r6, r7
 800f188:	e009      	b.n	800f19e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f18a:	68a9      	ldr	r1, [r5, #8]
 800f18c:	f002 fd8e 	bl	8011cac <memcpy>
 800f190:	68ab      	ldr	r3, [r5, #8]
 800f192:	6928      	ldr	r0, [r5, #16]
 800f194:	4423      	add	r3, r4
 800f196:	4420      	add	r0, r4
 800f198:	1b36      	subs	r6, r6, r4
 800f19a:	60ab      	str	r3, [r5, #8]
 800f19c:	6128      	str	r0, [r5, #16]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	4631      	mov	r1, r6
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f7fa fe10 	bl	8009dc8 <ucdr_check_final_buffer_behavior_array>
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	1bb8      	subs	r0, r7, r6
 800f1ac:	4440      	add	r0, r8
 800f1ae:	4622      	mov	r2, r4
 800f1b0:	2c00      	cmp	r4, #0
 800f1b2:	d1ea      	bne.n	800f18a <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	7da8      	ldrb	r0, [r5, #22]
 800f1b8:	756b      	strb	r3, [r5, #21]
 800f1ba:	4058      	eors	r0, r3
 800f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c0:	463a      	mov	r2, r7
 800f1c2:	68a9      	ldr	r1, [r5, #8]
 800f1c4:	4640      	mov	r0, r8
 800f1c6:	f002 fd71 	bl	8011cac <memcpy>
 800f1ca:	68aa      	ldr	r2, [r5, #8]
 800f1cc:	692b      	ldr	r3, [r5, #16]
 800f1ce:	443a      	add	r2, r7
 800f1d0:	443b      	add	r3, r7
 800f1d2:	60aa      	str	r2, [r5, #8]
 800f1d4:	612b      	str	r3, [r5, #16]
 800f1d6:	e7ed      	b.n	800f1b4 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f1d8 <ucdr_serialize_sequence_char>:
 800f1d8:	b570      	push	{r4, r5, r6, lr}
 800f1da:	4615      	mov	r5, r2
 800f1dc:	460e      	mov	r6, r1
 800f1de:	7d01      	ldrb	r1, [r0, #20]
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	f7fa f8bf 	bl	8009364 <ucdr_serialize_endian_uint32_t>
 800f1e6:	b90d      	cbnz	r5, 800f1ec <ucdr_serialize_sequence_char+0x14>
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}
 800f1ec:	7d21      	ldrb	r1, [r4, #20]
 800f1ee:	462b      	mov	r3, r5
 800f1f0:	4632      	mov	r2, r6
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1f8:	f7ff bec2 	b.w	800ef80 <ucdr_serialize_endian_array_char>

0800f1fc <ucdr_deserialize_sequence_char>:
 800f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f200:	461d      	mov	r5, r3
 800f202:	4616      	mov	r6, r2
 800f204:	460f      	mov	r7, r1
 800f206:	461a      	mov	r2, r3
 800f208:	7d01      	ldrb	r1, [r0, #20]
 800f20a:	4604      	mov	r4, r0
 800f20c:	f7fa f9d2 	bl	80095b4 <ucdr_deserialize_endian_uint32_t>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	429e      	cmp	r6, r3
 800f214:	bf3c      	itt	cc
 800f216:	2201      	movcc	r2, #1
 800f218:	75a2      	strbcc	r2, [r4, #22]
 800f21a:	b913      	cbnz	r3, 800f222 <ucdr_deserialize_sequence_char+0x26>
 800f21c:	2001      	movs	r0, #1
 800f21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f222:	7d21      	ldrb	r1, [r4, #20]
 800f224:	463a      	mov	r2, r7
 800f226:	4620      	mov	r0, r4
 800f228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f22c:	f7ff beda 	b.w	800efe4 <ucdr_deserialize_endian_array_char>

0800f230 <ucdr_serialize_sequence_uint8_t>:
 800f230:	b570      	push	{r4, r5, r6, lr}
 800f232:	4615      	mov	r5, r2
 800f234:	460e      	mov	r6, r1
 800f236:	7d01      	ldrb	r1, [r0, #20]
 800f238:	4604      	mov	r4, r0
 800f23a:	f7fa f893 	bl	8009364 <ucdr_serialize_endian_uint32_t>
 800f23e:	b90d      	cbnz	r5, 800f244 <ucdr_serialize_sequence_uint8_t+0x14>
 800f240:	2001      	movs	r0, #1
 800f242:	bd70      	pop	{r4, r5, r6, pc}
 800f244:	7d21      	ldrb	r1, [r4, #20]
 800f246:	462b      	mov	r3, r5
 800f248:	4632      	mov	r2, r6
 800f24a:	4620      	mov	r0, r4
 800f24c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f250:	f7ff bf2c 	b.w	800f0ac <ucdr_serialize_endian_array_uint8_t>

0800f254 <ucdr_deserialize_sequence_uint8_t>:
 800f254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f258:	461d      	mov	r5, r3
 800f25a:	4616      	mov	r6, r2
 800f25c:	460f      	mov	r7, r1
 800f25e:	461a      	mov	r2, r3
 800f260:	7d01      	ldrb	r1, [r0, #20]
 800f262:	4604      	mov	r4, r0
 800f264:	f7fa f9a6 	bl	80095b4 <ucdr_deserialize_endian_uint32_t>
 800f268:	682b      	ldr	r3, [r5, #0]
 800f26a:	429e      	cmp	r6, r3
 800f26c:	bf3c      	itt	cc
 800f26e:	2201      	movcc	r2, #1
 800f270:	75a2      	strbcc	r2, [r4, #22]
 800f272:	b913      	cbnz	r3, 800f27a <ucdr_deserialize_sequence_uint8_t+0x26>
 800f274:	2001      	movs	r0, #1
 800f276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27a:	7d21      	ldrb	r1, [r4, #20]
 800f27c:	463a      	mov	r2, r7
 800f27e:	4620      	mov	r0, r4
 800f280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f284:	f7ff bf76 	b.w	800f174 <ucdr_deserialize_endian_array_uint8_t>

0800f288 <ucdr_serialize_string>:
 800f288:	b510      	push	{r4, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	4604      	mov	r4, r0
 800f28e:	4608      	mov	r0, r1
 800f290:	9101      	str	r1, [sp, #4]
 800f292:	f7f0 ffa7 	bl	80001e4 <strlen>
 800f296:	9901      	ldr	r1, [sp, #4]
 800f298:	1c42      	adds	r2, r0, #1
 800f29a:	4620      	mov	r0, r4
 800f29c:	b002      	add	sp, #8
 800f29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2a2:	f7ff bf99 	b.w	800f1d8 <ucdr_serialize_sequence_char>
 800f2a6:	bf00      	nop

0800f2a8 <ucdr_deserialize_string>:
 800f2a8:	b500      	push	{lr}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	ab01      	add	r3, sp, #4
 800f2ae:	f7ff ffa5 	bl	800f1fc <ucdr_deserialize_sequence_char>
 800f2b2:	b003      	add	sp, #12
 800f2b4:	f85d fb04 	ldr.w	pc, [sp], #4

0800f2b8 <get_custom_error>:
 800f2b8:	4b01      	ldr	r3, [pc, #4]	; (800f2c0 <get_custom_error+0x8>)
 800f2ba:	7818      	ldrb	r0, [r3, #0]
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	2000dc68 	.word	0x2000dc68

0800f2c4 <recv_custom_msg>:
 800f2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c8:	4693      	mov	fp, r2
 800f2ca:	b089      	sub	sp, #36	; 0x24
 800f2cc:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800f2d0:	9305      	str	r3, [sp, #20]
 800f2d2:	468a      	mov	sl, r1
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	f88d 101e 	strb.w	r1, [sp, #30]
 800f2dc:	b322      	cbz	r2, 800f328 <recv_custom_msg+0x64>
 800f2de:	f200 2902 	addw	r9, r0, #514	; 0x202
 800f2e2:	f10d 081f 	add.w	r8, sp, #31
 800f2e6:	af05      	add	r7, sp, #20
 800f2e8:	f10d 061e 	add.w	r6, sp, #30
 800f2ec:	f44f 7500 	mov.w	r5, #512	; 0x200
 800f2f0:	e002      	b.n	800f2f8 <recv_custom_msg+0x34>
 800f2f2:	9b05      	ldr	r3, [sp, #20]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	dd0f      	ble.n	800f318 <recv_custom_msg+0x54>
 800f2f8:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800f2fc:	4623      	mov	r3, r4
 800f2fe:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f302:	e9cd 5600 	strd	r5, r6, [sp]
 800f306:	4622      	mov	r2, r4
 800f308:	4648      	mov	r0, r9
 800f30a:	f001 f92d 	bl	8010568 <uxr_read_framed_msg>
 800f30e:	2800      	cmp	r0, #0
 800f310:	d0ef      	beq.n	800f2f2 <recv_custom_msg+0x2e>
 800f312:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f316:	b1b3      	cbz	r3, 800f346 <recv_custom_msg+0x82>
 800f318:	4b0f      	ldr	r3, [pc, #60]	; (800f358 <recv_custom_msg+0x94>)
 800f31a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	2000      	movs	r0, #0
 800f322:	b009      	add	sp, #36	; 0x24
 800f324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f328:	f10d 021f 	add.w	r2, sp, #31
 800f32c:	9200      	str	r2, [sp, #0]
 800f32e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800f332:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f336:	4601      	mov	r1, r0
 800f338:	47a8      	blx	r5
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d0ec      	beq.n	800f318 <recv_custom_msg+0x54>
 800f33e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d1e8      	bne.n	800f318 <recv_custom_msg+0x54>
 800f346:	f8cb 0000 	str.w	r0, [fp]
 800f34a:	2001      	movs	r0, #1
 800f34c:	f8ca 4000 	str.w	r4, [sl]
 800f350:	b009      	add	sp, #36	; 0x24
 800f352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f356:	bf00      	nop
 800f358:	2000dc68 	.word	0x2000dc68

0800f35c <send_custom_msg>:
 800f35c:	b530      	push	{r4, r5, lr}
 800f35e:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 800f362:	b087      	sub	sp, #28
 800f364:	4615      	mov	r5, r2
 800f366:	b974      	cbnz	r4, 800f386 <send_custom_msg+0x2a>
 800f368:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800f36c:	f10d 0317 	add.w	r3, sp, #23
 800f370:	47a0      	blx	r4
 800f372:	b108      	cbz	r0, 800f378 <send_custom_msg+0x1c>
 800f374:	42a8      	cmp	r0, r5
 800f376:	d015      	beq.n	800f3a4 <send_custom_msg+0x48>
 800f378:	4b0c      	ldr	r3, [pc, #48]	; (800f3ac <send_custom_msg+0x50>)
 800f37a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f37e:	701a      	strb	r2, [r3, #0]
 800f380:	2000      	movs	r0, #0
 800f382:	b007      	add	sp, #28
 800f384:	bd30      	pop	{r4, r5, pc}
 800f386:	460b      	mov	r3, r1
 800f388:	2200      	movs	r2, #0
 800f38a:	f10d 0117 	add.w	r1, sp, #23
 800f38e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f392:	4602      	mov	r2, r0
 800f394:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800f398:	9500      	str	r5, [sp, #0]
 800f39a:	f200 2002 	addw	r0, r0, #514	; 0x202
 800f39e:	f000 feeb 	bl	8010178 <uxr_write_framed_msg>
 800f3a2:	e7e6      	b.n	800f372 <send_custom_msg+0x16>
 800f3a4:	2001      	movs	r0, #1
 800f3a6:	b007      	add	sp, #28
 800f3a8:	bd30      	pop	{r4, r5, pc}
 800f3aa:	bf00      	nop
 800f3ac:	2000dc68 	.word	0x2000dc68

0800f3b0 <uxr_set_custom_transport_callbacks>:
 800f3b0:	b410      	push	{r4}
 800f3b2:	9c01      	ldr	r4, [sp, #4]
 800f3b4:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 800f3b8:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800f3bc:	9b02      	ldr	r3, [sp, #8]
 800f3be:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800f3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3c6:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 800f3ca:	4770      	bx	lr

0800f3cc <uxr_init_custom_transport>:
 800f3cc:	b538      	push	{r3, r4, r5, lr}
 800f3ce:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800f3d2:	b303      	cbz	r3, 800f416 <uxr_init_custom_transport+0x4a>
 800f3d4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800f3d8:	4604      	mov	r4, r0
 800f3da:	b1e2      	cbz	r2, 800f416 <uxr_init_custom_transport+0x4a>
 800f3dc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800f3e0:	b1ca      	cbz	r2, 800f416 <uxr_init_custom_transport+0x4a>
 800f3e2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800f3e6:	b1b2      	cbz	r2, 800f416 <uxr_init_custom_transport+0x4a>
 800f3e8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800f3ec:	4798      	blx	r3
 800f3ee:	4605      	mov	r5, r0
 800f3f0:	b188      	cbz	r0, 800f416 <uxr_init_custom_transport+0x4a>
 800f3f2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800f3f6:	b98b      	cbnz	r3, 800f41c <uxr_init_custom_transport+0x50>
 800f3f8:	490b      	ldr	r1, [pc, #44]	; (800f428 <uxr_init_custom_transport+0x5c>)
 800f3fa:	4b0c      	ldr	r3, [pc, #48]	; (800f42c <uxr_init_custom_transport+0x60>)
 800f3fc:	4a0c      	ldr	r2, [pc, #48]	; (800f430 <uxr_init_custom_transport+0x64>)
 800f3fe:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800f402:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f406:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800f40a:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800f40e:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800f412:	4628      	mov	r0, r5
 800f414:	bd38      	pop	{r3, r4, r5, pc}
 800f416:	2500      	movs	r5, #0
 800f418:	4628      	mov	r0, r5
 800f41a:	bd38      	pop	{r3, r4, r5, pc}
 800f41c:	2100      	movs	r1, #0
 800f41e:	f204 2002 	addw	r0, r4, #514	; 0x202
 800f422:	f000 fea3 	bl	801016c <uxr_init_framing_io>
 800f426:	e7e7      	b.n	800f3f8 <uxr_init_custom_transport+0x2c>
 800f428:	0800f35d 	.word	0x0800f35d
 800f42c:	0800f2c5 	.word	0x0800f2c5
 800f430:	0800f2b9 	.word	0x0800f2b9

0800f434 <uxr_close_custom_transport>:
 800f434:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800f438:	4718      	bx	r3
 800f43a:	bf00      	nop

0800f43c <uxr_init_input_best_effort_stream>:
 800f43c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f440:	8003      	strh	r3, [r0, #0]
 800f442:	4770      	bx	lr

0800f444 <uxr_reset_input_best_effort_stream>:
 800f444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f448:	8003      	strh	r3, [r0, #0]
 800f44a:	4770      	bx	lr

0800f44c <uxr_receive_best_effort_message>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	4604      	mov	r4, r0
 800f450:	8800      	ldrh	r0, [r0, #0]
 800f452:	460d      	mov	r5, r1
 800f454:	f000 fe72 	bl	801013c <uxr_seq_num_cmp>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800f460:	bfb8      	it	lt
 800f462:	8025      	strhlt	r5, [r4, #0]
 800f464:	bd38      	pop	{r3, r4, r5, pc}
 800f466:	bf00      	nop

0800f468 <on_full_input_buffer>:
 800f468:	b570      	push	{r4, r5, r6, lr}
 800f46a:	4605      	mov	r5, r0
 800f46c:	460c      	mov	r4, r1
 800f46e:	682b      	ldr	r3, [r5, #0]
 800f470:	6809      	ldr	r1, [r1, #0]
 800f472:	8920      	ldrh	r0, [r4, #8]
 800f474:	6862      	ldr	r2, [r4, #4]
 800f476:	fbb2 f2f0 	udiv	r2, r2, r0
 800f47a:	eba3 0c01 	sub.w	ip, r3, r1
 800f47e:	fbbc fcf2 	udiv	ip, ip, r2
 800f482:	f10c 0c01 	add.w	ip, ip, #1
 800f486:	fa1f f38c 	uxth.w	r3, ip
 800f48a:	fbb3 f6f0 	udiv	r6, r3, r0
 800f48e:	fb00 3316 	mls	r3, r0, r6, r3
 800f492:	b29b      	uxth	r3, r3
 800f494:	fb02 f303 	mul.w	r3, r2, r3
 800f498:	1d18      	adds	r0, r3, #4
 800f49a:	4408      	add	r0, r1
 800f49c:	7d26      	ldrb	r6, [r4, #20]
 800f49e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f4a2:	b116      	cbz	r6, 800f4aa <on_full_input_buffer+0x42>
 800f4a4:	2600      	movs	r6, #0
 800f4a6:	f840 6c04 	str.w	r6, [r0, #-4]
 800f4aa:	2a03      	cmp	r2, #3
 800f4ac:	d801      	bhi.n	800f4b2 <on_full_input_buffer+0x4a>
 800f4ae:	2001      	movs	r0, #1
 800f4b0:	bd70      	pop	{r4, r5, r6, pc}
 800f4b2:	3308      	adds	r3, #8
 800f4b4:	4419      	add	r1, r3
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	692b      	ldr	r3, [r5, #16]
 800f4ba:	3a04      	subs	r2, #4
 800f4bc:	f7fa fc48 	bl	8009d50 <ucdr_init_buffer_origin>
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	4903      	ldr	r1, [pc, #12]	; (800f4d0 <on_full_input_buffer+0x68>)
 800f4c4:	4622      	mov	r2, r4
 800f4c6:	f7fa fc1f 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
 800f4ce:	bf00      	nop
 800f4d0:	0800f469 	.word	0x0800f469

0800f4d4 <uxr_init_input_reliable_stream>:
 800f4d4:	b500      	push	{lr}
 800f4d6:	e9c0 1200 	strd	r1, r2, [r0]
 800f4da:	f04f 0e00 	mov.w	lr, #0
 800f4de:	9a01      	ldr	r2, [sp, #4]
 800f4e0:	8103      	strh	r3, [r0, #8]
 800f4e2:	6102      	str	r2, [r0, #16]
 800f4e4:	f880 e014 	strb.w	lr, [r0, #20]
 800f4e8:	b1d3      	cbz	r3, 800f520 <uxr_init_input_reliable_stream+0x4c>
 800f4ea:	f8c1 e000 	str.w	lr, [r1]
 800f4ee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f4f2:	f1bc 0f01 	cmp.w	ip, #1
 800f4f6:	d913      	bls.n	800f520 <uxr_init_input_reliable_stream+0x4c>
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	fbb3 f1fc 	udiv	r1, r3, ip
 800f4fe:	fb0c 3111 	mls	r1, ip, r1, r3
 800f502:	b289      	uxth	r1, r1
 800f504:	6842      	ldr	r2, [r0, #4]
 800f506:	fbb2 f2fc 	udiv	r2, r2, ip
 800f50a:	fb01 f202 	mul.w	r2, r1, r2
 800f50e:	6801      	ldr	r1, [r0, #0]
 800f510:	f841 e002 	str.w	lr, [r1, r2]
 800f514:	3301      	adds	r3, #1
 800f516:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	459c      	cmp	ip, r3
 800f51e:	d8ec      	bhi.n	800f4fa <uxr_init_input_reliable_stream+0x26>
 800f520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f524:	60c3      	str	r3, [r0, #12]
 800f526:	f85d fb04 	ldr.w	pc, [sp], #4
 800f52a:	bf00      	nop

0800f52c <uxr_reset_input_reliable_stream>:
 800f52c:	8901      	ldrh	r1, [r0, #8]
 800f52e:	b1e9      	cbz	r1, 800f56c <uxr_reset_input_reliable_stream+0x40>
 800f530:	f04f 0c00 	mov.w	ip, #0
 800f534:	b500      	push	{lr}
 800f536:	4663      	mov	r3, ip
 800f538:	46e6      	mov	lr, ip
 800f53a:	fbb3 f2f1 	udiv	r2, r3, r1
 800f53e:	fb01 3312 	mls	r3, r1, r2, r3
 800f542:	b29b      	uxth	r3, r3
 800f544:	6842      	ldr	r2, [r0, #4]
 800f546:	fbb2 f2f1 	udiv	r2, r2, r1
 800f54a:	fb02 f303 	mul.w	r3, r2, r3
 800f54e:	6802      	ldr	r2, [r0, #0]
 800f550:	f842 e003 	str.w	lr, [r2, r3]
 800f554:	f10c 0c01 	add.w	ip, ip, #1
 800f558:	8901      	ldrh	r1, [r0, #8]
 800f55a:	fa1f f38c 	uxth.w	r3, ip
 800f55e:	4299      	cmp	r1, r3
 800f560:	d8eb      	bhi.n	800f53a <uxr_reset_input_reliable_stream+0xe>
 800f562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f566:	60c3      	str	r3, [r0, #12]
 800f568:	f85d fb04 	ldr.w	pc, [sp], #4
 800f56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f570:	60c3      	str	r3, [r0, #12]
 800f572:	4770      	bx	lr

0800f574 <uxr_receive_reliable_message>:
 800f574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f578:	4604      	mov	r4, r0
 800f57a:	460d      	mov	r5, r1
 800f57c:	8901      	ldrh	r1, [r0, #8]
 800f57e:	8980      	ldrh	r0, [r0, #12]
 800f580:	4690      	mov	r8, r2
 800f582:	461f      	mov	r7, r3
 800f584:	f000 fdd2 	bl	801012c <uxr_seq_num_add>
 800f588:	4629      	mov	r1, r5
 800f58a:	4606      	mov	r6, r0
 800f58c:	89a0      	ldrh	r0, [r4, #12]
 800f58e:	f000 fdd5 	bl	801013c <uxr_seq_num_cmp>
 800f592:	2800      	cmp	r0, #0
 800f594:	db0a      	blt.n	800f5ac <uxr_receive_reliable_message+0x38>
 800f596:	2600      	movs	r6, #0
 800f598:	89e0      	ldrh	r0, [r4, #14]
 800f59a:	4629      	mov	r1, r5
 800f59c:	f000 fdce 	bl	801013c <uxr_seq_num_cmp>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	da00      	bge.n	800f5a6 <uxr_receive_reliable_message+0x32>
 800f5a4:	81e5      	strh	r5, [r4, #14]
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	f000 fdc4 	bl	801013c <uxr_seq_num_cmp>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	dbee      	blt.n	800f596 <uxr_receive_reliable_message+0x22>
 800f5b8:	6923      	ldr	r3, [r4, #16]
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4798      	blx	r3
 800f5be:	2101      	movs	r1, #1
 800f5c0:	4681      	mov	r9, r0
 800f5c2:	89a0      	ldrh	r0, [r4, #12]
 800f5c4:	f000 fdb2 	bl	801012c <uxr_seq_num_add>
 800f5c8:	f1b9 0f00 	cmp.w	r9, #0
 800f5cc:	d101      	bne.n	800f5d2 <uxr_receive_reliable_message+0x5e>
 800f5ce:	4285      	cmp	r5, r0
 800f5d0:	d047      	beq.n	800f662 <uxr_receive_reliable_message+0xee>
 800f5d2:	8922      	ldrh	r2, [r4, #8]
 800f5d4:	fbb5 f0f2 	udiv	r0, r5, r2
 800f5d8:	fb02 5010 	mls	r0, r2, r0, r5
 800f5dc:	b280      	uxth	r0, r0
 800f5de:	6863      	ldr	r3, [r4, #4]
 800f5e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5e4:	fb00 f303 	mul.w	r3, r0, r3
 800f5e8:	6820      	ldr	r0, [r4, #0]
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	4418      	add	r0, r3
 800f5ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1cf      	bne.n	800f596 <uxr_receive_reliable_message+0x22>
 800f5f6:	4641      	mov	r1, r8
 800f5f8:	463a      	mov	r2, r7
 800f5fa:	f002 fb57 	bl	8011cac <memcpy>
 800f5fe:	8921      	ldrh	r1, [r4, #8]
 800f600:	fbb5 f2f1 	udiv	r2, r5, r1
 800f604:	fb01 5212 	mls	r2, r1, r2, r5
 800f608:	b292      	uxth	r2, r2
 800f60a:	6863      	ldr	r3, [r4, #4]
 800f60c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f610:	fb02 f303 	mul.w	r3, r2, r3
 800f614:	6822      	ldr	r2, [r4, #0]
 800f616:	50d7      	str	r7, [r2, r3]
 800f618:	9a08      	ldr	r2, [sp, #32]
 800f61a:	2301      	movs	r3, #1
 800f61c:	7013      	strb	r3, [r2, #0]
 800f61e:	f1b9 0f00 	cmp.w	r9, #0
 800f622:	d0b8      	beq.n	800f596 <uxr_receive_reliable_message+0x22>
 800f624:	89a6      	ldrh	r6, [r4, #12]
 800f626:	4630      	mov	r0, r6
 800f628:	2101      	movs	r1, #1
 800f62a:	f000 fd7f 	bl	801012c <uxr_seq_num_add>
 800f62e:	8922      	ldrh	r2, [r4, #8]
 800f630:	6863      	ldr	r3, [r4, #4]
 800f632:	fbb3 f3f2 	udiv	r3, r3, r2
 800f636:	4606      	mov	r6, r0
 800f638:	fbb0 f0f2 	udiv	r0, r0, r2
 800f63c:	fb02 6010 	mls	r0, r2, r0, r6
 800f640:	b280      	uxth	r0, r0
 800f642:	fb00 f303 	mul.w	r3, r0, r3
 800f646:	6820      	ldr	r0, [r4, #0]
 800f648:	3304      	adds	r3, #4
 800f64a:	4418      	add	r0, r3
 800f64c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d0a0      	beq.n	800f596 <uxr_receive_reliable_message+0x22>
 800f654:	6923      	ldr	r3, [r4, #16]
 800f656:	4798      	blx	r3
 800f658:	2802      	cmp	r0, #2
 800f65a:	d008      	beq.n	800f66e <uxr_receive_reliable_message+0xfa>
 800f65c:	2801      	cmp	r0, #1
 800f65e:	d0e2      	beq.n	800f626 <uxr_receive_reliable_message+0xb2>
 800f660:	e799      	b.n	800f596 <uxr_receive_reliable_message+0x22>
 800f662:	9b08      	ldr	r3, [sp, #32]
 800f664:	81a5      	strh	r5, [r4, #12]
 800f666:	2601      	movs	r6, #1
 800f668:	f883 9000 	strb.w	r9, [r3]
 800f66c:	e794      	b.n	800f598 <uxr_receive_reliable_message+0x24>
 800f66e:	2601      	movs	r6, #1
 800f670:	e792      	b.n	800f598 <uxr_receive_reliable_message+0x24>
 800f672:	bf00      	nop

0800f674 <uxr_next_input_reliable_buffer_available>:
 800f674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f678:	4604      	mov	r4, r0
 800f67a:	460f      	mov	r7, r1
 800f67c:	8980      	ldrh	r0, [r0, #12]
 800f67e:	2101      	movs	r1, #1
 800f680:	4690      	mov	r8, r2
 800f682:	f000 fd53 	bl	801012c <uxr_seq_num_add>
 800f686:	8922      	ldrh	r2, [r4, #8]
 800f688:	fbb0 f6f2 	udiv	r6, r0, r2
 800f68c:	fb02 0616 	mls	r6, r2, r6, r0
 800f690:	b2b6      	uxth	r6, r6
 800f692:	6863      	ldr	r3, [r4, #4]
 800f694:	fbb3 f3f2 	udiv	r3, r3, r2
 800f698:	fb06 f303 	mul.w	r3, r6, r3
 800f69c:	6826      	ldr	r6, [r4, #0]
 800f69e:	3304      	adds	r3, #4
 800f6a0:	441e      	add	r6, r3
 800f6a2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800f6a6:	f1b9 0f00 	cmp.w	r9, #0
 800f6aa:	d023      	beq.n	800f6f4 <uxr_next_input_reliable_buffer_available+0x80>
 800f6ac:	6923      	ldr	r3, [r4, #16]
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	4798      	blx	r3
 800f6b4:	4682      	mov	sl, r0
 800f6b6:	b300      	cbz	r0, 800f6fa <uxr_next_input_reliable_buffer_available+0x86>
 800f6b8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800f6bc:	2101      	movs	r1, #1
 800f6be:	4650      	mov	r0, sl
 800f6c0:	f000 fd34 	bl	801012c <uxr_seq_num_add>
 800f6c4:	8921      	ldrh	r1, [r4, #8]
 800f6c6:	fbb0 f2f1 	udiv	r2, r0, r1
 800f6ca:	4682      	mov	sl, r0
 800f6cc:	fb01 0212 	mls	r2, r1, r2, r0
 800f6d0:	e9d4 0300 	ldrd	r0, r3, [r4]
 800f6d4:	b292      	uxth	r2, r2
 800f6d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6da:	fb02 f303 	mul.w	r3, r2, r3
 800f6de:	3304      	adds	r3, #4
 800f6e0:	4418      	add	r0, r3
 800f6e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f6e6:	b12b      	cbz	r3, 800f6f4 <uxr_next_input_reliable_buffer_available+0x80>
 800f6e8:	6923      	ldr	r3, [r4, #16]
 800f6ea:	4798      	blx	r3
 800f6ec:	2802      	cmp	r0, #2
 800f6ee:	d01b      	beq.n	800f728 <uxr_next_input_reliable_buffer_available+0xb4>
 800f6f0:	2801      	cmp	r0, #1
 800f6f2:	d0e3      	beq.n	800f6bc <uxr_next_input_reliable_buffer_available+0x48>
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6fa:	464a      	mov	r2, r9
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4638      	mov	r0, r7
 800f700:	f7fa fb2e 	bl	8009d60 <ucdr_init_buffer>
 800f704:	8921      	ldrh	r1, [r4, #8]
 800f706:	fbb5 f2f1 	udiv	r2, r5, r1
 800f70a:	fb01 5212 	mls	r2, r1, r2, r5
 800f70e:	b292      	uxth	r2, r2
 800f710:	6863      	ldr	r3, [r4, #4]
 800f712:	fbb3 f3f1 	udiv	r3, r3, r1
 800f716:	fb02 f303 	mul.w	r3, r2, r3
 800f71a:	6822      	ldr	r2, [r4, #0]
 800f71c:	f842 a003 	str.w	sl, [r2, r3]
 800f720:	2001      	movs	r0, #1
 800f722:	81a5      	strh	r5, [r4, #12]
 800f724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f728:	8920      	ldrh	r0, [r4, #8]
 800f72a:	fbb5 f3f0 	udiv	r3, r5, r0
 800f72e:	fb00 5513 	mls	r5, r0, r3, r5
 800f732:	b2ad      	uxth	r5, r5
 800f734:	6863      	ldr	r3, [r4, #4]
 800f736:	fbb3 f3f0 	udiv	r3, r3, r0
 800f73a:	fb03 f505 	mul.w	r5, r3, r5
 800f73e:	6823      	ldr	r3, [r4, #0]
 800f740:	2000      	movs	r0, #0
 800f742:	5158      	str	r0, [r3, r5]
 800f744:	eb06 0108 	add.w	r1, r6, r8
 800f748:	eba9 0208 	sub.w	r2, r9, r8
 800f74c:	4638      	mov	r0, r7
 800f74e:	f7fa fb07 	bl	8009d60 <ucdr_init_buffer>
 800f752:	4638      	mov	r0, r7
 800f754:	4903      	ldr	r1, [pc, #12]	; (800f764 <uxr_next_input_reliable_buffer_available+0xf0>)
 800f756:	4622      	mov	r2, r4
 800f758:	f7fa fad6 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800f75c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800f760:	2001      	movs	r0, #1
 800f762:	e7c8      	b.n	800f6f6 <uxr_next_input_reliable_buffer_available+0x82>
 800f764:	0800f469 	.word	0x0800f469

0800f768 <uxr_process_heartbeat>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4611      	mov	r1, r2
 800f76c:	4604      	mov	r4, r0
 800f76e:	89c0      	ldrh	r0, [r0, #14]
 800f770:	4615      	mov	r5, r2
 800f772:	f000 fce3 	bl	801013c <uxr_seq_num_cmp>
 800f776:	2800      	cmp	r0, #0
 800f778:	bfb8      	it	lt
 800f77a:	81e5      	strhlt	r5, [r4, #14]
 800f77c:	bd38      	pop	{r3, r4, r5, pc}
 800f77e:	bf00      	nop

0800f780 <uxr_compute_acknack>:
 800f780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f784:	8903      	ldrh	r3, [r0, #8]
 800f786:	8985      	ldrh	r5, [r0, #12]
 800f788:	4604      	mov	r4, r0
 800f78a:	460e      	mov	r6, r1
 800f78c:	b1d3      	cbz	r3, 800f7c4 <uxr_compute_acknack+0x44>
 800f78e:	4628      	mov	r0, r5
 800f790:	2701      	movs	r7, #1
 800f792:	e003      	b.n	800f79c <uxr_compute_acknack+0x1c>
 800f794:	4567      	cmp	r7, ip
 800f796:	d215      	bcs.n	800f7c4 <uxr_compute_acknack+0x44>
 800f798:	89a0      	ldrh	r0, [r4, #12]
 800f79a:	3701      	adds	r7, #1
 800f79c:	b2b9      	uxth	r1, r7
 800f79e:	f000 fcc5 	bl	801012c <uxr_seq_num_add>
 800f7a2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f7a6:	fbb0 f3fc 	udiv	r3, r0, ip
 800f7aa:	fb0c 0313 	mls	r3, ip, r3, r0
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	e9d4 1300 	ldrd	r1, r3, [r4]
 800f7b4:	fbb3 f3fc 	udiv	r3, r3, ip
 800f7b8:	fb02 f303 	mul.w	r3, r2, r3
 800f7bc:	58cb      	ldr	r3, [r1, r3]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1e8      	bne.n	800f794 <uxr_compute_acknack+0x14>
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	8035      	strh	r5, [r6, #0]
 800f7c6:	2101      	movs	r1, #1
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	89e7      	ldrh	r7, [r4, #14]
 800f7cc:	f000 fcb2 	bl	8010134 <uxr_seq_num_sub>
 800f7d0:	4601      	mov	r1, r0
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	f000 fcae 	bl	8010134 <uxr_seq_num_sub>
 800f7d8:	4605      	mov	r5, r0
 800f7da:	b318      	cbz	r0, 800f824 <uxr_compute_acknack+0xa4>
 800f7dc:	f04f 0900 	mov.w	r9, #0
 800f7e0:	464f      	mov	r7, r9
 800f7e2:	f04f 0801 	mov.w	r8, #1
 800f7e6:	fa1f f189 	uxth.w	r1, r9
 800f7ea:	8830      	ldrh	r0, [r6, #0]
 800f7ec:	f000 fc9e 	bl	801012c <uxr_seq_num_add>
 800f7f0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f7f4:	fbb0 f3fc 	udiv	r3, r0, ip
 800f7f8:	e9d4 1200 	ldrd	r1, r2, [r4]
 800f7fc:	fb03 001c 	mls	r0, r3, ip, r0
 800f800:	b283      	uxth	r3, r0
 800f802:	fbb2 f2fc 	udiv	r2, r2, ip
 800f806:	fb02 f303 	mul.w	r3, r2, r3
 800f80a:	fa08 f209 	lsl.w	r2, r8, r9
 800f80e:	58cb      	ldr	r3, [r1, r3]
 800f810:	f109 0901 	add.w	r9, r9, #1
 800f814:	b90b      	cbnz	r3, 800f81a <uxr_compute_acknack+0x9a>
 800f816:	4317      	orrs	r7, r2
 800f818:	b2bf      	uxth	r7, r7
 800f81a:	454d      	cmp	r5, r9
 800f81c:	d1e3      	bne.n	800f7e6 <uxr_compute_acknack+0x66>
 800f81e:	4638      	mov	r0, r7
 800f820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f824:	4607      	mov	r7, r0
 800f826:	4638      	mov	r0, r7
 800f828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f82c <uxr_init_output_best_effort_stream>:
 800f82c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800f830:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800f834:	6001      	str	r1, [r0, #0]
 800f836:	7303      	strb	r3, [r0, #12]
 800f838:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop

0800f840 <uxr_reset_output_best_effort_stream>:
 800f840:	7b02      	ldrb	r2, [r0, #12]
 800f842:	6042      	str	r2, [r0, #4]
 800f844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f848:	81c3      	strh	r3, [r0, #14]
 800f84a:	4770      	bx	lr

0800f84c <uxr_prepare_best_effort_buffer_to_write>:
 800f84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f84e:	4604      	mov	r4, r0
 800f850:	b083      	sub	sp, #12
 800f852:	6840      	ldr	r0, [r0, #4]
 800f854:	460d      	mov	r5, r1
 800f856:	4616      	mov	r6, r2
 800f858:	f7fb fef4 	bl	800b644 <uxr_submessage_padding>
 800f85c:	6863      	ldr	r3, [r4, #4]
 800f85e:	4418      	add	r0, r3
 800f860:	68a3      	ldr	r3, [r4, #8]
 800f862:	1942      	adds	r2, r0, r5
 800f864:	4293      	cmp	r3, r2
 800f866:	bf2c      	ite	cs
 800f868:	2701      	movcs	r7, #1
 800f86a:	2700      	movcc	r7, #0
 800f86c:	d202      	bcs.n	800f874 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800f86e:	4638      	mov	r0, r7
 800f870:	b003      	add	sp, #12
 800f872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f874:	9000      	str	r0, [sp, #0]
 800f876:	6821      	ldr	r1, [r4, #0]
 800f878:	4630      	mov	r0, r6
 800f87a:	2300      	movs	r3, #0
 800f87c:	f7fa fa5e 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800f880:	6861      	ldr	r1, [r4, #4]
 800f882:	4638      	mov	r0, r7
 800f884:	4429      	add	r1, r5
 800f886:	6061      	str	r1, [r4, #4]
 800f888:	b003      	add	sp, #12
 800f88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f88c <uxr_prepare_best_effort_buffer_to_send>:
 800f88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f890:	4604      	mov	r4, r0
 800f892:	461d      	mov	r5, r3
 800f894:	6840      	ldr	r0, [r0, #4]
 800f896:	7b23      	ldrb	r3, [r4, #12]
 800f898:	4298      	cmp	r0, r3
 800f89a:	bf8c      	ite	hi
 800f89c:	2601      	movhi	r6, #1
 800f89e:	2600      	movls	r6, #0
 800f8a0:	d802      	bhi.n	800f8a8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a8:	4688      	mov	r8, r1
 800f8aa:	89e0      	ldrh	r0, [r4, #14]
 800f8ac:	2101      	movs	r1, #1
 800f8ae:	4617      	mov	r7, r2
 800f8b0:	f000 fc3c 	bl	801012c <uxr_seq_num_add>
 800f8b4:	6823      	ldr	r3, [r4, #0]
 800f8b6:	81e0      	strh	r0, [r4, #14]
 800f8b8:	8028      	strh	r0, [r5, #0]
 800f8ba:	f8c8 3000 	str.w	r3, [r8]
 800f8be:	6863      	ldr	r3, [r4, #4]
 800f8c0:	603b      	str	r3, [r7, #0]
 800f8c2:	7b23      	ldrb	r3, [r4, #12]
 800f8c4:	6063      	str	r3, [r4, #4]
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8cc <on_full_output_buffer>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	6802      	ldr	r2, [r0, #0]
 800f8d0:	460c      	mov	r4, r1
 800f8d2:	6809      	ldr	r1, [r1, #0]
 800f8d4:	8923      	ldrh	r3, [r4, #8]
 800f8d6:	eba2 0c01 	sub.w	ip, r2, r1
 800f8da:	6862      	ldr	r2, [r4, #4]
 800f8dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800f8e0:	fbbc fcf2 	udiv	ip, ip, r2
 800f8e4:	f10c 0c01 	add.w	ip, ip, #1
 800f8e8:	fa1f fc8c 	uxth.w	ip, ip
 800f8ec:	fbbc fef3 	udiv	lr, ip, r3
 800f8f0:	fb03 c31e 	mls	r3, r3, lr, ip
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	fb02 f303 	mul.w	r3, r2, r3
 800f8fa:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800f8fe:	58ca      	ldr	r2, [r1, r3]
 800f900:	4463      	add	r3, ip
 800f902:	eba2 020c 	sub.w	r2, r2, ip
 800f906:	3308      	adds	r3, #8
 800f908:	4605      	mov	r5, r0
 800f90a:	4419      	add	r1, r3
 800f90c:	3a04      	subs	r2, #4
 800f90e:	6903      	ldr	r3, [r0, #16]
 800f910:	f7fa fa1e 	bl	8009d50 <ucdr_init_buffer_origin>
 800f914:	4628      	mov	r0, r5
 800f916:	4903      	ldr	r1, [pc, #12]	; (800f924 <on_full_output_buffer+0x58>)
 800f918:	4622      	mov	r2, r4
 800f91a:	f7fa f9f5 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800f91e:	2000      	movs	r0, #0
 800f920:	bd38      	pop	{r3, r4, r5, pc}
 800f922:	bf00      	nop
 800f924:	0800f8cd 	.word	0x0800f8cd

0800f928 <uxr_init_output_reliable_stream>:
 800f928:	b410      	push	{r4}
 800f92a:	f89d c004 	ldrb.w	ip, [sp, #4]
 800f92e:	8103      	strh	r3, [r0, #8]
 800f930:	e9c0 1200 	strd	r1, r2, [r0]
 800f934:	f880 c00c 	strb.w	ip, [r0, #12]
 800f938:	b1d3      	cbz	r3, 800f970 <uxr_init_output_reliable_stream+0x48>
 800f93a:	f8c1 c000 	str.w	ip, [r1]
 800f93e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f942:	f1bc 0f01 	cmp.w	ip, #1
 800f946:	d913      	bls.n	800f970 <uxr_init_output_reliable_stream+0x48>
 800f948:	2301      	movs	r3, #1
 800f94a:	fbb3 f1fc 	udiv	r1, r3, ip
 800f94e:	fb0c 3111 	mls	r1, ip, r1, r3
 800f952:	b289      	uxth	r1, r1
 800f954:	6842      	ldr	r2, [r0, #4]
 800f956:	6804      	ldr	r4, [r0, #0]
 800f958:	fbb2 f2fc 	udiv	r2, r2, ip
 800f95c:	fb01 f202 	mul.w	r2, r1, r2
 800f960:	7b01      	ldrb	r1, [r0, #12]
 800f962:	50a1      	str	r1, [r4, r2]
 800f964:	3301      	adds	r3, #1
 800f966:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	459c      	cmp	ip, r3
 800f96e:	d8ec      	bhi.n	800f94a <uxr_init_output_reliable_stream+0x22>
 800f970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f974:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f978:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800f97c:	4905      	ldr	r1, [pc, #20]	; (800f994 <uxr_init_output_reliable_stream+0x6c>)
 800f97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f982:	f8c0 100e 	str.w	r1, [r0, #14]
 800f986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f98a:	2300      	movs	r3, #0
 800f98c:	8242      	strh	r2, [r0, #18]
 800f98e:	8403      	strh	r3, [r0, #32]
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	ffff0000 	.word	0xffff0000

0800f998 <uxr_reset_output_reliable_stream>:
 800f998:	8901      	ldrh	r1, [r0, #8]
 800f99a:	b1b1      	cbz	r1, 800f9ca <uxr_reset_output_reliable_stream+0x32>
 800f99c:	f04f 0c00 	mov.w	ip, #0
 800f9a0:	4663      	mov	r3, ip
 800f9a2:	fbb3 f2f1 	udiv	r2, r3, r1
 800f9a6:	fb01 3312 	mls	r3, r1, r2, r3
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	6842      	ldr	r2, [r0, #4]
 800f9ae:	fbb2 f2f1 	udiv	r2, r2, r1
 800f9b2:	6801      	ldr	r1, [r0, #0]
 800f9b4:	fb02 f303 	mul.w	r3, r2, r3
 800f9b8:	7b02      	ldrb	r2, [r0, #12]
 800f9ba:	50ca      	str	r2, [r1, r3]
 800f9bc:	f10c 0c01 	add.w	ip, ip, #1
 800f9c0:	8901      	ldrh	r1, [r0, #8]
 800f9c2:	fa1f f38c 	uxth.w	r3, ip
 800f9c6:	4299      	cmp	r1, r3
 800f9c8:	d8eb      	bhi.n	800f9a2 <uxr_reset_output_reliable_stream+0xa>
 800f9ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f9d2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800f9d6:	4904      	ldr	r1, [pc, #16]	; (800f9e8 <uxr_reset_output_reliable_stream+0x50>)
 800f9d8:	f8c0 100e 	str.w	r1, [r0, #14]
 800f9dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	8242      	strh	r2, [r0, #18]
 800f9e4:	8403      	strh	r3, [r0, #32]
 800f9e6:	4770      	bx	lr
 800f9e8:	ffff0000 	.word	0xffff0000

0800f9ec <uxr_prepare_reliable_buffer_to_write>:
 800f9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	b091      	sub	sp, #68	; 0x44
 800f9f4:	8900      	ldrh	r0, [r0, #8]
 800f9f6:	89e6      	ldrh	r6, [r4, #14]
 800f9f8:	6823      	ldr	r3, [r4, #0]
 800f9fa:	9204      	str	r2, [sp, #16]
 800f9fc:	fbb6 f2f0 	udiv	r2, r6, r0
 800fa00:	fb00 6212 	mls	r2, r0, r2, r6
 800fa04:	b292      	uxth	r2, r2
 800fa06:	6865      	ldr	r5, [r4, #4]
 800fa08:	fbb5 f5f0 	udiv	r5, r5, r0
 800fa0c:	fb05 3202 	mla	r2, r5, r2, r3
 800fa10:	3204      	adds	r2, #4
 800fa12:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800fa16:	f894 900c 	ldrb.w	r9, [r4, #12]
 800fa1a:	9203      	str	r2, [sp, #12]
 800fa1c:	468b      	mov	fp, r1
 800fa1e:	1f2f      	subs	r7, r5, #4
 800fa20:	2800      	cmp	r0, #0
 800fa22:	f000 814c 	beq.w	800fcbe <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800fa26:	f04f 0c00 	mov.w	ip, #0
 800fa2a:	46e2      	mov	sl, ip
 800fa2c:	4661      	mov	r1, ip
 800fa2e:	fbb1 f2f0 	udiv	r2, r1, r0
 800fa32:	fb00 1212 	mls	r2, r0, r2, r1
 800fa36:	b292      	uxth	r2, r2
 800fa38:	fb05 f202 	mul.w	r2, r5, r2
 800fa3c:	f10c 0c01 	add.w	ip, ip, #1
 800fa40:	589a      	ldr	r2, [r3, r2]
 800fa42:	454a      	cmp	r2, r9
 800fa44:	bf08      	it	eq
 800fa46:	f10a 0a01 	addeq.w	sl, sl, #1
 800fa4a:	fa1f f18c 	uxth.w	r1, ip
 800fa4e:	bf08      	it	eq
 800fa50:	fa1f fa8a 	uxtheq.w	sl, sl
 800fa54:	4281      	cmp	r1, r0
 800fa56:	d3ea      	bcc.n	800fa2e <uxr_prepare_reliable_buffer_to_write+0x42>
 800fa58:	4640      	mov	r0, r8
 800fa5a:	2104      	movs	r1, #4
 800fa5c:	f8cd a014 	str.w	sl, [sp, #20]
 800fa60:	f7fa f982 	bl	8009d68 <ucdr_alignment>
 800fa64:	4480      	add	r8, r0
 800fa66:	eb08 020b 	add.w	r2, r8, fp
 800fa6a:	42ba      	cmp	r2, r7
 800fa6c:	f240 80cd 	bls.w	800fc0a <uxr_prepare_reliable_buffer_to_write+0x21e>
 800fa70:	7b22      	ldrb	r2, [r4, #12]
 800fa72:	445a      	add	r2, fp
 800fa74:	42ba      	cmp	r2, r7
 800fa76:	f240 80b5 	bls.w	800fbe4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800fa7a:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 800fa7e:	33fc      	adds	r3, #252	; 0xfc
 800fa80:	b2ba      	uxth	r2, r7
 800fa82:	4413      	add	r3, r2
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	fb0a f903 	mul.w	r9, sl, r3
 800fa8a:	45d9      	cmp	r9, fp
 800fa8c:	9305      	str	r3, [sp, #20]
 800fa8e:	9306      	str	r3, [sp, #24]
 800fa90:	f0c0 80b7 	bcc.w	800fc02 <uxr_prepare_reliable_buffer_to_write+0x216>
 800fa94:	f108 0304 	add.w	r3, r8, #4
 800fa98:	42bb      	cmp	r3, r7
 800fa9a:	f080 80db 	bcs.w	800fc54 <uxr_prepare_reliable_buffer_to_write+0x268>
 800fa9e:	f1a2 0904 	sub.w	r9, r2, #4
 800faa2:	eba9 0908 	sub.w	r9, r9, r8
 800faa6:	9b05      	ldr	r3, [sp, #20]
 800faa8:	fa1f f989 	uxth.w	r9, r9
 800faac:	ebab 0b09 	sub.w	fp, fp, r9
 800fab0:	fbbb f2f3 	udiv	r2, fp, r3
 800fab4:	fb03 b312 	mls	r3, r3, r2, fp
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 80c8 	beq.w	800fc4e <uxr_prepare_reliable_buffer_to_write+0x262>
 800fabe:	3201      	adds	r2, #1
 800fac0:	b292      	uxth	r2, r2
 800fac2:	9306      	str	r3, [sp, #24]
 800fac4:	4552      	cmp	r2, sl
 800fac6:	f200 809c 	bhi.w	800fc02 <uxr_prepare_reliable_buffer_to_write+0x216>
 800faca:	f10d 0b20 	add.w	fp, sp, #32
 800face:	2a00      	cmp	r2, #0
 800fad0:	d042      	beq.n	800fb58 <uxr_prepare_reliable_buffer_to_write+0x16c>
 800fad2:	f8cd 801c 	str.w	r8, [sp, #28]
 800fad6:	f04f 0a00 	mov.w	sl, #0
 800fada:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fade:	9505      	str	r5, [sp, #20]
 800fae0:	f10d 0b20 	add.w	fp, sp, #32
 800fae4:	4615      	mov	r5, r2
 800fae6:	e000      	b.n	800faea <uxr_prepare_reliable_buffer_to_write+0xfe>
 800fae8:	46c1      	mov	r9, r8
 800faea:	8920      	ldrh	r0, [r4, #8]
 800faec:	fbb6 f2f0 	udiv	r2, r6, r0
 800faf0:	fb00 6112 	mls	r1, r0, r2, r6
 800faf4:	b28a      	uxth	r2, r1
 800faf6:	6863      	ldr	r3, [r4, #4]
 800faf8:	fbb3 f1f0 	udiv	r1, r3, r0
 800fafc:	6823      	ldr	r3, [r4, #0]
 800fafe:	fb02 f101 	mul.w	r1, r2, r1
 800fb02:	3104      	adds	r1, #4
 800fb04:	4419      	add	r1, r3
 800fb06:	4658      	mov	r0, fp
 800fb08:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800fb0c:	9200      	str	r2, [sp, #0]
 800fb0e:	2300      	movs	r3, #0
 800fb10:	463a      	mov	r2, r7
 800fb12:	f7fa f913 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800fb16:	464a      	mov	r2, r9
 800fb18:	2300      	movs	r3, #0
 800fb1a:	210d      	movs	r1, #13
 800fb1c:	4658      	mov	r0, fp
 800fb1e:	f7fb fd51 	bl	800b5c4 <uxr_buffer_submessage_header>
 800fb22:	8921      	ldrh	r1, [r4, #8]
 800fb24:	fbb6 f2f1 	udiv	r2, r6, r1
 800fb28:	fb01 6212 	mls	r2, r1, r2, r6
 800fb2c:	b292      	uxth	r2, r2
 800fb2e:	6863      	ldr	r3, [r4, #4]
 800fb30:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb34:	fb02 f303 	mul.w	r3, r2, r3
 800fb38:	6822      	ldr	r2, [r4, #0]
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	50d7      	str	r7, [r2, r3]
 800fb3e:	2101      	movs	r1, #1
 800fb40:	f000 faf4 	bl	801012c <uxr_seq_num_add>
 800fb44:	f10a 0a01 	add.w	sl, sl, #1
 800fb48:	fa1f f38a 	uxth.w	r3, sl
 800fb4c:	429d      	cmp	r5, r3
 800fb4e:	4606      	mov	r6, r0
 800fb50:	d8ca      	bhi.n	800fae8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 800fb52:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fb56:	9d05      	ldr	r5, [sp, #20]
 800fb58:	8920      	ldrh	r0, [r4, #8]
 800fb5a:	fbb6 f3f0 	udiv	r3, r6, r0
 800fb5e:	fb00 6313 	mls	r3, r0, r3, r6
 800fb62:	b299      	uxth	r1, r3
 800fb64:	6863      	ldr	r3, [r4, #4]
 800fb66:	fbb3 f3f0 	udiv	r3, r3, r0
 800fb6a:	fb01 f303 	mul.w	r3, r1, r3
 800fb6e:	6821      	ldr	r1, [r4, #0]
 800fb70:	3304      	adds	r3, #4
 800fb72:	4419      	add	r1, r3
 800fb74:	463a      	mov	r2, r7
 800fb76:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800fb7a:	9000      	str	r0, [sp, #0]
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	4658      	mov	r0, fp
 800fb80:	f7fa f8dc 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800fb84:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800fb88:	4658      	mov	r0, fp
 800fb8a:	fa1f f289 	uxth.w	r2, r9
 800fb8e:	2302      	movs	r3, #2
 800fb90:	210d      	movs	r1, #13
 800fb92:	f7fb fd17 	bl	800b5c4 <uxr_buffer_submessage_header>
 800fb96:	9b03      	ldr	r3, [sp, #12]
 800fb98:	8927      	ldrh	r7, [r4, #8]
 800fb9a:	7b20      	ldrb	r0, [r4, #12]
 800fb9c:	f108 0104 	add.w	r1, r8, #4
 800fba0:	440b      	add	r3, r1
 800fba2:	4619      	mov	r1, r3
 800fba4:	fbb6 f3f7 	udiv	r3, r6, r7
 800fba8:	fb07 6313 	mls	r3, r7, r3, r6
 800fbac:	f1a5 0208 	sub.w	r2, r5, #8
 800fbb0:	b29d      	uxth	r5, r3
 800fbb2:	3004      	adds	r0, #4
 800fbb4:	6863      	ldr	r3, [r4, #4]
 800fbb6:	fbb3 f3f7 	udiv	r3, r3, r7
 800fbba:	fb05 f303 	mul.w	r3, r5, r3
 800fbbe:	6825      	ldr	r5, [r4, #0]
 800fbc0:	4448      	add	r0, r9
 800fbc2:	50e8      	str	r0, [r5, r3]
 800fbc4:	9d04      	ldr	r5, [sp, #16]
 800fbc6:	eba2 0208 	sub.w	r2, r2, r8
 800fbca:	4628      	mov	r0, r5
 800fbcc:	f7fa f8c8 	bl	8009d60 <ucdr_init_buffer>
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	493c      	ldr	r1, [pc, #240]	; (800fcc4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800fbd4:	4622      	mov	r2, r4
 800fbd6:	f7fa f897 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800fbda:	2001      	movs	r0, #1
 800fbdc:	81e6      	strh	r6, [r4, #14]
 800fbde:	b011      	add	sp, #68	; 0x44
 800fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	89e0      	ldrh	r0, [r4, #14]
 800fbe8:	f000 faa0 	bl	801012c <uxr_seq_num_add>
 800fbec:	8921      	ldrh	r1, [r4, #8]
 800fbee:	4605      	mov	r5, r0
 800fbf0:	8a60      	ldrh	r0, [r4, #18]
 800fbf2:	f000 fa9b 	bl	801012c <uxr_seq_num_add>
 800fbf6:	4601      	mov	r1, r0
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	f000 fa9f 	bl	801013c <uxr_seq_num_cmp>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	dd42      	ble.n	800fc88 <uxr_prepare_reliable_buffer_to_write+0x29c>
 800fc02:	2000      	movs	r0, #0
 800fc04:	b011      	add	sp, #68	; 0x44
 800fc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0a:	8921      	ldrh	r1, [r4, #8]
 800fc0c:	8a60      	ldrh	r0, [r4, #18]
 800fc0e:	9205      	str	r2, [sp, #20]
 800fc10:	f000 fa8c 	bl	801012c <uxr_seq_num_add>
 800fc14:	4601      	mov	r1, r0
 800fc16:	4630      	mov	r0, r6
 800fc18:	f000 fa90 	bl	801013c <uxr_seq_num_cmp>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	9a05      	ldr	r2, [sp, #20]
 800fc20:	dcef      	bgt.n	800fc02 <uxr_prepare_reliable_buffer_to_write+0x216>
 800fc22:	8927      	ldrh	r7, [r4, #8]
 800fc24:	fbb6 f3f7 	udiv	r3, r6, r7
 800fc28:	fb07 6313 	mls	r3, r7, r3, r6
 800fc2c:	b29d      	uxth	r5, r3
 800fc2e:	6863      	ldr	r3, [r4, #4]
 800fc30:	6824      	ldr	r4, [r4, #0]
 800fc32:	fbb3 f3f7 	udiv	r3, r3, r7
 800fc36:	fb05 f303 	mul.w	r3, r5, r3
 800fc3a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800fc3e:	50e2      	str	r2, [r4, r3]
 800fc40:	2300      	movs	r3, #0
 800fc42:	f8cd 8000 	str.w	r8, [sp]
 800fc46:	f7fa f879 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800fc4a:	2001      	movs	r0, #1
 800fc4c:	e7da      	b.n	800fc04 <uxr_prepare_reliable_buffer_to_write+0x218>
 800fc4e:	b293      	uxth	r3, r2
 800fc50:	461a      	mov	r2, r3
 800fc52:	e737      	b.n	800fac4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800fc54:	4630      	mov	r0, r6
 800fc56:	2101      	movs	r1, #1
 800fc58:	9207      	str	r2, [sp, #28]
 800fc5a:	f000 fa67 	bl	801012c <uxr_seq_num_add>
 800fc5e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fc62:	fbb0 f1fc 	udiv	r1, r0, ip
 800fc66:	fb0c 0111 	mls	r1, ip, r1, r0
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	b288      	uxth	r0, r1
 800fc6e:	6863      	ldr	r3, [r4, #4]
 800fc70:	fbb3 f1fc 	udiv	r1, r3, ip
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	9a07      	ldr	r2, [sp, #28]
 800fc78:	fb00 f101 	mul.w	r1, r0, r1
 800fc7c:	3104      	adds	r1, #4
 800fc7e:	440b      	add	r3, r1
 800fc80:	9303      	str	r3, [sp, #12]
 800fc82:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800fc86:	e70a      	b.n	800fa9e <uxr_prepare_reliable_buffer_to_write+0xb2>
 800fc88:	8921      	ldrh	r1, [r4, #8]
 800fc8a:	fbb5 f3f1 	udiv	r3, r5, r1
 800fc8e:	fb01 5313 	mls	r3, r1, r3, r5
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	6863      	ldr	r3, [r4, #4]
 800fc96:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc9a:	6821      	ldr	r1, [r4, #0]
 800fc9c:	9804      	ldr	r0, [sp, #16]
 800fc9e:	fb02 f303 	mul.w	r3, r2, r3
 800fca2:	3304      	adds	r3, #4
 800fca4:	7b22      	ldrb	r2, [r4, #12]
 800fca6:	4419      	add	r1, r3
 800fca8:	445a      	add	r2, fp
 800fcaa:	f841 2c04 	str.w	r2, [r1, #-4]
 800fcae:	7b23      	ldrb	r3, [r4, #12]
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	f7fa f842 	bl	8009d3c <ucdr_init_buffer_origin_offset>
 800fcb8:	81e5      	strh	r5, [r4, #14]
 800fcba:	2001      	movs	r0, #1
 800fcbc:	e7a2      	b.n	800fc04 <uxr_prepare_reliable_buffer_to_write+0x218>
 800fcbe:	4682      	mov	sl, r0
 800fcc0:	e6ca      	b.n	800fa58 <uxr_prepare_reliable_buffer_to_write+0x6c>
 800fcc2:	bf00      	nop
 800fcc4:	0800f8cd 	.word	0x0800f8cd

0800fcc8 <uxr_prepare_next_reliable_buffer_to_send>:
 800fcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcca:	4604      	mov	r4, r0
 800fccc:	460f      	mov	r7, r1
 800fcce:	8a00      	ldrh	r0, [r0, #16]
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	4616      	mov	r6, r2
 800fcd4:	461d      	mov	r5, r3
 800fcd6:	f000 fa29 	bl	801012c <uxr_seq_num_add>
 800fcda:	8028      	strh	r0, [r5, #0]
 800fcdc:	8922      	ldrh	r2, [r4, #8]
 800fcde:	fbb0 f3f2 	udiv	r3, r0, r2
 800fce2:	fb02 0c13 	mls	ip, r2, r3, r0
 800fce6:	fa1f fc8c 	uxth.w	ip, ip
 800fcea:	6863      	ldr	r3, [r4, #4]
 800fcec:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcf0:	fb0c fc03 	mul.w	ip, ip, r3
 800fcf4:	6823      	ldr	r3, [r4, #0]
 800fcf6:	89e1      	ldrh	r1, [r4, #14]
 800fcf8:	f10c 0c04 	add.w	ip, ip, #4
 800fcfc:	4463      	add	r3, ip
 800fcfe:	603b      	str	r3, [r7, #0]
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	449c      	add	ip, r3
 800fd04:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800fd08:	6033      	str	r3, [r6, #0]
 800fd0a:	f000 fa17 	bl	801013c <uxr_seq_num_cmp>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	dd01      	ble.n	800fd16 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800fd12:	2000      	movs	r0, #0
 800fd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd16:	7b23      	ldrb	r3, [r4, #12]
 800fd18:	6832      	ldr	r2, [r6, #0]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d9f9      	bls.n	800fd12 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800fd1e:	8a61      	ldrh	r1, [r4, #18]
 800fd20:	8a20      	ldrh	r0, [r4, #16]
 800fd22:	f000 fa07 	bl	8010134 <uxr_seq_num_sub>
 800fd26:	8923      	ldrh	r3, [r4, #8]
 800fd28:	4283      	cmp	r3, r0
 800fd2a:	d0f2      	beq.n	800fd12 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800fd2c:	8828      	ldrh	r0, [r5, #0]
 800fd2e:	89e3      	ldrh	r3, [r4, #14]
 800fd30:	8220      	strh	r0, [r4, #16]
 800fd32:	4298      	cmp	r0, r3
 800fd34:	d001      	beq.n	800fd3a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800fd36:	2001      	movs	r0, #1
 800fd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	f000 f9f6 	bl	801012c <uxr_seq_num_add>
 800fd40:	81e0      	strh	r0, [r4, #14]
 800fd42:	2001      	movs	r0, #1
 800fd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd46:	bf00      	nop

0800fd48 <uxr_update_output_stream_heartbeat_timestamp>:
 800fd48:	b570      	push	{r4, r5, r6, lr}
 800fd4a:	8a01      	ldrh	r1, [r0, #16]
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	8a40      	ldrh	r0, [r0, #18]
 800fd50:	4615      	mov	r5, r2
 800fd52:	461e      	mov	r6, r3
 800fd54:	f000 f9f2 	bl	801013c <uxr_seq_num_cmp>
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	db07      	blt.n	800fd6c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800fd5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd64:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800fd68:	2000      	movs	r0, #0
 800fd6a:	bd70      	pop	{r4, r5, r6, pc}
 800fd6c:	f894 0020 	ldrb.w	r0, [r4, #32]
 800fd70:	b940      	cbnz	r0, 800fd84 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800fd72:	2301      	movs	r3, #1
 800fd74:	f884 3020 	strb.w	r3, [r4, #32]
 800fd78:	3564      	adds	r5, #100	; 0x64
 800fd7a:	f146 0600 	adc.w	r6, r6, #0
 800fd7e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800fd82:	bd70      	pop	{r4, r5, r6, pc}
 800fd84:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800fd88:	4295      	cmp	r5, r2
 800fd8a:	eb76 0303 	sbcs.w	r3, r6, r3
 800fd8e:	bfa5      	ittet	ge
 800fd90:	3001      	addge	r0, #1
 800fd92:	f884 0020 	strbge.w	r0, [r4, #32]
 800fd96:	2000      	movlt	r0, #0
 800fd98:	2001      	movge	r0, #1
 800fd9a:	e7ed      	b.n	800fd78 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800fd9c <uxr_begin_output_nack_buffer_it>:
 800fd9c:	8a40      	ldrh	r0, [r0, #18]
 800fd9e:	4770      	bx	lr

0800fda0 <uxr_next_reliable_nack_buffer_to_send>:
 800fda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fda4:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 800fda8:	b082      	sub	sp, #8
 800fdaa:	f1b8 0f00 	cmp.w	r8, #0
 800fdae:	d011      	beq.n	800fdd4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	8818      	ldrh	r0, [r3, #0]
 800fdb4:	460e      	mov	r6, r1
 800fdb6:	4617      	mov	r7, r2
 800fdb8:	461d      	mov	r5, r3
 800fdba:	2101      	movs	r1, #1
 800fdbc:	f000 f9b6 	bl	801012c <uxr_seq_num_add>
 800fdc0:	8028      	strh	r0, [r5, #0]
 800fdc2:	8a21      	ldrh	r1, [r4, #16]
 800fdc4:	f000 f9ba 	bl	801013c <uxr_seq_num_cmp>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	dd07      	ble.n	800fddc <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800fdcc:	f04f 0800 	mov.w	r8, #0
 800fdd0:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	b002      	add	sp, #8
 800fdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fddc:	8921      	ldrh	r1, [r4, #8]
 800fdde:	8828      	ldrh	r0, [r5, #0]
 800fde0:	6823      	ldr	r3, [r4, #0]
 800fde2:	fbb0 f2f1 	udiv	r2, r0, r1
 800fde6:	fb01 0c12 	mls	ip, r1, r2, r0
 800fdea:	fa1f f28c 	uxth.w	r2, ip
 800fdee:	9301      	str	r3, [sp, #4]
 800fdf0:	6863      	ldr	r3, [r4, #4]
 800fdf2:	fbb3 fcf1 	udiv	ip, r3, r1
 800fdf6:	9b01      	ldr	r3, [sp, #4]
 800fdf8:	fb02 fc0c 	mul.w	ip, r2, ip
 800fdfc:	f10c 0c04 	add.w	ip, ip, #4
 800fe00:	4463      	add	r3, ip
 800fe02:	6033      	str	r3, [r6, #0]
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	4463      	add	r3, ip
 800fe08:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800fe0c:	603b      	str	r3, [r7, #0]
 800fe0e:	7b22      	ldrb	r2, [r4, #12]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d0d2      	beq.n	800fdba <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800fe14:	4640      	mov	r0, r8
 800fe16:	b002      	add	sp, #8
 800fe18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe1c <uxr_process_acknack>:
 800fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1e:	4604      	mov	r4, r0
 800fe20:	460e      	mov	r6, r1
 800fe22:	4610      	mov	r0, r2
 800fe24:	2101      	movs	r1, #1
 800fe26:	f000 f985 	bl	8010134 <uxr_seq_num_sub>
 800fe2a:	8a61      	ldrh	r1, [r4, #18]
 800fe2c:	f000 f982 	bl	8010134 <uxr_seq_num_sub>
 800fe30:	b1c0      	cbz	r0, 800fe64 <uxr_process_acknack+0x48>
 800fe32:	4605      	mov	r5, r0
 800fe34:	2700      	movs	r7, #0
 800fe36:	2101      	movs	r1, #1
 800fe38:	8a60      	ldrh	r0, [r4, #18]
 800fe3a:	f000 f977 	bl	801012c <uxr_seq_num_add>
 800fe3e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fe42:	fbb0 f1fc 	udiv	r1, r0, ip
 800fe46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe4a:	fb0c 0111 	mls	r1, ip, r1, r0
 800fe4e:	b289      	uxth	r1, r1
 800fe50:	3701      	adds	r7, #1
 800fe52:	fbb3 f3fc 	udiv	r3, r3, ip
 800fe56:	fb01 f303 	mul.w	r3, r1, r3
 800fe5a:	42bd      	cmp	r5, r7
 800fe5c:	7b21      	ldrb	r1, [r4, #12]
 800fe5e:	8260      	strh	r0, [r4, #18]
 800fe60:	50d1      	str	r1, [r2, r3]
 800fe62:	d1e8      	bne.n	800fe36 <uxr_process_acknack+0x1a>
 800fe64:	3e00      	subs	r6, #0
 800fe66:	f04f 0300 	mov.w	r3, #0
 800fe6a:	bf18      	it	ne
 800fe6c:	2601      	movne	r6, #1
 800fe6e:	f884 3020 	strb.w	r3, [r4, #32]
 800fe72:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 800fe76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe78 <uxr_is_output_up_to_date>:
 800fe78:	8a01      	ldrh	r1, [r0, #16]
 800fe7a:	8a40      	ldrh	r0, [r0, #18]
 800fe7c:	b508      	push	{r3, lr}
 800fe7e:	f000 f95d 	bl	801013c <uxr_seq_num_cmp>
 800fe82:	fab0 f080 	clz	r0, r0
 800fe86:	0940      	lsrs	r0, r0, #5
 800fe88:	bd08      	pop	{r3, pc}
 800fe8a:	bf00      	nop

0800fe8c <get_available_free_slots>:
 800fe8c:	8902      	ldrh	r2, [r0, #8]
 800fe8e:	b1da      	cbz	r2, 800fec8 <get_available_free_slots+0x3c>
 800fe90:	b530      	push	{r4, r5, lr}
 800fe92:	2100      	movs	r1, #0
 800fe94:	6843      	ldr	r3, [r0, #4]
 800fe96:	6805      	ldr	r5, [r0, #0]
 800fe98:	7b04      	ldrb	r4, [r0, #12]
 800fe9a:	fbb3 fef2 	udiv	lr, r3, r2
 800fe9e:	4608      	mov	r0, r1
 800fea0:	460b      	mov	r3, r1
 800fea2:	fbb3 fcf2 	udiv	ip, r3, r2
 800fea6:	fb02 331c 	mls	r3, r2, ip, r3
 800feaa:	b29b      	uxth	r3, r3
 800feac:	fb0e f303 	mul.w	r3, lr, r3
 800feb0:	3101      	adds	r1, #1
 800feb2:	f855 c003 	ldr.w	ip, [r5, r3]
 800feb6:	4564      	cmp	r4, ip
 800feb8:	bf08      	it	eq
 800feba:	3001      	addeq	r0, #1
 800febc:	b28b      	uxth	r3, r1
 800febe:	bf08      	it	eq
 800fec0:	b280      	uxtheq	r0, r0
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d3ed      	bcc.n	800fea2 <get_available_free_slots+0x16>
 800fec6:	bd30      	pop	{r4, r5, pc}
 800fec8:	4610      	mov	r0, r2
 800feca:	4770      	bx	lr

0800fecc <uxr_buffer_request_data>:
 800fecc:	b530      	push	{r4, r5, lr}
 800fece:	b095      	sub	sp, #84	; 0x54
 800fed0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fed4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800fed6:	9303      	str	r3, [sp, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	2d00      	cmp	r5, #0
 800fedc:	bf14      	ite	ne
 800fede:	2101      	movne	r1, #1
 800fee0:	4611      	moveq	r1, r2
 800fee2:	4604      	mov	r4, r0
 800fee4:	f88d 301c 	strb.w	r3, [sp, #28]
 800fee8:	f88d 201d 	strb.w	r2, [sp, #29]
 800feec:	f88d 201e 	strb.w	r2, [sp, #30]
 800fef0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fef4:	d021      	beq.n	800ff3a <uxr_buffer_request_data+0x6e>
 800fef6:	682a      	ldr	r2, [r5, #0]
 800fef8:	686b      	ldr	r3, [r5, #4]
 800fefa:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 800fefe:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800ff02:	2210      	movs	r2, #16
 800ff04:	2308      	movs	r3, #8
 800ff06:	2100      	movs	r1, #0
 800ff08:	e9cd 3100 	strd	r3, r1, [sp]
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	9905      	ldr	r1, [sp, #20]
 800ff10:	ab0c      	add	r3, sp, #48	; 0x30
 800ff12:	f7fb f8b9 	bl	800b088 <uxr_prepare_stream_to_write_submessage>
 800ff16:	b918      	cbnz	r0, 800ff20 <uxr_buffer_request_data+0x54>
 800ff18:	4604      	mov	r4, r0
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	b015      	add	sp, #84	; 0x54
 800ff1e:	bd30      	pop	{r4, r5, pc}
 800ff20:	9904      	ldr	r1, [sp, #16]
 800ff22:	aa06      	add	r2, sp, #24
 800ff24:	4620      	mov	r0, r4
 800ff26:	f7fb f9e5 	bl	800b2f4 <uxr_init_base_object_request>
 800ff2a:	a906      	add	r1, sp, #24
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	a80c      	add	r0, sp, #48	; 0x30
 800ff30:	f7fc fce0 	bl	800c8f4 <uxr_serialize_READ_DATA_Payload>
 800ff34:	4620      	mov	r0, r4
 800ff36:	b015      	add	sp, #84	; 0x54
 800ff38:	bd30      	pop	{r4, r5, pc}
 800ff3a:	2208      	movs	r2, #8
 800ff3c:	e7e2      	b.n	800ff04 <uxr_buffer_request_data+0x38>
 800ff3e:	bf00      	nop

0800ff40 <uxr_buffer_cancel_data>:
 800ff40:	b510      	push	{r4, lr}
 800ff42:	b094      	sub	sp, #80	; 0x50
 800ff44:	2300      	movs	r3, #0
 800ff46:	9202      	str	r2, [sp, #8]
 800ff48:	9205      	str	r2, [sp, #20]
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ff52:	f88d 301e 	strb.w	r3, [sp, #30]
 800ff56:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800ff5a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800ff5e:	2308      	movs	r3, #8
 800ff60:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	2210      	movs	r2, #16
 800ff68:	ab0c      	add	r3, sp, #48	; 0x30
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	9103      	str	r1, [sp, #12]
 800ff6e:	f7fb f88b 	bl	800b088 <uxr_prepare_stream_to_write_submessage>
 800ff72:	b918      	cbnz	r0, 800ff7c <uxr_buffer_cancel_data+0x3c>
 800ff74:	4604      	mov	r4, r0
 800ff76:	4620      	mov	r0, r4
 800ff78:	b014      	add	sp, #80	; 0x50
 800ff7a:	bd10      	pop	{r4, pc}
 800ff7c:	9905      	ldr	r1, [sp, #20]
 800ff7e:	aa06      	add	r2, sp, #24
 800ff80:	4620      	mov	r0, r4
 800ff82:	f7fb f9b7 	bl	800b2f4 <uxr_init_base_object_request>
 800ff86:	a906      	add	r1, sp, #24
 800ff88:	4604      	mov	r4, r0
 800ff8a:	a80c      	add	r0, sp, #48	; 0x30
 800ff8c:	f7fc fcb2 	bl	800c8f4 <uxr_serialize_READ_DATA_Payload>
 800ff90:	4620      	mov	r0, r4
 800ff92:	b014      	add	sp, #80	; 0x50
 800ff94:	bd10      	pop	{r4, pc}
 800ff96:	bf00      	nop

0800ff98 <read_submessage_format>:
 800ff98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff9c:	b095      	sub	sp, #84	; 0x54
 800ff9e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800ffa2:	b113      	cbz	r3, 800ffaa <read_submessage_format+0x12>
 800ffa4:	b015      	add	sp, #84	; 0x54
 800ffa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffaa:	460c      	mov	r4, r1
 800ffac:	4615      	mov	r5, r2
 800ffae:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ffb2:	4607      	mov	r7, r0
 800ffb4:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ffb6:	9004      	str	r0, [sp, #16]
 800ffb8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ffba:	9005      	str	r0, [sp, #20]
 800ffbc:	1a52      	subs	r2, r2, r1
 800ffbe:	a80c      	add	r0, sp, #48	; 0x30
 800ffc0:	4699      	mov	r9, r3
 800ffc2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800ffc6:	f7f9 fecb 	bl	8009d60 <ucdr_init_buffer>
 800ffca:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ffce:	a80c      	add	r0, sp, #48	; 0x30
 800ffd0:	f7f9 fe9a 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 800ffd4:	69e2      	ldr	r2, [r4, #28]
 800ffd6:	b19a      	cbz	r2, 8010000 <read_submessage_format+0x68>
 800ffd8:	f1b8 0f07 	cmp.w	r8, #7
 800ffdc:	f882 9014 	strb.w	r9, [r2, #20]
 800ffe0:	d040      	beq.n	8010064 <read_submessage_format+0xcc>
 800ffe2:	f1b8 0f08 	cmp.w	r8, #8
 800ffe6:	d02e      	beq.n	8010046 <read_submessage_format+0xae>
 800ffe8:	f1b8 0f06 	cmp.w	r8, #6
 800ffec:	d011      	beq.n	8010012 <read_submessage_format+0x7a>
 800ffee:	2301      	movs	r3, #1
 800fff0:	7513      	strb	r3, [r2, #20]
 800fff2:	4629      	mov	r1, r5
 800fff4:	4620      	mov	r0, r4
 800fff6:	f7f9 ff03 	bl	8009e00 <ucdr_advance_buffer>
 800fffa:	b015      	add	sp, #84	; 0x54
 800fffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010000:	f1b8 0f07 	cmp.w	r8, #7
 8010004:	d02e      	beq.n	8010064 <read_submessage_format+0xcc>
 8010006:	f1b8 0f08 	cmp.w	r8, #8
 801000a:	d01c      	beq.n	8010046 <read_submessage_format+0xae>
 801000c:	f1b8 0f06 	cmp.w	r8, #6
 8010010:	d1ef      	bne.n	800fff2 <read_submessage_format+0x5a>
 8010012:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8010016:	f1b8 0f00 	cmp.w	r8, #0
 801001a:	d011      	beq.n	8010040 <read_submessage_format+0xa8>
 801001c:	ab0c      	add	r3, sp, #48	; 0x30
 801001e:	e9cd 3500 	strd	r3, r5, [sp]
 8010022:	2306      	movs	r3, #6
 8010024:	f88d 3016 	strb.w	r3, [sp, #22]
 8010028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801002c:	9302      	str	r3, [sp, #8]
 801002e:	4632      	mov	r2, r6
 8010030:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010034:	4638      	mov	r0, r7
 8010036:	47c0      	blx	r8
 8010038:	2301      	movs	r3, #1
 801003a:	69e2      	ldr	r2, [r4, #28]
 801003c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010040:	2a00      	cmp	r2, #0
 8010042:	d1d4      	bne.n	800ffee <read_submessage_format+0x56>
 8010044:	e7d5      	b.n	800fff2 <read_submessage_format+0x5a>
 8010046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801004a:	2b00      	cmp	r3, #0
 801004c:	d0f8      	beq.n	8010040 <read_submessage_format+0xa8>
 801004e:	a906      	add	r1, sp, #24
 8010050:	a80c      	add	r0, sp, #48	; 0x30
 8010052:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010056:	f7fc fced 	bl	800ca34 <uxr_deserialize_SampleIdentity>
 801005a:	b9a0      	cbnz	r0, 8010086 <read_submessage_format+0xee>
 801005c:	69e2      	ldr	r2, [r4, #28]
 801005e:	2a00      	cmp	r2, #0
 8010060:	d1c5      	bne.n	800ffee <read_submessage_format+0x56>
 8010062:	e7c6      	b.n	800fff2 <read_submessage_format+0x5a>
 8010064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010068:	b13b      	cbz	r3, 801007a <read_submessage_format+0xe2>
 801006a:	a906      	add	r1, sp, #24
 801006c:	a80c      	add	r0, sp, #48	; 0x30
 801006e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010072:	f7fc f9d9 	bl	800c428 <uxr_deserialize_BaseObjectRequest>
 8010076:	bb60      	cbnz	r0, 80100d2 <read_submessage_format+0x13a>
 8010078:	69e2      	ldr	r2, [r4, #28]
 801007a:	68a3      	ldr	r3, [r4, #8]
 801007c:	442b      	add	r3, r5
 801007e:	60a3      	str	r3, [r4, #8]
 8010080:	2a00      	cmp	r2, #0
 8010082:	d1b4      	bne.n	800ffee <read_submessage_format+0x56>
 8010084:	e7b5      	b.n	800fff2 <read_submessage_format+0x5a>
 8010086:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801008a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801008c:	1a52      	subs	r2, r2, r1
 801008e:	eba8 0803 	sub.w	r8, r8, r3
 8010092:	a80c      	add	r0, sp, #48	; 0x30
 8010094:	f7f9 fe64 	bl	8009d60 <ucdr_init_buffer>
 8010098:	44a8      	add	r8, r5
 801009a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801009e:	a80c      	add	r0, sp, #48	; 0x30
 80100a0:	f7f9 fe32 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 80100a4:	fa1f f888 	uxth.w	r8, r8
 80100a8:	ab0c      	add	r3, sp, #48	; 0x30
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	f8cd 8004 	str.w	r8, [sp, #4]
 80100b0:	2108      	movs	r1, #8
 80100b2:	f88d 1016 	strb.w	r1, [sp, #22]
 80100b6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80100ba:	9102      	str	r1, [sp, #8]
 80100bc:	ab06      	add	r3, sp, #24
 80100be:	4632      	mov	r2, r6
 80100c0:	9905      	ldr	r1, [sp, #20]
 80100c2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 80100c6:	4638      	mov	r0, r7
 80100c8:	47b0      	blx	r6
 80100ca:	2301      	movs	r3, #1
 80100cc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80100d0:	e7c4      	b.n	801005c <read_submessage_format+0xc4>
 80100d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80100d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100d8:	1a52      	subs	r2, r2, r1
 80100da:	a80c      	add	r0, sp, #48	; 0x30
 80100dc:	eba8 0803 	sub.w	r8, r8, r3
 80100e0:	f7f9 fe3e 	bl	8009d60 <ucdr_init_buffer>
 80100e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80100e8:	a80c      	add	r0, sp, #48	; 0x30
 80100ea:	f7f9 fe0d 	bl	8009d08 <ucdr_set_on_full_buffer_callback>
 80100ee:	ab0c      	add	r3, sp, #48	; 0x30
 80100f0:	9300      	str	r3, [sp, #0]
 80100f2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80100f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80100fa:	44a8      	add	r8, r5
 80100fc:	fa1f f888 	uxth.w	r8, r8
 8010100:	f8cd 8004 	str.w	r8, [sp, #4]
 8010104:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010108:	2107      	movs	r1, #7
 801010a:	f88d 1016 	strb.w	r1, [sp, #22]
 801010e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8010112:	9102      	str	r1, [sp, #8]
 8010114:	4632      	mov	r2, r6
 8010116:	b29b      	uxth	r3, r3
 8010118:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 801011c:	9905      	ldr	r1, [sp, #20]
 801011e:	4638      	mov	r0, r7
 8010120:	47b0      	blx	r6
 8010122:	2301      	movs	r3, #1
 8010124:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010128:	e7a6      	b.n	8010078 <read_submessage_format+0xe0>
 801012a:	bf00      	nop

0801012c <uxr_seq_num_add>:
 801012c:	4408      	add	r0, r1
 801012e:	b280      	uxth	r0, r0
 8010130:	4770      	bx	lr
 8010132:	bf00      	nop

08010134 <uxr_seq_num_sub>:
 8010134:	1a40      	subs	r0, r0, r1
 8010136:	b280      	uxth	r0, r0
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop

0801013c <uxr_seq_num_cmp>:
 801013c:	4288      	cmp	r0, r1
 801013e:	d011      	beq.n	8010164 <uxr_seq_num_cmp+0x28>
 8010140:	d309      	bcc.n	8010156 <uxr_seq_num_cmp+0x1a>
 8010142:	4288      	cmp	r0, r1
 8010144:	d910      	bls.n	8010168 <uxr_seq_num_cmp+0x2c>
 8010146:	1a40      	subs	r0, r0, r1
 8010148:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801014c:	bfd4      	ite	le
 801014e:	2001      	movle	r0, #1
 8010150:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8010154:	4770      	bx	lr
 8010156:	1a0b      	subs	r3, r1, r0
 8010158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801015c:	daf1      	bge.n	8010142 <uxr_seq_num_cmp+0x6>
 801015e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010162:	4770      	bx	lr
 8010164:	2000      	movs	r0, #0
 8010166:	4770      	bx	lr
 8010168:	2001      	movs	r0, #1
 801016a:	4770      	bx	lr

0801016c <uxr_init_framing_io>:
 801016c:	2300      	movs	r3, #0
 801016e:	7041      	strb	r1, [r0, #1]
 8010170:	7003      	strb	r3, [r0, #0]
 8010172:	8583      	strh	r3, [r0, #44]	; 0x2c
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop

08010178 <uxr_write_framed_msg>:
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	4617      	mov	r7, r2
 801017e:	7842      	ldrb	r2, [r0, #1]
 8010180:	b083      	sub	sp, #12
 8010182:	460e      	mov	r6, r1
 8010184:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8010188:	469a      	mov	sl, r3
 801018a:	2901      	cmp	r1, #1
 801018c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8010190:	4604      	mov	r4, r0
 8010192:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010196:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801019a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801019e:	f240 8137 	bls.w	8010410 <uxr_write_framed_msg+0x298>
 80101a2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80101a6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80101aa:	2901      	cmp	r1, #1
 80101ac:	f04f 0202 	mov.w	r2, #2
 80101b0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80101b4:	f240 808f 	bls.w	80102d6 <uxr_write_framed_msg+0x15e>
 80101b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101ba:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80101be:	b2dd      	uxtb	r5, r3
 80101c0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80101c4:	2203      	movs	r2, #3
 80101c6:	2901      	cmp	r1, #1
 80101c8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80101cc:	f240 809a 	bls.w	8010304 <uxr_write_framed_msg+0x18c>
 80101d0:	18a1      	adds	r1, r4, r2
 80101d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101d4:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 80101d8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80101dc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80101e0:	3201      	adds	r2, #1
 80101e2:	2801      	cmp	r0, #1
 80101e4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80101e8:	f240 80a0 	bls.w	801032c <uxr_write_framed_msg+0x1b4>
 80101ec:	18a0      	adds	r0, r4, r2
 80101ee:	3201      	adds	r2, #1
 80101f0:	b2d2      	uxtb	r2, r2
 80101f2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80101f6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 80a9 	beq.w	8010352 <uxr_write_framed_msg+0x1da>
 8010200:	f04f 0900 	mov.w	r9, #0
 8010204:	46c8      	mov	r8, r9
 8010206:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801020a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801020e:	2901      	cmp	r1, #1
 8010210:	f240 80c3 	bls.w	801039a <uxr_write_framed_msg+0x222>
 8010214:	2a29      	cmp	r2, #41	; 0x29
 8010216:	f200 809f 	bhi.w	8010358 <uxr_write_framed_msg+0x1e0>
 801021a:	18a1      	adds	r1, r4, r2
 801021c:	3201      	adds	r2, #1
 801021e:	b2d2      	uxtb	r2, r2
 8010220:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8010224:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010228:	ea89 0303 	eor.w	r3, r9, r3
 801022c:	498c      	ldr	r1, [pc, #560]	; (8010460 <uxr_write_framed_msg+0x2e8>)
 801022e:	b2db      	uxtb	r3, r3
 8010230:	f108 0801 	add.w	r8, r8, #1
 8010234:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010238:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801023c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801023e:	4543      	cmp	r3, r8
 8010240:	d8e1      	bhi.n	8010206 <uxr_write_framed_msg+0x8e>
 8010242:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010246:	fa5f f889 	uxtb.w	r8, r9
 801024a:	9301      	str	r3, [sp, #4]
 801024c:	f04f 0900 	mov.w	r9, #0
 8010250:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8010254:	fa5f f18a 	uxtb.w	r1, sl
 8010258:	2901      	cmp	r1, #1
 801025a:	d921      	bls.n	80102a0 <uxr_write_framed_msg+0x128>
 801025c:	2a29      	cmp	r2, #41	; 0x29
 801025e:	f240 80af 	bls.w	80103c0 <uxr_write_framed_msg+0x248>
 8010262:	2500      	movs	r5, #0
 8010264:	e000      	b.n	8010268 <uxr_write_framed_msg+0xf0>
 8010266:	b160      	cbz	r0, 8010282 <uxr_write_framed_msg+0x10a>
 8010268:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801026c:	1b52      	subs	r2, r2, r5
 801026e:	465b      	mov	r3, fp
 8010270:	4421      	add	r1, r4
 8010272:	4638      	mov	r0, r7
 8010274:	47b0      	blx	r6
 8010276:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801027a:	4405      	add	r5, r0
 801027c:	4295      	cmp	r5, r2
 801027e:	d3f2      	bcc.n	8010266 <uxr_write_framed_msg+0xee>
 8010280:	d003      	beq.n	801028a <uxr_write_framed_msg+0x112>
 8010282:	2000      	movs	r0, #0
 8010284:	b003      	add	sp, #12
 8010286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028a:	fa5f f18a 	uxtb.w	r1, sl
 801028e:	f04f 0300 	mov.w	r3, #0
 8010292:	2901      	cmp	r1, #1
 8010294:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010298:	f04f 0200 	mov.w	r2, #0
 801029c:	f200 8090 	bhi.w	80103c0 <uxr_write_framed_msg+0x248>
 80102a0:	1c51      	adds	r1, r2, #1
 80102a2:	b2c9      	uxtb	r1, r1
 80102a4:	2929      	cmp	r1, #41	; 0x29
 80102a6:	d8dc      	bhi.n	8010262 <uxr_write_framed_msg+0xea>
 80102a8:	18a5      	adds	r5, r4, r2
 80102aa:	4421      	add	r1, r4
 80102ac:	3202      	adds	r2, #2
 80102ae:	f088 0820 	eor.w	r8, r8, #32
 80102b2:	4648      	mov	r0, r9
 80102b4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80102b8:	b2d2      	uxtb	r2, r2
 80102ba:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80102be:	f04f 0901 	mov.w	r9, #1
 80102c2:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80102c6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f040 8085 	bne.w	80103da <uxr_write_framed_msg+0x262>
 80102d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80102d4:	e7bc      	b.n	8010250 <uxr_write_framed_msg+0xd8>
 80102d6:	4611      	mov	r1, r2
 80102d8:	f04f 0c03 	mov.w	ip, #3
 80102dc:	2204      	movs	r2, #4
 80102de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102e0:	4421      	add	r1, r4
 80102e2:	b2dd      	uxtb	r5, r3
 80102e4:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80102e8:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 80102ec:	44a4      	add	ip, r4
 80102ee:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80102f2:	f080 0020 	eor.w	r0, r0, #32
 80102f6:	2901      	cmp	r1, #1
 80102f8:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80102fc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010300:	f63f af66 	bhi.w	80101d0 <uxr_write_framed_msg+0x58>
 8010304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010306:	18a0      	adds	r0, r4, r2
 8010308:	f085 0520 	eor.w	r5, r5, #32
 801030c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8010310:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010314:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8010318:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801031c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8010320:	3202      	adds	r2, #2
 8010322:	2801      	cmp	r0, #1
 8010324:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010328:	f63f af60 	bhi.w	80101ec <uxr_write_framed_msg+0x74>
 801032c:	1c50      	adds	r0, r2, #1
 801032e:	18a5      	adds	r5, r4, r2
 8010330:	fa54 f080 	uxtab	r0, r4, r0
 8010334:	3202      	adds	r2, #2
 8010336:	f081 0120 	eor.w	r1, r1, #32
 801033a:	b2d2      	uxtb	r2, r2
 801033c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8010340:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8010344:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8010348:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801034c:	2b00      	cmp	r3, #0
 801034e:	f47f af57 	bne.w	8010200 <uxr_write_framed_msg+0x88>
 8010352:	9301      	str	r3, [sp, #4]
 8010354:	4698      	mov	r8, r3
 8010356:	e779      	b.n	801024c <uxr_write_framed_msg+0xd4>
 8010358:	2500      	movs	r5, #0
 801035a:	e001      	b.n	8010360 <uxr_write_framed_msg+0x1e8>
 801035c:	2800      	cmp	r0, #0
 801035e:	d090      	beq.n	8010282 <uxr_write_framed_msg+0x10a>
 8010360:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010364:	1b52      	subs	r2, r2, r5
 8010366:	465b      	mov	r3, fp
 8010368:	4421      	add	r1, r4
 801036a:	4638      	mov	r0, r7
 801036c:	47b0      	blx	r6
 801036e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010372:	4405      	add	r5, r0
 8010374:	4295      	cmp	r5, r2
 8010376:	d3f1      	bcc.n	801035c <uxr_write_framed_msg+0x1e4>
 8010378:	d183      	bne.n	8010282 <uxr_write_framed_msg+0x10a>
 801037a:	f04f 0300 	mov.w	r3, #0
 801037e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010384:	4543      	cmp	r3, r8
 8010386:	d964      	bls.n	8010452 <uxr_write_framed_msg+0x2da>
 8010388:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801038c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8010390:	2901      	cmp	r1, #1
 8010392:	f04f 0200 	mov.w	r2, #0
 8010396:	f63f af3d 	bhi.w	8010214 <uxr_write_framed_msg+0x9c>
 801039a:	1c51      	adds	r1, r2, #1
 801039c:	b2c9      	uxtb	r1, r1
 801039e:	2929      	cmp	r1, #41	; 0x29
 80103a0:	d8da      	bhi.n	8010358 <uxr_write_framed_msg+0x1e0>
 80103a2:	18a0      	adds	r0, r4, r2
 80103a4:	4421      	add	r1, r4
 80103a6:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80103aa:	3202      	adds	r2, #2
 80103ac:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80103b0:	b2d2      	uxtb	r2, r2
 80103b2:	f083 0020 	eor.w	r0, r3, #32
 80103b6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80103ba:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80103be:	e733      	b.n	8010228 <uxr_write_framed_msg+0xb0>
 80103c0:	18a1      	adds	r1, r4, r2
 80103c2:	3201      	adds	r2, #1
 80103c4:	4648      	mov	r0, r9
 80103c6:	b2d2      	uxtb	r2, r2
 80103c8:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80103cc:	f04f 0901 	mov.w	r9, #1
 80103d0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f43f af7b 	beq.w	80102d0 <uxr_write_framed_msg+0x158>
 80103da:	2500      	movs	r5, #0
 80103dc:	e002      	b.n	80103e4 <uxr_write_framed_msg+0x26c>
 80103de:	2800      	cmp	r0, #0
 80103e0:	f43f af4f 	beq.w	8010282 <uxr_write_framed_msg+0x10a>
 80103e4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80103e8:	1b52      	subs	r2, r2, r5
 80103ea:	465b      	mov	r3, fp
 80103ec:	4421      	add	r1, r4
 80103ee:	4638      	mov	r0, r7
 80103f0:	47b0      	blx	r6
 80103f2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80103f6:	4405      	add	r5, r0
 80103f8:	4295      	cmp	r5, r2
 80103fa:	d3f0      	bcc.n	80103de <uxr_write_framed_msg+0x266>
 80103fc:	f47f af41 	bne.w	8010282 <uxr_write_framed_msg+0x10a>
 8010400:	2300      	movs	r3, #0
 8010402:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010408:	b298      	uxth	r0, r3
 801040a:	b003      	add	sp, #12
 801040c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010410:	217d      	movs	r1, #125	; 0x7d
 8010412:	f082 0220 	eor.w	r2, r2, #32
 8010416:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801041a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801041e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8010422:	2901      	cmp	r1, #1
 8010424:	f04f 0203 	mov.w	r2, #3
 8010428:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801042c:	d804      	bhi.n	8010438 <uxr_write_framed_msg+0x2c0>
 801042e:	4611      	mov	r1, r2
 8010430:	f04f 0c04 	mov.w	ip, #4
 8010434:	2205      	movs	r2, #5
 8010436:	e752      	b.n	80102de <uxr_write_framed_msg+0x166>
 8010438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801043a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801043e:	b2dd      	uxtb	r5, r3
 8010440:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8010444:	2204      	movs	r2, #4
 8010446:	2901      	cmp	r1, #1
 8010448:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801044c:	f63f aec0 	bhi.w	80101d0 <uxr_write_framed_msg+0x58>
 8010450:	e758      	b.n	8010304 <uxr_write_framed_msg+0x18c>
 8010452:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010456:	fa5f f889 	uxtb.w	r8, r9
 801045a:	9301      	str	r3, [sp, #4]
 801045c:	2200      	movs	r2, #0
 801045e:	e6f5      	b.n	801024c <uxr_write_framed_msg+0xd4>
 8010460:	08013334 	.word	0x08013334

08010464 <uxr_framing_read_transport>:
 8010464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010468:	4604      	mov	r4, r0
 801046a:	b083      	sub	sp, #12
 801046c:	461f      	mov	r7, r3
 801046e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8010472:	4689      	mov	r9, r1
 8010474:	4692      	mov	sl, r2
 8010476:	f7fb f8eb 	bl	800b650 <uxr_millis>
 801047a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801047e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8010482:	42b3      	cmp	r3, r6
 8010484:	4680      	mov	r8, r0
 8010486:	d061      	beq.n	801054c <uxr_framing_read_transport+0xe8>
 8010488:	d81c      	bhi.n	80104c4 <uxr_framing_read_transport+0x60>
 801048a:	1e75      	subs	r5, r6, #1
 801048c:	1aed      	subs	r5, r5, r3
 801048e:	b2ed      	uxtb	r5, r5
 8010490:	2600      	movs	r6, #0
 8010492:	455d      	cmp	r5, fp
 8010494:	d81f      	bhi.n	80104d6 <uxr_framing_read_transport+0x72>
 8010496:	19ab      	adds	r3, r5, r6
 8010498:	455b      	cmp	r3, fp
 801049a:	bf84      	itt	hi
 801049c:	ebab 0605 	subhi.w	r6, fp, r5
 80104a0:	b2f6      	uxtbhi	r6, r6
 80104a2:	b9ed      	cbnz	r5, 80104e0 <uxr_framing_read_transport+0x7c>
 80104a4:	f04f 0b00 	mov.w	fp, #0
 80104a8:	f7fb f8d2 	bl	800b650 <uxr_millis>
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	eba0 0808 	sub.w	r8, r0, r8
 80104b2:	eba3 0308 	sub.w	r3, r3, r8
 80104b6:	4658      	mov	r0, fp
 80104b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104bc:	603b      	str	r3, [r7, #0]
 80104be:	b003      	add	sp, #12
 80104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c4:	2e00      	cmp	r6, #0
 80104c6:	d049      	beq.n	801055c <uxr_framing_read_transport+0xf8>
 80104c8:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80104cc:	b2ed      	uxtb	r5, r5
 80104ce:	3e01      	subs	r6, #1
 80104d0:	455d      	cmp	r5, fp
 80104d2:	b2f6      	uxtb	r6, r6
 80104d4:	d9df      	bls.n	8010496 <uxr_framing_read_transport+0x32>
 80104d6:	fa5f f58b 	uxtb.w	r5, fp
 80104da:	2600      	movs	r6, #0
 80104dc:	2d00      	cmp	r5, #0
 80104de:	d0e1      	beq.n	80104a4 <uxr_framing_read_transport+0x40>
 80104e0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80104e4:	3102      	adds	r1, #2
 80104e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	4421      	add	r1, r4
 80104ee:	462a      	mov	r2, r5
 80104f0:	4650      	mov	r0, sl
 80104f2:	47c8      	blx	r9
 80104f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80104f8:	4a1a      	ldr	r2, [pc, #104]	; (8010564 <uxr_framing_read_transport+0x100>)
 80104fa:	4403      	add	r3, r0
 80104fc:	0859      	lsrs	r1, r3, #1
 80104fe:	fba2 2101 	umull	r2, r1, r2, r1
 8010502:	0889      	lsrs	r1, r1, #2
 8010504:	222a      	movs	r2, #42	; 0x2a
 8010506:	fb02 3111 	mls	r1, r2, r1, r3
 801050a:	4683      	mov	fp, r0
 801050c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8010510:	2800      	cmp	r0, #0
 8010512:	d0c7      	beq.n	80104a4 <uxr_framing_read_transport+0x40>
 8010514:	42a8      	cmp	r0, r5
 8010516:	d1c7      	bne.n	80104a8 <uxr_framing_read_transport+0x44>
 8010518:	2e00      	cmp	r6, #0
 801051a:	d0c5      	beq.n	80104a8 <uxr_framing_read_transport+0x44>
 801051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	3102      	adds	r1, #2
 8010522:	4632      	mov	r2, r6
 8010524:	4421      	add	r1, r4
 8010526:	2300      	movs	r3, #0
 8010528:	4650      	mov	r0, sl
 801052a:	47c8      	blx	r9
 801052c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010530:	4a0c      	ldr	r2, [pc, #48]	; (8010564 <uxr_framing_read_transport+0x100>)
 8010532:	180b      	adds	r3, r1, r0
 8010534:	0859      	lsrs	r1, r3, #1
 8010536:	fba2 1201 	umull	r1, r2, r2, r1
 801053a:	0892      	lsrs	r2, r2, #2
 801053c:	212a      	movs	r1, #42	; 0x2a
 801053e:	fb01 3312 	mls	r3, r1, r2, r3
 8010542:	eb00 0b05 	add.w	fp, r0, r5
 8010546:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801054a:	e7ad      	b.n	80104a8 <uxr_framing_read_transport+0x44>
 801054c:	2600      	movs	r6, #0
 801054e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8010552:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8010554:	d9bf      	bls.n	80104d6 <uxr_framing_read_transport+0x72>
 8010556:	2102      	movs	r1, #2
 8010558:	2529      	movs	r5, #41	; 0x29
 801055a:	e7c4      	b.n	80104e6 <uxr_framing_read_transport+0x82>
 801055c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8010560:	b2ed      	uxtb	r5, r5
 8010562:	e796      	b.n	8010492 <uxr_framing_read_transport+0x2e>
 8010564:	30c30c31 	.word	0x30c30c31

08010568 <uxr_read_framed_msg>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	461e      	mov	r6, r3
 801056e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8010572:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8010576:	429d      	cmp	r5, r3
 8010578:	b083      	sub	sp, #12
 801057a:	4604      	mov	r4, r0
 801057c:	4688      	mov	r8, r1
 801057e:	4691      	mov	r9, r2
 8010580:	f000 8188 	beq.w	8010894 <uxr_read_framed_msg+0x32c>
 8010584:	7823      	ldrb	r3, [r4, #0]
 8010586:	4dc1      	ldr	r5, [pc, #772]	; (801088c <uxr_read_framed_msg+0x324>)
 8010588:	4fc1      	ldr	r7, [pc, #772]	; (8010890 <uxr_read_framed_msg+0x328>)
 801058a:	2b07      	cmp	r3, #7
 801058c:	d8fd      	bhi.n	801058a <uxr_read_framed_msg+0x22>
 801058e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010592:	0115      	.short	0x0115
 8010594:	00d600f6 	.word	0x00d600f6
 8010598:	009000b9 	.word	0x009000b9
 801059c:	0030004d 	.word	0x0030004d
 80105a0:	0008      	.short	0x0008
 80105a2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80105a6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80105aa:	4299      	cmp	r1, r3
 80105ac:	f000 814a 	beq.w	8010844 <uxr_read_framed_msg+0x2dc>
 80105b0:	18e2      	adds	r2, r4, r3
 80105b2:	7892      	ldrb	r2, [r2, #2]
 80105b4:	2a7d      	cmp	r2, #125	; 0x7d
 80105b6:	f000 8199 	beq.w	80108ec <uxr_read_framed_msg+0x384>
 80105ba:	3301      	adds	r3, #1
 80105bc:	0858      	lsrs	r0, r3, #1
 80105be:	fba5 1000 	umull	r1, r0, r5, r0
 80105c2:	0880      	lsrs	r0, r0, #2
 80105c4:	212a      	movs	r1, #42	; 0x2a
 80105c6:	fb01 3310 	mls	r3, r1, r0, r3
 80105ca:	2a7e      	cmp	r2, #126	; 0x7e
 80105cc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80105d0:	f000 8252 	beq.w	8010a78 <uxr_read_framed_msg+0x510>
 80105d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80105d6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80105d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80105dc:	b29b      	uxth	r3, r3
 80105de:	2200      	movs	r2, #0
 80105e0:	4299      	cmp	r1, r3
 80105e2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80105e4:	7022      	strb	r2, [r4, #0]
 80105e6:	f000 8179 	beq.w	80108dc <uxr_read_framed_msg+0x374>
 80105ea:	2000      	movs	r0, #0
 80105ec:	b003      	add	sp, #12
 80105ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80105f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80105fa:	4299      	cmp	r1, r3
 80105fc:	f000 8131 	beq.w	8010862 <uxr_read_framed_msg+0x2fa>
 8010600:	18e2      	adds	r2, r4, r3
 8010602:	7890      	ldrb	r0, [r2, #2]
 8010604:	287d      	cmp	r0, #125	; 0x7d
 8010606:	f000 8190 	beq.w	801092a <uxr_read_framed_msg+0x3c2>
 801060a:	3301      	adds	r3, #1
 801060c:	085a      	lsrs	r2, r3, #1
 801060e:	fba5 1202 	umull	r1, r2, r5, r2
 8010612:	0892      	lsrs	r2, r2, #2
 8010614:	212a      	movs	r1, #42	; 0x2a
 8010616:	fb01 3312 	mls	r3, r1, r2, r3
 801061a:	287e      	cmp	r0, #126	; 0x7e
 801061c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010620:	f000 821a 	beq.w	8010a58 <uxr_read_framed_msg+0x4f0>
 8010624:	2307      	movs	r3, #7
 8010626:	86a0      	strh	r0, [r4, #52]	; 0x34
 8010628:	7023      	strb	r3, [r4, #0]
 801062a:	e7ae      	b.n	801058a <uxr_read_framed_msg+0x22>
 801062c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801062e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8010632:	459e      	cmp	lr, r3
 8010634:	d938      	bls.n	80106a8 <uxr_read_framed_msg+0x140>
 8010636:	ee07 8a90 	vmov	s15, r8
 801063a:	212a      	movs	r1, #42	; 0x2a
 801063c:	e020      	b.n	8010680 <uxr_read_framed_msg+0x118>
 801063e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8010642:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8010646:	f000 80d4 	beq.w	80107f2 <uxr_read_framed_msg+0x28a>
 801064a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801064e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010652:	f000 8219 	beq.w	8010a88 <uxr_read_framed_msg+0x520>
 8010656:	f806 c003 	strb.w	ip, [r6, r3]
 801065a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 801065e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010660:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8010664:	ea8a 000c 	eor.w	r0, sl, ip
 8010668:	b2c0      	uxtb	r0, r0
 801066a:	3301      	adds	r3, #1
 801066c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8010670:	b29b      	uxth	r3, r3
 8010672:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8010676:	4573      	cmp	r3, lr
 8010678:	8663      	strh	r3, [r4, #50]	; 0x32
 801067a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801067c:	f080 8120 	bcs.w	80108c0 <uxr_read_framed_msg+0x358>
 8010680:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8010684:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8010688:	f100 0c01 	add.w	ip, r0, #1
 801068c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010690:	fba5 8202 	umull	r8, r2, r5, r2
 8010694:	0892      	lsrs	r2, r2, #2
 8010696:	4582      	cmp	sl, r0
 8010698:	eb04 0b00 	add.w	fp, r4, r0
 801069c:	fb01 c212 	mls	r2, r1, r2, ip
 80106a0:	d1cd      	bne.n	801063e <uxr_read_framed_msg+0xd6>
 80106a2:	ee17 8a90 	vmov	r8, s15
 80106a6:	459e      	cmp	lr, r3
 80106a8:	f040 8111 	bne.w	80108ce <uxr_read_framed_msg+0x366>
 80106ac:	2306      	movs	r3, #6
 80106ae:	7023      	strb	r3, [r4, #0]
 80106b0:	e76b      	b.n	801058a <uxr_read_framed_msg+0x22>
 80106b2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80106b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80106ba:	4298      	cmp	r0, r3
 80106bc:	f000 80c2 	beq.w	8010844 <uxr_read_framed_msg+0x2dc>
 80106c0:	18e2      	adds	r2, r4, r3
 80106c2:	7891      	ldrb	r1, [r2, #2]
 80106c4:	297d      	cmp	r1, #125	; 0x7d
 80106c6:	f000 814c 	beq.w	8010962 <uxr_read_framed_msg+0x3fa>
 80106ca:	3301      	adds	r3, #1
 80106cc:	085a      	lsrs	r2, r3, #1
 80106ce:	fba5 0202 	umull	r0, r2, r5, r2
 80106d2:	0892      	lsrs	r2, r2, #2
 80106d4:	202a      	movs	r0, #42	; 0x2a
 80106d6:	fb00 3312 	mls	r3, r0, r2, r3
 80106da:	297e      	cmp	r1, #126	; 0x7e
 80106dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80106e0:	f000 81ca 	beq.w	8010a78 <uxr_read_framed_msg+0x510>
 80106e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80106e6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80106ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	2000      	movs	r0, #0
 80106f0:	428b      	cmp	r3, r1
 80106f2:	8623      	strh	r3, [r4, #48]	; 0x30
 80106f4:	8660      	strh	r0, [r4, #50]	; 0x32
 80106f6:	86e0      	strh	r0, [r4, #54]	; 0x36
 80106f8:	f240 80df 	bls.w	80108ba <uxr_read_framed_msg+0x352>
 80106fc:	7020      	strb	r0, [r4, #0]
 80106fe:	b003      	add	sp, #12
 8010700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010704:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010708:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801070c:	4299      	cmp	r1, r3
 801070e:	f000 80a8 	beq.w	8010862 <uxr_read_framed_msg+0x2fa>
 8010712:	18e2      	adds	r2, r4, r3
 8010714:	7890      	ldrb	r0, [r2, #2]
 8010716:	287d      	cmp	r0, #125	; 0x7d
 8010718:	f000 8164 	beq.w	80109e4 <uxr_read_framed_msg+0x47c>
 801071c:	3301      	adds	r3, #1
 801071e:	085a      	lsrs	r2, r3, #1
 8010720:	fba5 1202 	umull	r1, r2, r5, r2
 8010724:	0892      	lsrs	r2, r2, #2
 8010726:	212a      	movs	r1, #42	; 0x2a
 8010728:	fb01 3312 	mls	r3, r1, r2, r3
 801072c:	287e      	cmp	r0, #126	; 0x7e
 801072e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010732:	f000 8191 	beq.w	8010a58 <uxr_read_framed_msg+0x4f0>
 8010736:	2304      	movs	r3, #4
 8010738:	8620      	strh	r0, [r4, #48]	; 0x30
 801073a:	7023      	strb	r3, [r4, #0]
 801073c:	e725      	b.n	801058a <uxr_read_framed_msg+0x22>
 801073e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010742:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010746:	4290      	cmp	r0, r2
 8010748:	f000 80b3 	beq.w	80108b2 <uxr_read_framed_msg+0x34a>
 801074c:	18a3      	adds	r3, r4, r2
 801074e:	7899      	ldrb	r1, [r3, #2]
 8010750:	297d      	cmp	r1, #125	; 0x7d
 8010752:	f000 8164 	beq.w	8010a1e <uxr_read_framed_msg+0x4b6>
 8010756:	3201      	adds	r2, #1
 8010758:	0850      	lsrs	r0, r2, #1
 801075a:	fba5 3000 	umull	r3, r0, r5, r0
 801075e:	0880      	lsrs	r0, r0, #2
 8010760:	232a      	movs	r3, #42	; 0x2a
 8010762:	fb03 2210 	mls	r2, r3, r0, r2
 8010766:	297e      	cmp	r1, #126	; 0x7e
 8010768:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801076c:	f000 8188 	beq.w	8010a80 <uxr_read_framed_msg+0x518>
 8010770:	7863      	ldrb	r3, [r4, #1]
 8010772:	428b      	cmp	r3, r1
 8010774:	bf0c      	ite	eq
 8010776:	2303      	moveq	r3, #3
 8010778:	2300      	movne	r3, #0
 801077a:	7023      	strb	r3, [r4, #0]
 801077c:	e705      	b.n	801058a <uxr_read_framed_msg+0x22>
 801077e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010782:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010786:	2200      	movs	r2, #0
 8010788:	4299      	cmp	r1, r3
 801078a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801078e:	d06c      	beq.n	801086a <uxr_read_framed_msg+0x302>
 8010790:	18e2      	adds	r2, r4, r3
 8010792:	7890      	ldrb	r0, [r2, #2]
 8010794:	287d      	cmp	r0, #125	; 0x7d
 8010796:	f000 8101 	beq.w	801099c <uxr_read_framed_msg+0x434>
 801079a:	3301      	adds	r3, #1
 801079c:	085a      	lsrs	r2, r3, #1
 801079e:	fba5 1202 	umull	r1, r2, r5, r2
 80107a2:	0892      	lsrs	r2, r2, #2
 80107a4:	212a      	movs	r1, #42	; 0x2a
 80107a6:	fb01 3312 	mls	r3, r1, r2, r3
 80107aa:	287e      	cmp	r0, #126	; 0x7e
 80107ac:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80107b0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80107b4:	d059      	beq.n	801086a <uxr_read_framed_msg+0x302>
 80107b6:	2302      	movs	r3, #2
 80107b8:	7023      	strb	r3, [r4, #0]
 80107ba:	e6e6      	b.n	801058a <uxr_read_framed_msg+0x22>
 80107bc:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80107c0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80107c4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80107c8:	1c51      	adds	r1, r2, #1
 80107ca:	084b      	lsrs	r3, r1, #1
 80107cc:	fba5 c303 	umull	ip, r3, r5, r3
 80107d0:	089b      	lsrs	r3, r3, #2
 80107d2:	fb0e 1313 	mls	r3, lr, r3, r1
 80107d6:	4592      	cmp	sl, r2
 80107d8:	eb04 0002 	add.w	r0, r4, r2
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	f43f af04 	beq.w	80105ea <uxr_read_framed_msg+0x82>
 80107e2:	7883      	ldrb	r3, [r0, #2]
 80107e4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80107e8:	2b7e      	cmp	r3, #126	; 0x7e
 80107ea:	d1ed      	bne.n	80107c8 <uxr_read_framed_msg+0x260>
 80107ec:	2301      	movs	r3, #1
 80107ee:	7023      	strb	r3, [r4, #0]
 80107f0:	e6cb      	b.n	801058a <uxr_read_framed_msg+0x22>
 80107f2:	f100 0c01 	add.w	ip, r0, #1
 80107f6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80107fa:	fba5 8202 	umull	r8, r2, r5, r2
 80107fe:	0892      	lsrs	r2, r2, #2
 8010800:	fb01 c212 	mls	r2, r1, r2, ip
 8010804:	eb04 0c02 	add.w	ip, r4, r2
 8010808:	b2d2      	uxtb	r2, r2
 801080a:	4592      	cmp	sl, r2
 801080c:	f100 0002 	add.w	r0, r0, #2
 8010810:	f43f af47 	beq.w	80106a2 <uxr_read_framed_msg+0x13a>
 8010814:	0842      	lsrs	r2, r0, #1
 8010816:	f89c a002 	ldrb.w	sl, [ip, #2]
 801081a:	fba5 8202 	umull	r8, r2, r5, r2
 801081e:	0892      	lsrs	r2, r2, #2
 8010820:	fb01 0012 	mls	r0, r1, r2, r0
 8010824:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8010828:	f08a 0c20 	eor.w	ip, sl, #32
 801082c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8010830:	f47f af11 	bne.w	8010656 <uxr_read_framed_msg+0xee>
 8010834:	459e      	cmp	lr, r3
 8010836:	ee17 8a90 	vmov	r8, s15
 801083a:	f43f af37 	beq.w	80106ac <uxr_read_framed_msg+0x144>
 801083e:	2301      	movs	r3, #1
 8010840:	7023      	strb	r3, [r4, #0]
 8010842:	e6a2      	b.n	801058a <uxr_read_framed_msg+0x22>
 8010844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010846:	9300      	str	r3, [sp, #0]
 8010848:	2301      	movs	r3, #1
 801084a:	9301      	str	r3, [sp, #4]
 801084c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801084e:	464a      	mov	r2, r9
 8010850:	4641      	mov	r1, r8
 8010852:	4620      	mov	r0, r4
 8010854:	f7ff fe06 	bl	8010464 <uxr_framing_read_transport>
 8010858:	2800      	cmp	r0, #0
 801085a:	f43f aec6 	beq.w	80105ea <uxr_read_framed_msg+0x82>
 801085e:	7823      	ldrb	r3, [r4, #0]
 8010860:	e693      	b.n	801058a <uxr_read_framed_msg+0x22>
 8010862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	2302      	movs	r3, #2
 8010868:	e7ef      	b.n	801084a <uxr_read_framed_msg+0x2e2>
 801086a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801086c:	9300      	str	r3, [sp, #0]
 801086e:	2304      	movs	r3, #4
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	464a      	mov	r2, r9
 8010874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010876:	4641      	mov	r1, r8
 8010878:	4620      	mov	r0, r4
 801087a:	f7ff fdf3 	bl	8010464 <uxr_framing_read_transport>
 801087e:	2800      	cmp	r0, #0
 8010880:	d1ed      	bne.n	801085e <uxr_read_framed_msg+0x2f6>
 8010882:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010886:	2b7e      	cmp	r3, #126	; 0x7e
 8010888:	d0e9      	beq.n	801085e <uxr_read_framed_msg+0x2f6>
 801088a:	e6ae      	b.n	80105ea <uxr_read_framed_msg+0x82>
 801088c:	30c30c31 	.word	0x30c30c31
 8010890:	08013334 	.word	0x08013334
 8010894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	2305      	movs	r3, #5
 801089a:	9301      	str	r3, [sp, #4]
 801089c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801089e:	f7ff fde1 	bl	8010464 <uxr_framing_read_transport>
 80108a2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80108a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80108aa:	429a      	cmp	r2, r3
 80108ac:	f43f ae9d 	beq.w	80105ea <uxr_read_framed_msg+0x82>
 80108b0:	e668      	b.n	8010584 <uxr_read_framed_msg+0x1c>
 80108b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	2303      	movs	r3, #3
 80108b8:	e7c7      	b.n	801084a <uxr_read_framed_msg+0x2e2>
 80108ba:	2305      	movs	r3, #5
 80108bc:	7023      	strb	r3, [r4, #0]
 80108be:	e664      	b.n	801058a <uxr_read_framed_msg+0x22>
 80108c0:	ee17 8a90 	vmov	r8, s15
 80108c4:	f43f aef2 	beq.w	80106ac <uxr_read_framed_msg+0x144>
 80108c8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80108cc:	d08e      	beq.n	80107ec <uxr_read_framed_msg+0x284>
 80108ce:	ebae 0303 	sub.w	r3, lr, r3
 80108d2:	3302      	adds	r3, #2
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	e7b7      	b.n	801084c <uxr_read_framed_msg+0x2e4>
 80108dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108de:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80108e2:	7013      	strb	r3, [r2, #0]
 80108e4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80108e6:	b003      	add	sp, #12
 80108e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ec:	f103 0c01 	add.w	ip, r3, #1
 80108f0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80108f4:	fba5 0202 	umull	r0, r2, r5, r2
 80108f8:	0892      	lsrs	r2, r2, #2
 80108fa:	202a      	movs	r0, #42	; 0x2a
 80108fc:	fb00 c212 	mls	r2, r0, r2, ip
 8010900:	fa5f fc82 	uxtb.w	ip, r2
 8010904:	4561      	cmp	r1, ip
 8010906:	d09d      	beq.n	8010844 <uxr_read_framed_msg+0x2dc>
 8010908:	3302      	adds	r3, #2
 801090a:	4422      	add	r2, r4
 801090c:	0859      	lsrs	r1, r3, #1
 801090e:	7892      	ldrb	r2, [r2, #2]
 8010910:	fba5 c101 	umull	ip, r1, r5, r1
 8010914:	0889      	lsrs	r1, r1, #2
 8010916:	fb00 3311 	mls	r3, r0, r1, r3
 801091a:	2a7e      	cmp	r2, #126	; 0x7e
 801091c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010920:	f000 80aa 	beq.w	8010a78 <uxr_read_framed_msg+0x510>
 8010924:	f082 0220 	eor.w	r2, r2, #32
 8010928:	e654      	b.n	80105d4 <uxr_read_framed_msg+0x6c>
 801092a:	1c58      	adds	r0, r3, #1
 801092c:	0842      	lsrs	r2, r0, #1
 801092e:	fba5 c202 	umull	ip, r2, r5, r2
 8010932:	0892      	lsrs	r2, r2, #2
 8010934:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010938:	fb0c 0212 	mls	r2, ip, r2, r0
 801093c:	b2d0      	uxtb	r0, r2
 801093e:	4281      	cmp	r1, r0
 8010940:	d08f      	beq.n	8010862 <uxr_read_framed_msg+0x2fa>
 8010942:	4422      	add	r2, r4
 8010944:	3302      	adds	r3, #2
 8010946:	7890      	ldrb	r0, [r2, #2]
 8010948:	085a      	lsrs	r2, r3, #1
 801094a:	fba5 1202 	umull	r1, r2, r5, r2
 801094e:	0892      	lsrs	r2, r2, #2
 8010950:	fb0c 3312 	mls	r3, ip, r2, r3
 8010954:	287e      	cmp	r0, #126	; 0x7e
 8010956:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801095a:	d07d      	beq.n	8010a58 <uxr_read_framed_msg+0x4f0>
 801095c:	f080 0020 	eor.w	r0, r0, #32
 8010960:	e660      	b.n	8010624 <uxr_read_framed_msg+0xbc>
 8010962:	1c59      	adds	r1, r3, #1
 8010964:	084a      	lsrs	r2, r1, #1
 8010966:	fba5 c202 	umull	ip, r2, r5, r2
 801096a:	0892      	lsrs	r2, r2, #2
 801096c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010970:	fb0c 1212 	mls	r2, ip, r2, r1
 8010974:	b2d1      	uxtb	r1, r2
 8010976:	4288      	cmp	r0, r1
 8010978:	f43f af64 	beq.w	8010844 <uxr_read_framed_msg+0x2dc>
 801097c:	4422      	add	r2, r4
 801097e:	3302      	adds	r3, #2
 8010980:	7891      	ldrb	r1, [r2, #2]
 8010982:	085a      	lsrs	r2, r3, #1
 8010984:	fba5 0202 	umull	r0, r2, r5, r2
 8010988:	0892      	lsrs	r2, r2, #2
 801098a:	fb0c 3312 	mls	r3, ip, r2, r3
 801098e:	297e      	cmp	r1, #126	; 0x7e
 8010990:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010994:	d070      	beq.n	8010a78 <uxr_read_framed_msg+0x510>
 8010996:	f081 0120 	eor.w	r1, r1, #32
 801099a:	e6a3      	b.n	80106e4 <uxr_read_framed_msg+0x17c>
 801099c:	f103 0c01 	add.w	ip, r3, #1
 80109a0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80109a4:	fba5 0202 	umull	r0, r2, r5, r2
 80109a8:	0892      	lsrs	r2, r2, #2
 80109aa:	202a      	movs	r0, #42	; 0x2a
 80109ac:	fb00 c212 	mls	r2, r0, r2, ip
 80109b0:	fa5f fc82 	uxtb.w	ip, r2
 80109b4:	4561      	cmp	r1, ip
 80109b6:	f43f af58 	beq.w	801086a <uxr_read_framed_msg+0x302>
 80109ba:	4422      	add	r2, r4
 80109bc:	3302      	adds	r3, #2
 80109be:	7891      	ldrb	r1, [r2, #2]
 80109c0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80109c4:	085a      	lsrs	r2, r3, #1
 80109c6:	fba5 c202 	umull	ip, r2, r5, r2
 80109ca:	0892      	lsrs	r2, r2, #2
 80109cc:	fb00 3312 	mls	r3, r0, r2, r3
 80109d0:	297e      	cmp	r1, #126	; 0x7e
 80109d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80109d6:	f43f af48 	beq.w	801086a <uxr_read_framed_msg+0x302>
 80109da:	f081 0120 	eor.w	r1, r1, #32
 80109de:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80109e2:	e6e8      	b.n	80107b6 <uxr_read_framed_msg+0x24e>
 80109e4:	1c58      	adds	r0, r3, #1
 80109e6:	0842      	lsrs	r2, r0, #1
 80109e8:	fba5 c202 	umull	ip, r2, r5, r2
 80109ec:	0892      	lsrs	r2, r2, #2
 80109ee:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80109f2:	fb0c 0212 	mls	r2, ip, r2, r0
 80109f6:	b2d0      	uxtb	r0, r2
 80109f8:	4281      	cmp	r1, r0
 80109fa:	f43f af32 	beq.w	8010862 <uxr_read_framed_msg+0x2fa>
 80109fe:	4422      	add	r2, r4
 8010a00:	3302      	adds	r3, #2
 8010a02:	7890      	ldrb	r0, [r2, #2]
 8010a04:	085a      	lsrs	r2, r3, #1
 8010a06:	fba5 1202 	umull	r1, r2, r5, r2
 8010a0a:	0892      	lsrs	r2, r2, #2
 8010a0c:	fb0c 3312 	mls	r3, ip, r2, r3
 8010a10:	287e      	cmp	r0, #126	; 0x7e
 8010a12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010a16:	d01f      	beq.n	8010a58 <uxr_read_framed_msg+0x4f0>
 8010a18:	f080 0020 	eor.w	r0, r0, #32
 8010a1c:	e68b      	b.n	8010736 <uxr_read_framed_msg+0x1ce>
 8010a1e:	1c51      	adds	r1, r2, #1
 8010a20:	084b      	lsrs	r3, r1, #1
 8010a22:	fba5 c303 	umull	ip, r3, r5, r3
 8010a26:	089b      	lsrs	r3, r3, #2
 8010a28:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010a2c:	fb0c 1313 	mls	r3, ip, r3, r1
 8010a30:	b2d9      	uxtb	r1, r3
 8010a32:	4288      	cmp	r0, r1
 8010a34:	f43f af3d 	beq.w	80108b2 <uxr_read_framed_msg+0x34a>
 8010a38:	3202      	adds	r2, #2
 8010a3a:	4423      	add	r3, r4
 8010a3c:	0850      	lsrs	r0, r2, #1
 8010a3e:	789b      	ldrb	r3, [r3, #2]
 8010a40:	fba5 1000 	umull	r1, r0, r5, r0
 8010a44:	0880      	lsrs	r0, r0, #2
 8010a46:	fb0c 2210 	mls	r2, ip, r0, r2
 8010a4a:	2b7e      	cmp	r3, #126	; 0x7e
 8010a4c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010a50:	d016      	beq.n	8010a80 <uxr_read_framed_msg+0x518>
 8010a52:	f083 0120 	eor.w	r1, r3, #32
 8010a56:	e68b      	b.n	8010770 <uxr_read_framed_msg+0x208>
 8010a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	2302      	movs	r3, #2
 8010a5e:	9301      	str	r3, [sp, #4]
 8010a60:	464a      	mov	r2, r9
 8010a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a64:	4641      	mov	r1, r8
 8010a66:	4620      	mov	r0, r4
 8010a68:	f7ff fcfc 	bl	8010464 <uxr_framing_read_transport>
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	f47f aef6 	bne.w	801085e <uxr_read_framed_msg+0x2f6>
 8010a72:	2301      	movs	r3, #1
 8010a74:	7023      	strb	r3, [r4, #0]
 8010a76:	e588      	b.n	801058a <uxr_read_framed_msg+0x22>
 8010a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e7ee      	b.n	8010a5e <uxr_read_framed_msg+0x4f6>
 8010a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a82:	9300      	str	r3, [sp, #0]
 8010a84:	2303      	movs	r3, #3
 8010a86:	e7ea      	b.n	8010a5e <uxr_read_framed_msg+0x4f6>
 8010a88:	ee17 8a90 	vmov	r8, s15
 8010a8c:	e6ae      	b.n	80107ec <uxr_read_framed_msg+0x284>
 8010a8e:	bf00      	nop

08010a90 <rcl_get_default_domain_id>:
 8010a90:	b530      	push	{r4, r5, lr}
 8010a92:	b083      	sub	sp, #12
 8010a94:	2300      	movs	r3, #0
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	b1d0      	cbz	r0, 8010ad0 <rcl_get_default_domain_id+0x40>
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	4669      	mov	r1, sp
 8010a9e:	4815      	ldr	r0, [pc, #84]	; (8010af4 <rcl_get_default_domain_id+0x64>)
 8010aa0:	f7fc ffee 	bl	800da80 <rcutils_get_env>
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	b110      	cbz	r0, 8010aae <rcl_get_default_domain_id+0x1e>
 8010aa8:	2001      	movs	r0, #1
 8010aaa:	b003      	add	sp, #12
 8010aac:	bd30      	pop	{r4, r5, pc}
 8010aae:	9b00      	ldr	r3, [sp, #0]
 8010ab0:	b18b      	cbz	r3, 8010ad6 <rcl_get_default_domain_id+0x46>
 8010ab2:	7818      	ldrb	r0, [r3, #0]
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d0f8      	beq.n	8010aaa <rcl_get_default_domain_id+0x1a>
 8010ab8:	a901      	add	r1, sp, #4
 8010aba:	4618      	mov	r0, r3
 8010abc:	9201      	str	r2, [sp, #4]
 8010abe:	f000 feb1 	bl	8011824 <strtoul>
 8010ac2:	4605      	mov	r5, r0
 8010ac4:	b150      	cbz	r0, 8010adc <rcl_get_default_domain_id+0x4c>
 8010ac6:	1c43      	adds	r3, r0, #1
 8010ac8:	d00d      	beq.n	8010ae6 <rcl_get_default_domain_id+0x56>
 8010aca:	6025      	str	r5, [r4, #0]
 8010acc:	2000      	movs	r0, #0
 8010ace:	e7ec      	b.n	8010aaa <rcl_get_default_domain_id+0x1a>
 8010ad0:	200b      	movs	r0, #11
 8010ad2:	b003      	add	sp, #12
 8010ad4:	bd30      	pop	{r4, r5, pc}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	b003      	add	sp, #12
 8010ada:	bd30      	pop	{r4, r5, pc}
 8010adc:	9b01      	ldr	r3, [sp, #4]
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d0f2      	beq.n	8010aca <rcl_get_default_domain_id+0x3a>
 8010ae4:	e7e0      	b.n	8010aa8 <rcl_get_default_domain_id+0x18>
 8010ae6:	f001 f8ad 	bl	8011c44 <__errno>
 8010aea:	6803      	ldr	r3, [r0, #0]
 8010aec:	2b22      	cmp	r3, #34	; 0x22
 8010aee:	d1ec      	bne.n	8010aca <rcl_get_default_domain_id+0x3a>
 8010af0:	e7da      	b.n	8010aa8 <rcl_get_default_domain_id+0x18>
 8010af2:	bf00      	nop
 8010af4:	08013534 	.word	0x08013534

08010af8 <rcl_expand_topic_name>:
 8010af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	b08b      	sub	sp, #44	; 0x2c
 8010afe:	9306      	str	r3, [sp, #24]
 8010b00:	2800      	cmp	r0, #0
 8010b02:	f000 80ad 	beq.w	8010c60 <rcl_expand_topic_name+0x168>
 8010b06:	460e      	mov	r6, r1
 8010b08:	2900      	cmp	r1, #0
 8010b0a:	f000 80a9 	beq.w	8010c60 <rcl_expand_topic_name+0x168>
 8010b0e:	4617      	mov	r7, r2
 8010b10:	2a00      	cmp	r2, #0
 8010b12:	f000 80a5 	beq.w	8010c60 <rcl_expand_topic_name+0x168>
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f000 80a2 	beq.w	8010c60 <rcl_expand_topic_name+0x168>
 8010b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f000 809e 	beq.w	8010c60 <rcl_expand_topic_name+0x168>
 8010b24:	2200      	movs	r2, #0
 8010b26:	a909      	add	r1, sp, #36	; 0x24
 8010b28:	4680      	mov	r8, r0
 8010b2a:	f000 f9f5 	bl	8010f18 <rcl_validate_topic_name>
 8010b2e:	4604      	mov	r4, r0
 8010b30:	2800      	cmp	r0, #0
 8010b32:	f040 8096 	bne.w	8010c62 <rcl_expand_topic_name+0x16a>
 8010b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f040 809a 	bne.w	8010c72 <rcl_expand_topic_name+0x17a>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	a909      	add	r1, sp, #36	; 0x24
 8010b42:	4630      	mov	r0, r6
 8010b44:	f7fd fbbe 	bl	800e2c4 <rmw_validate_node_name>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	f040 808e 	bne.w	8010c6a <rcl_expand_topic_name+0x172>
 8010b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b50:	2a00      	cmp	r2, #0
 8010b52:	f040 8093 	bne.w	8010c7c <rcl_expand_topic_name+0x184>
 8010b56:	a909      	add	r1, sp, #36	; 0x24
 8010b58:	4638      	mov	r0, r7
 8010b5a:	f7fd fb95 	bl	800e288 <rmw_validate_namespace>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f040 8083 	bne.w	8010c6a <rcl_expand_topic_name+0x172>
 8010b64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010b66:	2c00      	cmp	r4, #0
 8010b68:	f040 80ed 	bne.w	8010d46 <rcl_expand_topic_name+0x24e>
 8010b6c:	217b      	movs	r1, #123	; 0x7b
 8010b6e:	4640      	mov	r0, r8
 8010b70:	f000 ffdc 	bl	8011b2c <strchr>
 8010b74:	f898 3000 	ldrb.w	r3, [r8]
 8010b78:	2b2f      	cmp	r3, #47	; 0x2f
 8010b7a:	4605      	mov	r5, r0
 8010b7c:	f000 809e 	beq.w	8010cbc <rcl_expand_topic_name+0x1c4>
 8010b80:	2b7e      	cmp	r3, #126	; 0x7e
 8010b82:	f040 80a2 	bne.w	8010cca <rcl_expand_topic_name+0x1d2>
 8010b86:	4638      	mov	r0, r7
 8010b88:	f7ef fb2c 	bl	80001e4 <strlen>
 8010b8c:	4a82      	ldr	r2, [pc, #520]	; (8010d98 <rcl_expand_topic_name+0x2a0>)
 8010b8e:	4b83      	ldr	r3, [pc, #524]	; (8010d9c <rcl_expand_topic_name+0x2a4>)
 8010b90:	2801      	cmp	r0, #1
 8010b92:	bf18      	it	ne
 8010b94:	4613      	movne	r3, r2
 8010b96:	9302      	str	r3, [sp, #8]
 8010b98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010ba0:	f108 0301 	add.w	r3, r8, #1
 8010ba4:	9305      	str	r3, [sp, #20]
 8010ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010baa:	9301      	str	r3, [sp, #4]
 8010bac:	ab14      	add	r3, sp, #80	; 0x50
 8010bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010bb0:	f7fc ff8e 	bl	800dad0 <rcutils_format_string_limit>
 8010bb4:	4682      	mov	sl, r0
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	f000 80c7 	beq.w	8010d4a <rcl_expand_topic_name+0x252>
 8010bbc:	2d00      	cmp	r5, #0
 8010bbe:	f000 80a2 	beq.w	8010d06 <rcl_expand_topic_name+0x20e>
 8010bc2:	217b      	movs	r1, #123	; 0x7b
 8010bc4:	f000 ffb2 	bl	8011b2c <strchr>
 8010bc8:	46d1      	mov	r9, sl
 8010bca:	4605      	mov	r5, r0
 8010bcc:	9407      	str	r4, [sp, #28]
 8010bce:	46d3      	mov	fp, sl
 8010bd0:	464c      	mov	r4, r9
 8010bd2:	2d00      	cmp	r5, #0
 8010bd4:	f000 80be 	beq.w	8010d54 <rcl_expand_topic_name+0x25c>
 8010bd8:	217d      	movs	r1, #125	; 0x7d
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f000 ffa6 	bl	8011b2c <strchr>
 8010be0:	eba0 0905 	sub.w	r9, r0, r5
 8010be4:	f109 0a01 	add.w	sl, r9, #1
 8010be8:	486d      	ldr	r0, [pc, #436]	; (8010da0 <rcl_expand_topic_name+0x2a8>)
 8010bea:	4652      	mov	r2, sl
 8010bec:	4629      	mov	r1, r5
 8010bee:	f000 ffaa 	bl	8011b46 <strncmp>
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	d067      	beq.n	8010cc6 <rcl_expand_topic_name+0x1ce>
 8010bf6:	486b      	ldr	r0, [pc, #428]	; (8010da4 <rcl_expand_topic_name+0x2ac>)
 8010bf8:	4652      	mov	r2, sl
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	f000 ffa3 	bl	8011b46 <strncmp>
 8010c00:	b130      	cbz	r0, 8010c10 <rcl_expand_topic_name+0x118>
 8010c02:	4869      	ldr	r0, [pc, #420]	; (8010da8 <rcl_expand_topic_name+0x2b0>)
 8010c04:	4652      	mov	r2, sl
 8010c06:	4629      	mov	r1, r5
 8010c08:	f000 ff9d 	bl	8011b46 <strncmp>
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d137      	bne.n	8010c80 <rcl_expand_topic_name+0x188>
 8010c10:	46b9      	mov	r9, r7
 8010c12:	ab16      	add	r3, sp, #88	; 0x58
 8010c14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010c18:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010c1c:	ab14      	add	r3, sp, #80	; 0x50
 8010c1e:	4628      	mov	r0, r5
 8010c20:	cb0c      	ldmia	r3, {r2, r3}
 8010c22:	4651      	mov	r1, sl
 8010c24:	f7fd f890 	bl	800dd48 <rcutils_strndup>
 8010c28:	4605      	mov	r5, r0
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	f000 809c 	beq.w	8010d68 <rcl_expand_topic_name+0x270>
 8010c30:	464a      	mov	r2, r9
 8010c32:	4620      	mov	r0, r4
 8010c34:	ab14      	add	r3, sp, #80	; 0x50
 8010c36:	4629      	mov	r1, r5
 8010c38:	f7fc ff84 	bl	800db44 <rcutils_repl_str>
 8010c3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010c3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c40:	4604      	mov	r4, r0
 8010c42:	4628      	mov	r0, r5
 8010c44:	4798      	blx	r3
 8010c46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c48:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010c4a:	4658      	mov	r0, fp
 8010c4c:	4798      	blx	r3
 8010c4e:	2c00      	cmp	r4, #0
 8010c50:	d07b      	beq.n	8010d4a <rcl_expand_topic_name+0x252>
 8010c52:	217b      	movs	r1, #123	; 0x7b
 8010c54:	4620      	mov	r0, r4
 8010c56:	f000 ff69 	bl	8011b2c <strchr>
 8010c5a:	46a3      	mov	fp, r4
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	e7b8      	b.n	8010bd2 <rcl_expand_topic_name+0xda>
 8010c60:	240b      	movs	r4, #11
 8010c62:	4620      	mov	r0, r4
 8010c64:	b00b      	add	sp, #44	; 0x2c
 8010c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6a:	f7fb ff0d 	bl	800ca88 <rcl_convert_rmw_ret_to_rcl_ret>
 8010c6e:	4604      	mov	r4, r0
 8010c70:	e7f7      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010c72:	2467      	movs	r4, #103	; 0x67
 8010c74:	4620      	mov	r0, r4
 8010c76:	b00b      	add	sp, #44	; 0x2c
 8010c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7c:	24c9      	movs	r4, #201	; 0xc9
 8010c7e:	e7f0      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010c80:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8010c84:	9806      	ldr	r0, [sp, #24]
 8010c86:	1c69      	adds	r1, r5, #1
 8010c88:	f7fd f978 	bl	800df7c <rcutils_string_map_getn>
 8010c8c:	4681      	mov	r9, r0
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d1bf      	bne.n	8010c12 <rcl_expand_topic_name+0x11a>
 8010c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c94:	aa16      	add	r2, sp, #88	; 0x58
 8010c96:	6018      	str	r0, [r3, #0]
 8010c98:	ca07      	ldmia	r2, {r0, r1, r2}
 8010c9a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010c9e:	ab14      	add	r3, sp, #80	; 0x50
 8010ca0:	cb0c      	ldmia	r3, {r2, r3}
 8010ca2:	4651      	mov	r1, sl
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f7fd f84f 	bl	800dd48 <rcutils_strndup>
 8010caa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cae:	4798      	blx	r3
 8010cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cb4:	4658      	mov	r0, fp
 8010cb6:	2469      	movs	r4, #105	; 0x69
 8010cb8:	4798      	blx	r3
 8010cba:	e7d2      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d05b      	beq.n	8010d78 <rcl_expand_topic_name+0x280>
 8010cc0:	46c1      	mov	r9, r8
 8010cc2:	46a2      	mov	sl, r4
 8010cc4:	e782      	b.n	8010bcc <rcl_expand_topic_name+0xd4>
 8010cc6:	46b1      	mov	r9, r6
 8010cc8:	e7a3      	b.n	8010c12 <rcl_expand_topic_name+0x11a>
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	d1f8      	bne.n	8010cc0 <rcl_expand_topic_name+0x1c8>
 8010cce:	4638      	mov	r0, r7
 8010cd0:	f7ef fa88 	bl	80001e4 <strlen>
 8010cd4:	4a35      	ldr	r2, [pc, #212]	; (8010dac <rcl_expand_topic_name+0x2b4>)
 8010cd6:	4b36      	ldr	r3, [pc, #216]	; (8010db0 <rcl_expand_topic_name+0x2b8>)
 8010cd8:	f8cd 8010 	str.w	r8, [sp, #16]
 8010cdc:	2801      	cmp	r0, #1
 8010cde:	bf18      	it	ne
 8010ce0:	4613      	movne	r3, r2
 8010ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010ce6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8010cea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010cec:	9703      	str	r7, [sp, #12]
 8010cee:	9200      	str	r2, [sp, #0]
 8010cf0:	ab14      	add	r3, sp, #80	; 0x50
 8010cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010cf4:	f7fc feec 	bl	800dad0 <rcutils_format_string_limit>
 8010cf8:	4682      	mov	sl, r0
 8010cfa:	4653      	mov	r3, sl
 8010cfc:	b32b      	cbz	r3, 8010d4a <rcl_expand_topic_name+0x252>
 8010cfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d00:	f8c3 a000 	str.w	sl, [r3]
 8010d04:	e7ad      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010d06:	f89a 3000 	ldrb.w	r3, [sl]
 8010d0a:	2b2f      	cmp	r3, #47	; 0x2f
 8010d0c:	d0f7      	beq.n	8010cfe <rcl_expand_topic_name+0x206>
 8010d0e:	4638      	mov	r0, r7
 8010d10:	f7ef fa68 	bl	80001e4 <strlen>
 8010d14:	4a25      	ldr	r2, [pc, #148]	; (8010dac <rcl_expand_topic_name+0x2b4>)
 8010d16:	4b26      	ldr	r3, [pc, #152]	; (8010db0 <rcl_expand_topic_name+0x2b8>)
 8010d18:	f8cd a010 	str.w	sl, [sp, #16]
 8010d1c:	2801      	cmp	r0, #1
 8010d1e:	bf18      	it	ne
 8010d20:	4613      	movne	r3, r2
 8010d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010d26:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8010d2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010d2c:	9703      	str	r7, [sp, #12]
 8010d2e:	9200      	str	r2, [sp, #0]
 8010d30:	ab14      	add	r3, sp, #80	; 0x50
 8010d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010d34:	f7fc fecc 	bl	800dad0 <rcutils_format_string_limit>
 8010d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010d3c:	4605      	mov	r5, r0
 8010d3e:	4650      	mov	r0, sl
 8010d40:	4798      	blx	r3
 8010d42:	46aa      	mov	sl, r5
 8010d44:	e7d9      	b.n	8010cfa <rcl_expand_topic_name+0x202>
 8010d46:	24ca      	movs	r4, #202	; 0xca
 8010d48:	e78b      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010d4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	6013      	str	r3, [r2, #0]
 8010d50:	240a      	movs	r4, #10
 8010d52:	e786      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010d54:	465b      	mov	r3, fp
 8010d56:	9c07      	ldr	r4, [sp, #28]
 8010d58:	46da      	mov	sl, fp
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1d3      	bne.n	8010d06 <rcl_expand_topic_name+0x20e>
 8010d5e:	f898 3000 	ldrb.w	r3, [r8]
 8010d62:	2b2f      	cmp	r3, #47	; 0x2f
 8010d64:	d0cb      	beq.n	8010cfe <rcl_expand_topic_name+0x206>
 8010d66:	e7b2      	b.n	8010cce <rcl_expand_topic_name+0x1d6>
 8010d68:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8010d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d6e:	6015      	str	r5, [r2, #0]
 8010d70:	4658      	mov	r0, fp
 8010d72:	4798      	blx	r3
 8010d74:	240a      	movs	r4, #10
 8010d76:	e774      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010d78:	ab17      	add	r3, sp, #92	; 0x5c
 8010d7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010d7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010d82:	ab14      	add	r3, sp, #80	; 0x50
 8010d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d86:	4640      	mov	r0, r8
 8010d88:	f7fc ffbc 	bl	800dd04 <rcutils_strdup>
 8010d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	6018      	str	r0, [r3, #0]
 8010d92:	bf08      	it	eq
 8010d94:	240a      	moveq	r4, #10
 8010d96:	e764      	b.n	8010c62 <rcl_expand_topic_name+0x16a>
 8010d98:	08013544 	.word	0x08013544
 8010d9c:	08012cd8 	.word	0x08012cd8
 8010da0:	0801354c 	.word	0x0801354c
 8010da4:	08013554 	.word	0x08013554
 8010da8:	0801355c 	.word	0x0801355c
 8010dac:	08012e6c 	.word	0x08012e6c
 8010db0:	08012ce8 	.word	0x08012ce8

08010db4 <rcl_get_default_topic_name_substitutions>:
 8010db4:	2800      	cmp	r0, #0
 8010db6:	bf0c      	ite	eq
 8010db8:	200b      	moveq	r0, #11
 8010dba:	2000      	movne	r0, #0
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop

08010dc0 <rcl_get_zero_initialized_guard_condition>:
 8010dc0:	4a03      	ldr	r2, [pc, #12]	; (8010dd0 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	4770      	bx	lr
 8010dd0:	08013568 	.word	0x08013568

08010dd4 <rcl_guard_condition_init_from_rmw>:
 8010dd4:	b082      	sub	sp, #8
 8010dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010de0:	4604      	mov	r4, r0
 8010de2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8010de6:	460e      	mov	r6, r1
 8010de8:	4617      	mov	r7, r2
 8010dea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010dee:	f10d 0e04 	add.w	lr, sp, #4
 8010df2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010df6:	f8dc 3000 	ldr.w	r3, [ip]
 8010dfa:	f8ce 3000 	str.w	r3, [lr]
 8010dfe:	a801      	add	r0, sp, #4
 8010e00:	f7f7 fab2 	bl	8008368 <rcutils_allocator_is_valid>
 8010e04:	b350      	cbz	r0, 8010e5c <rcl_guard_condition_init_from_rmw+0x88>
 8010e06:	b34c      	cbz	r4, 8010e5c <rcl_guard_condition_init_from_rmw+0x88>
 8010e08:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010e0c:	f1b8 0f00 	cmp.w	r8, #0
 8010e10:	d11e      	bne.n	8010e50 <rcl_guard_condition_init_from_rmw+0x7c>
 8010e12:	b31f      	cbz	r7, 8010e5c <rcl_guard_condition_init_from_rmw+0x88>
 8010e14:	4638      	mov	r0, r7
 8010e16:	f7fb fe55 	bl	800cac4 <rcl_context_is_valid>
 8010e1a:	b328      	cbz	r0, 8010e68 <rcl_guard_condition_init_from_rmw+0x94>
 8010e1c:	9b01      	ldr	r3, [sp, #4]
 8010e1e:	9905      	ldr	r1, [sp, #20]
 8010e20:	201c      	movs	r0, #28
 8010e22:	4798      	blx	r3
 8010e24:	4605      	mov	r5, r0
 8010e26:	6060      	str	r0, [r4, #4]
 8010e28:	b358      	cbz	r0, 8010e82 <rcl_guard_condition_init_from_rmw+0xae>
 8010e2a:	b1fe      	cbz	r6, 8010e6c <rcl_guard_condition_init_from_rmw+0x98>
 8010e2c:	6006      	str	r6, [r0, #0]
 8010e2e:	f880 8004 	strb.w	r8, [r0, #4]
 8010e32:	ac01      	add	r4, sp, #4
 8010e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e36:	f105 0c08 	add.w	ip, r5, #8
 8010e3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e3e:	6823      	ldr	r3, [r4, #0]
 8010e40:	f8cc 3000 	str.w	r3, [ip]
 8010e44:	2000      	movs	r0, #0
 8010e46:	b006      	add	sp, #24
 8010e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4c:	b002      	add	sp, #8
 8010e4e:	4770      	bx	lr
 8010e50:	2064      	movs	r0, #100	; 0x64
 8010e52:	b006      	add	sp, #24
 8010e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e58:	b002      	add	sp, #8
 8010e5a:	4770      	bx	lr
 8010e5c:	200b      	movs	r0, #11
 8010e5e:	b006      	add	sp, #24
 8010e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e64:	b002      	add	sp, #8
 8010e66:	4770      	bx	lr
 8010e68:	2065      	movs	r0, #101	; 0x65
 8010e6a:	e7f2      	b.n	8010e52 <rcl_guard_condition_init_from_rmw+0x7e>
 8010e6c:	6838      	ldr	r0, [r7, #0]
 8010e6e:	3028      	adds	r0, #40	; 0x28
 8010e70:	f000 fa78 	bl	8011364 <rmw_create_guard_condition>
 8010e74:	6028      	str	r0, [r5, #0]
 8010e76:	6865      	ldr	r5, [r4, #4]
 8010e78:	682e      	ldr	r6, [r5, #0]
 8010e7a:	b126      	cbz	r6, 8010e86 <rcl_guard_condition_init_from_rmw+0xb2>
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	712b      	strb	r3, [r5, #4]
 8010e80:	e7d7      	b.n	8010e32 <rcl_guard_condition_init_from_rmw+0x5e>
 8010e82:	200a      	movs	r0, #10
 8010e84:	e7e5      	b.n	8010e52 <rcl_guard_condition_init_from_rmw+0x7e>
 8010e86:	4628      	mov	r0, r5
 8010e88:	9b02      	ldr	r3, [sp, #8]
 8010e8a:	9905      	ldr	r1, [sp, #20]
 8010e8c:	4798      	blx	r3
 8010e8e:	6066      	str	r6, [r4, #4]
 8010e90:	2001      	movs	r0, #1
 8010e92:	e7de      	b.n	8010e52 <rcl_guard_condition_init_from_rmw+0x7e>

08010e94 <rcl_guard_condition_fini>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	b1f0      	cbz	r0, 8010ed8 <rcl_guard_condition_fini+0x44>
 8010e9a:	6843      	ldr	r3, [r0, #4]
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	b163      	cbz	r3, 8010eba <rcl_guard_condition_fini+0x26>
 8010ea0:	6818      	ldr	r0, [r3, #0]
 8010ea2:	68de      	ldr	r6, [r3, #12]
 8010ea4:	6999      	ldr	r1, [r3, #24]
 8010ea6:	b160      	cbz	r0, 8010ec2 <rcl_guard_condition_fini+0x2e>
 8010ea8:	791d      	ldrb	r5, [r3, #4]
 8010eaa:	b965      	cbnz	r5, 8010ec6 <rcl_guard_condition_fini+0x32>
 8010eac:	4618      	mov	r0, r3
 8010eae:	47b0      	blx	r6
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	6063      	str	r3, [r4, #4]
 8010eb6:	b002      	add	sp, #8
 8010eb8:	bd70      	pop	{r4, r5, r6, pc}
 8010eba:	461d      	mov	r5, r3
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	b002      	add	sp, #8
 8010ec0:	bd70      	pop	{r4, r5, r6, pc}
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	e7f2      	b.n	8010eac <rcl_guard_condition_fini+0x18>
 8010ec6:	9101      	str	r1, [sp, #4]
 8010ec8:	f000 fa60 	bl	801138c <rmw_destroy_guard_condition>
 8010ecc:	1e05      	subs	r5, r0, #0
 8010ece:	6863      	ldr	r3, [r4, #4]
 8010ed0:	9901      	ldr	r1, [sp, #4]
 8010ed2:	bf18      	it	ne
 8010ed4:	2501      	movne	r5, #1
 8010ed6:	e7e9      	b.n	8010eac <rcl_guard_condition_fini+0x18>
 8010ed8:	250b      	movs	r5, #11
 8010eda:	4628      	mov	r0, r5
 8010edc:	b002      	add	sp, #8
 8010ede:	bd70      	pop	{r4, r5, r6, pc}

08010ee0 <rcl_guard_condition_get_default_options>:
 8010ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee2:	b087      	sub	sp, #28
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	4668      	mov	r0, sp
 8010ee8:	f7f7 fa30 	bl	800834c <rcutils_get_default_allocator>
 8010eec:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <rcl_guard_condition_get_default_options+0x34>)
 8010eee:	46ee      	mov	lr, sp
 8010ef0:	469c      	mov	ip, r3
 8010ef2:	461d      	mov	r5, r3
 8010ef4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010efe:	4634      	mov	r4, r6
 8010f00:	f8de 7000 	ldr.w	r7, [lr]
 8010f04:	f8cc 7000 	str.w	r7, [ip]
 8010f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	6027      	str	r7, [r4, #0]
 8010f0e:	b007      	add	sp, #28
 8010f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f12:	bf00      	nop
 8010f14:	2000dc6c 	.word	0x2000dc6c

08010f18 <rcl_validate_topic_name>:
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d07a      	beq.n	8011012 <rcl_validate_topic_name+0xfa>
 8010f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f20:	460e      	mov	r6, r1
 8010f22:	2900      	cmp	r1, #0
 8010f24:	d07c      	beq.n	8011020 <rcl_validate_topic_name+0x108>
 8010f26:	4617      	mov	r7, r2
 8010f28:	4605      	mov	r5, r0
 8010f2a:	f7ef f95b 	bl	80001e4 <strlen>
 8010f2e:	b1b0      	cbz	r0, 8010f5e <rcl_validate_topic_name+0x46>
 8010f30:	f895 9000 	ldrb.w	r9, [r5]
 8010f34:	f8df c180 	ldr.w	ip, [pc, #384]	; 80110b8 <rcl_validate_topic_name+0x1a0>
 8010f38:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8010f3c:	f013 0304 	ands.w	r3, r3, #4
 8010f40:	d169      	bne.n	8011016 <rcl_validate_topic_name+0xfe>
 8010f42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8010f46:	f815 2008 	ldrb.w	r2, [r5, r8]
 8010f4a:	2a2f      	cmp	r2, #47	; 0x2f
 8010f4c:	d10e      	bne.n	8010f6c <rcl_validate_topic_name+0x54>
 8010f4e:	2202      	movs	r2, #2
 8010f50:	6032      	str	r2, [r6, #0]
 8010f52:	b36f      	cbz	r7, 8010fb0 <rcl_validate_topic_name+0x98>
 8010f54:	f8c7 8000 	str.w	r8, [r7]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5e:	2301      	movs	r3, #1
 8010f60:	6033      	str	r3, [r6, #0]
 8010f62:	b32f      	cbz	r7, 8010fb0 <rcl_validate_topic_name+0x98>
 8010f64:	2000      	movs	r0, #0
 8010f66:	6038      	str	r0, [r7, #0]
 8010f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f6c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8010f70:	461c      	mov	r4, r3
 8010f72:	4619      	mov	r1, r3
 8010f74:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8010f78:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010f7c:	f1be 0f09 	cmp.w	lr, #9
 8010f80:	d919      	bls.n	8010fb6 <rcl_validate_topic_name+0x9e>
 8010f82:	f022 0e20 	bic.w	lr, r2, #32
 8010f86:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8010f8a:	f1be 0f19 	cmp.w	lr, #25
 8010f8e:	d912      	bls.n	8010fb6 <rcl_validate_topic_name+0x9e>
 8010f90:	2a5f      	cmp	r2, #95	; 0x5f
 8010f92:	d019      	beq.n	8010fc8 <rcl_validate_topic_name+0xb0>
 8010f94:	2a2f      	cmp	r2, #47	; 0x2f
 8010f96:	d051      	beq.n	801103c <rcl_validate_topic_name+0x124>
 8010f98:	2a7e      	cmp	r2, #126	; 0x7e
 8010f9a:	d048      	beq.n	801102e <rcl_validate_topic_name+0x116>
 8010f9c:	2a7b      	cmp	r2, #123	; 0x7b
 8010f9e:	d054      	beq.n	801104a <rcl_validate_topic_name+0x132>
 8010fa0:	2a7d      	cmp	r2, #125	; 0x7d
 8010fa2:	d161      	bne.n	8011068 <rcl_validate_topic_name+0x150>
 8010fa4:	2c00      	cmp	r4, #0
 8010fa6:	d155      	bne.n	8011054 <rcl_validate_topic_name+0x13c>
 8010fa8:	2305      	movs	r3, #5
 8010faa:	6033      	str	r3, [r6, #0]
 8010fac:	b107      	cbz	r7, 8010fb0 <rcl_validate_topic_name+0x98>
 8010fae:	6039      	str	r1, [r7, #0]
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010fba:	0752      	lsls	r2, r2, #29
 8010fbc:	d504      	bpl.n	8010fc8 <rcl_validate_topic_name+0xb0>
 8010fbe:	b11c      	cbz	r4, 8010fc8 <rcl_validate_topic_name+0xb0>
 8010fc0:	b111      	cbz	r1, 8010fc8 <rcl_validate_topic_name+0xb0>
 8010fc2:	1e4a      	subs	r2, r1, #1
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d02d      	beq.n	8011024 <rcl_validate_topic_name+0x10c>
 8010fc8:	3101      	adds	r1, #1
 8010fca:	4288      	cmp	r0, r1
 8010fcc:	d1d2      	bne.n	8010f74 <rcl_validate_topic_name+0x5c>
 8010fce:	2c00      	cmp	r4, #0
 8010fd0:	d145      	bne.n	801105e <rcl_validate_topic_name+0x146>
 8010fd2:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8010fd6:	d04f      	beq.n	8011078 <rcl_validate_topic_name+0x160>
 8010fd8:	4620      	mov	r0, r4
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e006      	b.n	8010fec <rcl_validate_topic_name+0xd4>
 8010fde:	428b      	cmp	r3, r1
 8010fe0:	f105 0501 	add.w	r5, r5, #1
 8010fe4:	f103 0201 	add.w	r2, r3, #1
 8010fe8:	d236      	bcs.n	8011058 <rcl_validate_topic_name+0x140>
 8010fea:	4613      	mov	r3, r2
 8010fec:	4580      	cmp	r8, r0
 8010fee:	f100 0001 	add.w	r0, r0, #1
 8010ff2:	d0f4      	beq.n	8010fde <rcl_validate_topic_name+0xc6>
 8010ff4:	782a      	ldrb	r2, [r5, #0]
 8010ff6:	2a2f      	cmp	r2, #47	; 0x2f
 8010ff8:	d1f1      	bne.n	8010fde <rcl_validate_topic_name+0xc6>
 8010ffa:	786a      	ldrb	r2, [r5, #1]
 8010ffc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011000:	0754      	lsls	r4, r2, #29
 8011002:	d5ec      	bpl.n	8010fde <rcl_validate_topic_name+0xc6>
 8011004:	2204      	movs	r2, #4
 8011006:	6032      	str	r2, [r6, #0]
 8011008:	2f00      	cmp	r7, #0
 801100a:	d0d1      	beq.n	8010fb0 <rcl_validate_topic_name+0x98>
 801100c:	603b      	str	r3, [r7, #0]
 801100e:	2000      	movs	r0, #0
 8011010:	e7aa      	b.n	8010f68 <rcl_validate_topic_name+0x50>
 8011012:	200b      	movs	r0, #11
 8011014:	4770      	bx	lr
 8011016:	2304      	movs	r3, #4
 8011018:	6033      	str	r3, [r6, #0]
 801101a:	2f00      	cmp	r7, #0
 801101c:	d1a2      	bne.n	8010f64 <rcl_validate_topic_name+0x4c>
 801101e:	e7c7      	b.n	8010fb0 <rcl_validate_topic_name+0x98>
 8011020:	200b      	movs	r0, #11
 8011022:	e7a1      	b.n	8010f68 <rcl_validate_topic_name+0x50>
 8011024:	2309      	movs	r3, #9
 8011026:	6033      	str	r3, [r6, #0]
 8011028:	2f00      	cmp	r7, #0
 801102a:	d1c0      	bne.n	8010fae <rcl_validate_topic_name+0x96>
 801102c:	e7c0      	b.n	8010fb0 <rcl_validate_topic_name+0x98>
 801102e:	2900      	cmp	r1, #0
 8011030:	d0ca      	beq.n	8010fc8 <rcl_validate_topic_name+0xb0>
 8011032:	2306      	movs	r3, #6
 8011034:	6033      	str	r3, [r6, #0]
 8011036:	2f00      	cmp	r7, #0
 8011038:	d1b9      	bne.n	8010fae <rcl_validate_topic_name+0x96>
 801103a:	e7b9      	b.n	8010fb0 <rcl_validate_topic_name+0x98>
 801103c:	2c00      	cmp	r4, #0
 801103e:	d0c3      	beq.n	8010fc8 <rcl_validate_topic_name+0xb0>
 8011040:	2308      	movs	r3, #8
 8011042:	6033      	str	r3, [r6, #0]
 8011044:	2f00      	cmp	r7, #0
 8011046:	d1b2      	bne.n	8010fae <rcl_validate_topic_name+0x96>
 8011048:	e7b2      	b.n	8010fb0 <rcl_validate_topic_name+0x98>
 801104a:	2c00      	cmp	r4, #0
 801104c:	d1f8      	bne.n	8011040 <rcl_validate_topic_name+0x128>
 801104e:	460b      	mov	r3, r1
 8011050:	2401      	movs	r4, #1
 8011052:	e7b9      	b.n	8010fc8 <rcl_validate_topic_name+0xb0>
 8011054:	2400      	movs	r4, #0
 8011056:	e7b7      	b.n	8010fc8 <rcl_validate_topic_name+0xb0>
 8011058:	2000      	movs	r0, #0
 801105a:	6030      	str	r0, [r6, #0]
 801105c:	e784      	b.n	8010f68 <rcl_validate_topic_name+0x50>
 801105e:	2205      	movs	r2, #5
 8011060:	6032      	str	r2, [r6, #0]
 8011062:	2f00      	cmp	r7, #0
 8011064:	d1d2      	bne.n	801100c <rcl_validate_topic_name+0xf4>
 8011066:	e7a3      	b.n	8010fb0 <rcl_validate_topic_name+0x98>
 8011068:	2c00      	cmp	r4, #0
 801106a:	bf14      	ite	ne
 801106c:	2308      	movne	r3, #8
 801106e:	2303      	moveq	r3, #3
 8011070:	6033      	str	r3, [r6, #0]
 8011072:	2f00      	cmp	r7, #0
 8011074:	d19b      	bne.n	8010fae <rcl_validate_topic_name+0x96>
 8011076:	e79b      	b.n	8010fb0 <rcl_validate_topic_name+0x98>
 8011078:	2301      	movs	r3, #1
 801107a:	e00a      	b.n	8011092 <rcl_validate_topic_name+0x17a>
 801107c:	2c01      	cmp	r4, #1
 801107e:	d013      	beq.n	80110a8 <rcl_validate_topic_name+0x190>
 8011080:	4299      	cmp	r1, r3
 8011082:	f104 0401 	add.w	r4, r4, #1
 8011086:	f105 0501 	add.w	r5, r5, #1
 801108a:	f103 0201 	add.w	r2, r3, #1
 801108e:	d9e3      	bls.n	8011058 <rcl_validate_topic_name+0x140>
 8011090:	4613      	mov	r3, r2
 8011092:	45a0      	cmp	r8, r4
 8011094:	d0f4      	beq.n	8011080 <rcl_validate_topic_name+0x168>
 8011096:	782a      	ldrb	r2, [r5, #0]
 8011098:	2a2f      	cmp	r2, #47	; 0x2f
 801109a:	d1ef      	bne.n	801107c <rcl_validate_topic_name+0x164>
 801109c:	786a      	ldrb	r2, [r5, #1]
 801109e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80110a2:	0752      	lsls	r2, r2, #29
 80110a4:	d5ec      	bpl.n	8011080 <rcl_validate_topic_name+0x168>
 80110a6:	e7ad      	b.n	8011004 <rcl_validate_topic_name+0xec>
 80110a8:	2307      	movs	r3, #7
 80110aa:	6033      	str	r3, [r6, #0]
 80110ac:	2f00      	cmp	r7, #0
 80110ae:	f43f af7f 	beq.w	8010fb0 <rcl_validate_topic_name+0x98>
 80110b2:	603c      	str	r4, [r7, #0]
 80110b4:	2000      	movs	r0, #0
 80110b6:	e757      	b.n	8010f68 <rcl_validate_topic_name+0x50>
 80110b8:	080135e0 	.word	0x080135e0

080110bc <rcutils_string_array_fini>:
 80110bc:	b320      	cbz	r0, 8011108 <rcutils_string_array_fini+0x4c>
 80110be:	b570      	push	{r4, r5, r6, lr}
 80110c0:	4604      	mov	r4, r0
 80110c2:	6840      	ldr	r0, [r0, #4]
 80110c4:	b1d8      	cbz	r0, 80110fe <rcutils_string_array_fini+0x42>
 80110c6:	f104 0008 	add.w	r0, r4, #8
 80110ca:	f7f7 f94d 	bl	8008368 <rcutils_allocator_is_valid>
 80110ce:	b1b8      	cbz	r0, 8011100 <rcutils_string_array_fini+0x44>
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	b1bb      	cbz	r3, 8011104 <rcutils_string_array_fini+0x48>
 80110d4:	2500      	movs	r5, #0
 80110d6:	6860      	ldr	r0, [r4, #4]
 80110d8:	462e      	mov	r6, r5
 80110da:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80110de:	68e3      	ldr	r3, [r4, #12]
 80110e0:	69a1      	ldr	r1, [r4, #24]
 80110e2:	4798      	blx	r3
 80110e4:	e9d4 3000 	ldrd	r3, r0, [r4]
 80110e8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80110ec:	3501      	adds	r5, #1
 80110ee:	429d      	cmp	r5, r3
 80110f0:	d3f3      	bcc.n	80110da <rcutils_string_array_fini+0x1e>
 80110f2:	68e3      	ldr	r3, [r4, #12]
 80110f4:	69a1      	ldr	r1, [r4, #24]
 80110f6:	4798      	blx	r3
 80110f8:	2000      	movs	r0, #0
 80110fa:	e9c4 0000 	strd	r0, r0, [r4]
 80110fe:	bd70      	pop	{r4, r5, r6, pc}
 8011100:	200b      	movs	r0, #11
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	6860      	ldr	r0, [r4, #4]
 8011106:	e7f4      	b.n	80110f2 <rcutils_string_array_fini+0x36>
 8011108:	200b      	movs	r0, #11
 801110a:	4770      	bx	lr

0801110c <on_status>:
 801110c:	b082      	sub	sp, #8
 801110e:	b002      	add	sp, #8
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop

08011114 <on_topic>:
 8011114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011118:	4a22      	ldr	r2, [pc, #136]	; (80111a4 <on_topic+0x90>)
 801111a:	b094      	sub	sp, #80	; 0x50
 801111c:	6812      	ldr	r2, [r2, #0]
 801111e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8011120:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8011124:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8011128:	b3c2      	cbz	r2, 801119c <on_topic+0x88>
 801112a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801112e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8011132:	e001      	b.n	8011138 <on_topic+0x24>
 8011134:	6852      	ldr	r2, [r2, #4]
 8011136:	b38a      	cbz	r2, 801119c <on_topic+0x88>
 8011138:	6894      	ldr	r4, [r2, #8]
 801113a:	8aa3      	ldrh	r3, [r4, #20]
 801113c:	428b      	cmp	r3, r1
 801113e:	d1f9      	bne.n	8011134 <on_topic+0x20>
 8011140:	7da3      	ldrb	r3, [r4, #22]
 8011142:	4283      	cmp	r3, r0
 8011144:	d1f6      	bne.n	8011134 <on_topic+0x20>
 8011146:	2248      	movs	r2, #72	; 0x48
 8011148:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801114c:	4668      	mov	r0, sp
 801114e:	f000 fdad 	bl	8011cac <memcpy>
 8011152:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8011156:	cb0c      	ldmia	r3, {r2, r3}
 8011158:	4620      	mov	r0, r4
 801115a:	f7f7 fce5 	bl	8008b28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801115e:	4607      	mov	r7, r0
 8011160:	b1e0      	cbz	r0, 801119c <on_topic+0x88>
 8011162:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8011166:	4632      	mov	r2, r6
 8011168:	4628      	mov	r0, r5
 801116a:	f108 0110 	add.w	r1, r8, #16
 801116e:	f7fd ffcf 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 8011172:	b930      	cbnz	r0, 8011182 <on_topic+0x6e>
 8011174:	480c      	ldr	r0, [pc, #48]	; (80111a8 <on_topic+0x94>)
 8011176:	4639      	mov	r1, r7
 8011178:	b014      	add	sp, #80	; 0x50
 801117a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801117e:	f7fd b90f 	b.w	800e3a0 <put_memory>
 8011182:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8011186:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801118a:	f7fd feb7 	bl	800eefc <rmw_uros_epoch_nanos>
 801118e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8011192:	2305      	movs	r3, #5
 8011194:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011198:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801119c:	b014      	add	sp, #80	; 0x50
 801119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111a2:	bf00      	nop
 80111a4:	2000dacc 	.word	0x2000dacc
 80111a8:	2000dabc 	.word	0x2000dabc

080111ac <on_request>:
 80111ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b0:	4823      	ldr	r0, [pc, #140]	; (8011240 <on_request+0x94>)
 80111b2:	b094      	sub	sp, #80	; 0x50
 80111b4:	6800      	ldr	r0, [r0, #0]
 80111b6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80111b8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80111bc:	9113      	str	r1, [sp, #76]	; 0x4c
 80111be:	2800      	cmp	r0, #0
 80111c0:	d03b      	beq.n	801123a <on_request+0x8e>
 80111c2:	461d      	mov	r5, r3
 80111c4:	e001      	b.n	80111ca <on_request+0x1e>
 80111c6:	6840      	ldr	r0, [r0, #4]
 80111c8:	b3b8      	cbz	r0, 801123a <on_request+0x8e>
 80111ca:	6884      	ldr	r4, [r0, #8]
 80111cc:	8b21      	ldrh	r1, [r4, #24]
 80111ce:	4291      	cmp	r1, r2
 80111d0:	d1f9      	bne.n	80111c6 <on_request+0x1a>
 80111d2:	2248      	movs	r2, #72	; 0x48
 80111d4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80111d8:	4668      	mov	r0, sp
 80111da:	f000 fd67 	bl	8011cac <memcpy>
 80111de:	f104 0320 	add.w	r3, r4, #32
 80111e2:	cb0c      	ldmia	r3, {r2, r3}
 80111e4:	4620      	mov	r0, r4
 80111e6:	f7f7 fc9f 	bl	8008b28 <rmw_uxrce_get_static_input_buffer_for_entity>
 80111ea:	4680      	mov	r8, r0
 80111ec:	b328      	cbz	r0, 801123a <on_request+0x8e>
 80111ee:	4638      	mov	r0, r7
 80111f0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80111f4:	4632      	mov	r2, r6
 80111f6:	f107 0110 	add.w	r1, r7, #16
 80111fa:	f7fd ff89 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 80111fe:	b930      	cbnz	r0, 801120e <on_request+0x62>
 8011200:	4810      	ldr	r0, [pc, #64]	; (8011244 <on_request+0x98>)
 8011202:	4641      	mov	r1, r8
 8011204:	b014      	add	sp, #80	; 0x50
 8011206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801120a:	f7fd b8c9 	b.w	800e3a0 <put_memory>
 801120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011210:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8011214:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8011218:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801121c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011220:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011224:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011228:	f7fd fe68 	bl	800eefc <rmw_uros_epoch_nanos>
 801122c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8011230:	2303      	movs	r3, #3
 8011232:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011236:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801123a:	b014      	add	sp, #80	; 0x50
 801123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011240:	2000da9c 	.word	0x2000da9c
 8011244:	2000dabc 	.word	0x2000dabc

08011248 <on_reply>:
 8011248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801124c:	4821      	ldr	r0, [pc, #132]	; (80112d4 <on_reply+0x8c>)
 801124e:	b094      	sub	sp, #80	; 0x50
 8011250:	6800      	ldr	r0, [r0, #0]
 8011252:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011254:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8011258:	9113      	str	r1, [sp, #76]	; 0x4c
 801125a:	b3b8      	cbz	r0, 80112cc <on_reply+0x84>
 801125c:	461d      	mov	r5, r3
 801125e:	e001      	b.n	8011264 <on_reply+0x1c>
 8011260:	6840      	ldr	r0, [r0, #4]
 8011262:	b398      	cbz	r0, 80112cc <on_reply+0x84>
 8011264:	6884      	ldr	r4, [r0, #8]
 8011266:	8b21      	ldrh	r1, [r4, #24]
 8011268:	4291      	cmp	r1, r2
 801126a:	d1f9      	bne.n	8011260 <on_reply+0x18>
 801126c:	2248      	movs	r2, #72	; 0x48
 801126e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011272:	4668      	mov	r0, sp
 8011274:	f000 fd1a 	bl	8011cac <memcpy>
 8011278:	f104 0320 	add.w	r3, r4, #32
 801127c:	cb0c      	ldmia	r3, {r2, r3}
 801127e:	4620      	mov	r0, r4
 8011280:	f7f7 fc52 	bl	8008b28 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011284:	4680      	mov	r8, r0
 8011286:	b308      	cbz	r0, 80112cc <on_reply+0x84>
 8011288:	4638      	mov	r0, r7
 801128a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801128e:	4632      	mov	r2, r6
 8011290:	f107 0110 	add.w	r1, r7, #16
 8011294:	f7fd ff3c 	bl	800f110 <ucdr_deserialize_array_uint8_t>
 8011298:	b930      	cbnz	r0, 80112a8 <on_reply+0x60>
 801129a:	480f      	ldr	r0, [pc, #60]	; (80112d8 <on_reply+0x90>)
 801129c:	4641      	mov	r1, r8
 801129e:	b014      	add	sp, #80	; 0x50
 80112a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112a4:	f7fd b87c 	b.w	800e3a0 <put_memory>
 80112a8:	2200      	movs	r2, #0
 80112aa:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 80112ae:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80112b2:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80112b6:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 80112ba:	f7fd fe1f 	bl	800eefc <rmw_uros_epoch_nanos>
 80112be:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80112c2:	2304      	movs	r3, #4
 80112c4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80112c8:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80112cc:	b014      	add	sp, #80	; 0x50
 80112ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d2:	bf00      	nop
 80112d4:	200091b0 	.word	0x200091b0
 80112d8:	2000dabc 	.word	0x2000dabc

080112dc <rmw_destroy_client>:
 80112dc:	b570      	push	{r4, r5, r6, lr}
 80112de:	b128      	cbz	r0, 80112ec <rmw_destroy_client+0x10>
 80112e0:	4604      	mov	r4, r0
 80112e2:	6800      	ldr	r0, [r0, #0]
 80112e4:	460d      	mov	r5, r1
 80112e6:	f7f7 fcef 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 80112ea:	b910      	cbnz	r0, 80112f2 <rmw_destroy_client+0x16>
 80112ec:	2401      	movs	r4, #1
 80112ee:	4620      	mov	r0, r4
 80112f0:	bd70      	pop	{r4, r5, r6, pc}
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d0f9      	beq.n	80112ec <rmw_destroy_client+0x10>
 80112f8:	2d00      	cmp	r5, #0
 80112fa:	d0f7      	beq.n	80112ec <rmw_destroy_client+0x10>
 80112fc:	6828      	ldr	r0, [r5, #0]
 80112fe:	f7f7 fce3 	bl	8008cc8 <is_uxrce_rmw_identifier_valid>
 8011302:	2800      	cmp	r0, #0
 8011304:	d0f2      	beq.n	80112ec <rmw_destroy_client+0x10>
 8011306:	686e      	ldr	r6, [r5, #4]
 8011308:	2e00      	cmp	r6, #0
 801130a:	d0ef      	beq.n	80112ec <rmw_destroy_client+0x10>
 801130c:	6864      	ldr	r4, [r4, #4]
 801130e:	6932      	ldr	r2, [r6, #16]
 8011310:	6920      	ldr	r0, [r4, #16]
 8011312:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011316:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801131a:	6819      	ldr	r1, [r3, #0]
 801131c:	f7fe fe10 	bl	800ff40 <uxr_buffer_cancel_data>
 8011320:	4602      	mov	r2, r0
 8011322:	6920      	ldr	r0, [r4, #16]
 8011324:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011328:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801132c:	f7f7 fc4c 	bl	8008bc8 <run_xrce_session>
 8011330:	6920      	ldr	r0, [r4, #16]
 8011332:	6932      	ldr	r2, [r6, #16]
 8011334:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011338:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801133c:	6819      	ldr	r1, [r3, #0]
 801133e:	f7f8 fd7f 	bl	8009e40 <uxr_buffer_delete_entity>
 8011342:	4602      	mov	r2, r0
 8011344:	6920      	ldr	r0, [r4, #16]
 8011346:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801134a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801134e:	f7f7 fc3b 	bl	8008bc8 <run_xrce_session>
 8011352:	2800      	cmp	r0, #0
 8011354:	4628      	mov	r0, r5
 8011356:	bf14      	ite	ne
 8011358:	2400      	movne	r4, #0
 801135a:	2402      	moveq	r4, #2
 801135c:	f7f7 fbc2 	bl	8008ae4 <rmw_uxrce_fini_client_memory>
 8011360:	e7c5      	b.n	80112ee <rmw_destroy_client+0x12>
 8011362:	bf00      	nop

08011364 <rmw_create_guard_condition>:
 8011364:	b538      	push	{r3, r4, r5, lr}
 8011366:	4605      	mov	r5, r0
 8011368:	4807      	ldr	r0, [pc, #28]	; (8011388 <rmw_create_guard_condition+0x24>)
 801136a:	f7fd f809 	bl	800e380 <get_memory>
 801136e:	b148      	cbz	r0, 8011384 <rmw_create_guard_condition+0x20>
 8011370:	6884      	ldr	r4, [r0, #8]
 8011372:	2300      	movs	r3, #0
 8011374:	7423      	strb	r3, [r4, #16]
 8011376:	61e5      	str	r5, [r4, #28]
 8011378:	f7fd f826 	bl	800e3c8 <rmw_get_implementation_identifier>
 801137c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011380:	f104 0014 	add.w	r0, r4, #20
 8011384:	bd38      	pop	{r3, r4, r5, pc}
 8011386:	bf00      	nop
 8011388:	2000da5c 	.word	0x2000da5c

0801138c <rmw_destroy_guard_condition>:
 801138c:	b508      	push	{r3, lr}
 801138e:	4b08      	ldr	r3, [pc, #32]	; (80113b0 <rmw_destroy_guard_condition+0x24>)
 8011390:	6819      	ldr	r1, [r3, #0]
 8011392:	b911      	cbnz	r1, 801139a <rmw_destroy_guard_condition+0xe>
 8011394:	e00a      	b.n	80113ac <rmw_destroy_guard_condition+0x20>
 8011396:	6849      	ldr	r1, [r1, #4]
 8011398:	b141      	cbz	r1, 80113ac <rmw_destroy_guard_condition+0x20>
 801139a:	688b      	ldr	r3, [r1, #8]
 801139c:	3314      	adds	r3, #20
 801139e:	4298      	cmp	r0, r3
 80113a0:	d1f9      	bne.n	8011396 <rmw_destroy_guard_condition+0xa>
 80113a2:	4803      	ldr	r0, [pc, #12]	; (80113b0 <rmw_destroy_guard_condition+0x24>)
 80113a4:	f7fc fffc 	bl	800e3a0 <put_memory>
 80113a8:	2000      	movs	r0, #0
 80113aa:	bd08      	pop	{r3, pc}
 80113ac:	2001      	movs	r0, #1
 80113ae:	bd08      	pop	{r3, pc}
 80113b0:	2000da5c 	.word	0x2000da5c

080113b4 <calloc>:
 80113b4:	4b02      	ldr	r3, [pc, #8]	; (80113c0 <calloc+0xc>)
 80113b6:	460a      	mov	r2, r1
 80113b8:	4601      	mov	r1, r0
 80113ba:	6818      	ldr	r0, [r3, #0]
 80113bc:	f000 b802 	b.w	80113c4 <_calloc_r>
 80113c0:	2000010c 	.word	0x2000010c

080113c4 <_calloc_r>:
 80113c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80113c6:	fba1 2402 	umull	r2, r4, r1, r2
 80113ca:	b94c      	cbnz	r4, 80113e0 <_calloc_r+0x1c>
 80113cc:	4611      	mov	r1, r2
 80113ce:	9201      	str	r2, [sp, #4]
 80113d0:	f000 f886 	bl	80114e0 <_malloc_r>
 80113d4:	9a01      	ldr	r2, [sp, #4]
 80113d6:	4605      	mov	r5, r0
 80113d8:	b930      	cbnz	r0, 80113e8 <_calloc_r+0x24>
 80113da:	4628      	mov	r0, r5
 80113dc:	b003      	add	sp, #12
 80113de:	bd30      	pop	{r4, r5, pc}
 80113e0:	220c      	movs	r2, #12
 80113e2:	6002      	str	r2, [r0, #0]
 80113e4:	2500      	movs	r5, #0
 80113e6:	e7f8      	b.n	80113da <_calloc_r+0x16>
 80113e8:	4621      	mov	r1, r4
 80113ea:	f000 fb97 	bl	8011b1c <memset>
 80113ee:	e7f4      	b.n	80113da <_calloc_r+0x16>

080113f0 <getenv>:
 80113f0:	b507      	push	{r0, r1, r2, lr}
 80113f2:	4b04      	ldr	r3, [pc, #16]	; (8011404 <getenv+0x14>)
 80113f4:	4601      	mov	r1, r0
 80113f6:	aa01      	add	r2, sp, #4
 80113f8:	6818      	ldr	r0, [r3, #0]
 80113fa:	f000 f805 	bl	8011408 <_findenv_r>
 80113fe:	b003      	add	sp, #12
 8011400:	f85d fb04 	ldr.w	pc, [sp], #4
 8011404:	2000010c 	.word	0x2000010c

08011408 <_findenv_r>:
 8011408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801147c <_findenv_r+0x74>
 8011410:	4607      	mov	r7, r0
 8011412:	4689      	mov	r9, r1
 8011414:	4616      	mov	r6, r2
 8011416:	f000 fc75 	bl	8011d04 <__env_lock>
 801141a:	f8da 4000 	ldr.w	r4, [sl]
 801141e:	b134      	cbz	r4, 801142e <_findenv_r+0x26>
 8011420:	464b      	mov	r3, r9
 8011422:	4698      	mov	r8, r3
 8011424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011428:	b13a      	cbz	r2, 801143a <_findenv_r+0x32>
 801142a:	2a3d      	cmp	r2, #61	; 0x3d
 801142c:	d1f9      	bne.n	8011422 <_findenv_r+0x1a>
 801142e:	4638      	mov	r0, r7
 8011430:	f000 fc6e 	bl	8011d10 <__env_unlock>
 8011434:	2000      	movs	r0, #0
 8011436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143a:	eba8 0809 	sub.w	r8, r8, r9
 801143e:	46a3      	mov	fp, r4
 8011440:	f854 0b04 	ldr.w	r0, [r4], #4
 8011444:	2800      	cmp	r0, #0
 8011446:	d0f2      	beq.n	801142e <_findenv_r+0x26>
 8011448:	4642      	mov	r2, r8
 801144a:	4649      	mov	r1, r9
 801144c:	f000 fb7b 	bl	8011b46 <strncmp>
 8011450:	2800      	cmp	r0, #0
 8011452:	d1f4      	bne.n	801143e <_findenv_r+0x36>
 8011454:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011458:	eb03 0508 	add.w	r5, r3, r8
 801145c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011460:	2b3d      	cmp	r3, #61	; 0x3d
 8011462:	d1ec      	bne.n	801143e <_findenv_r+0x36>
 8011464:	f8da 3000 	ldr.w	r3, [sl]
 8011468:	ebab 0303 	sub.w	r3, fp, r3
 801146c:	109b      	asrs	r3, r3, #2
 801146e:	4638      	mov	r0, r7
 8011470:	6033      	str	r3, [r6, #0]
 8011472:	f000 fc4d 	bl	8011d10 <__env_unlock>
 8011476:	1c68      	adds	r0, r5, #1
 8011478:	e7dd      	b.n	8011436 <_findenv_r+0x2e>
 801147a:	bf00      	nop
 801147c:	20000000 	.word	0x20000000

08011480 <malloc>:
 8011480:	4b02      	ldr	r3, [pc, #8]	; (801148c <malloc+0xc>)
 8011482:	4601      	mov	r1, r0
 8011484:	6818      	ldr	r0, [r3, #0]
 8011486:	f000 b82b 	b.w	80114e0 <_malloc_r>
 801148a:	bf00      	nop
 801148c:	2000010c 	.word	0x2000010c

08011490 <free>:
 8011490:	4b02      	ldr	r3, [pc, #8]	; (801149c <free+0xc>)
 8011492:	4601      	mov	r1, r0
 8011494:	6818      	ldr	r0, [r3, #0]
 8011496:	f000 bc41 	b.w	8011d1c <_free_r>
 801149a:	bf00      	nop
 801149c:	2000010c 	.word	0x2000010c

080114a0 <sbrk_aligned>:
 80114a0:	b570      	push	{r4, r5, r6, lr}
 80114a2:	4e0e      	ldr	r6, [pc, #56]	; (80114dc <sbrk_aligned+0x3c>)
 80114a4:	460c      	mov	r4, r1
 80114a6:	6831      	ldr	r1, [r6, #0]
 80114a8:	4605      	mov	r5, r0
 80114aa:	b911      	cbnz	r1, 80114b2 <sbrk_aligned+0x12>
 80114ac:	f000 fba8 	bl	8011c00 <_sbrk_r>
 80114b0:	6030      	str	r0, [r6, #0]
 80114b2:	4621      	mov	r1, r4
 80114b4:	4628      	mov	r0, r5
 80114b6:	f000 fba3 	bl	8011c00 <_sbrk_r>
 80114ba:	1c43      	adds	r3, r0, #1
 80114bc:	d00a      	beq.n	80114d4 <sbrk_aligned+0x34>
 80114be:	1cc4      	adds	r4, r0, #3
 80114c0:	f024 0403 	bic.w	r4, r4, #3
 80114c4:	42a0      	cmp	r0, r4
 80114c6:	d007      	beq.n	80114d8 <sbrk_aligned+0x38>
 80114c8:	1a21      	subs	r1, r4, r0
 80114ca:	4628      	mov	r0, r5
 80114cc:	f000 fb98 	bl	8011c00 <_sbrk_r>
 80114d0:	3001      	adds	r0, #1
 80114d2:	d101      	bne.n	80114d8 <sbrk_aligned+0x38>
 80114d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80114d8:	4620      	mov	r0, r4
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	2000dc84 	.word	0x2000dc84

080114e0 <_malloc_r>:
 80114e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e4:	1ccd      	adds	r5, r1, #3
 80114e6:	f025 0503 	bic.w	r5, r5, #3
 80114ea:	3508      	adds	r5, #8
 80114ec:	2d0c      	cmp	r5, #12
 80114ee:	bf38      	it	cc
 80114f0:	250c      	movcc	r5, #12
 80114f2:	2d00      	cmp	r5, #0
 80114f4:	4607      	mov	r7, r0
 80114f6:	db01      	blt.n	80114fc <_malloc_r+0x1c>
 80114f8:	42a9      	cmp	r1, r5
 80114fa:	d905      	bls.n	8011508 <_malloc_r+0x28>
 80114fc:	230c      	movs	r3, #12
 80114fe:	603b      	str	r3, [r7, #0]
 8011500:	2600      	movs	r6, #0
 8011502:	4630      	mov	r0, r6
 8011504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80115dc <_malloc_r+0xfc>
 801150c:	f000 f868 	bl	80115e0 <__malloc_lock>
 8011510:	f8d8 3000 	ldr.w	r3, [r8]
 8011514:	461c      	mov	r4, r3
 8011516:	bb5c      	cbnz	r4, 8011570 <_malloc_r+0x90>
 8011518:	4629      	mov	r1, r5
 801151a:	4638      	mov	r0, r7
 801151c:	f7ff ffc0 	bl	80114a0 <sbrk_aligned>
 8011520:	1c43      	adds	r3, r0, #1
 8011522:	4604      	mov	r4, r0
 8011524:	d155      	bne.n	80115d2 <_malloc_r+0xf2>
 8011526:	f8d8 4000 	ldr.w	r4, [r8]
 801152a:	4626      	mov	r6, r4
 801152c:	2e00      	cmp	r6, #0
 801152e:	d145      	bne.n	80115bc <_malloc_r+0xdc>
 8011530:	2c00      	cmp	r4, #0
 8011532:	d048      	beq.n	80115c6 <_malloc_r+0xe6>
 8011534:	6823      	ldr	r3, [r4, #0]
 8011536:	4631      	mov	r1, r6
 8011538:	4638      	mov	r0, r7
 801153a:	eb04 0903 	add.w	r9, r4, r3
 801153e:	f000 fb5f 	bl	8011c00 <_sbrk_r>
 8011542:	4581      	cmp	r9, r0
 8011544:	d13f      	bne.n	80115c6 <_malloc_r+0xe6>
 8011546:	6821      	ldr	r1, [r4, #0]
 8011548:	1a6d      	subs	r5, r5, r1
 801154a:	4629      	mov	r1, r5
 801154c:	4638      	mov	r0, r7
 801154e:	f7ff ffa7 	bl	80114a0 <sbrk_aligned>
 8011552:	3001      	adds	r0, #1
 8011554:	d037      	beq.n	80115c6 <_malloc_r+0xe6>
 8011556:	6823      	ldr	r3, [r4, #0]
 8011558:	442b      	add	r3, r5
 801155a:	6023      	str	r3, [r4, #0]
 801155c:	f8d8 3000 	ldr.w	r3, [r8]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d038      	beq.n	80115d6 <_malloc_r+0xf6>
 8011564:	685a      	ldr	r2, [r3, #4]
 8011566:	42a2      	cmp	r2, r4
 8011568:	d12b      	bne.n	80115c2 <_malloc_r+0xe2>
 801156a:	2200      	movs	r2, #0
 801156c:	605a      	str	r2, [r3, #4]
 801156e:	e00f      	b.n	8011590 <_malloc_r+0xb0>
 8011570:	6822      	ldr	r2, [r4, #0]
 8011572:	1b52      	subs	r2, r2, r5
 8011574:	d41f      	bmi.n	80115b6 <_malloc_r+0xd6>
 8011576:	2a0b      	cmp	r2, #11
 8011578:	d917      	bls.n	80115aa <_malloc_r+0xca>
 801157a:	1961      	adds	r1, r4, r5
 801157c:	42a3      	cmp	r3, r4
 801157e:	6025      	str	r5, [r4, #0]
 8011580:	bf18      	it	ne
 8011582:	6059      	strne	r1, [r3, #4]
 8011584:	6863      	ldr	r3, [r4, #4]
 8011586:	bf08      	it	eq
 8011588:	f8c8 1000 	streq.w	r1, [r8]
 801158c:	5162      	str	r2, [r4, r5]
 801158e:	604b      	str	r3, [r1, #4]
 8011590:	4638      	mov	r0, r7
 8011592:	f104 060b 	add.w	r6, r4, #11
 8011596:	f000 f829 	bl	80115ec <__malloc_unlock>
 801159a:	f026 0607 	bic.w	r6, r6, #7
 801159e:	1d23      	adds	r3, r4, #4
 80115a0:	1af2      	subs	r2, r6, r3
 80115a2:	d0ae      	beq.n	8011502 <_malloc_r+0x22>
 80115a4:	1b9b      	subs	r3, r3, r6
 80115a6:	50a3      	str	r3, [r4, r2]
 80115a8:	e7ab      	b.n	8011502 <_malloc_r+0x22>
 80115aa:	42a3      	cmp	r3, r4
 80115ac:	6862      	ldr	r2, [r4, #4]
 80115ae:	d1dd      	bne.n	801156c <_malloc_r+0x8c>
 80115b0:	f8c8 2000 	str.w	r2, [r8]
 80115b4:	e7ec      	b.n	8011590 <_malloc_r+0xb0>
 80115b6:	4623      	mov	r3, r4
 80115b8:	6864      	ldr	r4, [r4, #4]
 80115ba:	e7ac      	b.n	8011516 <_malloc_r+0x36>
 80115bc:	4634      	mov	r4, r6
 80115be:	6876      	ldr	r6, [r6, #4]
 80115c0:	e7b4      	b.n	801152c <_malloc_r+0x4c>
 80115c2:	4613      	mov	r3, r2
 80115c4:	e7cc      	b.n	8011560 <_malloc_r+0x80>
 80115c6:	230c      	movs	r3, #12
 80115c8:	603b      	str	r3, [r7, #0]
 80115ca:	4638      	mov	r0, r7
 80115cc:	f000 f80e 	bl	80115ec <__malloc_unlock>
 80115d0:	e797      	b.n	8011502 <_malloc_r+0x22>
 80115d2:	6025      	str	r5, [r4, #0]
 80115d4:	e7dc      	b.n	8011590 <_malloc_r+0xb0>
 80115d6:	605b      	str	r3, [r3, #4]
 80115d8:	deff      	udf	#255	; 0xff
 80115da:	bf00      	nop
 80115dc:	2000dc80 	.word	0x2000dc80

080115e0 <__malloc_lock>:
 80115e0:	4801      	ldr	r0, [pc, #4]	; (80115e8 <__malloc_lock+0x8>)
 80115e2:	f000 bb59 	b.w	8011c98 <__retarget_lock_acquire_recursive>
 80115e6:	bf00      	nop
 80115e8:	2000ddc9 	.word	0x2000ddc9

080115ec <__malloc_unlock>:
 80115ec:	4801      	ldr	r0, [pc, #4]	; (80115f4 <__malloc_unlock+0x8>)
 80115ee:	f000 bb54 	b.w	8011c9a <__retarget_lock_release_recursive>
 80115f2:	bf00      	nop
 80115f4:	2000ddc9 	.word	0x2000ddc9

080115f8 <srand>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4b10      	ldr	r3, [pc, #64]	; (801163c <srand+0x44>)
 80115fc:	681d      	ldr	r5, [r3, #0]
 80115fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011600:	4604      	mov	r4, r0
 8011602:	b9b3      	cbnz	r3, 8011632 <srand+0x3a>
 8011604:	2018      	movs	r0, #24
 8011606:	f7ff ff3b 	bl	8011480 <malloc>
 801160a:	4602      	mov	r2, r0
 801160c:	6328      	str	r0, [r5, #48]	; 0x30
 801160e:	b920      	cbnz	r0, 801161a <srand+0x22>
 8011610:	4b0b      	ldr	r3, [pc, #44]	; (8011640 <srand+0x48>)
 8011612:	480c      	ldr	r0, [pc, #48]	; (8011644 <srand+0x4c>)
 8011614:	2146      	movs	r1, #70	; 0x46
 8011616:	f000 fb57 	bl	8011cc8 <__assert_func>
 801161a:	490b      	ldr	r1, [pc, #44]	; (8011648 <srand+0x50>)
 801161c:	4b0b      	ldr	r3, [pc, #44]	; (801164c <srand+0x54>)
 801161e:	e9c0 1300 	strd	r1, r3, [r0]
 8011622:	4b0b      	ldr	r3, [pc, #44]	; (8011650 <srand+0x58>)
 8011624:	6083      	str	r3, [r0, #8]
 8011626:	230b      	movs	r3, #11
 8011628:	8183      	strh	r3, [r0, #12]
 801162a:	2100      	movs	r1, #0
 801162c:	2001      	movs	r0, #1
 801162e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011632:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011634:	2200      	movs	r2, #0
 8011636:	611c      	str	r4, [r3, #16]
 8011638:	615a      	str	r2, [r3, #20]
 801163a:	bd38      	pop	{r3, r4, r5, pc}
 801163c:	2000010c 	.word	0x2000010c
 8011640:	08013570 	.word	0x08013570
 8011644:	08013587 	.word	0x08013587
 8011648:	abcd330e 	.word	0xabcd330e
 801164c:	e66d1234 	.word	0xe66d1234
 8011650:	0005deec 	.word	0x0005deec

08011654 <rand>:
 8011654:	4b16      	ldr	r3, [pc, #88]	; (80116b0 <rand+0x5c>)
 8011656:	b510      	push	{r4, lr}
 8011658:	681c      	ldr	r4, [r3, #0]
 801165a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801165c:	b9b3      	cbnz	r3, 801168c <rand+0x38>
 801165e:	2018      	movs	r0, #24
 8011660:	f7ff ff0e 	bl	8011480 <malloc>
 8011664:	4602      	mov	r2, r0
 8011666:	6320      	str	r0, [r4, #48]	; 0x30
 8011668:	b920      	cbnz	r0, 8011674 <rand+0x20>
 801166a:	4b12      	ldr	r3, [pc, #72]	; (80116b4 <rand+0x60>)
 801166c:	4812      	ldr	r0, [pc, #72]	; (80116b8 <rand+0x64>)
 801166e:	2152      	movs	r1, #82	; 0x52
 8011670:	f000 fb2a 	bl	8011cc8 <__assert_func>
 8011674:	4911      	ldr	r1, [pc, #68]	; (80116bc <rand+0x68>)
 8011676:	4b12      	ldr	r3, [pc, #72]	; (80116c0 <rand+0x6c>)
 8011678:	e9c0 1300 	strd	r1, r3, [r0]
 801167c:	4b11      	ldr	r3, [pc, #68]	; (80116c4 <rand+0x70>)
 801167e:	6083      	str	r3, [r0, #8]
 8011680:	230b      	movs	r3, #11
 8011682:	8183      	strh	r3, [r0, #12]
 8011684:	2100      	movs	r1, #0
 8011686:	2001      	movs	r0, #1
 8011688:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801168c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801168e:	480e      	ldr	r0, [pc, #56]	; (80116c8 <rand+0x74>)
 8011690:	690b      	ldr	r3, [r1, #16]
 8011692:	694c      	ldr	r4, [r1, #20]
 8011694:	4a0d      	ldr	r2, [pc, #52]	; (80116cc <rand+0x78>)
 8011696:	4358      	muls	r0, r3
 8011698:	fb02 0004 	mla	r0, r2, r4, r0
 801169c:	fba3 3202 	umull	r3, r2, r3, r2
 80116a0:	3301      	adds	r3, #1
 80116a2:	eb40 0002 	adc.w	r0, r0, r2
 80116a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80116aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80116ae:	bd10      	pop	{r4, pc}
 80116b0:	2000010c 	.word	0x2000010c
 80116b4:	08013570 	.word	0x08013570
 80116b8:	08013587 	.word	0x08013587
 80116bc:	abcd330e 	.word	0xabcd330e
 80116c0:	e66d1234 	.word	0xe66d1234
 80116c4:	0005deec 	.word	0x0005deec
 80116c8:	5851f42d 	.word	0x5851f42d
 80116cc:	4c957f2d 	.word	0x4c957f2d

080116d0 <realloc>:
 80116d0:	4b02      	ldr	r3, [pc, #8]	; (80116dc <realloc+0xc>)
 80116d2:	460a      	mov	r2, r1
 80116d4:	4601      	mov	r1, r0
 80116d6:	6818      	ldr	r0, [r3, #0]
 80116d8:	f000 b802 	b.w	80116e0 <_realloc_r>
 80116dc:	2000010c 	.word	0x2000010c

080116e0 <_realloc_r>:
 80116e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e4:	4680      	mov	r8, r0
 80116e6:	4614      	mov	r4, r2
 80116e8:	460e      	mov	r6, r1
 80116ea:	b921      	cbnz	r1, 80116f6 <_realloc_r+0x16>
 80116ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116f0:	4611      	mov	r1, r2
 80116f2:	f7ff bef5 	b.w	80114e0 <_malloc_r>
 80116f6:	b92a      	cbnz	r2, 8011704 <_realloc_r+0x24>
 80116f8:	f000 fb10 	bl	8011d1c <_free_r>
 80116fc:	4625      	mov	r5, r4
 80116fe:	4628      	mov	r0, r5
 8011700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011704:	f000 fb56 	bl	8011db4 <_malloc_usable_size_r>
 8011708:	4284      	cmp	r4, r0
 801170a:	4607      	mov	r7, r0
 801170c:	d802      	bhi.n	8011714 <_realloc_r+0x34>
 801170e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011712:	d812      	bhi.n	801173a <_realloc_r+0x5a>
 8011714:	4621      	mov	r1, r4
 8011716:	4640      	mov	r0, r8
 8011718:	f7ff fee2 	bl	80114e0 <_malloc_r>
 801171c:	4605      	mov	r5, r0
 801171e:	2800      	cmp	r0, #0
 8011720:	d0ed      	beq.n	80116fe <_realloc_r+0x1e>
 8011722:	42bc      	cmp	r4, r7
 8011724:	4622      	mov	r2, r4
 8011726:	4631      	mov	r1, r6
 8011728:	bf28      	it	cs
 801172a:	463a      	movcs	r2, r7
 801172c:	f000 fabe 	bl	8011cac <memcpy>
 8011730:	4631      	mov	r1, r6
 8011732:	4640      	mov	r0, r8
 8011734:	f000 faf2 	bl	8011d1c <_free_r>
 8011738:	e7e1      	b.n	80116fe <_realloc_r+0x1e>
 801173a:	4635      	mov	r5, r6
 801173c:	e7df      	b.n	80116fe <_realloc_r+0x1e>
	...

08011740 <_strtoul_l.constprop.0>:
 8011740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011744:	4f36      	ldr	r7, [pc, #216]	; (8011820 <_strtoul_l.constprop.0+0xe0>)
 8011746:	4686      	mov	lr, r0
 8011748:	460d      	mov	r5, r1
 801174a:	4628      	mov	r0, r5
 801174c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011750:	5d3e      	ldrb	r6, [r7, r4]
 8011752:	f016 0608 	ands.w	r6, r6, #8
 8011756:	d1f8      	bne.n	801174a <_strtoul_l.constprop.0+0xa>
 8011758:	2c2d      	cmp	r4, #45	; 0x2d
 801175a:	d130      	bne.n	80117be <_strtoul_l.constprop.0+0x7e>
 801175c:	782c      	ldrb	r4, [r5, #0]
 801175e:	2601      	movs	r6, #1
 8011760:	1c85      	adds	r5, r0, #2
 8011762:	2b00      	cmp	r3, #0
 8011764:	d057      	beq.n	8011816 <_strtoul_l.constprop.0+0xd6>
 8011766:	2b10      	cmp	r3, #16
 8011768:	d109      	bne.n	801177e <_strtoul_l.constprop.0+0x3e>
 801176a:	2c30      	cmp	r4, #48	; 0x30
 801176c:	d107      	bne.n	801177e <_strtoul_l.constprop.0+0x3e>
 801176e:	7828      	ldrb	r0, [r5, #0]
 8011770:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011774:	2858      	cmp	r0, #88	; 0x58
 8011776:	d149      	bne.n	801180c <_strtoul_l.constprop.0+0xcc>
 8011778:	786c      	ldrb	r4, [r5, #1]
 801177a:	2310      	movs	r3, #16
 801177c:	3502      	adds	r5, #2
 801177e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011782:	2700      	movs	r7, #0
 8011784:	fbb8 f8f3 	udiv	r8, r8, r3
 8011788:	fb03 f908 	mul.w	r9, r3, r8
 801178c:	ea6f 0909 	mvn.w	r9, r9
 8011790:	4638      	mov	r0, r7
 8011792:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011796:	f1bc 0f09 	cmp.w	ip, #9
 801179a:	d815      	bhi.n	80117c8 <_strtoul_l.constprop.0+0x88>
 801179c:	4664      	mov	r4, ip
 801179e:	42a3      	cmp	r3, r4
 80117a0:	dd23      	ble.n	80117ea <_strtoul_l.constprop.0+0xaa>
 80117a2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80117a6:	d007      	beq.n	80117b8 <_strtoul_l.constprop.0+0x78>
 80117a8:	4580      	cmp	r8, r0
 80117aa:	d31b      	bcc.n	80117e4 <_strtoul_l.constprop.0+0xa4>
 80117ac:	d101      	bne.n	80117b2 <_strtoul_l.constprop.0+0x72>
 80117ae:	45a1      	cmp	r9, r4
 80117b0:	db18      	blt.n	80117e4 <_strtoul_l.constprop.0+0xa4>
 80117b2:	fb00 4003 	mla	r0, r0, r3, r4
 80117b6:	2701      	movs	r7, #1
 80117b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117bc:	e7e9      	b.n	8011792 <_strtoul_l.constprop.0+0x52>
 80117be:	2c2b      	cmp	r4, #43	; 0x2b
 80117c0:	bf04      	itt	eq
 80117c2:	782c      	ldrbeq	r4, [r5, #0]
 80117c4:	1c85      	addeq	r5, r0, #2
 80117c6:	e7cc      	b.n	8011762 <_strtoul_l.constprop.0+0x22>
 80117c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80117cc:	f1bc 0f19 	cmp.w	ip, #25
 80117d0:	d801      	bhi.n	80117d6 <_strtoul_l.constprop.0+0x96>
 80117d2:	3c37      	subs	r4, #55	; 0x37
 80117d4:	e7e3      	b.n	801179e <_strtoul_l.constprop.0+0x5e>
 80117d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80117da:	f1bc 0f19 	cmp.w	ip, #25
 80117de:	d804      	bhi.n	80117ea <_strtoul_l.constprop.0+0xaa>
 80117e0:	3c57      	subs	r4, #87	; 0x57
 80117e2:	e7dc      	b.n	801179e <_strtoul_l.constprop.0+0x5e>
 80117e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80117e8:	e7e6      	b.n	80117b8 <_strtoul_l.constprop.0+0x78>
 80117ea:	1c7b      	adds	r3, r7, #1
 80117ec:	d106      	bne.n	80117fc <_strtoul_l.constprop.0+0xbc>
 80117ee:	2322      	movs	r3, #34	; 0x22
 80117f0:	f8ce 3000 	str.w	r3, [lr]
 80117f4:	4638      	mov	r0, r7
 80117f6:	b932      	cbnz	r2, 8011806 <_strtoul_l.constprop.0+0xc6>
 80117f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117fc:	b106      	cbz	r6, 8011800 <_strtoul_l.constprop.0+0xc0>
 80117fe:	4240      	negs	r0, r0
 8011800:	2a00      	cmp	r2, #0
 8011802:	d0f9      	beq.n	80117f8 <_strtoul_l.constprop.0+0xb8>
 8011804:	b107      	cbz	r7, 8011808 <_strtoul_l.constprop.0+0xc8>
 8011806:	1e69      	subs	r1, r5, #1
 8011808:	6011      	str	r1, [r2, #0]
 801180a:	e7f5      	b.n	80117f8 <_strtoul_l.constprop.0+0xb8>
 801180c:	2430      	movs	r4, #48	; 0x30
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1b5      	bne.n	801177e <_strtoul_l.constprop.0+0x3e>
 8011812:	2308      	movs	r3, #8
 8011814:	e7b3      	b.n	801177e <_strtoul_l.constprop.0+0x3e>
 8011816:	2c30      	cmp	r4, #48	; 0x30
 8011818:	d0a9      	beq.n	801176e <_strtoul_l.constprop.0+0x2e>
 801181a:	230a      	movs	r3, #10
 801181c:	e7af      	b.n	801177e <_strtoul_l.constprop.0+0x3e>
 801181e:	bf00      	nop
 8011820:	080135e0 	.word	0x080135e0

08011824 <strtoul>:
 8011824:	4613      	mov	r3, r2
 8011826:	460a      	mov	r2, r1
 8011828:	4601      	mov	r1, r0
 801182a:	4802      	ldr	r0, [pc, #8]	; (8011834 <strtoul+0x10>)
 801182c:	6800      	ldr	r0, [r0, #0]
 801182e:	f7ff bf87 	b.w	8011740 <_strtoul_l.constprop.0>
 8011832:	bf00      	nop
 8011834:	2000010c 	.word	0x2000010c

08011838 <std>:
 8011838:	2300      	movs	r3, #0
 801183a:	b510      	push	{r4, lr}
 801183c:	4604      	mov	r4, r0
 801183e:	e9c0 3300 	strd	r3, r3, [r0]
 8011842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011846:	6083      	str	r3, [r0, #8]
 8011848:	8181      	strh	r1, [r0, #12]
 801184a:	6643      	str	r3, [r0, #100]	; 0x64
 801184c:	81c2      	strh	r2, [r0, #14]
 801184e:	6183      	str	r3, [r0, #24]
 8011850:	4619      	mov	r1, r3
 8011852:	2208      	movs	r2, #8
 8011854:	305c      	adds	r0, #92	; 0x5c
 8011856:	f000 f961 	bl	8011b1c <memset>
 801185a:	4b05      	ldr	r3, [pc, #20]	; (8011870 <std+0x38>)
 801185c:	6263      	str	r3, [r4, #36]	; 0x24
 801185e:	4b05      	ldr	r3, [pc, #20]	; (8011874 <std+0x3c>)
 8011860:	62a3      	str	r3, [r4, #40]	; 0x28
 8011862:	4b05      	ldr	r3, [pc, #20]	; (8011878 <std+0x40>)
 8011864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011866:	4b05      	ldr	r3, [pc, #20]	; (801187c <std+0x44>)
 8011868:	6224      	str	r4, [r4, #32]
 801186a:	6323      	str	r3, [r4, #48]	; 0x30
 801186c:	bd10      	pop	{r4, pc}
 801186e:	bf00      	nop
 8011870:	08011a25 	.word	0x08011a25
 8011874:	08011a47 	.word	0x08011a47
 8011878:	08011a7f 	.word	0x08011a7f
 801187c:	08011aa3 	.word	0x08011aa3

08011880 <stdio_exit_handler>:
 8011880:	4a02      	ldr	r2, [pc, #8]	; (801188c <stdio_exit_handler+0xc>)
 8011882:	4903      	ldr	r1, [pc, #12]	; (8011890 <stdio_exit_handler+0x10>)
 8011884:	4803      	ldr	r0, [pc, #12]	; (8011894 <stdio_exit_handler+0x14>)
 8011886:	f000 b869 	b.w	801195c <_fwalk_sglue>
 801188a:	bf00      	nop
 801188c:	200000b4 	.word	0x200000b4
 8011890:	08012729 	.word	0x08012729
 8011894:	200000c0 	.word	0x200000c0

08011898 <cleanup_stdio>:
 8011898:	6841      	ldr	r1, [r0, #4]
 801189a:	4b0c      	ldr	r3, [pc, #48]	; (80118cc <cleanup_stdio+0x34>)
 801189c:	4299      	cmp	r1, r3
 801189e:	b510      	push	{r4, lr}
 80118a0:	4604      	mov	r4, r0
 80118a2:	d001      	beq.n	80118a8 <cleanup_stdio+0x10>
 80118a4:	f000 ff40 	bl	8012728 <_fflush_r>
 80118a8:	68a1      	ldr	r1, [r4, #8]
 80118aa:	4b09      	ldr	r3, [pc, #36]	; (80118d0 <cleanup_stdio+0x38>)
 80118ac:	4299      	cmp	r1, r3
 80118ae:	d002      	beq.n	80118b6 <cleanup_stdio+0x1e>
 80118b0:	4620      	mov	r0, r4
 80118b2:	f000 ff39 	bl	8012728 <_fflush_r>
 80118b6:	68e1      	ldr	r1, [r4, #12]
 80118b8:	4b06      	ldr	r3, [pc, #24]	; (80118d4 <cleanup_stdio+0x3c>)
 80118ba:	4299      	cmp	r1, r3
 80118bc:	d004      	beq.n	80118c8 <cleanup_stdio+0x30>
 80118be:	4620      	mov	r0, r4
 80118c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118c4:	f000 bf30 	b.w	8012728 <_fflush_r>
 80118c8:	bd10      	pop	{r4, pc}
 80118ca:	bf00      	nop
 80118cc:	2000dc88 	.word	0x2000dc88
 80118d0:	2000dcf0 	.word	0x2000dcf0
 80118d4:	2000dd58 	.word	0x2000dd58

080118d8 <global_stdio_init.part.0>:
 80118d8:	b510      	push	{r4, lr}
 80118da:	4b0b      	ldr	r3, [pc, #44]	; (8011908 <global_stdio_init.part.0+0x30>)
 80118dc:	4c0b      	ldr	r4, [pc, #44]	; (801190c <global_stdio_init.part.0+0x34>)
 80118de:	4a0c      	ldr	r2, [pc, #48]	; (8011910 <global_stdio_init.part.0+0x38>)
 80118e0:	601a      	str	r2, [r3, #0]
 80118e2:	4620      	mov	r0, r4
 80118e4:	2200      	movs	r2, #0
 80118e6:	2104      	movs	r1, #4
 80118e8:	f7ff ffa6 	bl	8011838 <std>
 80118ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80118f0:	2201      	movs	r2, #1
 80118f2:	2109      	movs	r1, #9
 80118f4:	f7ff ffa0 	bl	8011838 <std>
 80118f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80118fc:	2202      	movs	r2, #2
 80118fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011902:	2112      	movs	r1, #18
 8011904:	f7ff bf98 	b.w	8011838 <std>
 8011908:	2000ddc0 	.word	0x2000ddc0
 801190c:	2000dc88 	.word	0x2000dc88
 8011910:	08011881 	.word	0x08011881

08011914 <__sfp_lock_acquire>:
 8011914:	4801      	ldr	r0, [pc, #4]	; (801191c <__sfp_lock_acquire+0x8>)
 8011916:	f000 b9bf 	b.w	8011c98 <__retarget_lock_acquire_recursive>
 801191a:	bf00      	nop
 801191c:	2000ddca 	.word	0x2000ddca

08011920 <__sfp_lock_release>:
 8011920:	4801      	ldr	r0, [pc, #4]	; (8011928 <__sfp_lock_release+0x8>)
 8011922:	f000 b9ba 	b.w	8011c9a <__retarget_lock_release_recursive>
 8011926:	bf00      	nop
 8011928:	2000ddca 	.word	0x2000ddca

0801192c <__sinit>:
 801192c:	b510      	push	{r4, lr}
 801192e:	4604      	mov	r4, r0
 8011930:	f7ff fff0 	bl	8011914 <__sfp_lock_acquire>
 8011934:	6a23      	ldr	r3, [r4, #32]
 8011936:	b11b      	cbz	r3, 8011940 <__sinit+0x14>
 8011938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801193c:	f7ff bff0 	b.w	8011920 <__sfp_lock_release>
 8011940:	4b04      	ldr	r3, [pc, #16]	; (8011954 <__sinit+0x28>)
 8011942:	6223      	str	r3, [r4, #32]
 8011944:	4b04      	ldr	r3, [pc, #16]	; (8011958 <__sinit+0x2c>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1f5      	bne.n	8011938 <__sinit+0xc>
 801194c:	f7ff ffc4 	bl	80118d8 <global_stdio_init.part.0>
 8011950:	e7f2      	b.n	8011938 <__sinit+0xc>
 8011952:	bf00      	nop
 8011954:	08011899 	.word	0x08011899
 8011958:	2000ddc0 	.word	0x2000ddc0

0801195c <_fwalk_sglue>:
 801195c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011960:	4607      	mov	r7, r0
 8011962:	4688      	mov	r8, r1
 8011964:	4614      	mov	r4, r2
 8011966:	2600      	movs	r6, #0
 8011968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801196c:	f1b9 0901 	subs.w	r9, r9, #1
 8011970:	d505      	bpl.n	801197e <_fwalk_sglue+0x22>
 8011972:	6824      	ldr	r4, [r4, #0]
 8011974:	2c00      	cmp	r4, #0
 8011976:	d1f7      	bne.n	8011968 <_fwalk_sglue+0xc>
 8011978:	4630      	mov	r0, r6
 801197a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801197e:	89ab      	ldrh	r3, [r5, #12]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d907      	bls.n	8011994 <_fwalk_sglue+0x38>
 8011984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011988:	3301      	adds	r3, #1
 801198a:	d003      	beq.n	8011994 <_fwalk_sglue+0x38>
 801198c:	4629      	mov	r1, r5
 801198e:	4638      	mov	r0, r7
 8011990:	47c0      	blx	r8
 8011992:	4306      	orrs	r6, r0
 8011994:	3568      	adds	r5, #104	; 0x68
 8011996:	e7e9      	b.n	801196c <_fwalk_sglue+0x10>

08011998 <iprintf>:
 8011998:	b40f      	push	{r0, r1, r2, r3}
 801199a:	b507      	push	{r0, r1, r2, lr}
 801199c:	4906      	ldr	r1, [pc, #24]	; (80119b8 <iprintf+0x20>)
 801199e:	ab04      	add	r3, sp, #16
 80119a0:	6808      	ldr	r0, [r1, #0]
 80119a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80119a6:	6881      	ldr	r1, [r0, #8]
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	f000 fb8d 	bl	80120c8 <_vfiprintf_r>
 80119ae:	b003      	add	sp, #12
 80119b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80119b4:	b004      	add	sp, #16
 80119b6:	4770      	bx	lr
 80119b8:	2000010c 	.word	0x2000010c

080119bc <sniprintf>:
 80119bc:	b40c      	push	{r2, r3}
 80119be:	b530      	push	{r4, r5, lr}
 80119c0:	4b17      	ldr	r3, [pc, #92]	; (8011a20 <sniprintf+0x64>)
 80119c2:	1e0c      	subs	r4, r1, #0
 80119c4:	681d      	ldr	r5, [r3, #0]
 80119c6:	b09d      	sub	sp, #116	; 0x74
 80119c8:	da08      	bge.n	80119dc <sniprintf+0x20>
 80119ca:	238b      	movs	r3, #139	; 0x8b
 80119cc:	602b      	str	r3, [r5, #0]
 80119ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119d2:	b01d      	add	sp, #116	; 0x74
 80119d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119d8:	b002      	add	sp, #8
 80119da:	4770      	bx	lr
 80119dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80119e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80119e4:	bf14      	ite	ne
 80119e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80119ea:	4623      	moveq	r3, r4
 80119ec:	9304      	str	r3, [sp, #16]
 80119ee:	9307      	str	r3, [sp, #28]
 80119f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119f4:	9002      	str	r0, [sp, #8]
 80119f6:	9006      	str	r0, [sp, #24]
 80119f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80119fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80119fe:	ab21      	add	r3, sp, #132	; 0x84
 8011a00:	a902      	add	r1, sp, #8
 8011a02:	4628      	mov	r0, r5
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	f000 fa37 	bl	8011e78 <_svfiprintf_r>
 8011a0a:	1c43      	adds	r3, r0, #1
 8011a0c:	bfbc      	itt	lt
 8011a0e:	238b      	movlt	r3, #139	; 0x8b
 8011a10:	602b      	strlt	r3, [r5, #0]
 8011a12:	2c00      	cmp	r4, #0
 8011a14:	d0dd      	beq.n	80119d2 <sniprintf+0x16>
 8011a16:	9b02      	ldr	r3, [sp, #8]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	701a      	strb	r2, [r3, #0]
 8011a1c:	e7d9      	b.n	80119d2 <sniprintf+0x16>
 8011a1e:	bf00      	nop
 8011a20:	2000010c 	.word	0x2000010c

08011a24 <__sread>:
 8011a24:	b510      	push	{r4, lr}
 8011a26:	460c      	mov	r4, r1
 8011a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a2c:	f000 f8d6 	bl	8011bdc <_read_r>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	bfab      	itete	ge
 8011a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a36:	89a3      	ldrhlt	r3, [r4, #12]
 8011a38:	181b      	addge	r3, r3, r0
 8011a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a3e:	bfac      	ite	ge
 8011a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a42:	81a3      	strhlt	r3, [r4, #12]
 8011a44:	bd10      	pop	{r4, pc}

08011a46 <__swrite>:
 8011a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a4a:	461f      	mov	r7, r3
 8011a4c:	898b      	ldrh	r3, [r1, #12]
 8011a4e:	05db      	lsls	r3, r3, #23
 8011a50:	4605      	mov	r5, r0
 8011a52:	460c      	mov	r4, r1
 8011a54:	4616      	mov	r6, r2
 8011a56:	d505      	bpl.n	8011a64 <__swrite+0x1e>
 8011a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a5c:	2302      	movs	r3, #2
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f000 f8aa 	bl	8011bb8 <_lseek_r>
 8011a64:	89a3      	ldrh	r3, [r4, #12]
 8011a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a6e:	81a3      	strh	r3, [r4, #12]
 8011a70:	4632      	mov	r2, r6
 8011a72:	463b      	mov	r3, r7
 8011a74:	4628      	mov	r0, r5
 8011a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a7a:	f000 b8d1 	b.w	8011c20 <_write_r>

08011a7e <__sseek>:
 8011a7e:	b510      	push	{r4, lr}
 8011a80:	460c      	mov	r4, r1
 8011a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a86:	f000 f897 	bl	8011bb8 <_lseek_r>
 8011a8a:	1c43      	adds	r3, r0, #1
 8011a8c:	89a3      	ldrh	r3, [r4, #12]
 8011a8e:	bf15      	itete	ne
 8011a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a9a:	81a3      	strheq	r3, [r4, #12]
 8011a9c:	bf18      	it	ne
 8011a9e:	81a3      	strhne	r3, [r4, #12]
 8011aa0:	bd10      	pop	{r4, pc}

08011aa2 <__sclose>:
 8011aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa6:	f000 b877 	b.w	8011b98 <_close_r>

08011aaa <_vsniprintf_r>:
 8011aaa:	b530      	push	{r4, r5, lr}
 8011aac:	4614      	mov	r4, r2
 8011aae:	2c00      	cmp	r4, #0
 8011ab0:	b09b      	sub	sp, #108	; 0x6c
 8011ab2:	4605      	mov	r5, r0
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	da05      	bge.n	8011ac4 <_vsniprintf_r+0x1a>
 8011ab8:	238b      	movs	r3, #139	; 0x8b
 8011aba:	6003      	str	r3, [r0, #0]
 8011abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ac0:	b01b      	add	sp, #108	; 0x6c
 8011ac2:	bd30      	pop	{r4, r5, pc}
 8011ac4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011ac8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011acc:	bf14      	ite	ne
 8011ace:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011ad2:	4623      	moveq	r3, r4
 8011ad4:	9302      	str	r3, [sp, #8]
 8011ad6:	9305      	str	r3, [sp, #20]
 8011ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011adc:	9100      	str	r1, [sp, #0]
 8011ade:	9104      	str	r1, [sp, #16]
 8011ae0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011ae4:	4669      	mov	r1, sp
 8011ae6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011ae8:	f000 f9c6 	bl	8011e78 <_svfiprintf_r>
 8011aec:	1c43      	adds	r3, r0, #1
 8011aee:	bfbc      	itt	lt
 8011af0:	238b      	movlt	r3, #139	; 0x8b
 8011af2:	602b      	strlt	r3, [r5, #0]
 8011af4:	2c00      	cmp	r4, #0
 8011af6:	d0e3      	beq.n	8011ac0 <_vsniprintf_r+0x16>
 8011af8:	9b00      	ldr	r3, [sp, #0]
 8011afa:	2200      	movs	r2, #0
 8011afc:	701a      	strb	r2, [r3, #0]
 8011afe:	e7df      	b.n	8011ac0 <_vsniprintf_r+0x16>

08011b00 <vsniprintf>:
 8011b00:	b507      	push	{r0, r1, r2, lr}
 8011b02:	9300      	str	r3, [sp, #0]
 8011b04:	4613      	mov	r3, r2
 8011b06:	460a      	mov	r2, r1
 8011b08:	4601      	mov	r1, r0
 8011b0a:	4803      	ldr	r0, [pc, #12]	; (8011b18 <vsniprintf+0x18>)
 8011b0c:	6800      	ldr	r0, [r0, #0]
 8011b0e:	f7ff ffcc 	bl	8011aaa <_vsniprintf_r>
 8011b12:	b003      	add	sp, #12
 8011b14:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b18:	2000010c 	.word	0x2000010c

08011b1c <memset>:
 8011b1c:	4402      	add	r2, r0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	4293      	cmp	r3, r2
 8011b22:	d100      	bne.n	8011b26 <memset+0xa>
 8011b24:	4770      	bx	lr
 8011b26:	f803 1b01 	strb.w	r1, [r3], #1
 8011b2a:	e7f9      	b.n	8011b20 <memset+0x4>

08011b2c <strchr>:
 8011b2c:	b2c9      	uxtb	r1, r1
 8011b2e:	4603      	mov	r3, r0
 8011b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b34:	b11a      	cbz	r2, 8011b3e <strchr+0x12>
 8011b36:	428a      	cmp	r2, r1
 8011b38:	d1f9      	bne.n	8011b2e <strchr+0x2>
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	4770      	bx	lr
 8011b3e:	2900      	cmp	r1, #0
 8011b40:	bf18      	it	ne
 8011b42:	2300      	movne	r3, #0
 8011b44:	e7f9      	b.n	8011b3a <strchr+0xe>

08011b46 <strncmp>:
 8011b46:	b510      	push	{r4, lr}
 8011b48:	b16a      	cbz	r2, 8011b66 <strncmp+0x20>
 8011b4a:	3901      	subs	r1, #1
 8011b4c:	1884      	adds	r4, r0, r2
 8011b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d103      	bne.n	8011b62 <strncmp+0x1c>
 8011b5a:	42a0      	cmp	r0, r4
 8011b5c:	d001      	beq.n	8011b62 <strncmp+0x1c>
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	d1f5      	bne.n	8011b4e <strncmp+0x8>
 8011b62:	1ad0      	subs	r0, r2, r3
 8011b64:	bd10      	pop	{r4, pc}
 8011b66:	4610      	mov	r0, r2
 8011b68:	e7fc      	b.n	8011b64 <strncmp+0x1e>

08011b6a <strstr>:
 8011b6a:	780a      	ldrb	r2, [r1, #0]
 8011b6c:	b570      	push	{r4, r5, r6, lr}
 8011b6e:	b96a      	cbnz	r2, 8011b8c <strstr+0x22>
 8011b70:	bd70      	pop	{r4, r5, r6, pc}
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d109      	bne.n	8011b8a <strstr+0x20>
 8011b76:	460c      	mov	r4, r1
 8011b78:	4605      	mov	r5, r0
 8011b7a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d0f6      	beq.n	8011b70 <strstr+0x6>
 8011b82:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011b86:	429e      	cmp	r6, r3
 8011b88:	d0f7      	beq.n	8011b7a <strstr+0x10>
 8011b8a:	3001      	adds	r0, #1
 8011b8c:	7803      	ldrb	r3, [r0, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1ef      	bne.n	8011b72 <strstr+0x8>
 8011b92:	4618      	mov	r0, r3
 8011b94:	e7ec      	b.n	8011b70 <strstr+0x6>
	...

08011b98 <_close_r>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	4d06      	ldr	r5, [pc, #24]	; (8011bb4 <_close_r+0x1c>)
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	4608      	mov	r0, r1
 8011ba2:	602b      	str	r3, [r5, #0]
 8011ba4:	f7ef fe81 	bl	80018aa <_close>
 8011ba8:	1c43      	adds	r3, r0, #1
 8011baa:	d102      	bne.n	8011bb2 <_close_r+0x1a>
 8011bac:	682b      	ldr	r3, [r5, #0]
 8011bae:	b103      	cbz	r3, 8011bb2 <_close_r+0x1a>
 8011bb0:	6023      	str	r3, [r4, #0]
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}
 8011bb4:	2000ddc4 	.word	0x2000ddc4

08011bb8 <_lseek_r>:
 8011bb8:	b538      	push	{r3, r4, r5, lr}
 8011bba:	4d07      	ldr	r5, [pc, #28]	; (8011bd8 <_lseek_r+0x20>)
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	4608      	mov	r0, r1
 8011bc0:	4611      	mov	r1, r2
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	602a      	str	r2, [r5, #0]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	f7ef fe96 	bl	80018f8 <_lseek>
 8011bcc:	1c43      	adds	r3, r0, #1
 8011bce:	d102      	bne.n	8011bd6 <_lseek_r+0x1e>
 8011bd0:	682b      	ldr	r3, [r5, #0]
 8011bd2:	b103      	cbz	r3, 8011bd6 <_lseek_r+0x1e>
 8011bd4:	6023      	str	r3, [r4, #0]
 8011bd6:	bd38      	pop	{r3, r4, r5, pc}
 8011bd8:	2000ddc4 	.word	0x2000ddc4

08011bdc <_read_r>:
 8011bdc:	b538      	push	{r3, r4, r5, lr}
 8011bde:	4d07      	ldr	r5, [pc, #28]	; (8011bfc <_read_r+0x20>)
 8011be0:	4604      	mov	r4, r0
 8011be2:	4608      	mov	r0, r1
 8011be4:	4611      	mov	r1, r2
 8011be6:	2200      	movs	r2, #0
 8011be8:	602a      	str	r2, [r5, #0]
 8011bea:	461a      	mov	r2, r3
 8011bec:	f7ef fe24 	bl	8001838 <_read>
 8011bf0:	1c43      	adds	r3, r0, #1
 8011bf2:	d102      	bne.n	8011bfa <_read_r+0x1e>
 8011bf4:	682b      	ldr	r3, [r5, #0]
 8011bf6:	b103      	cbz	r3, 8011bfa <_read_r+0x1e>
 8011bf8:	6023      	str	r3, [r4, #0]
 8011bfa:	bd38      	pop	{r3, r4, r5, pc}
 8011bfc:	2000ddc4 	.word	0x2000ddc4

08011c00 <_sbrk_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4d06      	ldr	r5, [pc, #24]	; (8011c1c <_sbrk_r+0x1c>)
 8011c04:	2300      	movs	r3, #0
 8011c06:	4604      	mov	r4, r0
 8011c08:	4608      	mov	r0, r1
 8011c0a:	602b      	str	r3, [r5, #0]
 8011c0c:	f7ef fe82 	bl	8001914 <_sbrk>
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	d102      	bne.n	8011c1a <_sbrk_r+0x1a>
 8011c14:	682b      	ldr	r3, [r5, #0]
 8011c16:	b103      	cbz	r3, 8011c1a <_sbrk_r+0x1a>
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	bd38      	pop	{r3, r4, r5, pc}
 8011c1c:	2000ddc4 	.word	0x2000ddc4

08011c20 <_write_r>:
 8011c20:	b538      	push	{r3, r4, r5, lr}
 8011c22:	4d07      	ldr	r5, [pc, #28]	; (8011c40 <_write_r+0x20>)
 8011c24:	4604      	mov	r4, r0
 8011c26:	4608      	mov	r0, r1
 8011c28:	4611      	mov	r1, r2
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	602a      	str	r2, [r5, #0]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	f7ef fe1f 	bl	8001872 <_write>
 8011c34:	1c43      	adds	r3, r0, #1
 8011c36:	d102      	bne.n	8011c3e <_write_r+0x1e>
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	b103      	cbz	r3, 8011c3e <_write_r+0x1e>
 8011c3c:	6023      	str	r3, [r4, #0]
 8011c3e:	bd38      	pop	{r3, r4, r5, pc}
 8011c40:	2000ddc4 	.word	0x2000ddc4

08011c44 <__errno>:
 8011c44:	4b01      	ldr	r3, [pc, #4]	; (8011c4c <__errno+0x8>)
 8011c46:	6818      	ldr	r0, [r3, #0]
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	2000010c 	.word	0x2000010c

08011c50 <__libc_init_array>:
 8011c50:	b570      	push	{r4, r5, r6, lr}
 8011c52:	4d0d      	ldr	r5, [pc, #52]	; (8011c88 <__libc_init_array+0x38>)
 8011c54:	4c0d      	ldr	r4, [pc, #52]	; (8011c8c <__libc_init_array+0x3c>)
 8011c56:	1b64      	subs	r4, r4, r5
 8011c58:	10a4      	asrs	r4, r4, #2
 8011c5a:	2600      	movs	r6, #0
 8011c5c:	42a6      	cmp	r6, r4
 8011c5e:	d109      	bne.n	8011c74 <__libc_init_array+0x24>
 8011c60:	4d0b      	ldr	r5, [pc, #44]	; (8011c90 <__libc_init_array+0x40>)
 8011c62:	4c0c      	ldr	r4, [pc, #48]	; (8011c94 <__libc_init_array+0x44>)
 8011c64:	f000 ff1a 	bl	8012a9c <_init>
 8011c68:	1b64      	subs	r4, r4, r5
 8011c6a:	10a4      	asrs	r4, r4, #2
 8011c6c:	2600      	movs	r6, #0
 8011c6e:	42a6      	cmp	r6, r4
 8011c70:	d105      	bne.n	8011c7e <__libc_init_array+0x2e>
 8011c72:	bd70      	pop	{r4, r5, r6, pc}
 8011c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c78:	4798      	blx	r3
 8011c7a:	3601      	adds	r6, #1
 8011c7c:	e7ee      	b.n	8011c5c <__libc_init_array+0xc>
 8011c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c82:	4798      	blx	r3
 8011c84:	3601      	adds	r6, #1
 8011c86:	e7f2      	b.n	8011c6e <__libc_init_array+0x1e>
 8011c88:	08013758 	.word	0x08013758
 8011c8c:	08013758 	.word	0x08013758
 8011c90:	08013758 	.word	0x08013758
 8011c94:	08013760 	.word	0x08013760

08011c98 <__retarget_lock_acquire_recursive>:
 8011c98:	4770      	bx	lr

08011c9a <__retarget_lock_release_recursive>:
 8011c9a:	4770      	bx	lr

08011c9c <strcpy>:
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ca2:	f803 2b01 	strb.w	r2, [r3], #1
 8011ca6:	2a00      	cmp	r2, #0
 8011ca8:	d1f9      	bne.n	8011c9e <strcpy+0x2>
 8011caa:	4770      	bx	lr

08011cac <memcpy>:
 8011cac:	440a      	add	r2, r1
 8011cae:	4291      	cmp	r1, r2
 8011cb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011cb4:	d100      	bne.n	8011cb8 <memcpy+0xc>
 8011cb6:	4770      	bx	lr
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cc2:	4291      	cmp	r1, r2
 8011cc4:	d1f9      	bne.n	8011cba <memcpy+0xe>
 8011cc6:	bd10      	pop	{r4, pc}

08011cc8 <__assert_func>:
 8011cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011cca:	4614      	mov	r4, r2
 8011ccc:	461a      	mov	r2, r3
 8011cce:	4b09      	ldr	r3, [pc, #36]	; (8011cf4 <__assert_func+0x2c>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	68d8      	ldr	r0, [r3, #12]
 8011cd6:	b14c      	cbz	r4, 8011cec <__assert_func+0x24>
 8011cd8:	4b07      	ldr	r3, [pc, #28]	; (8011cf8 <__assert_func+0x30>)
 8011cda:	9100      	str	r1, [sp, #0]
 8011cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ce0:	4906      	ldr	r1, [pc, #24]	; (8011cfc <__assert_func+0x34>)
 8011ce2:	462b      	mov	r3, r5
 8011ce4:	f000 fd48 	bl	8012778 <fiprintf>
 8011ce8:	f000 fe08 	bl	80128fc <abort>
 8011cec:	4b04      	ldr	r3, [pc, #16]	; (8011d00 <__assert_func+0x38>)
 8011cee:	461c      	mov	r4, r3
 8011cf0:	e7f3      	b.n	8011cda <__assert_func+0x12>
 8011cf2:	bf00      	nop
 8011cf4:	2000010c 	.word	0x2000010c
 8011cf8:	080136e0 	.word	0x080136e0
 8011cfc:	080136ed 	.word	0x080136ed
 8011d00:	0801371b 	.word	0x0801371b

08011d04 <__env_lock>:
 8011d04:	4801      	ldr	r0, [pc, #4]	; (8011d0c <__env_lock+0x8>)
 8011d06:	f7ff bfc7 	b.w	8011c98 <__retarget_lock_acquire_recursive>
 8011d0a:	bf00      	nop
 8011d0c:	2000ddc8 	.word	0x2000ddc8

08011d10 <__env_unlock>:
 8011d10:	4801      	ldr	r0, [pc, #4]	; (8011d18 <__env_unlock+0x8>)
 8011d12:	f7ff bfc2 	b.w	8011c9a <__retarget_lock_release_recursive>
 8011d16:	bf00      	nop
 8011d18:	2000ddc8 	.word	0x2000ddc8

08011d1c <_free_r>:
 8011d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d1e:	2900      	cmp	r1, #0
 8011d20:	d044      	beq.n	8011dac <_free_r+0x90>
 8011d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d26:	9001      	str	r0, [sp, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8011d2e:	bfb8      	it	lt
 8011d30:	18e4      	addlt	r4, r4, r3
 8011d32:	f7ff fc55 	bl	80115e0 <__malloc_lock>
 8011d36:	4a1e      	ldr	r2, [pc, #120]	; (8011db0 <_free_r+0x94>)
 8011d38:	9801      	ldr	r0, [sp, #4]
 8011d3a:	6813      	ldr	r3, [r2, #0]
 8011d3c:	b933      	cbnz	r3, 8011d4c <_free_r+0x30>
 8011d3e:	6063      	str	r3, [r4, #4]
 8011d40:	6014      	str	r4, [r2, #0]
 8011d42:	b003      	add	sp, #12
 8011d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d48:	f7ff bc50 	b.w	80115ec <__malloc_unlock>
 8011d4c:	42a3      	cmp	r3, r4
 8011d4e:	d908      	bls.n	8011d62 <_free_r+0x46>
 8011d50:	6825      	ldr	r5, [r4, #0]
 8011d52:	1961      	adds	r1, r4, r5
 8011d54:	428b      	cmp	r3, r1
 8011d56:	bf01      	itttt	eq
 8011d58:	6819      	ldreq	r1, [r3, #0]
 8011d5a:	685b      	ldreq	r3, [r3, #4]
 8011d5c:	1949      	addeq	r1, r1, r5
 8011d5e:	6021      	streq	r1, [r4, #0]
 8011d60:	e7ed      	b.n	8011d3e <_free_r+0x22>
 8011d62:	461a      	mov	r2, r3
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	b10b      	cbz	r3, 8011d6c <_free_r+0x50>
 8011d68:	42a3      	cmp	r3, r4
 8011d6a:	d9fa      	bls.n	8011d62 <_free_r+0x46>
 8011d6c:	6811      	ldr	r1, [r2, #0]
 8011d6e:	1855      	adds	r5, r2, r1
 8011d70:	42a5      	cmp	r5, r4
 8011d72:	d10b      	bne.n	8011d8c <_free_r+0x70>
 8011d74:	6824      	ldr	r4, [r4, #0]
 8011d76:	4421      	add	r1, r4
 8011d78:	1854      	adds	r4, r2, r1
 8011d7a:	42a3      	cmp	r3, r4
 8011d7c:	6011      	str	r1, [r2, #0]
 8011d7e:	d1e0      	bne.n	8011d42 <_free_r+0x26>
 8011d80:	681c      	ldr	r4, [r3, #0]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	6053      	str	r3, [r2, #4]
 8011d86:	440c      	add	r4, r1
 8011d88:	6014      	str	r4, [r2, #0]
 8011d8a:	e7da      	b.n	8011d42 <_free_r+0x26>
 8011d8c:	d902      	bls.n	8011d94 <_free_r+0x78>
 8011d8e:	230c      	movs	r3, #12
 8011d90:	6003      	str	r3, [r0, #0]
 8011d92:	e7d6      	b.n	8011d42 <_free_r+0x26>
 8011d94:	6825      	ldr	r5, [r4, #0]
 8011d96:	1961      	adds	r1, r4, r5
 8011d98:	428b      	cmp	r3, r1
 8011d9a:	bf04      	itt	eq
 8011d9c:	6819      	ldreq	r1, [r3, #0]
 8011d9e:	685b      	ldreq	r3, [r3, #4]
 8011da0:	6063      	str	r3, [r4, #4]
 8011da2:	bf04      	itt	eq
 8011da4:	1949      	addeq	r1, r1, r5
 8011da6:	6021      	streq	r1, [r4, #0]
 8011da8:	6054      	str	r4, [r2, #4]
 8011daa:	e7ca      	b.n	8011d42 <_free_r+0x26>
 8011dac:	b003      	add	sp, #12
 8011dae:	bd30      	pop	{r4, r5, pc}
 8011db0:	2000dc80 	.word	0x2000dc80

08011db4 <_malloc_usable_size_r>:
 8011db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011db8:	1f18      	subs	r0, r3, #4
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	bfbc      	itt	lt
 8011dbe:	580b      	ldrlt	r3, [r1, r0]
 8011dc0:	18c0      	addlt	r0, r0, r3
 8011dc2:	4770      	bx	lr

08011dc4 <__ssputs_r>:
 8011dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc8:	688e      	ldr	r6, [r1, #8]
 8011dca:	461f      	mov	r7, r3
 8011dcc:	42be      	cmp	r6, r7
 8011dce:	680b      	ldr	r3, [r1, #0]
 8011dd0:	4682      	mov	sl, r0
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	4690      	mov	r8, r2
 8011dd6:	d82c      	bhi.n	8011e32 <__ssputs_r+0x6e>
 8011dd8:	898a      	ldrh	r2, [r1, #12]
 8011dda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011dde:	d026      	beq.n	8011e2e <__ssputs_r+0x6a>
 8011de0:	6965      	ldr	r5, [r4, #20]
 8011de2:	6909      	ldr	r1, [r1, #16]
 8011de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011de8:	eba3 0901 	sub.w	r9, r3, r1
 8011dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011df0:	1c7b      	adds	r3, r7, #1
 8011df2:	444b      	add	r3, r9
 8011df4:	106d      	asrs	r5, r5, #1
 8011df6:	429d      	cmp	r5, r3
 8011df8:	bf38      	it	cc
 8011dfa:	461d      	movcc	r5, r3
 8011dfc:	0553      	lsls	r3, r2, #21
 8011dfe:	d527      	bpl.n	8011e50 <__ssputs_r+0x8c>
 8011e00:	4629      	mov	r1, r5
 8011e02:	f7ff fb6d 	bl	80114e0 <_malloc_r>
 8011e06:	4606      	mov	r6, r0
 8011e08:	b360      	cbz	r0, 8011e64 <__ssputs_r+0xa0>
 8011e0a:	6921      	ldr	r1, [r4, #16]
 8011e0c:	464a      	mov	r2, r9
 8011e0e:	f7ff ff4d 	bl	8011cac <memcpy>
 8011e12:	89a3      	ldrh	r3, [r4, #12]
 8011e14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e1c:	81a3      	strh	r3, [r4, #12]
 8011e1e:	6126      	str	r6, [r4, #16]
 8011e20:	6165      	str	r5, [r4, #20]
 8011e22:	444e      	add	r6, r9
 8011e24:	eba5 0509 	sub.w	r5, r5, r9
 8011e28:	6026      	str	r6, [r4, #0]
 8011e2a:	60a5      	str	r5, [r4, #8]
 8011e2c:	463e      	mov	r6, r7
 8011e2e:	42be      	cmp	r6, r7
 8011e30:	d900      	bls.n	8011e34 <__ssputs_r+0x70>
 8011e32:	463e      	mov	r6, r7
 8011e34:	6820      	ldr	r0, [r4, #0]
 8011e36:	4632      	mov	r2, r6
 8011e38:	4641      	mov	r1, r8
 8011e3a:	f000 fd45 	bl	80128c8 <memmove>
 8011e3e:	68a3      	ldr	r3, [r4, #8]
 8011e40:	1b9b      	subs	r3, r3, r6
 8011e42:	60a3      	str	r3, [r4, #8]
 8011e44:	6823      	ldr	r3, [r4, #0]
 8011e46:	4433      	add	r3, r6
 8011e48:	6023      	str	r3, [r4, #0]
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e50:	462a      	mov	r2, r5
 8011e52:	f7ff fc45 	bl	80116e0 <_realloc_r>
 8011e56:	4606      	mov	r6, r0
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d1e0      	bne.n	8011e1e <__ssputs_r+0x5a>
 8011e5c:	6921      	ldr	r1, [r4, #16]
 8011e5e:	4650      	mov	r0, sl
 8011e60:	f7ff ff5c 	bl	8011d1c <_free_r>
 8011e64:	230c      	movs	r3, #12
 8011e66:	f8ca 3000 	str.w	r3, [sl]
 8011e6a:	89a3      	ldrh	r3, [r4, #12]
 8011e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e70:	81a3      	strh	r3, [r4, #12]
 8011e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e76:	e7e9      	b.n	8011e4c <__ssputs_r+0x88>

08011e78 <_svfiprintf_r>:
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	4698      	mov	r8, r3
 8011e7e:	898b      	ldrh	r3, [r1, #12]
 8011e80:	061b      	lsls	r3, r3, #24
 8011e82:	b09d      	sub	sp, #116	; 0x74
 8011e84:	4607      	mov	r7, r0
 8011e86:	460d      	mov	r5, r1
 8011e88:	4614      	mov	r4, r2
 8011e8a:	d50e      	bpl.n	8011eaa <_svfiprintf_r+0x32>
 8011e8c:	690b      	ldr	r3, [r1, #16]
 8011e8e:	b963      	cbnz	r3, 8011eaa <_svfiprintf_r+0x32>
 8011e90:	2140      	movs	r1, #64	; 0x40
 8011e92:	f7ff fb25 	bl	80114e0 <_malloc_r>
 8011e96:	6028      	str	r0, [r5, #0]
 8011e98:	6128      	str	r0, [r5, #16]
 8011e9a:	b920      	cbnz	r0, 8011ea6 <_svfiprintf_r+0x2e>
 8011e9c:	230c      	movs	r3, #12
 8011e9e:	603b      	str	r3, [r7, #0]
 8011ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ea4:	e0d0      	b.n	8012048 <_svfiprintf_r+0x1d0>
 8011ea6:	2340      	movs	r3, #64	; 0x40
 8011ea8:	616b      	str	r3, [r5, #20]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	9309      	str	r3, [sp, #36]	; 0x24
 8011eae:	2320      	movs	r3, #32
 8011eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eb8:	2330      	movs	r3, #48	; 0x30
 8011eba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012060 <_svfiprintf_r+0x1e8>
 8011ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ec2:	f04f 0901 	mov.w	r9, #1
 8011ec6:	4623      	mov	r3, r4
 8011ec8:	469a      	mov	sl, r3
 8011eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ece:	b10a      	cbz	r2, 8011ed4 <_svfiprintf_r+0x5c>
 8011ed0:	2a25      	cmp	r2, #37	; 0x25
 8011ed2:	d1f9      	bne.n	8011ec8 <_svfiprintf_r+0x50>
 8011ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ed8:	d00b      	beq.n	8011ef2 <_svfiprintf_r+0x7a>
 8011eda:	465b      	mov	r3, fp
 8011edc:	4622      	mov	r2, r4
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4638      	mov	r0, r7
 8011ee2:	f7ff ff6f 	bl	8011dc4 <__ssputs_r>
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	f000 80a9 	beq.w	801203e <_svfiprintf_r+0x1c6>
 8011eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011eee:	445a      	add	r2, fp
 8011ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8011ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f000 80a1 	beq.w	801203e <_svfiprintf_r+0x1c6>
 8011efc:	2300      	movs	r3, #0
 8011efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f06:	f10a 0a01 	add.w	sl, sl, #1
 8011f0a:	9304      	str	r3, [sp, #16]
 8011f0c:	9307      	str	r3, [sp, #28]
 8011f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f12:	931a      	str	r3, [sp, #104]	; 0x68
 8011f14:	4654      	mov	r4, sl
 8011f16:	2205      	movs	r2, #5
 8011f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1c:	4850      	ldr	r0, [pc, #320]	; (8012060 <_svfiprintf_r+0x1e8>)
 8011f1e:	f7ee f96f 	bl	8000200 <memchr>
 8011f22:	9a04      	ldr	r2, [sp, #16]
 8011f24:	b9d8      	cbnz	r0, 8011f5e <_svfiprintf_r+0xe6>
 8011f26:	06d0      	lsls	r0, r2, #27
 8011f28:	bf44      	itt	mi
 8011f2a:	2320      	movmi	r3, #32
 8011f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f30:	0711      	lsls	r1, r2, #28
 8011f32:	bf44      	itt	mi
 8011f34:	232b      	movmi	r3, #43	; 0x2b
 8011f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8011f40:	d015      	beq.n	8011f6e <_svfiprintf_r+0xf6>
 8011f42:	9a07      	ldr	r2, [sp, #28]
 8011f44:	4654      	mov	r4, sl
 8011f46:	2000      	movs	r0, #0
 8011f48:	f04f 0c0a 	mov.w	ip, #10
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f52:	3b30      	subs	r3, #48	; 0x30
 8011f54:	2b09      	cmp	r3, #9
 8011f56:	d94d      	bls.n	8011ff4 <_svfiprintf_r+0x17c>
 8011f58:	b1b0      	cbz	r0, 8011f88 <_svfiprintf_r+0x110>
 8011f5a:	9207      	str	r2, [sp, #28]
 8011f5c:	e014      	b.n	8011f88 <_svfiprintf_r+0x110>
 8011f5e:	eba0 0308 	sub.w	r3, r0, r8
 8011f62:	fa09 f303 	lsl.w	r3, r9, r3
 8011f66:	4313      	orrs	r3, r2
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	46a2      	mov	sl, r4
 8011f6c:	e7d2      	b.n	8011f14 <_svfiprintf_r+0x9c>
 8011f6e:	9b03      	ldr	r3, [sp, #12]
 8011f70:	1d19      	adds	r1, r3, #4
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	9103      	str	r1, [sp, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	bfbb      	ittet	lt
 8011f7a:	425b      	neglt	r3, r3
 8011f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8011f80:	9307      	strge	r3, [sp, #28]
 8011f82:	9307      	strlt	r3, [sp, #28]
 8011f84:	bfb8      	it	lt
 8011f86:	9204      	strlt	r2, [sp, #16]
 8011f88:	7823      	ldrb	r3, [r4, #0]
 8011f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8011f8c:	d10c      	bne.n	8011fa8 <_svfiprintf_r+0x130>
 8011f8e:	7863      	ldrb	r3, [r4, #1]
 8011f90:	2b2a      	cmp	r3, #42	; 0x2a
 8011f92:	d134      	bne.n	8011ffe <_svfiprintf_r+0x186>
 8011f94:	9b03      	ldr	r3, [sp, #12]
 8011f96:	1d1a      	adds	r2, r3, #4
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	9203      	str	r2, [sp, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	bfb8      	it	lt
 8011fa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011fa4:	3402      	adds	r4, #2
 8011fa6:	9305      	str	r3, [sp, #20]
 8011fa8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012070 <_svfiprintf_r+0x1f8>
 8011fac:	7821      	ldrb	r1, [r4, #0]
 8011fae:	2203      	movs	r2, #3
 8011fb0:	4650      	mov	r0, sl
 8011fb2:	f7ee f925 	bl	8000200 <memchr>
 8011fb6:	b138      	cbz	r0, 8011fc8 <_svfiprintf_r+0x150>
 8011fb8:	9b04      	ldr	r3, [sp, #16]
 8011fba:	eba0 000a 	sub.w	r0, r0, sl
 8011fbe:	2240      	movs	r2, #64	; 0x40
 8011fc0:	4082      	lsls	r2, r0
 8011fc2:	4313      	orrs	r3, r2
 8011fc4:	3401      	adds	r4, #1
 8011fc6:	9304      	str	r3, [sp, #16]
 8011fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fcc:	4825      	ldr	r0, [pc, #148]	; (8012064 <_svfiprintf_r+0x1ec>)
 8011fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fd2:	2206      	movs	r2, #6
 8011fd4:	f7ee f914 	bl	8000200 <memchr>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d038      	beq.n	801204e <_svfiprintf_r+0x1d6>
 8011fdc:	4b22      	ldr	r3, [pc, #136]	; (8012068 <_svfiprintf_r+0x1f0>)
 8011fde:	bb1b      	cbnz	r3, 8012028 <_svfiprintf_r+0x1b0>
 8011fe0:	9b03      	ldr	r3, [sp, #12]
 8011fe2:	3307      	adds	r3, #7
 8011fe4:	f023 0307 	bic.w	r3, r3, #7
 8011fe8:	3308      	adds	r3, #8
 8011fea:	9303      	str	r3, [sp, #12]
 8011fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fee:	4433      	add	r3, r6
 8011ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ff2:	e768      	b.n	8011ec6 <_svfiprintf_r+0x4e>
 8011ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	2001      	movs	r0, #1
 8011ffc:	e7a6      	b.n	8011f4c <_svfiprintf_r+0xd4>
 8011ffe:	2300      	movs	r3, #0
 8012000:	3401      	adds	r4, #1
 8012002:	9305      	str	r3, [sp, #20]
 8012004:	4619      	mov	r1, r3
 8012006:	f04f 0c0a 	mov.w	ip, #10
 801200a:	4620      	mov	r0, r4
 801200c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012010:	3a30      	subs	r2, #48	; 0x30
 8012012:	2a09      	cmp	r2, #9
 8012014:	d903      	bls.n	801201e <_svfiprintf_r+0x1a6>
 8012016:	2b00      	cmp	r3, #0
 8012018:	d0c6      	beq.n	8011fa8 <_svfiprintf_r+0x130>
 801201a:	9105      	str	r1, [sp, #20]
 801201c:	e7c4      	b.n	8011fa8 <_svfiprintf_r+0x130>
 801201e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012022:	4604      	mov	r4, r0
 8012024:	2301      	movs	r3, #1
 8012026:	e7f0      	b.n	801200a <_svfiprintf_r+0x192>
 8012028:	ab03      	add	r3, sp, #12
 801202a:	9300      	str	r3, [sp, #0]
 801202c:	462a      	mov	r2, r5
 801202e:	4b0f      	ldr	r3, [pc, #60]	; (801206c <_svfiprintf_r+0x1f4>)
 8012030:	a904      	add	r1, sp, #16
 8012032:	4638      	mov	r0, r7
 8012034:	f3af 8000 	nop.w
 8012038:	1c42      	adds	r2, r0, #1
 801203a:	4606      	mov	r6, r0
 801203c:	d1d6      	bne.n	8011fec <_svfiprintf_r+0x174>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	065b      	lsls	r3, r3, #25
 8012042:	f53f af2d 	bmi.w	8011ea0 <_svfiprintf_r+0x28>
 8012046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012048:	b01d      	add	sp, #116	; 0x74
 801204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204e:	ab03      	add	r3, sp, #12
 8012050:	9300      	str	r3, [sp, #0]
 8012052:	462a      	mov	r2, r5
 8012054:	4b05      	ldr	r3, [pc, #20]	; (801206c <_svfiprintf_r+0x1f4>)
 8012056:	a904      	add	r1, sp, #16
 8012058:	4638      	mov	r0, r7
 801205a:	f000 f9bd 	bl	80123d8 <_printf_i>
 801205e:	e7eb      	b.n	8012038 <_svfiprintf_r+0x1c0>
 8012060:	0801371c 	.word	0x0801371c
 8012064:	08013726 	.word	0x08013726
 8012068:	00000000 	.word	0x00000000
 801206c:	08011dc5 	.word	0x08011dc5
 8012070:	08013722 	.word	0x08013722

08012074 <__sfputc_r>:
 8012074:	6893      	ldr	r3, [r2, #8]
 8012076:	3b01      	subs	r3, #1
 8012078:	2b00      	cmp	r3, #0
 801207a:	b410      	push	{r4}
 801207c:	6093      	str	r3, [r2, #8]
 801207e:	da08      	bge.n	8012092 <__sfputc_r+0x1e>
 8012080:	6994      	ldr	r4, [r2, #24]
 8012082:	42a3      	cmp	r3, r4
 8012084:	db01      	blt.n	801208a <__sfputc_r+0x16>
 8012086:	290a      	cmp	r1, #10
 8012088:	d103      	bne.n	8012092 <__sfputc_r+0x1e>
 801208a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801208e:	f000 bb85 	b.w	801279c <__swbuf_r>
 8012092:	6813      	ldr	r3, [r2, #0]
 8012094:	1c58      	adds	r0, r3, #1
 8012096:	6010      	str	r0, [r2, #0]
 8012098:	7019      	strb	r1, [r3, #0]
 801209a:	4608      	mov	r0, r1
 801209c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120a0:	4770      	bx	lr

080120a2 <__sfputs_r>:
 80120a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a4:	4606      	mov	r6, r0
 80120a6:	460f      	mov	r7, r1
 80120a8:	4614      	mov	r4, r2
 80120aa:	18d5      	adds	r5, r2, r3
 80120ac:	42ac      	cmp	r4, r5
 80120ae:	d101      	bne.n	80120b4 <__sfputs_r+0x12>
 80120b0:	2000      	movs	r0, #0
 80120b2:	e007      	b.n	80120c4 <__sfputs_r+0x22>
 80120b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b8:	463a      	mov	r2, r7
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7ff ffda 	bl	8012074 <__sfputc_r>
 80120c0:	1c43      	adds	r3, r0, #1
 80120c2:	d1f3      	bne.n	80120ac <__sfputs_r+0xa>
 80120c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120c8 <_vfiprintf_r>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	460d      	mov	r5, r1
 80120ce:	b09d      	sub	sp, #116	; 0x74
 80120d0:	4614      	mov	r4, r2
 80120d2:	4698      	mov	r8, r3
 80120d4:	4606      	mov	r6, r0
 80120d6:	b118      	cbz	r0, 80120e0 <_vfiprintf_r+0x18>
 80120d8:	6a03      	ldr	r3, [r0, #32]
 80120da:	b90b      	cbnz	r3, 80120e0 <_vfiprintf_r+0x18>
 80120dc:	f7ff fc26 	bl	801192c <__sinit>
 80120e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120e2:	07d9      	lsls	r1, r3, #31
 80120e4:	d405      	bmi.n	80120f2 <_vfiprintf_r+0x2a>
 80120e6:	89ab      	ldrh	r3, [r5, #12]
 80120e8:	059a      	lsls	r2, r3, #22
 80120ea:	d402      	bmi.n	80120f2 <_vfiprintf_r+0x2a>
 80120ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120ee:	f7ff fdd3 	bl	8011c98 <__retarget_lock_acquire_recursive>
 80120f2:	89ab      	ldrh	r3, [r5, #12]
 80120f4:	071b      	lsls	r3, r3, #28
 80120f6:	d501      	bpl.n	80120fc <_vfiprintf_r+0x34>
 80120f8:	692b      	ldr	r3, [r5, #16]
 80120fa:	b99b      	cbnz	r3, 8012124 <_vfiprintf_r+0x5c>
 80120fc:	4629      	mov	r1, r5
 80120fe:	4630      	mov	r0, r6
 8012100:	f000 fb8a 	bl	8012818 <__swsetup_r>
 8012104:	b170      	cbz	r0, 8012124 <_vfiprintf_r+0x5c>
 8012106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012108:	07dc      	lsls	r4, r3, #31
 801210a:	d504      	bpl.n	8012116 <_vfiprintf_r+0x4e>
 801210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012110:	b01d      	add	sp, #116	; 0x74
 8012112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012116:	89ab      	ldrh	r3, [r5, #12]
 8012118:	0598      	lsls	r0, r3, #22
 801211a:	d4f7      	bmi.n	801210c <_vfiprintf_r+0x44>
 801211c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801211e:	f7ff fdbc 	bl	8011c9a <__retarget_lock_release_recursive>
 8012122:	e7f3      	b.n	801210c <_vfiprintf_r+0x44>
 8012124:	2300      	movs	r3, #0
 8012126:	9309      	str	r3, [sp, #36]	; 0x24
 8012128:	2320      	movs	r3, #32
 801212a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801212e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012132:	2330      	movs	r3, #48	; 0x30
 8012134:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80122e8 <_vfiprintf_r+0x220>
 8012138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801213c:	f04f 0901 	mov.w	r9, #1
 8012140:	4623      	mov	r3, r4
 8012142:	469a      	mov	sl, r3
 8012144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012148:	b10a      	cbz	r2, 801214e <_vfiprintf_r+0x86>
 801214a:	2a25      	cmp	r2, #37	; 0x25
 801214c:	d1f9      	bne.n	8012142 <_vfiprintf_r+0x7a>
 801214e:	ebba 0b04 	subs.w	fp, sl, r4
 8012152:	d00b      	beq.n	801216c <_vfiprintf_r+0xa4>
 8012154:	465b      	mov	r3, fp
 8012156:	4622      	mov	r2, r4
 8012158:	4629      	mov	r1, r5
 801215a:	4630      	mov	r0, r6
 801215c:	f7ff ffa1 	bl	80120a2 <__sfputs_r>
 8012160:	3001      	adds	r0, #1
 8012162:	f000 80a9 	beq.w	80122b8 <_vfiprintf_r+0x1f0>
 8012166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012168:	445a      	add	r2, fp
 801216a:	9209      	str	r2, [sp, #36]	; 0x24
 801216c:	f89a 3000 	ldrb.w	r3, [sl]
 8012170:	2b00      	cmp	r3, #0
 8012172:	f000 80a1 	beq.w	80122b8 <_vfiprintf_r+0x1f0>
 8012176:	2300      	movs	r3, #0
 8012178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801217c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012180:	f10a 0a01 	add.w	sl, sl, #1
 8012184:	9304      	str	r3, [sp, #16]
 8012186:	9307      	str	r3, [sp, #28]
 8012188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801218c:	931a      	str	r3, [sp, #104]	; 0x68
 801218e:	4654      	mov	r4, sl
 8012190:	2205      	movs	r2, #5
 8012192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012196:	4854      	ldr	r0, [pc, #336]	; (80122e8 <_vfiprintf_r+0x220>)
 8012198:	f7ee f832 	bl	8000200 <memchr>
 801219c:	9a04      	ldr	r2, [sp, #16]
 801219e:	b9d8      	cbnz	r0, 80121d8 <_vfiprintf_r+0x110>
 80121a0:	06d1      	lsls	r1, r2, #27
 80121a2:	bf44      	itt	mi
 80121a4:	2320      	movmi	r3, #32
 80121a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121aa:	0713      	lsls	r3, r2, #28
 80121ac:	bf44      	itt	mi
 80121ae:	232b      	movmi	r3, #43	; 0x2b
 80121b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121b4:	f89a 3000 	ldrb.w	r3, [sl]
 80121b8:	2b2a      	cmp	r3, #42	; 0x2a
 80121ba:	d015      	beq.n	80121e8 <_vfiprintf_r+0x120>
 80121bc:	9a07      	ldr	r2, [sp, #28]
 80121be:	4654      	mov	r4, sl
 80121c0:	2000      	movs	r0, #0
 80121c2:	f04f 0c0a 	mov.w	ip, #10
 80121c6:	4621      	mov	r1, r4
 80121c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121cc:	3b30      	subs	r3, #48	; 0x30
 80121ce:	2b09      	cmp	r3, #9
 80121d0:	d94d      	bls.n	801226e <_vfiprintf_r+0x1a6>
 80121d2:	b1b0      	cbz	r0, 8012202 <_vfiprintf_r+0x13a>
 80121d4:	9207      	str	r2, [sp, #28]
 80121d6:	e014      	b.n	8012202 <_vfiprintf_r+0x13a>
 80121d8:	eba0 0308 	sub.w	r3, r0, r8
 80121dc:	fa09 f303 	lsl.w	r3, r9, r3
 80121e0:	4313      	orrs	r3, r2
 80121e2:	9304      	str	r3, [sp, #16]
 80121e4:	46a2      	mov	sl, r4
 80121e6:	e7d2      	b.n	801218e <_vfiprintf_r+0xc6>
 80121e8:	9b03      	ldr	r3, [sp, #12]
 80121ea:	1d19      	adds	r1, r3, #4
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	9103      	str	r1, [sp, #12]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	bfbb      	ittet	lt
 80121f4:	425b      	neglt	r3, r3
 80121f6:	f042 0202 	orrlt.w	r2, r2, #2
 80121fa:	9307      	strge	r3, [sp, #28]
 80121fc:	9307      	strlt	r3, [sp, #28]
 80121fe:	bfb8      	it	lt
 8012200:	9204      	strlt	r2, [sp, #16]
 8012202:	7823      	ldrb	r3, [r4, #0]
 8012204:	2b2e      	cmp	r3, #46	; 0x2e
 8012206:	d10c      	bne.n	8012222 <_vfiprintf_r+0x15a>
 8012208:	7863      	ldrb	r3, [r4, #1]
 801220a:	2b2a      	cmp	r3, #42	; 0x2a
 801220c:	d134      	bne.n	8012278 <_vfiprintf_r+0x1b0>
 801220e:	9b03      	ldr	r3, [sp, #12]
 8012210:	1d1a      	adds	r2, r3, #4
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	9203      	str	r2, [sp, #12]
 8012216:	2b00      	cmp	r3, #0
 8012218:	bfb8      	it	lt
 801221a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801221e:	3402      	adds	r4, #2
 8012220:	9305      	str	r3, [sp, #20]
 8012222:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80122f8 <_vfiprintf_r+0x230>
 8012226:	7821      	ldrb	r1, [r4, #0]
 8012228:	2203      	movs	r2, #3
 801222a:	4650      	mov	r0, sl
 801222c:	f7ed ffe8 	bl	8000200 <memchr>
 8012230:	b138      	cbz	r0, 8012242 <_vfiprintf_r+0x17a>
 8012232:	9b04      	ldr	r3, [sp, #16]
 8012234:	eba0 000a 	sub.w	r0, r0, sl
 8012238:	2240      	movs	r2, #64	; 0x40
 801223a:	4082      	lsls	r2, r0
 801223c:	4313      	orrs	r3, r2
 801223e:	3401      	adds	r4, #1
 8012240:	9304      	str	r3, [sp, #16]
 8012242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012246:	4829      	ldr	r0, [pc, #164]	; (80122ec <_vfiprintf_r+0x224>)
 8012248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801224c:	2206      	movs	r2, #6
 801224e:	f7ed ffd7 	bl	8000200 <memchr>
 8012252:	2800      	cmp	r0, #0
 8012254:	d03f      	beq.n	80122d6 <_vfiprintf_r+0x20e>
 8012256:	4b26      	ldr	r3, [pc, #152]	; (80122f0 <_vfiprintf_r+0x228>)
 8012258:	bb1b      	cbnz	r3, 80122a2 <_vfiprintf_r+0x1da>
 801225a:	9b03      	ldr	r3, [sp, #12]
 801225c:	3307      	adds	r3, #7
 801225e:	f023 0307 	bic.w	r3, r3, #7
 8012262:	3308      	adds	r3, #8
 8012264:	9303      	str	r3, [sp, #12]
 8012266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012268:	443b      	add	r3, r7
 801226a:	9309      	str	r3, [sp, #36]	; 0x24
 801226c:	e768      	b.n	8012140 <_vfiprintf_r+0x78>
 801226e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012272:	460c      	mov	r4, r1
 8012274:	2001      	movs	r0, #1
 8012276:	e7a6      	b.n	80121c6 <_vfiprintf_r+0xfe>
 8012278:	2300      	movs	r3, #0
 801227a:	3401      	adds	r4, #1
 801227c:	9305      	str	r3, [sp, #20]
 801227e:	4619      	mov	r1, r3
 8012280:	f04f 0c0a 	mov.w	ip, #10
 8012284:	4620      	mov	r0, r4
 8012286:	f810 2b01 	ldrb.w	r2, [r0], #1
 801228a:	3a30      	subs	r2, #48	; 0x30
 801228c:	2a09      	cmp	r2, #9
 801228e:	d903      	bls.n	8012298 <_vfiprintf_r+0x1d0>
 8012290:	2b00      	cmp	r3, #0
 8012292:	d0c6      	beq.n	8012222 <_vfiprintf_r+0x15a>
 8012294:	9105      	str	r1, [sp, #20]
 8012296:	e7c4      	b.n	8012222 <_vfiprintf_r+0x15a>
 8012298:	fb0c 2101 	mla	r1, ip, r1, r2
 801229c:	4604      	mov	r4, r0
 801229e:	2301      	movs	r3, #1
 80122a0:	e7f0      	b.n	8012284 <_vfiprintf_r+0x1bc>
 80122a2:	ab03      	add	r3, sp, #12
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	462a      	mov	r2, r5
 80122a8:	4b12      	ldr	r3, [pc, #72]	; (80122f4 <_vfiprintf_r+0x22c>)
 80122aa:	a904      	add	r1, sp, #16
 80122ac:	4630      	mov	r0, r6
 80122ae:	f3af 8000 	nop.w
 80122b2:	4607      	mov	r7, r0
 80122b4:	1c78      	adds	r0, r7, #1
 80122b6:	d1d6      	bne.n	8012266 <_vfiprintf_r+0x19e>
 80122b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122ba:	07d9      	lsls	r1, r3, #31
 80122bc:	d405      	bmi.n	80122ca <_vfiprintf_r+0x202>
 80122be:	89ab      	ldrh	r3, [r5, #12]
 80122c0:	059a      	lsls	r2, r3, #22
 80122c2:	d402      	bmi.n	80122ca <_vfiprintf_r+0x202>
 80122c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122c6:	f7ff fce8 	bl	8011c9a <__retarget_lock_release_recursive>
 80122ca:	89ab      	ldrh	r3, [r5, #12]
 80122cc:	065b      	lsls	r3, r3, #25
 80122ce:	f53f af1d 	bmi.w	801210c <_vfiprintf_r+0x44>
 80122d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122d4:	e71c      	b.n	8012110 <_vfiprintf_r+0x48>
 80122d6:	ab03      	add	r3, sp, #12
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	462a      	mov	r2, r5
 80122dc:	4b05      	ldr	r3, [pc, #20]	; (80122f4 <_vfiprintf_r+0x22c>)
 80122de:	a904      	add	r1, sp, #16
 80122e0:	4630      	mov	r0, r6
 80122e2:	f000 f879 	bl	80123d8 <_printf_i>
 80122e6:	e7e4      	b.n	80122b2 <_vfiprintf_r+0x1ea>
 80122e8:	0801371c 	.word	0x0801371c
 80122ec:	08013726 	.word	0x08013726
 80122f0:	00000000 	.word	0x00000000
 80122f4:	080120a3 	.word	0x080120a3
 80122f8:	08013722 	.word	0x08013722

080122fc <_printf_common>:
 80122fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012300:	4616      	mov	r6, r2
 8012302:	4699      	mov	r9, r3
 8012304:	688a      	ldr	r2, [r1, #8]
 8012306:	690b      	ldr	r3, [r1, #16]
 8012308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801230c:	4293      	cmp	r3, r2
 801230e:	bfb8      	it	lt
 8012310:	4613      	movlt	r3, r2
 8012312:	6033      	str	r3, [r6, #0]
 8012314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012318:	4607      	mov	r7, r0
 801231a:	460c      	mov	r4, r1
 801231c:	b10a      	cbz	r2, 8012322 <_printf_common+0x26>
 801231e:	3301      	adds	r3, #1
 8012320:	6033      	str	r3, [r6, #0]
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	0699      	lsls	r1, r3, #26
 8012326:	bf42      	ittt	mi
 8012328:	6833      	ldrmi	r3, [r6, #0]
 801232a:	3302      	addmi	r3, #2
 801232c:	6033      	strmi	r3, [r6, #0]
 801232e:	6825      	ldr	r5, [r4, #0]
 8012330:	f015 0506 	ands.w	r5, r5, #6
 8012334:	d106      	bne.n	8012344 <_printf_common+0x48>
 8012336:	f104 0a19 	add.w	sl, r4, #25
 801233a:	68e3      	ldr	r3, [r4, #12]
 801233c:	6832      	ldr	r2, [r6, #0]
 801233e:	1a9b      	subs	r3, r3, r2
 8012340:	42ab      	cmp	r3, r5
 8012342:	dc26      	bgt.n	8012392 <_printf_common+0x96>
 8012344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012348:	1e13      	subs	r3, r2, #0
 801234a:	6822      	ldr	r2, [r4, #0]
 801234c:	bf18      	it	ne
 801234e:	2301      	movne	r3, #1
 8012350:	0692      	lsls	r2, r2, #26
 8012352:	d42b      	bmi.n	80123ac <_printf_common+0xb0>
 8012354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012358:	4649      	mov	r1, r9
 801235a:	4638      	mov	r0, r7
 801235c:	47c0      	blx	r8
 801235e:	3001      	adds	r0, #1
 8012360:	d01e      	beq.n	80123a0 <_printf_common+0xa4>
 8012362:	6823      	ldr	r3, [r4, #0]
 8012364:	6922      	ldr	r2, [r4, #16]
 8012366:	f003 0306 	and.w	r3, r3, #6
 801236a:	2b04      	cmp	r3, #4
 801236c:	bf02      	ittt	eq
 801236e:	68e5      	ldreq	r5, [r4, #12]
 8012370:	6833      	ldreq	r3, [r6, #0]
 8012372:	1aed      	subeq	r5, r5, r3
 8012374:	68a3      	ldr	r3, [r4, #8]
 8012376:	bf0c      	ite	eq
 8012378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801237c:	2500      	movne	r5, #0
 801237e:	4293      	cmp	r3, r2
 8012380:	bfc4      	itt	gt
 8012382:	1a9b      	subgt	r3, r3, r2
 8012384:	18ed      	addgt	r5, r5, r3
 8012386:	2600      	movs	r6, #0
 8012388:	341a      	adds	r4, #26
 801238a:	42b5      	cmp	r5, r6
 801238c:	d11a      	bne.n	80123c4 <_printf_common+0xc8>
 801238e:	2000      	movs	r0, #0
 8012390:	e008      	b.n	80123a4 <_printf_common+0xa8>
 8012392:	2301      	movs	r3, #1
 8012394:	4652      	mov	r2, sl
 8012396:	4649      	mov	r1, r9
 8012398:	4638      	mov	r0, r7
 801239a:	47c0      	blx	r8
 801239c:	3001      	adds	r0, #1
 801239e:	d103      	bne.n	80123a8 <_printf_common+0xac>
 80123a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123a8:	3501      	adds	r5, #1
 80123aa:	e7c6      	b.n	801233a <_printf_common+0x3e>
 80123ac:	18e1      	adds	r1, r4, r3
 80123ae:	1c5a      	adds	r2, r3, #1
 80123b0:	2030      	movs	r0, #48	; 0x30
 80123b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80123b6:	4422      	add	r2, r4
 80123b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80123bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80123c0:	3302      	adds	r3, #2
 80123c2:	e7c7      	b.n	8012354 <_printf_common+0x58>
 80123c4:	2301      	movs	r3, #1
 80123c6:	4622      	mov	r2, r4
 80123c8:	4649      	mov	r1, r9
 80123ca:	4638      	mov	r0, r7
 80123cc:	47c0      	blx	r8
 80123ce:	3001      	adds	r0, #1
 80123d0:	d0e6      	beq.n	80123a0 <_printf_common+0xa4>
 80123d2:	3601      	adds	r6, #1
 80123d4:	e7d9      	b.n	801238a <_printf_common+0x8e>
	...

080123d8 <_printf_i>:
 80123d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123dc:	7e0f      	ldrb	r7, [r1, #24]
 80123de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80123e0:	2f78      	cmp	r7, #120	; 0x78
 80123e2:	4691      	mov	r9, r2
 80123e4:	4680      	mov	r8, r0
 80123e6:	460c      	mov	r4, r1
 80123e8:	469a      	mov	sl, r3
 80123ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80123ee:	d807      	bhi.n	8012400 <_printf_i+0x28>
 80123f0:	2f62      	cmp	r7, #98	; 0x62
 80123f2:	d80a      	bhi.n	801240a <_printf_i+0x32>
 80123f4:	2f00      	cmp	r7, #0
 80123f6:	f000 80d4 	beq.w	80125a2 <_printf_i+0x1ca>
 80123fa:	2f58      	cmp	r7, #88	; 0x58
 80123fc:	f000 80c0 	beq.w	8012580 <_printf_i+0x1a8>
 8012400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012408:	e03a      	b.n	8012480 <_printf_i+0xa8>
 801240a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801240e:	2b15      	cmp	r3, #21
 8012410:	d8f6      	bhi.n	8012400 <_printf_i+0x28>
 8012412:	a101      	add	r1, pc, #4	; (adr r1, 8012418 <_printf_i+0x40>)
 8012414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012418:	08012471 	.word	0x08012471
 801241c:	08012485 	.word	0x08012485
 8012420:	08012401 	.word	0x08012401
 8012424:	08012401 	.word	0x08012401
 8012428:	08012401 	.word	0x08012401
 801242c:	08012401 	.word	0x08012401
 8012430:	08012485 	.word	0x08012485
 8012434:	08012401 	.word	0x08012401
 8012438:	08012401 	.word	0x08012401
 801243c:	08012401 	.word	0x08012401
 8012440:	08012401 	.word	0x08012401
 8012444:	08012589 	.word	0x08012589
 8012448:	080124b1 	.word	0x080124b1
 801244c:	08012543 	.word	0x08012543
 8012450:	08012401 	.word	0x08012401
 8012454:	08012401 	.word	0x08012401
 8012458:	080125ab 	.word	0x080125ab
 801245c:	08012401 	.word	0x08012401
 8012460:	080124b1 	.word	0x080124b1
 8012464:	08012401 	.word	0x08012401
 8012468:	08012401 	.word	0x08012401
 801246c:	0801254b 	.word	0x0801254b
 8012470:	682b      	ldr	r3, [r5, #0]
 8012472:	1d1a      	adds	r2, r3, #4
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	602a      	str	r2, [r5, #0]
 8012478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801247c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012480:	2301      	movs	r3, #1
 8012482:	e09f      	b.n	80125c4 <_printf_i+0x1ec>
 8012484:	6820      	ldr	r0, [r4, #0]
 8012486:	682b      	ldr	r3, [r5, #0]
 8012488:	0607      	lsls	r7, r0, #24
 801248a:	f103 0104 	add.w	r1, r3, #4
 801248e:	6029      	str	r1, [r5, #0]
 8012490:	d501      	bpl.n	8012496 <_printf_i+0xbe>
 8012492:	681e      	ldr	r6, [r3, #0]
 8012494:	e003      	b.n	801249e <_printf_i+0xc6>
 8012496:	0646      	lsls	r6, r0, #25
 8012498:	d5fb      	bpl.n	8012492 <_printf_i+0xba>
 801249a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801249e:	2e00      	cmp	r6, #0
 80124a0:	da03      	bge.n	80124aa <_printf_i+0xd2>
 80124a2:	232d      	movs	r3, #45	; 0x2d
 80124a4:	4276      	negs	r6, r6
 80124a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124aa:	485a      	ldr	r0, [pc, #360]	; (8012614 <_printf_i+0x23c>)
 80124ac:	230a      	movs	r3, #10
 80124ae:	e012      	b.n	80124d6 <_printf_i+0xfe>
 80124b0:	682b      	ldr	r3, [r5, #0]
 80124b2:	6820      	ldr	r0, [r4, #0]
 80124b4:	1d19      	adds	r1, r3, #4
 80124b6:	6029      	str	r1, [r5, #0]
 80124b8:	0605      	lsls	r5, r0, #24
 80124ba:	d501      	bpl.n	80124c0 <_printf_i+0xe8>
 80124bc:	681e      	ldr	r6, [r3, #0]
 80124be:	e002      	b.n	80124c6 <_printf_i+0xee>
 80124c0:	0641      	lsls	r1, r0, #25
 80124c2:	d5fb      	bpl.n	80124bc <_printf_i+0xe4>
 80124c4:	881e      	ldrh	r6, [r3, #0]
 80124c6:	4853      	ldr	r0, [pc, #332]	; (8012614 <_printf_i+0x23c>)
 80124c8:	2f6f      	cmp	r7, #111	; 0x6f
 80124ca:	bf0c      	ite	eq
 80124cc:	2308      	moveq	r3, #8
 80124ce:	230a      	movne	r3, #10
 80124d0:	2100      	movs	r1, #0
 80124d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80124d6:	6865      	ldr	r5, [r4, #4]
 80124d8:	60a5      	str	r5, [r4, #8]
 80124da:	2d00      	cmp	r5, #0
 80124dc:	bfa2      	ittt	ge
 80124de:	6821      	ldrge	r1, [r4, #0]
 80124e0:	f021 0104 	bicge.w	r1, r1, #4
 80124e4:	6021      	strge	r1, [r4, #0]
 80124e6:	b90e      	cbnz	r6, 80124ec <_printf_i+0x114>
 80124e8:	2d00      	cmp	r5, #0
 80124ea:	d04b      	beq.n	8012584 <_printf_i+0x1ac>
 80124ec:	4615      	mov	r5, r2
 80124ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80124f2:	fb03 6711 	mls	r7, r3, r1, r6
 80124f6:	5dc7      	ldrb	r7, [r0, r7]
 80124f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80124fc:	4637      	mov	r7, r6
 80124fe:	42bb      	cmp	r3, r7
 8012500:	460e      	mov	r6, r1
 8012502:	d9f4      	bls.n	80124ee <_printf_i+0x116>
 8012504:	2b08      	cmp	r3, #8
 8012506:	d10b      	bne.n	8012520 <_printf_i+0x148>
 8012508:	6823      	ldr	r3, [r4, #0]
 801250a:	07de      	lsls	r6, r3, #31
 801250c:	d508      	bpl.n	8012520 <_printf_i+0x148>
 801250e:	6923      	ldr	r3, [r4, #16]
 8012510:	6861      	ldr	r1, [r4, #4]
 8012512:	4299      	cmp	r1, r3
 8012514:	bfde      	ittt	le
 8012516:	2330      	movle	r3, #48	; 0x30
 8012518:	f805 3c01 	strble.w	r3, [r5, #-1]
 801251c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012520:	1b52      	subs	r2, r2, r5
 8012522:	6122      	str	r2, [r4, #16]
 8012524:	f8cd a000 	str.w	sl, [sp]
 8012528:	464b      	mov	r3, r9
 801252a:	aa03      	add	r2, sp, #12
 801252c:	4621      	mov	r1, r4
 801252e:	4640      	mov	r0, r8
 8012530:	f7ff fee4 	bl	80122fc <_printf_common>
 8012534:	3001      	adds	r0, #1
 8012536:	d14a      	bne.n	80125ce <_printf_i+0x1f6>
 8012538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801253c:	b004      	add	sp, #16
 801253e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012542:	6823      	ldr	r3, [r4, #0]
 8012544:	f043 0320 	orr.w	r3, r3, #32
 8012548:	6023      	str	r3, [r4, #0]
 801254a:	4833      	ldr	r0, [pc, #204]	; (8012618 <_printf_i+0x240>)
 801254c:	2778      	movs	r7, #120	; 0x78
 801254e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012552:	6823      	ldr	r3, [r4, #0]
 8012554:	6829      	ldr	r1, [r5, #0]
 8012556:	061f      	lsls	r7, r3, #24
 8012558:	f851 6b04 	ldr.w	r6, [r1], #4
 801255c:	d402      	bmi.n	8012564 <_printf_i+0x18c>
 801255e:	065f      	lsls	r7, r3, #25
 8012560:	bf48      	it	mi
 8012562:	b2b6      	uxthmi	r6, r6
 8012564:	07df      	lsls	r7, r3, #31
 8012566:	bf48      	it	mi
 8012568:	f043 0320 	orrmi.w	r3, r3, #32
 801256c:	6029      	str	r1, [r5, #0]
 801256e:	bf48      	it	mi
 8012570:	6023      	strmi	r3, [r4, #0]
 8012572:	b91e      	cbnz	r6, 801257c <_printf_i+0x1a4>
 8012574:	6823      	ldr	r3, [r4, #0]
 8012576:	f023 0320 	bic.w	r3, r3, #32
 801257a:	6023      	str	r3, [r4, #0]
 801257c:	2310      	movs	r3, #16
 801257e:	e7a7      	b.n	80124d0 <_printf_i+0xf8>
 8012580:	4824      	ldr	r0, [pc, #144]	; (8012614 <_printf_i+0x23c>)
 8012582:	e7e4      	b.n	801254e <_printf_i+0x176>
 8012584:	4615      	mov	r5, r2
 8012586:	e7bd      	b.n	8012504 <_printf_i+0x12c>
 8012588:	682b      	ldr	r3, [r5, #0]
 801258a:	6826      	ldr	r6, [r4, #0]
 801258c:	6961      	ldr	r1, [r4, #20]
 801258e:	1d18      	adds	r0, r3, #4
 8012590:	6028      	str	r0, [r5, #0]
 8012592:	0635      	lsls	r5, r6, #24
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	d501      	bpl.n	801259c <_printf_i+0x1c4>
 8012598:	6019      	str	r1, [r3, #0]
 801259a:	e002      	b.n	80125a2 <_printf_i+0x1ca>
 801259c:	0670      	lsls	r0, r6, #25
 801259e:	d5fb      	bpl.n	8012598 <_printf_i+0x1c0>
 80125a0:	8019      	strh	r1, [r3, #0]
 80125a2:	2300      	movs	r3, #0
 80125a4:	6123      	str	r3, [r4, #16]
 80125a6:	4615      	mov	r5, r2
 80125a8:	e7bc      	b.n	8012524 <_printf_i+0x14c>
 80125aa:	682b      	ldr	r3, [r5, #0]
 80125ac:	1d1a      	adds	r2, r3, #4
 80125ae:	602a      	str	r2, [r5, #0]
 80125b0:	681d      	ldr	r5, [r3, #0]
 80125b2:	6862      	ldr	r2, [r4, #4]
 80125b4:	2100      	movs	r1, #0
 80125b6:	4628      	mov	r0, r5
 80125b8:	f7ed fe22 	bl	8000200 <memchr>
 80125bc:	b108      	cbz	r0, 80125c2 <_printf_i+0x1ea>
 80125be:	1b40      	subs	r0, r0, r5
 80125c0:	6060      	str	r0, [r4, #4]
 80125c2:	6863      	ldr	r3, [r4, #4]
 80125c4:	6123      	str	r3, [r4, #16]
 80125c6:	2300      	movs	r3, #0
 80125c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125cc:	e7aa      	b.n	8012524 <_printf_i+0x14c>
 80125ce:	6923      	ldr	r3, [r4, #16]
 80125d0:	462a      	mov	r2, r5
 80125d2:	4649      	mov	r1, r9
 80125d4:	4640      	mov	r0, r8
 80125d6:	47d0      	blx	sl
 80125d8:	3001      	adds	r0, #1
 80125da:	d0ad      	beq.n	8012538 <_printf_i+0x160>
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	079b      	lsls	r3, r3, #30
 80125e0:	d413      	bmi.n	801260a <_printf_i+0x232>
 80125e2:	68e0      	ldr	r0, [r4, #12]
 80125e4:	9b03      	ldr	r3, [sp, #12]
 80125e6:	4298      	cmp	r0, r3
 80125e8:	bfb8      	it	lt
 80125ea:	4618      	movlt	r0, r3
 80125ec:	e7a6      	b.n	801253c <_printf_i+0x164>
 80125ee:	2301      	movs	r3, #1
 80125f0:	4632      	mov	r2, r6
 80125f2:	4649      	mov	r1, r9
 80125f4:	4640      	mov	r0, r8
 80125f6:	47d0      	blx	sl
 80125f8:	3001      	adds	r0, #1
 80125fa:	d09d      	beq.n	8012538 <_printf_i+0x160>
 80125fc:	3501      	adds	r5, #1
 80125fe:	68e3      	ldr	r3, [r4, #12]
 8012600:	9903      	ldr	r1, [sp, #12]
 8012602:	1a5b      	subs	r3, r3, r1
 8012604:	42ab      	cmp	r3, r5
 8012606:	dcf2      	bgt.n	80125ee <_printf_i+0x216>
 8012608:	e7eb      	b.n	80125e2 <_printf_i+0x20a>
 801260a:	2500      	movs	r5, #0
 801260c:	f104 0619 	add.w	r6, r4, #25
 8012610:	e7f5      	b.n	80125fe <_printf_i+0x226>
 8012612:	bf00      	nop
 8012614:	0801372d 	.word	0x0801372d
 8012618:	0801373e 	.word	0x0801373e

0801261c <__sflush_r>:
 801261c:	898a      	ldrh	r2, [r1, #12]
 801261e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012622:	4605      	mov	r5, r0
 8012624:	0710      	lsls	r0, r2, #28
 8012626:	460c      	mov	r4, r1
 8012628:	d458      	bmi.n	80126dc <__sflush_r+0xc0>
 801262a:	684b      	ldr	r3, [r1, #4]
 801262c:	2b00      	cmp	r3, #0
 801262e:	dc05      	bgt.n	801263c <__sflush_r+0x20>
 8012630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012632:	2b00      	cmp	r3, #0
 8012634:	dc02      	bgt.n	801263c <__sflush_r+0x20>
 8012636:	2000      	movs	r0, #0
 8012638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801263c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801263e:	2e00      	cmp	r6, #0
 8012640:	d0f9      	beq.n	8012636 <__sflush_r+0x1a>
 8012642:	2300      	movs	r3, #0
 8012644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012648:	682f      	ldr	r7, [r5, #0]
 801264a:	6a21      	ldr	r1, [r4, #32]
 801264c:	602b      	str	r3, [r5, #0]
 801264e:	d032      	beq.n	80126b6 <__sflush_r+0x9a>
 8012650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012652:	89a3      	ldrh	r3, [r4, #12]
 8012654:	075a      	lsls	r2, r3, #29
 8012656:	d505      	bpl.n	8012664 <__sflush_r+0x48>
 8012658:	6863      	ldr	r3, [r4, #4]
 801265a:	1ac0      	subs	r0, r0, r3
 801265c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801265e:	b10b      	cbz	r3, 8012664 <__sflush_r+0x48>
 8012660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012662:	1ac0      	subs	r0, r0, r3
 8012664:	2300      	movs	r3, #0
 8012666:	4602      	mov	r2, r0
 8012668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801266a:	6a21      	ldr	r1, [r4, #32]
 801266c:	4628      	mov	r0, r5
 801266e:	47b0      	blx	r6
 8012670:	1c43      	adds	r3, r0, #1
 8012672:	89a3      	ldrh	r3, [r4, #12]
 8012674:	d106      	bne.n	8012684 <__sflush_r+0x68>
 8012676:	6829      	ldr	r1, [r5, #0]
 8012678:	291d      	cmp	r1, #29
 801267a:	d82b      	bhi.n	80126d4 <__sflush_r+0xb8>
 801267c:	4a29      	ldr	r2, [pc, #164]	; (8012724 <__sflush_r+0x108>)
 801267e:	410a      	asrs	r2, r1
 8012680:	07d6      	lsls	r6, r2, #31
 8012682:	d427      	bmi.n	80126d4 <__sflush_r+0xb8>
 8012684:	2200      	movs	r2, #0
 8012686:	6062      	str	r2, [r4, #4]
 8012688:	04d9      	lsls	r1, r3, #19
 801268a:	6922      	ldr	r2, [r4, #16]
 801268c:	6022      	str	r2, [r4, #0]
 801268e:	d504      	bpl.n	801269a <__sflush_r+0x7e>
 8012690:	1c42      	adds	r2, r0, #1
 8012692:	d101      	bne.n	8012698 <__sflush_r+0x7c>
 8012694:	682b      	ldr	r3, [r5, #0]
 8012696:	b903      	cbnz	r3, 801269a <__sflush_r+0x7e>
 8012698:	6560      	str	r0, [r4, #84]	; 0x54
 801269a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801269c:	602f      	str	r7, [r5, #0]
 801269e:	2900      	cmp	r1, #0
 80126a0:	d0c9      	beq.n	8012636 <__sflush_r+0x1a>
 80126a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126a6:	4299      	cmp	r1, r3
 80126a8:	d002      	beq.n	80126b0 <__sflush_r+0x94>
 80126aa:	4628      	mov	r0, r5
 80126ac:	f7ff fb36 	bl	8011d1c <_free_r>
 80126b0:	2000      	movs	r0, #0
 80126b2:	6360      	str	r0, [r4, #52]	; 0x34
 80126b4:	e7c0      	b.n	8012638 <__sflush_r+0x1c>
 80126b6:	2301      	movs	r3, #1
 80126b8:	4628      	mov	r0, r5
 80126ba:	47b0      	blx	r6
 80126bc:	1c41      	adds	r1, r0, #1
 80126be:	d1c8      	bne.n	8012652 <__sflush_r+0x36>
 80126c0:	682b      	ldr	r3, [r5, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d0c5      	beq.n	8012652 <__sflush_r+0x36>
 80126c6:	2b1d      	cmp	r3, #29
 80126c8:	d001      	beq.n	80126ce <__sflush_r+0xb2>
 80126ca:	2b16      	cmp	r3, #22
 80126cc:	d101      	bne.n	80126d2 <__sflush_r+0xb6>
 80126ce:	602f      	str	r7, [r5, #0]
 80126d0:	e7b1      	b.n	8012636 <__sflush_r+0x1a>
 80126d2:	89a3      	ldrh	r3, [r4, #12]
 80126d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126d8:	81a3      	strh	r3, [r4, #12]
 80126da:	e7ad      	b.n	8012638 <__sflush_r+0x1c>
 80126dc:	690f      	ldr	r7, [r1, #16]
 80126de:	2f00      	cmp	r7, #0
 80126e0:	d0a9      	beq.n	8012636 <__sflush_r+0x1a>
 80126e2:	0793      	lsls	r3, r2, #30
 80126e4:	680e      	ldr	r6, [r1, #0]
 80126e6:	bf08      	it	eq
 80126e8:	694b      	ldreq	r3, [r1, #20]
 80126ea:	600f      	str	r7, [r1, #0]
 80126ec:	bf18      	it	ne
 80126ee:	2300      	movne	r3, #0
 80126f0:	eba6 0807 	sub.w	r8, r6, r7
 80126f4:	608b      	str	r3, [r1, #8]
 80126f6:	f1b8 0f00 	cmp.w	r8, #0
 80126fa:	dd9c      	ble.n	8012636 <__sflush_r+0x1a>
 80126fc:	6a21      	ldr	r1, [r4, #32]
 80126fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012700:	4643      	mov	r3, r8
 8012702:	463a      	mov	r2, r7
 8012704:	4628      	mov	r0, r5
 8012706:	47b0      	blx	r6
 8012708:	2800      	cmp	r0, #0
 801270a:	dc06      	bgt.n	801271a <__sflush_r+0xfe>
 801270c:	89a3      	ldrh	r3, [r4, #12]
 801270e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012712:	81a3      	strh	r3, [r4, #12]
 8012714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012718:	e78e      	b.n	8012638 <__sflush_r+0x1c>
 801271a:	4407      	add	r7, r0
 801271c:	eba8 0800 	sub.w	r8, r8, r0
 8012720:	e7e9      	b.n	80126f6 <__sflush_r+0xda>
 8012722:	bf00      	nop
 8012724:	dfbffffe 	.word	0xdfbffffe

08012728 <_fflush_r>:
 8012728:	b538      	push	{r3, r4, r5, lr}
 801272a:	690b      	ldr	r3, [r1, #16]
 801272c:	4605      	mov	r5, r0
 801272e:	460c      	mov	r4, r1
 8012730:	b913      	cbnz	r3, 8012738 <_fflush_r+0x10>
 8012732:	2500      	movs	r5, #0
 8012734:	4628      	mov	r0, r5
 8012736:	bd38      	pop	{r3, r4, r5, pc}
 8012738:	b118      	cbz	r0, 8012742 <_fflush_r+0x1a>
 801273a:	6a03      	ldr	r3, [r0, #32]
 801273c:	b90b      	cbnz	r3, 8012742 <_fflush_r+0x1a>
 801273e:	f7ff f8f5 	bl	801192c <__sinit>
 8012742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d0f3      	beq.n	8012732 <_fflush_r+0xa>
 801274a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801274c:	07d0      	lsls	r0, r2, #31
 801274e:	d404      	bmi.n	801275a <_fflush_r+0x32>
 8012750:	0599      	lsls	r1, r3, #22
 8012752:	d402      	bmi.n	801275a <_fflush_r+0x32>
 8012754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012756:	f7ff fa9f 	bl	8011c98 <__retarget_lock_acquire_recursive>
 801275a:	4628      	mov	r0, r5
 801275c:	4621      	mov	r1, r4
 801275e:	f7ff ff5d 	bl	801261c <__sflush_r>
 8012762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012764:	07da      	lsls	r2, r3, #31
 8012766:	4605      	mov	r5, r0
 8012768:	d4e4      	bmi.n	8012734 <_fflush_r+0xc>
 801276a:	89a3      	ldrh	r3, [r4, #12]
 801276c:	059b      	lsls	r3, r3, #22
 801276e:	d4e1      	bmi.n	8012734 <_fflush_r+0xc>
 8012770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012772:	f7ff fa92 	bl	8011c9a <__retarget_lock_release_recursive>
 8012776:	e7dd      	b.n	8012734 <_fflush_r+0xc>

08012778 <fiprintf>:
 8012778:	b40e      	push	{r1, r2, r3}
 801277a:	b503      	push	{r0, r1, lr}
 801277c:	4601      	mov	r1, r0
 801277e:	ab03      	add	r3, sp, #12
 8012780:	4805      	ldr	r0, [pc, #20]	; (8012798 <fiprintf+0x20>)
 8012782:	f853 2b04 	ldr.w	r2, [r3], #4
 8012786:	6800      	ldr	r0, [r0, #0]
 8012788:	9301      	str	r3, [sp, #4]
 801278a:	f7ff fc9d 	bl	80120c8 <_vfiprintf_r>
 801278e:	b002      	add	sp, #8
 8012790:	f85d eb04 	ldr.w	lr, [sp], #4
 8012794:	b003      	add	sp, #12
 8012796:	4770      	bx	lr
 8012798:	2000010c 	.word	0x2000010c

0801279c <__swbuf_r>:
 801279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801279e:	460e      	mov	r6, r1
 80127a0:	4614      	mov	r4, r2
 80127a2:	4605      	mov	r5, r0
 80127a4:	b118      	cbz	r0, 80127ae <__swbuf_r+0x12>
 80127a6:	6a03      	ldr	r3, [r0, #32]
 80127a8:	b90b      	cbnz	r3, 80127ae <__swbuf_r+0x12>
 80127aa:	f7ff f8bf 	bl	801192c <__sinit>
 80127ae:	69a3      	ldr	r3, [r4, #24]
 80127b0:	60a3      	str	r3, [r4, #8]
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	071a      	lsls	r2, r3, #28
 80127b6:	d525      	bpl.n	8012804 <__swbuf_r+0x68>
 80127b8:	6923      	ldr	r3, [r4, #16]
 80127ba:	b31b      	cbz	r3, 8012804 <__swbuf_r+0x68>
 80127bc:	6823      	ldr	r3, [r4, #0]
 80127be:	6922      	ldr	r2, [r4, #16]
 80127c0:	1a98      	subs	r0, r3, r2
 80127c2:	6963      	ldr	r3, [r4, #20]
 80127c4:	b2f6      	uxtb	r6, r6
 80127c6:	4283      	cmp	r3, r0
 80127c8:	4637      	mov	r7, r6
 80127ca:	dc04      	bgt.n	80127d6 <__swbuf_r+0x3a>
 80127cc:	4621      	mov	r1, r4
 80127ce:	4628      	mov	r0, r5
 80127d0:	f7ff ffaa 	bl	8012728 <_fflush_r>
 80127d4:	b9e0      	cbnz	r0, 8012810 <__swbuf_r+0x74>
 80127d6:	68a3      	ldr	r3, [r4, #8]
 80127d8:	3b01      	subs	r3, #1
 80127da:	60a3      	str	r3, [r4, #8]
 80127dc:	6823      	ldr	r3, [r4, #0]
 80127de:	1c5a      	adds	r2, r3, #1
 80127e0:	6022      	str	r2, [r4, #0]
 80127e2:	701e      	strb	r6, [r3, #0]
 80127e4:	6962      	ldr	r2, [r4, #20]
 80127e6:	1c43      	adds	r3, r0, #1
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d004      	beq.n	80127f6 <__swbuf_r+0x5a>
 80127ec:	89a3      	ldrh	r3, [r4, #12]
 80127ee:	07db      	lsls	r3, r3, #31
 80127f0:	d506      	bpl.n	8012800 <__swbuf_r+0x64>
 80127f2:	2e0a      	cmp	r6, #10
 80127f4:	d104      	bne.n	8012800 <__swbuf_r+0x64>
 80127f6:	4621      	mov	r1, r4
 80127f8:	4628      	mov	r0, r5
 80127fa:	f7ff ff95 	bl	8012728 <_fflush_r>
 80127fe:	b938      	cbnz	r0, 8012810 <__swbuf_r+0x74>
 8012800:	4638      	mov	r0, r7
 8012802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012804:	4621      	mov	r1, r4
 8012806:	4628      	mov	r0, r5
 8012808:	f000 f806 	bl	8012818 <__swsetup_r>
 801280c:	2800      	cmp	r0, #0
 801280e:	d0d5      	beq.n	80127bc <__swbuf_r+0x20>
 8012810:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012814:	e7f4      	b.n	8012800 <__swbuf_r+0x64>
	...

08012818 <__swsetup_r>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	4b2a      	ldr	r3, [pc, #168]	; (80128c4 <__swsetup_r+0xac>)
 801281c:	4605      	mov	r5, r0
 801281e:	6818      	ldr	r0, [r3, #0]
 8012820:	460c      	mov	r4, r1
 8012822:	b118      	cbz	r0, 801282c <__swsetup_r+0x14>
 8012824:	6a03      	ldr	r3, [r0, #32]
 8012826:	b90b      	cbnz	r3, 801282c <__swsetup_r+0x14>
 8012828:	f7ff f880 	bl	801192c <__sinit>
 801282c:	89a3      	ldrh	r3, [r4, #12]
 801282e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012832:	0718      	lsls	r0, r3, #28
 8012834:	d422      	bmi.n	801287c <__swsetup_r+0x64>
 8012836:	06d9      	lsls	r1, r3, #27
 8012838:	d407      	bmi.n	801284a <__swsetup_r+0x32>
 801283a:	2309      	movs	r3, #9
 801283c:	602b      	str	r3, [r5, #0]
 801283e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012842:	81a3      	strh	r3, [r4, #12]
 8012844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012848:	e034      	b.n	80128b4 <__swsetup_r+0x9c>
 801284a:	0758      	lsls	r0, r3, #29
 801284c:	d512      	bpl.n	8012874 <__swsetup_r+0x5c>
 801284e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012850:	b141      	cbz	r1, 8012864 <__swsetup_r+0x4c>
 8012852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012856:	4299      	cmp	r1, r3
 8012858:	d002      	beq.n	8012860 <__swsetup_r+0x48>
 801285a:	4628      	mov	r0, r5
 801285c:	f7ff fa5e 	bl	8011d1c <_free_r>
 8012860:	2300      	movs	r3, #0
 8012862:	6363      	str	r3, [r4, #52]	; 0x34
 8012864:	89a3      	ldrh	r3, [r4, #12]
 8012866:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801286a:	81a3      	strh	r3, [r4, #12]
 801286c:	2300      	movs	r3, #0
 801286e:	6063      	str	r3, [r4, #4]
 8012870:	6923      	ldr	r3, [r4, #16]
 8012872:	6023      	str	r3, [r4, #0]
 8012874:	89a3      	ldrh	r3, [r4, #12]
 8012876:	f043 0308 	orr.w	r3, r3, #8
 801287a:	81a3      	strh	r3, [r4, #12]
 801287c:	6923      	ldr	r3, [r4, #16]
 801287e:	b94b      	cbnz	r3, 8012894 <__swsetup_r+0x7c>
 8012880:	89a3      	ldrh	r3, [r4, #12]
 8012882:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801288a:	d003      	beq.n	8012894 <__swsetup_r+0x7c>
 801288c:	4621      	mov	r1, r4
 801288e:	4628      	mov	r0, r5
 8012890:	f000 f861 	bl	8012956 <__smakebuf_r>
 8012894:	89a0      	ldrh	r0, [r4, #12]
 8012896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801289a:	f010 0301 	ands.w	r3, r0, #1
 801289e:	d00a      	beq.n	80128b6 <__swsetup_r+0x9e>
 80128a0:	2300      	movs	r3, #0
 80128a2:	60a3      	str	r3, [r4, #8]
 80128a4:	6963      	ldr	r3, [r4, #20]
 80128a6:	425b      	negs	r3, r3
 80128a8:	61a3      	str	r3, [r4, #24]
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	b943      	cbnz	r3, 80128c0 <__swsetup_r+0xa8>
 80128ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80128b2:	d1c4      	bne.n	801283e <__swsetup_r+0x26>
 80128b4:	bd38      	pop	{r3, r4, r5, pc}
 80128b6:	0781      	lsls	r1, r0, #30
 80128b8:	bf58      	it	pl
 80128ba:	6963      	ldrpl	r3, [r4, #20]
 80128bc:	60a3      	str	r3, [r4, #8]
 80128be:	e7f4      	b.n	80128aa <__swsetup_r+0x92>
 80128c0:	2000      	movs	r0, #0
 80128c2:	e7f7      	b.n	80128b4 <__swsetup_r+0x9c>
 80128c4:	2000010c 	.word	0x2000010c

080128c8 <memmove>:
 80128c8:	4288      	cmp	r0, r1
 80128ca:	b510      	push	{r4, lr}
 80128cc:	eb01 0402 	add.w	r4, r1, r2
 80128d0:	d902      	bls.n	80128d8 <memmove+0x10>
 80128d2:	4284      	cmp	r4, r0
 80128d4:	4623      	mov	r3, r4
 80128d6:	d807      	bhi.n	80128e8 <memmove+0x20>
 80128d8:	1e43      	subs	r3, r0, #1
 80128da:	42a1      	cmp	r1, r4
 80128dc:	d008      	beq.n	80128f0 <memmove+0x28>
 80128de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128e6:	e7f8      	b.n	80128da <memmove+0x12>
 80128e8:	4402      	add	r2, r0
 80128ea:	4601      	mov	r1, r0
 80128ec:	428a      	cmp	r2, r1
 80128ee:	d100      	bne.n	80128f2 <memmove+0x2a>
 80128f0:	bd10      	pop	{r4, pc}
 80128f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128fa:	e7f7      	b.n	80128ec <memmove+0x24>

080128fc <abort>:
 80128fc:	b508      	push	{r3, lr}
 80128fe:	2006      	movs	r0, #6
 8012900:	f000 f88e 	bl	8012a20 <raise>
 8012904:	2001      	movs	r0, #1
 8012906:	f7ee ff8d 	bl	8001824 <_exit>

0801290a <__swhatbuf_r>:
 801290a:	b570      	push	{r4, r5, r6, lr}
 801290c:	460c      	mov	r4, r1
 801290e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012912:	2900      	cmp	r1, #0
 8012914:	b096      	sub	sp, #88	; 0x58
 8012916:	4615      	mov	r5, r2
 8012918:	461e      	mov	r6, r3
 801291a:	da0d      	bge.n	8012938 <__swhatbuf_r+0x2e>
 801291c:	89a3      	ldrh	r3, [r4, #12]
 801291e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012922:	f04f 0100 	mov.w	r1, #0
 8012926:	bf0c      	ite	eq
 8012928:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801292c:	2340      	movne	r3, #64	; 0x40
 801292e:	2000      	movs	r0, #0
 8012930:	6031      	str	r1, [r6, #0]
 8012932:	602b      	str	r3, [r5, #0]
 8012934:	b016      	add	sp, #88	; 0x58
 8012936:	bd70      	pop	{r4, r5, r6, pc}
 8012938:	466a      	mov	r2, sp
 801293a:	f000 f879 	bl	8012a30 <_fstat_r>
 801293e:	2800      	cmp	r0, #0
 8012940:	dbec      	blt.n	801291c <__swhatbuf_r+0x12>
 8012942:	9901      	ldr	r1, [sp, #4]
 8012944:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012948:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801294c:	4259      	negs	r1, r3
 801294e:	4159      	adcs	r1, r3
 8012950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012954:	e7eb      	b.n	801292e <__swhatbuf_r+0x24>

08012956 <__smakebuf_r>:
 8012956:	898b      	ldrh	r3, [r1, #12]
 8012958:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801295a:	079d      	lsls	r5, r3, #30
 801295c:	4606      	mov	r6, r0
 801295e:	460c      	mov	r4, r1
 8012960:	d507      	bpl.n	8012972 <__smakebuf_r+0x1c>
 8012962:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012966:	6023      	str	r3, [r4, #0]
 8012968:	6123      	str	r3, [r4, #16]
 801296a:	2301      	movs	r3, #1
 801296c:	6163      	str	r3, [r4, #20]
 801296e:	b002      	add	sp, #8
 8012970:	bd70      	pop	{r4, r5, r6, pc}
 8012972:	ab01      	add	r3, sp, #4
 8012974:	466a      	mov	r2, sp
 8012976:	f7ff ffc8 	bl	801290a <__swhatbuf_r>
 801297a:	9900      	ldr	r1, [sp, #0]
 801297c:	4605      	mov	r5, r0
 801297e:	4630      	mov	r0, r6
 8012980:	f7fe fdae 	bl	80114e0 <_malloc_r>
 8012984:	b948      	cbnz	r0, 801299a <__smakebuf_r+0x44>
 8012986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801298a:	059a      	lsls	r2, r3, #22
 801298c:	d4ef      	bmi.n	801296e <__smakebuf_r+0x18>
 801298e:	f023 0303 	bic.w	r3, r3, #3
 8012992:	f043 0302 	orr.w	r3, r3, #2
 8012996:	81a3      	strh	r3, [r4, #12]
 8012998:	e7e3      	b.n	8012962 <__smakebuf_r+0xc>
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	6020      	str	r0, [r4, #0]
 801299e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129a2:	81a3      	strh	r3, [r4, #12]
 80129a4:	9b00      	ldr	r3, [sp, #0]
 80129a6:	6163      	str	r3, [r4, #20]
 80129a8:	9b01      	ldr	r3, [sp, #4]
 80129aa:	6120      	str	r0, [r4, #16]
 80129ac:	b15b      	cbz	r3, 80129c6 <__smakebuf_r+0x70>
 80129ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129b2:	4630      	mov	r0, r6
 80129b4:	f000 f84e 	bl	8012a54 <_isatty_r>
 80129b8:	b128      	cbz	r0, 80129c6 <__smakebuf_r+0x70>
 80129ba:	89a3      	ldrh	r3, [r4, #12]
 80129bc:	f023 0303 	bic.w	r3, r3, #3
 80129c0:	f043 0301 	orr.w	r3, r3, #1
 80129c4:	81a3      	strh	r3, [r4, #12]
 80129c6:	89a3      	ldrh	r3, [r4, #12]
 80129c8:	431d      	orrs	r5, r3
 80129ca:	81a5      	strh	r5, [r4, #12]
 80129cc:	e7cf      	b.n	801296e <__smakebuf_r+0x18>

080129ce <_raise_r>:
 80129ce:	291f      	cmp	r1, #31
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	4604      	mov	r4, r0
 80129d4:	460d      	mov	r5, r1
 80129d6:	d904      	bls.n	80129e2 <_raise_r+0x14>
 80129d8:	2316      	movs	r3, #22
 80129da:	6003      	str	r3, [r0, #0]
 80129dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129e0:	bd38      	pop	{r3, r4, r5, pc}
 80129e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80129e4:	b112      	cbz	r2, 80129ec <_raise_r+0x1e>
 80129e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129ea:	b94b      	cbnz	r3, 8012a00 <_raise_r+0x32>
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 f853 	bl	8012a98 <_getpid_r>
 80129f2:	462a      	mov	r2, r5
 80129f4:	4601      	mov	r1, r0
 80129f6:	4620      	mov	r0, r4
 80129f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129fc:	f000 b83a 	b.w	8012a74 <_kill_r>
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d00a      	beq.n	8012a1a <_raise_r+0x4c>
 8012a04:	1c59      	adds	r1, r3, #1
 8012a06:	d103      	bne.n	8012a10 <_raise_r+0x42>
 8012a08:	2316      	movs	r3, #22
 8012a0a:	6003      	str	r3, [r0, #0]
 8012a0c:	2001      	movs	r0, #1
 8012a0e:	e7e7      	b.n	80129e0 <_raise_r+0x12>
 8012a10:	2400      	movs	r4, #0
 8012a12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a16:	4628      	mov	r0, r5
 8012a18:	4798      	blx	r3
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	e7e0      	b.n	80129e0 <_raise_r+0x12>
	...

08012a20 <raise>:
 8012a20:	4b02      	ldr	r3, [pc, #8]	; (8012a2c <raise+0xc>)
 8012a22:	4601      	mov	r1, r0
 8012a24:	6818      	ldr	r0, [r3, #0]
 8012a26:	f7ff bfd2 	b.w	80129ce <_raise_r>
 8012a2a:	bf00      	nop
 8012a2c:	2000010c 	.word	0x2000010c

08012a30 <_fstat_r>:
 8012a30:	b538      	push	{r3, r4, r5, lr}
 8012a32:	4d07      	ldr	r5, [pc, #28]	; (8012a50 <_fstat_r+0x20>)
 8012a34:	2300      	movs	r3, #0
 8012a36:	4604      	mov	r4, r0
 8012a38:	4608      	mov	r0, r1
 8012a3a:	4611      	mov	r1, r2
 8012a3c:	602b      	str	r3, [r5, #0]
 8012a3e:	f7ee ff40 	bl	80018c2 <_fstat>
 8012a42:	1c43      	adds	r3, r0, #1
 8012a44:	d102      	bne.n	8012a4c <_fstat_r+0x1c>
 8012a46:	682b      	ldr	r3, [r5, #0]
 8012a48:	b103      	cbz	r3, 8012a4c <_fstat_r+0x1c>
 8012a4a:	6023      	str	r3, [r4, #0]
 8012a4c:	bd38      	pop	{r3, r4, r5, pc}
 8012a4e:	bf00      	nop
 8012a50:	2000ddc4 	.word	0x2000ddc4

08012a54 <_isatty_r>:
 8012a54:	b538      	push	{r3, r4, r5, lr}
 8012a56:	4d06      	ldr	r5, [pc, #24]	; (8012a70 <_isatty_r+0x1c>)
 8012a58:	2300      	movs	r3, #0
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	4608      	mov	r0, r1
 8012a5e:	602b      	str	r3, [r5, #0]
 8012a60:	f7ee ff3f 	bl	80018e2 <_isatty>
 8012a64:	1c43      	adds	r3, r0, #1
 8012a66:	d102      	bne.n	8012a6e <_isatty_r+0x1a>
 8012a68:	682b      	ldr	r3, [r5, #0]
 8012a6a:	b103      	cbz	r3, 8012a6e <_isatty_r+0x1a>
 8012a6c:	6023      	str	r3, [r4, #0]
 8012a6e:	bd38      	pop	{r3, r4, r5, pc}
 8012a70:	2000ddc4 	.word	0x2000ddc4

08012a74 <_kill_r>:
 8012a74:	b538      	push	{r3, r4, r5, lr}
 8012a76:	4d07      	ldr	r5, [pc, #28]	; (8012a94 <_kill_r+0x20>)
 8012a78:	2300      	movs	r3, #0
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	4608      	mov	r0, r1
 8012a7e:	4611      	mov	r1, r2
 8012a80:	602b      	str	r3, [r5, #0]
 8012a82:	f7ee febf 	bl	8001804 <_kill>
 8012a86:	1c43      	adds	r3, r0, #1
 8012a88:	d102      	bne.n	8012a90 <_kill_r+0x1c>
 8012a8a:	682b      	ldr	r3, [r5, #0]
 8012a8c:	b103      	cbz	r3, 8012a90 <_kill_r+0x1c>
 8012a8e:	6023      	str	r3, [r4, #0]
 8012a90:	bd38      	pop	{r3, r4, r5, pc}
 8012a92:	bf00      	nop
 8012a94:	2000ddc4 	.word	0x2000ddc4

08012a98 <_getpid_r>:
 8012a98:	f7ee beac 	b.w	80017f4 <_getpid>

08012a9c <_init>:
 8012a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a9e:	bf00      	nop
 8012aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aa2:	bc08      	pop	{r3}
 8012aa4:	469e      	mov	lr, r3
 8012aa6:	4770      	bx	lr

08012aa8 <_fini>:
 8012aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aaa:	bf00      	nop
 8012aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aae:	bc08      	pop	{r3}
 8012ab0:	469e      	mov	lr, r3
 8012ab2:	4770      	bx	lr
