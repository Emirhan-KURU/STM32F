
F407_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018f34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  080190c8  080190c8  000290c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e44  08019e44  00030130  2**0
                  CONTENTS
  4 .ARM          00000008  08019e44  08019e44  00029e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e4c  08019e4c  00030130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019e4c  08019e4c  00029e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019e54  08019e54  00029e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08019e58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030130  2**0
                  CONTENTS
 10 .bss          0000e41c  20000130  20000130  00030130  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000e54c  2000e54c  00030130  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY
 13 .comment      00000076  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027cc2  00000000  00000000  000301d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006056  00000000  00000000  00057e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001eb0  00000000  00000000  0005def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001792  00000000  00000000  0005fda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000c54e  00000000  00000000  00061532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028e4b  00000000  00000000  0006da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000efef6  00000000  00000000  000968cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008e28  00000000  00000000  001867c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0018f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000130 	.word	0x20000130
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080190ac 	.word	0x080190ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000134 	.word	0x20000134
 80001cc:	080190ac 	.word	0x080190ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bb 	b.w	8000638 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b970 	b.w	8000638 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	460d      	mov	r5, r1
 8000378:	4604      	mov	r4, r0
 800037a:	460f      	mov	r7, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4694      	mov	ip, r2
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0xe2>
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	b143      	cbz	r3, 800039e <__udivmoddi4+0x2e>
 800038c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000390:	f1c3 0220 	rsb	r2, r3, #32
 8000394:	409f      	lsls	r7, r3
 8000396:	fa20 f202 	lsr.w	r2, r0, r2
 800039a:	4317      	orrs	r7, r2
 800039c:	409c      	lsls	r4, r3
 800039e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a2:	fa1f f58c 	uxth.w	r5, ip
 80003a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003aa:	0c22      	lsrs	r2, r4, #16
 80003ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80003b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003b4:	fb01 f005 	mul.w	r0, r1, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003c4:	f080 811c 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003c8:	4290      	cmp	r0, r2
 80003ca:	f240 8119 	bls.w	8000600 <__udivmoddi4+0x290>
 80003ce:	3902      	subs	r1, #2
 80003d0:	4462      	add	r2, ip
 80003d2:	1a12      	subs	r2, r2, r0
 80003d4:	b2a4      	uxth	r4, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e2:	fb00 f505 	mul.w	r5, r0, r5
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d90a      	bls.n	8000400 <__udivmoddi4+0x90>
 80003ea:	eb1c 0404 	adds.w	r4, ip, r4
 80003ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f2:	f080 8107 	bcs.w	8000604 <__udivmoddi4+0x294>
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	f240 8104 	bls.w	8000604 <__udivmoddi4+0x294>
 80003fc:	4464      	add	r4, ip
 80003fe:	3802      	subs	r0, #2
 8000400:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	2100      	movs	r1, #0
 8000408:	b11e      	cbz	r6, 8000412 <__udivmoddi4+0xa2>
 800040a:	40dc      	lsrs	r4, r3
 800040c:	2300      	movs	r3, #0
 800040e:	e9c6 4300 	strd	r4, r3, [r6]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0xbc>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80ed 	beq.w	80005fa <__udivmoddi4+0x28a>
 8000420:	2100      	movs	r1, #0
 8000422:	e9c6 0500 	strd	r0, r5, [r6]
 8000426:	4608      	mov	r0, r1
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	fab3 f183 	clz	r1, r3
 8000430:	2900      	cmp	r1, #0
 8000432:	d149      	bne.n	80004c8 <__udivmoddi4+0x158>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d302      	bcc.n	800043e <__udivmoddi4+0xce>
 8000438:	4282      	cmp	r2, r0
 800043a:	f200 80f8 	bhi.w	800062e <__udivmoddi4+0x2be>
 800043e:	1a84      	subs	r4, r0, r2
 8000440:	eb65 0203 	sbc.w	r2, r5, r3
 8000444:	2001      	movs	r0, #1
 8000446:	4617      	mov	r7, r2
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0e2      	beq.n	8000412 <__udivmoddi4+0xa2>
 800044c:	e9c6 4700 	strd	r4, r7, [r6]
 8000450:	e7df      	b.n	8000412 <__udivmoddi4+0xa2>
 8000452:	b902      	cbnz	r2, 8000456 <__udivmoddi4+0xe6>
 8000454:	deff      	udf	#255	; 0xff
 8000456:	fab2 f382 	clz	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8090 	bne.w	8000580 <__udivmoddi4+0x210>
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000466:	fa1f fe8c 	uxth.w	lr, ip
 800046a:	2101      	movs	r1, #1
 800046c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000470:	fb07 2015 	mls	r0, r7, r5, r2
 8000474:	0c22      	lsrs	r2, r4, #16
 8000476:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800047a:	fb0e f005 	mul.w	r0, lr, r5
 800047e:	4290      	cmp	r0, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x124>
 8000482:	eb1c 0202 	adds.w	r2, ip, r2
 8000486:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4290      	cmp	r0, r2
 800048e:	f200 80cb 	bhi.w	8000628 <__udivmoddi4+0x2b8>
 8000492:	4645      	mov	r5, r8
 8000494:	1a12      	subs	r2, r2, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb2 f0f7 	udiv	r0, r2, r7
 800049c:	fb07 2210 	mls	r2, r7, r0, r2
 80004a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004a4:	fb0e fe00 	mul.w	lr, lr, r0
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x14e>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x14c>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f200 80bb 	bhi.w	8000632 <__udivmoddi4+0x2c2>
 80004bc:	4610      	mov	r0, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004c6:	e79f      	b.n	8000408 <__udivmoddi4+0x98>
 80004c8:	f1c1 0720 	rsb	r7, r1, #32
 80004cc:	408b      	lsls	r3, r1
 80004ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80004d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004d6:	fa05 f401 	lsl.w	r4, r5, r1
 80004da:	fa20 f307 	lsr.w	r3, r0, r7
 80004de:	40fd      	lsrs	r5, r7
 80004e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	fb09 5518 	mls	r5, r9, r8, r5
 80004f2:	0c1c      	lsrs	r4, r3, #16
 80004f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004f8:	fb08 f50e 	mul.w	r5, r8, lr
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000502:	fa00 f001 	lsl.w	r0, r0, r1
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000510:	f080 8088 	bcs.w	8000624 <__udivmoddi4+0x2b4>
 8000514:	42a5      	cmp	r5, r4
 8000516:	f240 8085 	bls.w	8000624 <__udivmoddi4+0x2b4>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	4464      	add	r4, ip
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	b29d      	uxth	r5, r3
 8000524:	fbb4 f3f9 	udiv	r3, r4, r9
 8000528:	fb09 4413 	mls	r4, r9, r3, r4
 800052c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000530:	fb03 fe0e 	mul.w	lr, r3, lr
 8000534:	45a6      	cmp	lr, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000540:	d26c      	bcs.n	800061c <__udivmoddi4+0x2ac>
 8000542:	45a6      	cmp	lr, r4
 8000544:	d96a      	bls.n	800061c <__udivmoddi4+0x2ac>
 8000546:	3b02      	subs	r3, #2
 8000548:	4464      	add	r4, ip
 800054a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054e:	fba3 9502 	umull	r9, r5, r3, r2
 8000552:	eba4 040e 	sub.w	r4, r4, lr
 8000556:	42ac      	cmp	r4, r5
 8000558:	46c8      	mov	r8, r9
 800055a:	46ae      	mov	lr, r5
 800055c:	d356      	bcc.n	800060c <__udivmoddi4+0x29c>
 800055e:	d053      	beq.n	8000608 <__udivmoddi4+0x298>
 8000560:	b156      	cbz	r6, 8000578 <__udivmoddi4+0x208>
 8000562:	ebb0 0208 	subs.w	r2, r0, r8
 8000566:	eb64 040e 	sbc.w	r4, r4, lr
 800056a:	fa04 f707 	lsl.w	r7, r4, r7
 800056e:	40ca      	lsrs	r2, r1
 8000570:	40cc      	lsrs	r4, r1
 8000572:	4317      	orrs	r7, r2
 8000574:	e9c6 7400 	strd	r7, r4, [r6]
 8000578:	4618      	mov	r0, r3
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	f1c3 0120 	rsb	r1, r3, #32
 8000584:	fa02 fc03 	lsl.w	ip, r2, r3
 8000588:	fa20 f201 	lsr.w	r2, r0, r1
 800058c:	fa25 f101 	lsr.w	r1, r5, r1
 8000590:	409d      	lsls	r5, r3
 8000592:	432a      	orrs	r2, r5
 8000594:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a0:	fb07 1510 	mls	r5, r7, r0, r1
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005aa:	fb00 f50e 	mul.w	r5, r0, lr
 80005ae:	428d      	cmp	r5, r1
 80005b0:	fa04 f403 	lsl.w	r4, r4, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x258>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005be:	d22f      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d92d      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005c4:	3802      	subs	r0, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1b49      	subs	r1, r1, r5
 80005ca:	b292      	uxth	r2, r2
 80005cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005d0:	fb07 1115 	mls	r1, r7, r5, r1
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	fb05 f10e 	mul.w	r1, r5, lr
 80005dc:	4291      	cmp	r1, r2
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x282>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005e8:	d216      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 80005ea:	4291      	cmp	r1, r2
 80005ec:	d914      	bls.n	8000618 <__udivmoddi4+0x2a8>
 80005ee:	3d02      	subs	r5, #2
 80005f0:	4462      	add	r2, ip
 80005f2:	1a52      	subs	r2, r2, r1
 80005f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005f8:	e738      	b.n	800046c <__udivmoddi4+0xfc>
 80005fa:	4631      	mov	r1, r6
 80005fc:	4630      	mov	r0, r6
 80005fe:	e708      	b.n	8000412 <__udivmoddi4+0xa2>
 8000600:	4639      	mov	r1, r7
 8000602:	e6e6      	b.n	80003d2 <__udivmoddi4+0x62>
 8000604:	4610      	mov	r0, r2
 8000606:	e6fb      	b.n	8000400 <__udivmoddi4+0x90>
 8000608:	4548      	cmp	r0, r9
 800060a:	d2a9      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 800060c:	ebb9 0802 	subs.w	r8, r9, r2
 8000610:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000614:	3b01      	subs	r3, #1
 8000616:	e7a3      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000618:	4645      	mov	r5, r8
 800061a:	e7ea      	b.n	80005f2 <__udivmoddi4+0x282>
 800061c:	462b      	mov	r3, r5
 800061e:	e794      	b.n	800054a <__udivmoddi4+0x1da>
 8000620:	4640      	mov	r0, r8
 8000622:	e7d1      	b.n	80005c8 <__udivmoddi4+0x258>
 8000624:	46d0      	mov	r8, sl
 8000626:	e77b      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000628:	3d02      	subs	r5, #2
 800062a:	4462      	add	r2, ip
 800062c:	e732      	b.n	8000494 <__udivmoddi4+0x124>
 800062e:	4608      	mov	r0, r1
 8000630:	e70a      	b.n	8000448 <__udivmoddi4+0xd8>
 8000632:	4464      	add	r4, ip
 8000634:	3802      	subs	r0, #2
 8000636:	e742      	b.n	80004be <__udivmoddi4+0x14e>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000648:	f00b ff1c 	bl	800c484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800064c:	4b58      	ldr	r3, [pc, #352]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000654:	f000 f980 	bl	8000958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000658:	4b56      	ldr	r3, [pc, #344]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	f040 808e 	bne.w	8000782 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01d      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800066c:	2208      	movs	r2, #8
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	2b00      	cmp	r3, #0
 800067c:	d014      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 0307 	bic.w	r3, r3, #7
 8000684:	3308      	adds	r3, #8
 8000686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00a      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d069      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d864      	bhi.n	8000782 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c2:	e004      	b.n	80006ce <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d903      	bls.n	80006e0 <pvPortMallocMicroROS+0xa4>
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f1      	bne.n	80006c4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d04b      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2208      	movs	r2, #8
 80006f0:	4413      	add	r3, r2
 80006f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1ad2      	subs	r2, r2, r3
 8000704:	2308      	movs	r3, #8
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	429a      	cmp	r2, r3
 800070a:	d91f      	bls.n	800074c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800070c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00a      	beq.n	8000734 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f3bf 8f6f 	isb	sy
 800072a:	f3bf 8f4f 	dsb	sy
 800072e:	613b      	str	r3, [r7, #16]
}
 8000730:	bf00      	nop
 8000732:	e7fe      	b.n	8000732 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000746:	69b8      	ldr	r0, [r7, #24]
 8000748:	f000 f968 	bl	8000a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d203      	bcs.n	800076e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 800076c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	431a      	orrs	r2, r3
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000782:	f00b fe8d 	bl	800c4a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	60fb      	str	r3, [r7, #12]
}
 80007a2:	bf00      	nop
 80007a4:	e7fe      	b.n	80007a4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007a6:	69fb      	ldr	r3, [r7, #28]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20003d54 	.word	0x20003d54
 80007b4:	20003d60 	.word	0x20003d60
 80007b8:	20003d58 	.word	0x20003d58
 80007bc:	20003d4c 	.word	0x20003d4c
 80007c0:	20003d5c 	.word	0x20003d5c

080007c4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d048      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d6:	2308      	movs	r3, #8
 80007d8:	425b      	negs	r3, r3
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <vPortFreeMicroROS+0xac>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <vPortFreeMicroROS+0x44>
	__asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	60fb      	str	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00a      	beq.n	8000826 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	f3bf 8f6f 	isb	sy
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	60bb      	str	r3, [r7, #8]
}
 8000822:	bf00      	nop
 8000824:	e7fe      	b.n	8000824 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <vPortFreeMicroROS+0xac>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <vPortFreeMicroROS+0xac>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800084c:	f00b fe1a 	bl	800c484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <vPortFreeMicroROS+0xb0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <vPortFreeMicroROS+0xb0>)
 800085c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f000 f8dc 	bl	8000a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000864:	f00b fe1c 	bl	800c4a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20003d60 	.word	0x20003d60
 8000874:	20003d58 	.word	0x20003d58

08000878 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000884:	2308      	movs	r3, #8
 8000886:	425b      	negs	r3, r3
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <getBlockSize+0x38>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	return count;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20003d60 	.word	0x20003d60

080008b4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008be:	f00b fde1 	bl	800c484 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff feba 	bl	800063c <pvPortMallocMicroROS>
 80008c8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffce 	bl	8000878 <getBlockSize>
 80008dc:	4603      	mov	r3, r0
 80008de:	2208      	movs	r2, #8
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d201      	bcs.n	80008f0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f017 fcfb 	bl	80182f0 <memcpy>

		vPortFreeMicroROS(pv);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff62 	bl	80007c4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000900:	f00b fdce 	bl	800c4a0 <xTaskResumeAll>

	return newmem;
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000918:	f00b fdb4 	bl	800c484 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff fe88 	bl	800063c <pvPortMallocMicroROS>
 800092c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000932:	e004      	b.n	800093e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	617a      	str	r2, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000948:	f00b fdaa 	bl	800c4a0 <xTaskResumeAll>
  	return mem;
 800094c:	68fb      	ldr	r3, [r7, #12]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <prvHeapInit+0xac>)
 8000966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3307      	adds	r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <prvHeapInit+0xac>)
 8000988:	4413      	add	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <prvHeapInit+0xb0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <prvHeapInit+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009a4:	2208      	movs	r2, #8
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <prvHeapInit+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <prvHeapInit+0xb4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <prvHeapInit+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <prvHeapInit+0xb4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <prvHeapInit+0xb8>)
 80009e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <prvHeapInit+0xbc>)
 80009ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <prvHeapInit+0xc0>)
 80009f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	2000014c 	.word	0x2000014c
 8000a08:	20003d4c 	.word	0x20003d4c
 8000a0c:	20003d54 	.word	0x20003d54
 8000a10:	20003d5c 	.word	0x20003d5c
 8000a14:	20003d58 	.word	0x20003d58
 8000a18:	20003d60 	.word	0x20003d60

08000a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <prvInsertBlockIntoFreeList+0xac>)
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <prvInsertBlockIntoFreeList+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d108      	bne.n	8000a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	441a      	add	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d118      	bne.n	8000aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00d      	beq.n	8000a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e008      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e003      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20003d4c 	.word	0x20003d4c
 8000acc:	20003d54 	.word	0x20003d54

08000ad0 <Read_ADC>:
  .stack_size = 3000 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* USER CODE BEGIN PV */
int16_t Read_ADC()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <Read_ADC+0x30>)
 8000ad6:	f001 fa71 	bl	8001fbc <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000)==HAL_OK)
 8000ada:	490a      	ldr	r1, [pc, #40]	; (8000b04 <Read_ADC+0x34>)
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <Read_ADC+0x30>)
 8000ade:	f001 fb3f 	bl	8002160 <HAL_ADC_PollForConversion>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d106      	bne.n	8000af6 <Read_ADC+0x26>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <Read_ADC+0x30>)
 8000aea:	f001 fbc4 	bl	8002276 <HAL_ADC_GetValue>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <Read_ADC+0x38>)
 8000af4:	801a      	strh	r2, [r3, #0]
	return adc_value;
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <Read_ADC+0x38>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b21b      	sxth	r3, r3
	HAL_ADC_Stop(&hadc1);
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20003d68 	.word	0x20003d68
 8000b04:	000186a0 	.word	0x000186a0
 8000b08:	20003d64 	.word	0x20003d64

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f001 f97a 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f822 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 f9da 	bl	8000ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1c:	f000 f99a 	bl	8000e54 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b20:	f000 f8da 	bl	8000cd8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b24:	f000 f906 	bl	8000d34 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b28:	f000 f934 	bl	8000d94 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 f968 	bl	8000e00 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b30:	f000 f87e 	bl	8000c30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b34:	f00a f9b4 	bl	800aea0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <main+0x44>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <main+0x48>)
 8000b3e:	f00a f9f9 	bl	800af34 <osThreadNew>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <main+0x4c>)
 8000b46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b48:	f00a f9ce 	bl	800aee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <main+0x40>
 8000b4e:	bf00      	nop
 8000b50:	0801918c 	.word	0x0801918c
 8000b54:	080010cd 	.word	0x080010cd
 8000b58:	20004008 	.word	0x20004008

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2230      	movs	r2, #48	; 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f017 faf8 	bl	8018160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 fe2a 	bl	800583c <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bee:	f000 fb2f 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2105      	movs	r1, #5
 8000c10:	4618      	mov	r0, r3
 8000c12:	f005 f88b 	bl	8005d2c <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c1c:	f000 fb18 	bl	8001250 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3750      	adds	r7, #80	; 0x50
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <MX_ADC1_Init+0xa0>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <MX_ADC1_Init+0xa4>)
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000c94:	f001 f94e 	bl	8001f34 <HAL_ADC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000c9e:	f000 fad7 	bl	8001250 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <MX_ADC1_Init+0x9c>)
 8000cb4:	f001 faec 	bl	8002290 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cbe:	f000 fac7 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20003d68 	.word	0x20003d68
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	0f000001 	.word	0x0f000001

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_I2C1_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x58>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d16:	f003 ffad 	bl	8004c74 <HAL_I2C_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d20:	f000 fa96 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20003e10 	.word	0x20003e10
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	000186a0 	.word	0x000186a0

08000d34 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <MX_I2S3_Init+0x58>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <MX_I2S3_Init+0x5c>)
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_I2S3_Init+0x54>)
 8000d74:	f004 f8c2 	bl	8004efc <HAL_I2S_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d7e:	f000 fa67 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20003e64 	.word	0x20003e64
 8000d8c:	40003c00 	.word	0x40003c00
 8000d90:	00017700 	.word	0x00017700

08000d94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <MX_SPI1_Init+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000de0:	220a      	movs	r2, #10
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000de6:	f005 fb01 	bl	80063ec <HAL_SPI_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000df0:	f000 fa2e 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20003eac 	.word	0x20003eac
 8000dfc:	40013000 	.word	0x40013000

08000e00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_USART2_UART_Init+0x50>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e38:	f005 fb61 	bl	80064fe <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e42:	f000 fa05 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20003f04 	.word	0x20003f04
 8000e50:	40004400 	.word	0x40004400

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_DMA_Init+0x78>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <MX_DMA_Init+0x78>)
 8000e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_DMA_Init+0x78>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_DMA_Init+0x78>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_DMA_Init+0x78>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_DMA_Init+0x78>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	2010      	movs	r0, #16
 8000e98:	f001 fcf3 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e9c:	2010      	movs	r0, #16
 8000e9e:	f001 fd0c 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	2011      	movs	r0, #17
 8000ea8:	f001 fceb 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000eac:	2011      	movs	r0, #17
 8000eae:	f001 fd04 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	2038      	movs	r0, #56	; 0x38
 8000eb8:	f001 fce3 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ebc:	2038      	movs	r0, #56	; 0x38
 8000ebe:	f001 fcfc 	bl	80028ba <HAL_NVIC_EnableIRQ>

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	4b72      	ldr	r3, [pc, #456]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a71      	ldr	r2, [pc, #452]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b6f      	ldr	r3, [pc, #444]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b6b      	ldr	r3, [pc, #428]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a6a      	ldr	r2, [pc, #424]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b68      	ldr	r3, [pc, #416]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a63      	ldr	r2, [pc, #396]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a5c      	ldr	r2, [pc, #368]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b5a      	ldr	r3, [pc, #360]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a55      	ldr	r2, [pc, #340]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <MX_GPIO_Init+0x1e4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	4849      	ldr	r0, [pc, #292]	; (80010b8 <MX_GPIO_Init+0x1e8>)
 8000f94:	f002 fa4a 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4847      	ldr	r0, [pc, #284]	; (80010bc <MX_GPIO_Init+0x1ec>)
 8000f9e:	f002 fa45 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000fa8:	4845      	ldr	r0, [pc, #276]	; (80010c0 <MX_GPIO_Init+0x1f0>)
 8000faa:	f002 fa3f 	bl	800342c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	483c      	ldr	r0, [pc, #240]	; (80010b8 <MX_GPIO_Init+0x1e8>)
 8000fc6:	f002 f895 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4836      	ldr	r0, [pc, #216]	; (80010bc <MX_GPIO_Init+0x1ec>)
 8000fe2:	f002 f887 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	482e      	ldr	r0, [pc, #184]	; (80010bc <MX_GPIO_Init+0x1ec>)
 8001002:	f002 f877 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800100a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	482a      	ldr	r0, [pc, #168]	; (80010c4 <MX_GPIO_Init+0x1f4>)
 800101c:	f002 f86a 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001020:	2304      	movs	r3, #4
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4825      	ldr	r0, [pc, #148]	; (80010c8 <MX_GPIO_Init+0x1f8>)
 8001034:	f002 f85e 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104a:	2305      	movs	r3, #5
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	481c      	ldr	r0, [pc, #112]	; (80010c8 <MX_GPIO_Init+0x1f8>)
 8001056:	f002 f84d 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800105a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800105e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <MX_GPIO_Init+0x1f0>)
 8001074:	f002 f83e 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001078:	2320      	movs	r3, #32
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <MX_GPIO_Init+0x1f0>)
 800108c:	f002 f832 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001090:	2302      	movs	r3, #2
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001094:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_GPIO_Init+0x1e8>)
 80010a6:	f002 f825 	bl	80030f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400

080010cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b0cc      	sub	sp, #304	; 0x130
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80010d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010da:	6018      	str	r0, [r3, #0]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80010dc:	f00c fe3e 	bl	800dd5c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

    // micro-ROS configuration

    rmw_uros_set_custom_transport(
 80010e0:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <StartDefaultTask+0x148>)
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <StartDefaultTask+0x14c>)
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4b4c      	ldr	r3, [pc, #304]	; (800121c <StartDefaultTask+0x150>)
 80010ea:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <StartDefaultTask+0x154>)
 80010ec:	494d      	ldr	r1, [pc, #308]	; (8001224 <StartDefaultTask+0x158>)
 80010ee:	2001      	movs	r0, #1
 80010f0:	f00d fcc2 	bl	800ea78 <rmw_uros_set_custom_transport>
      cubemx_transport_open,
      cubemx_transport_close,
      cubemx_transport_write,
      cubemx_transport_read);

    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80010f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00d fbef 	bl	800e8dc <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate = microros_allocate;
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <StartDefaultTask+0x15c>)
 8001100:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    freeRTOS_allocator.deallocate = microros_deallocate;
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <StartDefaultTask+0x160>)
 8001106:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    freeRTOS_allocator.reallocate = microros_reallocate;
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <StartDefaultTask+0x164>)
 800110c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <StartDefaultTask+0x168>)
 8001112:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800111a:	4618      	mov	r0, r3
 800111c:	f00d fbec 	bl	800e8f8 <rcutils_set_default_allocator>
 8001120:	4603      	mov	r3, r0
 8001122:	f083 0301 	eor.w	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d004      	beq.n	8001136 <StartDefaultTask+0x6a>
        printf("Error on default allocators (line %d)\n", __LINE__);
 800112c:	f240 215f 	movw	r1, #607	; 0x25f
 8001130:	4841      	ldr	r0, [pc, #260]	; (8001238 <StartDefaultTask+0x16c>)
 8001132:	f016 ff39 	bl	8017fa8 <iprintf>
    rclc_support_t support;
    rcl_allocator_t allocator;
    rcl_node_t node;
    rclc_executor_t executor;

    const char * topic_name = "test_topic";
 8001136:	4b41      	ldr	r3, [pc, #260]	; (800123c <StartDefaultTask+0x170>)
 8001138:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    const char * topic_name2 = "test_topic2";
 800113c:	4b40      	ldr	r3, [pc, #256]	; (8001240 <StartDefaultTask+0x174>)
 800113e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    allocator = rcl_get_default_allocator();
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f00d fbf5 	bl	800e934 <rcutils_get_default_allocator>
 800114a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800114e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001152:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001156:	461d      	mov	r5, r3
 8001158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	6023      	str	r3, [r4, #0]

    rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001160:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001164:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001168:	f107 0020 	add.w	r0, r7, #32
 800116c:	2202      	movs	r2, #2
 800116e:	f00d fa2b 	bl	800e5c8 <rclc_executor_init>

    //create init_options
    rclc_support_init(&support, 0, NULL, &allocator);
 8001172:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001176:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	f00d fab7 	bl	800e6f0 <rclc_support_init>

    // create node
    rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001182:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001186:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <StartDefaultTask+0x178>)
 800118c:	492e      	ldr	r1, [pc, #184]	; (8001248 <StartDefaultTask+0x17c>)
 800118e:	f00d faf9 	bl	800e784 <rclc_node_init_default>

    rclc_subscription_init_default(
 8001192:	f00e f8f7 	bl	800f384 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001196:	4602      	mov	r2, r0
 8001198:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800119c:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80011a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011a4:	f00d fb5e 	bl	800e864 <rclc_subscription_init_default>
      &subscriber1,
  	&node,
  	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
  	topic_name);

    rclc_subscription_init_default(
 80011a8:	f00e f8ec 	bl	800f384 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80011b2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80011b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011ba:	f00d fb53 	bl	800e864 <rclc_subscription_init_default>
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
      topic_name2);

    // create publisher for the result
    rclc_publisher_init_default(
 80011be:	f00e f8e1 	bl	800f384 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80011c2:	4602      	mov	r2, r0
 80011c4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80011c8:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80011cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011d0:	f00d fb14 	bl	800e7fc <rclc_publisher_init_default>
      topic_name);

    /*msg_input1.data = 0;
    msg_input2.data = 0;
    msg_result.data = 0;*/
    msg.data=0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
*/
  	    // Calculate the sum
  	    //msg_result.data = msg_input1.data + msg_input2.data;

  	    // Publish the result
  	    rcl_ret_t ret_publish = rcl_publish(&publisher, &msg, NULL);
 80011da:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80011de:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011e2:	2200      	movs	r2, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00d f985 	bl	800e4f4 <rcl_publish>
 80011ea:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  	    if (ret_publish != RCL_RET_OK)
 80011ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <StartDefaultTask+0x134>
  	    {
  	      printf("Error publishing result (line %d)\n", __LINE__);
 80011f6:	f240 21a9 	movw	r1, #681	; 0x2a9
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <StartDefaultTask+0x180>)
 80011fc:	f016 fed4 	bl	8017fa8 <iprintf>
  	    }
  	    msg.data=Read_ADC();
 8001200:	f7ff fc66 	bl	8000ad0 <Read_ADC>
 8001204:	4603      	mov	r3, r0
 8001206:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  	    osDelay(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f009 ff24 	bl	800b058 <osDelay>
    {
 8001210:	e7e3      	b.n	80011da <StartDefaultTask+0x10e>
 8001212:	bf00      	nop
 8001214:	08001d0d 	.word	0x08001d0d
 8001218:	08001ca5 	.word	0x08001ca5
 800121c:	08001c85 	.word	0x08001c85
 8001220:	08001c59 	.word	0x08001c59
 8001224:	20003f04 	.word	0x20003f04
 8001228:	0800125d 	.word	0x0800125d
 800122c:	080012a1 	.word	0x080012a1
 8001230:	080012d9 	.word	0x080012d9
 8001234:	08001345 	.word	0x08001345
 8001238:	080190e4 	.word	0x080190e4
 800123c:	0801910c 	.word	0x0801910c
 8001240:	08019118 	.word	0x08019118
 8001244:	08019124 	.word	0x08019124
 8001248:	08019128 	.word	0x08019128
 800124c:	08019134 	.word	0x08019134

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <microros_allocate+0x3c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <microros_allocate+0x3c>)
 8001274:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <microros_allocate+0x40>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <microros_allocate+0x40>)
 8001284:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff f9d8 	bl	800063c <pvPortMallocMicroROS>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000400c 	.word	0x2000400c
 800129c:	20004010 	.word	0x20004010

080012a0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00c      	beq.n	80012ca <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fae1 	bl	8000878 <getBlockSize>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <microros_deallocate+0x34>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <microros_deallocate+0x34>)
 80012c2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fa7d 	bl	80007c4 <vPortFreeMicroROS>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20004010 	.word	0x20004010

080012d8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <microros_reallocate+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <microros_reallocate+0x64>)
 80012f2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <microros_reallocate+0x68>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	461a      	mov	r2, r3
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <microros_reallocate+0x68>)
 8001302:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d104      	bne.n	8001314 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f7ff f996 	bl	800063c <pvPortMallocMicroROS>
 8001310:	4603      	mov	r3, r0
 8001312:	e00e      	b.n	8001332 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff faaf 	bl	8000878 <getBlockSize>
 800131a:	4603      	mov	r3, r0
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <microros_reallocate+0x68>)
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	461a      	mov	r2, r3
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <microros_reallocate+0x68>)
 8001326:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff fac2 	bl	80008b4 <pvPortReallocMicroROS>
 8001330:	4603      	mov	r3, r0
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000400c 	.word	0x2000400c
 8001340:	20004010 	.word	0x20004010

08001344 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <microros_zero_allocate+0x48>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	4413      	add	r3, r2
 800135e:	461a      	mov	r2, r3
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <microros_zero_allocate+0x48>)
 8001362:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <microros_zero_allocate+0x4c>)
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	4413      	add	r3, r2
 8001372:	461a      	mov	r2, r3
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <microros_zero_allocate+0x4c>)
 8001376:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff fac7 	bl	800090e <pvPortCallocMicroROS>
 8001380:	4603      	mov	r3, r0
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000400c 	.word	0x2000400c
 8001390:	20004010 	.word	0x20004010
 8001394:	00000000 	.word	0x00000000

08001398 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80013aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ae:	a320      	add	r3, pc, #128	; (adr r3, 8001430 <UTILS_NanosecondsToTimespec+0x98>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7fe ff74 	bl	80002a0 <__aeabi_ldivmod>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80013c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001430 <UTILS_NanosecondsToTimespec+0x98>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7fe ff68 	bl	80002a0 <__aeabi_ldivmod>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da20      	bge.n	800141e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <UTILS_NanosecondsToTimespec+0x90>)
 80013e2:	fb82 1203 	smull	r1, r2, r2, r3
 80013e6:	1712      	asrs	r2, r2, #28
 80013e8:	17db      	asrs	r3, r3, #31
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	17c8      	asrs	r0, r1, #31
 80013fa:	460c      	mov	r4, r1
 80013fc:	4605      	mov	r5, r0
 80013fe:	ebb2 0804 	subs.w	r8, r2, r4
 8001402:	eb63 0905 	sbc.w	r9, r3, r5
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4906      	ldr	r1, [pc, #24]	; (800142c <UTILS_NanosecondsToTimespec+0x94>)
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	441a      	add	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	609a      	str	r2, [r3, #8]
    }
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	44b82fa1 	.word	0x44b82fa1
 800142c:	3b9aca00 	.word	0x3b9aca00
 8001430:	3b9aca00 	.word	0x3b9aca00
 8001434:	00000000 	.word	0x00000000

08001438 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b08e      	sub	sp, #56	; 0x38
 800143e:	af00      	add	r7, sp, #0
 8001440:	6278      	str	r0, [r7, #36]	; 0x24
 8001442:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001444:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001448:	2300      	movs	r3, #0
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800145a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145e:	4618      	mov	r0, r3
 8001460:	f00b fa98 	bl	800c994 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	17da      	asrs	r2, r3, #31
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	61fa      	str	r2, [r7, #28]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	69b9      	ldr	r1, [r7, #24]
 8001476:	000b      	movs	r3, r1
 8001478:	2200      	movs	r2, #0
 800147a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	2200      	movs	r2, #0
 8001482:	461c      	mov	r4, r3
 8001484:	4615      	mov	r5, r2
 8001486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800148a:	1911      	adds	r1, r2, r4
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	416b      	adcs	r3, r5
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001496:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800149a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	f04f 0400 	mov.w	r4, #0
 80014a6:	f04f 0500 	mov.w	r5, #0
 80014aa:	015d      	lsls	r5, r3, #5
 80014ac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80014b0:	0154      	lsls	r4, r2, #5
 80014b2:	4622      	mov	r2, r4
 80014b4:	462b      	mov	r3, r5
 80014b6:	ebb2 0800 	subs.w	r8, r2, r0
 80014ba:	eb63 0901 	sbc.w	r9, r3, r1
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80014ca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80014ce:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80014d2:	4690      	mov	r8, r2
 80014d4:	4699      	mov	r9, r3
 80014d6:	eb18 0a00 	adds.w	sl, r8, r0
 80014da:	eb49 0b01 	adc.w	fp, r9, r1
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014f2:	ebb2 040a 	subs.w	r4, r2, sl
 80014f6:	603c      	str	r4, [r7, #0]
 80014f8:	eb63 030b 	sbc.w	r3, r3, fp
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001502:	4623      	mov	r3, r4
 8001504:	181b      	adds	r3, r3, r0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	462b      	mov	r3, r5
 800150a:	eb41 0303 	adc.w	r3, r1, r3
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	6a3a      	ldr	r2, [r7, #32]
 8001512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001516:	f7ff ff3f 	bl	8001398 <UTILS_NanosecondsToTimespec>

    return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	4618      	mov	r0, r3
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_MspInit+0x54>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_MspInit+0x54>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x54>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_MspInit+0x54>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_MspInit+0x54>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_MspInit+0x54>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	210f      	movs	r1, #15
 800156a:	f06f 0001 	mvn.w	r0, #1
 800156e:	f001 f988 	bl	8002882 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2f      	ldr	r2, [pc, #188]	; (800165c <HAL_ADC_MspInit+0xdc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d157      	bne.n	8001652 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_ADC_MspInit+0xe0>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <HAL_ADC_MspInit+0xe0>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_ADC_MspInit+0xe0>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_ADC_MspInit+0xe0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_ADC_MspInit+0xe0>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_ADC_MspInit+0xe0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015da:	2302      	movs	r3, #2
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015de:	2303      	movs	r3, #3
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <HAL_ADC_MspInit+0xe4>)
 80015ee:	f001 fd81 	bl	80030f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_ADC_MspInit+0xec>)
 80015f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 800160c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001610:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 8001614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001618:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 800161c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001620:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 800162a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800162e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 8001638:	f001 f95a 	bl	80028f0 <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001642:	f7ff fe05 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_ADC_MspInit+0xe8>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40012000 	.word	0x40012000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	20003db0 	.word	0x20003db0
 800166c:	40026410 	.word	0x40026410

08001670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_I2C_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12c      	bne.n	80016ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b4:	2312      	movs	r3, #18
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c0:	2304      	movs	r3, #4
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_I2C_MspInit+0x8c>)
 80016cc:	f001 fd12 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400

08001700 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <HAL_I2S_MspInit+0xf0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d15a      	bne.n	80017e6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001734:	23c0      	movs	r3, #192	; 0xc0
 8001736:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fd13 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800174c:	f7ff fd80 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 800175a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6313      	str	r3, [r2, #48]	; 0x30
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_I2S_MspInit+0xf4>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017a4:	2310      	movs	r3, #16
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b4:	2306      	movs	r3, #6
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	480e      	ldr	r0, [pc, #56]	; (80017f8 <HAL_I2S_MspInit+0xf8>)
 80017c0:	f001 fc98 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017c4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d6:	2306      	movs	r3, #6
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	4619      	mov	r1, r3
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <HAL_I2S_MspInit+0xfc>)
 80017e2:	f001 fc87 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	; 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40003c00 	.word	0x40003c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800

08001800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_SPI_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_SPI_MspInit+0x88>)
 800182c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800185a:	23e0      	movs	r3, #224	; 0xe0
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186a:	2305      	movs	r3, #5
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_SPI_MspInit+0x8c>)
 8001876:	f001 fc3d 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40013000 	.word	0x40013000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_UART_MspInit+0x150>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	f040 8092 	bne.w	80019d8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_UART_MspInit+0x154>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a49      	ldr	r2, [pc, #292]	; (80019e4 <HAL_UART_MspInit+0x154>)
 80018be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_UART_MspInit+0x154>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <HAL_UART_MspInit+0x154>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a42      	ldr	r2, [pc, #264]	; (80019e4 <HAL_UART_MspInit+0x154>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_UART_MspInit+0x154>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ec:	230c      	movs	r3, #12
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fc:	2307      	movs	r3, #7
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4838      	ldr	r0, [pc, #224]	; (80019e8 <HAL_UART_MspInit+0x158>)
 8001908:	f001 fbf4 	bl	80030f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_UART_MspInit+0x15c>)
 800190e:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <HAL_UART_MspInit+0x160>)
 8001910:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001914:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001918:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_UART_MspInit+0x15c>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <HAL_UART_MspInit+0x15c>)
 800193c:	2200      	movs	r2, #0
 800193e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001942:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001946:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_UART_MspInit+0x15c>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800194e:	4827      	ldr	r0, [pc, #156]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001950:	f000 ffce 	bl	80028f0 <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800195a:	f7ff fc79 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001962:	639a      	str	r2, [r3, #56]	; 0x38
 8001964:	4a21      	ldr	r2, [pc, #132]	; (80019ec <HAL_UART_MspInit+0x15c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_UART_MspInit+0x164>)
 800196c:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <HAL_UART_MspInit+0x168>)
 800196e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_UART_MspInit+0x164>)
 8001972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001976:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_UART_MspInit+0x164>)
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_UART_MspInit+0x164>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_UART_MspInit+0x164>)
 8001986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_UART_MspInit+0x164>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_UART_MspInit+0x164>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_UART_MspInit+0x164>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_UART_MspInit+0x164>)
 80019a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_UART_MspInit+0x164>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <HAL_UART_MspInit+0x164>)
 80019ae:	f000 ff9f 	bl	80028f0 <HAL_DMA_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80019b8:	f7ff fc4a 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <HAL_UART_MspInit+0x164>)
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
 80019c2:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <HAL_UART_MspInit+0x164>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2105      	movs	r1, #5
 80019cc:	2026      	movs	r0, #38	; 0x26
 80019ce:	f000 ff58 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019d2:	2026      	movs	r0, #38	; 0x26
 80019d4:	f000 ff71 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40004400 	.word	0x40004400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	20003f48 	.word	0x20003f48
 80019f0:	40026088 	.word	0x40026088
 80019f4:	20003fa8 	.word	0x20003fa8
 80019f8:	400260a0 	.word	0x400260a0

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2c:	f000 fa3e 	bl	8001eac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a30:	f00b f930 	bl	800cc94 <xTaskGetSchedulerState>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a3a:	f00b ff15 	bl	800d868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <DMA1_Stream5_IRQHandler+0x10>)
 8001a4a:	f001 f8e9 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20003f48 	.word	0x20003f48

08001a58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA1_Stream6_IRQHandler+0x10>)
 8001a5e:	f001 f8df 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20003fa8 	.word	0x20003fa8

08001a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <USART2_IRQHandler+0x10>)
 8001a72:	f004 febf 	bl	80067f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20003f04 	.word	0x20003f04

08001a80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA2_Stream0_IRQHandler+0x10>)
 8001a86:	f001 f8cb 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20003db0 	.word	0x20003db0

08001a94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <OTG_FS_IRQHandler+0x10>)
 8001a9a:	f001 ff4b 	bl	8003934 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20009584 	.word	0x20009584

08001aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_kill>:

int _kill(int pid, int sig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ac2:	f016 fbe1 	bl	8018288 <__errno>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2216      	movs	r2, #22
 8001aca:	601a      	str	r2, [r3, #0]
  return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_exit>:

void _exit (int status)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ffe7 	bl	8001ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aea:	e7fe      	b.n	8001aea <_exit+0x12>

08001aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e00a      	b.n	8001b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afe:	f3af 8000 	nop.w
 8001b02:	4601      	mov	r1, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	b2ca      	uxtb	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf0      	blt.n	8001afe <_read+0x12>
  }

  return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e009      	b.n	8001b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf1      	blt.n	8001b38 <_write+0x12>
  }
  return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_close>:

int _close(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b86:	605a      	str	r2, [r3, #4]
  return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_isatty>:

int _isatty(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f016 fb46 	bl	8018288 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20020000 	.word	0x20020000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	20004018 	.word	0x20004018
 8001c30:	2000e550 	.word	0x2000e550

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001c66:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c6c:	4904      	ldr	r1, [pc, #16]	; (8001c80 <cubemx_transport_open+0x28>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f004 fd10 	bl	8006694 <HAL_UART_Receive_DMA>
    return true;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000401c 	.word	0x2000401c

08001c84 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001c92:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f004 fd2d 	bl	80066f4 <HAL_UART_DMAStop>
    return true;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001cb8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d11c      	bne.n	8001d00 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f004 fc62 	bl	8006598 <HAL_UART_Transmit_DMA>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001cd8:	e002      	b.n	8001ce0 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f009 f9bc 	bl	800b058 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <cubemx_transport_write+0x4e>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d1f3      	bne.n	8001cda <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001cf2:	7cfb      	ldrb	r3, [r7, #19]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <cubemx_transport_write+0x58>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	e002      	b.n	8001d02 <cubemx_transport_write+0x5e>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e000      	b.n	8001d02 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001d00:	2300      	movs	r3, #0
    }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d20:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d26:	b672      	cpsid	i
}
 8001d28:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <cubemx_transport_read+0x9c>)
 8001d38:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3a:	b662      	cpsie	i
}
 8001d3c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f009 f987 	bl	800b058 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <cubemx_transport_read+0xa0>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <cubemx_transport_read+0x9c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d103      	bne.n	8001d5e <cubemx_transport_read+0x52>
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dbe3      	blt.n	8001d26 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001d62:	e011      	b.n	8001d88 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <cubemx_transport_read+0xa0>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	440b      	add	r3, r1
 8001d6e:	4910      	ldr	r1, [pc, #64]	; (8001db0 <cubemx_transport_read+0xa4>)
 8001d70:	5c8a      	ldrb	r2, [r1, r2]
 8001d72:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <cubemx_transport_read+0xa0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <cubemx_transport_read+0xa0>)
 8001d80:	6013      	str	r3, [r2, #0]
        wrote++;
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	3301      	adds	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <cubemx_transport_read+0xa0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <cubemx_transport_read+0x9c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d003      	beq.n	8001d9c <cubemx_transport_read+0x90>
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3e3      	bcc.n	8001d64 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20004820 	.word	0x20004820
 8001dac:	2000481c 	.word	0x2000481c
 8001db0:	2000401c 	.word	0x2000401c

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dba:	490e      	ldr	r1, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd0:	4c0b      	ldr	r4, [pc, #44]	; (8001e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dde:	f7ff ff29 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f016 fa57 	bl	8018294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7fe fe91 	bl	8000b0c <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001df8:	08019e58 	.word	0x08019e58
  ldr r2, =_sbss
 8001dfc:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001e00:	2000e54c 	.word	0x2000e54c

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_Init+0x40>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_Init+0x40>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x40>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 fd1b 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fb74 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fd33 	bl	80028d6 <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e88:	f000 fcfb 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20000008 	.word	0x20000008

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	20004824 	.word	0x20004824

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20004824 	.word	0x20004824

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000000c 	.word	0x2000000c

08001f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e033      	b.n	8001fb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fb14 	bl	8001580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7a:	f023 0302 	bic.w	r3, r3, #2
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 faa4 	bl	80024d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa2:	e001      	b.n	8001fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Start+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0b2      	b.n	800213c <HAL_ADC_Start+0x180>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d018      	beq.n	800201e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_ADC_Start+0x18c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_ADC_Start+0x190>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9a      	lsrs	r2, r3, #18
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002010:	e002      	b.n	8002018 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d17a      	bne.n	8002122 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206a:	d106      	bne.n	800207a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f023 0206 	bic.w	r2, r3, #6
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
 8002078:	e002      	b.n	8002080 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_ADC_Start+0x194>)
 800208a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002094:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d12a      	bne.n	80020f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <HAL_ADC_Start+0x198>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d015      	beq.n	80020d8 <HAL_ADC_Start+0x11c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_ADC_Start+0x19c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_Start+0x106>
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_ADC_Start+0x194>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_ADC_Start+0x1a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d136      	bne.n	800213a <HAL_ADC_Start+0x17e>
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_ADC_Start+0x194>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d130      	bne.n	800213a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d129      	bne.n	800213a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	e020      	b.n	800213a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_ADC_Start+0x198>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11b      	bne.n	800213a <HAL_ADC_Start+0x17e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d114      	bne.n	800213a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e00b      	b.n	800213a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000004 	.word	0x20000004
 800214c:	431bde83 	.word	0x431bde83
 8002150:	40012300 	.word	0x40012300
 8002154:	40012000 	.word	0x40012000
 8002158:	40012100 	.word	0x40012100
 800215c:	40012200 	.word	0x40012200

08002160 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d113      	bne.n	80021a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800218c:	d10b      	bne.n	80021a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e063      	b.n	800226e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021a6:	f7ff fe95 	bl	8001ed4 <HAL_GetTick>
 80021aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021ac:	e021      	b.n	80021f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b4:	d01d      	beq.n	80021f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_ADC_PollForConversion+0x6c>
 80021bc:	f7ff fe8a 	bl	8001ed4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d212      	bcs.n	80021f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d00b      	beq.n	80021f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f043 0204 	orr.w	r2, r3, #4
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e03d      	b.n	800226e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d1d6      	bne.n	80021ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0212 	mvn.w	r2, #18
 8002208:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d123      	bne.n	800226c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d11f      	bne.n	800226c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1c>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e105      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x228>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d925      	bls.n	8002308 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68d9      	ldr	r1, [r3, #12]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	3b1e      	subs	r3, #30
 80022d2:	2207      	movs	r2, #7
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43da      	mvns	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	400a      	ands	r2, r1
 80022e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68d9      	ldr	r1, [r3, #12]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4403      	add	r3, r0
 80022fa:	3b1e      	subs	r3, #30
 80022fc:	409a      	lsls	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	e022      	b.n	800234e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	2207      	movs	r2, #7
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	400a      	ands	r2, r1
 800232a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	4603      	mov	r3, r0
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4403      	add	r3, r0
 8002344:	409a      	lsls	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d824      	bhi.n	80023a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b05      	subs	r3, #5
 8002368:	221f      	movs	r2, #31
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3b05      	subs	r3, #5
 8002392:	fa00 f203 	lsl.w	r2, r0, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
 800239e:	e04c      	b.n	800243a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d824      	bhi.n	80023f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b23      	subs	r3, #35	; 0x23
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43da      	mvns	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	400a      	ands	r2, r1
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b23      	subs	r3, #35	; 0x23
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
 80023f0:	e023      	b.n	800243a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	3b41      	subs	r3, #65	; 0x41
 8002404:	221f      	movs	r2, #31
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	400a      	ands	r2, r1
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	4618      	mov	r0, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3b41      	subs	r3, #65	; 0x41
 800242e:	fa00 f203 	lsl.w	r2, r0, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_ADC_ConfigChannel+0x234>)
 800243c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_ADC_ConfigChannel+0x238>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d109      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1cc>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b12      	cmp	r3, #18
 800244e:	d105      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_ADC_ConfigChannel+0x238>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d123      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x21e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d003      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x1e6>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b11      	cmp	r3, #17
 8002474:	d11b      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d111      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_ADC_ConfigChannel+0x23c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_ADC_ConfigChannel+0x240>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	0c9a      	lsrs	r2, r3, #18
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f9      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40012300 	.word	0x40012300
 80024c8:	40012000 	.word	0x40012000
 80024cc:	20000004 	.word	0x20000004
 80024d0:	431bde83 	.word	0x431bde83

080024d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024dc:	4b79      	ldr	r3, [pc, #484]	; (80026c4 <ADC_Init+0x1f0>)
 80024de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	021a      	lsls	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800252c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <ADC_Init+0x1f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800257a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800259c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	e00f      	b.n	80025d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0202 	bic.w	r2, r2, #2
 80025e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e1b      	ldrb	r3, [r3, #24]
 80025ec:	005a      	lsls	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800261e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	3b01      	subs	r3, #1
 800262c:	035a      	lsls	r2, r3, #13
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e007      	b.n	8002648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	3b01      	subs	r3, #1
 8002664:	051a      	lsls	r2, r3, #20
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800267c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268a:	025a      	lsls	r2, r3, #9
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	029a      	lsls	r2, r3, #10
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40012300 	.word	0x40012300
 80026c8:	0f000001 	.word	0x0f000001

080026cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <__NVIC_GetPriorityGrouping+0x18>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0307 	and.w	r3, r3, #7
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db0b      	blt.n	800275a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	4907      	ldr	r1, [pc, #28]	; (8002768 <__NVIC_EnableIRQ+0x38>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2001      	movs	r0, #1
 8002752:	fa00 f202 	lsl.w	r2, r0, r2
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	; (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
         );
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800284c:	f7ff ff8e 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff29 	bl	80026cc <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002894:	f7ff ff3e 	bl	8002714 <__NVIC_GetPriorityGrouping>
 8002898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7ff ff8e 	bl	80027c0 <NVIC_EncodePriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff5d 	bl	800276c <__NVIC_SetPriority>
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff31 	bl	8002730 <__NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffa2 	bl	8002828 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff faea 	bl	8001ed4 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e099      	b.n	8002a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292c:	e00f      	b.n	800294e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800292e:	f7ff fad1 	bl	8001ed4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b05      	cmp	r3, #5
 800293a:	d908      	bls.n	800294e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e078      	b.n	8002a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e8      	bne.n	800292e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <HAL_DMA_Init+0x158>)
 8002968:	4013      	ands	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4313      	orrs	r3, r2
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d117      	bne.n	8002a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fb01 	bl	8002ffc <DMA_CheckFifoParam>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e016      	b.n	8002a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fab8 	bl	8002f90 <DMA_CalcBaseAndBitshift>
 8002a20:	4603      	mov	r3, r0
 8002a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	223f      	movs	r2, #63	; 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	f010803f 	.word	0xf010803f

08002a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Start_IT+0x26>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e040      	b.n	8002af4 <HAL_DMA_Start_IT+0xa8>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d12f      	bne.n	8002ae6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fa4a 	bl	8002f34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	223f      	movs	r2, #63	; 0x3f
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0216 	orr.w	r2, r2, #22
 8002aba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0208 	orr.w	r2, r2, #8
 8002ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e005      	b.n	8002af2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
 8002af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b0a:	f7ff f9e3 	bl	8001ed4 <HAL_GetTick>
 8002b0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d008      	beq.n	8002b2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e052      	b.n	8002bd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0216 	bic.w	r2, r2, #22
 8002b3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_DMA_Abort+0x62>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0208 	bic.w	r2, r2, #8
 8002b6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7e:	e013      	b.n	8002ba8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b80:	f7ff f9a8 	bl	8001ed4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d90c      	bls.n	8002ba8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e015      	b.n	8002bd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e4      	bne.n	8002b80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	223f      	movs	r2, #63	; 0x3f
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d004      	beq.n	8002bfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00c      	b.n	8002c14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c2c:	4b8e      	ldr	r3, [pc, #568]	; (8002e68 <HAL_DMA_IRQHandler+0x248>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a8e      	ldr	r2, [pc, #568]	; (8002e6c <HAL_DMA_IRQHandler+0x24c>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0204 	bic.w	r2, r2, #4
 8002c72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	2208      	movs	r2, #8
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	2201      	movs	r2, #1
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d012      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f043 0202 	orr.w	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	f043 0204 	orr.w	r2, r3, #4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d043      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03c      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d024      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
 8002d4e:	e01f      	b.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e016      	b.n	8002d90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0208 	bic.w	r2, r2, #8
 8002d7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2220      	movs	r2, #32
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 808f 	beq.w	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8087 	beq.w	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2220      	movs	r2, #32
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d136      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0216 	bic.w	r2, r2, #22
 8002dd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x1da>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0208 	bic.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	223f      	movs	r2, #63	; 0x3f
 8002e10:	409a      	lsls	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d07e      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
        }
        return;
 8002e36:	e079      	b.n	8002f2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d031      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e02c      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
 8002e66:	bf00      	nop
 8002e68:	20000004 	.word	0x20000004
 8002e6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e01e      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0210 	bic.w	r2, r2, #16
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d032      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d307      	bcc.n	8002f08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f2      	bne.n	8002eec <HAL_DMA_IRQHandler+0x2cc>
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f2c:	bf00      	nop
    }
  }
}
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d108      	bne.n	8002f74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f72:	e007      	b.n	8002f84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3b10      	subs	r3, #16
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <DMA_CalcBaseAndBitshift+0x64>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <DMA_CalcBaseAndBitshift+0x68>)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d909      	bls.n	8002fd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	1d1a      	adds	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	659a      	str	r2, [r3, #88]	; 0x58
 8002fd0:	e007      	b.n	8002fe2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	aaaaaaab 	.word	0xaaaaaaab
 8002ff8:	080191c8 	.word	0x080191c8

08002ffc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11f      	bne.n	8003056 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d856      	bhi.n	80030ca <DMA_CheckFifoParam+0xce>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <DMA_CheckFifoParam+0x28>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003035 	.word	0x08003035
 8003028:	08003047 	.word	0x08003047
 800302c:	08003035 	.word	0x08003035
 8003030:	080030cb 	.word	0x080030cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d046      	beq.n	80030ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003044:	e043      	b.n	80030ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800304e:	d140      	bne.n	80030d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003054:	e03d      	b.n	80030d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800305e:	d121      	bne.n	80030a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d837      	bhi.n	80030d6 <DMA_CheckFifoParam+0xda>
 8003066:	a201      	add	r2, pc, #4	; (adr r2, 800306c <DMA_CheckFifoParam+0x70>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	0800307d 	.word	0x0800307d
 8003070:	08003083 	.word	0x08003083
 8003074:	0800307d 	.word	0x0800307d
 8003078:	08003095 	.word	0x08003095
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      break;
 8003080:	e030      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d025      	beq.n	80030da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003092:	e022      	b.n	80030da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800309c:	d11f      	bne.n	80030de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030a2:	e01c      	b.n	80030de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d903      	bls.n	80030b2 <DMA_CheckFifoParam+0xb6>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d003      	beq.n	80030b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030b0:	e018      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      break;
 80030b6:	e015      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      break;
 80030c8:	e00b      	b.n	80030e2 <DMA_CheckFifoParam+0xe6>
      break;
 80030ca:	bf00      	nop
 80030cc:	e00a      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e008      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030d2:	bf00      	nop
 80030d4:	e006      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
 80030d8:	e004      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030da:	bf00      	nop
 80030dc:	e002      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030e2:	bf00      	nop
    }
  } 
  
  return status; 
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e16b      	b.n	80033e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003110:	2201      	movs	r2, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	f040 815a 	bne.w	80033e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d005      	beq.n	8003146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003142:	2b02      	cmp	r3, #2
 8003144:	d130      	bne.n	80031a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 0201 	and.w	r2, r3, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d017      	beq.n	80031e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d123      	bne.n	8003238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	220f      	movs	r2, #15
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80b4 	beq.w	80033e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b60      	ldr	r3, [pc, #384]	; (8003400 <HAL_GPIO_Init+0x30c>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a5f      	ldr	r2, [pc, #380]	; (8003400 <HAL_GPIO_Init+0x30c>)
 8003284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b5d      	ldr	r3, [pc, #372]	; (8003400 <HAL_GPIO_Init+0x30c>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003296:	4a5b      	ldr	r2, [pc, #364]	; (8003404 <HAL_GPIO_Init+0x310>)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_GPIO_Init+0x314>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02b      	beq.n	800331a <HAL_GPIO_Init+0x226>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a51      	ldr	r2, [pc, #324]	; (800340c <HAL_GPIO_Init+0x318>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d025      	beq.n	8003316 <HAL_GPIO_Init+0x222>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a50      	ldr	r2, [pc, #320]	; (8003410 <HAL_GPIO_Init+0x31c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <HAL_GPIO_Init+0x21e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4f      	ldr	r2, [pc, #316]	; (8003414 <HAL_GPIO_Init+0x320>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x21a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4e      	ldr	r2, [pc, #312]	; (8003418 <HAL_GPIO_Init+0x324>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x216>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	; (800341c <HAL_GPIO_Init+0x328>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x212>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4c      	ldr	r2, [pc, #304]	; (8003420 <HAL_GPIO_Init+0x32c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x20e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4b      	ldr	r2, [pc, #300]	; (8003424 <HAL_GPIO_Init+0x330>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x20a>
 80032fa:	2307      	movs	r3, #7
 80032fc:	e00e      	b.n	800331c <HAL_GPIO_Init+0x228>
 80032fe:	2308      	movs	r3, #8
 8003300:	e00c      	b.n	800331c <HAL_GPIO_Init+0x228>
 8003302:	2306      	movs	r3, #6
 8003304:	e00a      	b.n	800331c <HAL_GPIO_Init+0x228>
 8003306:	2305      	movs	r3, #5
 8003308:	e008      	b.n	800331c <HAL_GPIO_Init+0x228>
 800330a:	2304      	movs	r3, #4
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x228>
 800330e:	2303      	movs	r3, #3
 8003310:	e004      	b.n	800331c <HAL_GPIO_Init+0x228>
 8003312:	2302      	movs	r3, #2
 8003314:	e002      	b.n	800331c <HAL_GPIO_Init+0x228>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_GPIO_Init+0x228>
 800331a:	2300      	movs	r3, #0
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f002 0203 	and.w	r2, r2, #3
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	4093      	lsls	r3, r2
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800332c:	4935      	ldr	r1, [pc, #212]	; (8003404 <HAL_GPIO_Init+0x310>)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333a:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_GPIO_Init+0x334>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800335e:	4a32      	ldr	r2, [pc, #200]	; (8003428 <HAL_GPIO_Init+0x334>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_GPIO_Init+0x334>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <HAL_GPIO_Init+0x334>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_GPIO_Init+0x334>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b2:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_GPIO_Init+0x334>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_GPIO_Init+0x334>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033dc:	4a12      	ldr	r2, [pc, #72]	; (8003428 <HAL_GPIO_Init+0x334>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3301      	adds	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	f67f ae90 	bls.w	8003110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3724      	adds	r7, #36	; 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40013800 	.word	0x40013800
 8003408:	40020000 	.word	0x40020000
 800340c:	40020400 	.word	0x40020400
 8003410:	40020800 	.word	0x40020800
 8003414:	40020c00 	.word	0x40020c00
 8003418:	40021000 	.word	0x40021000
 800341c:	40021400 	.word	0x40021400
 8003420:	40021800 	.word	0x40021800
 8003424:	40021c00 	.word	0x40021c00
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
 8003438:	4613      	mov	r3, r2
 800343a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800343c:	787b      	ldrb	r3, [r7, #1]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003448:	e003      	b.n	8003452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	041a      	lsls	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	619a      	str	r2, [r3, #24]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800345e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003460:	b08f      	sub	sp, #60	; 0x3c
 8003462:	af0a      	add	r7, sp, #40	; 0x28
 8003464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e054      	b.n	800351a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f00a fcba 	bl	800de04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2203      	movs	r2, #3
 8003494:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fb06 	bl	8007ac0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	687e      	ldr	r6, [r7, #4]
 80034bc:	466d      	mov	r5, sp
 80034be:	f106 0410 	add.w	r4, r6, #16
 80034c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80034d2:	1d33      	adds	r3, r6, #4
 80034d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f004 fa80 	bl	80079dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 fafd 	bl	8007ae2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	687e      	ldr	r6, [r7, #4]
 80034f0:	466d      	mov	r5, sp
 80034f2:	f106 0410 	add.w	r4, r6, #16
 80034f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003502:	e885 0003 	stmia.w	r5, {r0, r1}
 8003506:	1d33      	adds	r3, r6, #4
 8003508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	f004 fc86 	bl	8007e1c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003522 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003522:	b590      	push	{r4, r7, lr}
 8003524:	b089      	sub	sp, #36	; 0x24
 8003526:	af04      	add	r7, sp, #16
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	4608      	mov	r0, r1
 800352c:	4611      	mov	r1, r2
 800352e:	461a      	mov	r2, r3
 8003530:	4603      	mov	r3, r0
 8003532:	70fb      	strb	r3, [r7, #3]
 8003534:	460b      	mov	r3, r1
 8003536:	70bb      	strb	r3, [r7, #2]
 8003538:	4613      	mov	r3, r2
 800353a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_HCD_HC_Init+0x28>
 8003546:	2302      	movs	r3, #2
 8003548:	e076      	b.n	8003638 <HAL_HCD_HC_Init+0x116>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	333d      	adds	r3, #61	; 0x3d
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3338      	adds	r3, #56	; 0x38
 8003572:	787a      	ldrb	r2, [r7, #1]
 8003574:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3340      	adds	r3, #64	; 0x40
 8003584:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003586:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3339      	adds	r3, #57	; 0x39
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	333f      	adds	r3, #63	; 0x3f
 80035a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80035ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	78ba      	ldrb	r2, [r7, #2]
 80035b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035b6:	b2d0      	uxtb	r0, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	333a      	adds	r3, #58	; 0x3a
 80035c4:	4602      	mov	r2, r0
 80035c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80035c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da09      	bge.n	80035e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	333b      	adds	r3, #59	; 0x3b
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e008      	b.n	80035f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	333b      	adds	r3, #59	; 0x3b
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	333c      	adds	r3, #60	; 0x3c
 8003604:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003608:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	787c      	ldrb	r4, [r7, #1]
 8003610:	78ba      	ldrb	r2, [r7, #2]
 8003612:	78f9      	ldrb	r1, [r7, #3]
 8003614:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003616:	9302      	str	r3, [sp, #8]
 8003618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4623      	mov	r3, r4
 8003626:	f004 fd7f 	bl	8008128 <USB_HC_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}

08003640 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_HCD_HC_Halt+0x1e>
 800365a:	2302      	movs	r3, #2
 800365c:	e00f      	b.n	800367e <HAL_HCD_HC_Halt+0x3e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f004 ffcf 	bl	8008612 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	4603      	mov	r3, r0
 8003698:	70fb      	strb	r3, [r7, #3]
 800369a:	460b      	mov	r3, r1
 800369c:	70bb      	strb	r3, [r7, #2]
 800369e:	4613      	mov	r3, r2
 80036a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	333b      	adds	r3, #59	; 0x3b
 80036b0:	78ba      	ldrb	r2, [r7, #2]
 80036b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	333f      	adds	r3, #63	; 0x3f
 80036c2:	787a      	ldrb	r2, [r7, #1]
 80036c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80036c6:	7c3b      	ldrb	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d112      	bne.n	80036f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3342      	adds	r3, #66	; 0x42
 80036da:	2203      	movs	r2, #3
 80036dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	333d      	adds	r3, #61	; 0x3d
 80036ec:	7f3a      	ldrb	r2, [r7, #28]
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e008      	b.n	8003704 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	3342      	adds	r3, #66	; 0x42
 8003700:	2202      	movs	r2, #2
 8003702:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b03      	cmp	r3, #3
 8003708:	f200 80c6 	bhi.w	8003898 <HAL_HCD_HC_SubmitRequest+0x210>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003725 	.word	0x08003725
 8003718:	08003885 	.word	0x08003885
 800371c:	08003789 	.word	0x08003789
 8003720:	08003807 	.word	0x08003807
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003724:	7c3b      	ldrb	r3, [r7, #16]
 8003726:	2b01      	cmp	r3, #1
 8003728:	f040 80b8 	bne.w	800389c <HAL_HCD_HC_SubmitRequest+0x214>
 800372c:	78bb      	ldrb	r3, [r7, #2]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 80b4 	bne.w	800389c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003734:	8b3b      	ldrh	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d108      	bne.n	800374c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3355      	adds	r3, #85	; 0x55
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3355      	adds	r3, #85	; 0x55
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3342      	adds	r3, #66	; 0x42
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003772:	e093      	b.n	800389c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3342      	adds	r3, #66	; 0x42
 8003782:	2202      	movs	r2, #2
 8003784:	701a      	strb	r2, [r3, #0]
      break;
 8003786:	e089      	b.n	800389c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003788:	78bb      	ldrb	r3, [r7, #2]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11d      	bne.n	80037ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	3355      	adds	r3, #85	; 0x55
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	3342      	adds	r3, #66	; 0x42
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80037b4:	e073      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	3342      	adds	r3, #66	; 0x42
 80037c4:	2202      	movs	r2, #2
 80037c6:	701a      	strb	r2, [r3, #0]
      break;
 80037c8:	e069      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3354      	adds	r3, #84	; 0x54
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	3342      	adds	r3, #66	; 0x42
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
      break;
 80037f0:	e055      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3342      	adds	r3, #66	; 0x42
 8003800:	2202      	movs	r2, #2
 8003802:	701a      	strb	r2, [r3, #0]
      break;
 8003804:	e04b      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003806:	78bb      	ldrb	r3, [r7, #2]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11d      	bne.n	8003848 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3355      	adds	r3, #85	; 0x55
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	212c      	movs	r1, #44	; 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	3342      	adds	r3, #66	; 0x42
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003832:	e034      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3342      	adds	r3, #66	; 0x42
 8003842:	2202      	movs	r2, #2
 8003844:	701a      	strb	r2, [r3, #0]
      break;
 8003846:	e02a      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3354      	adds	r3, #84	; 0x54
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3342      	adds	r3, #66	; 0x42
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
      break;
 800386e:	e016      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3342      	adds	r3, #66	; 0x42
 800387e:	2202      	movs	r2, #2
 8003880:	701a      	strb	r2, [r3, #0]
      break;
 8003882:	e00c      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3342      	adds	r3, #66	; 0x42
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
      break;
 8003896:	e002      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003898:	bf00      	nop
 800389a:	e000      	b.n	800389e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800389c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3344      	adds	r3, #68	; 0x44
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	8b3a      	ldrh	r2, [r7, #24]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	202c      	movs	r0, #44	; 0x2c
 80038b8:	fb00 f303 	mul.w	r3, r0, r3
 80038bc:	440b      	add	r3, r1
 80038be:	334c      	adds	r3, #76	; 0x4c
 80038c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3360      	adds	r3, #96	; 0x60
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3350      	adds	r3, #80	; 0x50
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3339      	adds	r3, #57	; 0x39
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	3361      	adds	r3, #97	; 0x61
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	222c      	movs	r2, #44	; 0x2c
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	3338      	adds	r3, #56	; 0x38
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	18d1      	adds	r1, r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	f004 fd22 	bl	800836c <USB_HC_StartXfer>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop

08003934 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f004 fa23 	bl	8007d96 <USB_GetMode>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	f040 80f6 	bne.w	8003b44 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f004 fa07 	bl	8007d70 <USB_ReadInterrupts>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80ec 	beq.w	8003b42 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f004 f9fe 	bl	8007d70 <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800397e:	d104      	bne.n	800398a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003988:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f004 f9ee 	bl	8007d70 <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399e:	d104      	bne.n	80039aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f004 f9de 	bl	8007d70 <USB_ReadInterrupts>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039be:	d104      	bne.n	80039ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 f9ce 	bl	8007d70 <USB_ReadInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d103      	bne.n	80039e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2202      	movs	r2, #2
 80039e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f004 f9c0 	bl	8007d70 <USB_ReadInterrupts>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fa:	d11c      	bne.n	8003a36 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003a04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a16:	2110      	movs	r1, #16
 8003a18:	6938      	ldr	r0, [r7, #16]
 8003a1a:	f004 f8af 	bl	8007b7c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003a1e:	6938      	ldr	r0, [r7, #16]
 8003a20:	f004 f8e0 	bl	8007be4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 fab6 	bl	8007f9c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f00a fa65 	bl	800df00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 f998 	bl	8007d70 <USB_ReadInterrupts>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4a:	d102      	bne.n	8003a52 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 f89e 	bl	8004b8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 f98a 	bl	8007d70 <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d106      	bne.n	8003a74 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f00a fa2e 	bl	800dec8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2208      	movs	r2, #8
 8003a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 f979 	bl	8007d70 <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d101      	bne.n	8003a8c <HAL_HCD_IRQHandler+0x158>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_HCD_IRQHandler+0x15a>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d012      	beq.n	8003ab8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0210 	bic.w	r2, r2, #16
 8003aa0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 ffa1 	bl	80049ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0210 	orr.w	r2, r2, #16
 8003ab6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f004 f957 	bl	8007d70 <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003acc:	d13a      	bne.n	8003b44 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 fd8c 	bl	80085f0 <USB_HC_ReadInterrupt>
 8003ad8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e025      	b.n	8003b2c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d018      	beq.n	8003b26 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d106      	bne.n	8003b1a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8ab 	bl	8003c6e <HCD_HC_IN_IRQHandler>
 8003b18:	e005      	b.n	8003b26 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fbf9 	bl	8004318 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d3d4      	bcc.n	8003ae0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b3e:	615a      	str	r2, [r3, #20]
 8003b40:	e000      	b.n	8003b44 <HAL_HCD_IRQHandler+0x210>
      return;
 8003b42:	bf00      	nop
    }
  }
}
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_HCD_Start+0x16>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e013      	b.n	8003b88 <HAL_HCD_Start+0x3e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f004 fa78 	bl	8008064 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f003 ff90 	bl	8007a9e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_HCD_Stop+0x16>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e00d      	b.n	8003bc2 <HAL_HCD_Stop+0x32>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fe66 	bl	8008884 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 fa1a 	bl	8008010 <USB_ResetPort>
 8003bdc:	4603      	mov	r3, r0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3360      	adds	r3, #96	; 0x60
 8003c00:	781b      	ldrb	r3, [r3, #0]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	3350      	adds	r3, #80	; 0x50
 8003c28:	681b      	ldr	r3, [r3, #0]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 fa5e 	bl	8008104 <USB_GetCurrentFrame>
 8003c48:	4603      	mov	r3, r0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 fa39 	bl	80080d6 <USB_GetHostSpeed>
 8003c64:	4603      	mov	r3, r0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d11a      	bne.n	8003cd4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2304      	movs	r3, #4
 8003cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3361      	adds	r3, #97	; 0x61
 8003cbe:	2206      	movs	r2, #6
 8003cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f004 fca0 	bl	8008612 <USB_HC_Halt>
 8003cd2:	e0af      	b.n	8003e34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cea:	d11b      	bne.n	8003d24 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3361      	adds	r3, #97	; 0x61
 8003d0e:	2207      	movs	r2, #7
 8003d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f004 fc78 	bl	8008612 <USB_HC_Halt>
 8003d22:	e087      	b.n	8003e34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d109      	bne.n	8003d4e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	2320      	movs	r3, #32
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	e072      	b.n	8003e34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d11a      	bne.n	8003d9a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	2308      	movs	r3, #8
 8003d74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3361      	adds	r3, #97	; 0x61
 8003d84:	2205      	movs	r2, #5
 8003d86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 fc3d 	bl	8008612 <USB_HC_Halt>
 8003d98:	e04c      	b.n	8003e34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db0:	d11b      	bne.n	8003dea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3361      	adds	r3, #97	; 0x61
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 fc15 	bl	8008612 <USB_HC_Halt>
 8003de8:	e024      	b.n	8003e34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b80      	cmp	r3, #128	; 0x80
 8003dfe:	d119      	bne.n	8003e34 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	212c      	movs	r1, #44	; 0x2c
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3361      	adds	r3, #97	; 0x61
 8003e20:	2206      	movs	r2, #6
 8003e22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 fbef 	bl	8008612 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d112      	bne.n	8003e72 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f004 fbdb 	bl	8008612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e6e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003e70:	e24e      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	f040 80df 	bne.w	8004048 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d019      	beq.n	8003ec6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3348      	adds	r3, #72	; 0x48
 8003ea0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0159      	lsls	r1, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003eb4:	1ad2      	subs	r2, r2, r3
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	202c      	movs	r0, #44	; 0x2c
 8003ebc:	fb00 f303 	mul.w	r3, r0, r3
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3350      	adds	r3, #80	; 0x50
 8003ec4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	212c      	movs	r1, #44	; 0x2c
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3361      	adds	r3, #97	; 0x61
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	335c      	adds	r3, #92	; 0x5c
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2301      	movs	r3, #1
 8003efa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	333f      	adds	r3, #63	; 0x3f
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	333f      	adds	r3, #63	; 0x3f
 8003f1e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d111      	bne.n	8003f48 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f004 fb6f 	bl	8008612 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f40:	461a      	mov	r2, r3
 8003f42:	2310      	movs	r3, #16
 8003f44:	6093      	str	r3, [r2, #8]
 8003f46:	e03a      	b.n	8003fbe <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	333f      	adds	r3, #63	; 0x3f
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d009      	beq.n	8003f70 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	333f      	adds	r3, #63	; 0x3f
 8003f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d126      	bne.n	8003fbe <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f8e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3360      	adds	r3, #96	; 0x60
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	b2d9      	uxtb	r1, r3
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	202c      	movs	r0, #44	; 0x2c
 8003fac:	fb00 f303 	mul.w	r3, r0, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3360      	adds	r3, #96	; 0x60
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f009 ffaf 	bl	800df1c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d12b      	bne.n	800401e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3348      	adds	r3, #72	; 0x48
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	202c      	movs	r0, #44	; 0x2c
 8003fdc:	fb00 f202 	mul.w	r2, r0, r2
 8003fe0:	440a      	add	r2, r1
 8003fe2:	3240      	adds	r2, #64	; 0x40
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 818e 	beq.w	8004310 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3354      	adds	r3, #84	; 0x54
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f083 0301 	eor.w	r3, r3, #1
 8004008:	b2d8      	uxtb	r0, r3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3354      	adds	r3, #84	; 0x54
 8004018:	4602      	mov	r2, r0
 800401a:	701a      	strb	r2, [r3, #0]
}
 800401c:	e178      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3354      	adds	r3, #84	; 0x54
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2d8      	uxtb	r0, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3354      	adds	r3, #84	; 0x54
 8004042:	4602      	mov	r2, r0
 8004044:	701a      	strb	r2, [r3, #0]
}
 8004046:	e163      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	f040 80f6 	bne.w	800424c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3361      	adds	r3, #97	; 0x61
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d109      	bne.n	8004088 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3360      	adds	r3, #96	; 0x60
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	e0c9      	b.n	800421c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	3361      	adds	r3, #97	; 0x61
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b05      	cmp	r3, #5
 800409a:	d109      	bne.n	80040b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	3360      	adds	r3, #96	; 0x60
 80040aa:	2205      	movs	r2, #5
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e0b5      	b.n	800421c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	3361      	adds	r3, #97	; 0x61
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d009      	beq.n	80040d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	3361      	adds	r3, #97	; 0x61
 80040d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d150      	bne.n	800417a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	335c      	adds	r3, #92	; 0x5c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	202c      	movs	r0, #44	; 0x2c
 80040f0:	fb00 f303 	mul.w	r3, r0, r3
 80040f4:	440b      	add	r3, r1
 80040f6:	335c      	adds	r3, #92	; 0x5c
 80040f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	335c      	adds	r3, #92	; 0x5c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d912      	bls.n	8004134 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	335c      	adds	r3, #92	; 0x5c
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3360      	adds	r3, #96	; 0x60
 800412e:	2204      	movs	r2, #4
 8004130:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004132:	e073      	b.n	800421c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3360      	adds	r3, #96	; 0x60
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800415c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004164:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004178:	e050      	b.n	800421c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3361      	adds	r3, #97	; 0x61
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d122      	bne.n	80041d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	212c      	movs	r1, #44	; 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	3360      	adds	r3, #96	; 0x60
 800419c:	2202      	movs	r2, #2
 800419e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e023      	b.n	800421c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	212c      	movs	r1, #44	; 0x2c
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	3361      	adds	r3, #97	; 0x61
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b07      	cmp	r3, #7
 80041e6:	d119      	bne.n	800421c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	335c      	adds	r3, #92	; 0x5c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	202c      	movs	r0, #44	; 0x2c
 8004200:	fb00 f303 	mul.w	r3, r0, r3
 8004204:	440b      	add	r3, r1
 8004206:	335c      	adds	r3, #92	; 0x5c
 8004208:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	3360      	adds	r3, #96	; 0x60
 8004218:	2204      	movs	r2, #4
 800421a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004228:	461a      	mov	r2, r3
 800422a:	2302      	movs	r3, #2
 800422c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	b2d9      	uxtb	r1, r3
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	202c      	movs	r0, #44	; 0x2c
 8004238:	fb00 f303 	mul.w	r3, r0, r3
 800423c:	4413      	add	r3, r2
 800423e:	3360      	adds	r3, #96	; 0x60
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f009 fe69 	bl	800df1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800424a:	e061      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b10      	cmp	r3, #16
 8004260:	d156      	bne.n	8004310 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	333f      	adds	r3, #63	; 0x3f
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d111      	bne.n	800429a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	212c      	movs	r1, #44	; 0x2c
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	4413      	add	r3, r2
 8004282:	335c      	adds	r3, #92	; 0x5c
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f004 f9bd 	bl	8008612 <USB_HC_Halt>
 8004298:	e031      	b.n	80042fe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	333f      	adds	r3, #63	; 0x3f
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	333f      	adds	r3, #63	; 0x3f
 80042bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d11d      	bne.n	80042fe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	335c      	adds	r3, #92	; 0x5c
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d110      	bne.n	80042fe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3361      	adds	r3, #97	; 0x61
 80042ea:	2203      	movs	r2, #3
 80042ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 f98a 	bl	8008612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	461a      	mov	r2, r3
 800430c:	2310      	movs	r3, #16
 800430e:	6093      	str	r3, [r2, #8]
}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d11a      	bne.n	800437e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	461a      	mov	r2, r3
 8004356:	2304      	movs	r3, #4
 8004358:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	3361      	adds	r3, #97	; 0x61
 8004368:	2206      	movs	r2, #6
 800436a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f004 f94b 	bl	8008612 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800437c:	e331      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	d12e      	bne.n	80043f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a0:	461a      	mov	r2, r3
 80043a2:	2320      	movs	r3, #32
 80043a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	333d      	adds	r3, #61	; 0x3d
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	f040 8313 	bne.w	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	212c      	movs	r1, #44	; 0x2c
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	333d      	adds	r3, #61	; 0x3d
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3360      	adds	r3, #96	; 0x60
 80043dc:	2202      	movs	r2, #2
 80043de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f004 f911 	bl	8008612 <USB_HC_Halt>
}
 80043f0:	e2f7      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004408:	d112      	bne.n	8004430 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4413      	add	r3, r2
 8004412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004416:	461a      	mov	r2, r3
 8004418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800441c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f004 f8f2 	bl	8008612 <USB_HC_Halt>
}
 800442e:	e2d8      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d140      	bne.n	80044c8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	335c      	adds	r3, #92	; 0x5c
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d111      	bne.n	8004492 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	333d      	adds	r3, #61	; 0x3d
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448c:	461a      	mov	r2, r3
 800448e:	2340      	movs	r3, #64	; 0x40
 8004490:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	4413      	add	r3, r2
 800449a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449e:	461a      	mov	r2, r3
 80044a0:	2301      	movs	r3, #1
 80044a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3361      	adds	r3, #97	; 0x61
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f004 f8a6 	bl	8008612 <USB_HC_Halt>
}
 80044c6:	e28c      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d12c      	bne.n	8004538 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3361      	adds	r3, #97	; 0x61
 80044ec:	2204      	movs	r2, #4
 80044ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	333d      	adds	r3, #61	; 0x3d
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	335c      	adds	r3, #92	; 0x5c
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f004 f877 	bl	8008612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	461a      	mov	r2, r3
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	6093      	str	r3, [r2, #8]
}
 8004536:	e254      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b08      	cmp	r3, #8
 800454c:	d11a      	bne.n	8004584 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	461a      	mov	r2, r3
 800455c:	2308      	movs	r3, #8
 800455e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3361      	adds	r3, #97	; 0x61
 800456e:	2205      	movs	r2, #5
 8004570:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	4611      	mov	r1, r2
 800457c:	4618      	mov	r0, r3
 800457e:	f004 f848 	bl	8008612 <USB_HC_Halt>
}
 8004582:	e22e      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b10      	cmp	r3, #16
 8004598:	d140      	bne.n	800461c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	212c      	movs	r1, #44	; 0x2c
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	335c      	adds	r3, #92	; 0x5c
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	212c      	movs	r1, #44	; 0x2c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3361      	adds	r3, #97	; 0x61
 80045ba:	2203      	movs	r2, #3
 80045bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	333d      	adds	r3, #61	; 0x3d
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d112      	bne.n	80045f8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	333c      	adds	r3, #60	; 0x3c
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	333d      	adds	r3, #61	; 0x3d
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f004 f805 	bl	8008612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	461a      	mov	r2, r3
 8004616:	2310      	movs	r3, #16
 8004618:	6093      	str	r3, [r2, #8]
}
 800461a:	e1e2      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d164      	bne.n	80046fc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d111      	bne.n	800465e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	212c      	movs	r1, #44	; 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	3361      	adds	r3, #97	; 0x61
 8004648:	2206      	movs	r2, #6
 800464a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f003 ffdb 	bl	8008612 <USB_HC_Halt>
 800465c:	e044      	b.n	80046e8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	335c      	adds	r3, #92	; 0x5c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	202c      	movs	r0, #44	; 0x2c
 8004676:	fb00 f303 	mul.w	r3, r0, r3
 800467a:	440b      	add	r3, r1
 800467c:	335c      	adds	r3, #92	; 0x5c
 800467e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	335c      	adds	r3, #92	; 0x5c
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d920      	bls.n	80046d6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	212c      	movs	r1, #44	; 0x2c
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	335c      	adds	r3, #92	; 0x5c
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	212c      	movs	r1, #44	; 0x2c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	3360      	adds	r3, #96	; 0x60
 80046b4:	2204      	movs	r2, #4
 80046b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	b2d9      	uxtb	r1, r3
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	202c      	movs	r0, #44	; 0x2c
 80046c2:	fb00 f303 	mul.w	r3, r0, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	3360      	adds	r3, #96	; 0x60
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f009 fc24 	bl	800df1c <HAL_HCD_HC_NotifyURBChange_Callback>
 80046d4:	e008      	b.n	80046e8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	3360      	adds	r3, #96	; 0x60
 80046e4:	2202      	movs	r2, #2
 80046e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	461a      	mov	r2, r3
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	6093      	str	r3, [r2, #8]
}
 80046fa:	e172      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	4413      	add	r3, r2
 8004704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d11b      	bne.n	800474c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3361      	adds	r3, #97	; 0x61
 8004722:	2208      	movs	r2, #8
 8004724:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f003 ff6e 	bl	8008612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004742:	461a      	mov	r2, r3
 8004744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004748:	6093      	str	r3, [r2, #8]
}
 800474a:	e14a      	b.n	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b02      	cmp	r3, #2
 8004760:	f040 813f 	bne.w	80049e2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	3361      	adds	r3, #97	; 0x61
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d17d      	bne.n	8004874 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	3360      	adds	r3, #96	; 0x60
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	212c      	movs	r1, #44	; 0x2c
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	4413      	add	r3, r2
 8004796:	333f      	adds	r3, #63	; 0x3f
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d00a      	beq.n	80047b4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	333f      	adds	r3, #63	; 0x3f
 80047ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	f040 8100 	bne.w	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d113      	bne.n	80047e4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3355      	adds	r3, #85	; 0x55
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2d8      	uxtb	r0, r3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	3355      	adds	r3, #85	; 0x55
 80047e0:	4602      	mov	r2, r0
 80047e2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f040 80e3 	bne.w	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	334c      	adds	r3, #76	; 0x4c
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80d8 	beq.w	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	212c      	movs	r1, #44	; 0x2c
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	4413      	add	r3, r2
 8004810:	334c      	adds	r3, #76	; 0x4c
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	202c      	movs	r0, #44	; 0x2c
 800481a:	fb00 f202 	mul.w	r2, r0, r2
 800481e:	440a      	add	r2, r1
 8004820:	3240      	adds	r2, #64	; 0x40
 8004822:	8812      	ldrh	r2, [r2, #0]
 8004824:	4413      	add	r3, r2
 8004826:	3b01      	subs	r3, #1
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	202c      	movs	r0, #44	; 0x2c
 800482e:	fb00 f202 	mul.w	r2, r0, r2
 8004832:	440a      	add	r2, r1
 8004834:	3240      	adds	r2, #64	; 0x40
 8004836:	8812      	ldrh	r2, [r2, #0]
 8004838:	fbb3 f3f2 	udiv	r3, r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80b5 	beq.w	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	212c      	movs	r1, #44	; 0x2c
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	3355      	adds	r3, #85	; 0x55
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	f083 0301 	eor.w	r3, r3, #1
 800485e:	b2d8      	uxtb	r0, r3
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3355      	adds	r3, #85	; 0x55
 800486e:	4602      	mov	r2, r0
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e09f      	b.n	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	3361      	adds	r3, #97	; 0x61
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d109      	bne.n	800489c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3360      	adds	r3, #96	; 0x60
 8004896:	2202      	movs	r2, #2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e08b      	b.n	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3361      	adds	r3, #97	; 0x61
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d109      	bne.n	80048c4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	3360      	adds	r3, #96	; 0x60
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	e077      	b.n	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3361      	adds	r3, #97	; 0x61
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d109      	bne.n	80048ec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3360      	adds	r3, #96	; 0x60
 80048e6:	2205      	movs	r2, #5
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e063      	b.n	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	212c      	movs	r1, #44	; 0x2c
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	3361      	adds	r3, #97	; 0x61
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b06      	cmp	r3, #6
 80048fe:	d009      	beq.n	8004914 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	212c      	movs	r1, #44	; 0x2c
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4413      	add	r3, r2
 800490c:	3361      	adds	r3, #97	; 0x61
 800490e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004910:	2b08      	cmp	r3, #8
 8004912:	d14f      	bne.n	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	335c      	adds	r3, #92	; 0x5c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	202c      	movs	r0, #44	; 0x2c
 800492c:	fb00 f303 	mul.w	r3, r0, r3
 8004930:	440b      	add	r3, r1
 8004932:	335c      	adds	r3, #92	; 0x5c
 8004934:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	212c      	movs	r1, #44	; 0x2c
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	335c      	adds	r3, #92	; 0x5c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d912      	bls.n	8004970 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	212c      	movs	r1, #44	; 0x2c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	335c      	adds	r3, #92	; 0x5c
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	212c      	movs	r1, #44	; 0x2c
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	4413      	add	r3, r2
 8004968:	3360      	adds	r3, #96	; 0x60
 800496a:	2204      	movs	r2, #4
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e021      	b.n	80049b4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	212c      	movs	r1, #44	; 0x2c
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	4413      	add	r3, r2
 800497c:	3360      	adds	r3, #96	; 0x60
 800497e:	2202      	movs	r2, #2
 8004980:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004998:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049a0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	461a      	mov	r2, r3
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	461a      	mov	r2, r3
 80049c2:	2302      	movs	r3, #2
 80049c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	b2d9      	uxtb	r1, r3
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	202c      	movs	r0, #44	; 0x2c
 80049d0:	fb00 f303 	mul.w	r3, r0, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3360      	adds	r3, #96	; 0x60
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f009 fa9d 	bl	800df1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049e2:	bf00      	nop
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b08a      	sub	sp, #40	; 0x28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	0c5b      	lsrs	r3, r3, #17
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a1e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d004      	beq.n	8004a30 <HCD_RXQLVL_IRQHandler+0x46>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	f000 80a9 	beq.w	8004b80 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a2e:	e0aa      	b.n	8004b86 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 80a6 	beq.w	8004b84 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	3344      	adds	r3, #68	; 0x44
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 809b 	beq.w	8004b84 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3350      	adds	r3, #80	; 0x50
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	441a      	add	r2, r3
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	202c      	movs	r0, #44	; 0x2c
 8004a68:	fb00 f303 	mul.w	r3, r0, r3
 8004a6c:	440b      	add	r3, r1
 8004a6e:	334c      	adds	r3, #76	; 0x4c
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d87a      	bhi.n	8004b6c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	212c      	movs	r1, #44	; 0x2c
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	3344      	adds	r3, #68	; 0x44
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f003 f916 	bl	8007cc0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3344      	adds	r3, #68	; 0x44
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	441a      	add	r2, r3
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	202c      	movs	r0, #44	; 0x2c
 8004aae:	fb00 f303 	mul.w	r3, r0, r3
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3344      	adds	r3, #68	; 0x44
 8004ab6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3350      	adds	r3, #80	; 0x50
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	441a      	add	r2, r3
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	202c      	movs	r0, #44	; 0x2c
 8004ad2:	fb00 f303 	mul.w	r3, r0, r3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3350      	adds	r3, #80	; 0x50
 8004ada:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	0cdb      	lsrs	r3, r3, #19
 8004aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3340      	adds	r3, #64	; 0x40
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d13c      	bne.n	8004b84 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d039      	beq.n	8004b84 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b26:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	212c      	movs	r1, #44	; 0x2c
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3354      	adds	r3, #84	; 0x54
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	f083 0301 	eor.w	r3, r3, #1
 8004b56:	b2d8      	uxtb	r0, r3
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3354      	adds	r3, #84	; 0x54
 8004b66:	4602      	mov	r2, r0
 8004b68:	701a      	strb	r2, [r3, #0]
      break;
 8004b6a:	e00b      	b.n	8004b84 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	3360      	adds	r3, #96	; 0x60
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	701a      	strb	r2, [r3, #0]
      break;
 8004b7e:	e001      	b.n	8004b84 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b84:	bf00      	nop
  }
}
 8004b86:	bf00      	nop
 8004b88:	3728      	adds	r7, #40	; 0x28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d10b      	bne.n	8004bde <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f009 f987 	bl	800dee4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d132      	bne.n	8004c4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f043 0308 	orr.w	r3, r3, #8
 8004bee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d126      	bne.n	8004c48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d113      	bne.n	8004c2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c0c:	d106      	bne.n	8004c1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2102      	movs	r1, #2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f003 f9c1 	bl	8007f9c <USB_InitFSLSPClkSel>
 8004c1a:	e011      	b.n	8004c40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f003 f9ba 	bl	8007f9c <USB_InitFSLSPClkSel>
 8004c28:	e00a      	b.n	8004c40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d106      	bne.n	8004c40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004c3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f009 f97d 	bl	800df40 <HAL_HCD_PortEnabled_Callback>
 8004c46:	e002      	b.n	8004c4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f009 f987 	bl	800df5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d103      	bne.n	8004c60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f043 0320 	orr.w	r3, r3, #32
 8004c5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c66:	461a      	mov	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6013      	str	r3, [r2, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e12b      	b.n	8004ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fce8 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f001 fa20 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8004cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4a81      	ldr	r2, [pc, #516]	; (8004ee8 <HAL_I2C_Init+0x274>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d807      	bhi.n	8004cf8 <HAL_I2C_Init+0x84>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a80      	ldr	r2, [pc, #512]	; (8004eec <HAL_I2C_Init+0x278>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bf94      	ite	ls
 8004cf0:	2301      	movls	r3, #1
 8004cf2:	2300      	movhi	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e006      	b.n	8004d06 <HAL_I2C_Init+0x92>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a7d      	ldr	r2, [pc, #500]	; (8004ef0 <HAL_I2C_Init+0x27c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	bf94      	ite	ls
 8004d00:	2301      	movls	r3, #1
 8004d02:	2300      	movhi	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0e7      	b.n	8004ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a78      	ldr	r2, [pc, #480]	; (8004ef4 <HAL_I2C_Init+0x280>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	0c9b      	lsrs	r3, r3, #18
 8004d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a6a      	ldr	r2, [pc, #424]	; (8004ee8 <HAL_I2C_Init+0x274>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d802      	bhi.n	8004d48 <HAL_I2C_Init+0xd4>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3301      	adds	r3, #1
 8004d46:	e009      	b.n	8004d5c <HAL_I2C_Init+0xe8>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	4a69      	ldr	r2, [pc, #420]	; (8004ef8 <HAL_I2C_Init+0x284>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	099b      	lsrs	r3, r3, #6
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	495c      	ldr	r1, [pc, #368]	; (8004ee8 <HAL_I2C_Init+0x274>)
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	d819      	bhi.n	8004db0 <HAL_I2C_Init+0x13c>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1e59      	subs	r1, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d8a:	1c59      	adds	r1, r3, #1
 8004d8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d90:	400b      	ands	r3, r1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_I2C_Init+0x138>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1e59      	subs	r1, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004da4:	3301      	adds	r3, #1
 8004da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004daa:	e051      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004dac:	2304      	movs	r3, #4
 8004dae:	e04f      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <HAL_I2C_Init+0x168>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1e58      	subs	r0, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	440b      	add	r3, r1
 8004dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e012      	b.n	8004e02 <HAL_I2C_Init+0x18e>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1e58      	subs	r0, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	0099      	lsls	r1, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Init+0x196>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e022      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10e      	bne.n	8004e30 <HAL_I2C_Init+0x1bc>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1e58      	subs	r0, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6859      	ldr	r1, [r3, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	440b      	add	r3, r1
 8004e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e24:	3301      	adds	r3, #1
 8004e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2e:	e00f      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1e58      	subs	r0, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	0099      	lsls	r1, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	6809      	ldr	r1, [r1, #0]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6911      	ldr	r1, [r2, #16]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68d2      	ldr	r2, [r2, #12]
 8004e8a:	4311      	orrs	r1, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	000186a0 	.word	0x000186a0
 8004eec:	001e847f 	.word	0x001e847f
 8004ef0:	003d08ff 	.word	0x003d08ff
 8004ef4:	431bde83 	.word	0x431bde83
 8004ef8:	10624dd3 	.word	0x10624dd3

08004efc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e128      	b.n	8005160 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a90      	ldr	r2, [pc, #576]	; (8005168 <HAL_I2S_Init+0x26c>)
 8004f26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fc fbe9 	bl	8001700 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f44:	f023 030f 	bic.w	r3, r3, #15
 8004f48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d060      	beq.n	800501c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f62:	2310      	movs	r3, #16
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e001      	b.n	8004f6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f68:	2320      	movs	r3, #32
 8004f6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b20      	cmp	r3, #32
 8004f72:	d802      	bhi.n	8004f7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f001 f9d8 	bl	8006330 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f80:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d125      	bne.n	8004fd8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	3305      	adds	r3, #5
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e01f      	b.n	8004ff6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	461a      	mov	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	3305      	adds	r3, #5
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	e00e      	b.n	8004ff6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	3305      	adds	r3, #5
 8004ff4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4a5c      	ldr	r2, [pc, #368]	; (800516c <HAL_I2S_Init+0x270>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	08db      	lsrs	r3, r3, #3
 8005000:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	e003      	b.n	8005024 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800501c:	2302      	movs	r3, #2
 800501e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d902      	bls.n	8005030 <HAL_I2S_Init+0x134>
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	2bff      	cmp	r3, #255	; 0xff
 800502e:	d907      	bls.n	8005040 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e08f      	b.n	8005160 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	ea42 0103 	orr.w	r1, r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	430a      	orrs	r2, r1
 8005052:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800505e:	f023 030f 	bic.w	r3, r3, #15
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6851      	ldr	r1, [r2, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68d2      	ldr	r2, [r2, #12]
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6992      	ldr	r2, [r2, #24]
 8005076:	430a      	orrs	r2, r1
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005082:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d161      	bne.n	8005150 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <HAL_I2S_Init+0x274>)
 8005090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a37      	ldr	r2, [pc, #220]	; (8005174 <HAL_I2S_Init+0x278>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_I2S_Init+0x1a4>
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <HAL_I2S_Init+0x27c>)
 800509e:	e001      	b.n	80050a4 <HAL_I2S_Init+0x1a8>
 80050a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	4932      	ldr	r1, [pc, #200]	; (8005174 <HAL_I2S_Init+0x278>)
 80050ac:	428a      	cmp	r2, r1
 80050ae:	d101      	bne.n	80050b4 <HAL_I2S_Init+0x1b8>
 80050b0:	4a31      	ldr	r2, [pc, #196]	; (8005178 <HAL_I2S_Init+0x27c>)
 80050b2:	e001      	b.n	80050b8 <HAL_I2S_Init+0x1bc>
 80050b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80050b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80050bc:	f023 030f 	bic.w	r3, r3, #15
 80050c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <HAL_I2S_Init+0x278>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_I2S_Init+0x1d4>
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_I2S_Init+0x27c>)
 80050ce:	e001      	b.n	80050d4 <HAL_I2S_Init+0x1d8>
 80050d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d4:	2202      	movs	r2, #2
 80050d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a25      	ldr	r2, [pc, #148]	; (8005174 <HAL_I2S_Init+0x278>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d101      	bne.n	80050e6 <HAL_I2S_Init+0x1ea>
 80050e2:	4b25      	ldr	r3, [pc, #148]	; (8005178 <HAL_I2S_Init+0x27c>)
 80050e4:	e001      	b.n	80050ea <HAL_I2S_Init+0x1ee>
 80050e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f6:	d003      	beq.n	8005100 <HAL_I2S_Init+0x204>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e001      	b.n	800510c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005108:	2300      	movs	r3, #0
 800510a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005116:	4313      	orrs	r3, r2
 8005118:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005120:	4313      	orrs	r3, r2
 8005122:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800512a:	4313      	orrs	r3, r2
 800512c:	b29a      	uxth	r2, r3
 800512e:	897b      	ldrh	r3, [r7, #10]
 8005130:	4313      	orrs	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005138:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <HAL_I2S_Init+0x278>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <HAL_I2S_Init+0x24c>
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <HAL_I2S_Init+0x27c>)
 8005146:	e001      	b.n	800514c <HAL_I2S_Init+0x250>
 8005148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514c:	897a      	ldrh	r2, [r7, #10]
 800514e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	08005273 	.word	0x08005273
 800516c:	cccccccd 	.word	0xcccccccd
 8005170:	08005389 	.word	0x08005389
 8005174:	40003800 	.word	0x40003800
 8005178:	40003400 	.word	0x40003400

0800517c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	881a      	ldrh	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10e      	bne.n	800520c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ffb8 	bl	800517c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	b292      	uxth	r2, r2
 8005228:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	1c9a      	adds	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10e      	bne.n	800526a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800525a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff93 	bl	8005190 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b04      	cmp	r3, #4
 800528c:	d13a      	bne.n	8005304 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d109      	bne.n	80052ac <I2S_IRQHandler+0x3a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d102      	bne.n	80052ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ffb4 	bl	8005214 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d126      	bne.n	8005304 <I2S_IRQHandler+0x92>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d11f      	bne.n	8005304 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	f043 0202 	orr.w	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff50 	bl	80051a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b03      	cmp	r3, #3
 800530e:	d136      	bne.n	800537e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d109      	bne.n	800532e <I2S_IRQHandler+0xbc>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005324:	2b80      	cmp	r3, #128	; 0x80
 8005326:	d102      	bne.n	800532e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff45 	bl	80051b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d122      	bne.n	800537e <I2S_IRQHandler+0x10c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b20      	cmp	r3, #32
 8005344:	d11b      	bne.n	800537e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005354:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f043 0204 	orr.w	r2, r3, #4
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ff13 	bl	80051a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a92      	ldr	r2, [pc, #584]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d101      	bne.n	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80053a2:	4b92      	ldr	r3, [pc, #584]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053a4:	e001      	b.n	80053aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80053a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a8b      	ldr	r2, [pc, #556]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d101      	bne.n	80053c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80053c0:	4b8a      	ldr	r3, [pc, #552]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053c2:	e001      	b.n	80053c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80053c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d4:	d004      	beq.n	80053e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8099 	bne.w	8005512 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d107      	bne.n	80053fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f925 	bl	8005644 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f9c8 	bl	80057a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d13a      	bne.n	8005494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d035      	beq.n	8005494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6e      	ldr	r2, [pc, #440]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005432:	4b6e      	ldr	r3, [pc, #440]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005434:	e001      	b.n	800543a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4969      	ldr	r1, [pc, #420]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005442:	428b      	cmp	r3, r1
 8005444:	d101      	bne.n	800544a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005446:	4b69      	ldr	r3, [pc, #420]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005448:	e001      	b.n	800544e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800544a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800544e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005452:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005462:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	f043 0202 	orr.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fe88 	bl	80051a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b08      	cmp	r3, #8
 800549c:	f040 80c3 	bne.w	8005626 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80bd 	beq.w	8005626 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a49      	ldr	r2, [pc, #292]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80054c6:	4b49      	ldr	r3, [pc, #292]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054c8:	e001      	b.n	80054ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80054ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4944      	ldr	r1, [pc, #272]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054d6:	428b      	cmp	r3, r1
 80054d8:	d101      	bne.n	80054de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80054da:	4b44      	ldr	r3, [pc, #272]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054dc:	e001      	b.n	80054e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80054de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f043 0204 	orr.w	r2, r3, #4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fe4a 	bl	80051a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005510:	e089      	b.n	8005626 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d107      	bne.n	800552c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8be 	bl	80056a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d107      	bne.n	8005546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f8fd 	bl	8005740 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d12f      	bne.n	80055b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02a      	beq.n	80055b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005568:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005574:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005576:	e001      	b.n	800557c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4919      	ldr	r1, [pc, #100]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005584:	428b      	cmp	r3, r1
 8005586:	d101      	bne.n	800558c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800558a:	e001      	b.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800558c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005594:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f043 0202 	orr.w	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fdfa 	bl	80051a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d136      	bne.n	8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d031      	beq.n	8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a07      	ldr	r2, [pc, #28]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d101      	bne.n	80055d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055d0:	e001      	b.n	80055d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80055d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4902      	ldr	r1, [pc, #8]	; (80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055de:	428b      	cmp	r3, r1
 80055e0:	d106      	bne.n	80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80055e2:	4b02      	ldr	r3, [pc, #8]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055e4:	e006      	b.n	80055f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80055e6:	bf00      	nop
 80055e8:	40003800 	.word	0x40003800
 80055ec:	40003400 	.word	0x40003400
 80055f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005608:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f043 0204 	orr.w	r2, r3, #4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fdc0 	bl	80051a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005624:	e000      	b.n	8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005626:	bf00      	nop
}
 8005628:	bf00      	nop
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	1c99      	adds	r1, r3, #2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6251      	str	r1, [r2, #36]	; 0x24
 8005656:	881a      	ldrh	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d113      	bne.n	800569e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005684:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ffc9 	bl	8005630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	1c99      	adds	r1, r3, #2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6251      	str	r1, [r2, #36]	; 0x24
 80056ba:	8819      	ldrh	r1, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <I2SEx_TxISR_I2SExt+0x90>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <I2SEx_TxISR_I2SExt+0x22>
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <I2SEx_TxISR_I2SExt+0x94>)
 80056c8:	e001      	b.n	80056ce <I2SEx_TxISR_I2SExt+0x26>
 80056ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ce:	460a      	mov	r2, r1
 80056d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d121      	bne.n	800572e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <I2SEx_TxISR_I2SExt+0x90>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <I2SEx_TxISR_I2SExt+0x50>
 80056f4:	4b11      	ldr	r3, [pc, #68]	; (800573c <I2SEx_TxISR_I2SExt+0x94>)
 80056f6:	e001      	b.n	80056fc <I2SEx_TxISR_I2SExt+0x54>
 80056f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	490d      	ldr	r1, [pc, #52]	; (8005738 <I2SEx_TxISR_I2SExt+0x90>)
 8005704:	428b      	cmp	r3, r1
 8005706:	d101      	bne.n	800570c <I2SEx_TxISR_I2SExt+0x64>
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <I2SEx_TxISR_I2SExt+0x94>)
 800570a:	e001      	b.n	8005710 <I2SEx_TxISR_I2SExt+0x68>
 800570c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff81 	bl	8005630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40003800 	.word	0x40003800
 800573c:	40003400 	.word	0x40003400

08005740 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68d8      	ldr	r0, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	1c99      	adds	r1, r3, #2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005758:	b282      	uxth	r2, r0
 800575a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d113      	bne.n	800579c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005782:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ff4a 	bl	8005630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a20      	ldr	r2, [pc, #128]	; (8005834 <I2SEx_RxISR_I2SExt+0x90>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <I2SEx_RxISR_I2SExt+0x16>
 80057b6:	4b20      	ldr	r3, [pc, #128]	; (8005838 <I2SEx_RxISR_I2SExt+0x94>)
 80057b8:	e001      	b.n	80057be <I2SEx_RxISR_I2SExt+0x1a>
 80057ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057be:	68d8      	ldr	r0, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	1c99      	adds	r1, r3, #2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80057ca:	b282      	uxth	r2, r0
 80057cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d121      	bne.n	800582a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a12      	ldr	r2, [pc, #72]	; (8005834 <I2SEx_RxISR_I2SExt+0x90>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d101      	bne.n	80057f4 <I2SEx_RxISR_I2SExt+0x50>
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <I2SEx_RxISR_I2SExt+0x94>)
 80057f2:	e001      	b.n	80057f8 <I2SEx_RxISR_I2SExt+0x54>
 80057f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	490d      	ldr	r1, [pc, #52]	; (8005834 <I2SEx_RxISR_I2SExt+0x90>)
 8005800:	428b      	cmp	r3, r1
 8005802:	d101      	bne.n	8005808 <I2SEx_RxISR_I2SExt+0x64>
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <I2SEx_RxISR_I2SExt+0x94>)
 8005806:	e001      	b.n	800580c <I2SEx_RxISR_I2SExt+0x68>
 8005808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800580c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005810:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ff03 	bl	8005630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40003800 	.word	0x40003800
 8005838:	40003400 	.word	0x40003400

0800583c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e267      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d075      	beq.n	8005946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800585a:	4b88      	ldr	r3, [pc, #544]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b04      	cmp	r3, #4
 8005864:	d00c      	beq.n	8005880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005866:	4b85      	ldr	r3, [pc, #532]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800586e:	2b08      	cmp	r3, #8
 8005870:	d112      	bne.n	8005898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005872:	4b82      	ldr	r3, [pc, #520]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800587e:	d10b      	bne.n	8005898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	4b7e      	ldr	r3, [pc, #504]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d05b      	beq.n	8005944 <HAL_RCC_OscConfig+0x108>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d157      	bne.n	8005944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e242      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d106      	bne.n	80058b0 <HAL_RCC_OscConfig+0x74>
 80058a2:	4b76      	ldr	r3, [pc, #472]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a75      	ldr	r2, [pc, #468]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e01d      	b.n	80058ec <HAL_RCC_OscConfig+0xb0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x98>
 80058ba:	4b70      	ldr	r3, [pc, #448]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a6f      	ldr	r2, [pc, #444]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4b6d      	ldr	r3, [pc, #436]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6c      	ldr	r2, [pc, #432]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0xb0>
 80058d4:	4b69      	ldr	r3, [pc, #420]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a68      	ldr	r2, [pc, #416]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b66      	ldr	r3, [pc, #408]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a65      	ldr	r2, [pc, #404]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80058e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f4:	f7fc faee 	bl	8001ed4 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058fc:	f7fc faea 	bl	8001ed4 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e207      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b5b      	ldr	r3, [pc, #364]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0xc0>
 800591a:	e014      	b.n	8005946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fc fada 	bl	8001ed4 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005924:	f7fc fad6 	bl	8001ed4 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e1f3      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005936:	4b51      	ldr	r3, [pc, #324]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0xe8>
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d063      	beq.n	8005a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005952:	4b4a      	ldr	r3, [pc, #296]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595e:	4b47      	ldr	r3, [pc, #284]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005966:	2b08      	cmp	r3, #8
 8005968:	d11c      	bne.n	80059a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d116      	bne.n	80059a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005976:	4b41      	ldr	r3, [pc, #260]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_RCC_OscConfig+0x152>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d001      	beq.n	800598e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e1c7      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598e:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4937      	ldr	r1, [pc, #220]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a2:	e03a      	b.n	8005a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ac:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <HAL_RCC_OscConfig+0x244>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fc fa8f 	bl	8001ed4 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ba:	f7fc fa8b 	bl	8001ed4 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e1a8      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059cc:	4b2b      	ldr	r3, [pc, #172]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d8:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4925      	ldr	r1, [pc, #148]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	600b      	str	r3, [r1, #0]
 80059ec:	e015      	b.n	8005a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <HAL_RCC_OscConfig+0x244>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fc fa6e 	bl	8001ed4 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059fc:	f7fc fa6a 	bl	8001ed4 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e187      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d036      	beq.n	8005a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <HAL_RCC_OscConfig+0x248>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fc fa4e 	bl	8001ed4 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a3c:	f7fc fa4a 	bl	8001ed4 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e167      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_OscConfig+0x240>)
 8005a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x200>
 8005a5a:	e01b      	b.n	8005a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <HAL_RCC_OscConfig+0x248>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a62:	f7fc fa37 	bl	8001ed4 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a68:	e00e      	b.n	8005a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a6a:	f7fc fa33 	bl	8001ed4 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d907      	bls.n	8005a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e150      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	42470000 	.word	0x42470000
 8005a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a88:	4b88      	ldr	r3, [pc, #544]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1ea      	bne.n	8005a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8097 	beq.w	8005bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aa6:	4b81      	ldr	r3, [pc, #516]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10f      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	4b7d      	ldr	r3, [pc, #500]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	4a7c      	ldr	r2, [pc, #496]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ac2:	4b7a      	ldr	r3, [pc, #488]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad2:	4b77      	ldr	r3, [pc, #476]	; (8005cb0 <HAL_RCC_OscConfig+0x474>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d118      	bne.n	8005b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ade:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <HAL_RCC_OscConfig+0x474>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a73      	ldr	r2, [pc, #460]	; (8005cb0 <HAL_RCC_OscConfig+0x474>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aea:	f7fc f9f3 	bl	8001ed4 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fc f9ef 	bl	8001ed4 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e10c      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b04:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <HAL_RCC_OscConfig+0x474>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d106      	bne.n	8005b26 <HAL_RCC_OscConfig+0x2ea>
 8005b18:	4b64      	ldr	r3, [pc, #400]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1c:	4a63      	ldr	r2, [pc, #396]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	6713      	str	r3, [r2, #112]	; 0x70
 8005b24:	e01c      	b.n	8005b60 <HAL_RCC_OscConfig+0x324>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d10c      	bne.n	8005b48 <HAL_RCC_OscConfig+0x30c>
 8005b2e:	4b5f      	ldr	r3, [pc, #380]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a5e      	ldr	r2, [pc, #376]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b34:	f043 0304 	orr.w	r3, r3, #4
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	4b5c      	ldr	r3, [pc, #368]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	4a5b      	ldr	r2, [pc, #364]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
 8005b46:	e00b      	b.n	8005b60 <HAL_RCC_OscConfig+0x324>
 8005b48:	4b58      	ldr	r3, [pc, #352]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	4a57      	ldr	r2, [pc, #348]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70
 8005b54:	4b55      	ldr	r3, [pc, #340]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	4a54      	ldr	r2, [pc, #336]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b5a:	f023 0304 	bic.w	r3, r3, #4
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d015      	beq.n	8005b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fc f9b4 	bl	8001ed4 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b70:	f7fc f9b0 	bl	8001ed4 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e0cb      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b86:	4b49      	ldr	r3, [pc, #292]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0ee      	beq.n	8005b70 <HAL_RCC_OscConfig+0x334>
 8005b92:	e014      	b.n	8005bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b94:	f7fc f99e 	bl	8001ed4 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b9a:	e00a      	b.n	8005bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b9c:	f7fc f99a 	bl	8001ed4 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e0b5      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb2:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ee      	bne.n	8005b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc4:	4b39      	ldr	r3, [pc, #228]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	4a38      	ldr	r2, [pc, #224]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80a1 	beq.w	8005d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bda:	4b34      	ldr	r3, [pc, #208]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 030c 	and.w	r3, r3, #12
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d05c      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d141      	bne.n	8005c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bee:	4b31      	ldr	r3, [pc, #196]	; (8005cb4 <HAL_RCC_OscConfig+0x478>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf4:	f7fc f96e 	bl	8001ed4 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfc:	f7fc f96a 	bl	8001ed4 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e087      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0e:	4b27      	ldr	r3, [pc, #156]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	019b      	lsls	r3, r3, #6
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	3b01      	subs	r3, #1
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	491b      	ldr	r1, [pc, #108]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c44:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <HAL_RCC_OscConfig+0x478>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4a:	f7fc f943 	bl	8001ed4 <HAL_GetTick>
 8005c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c52:	f7fc f93f 	bl	8001ed4 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e05c      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x416>
 8005c70:	e054      	b.n	8005d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <HAL_RCC_OscConfig+0x478>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fc f92c 	bl	8001ed4 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fc f928 	bl	8001ed4 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e045      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCC_OscConfig+0x470>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x444>
 8005c9e:	e03d      	b.n	8005d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e038      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40007000 	.word	0x40007000
 8005cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <HAL_RCC_OscConfig+0x4ec>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d028      	beq.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d121      	bne.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d11a      	bne.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ce8:	4013      	ands	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d111      	bne.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	3b01      	subs	r3, #1
 8005d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d107      	bne.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800

08005d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0cc      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d40:	4b68      	ldr	r3, [pc, #416]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d90c      	bls.n	8005d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4e:	4b65      	ldr	r3, [pc, #404]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d56:	4b63      	ldr	r3, [pc, #396]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d001      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0b8      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d80:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4a58      	ldr	r2, [pc, #352]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d98:	4b53      	ldr	r3, [pc, #332]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a52      	ldr	r2, [pc, #328]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b50      	ldr	r3, [pc, #320]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	494d      	ldr	r1, [pc, #308]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d044      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	4b47      	ldr	r3, [pc, #284]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d119      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e07f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d003      	beq.n	8005dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d107      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e06f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e067      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f023 0203 	bic.w	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4934      	ldr	r1, [pc, #208]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e1c:	f7fc f85a 	bl	8001ed4 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e22:	e00a      	b.n	8005e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e24:	f7fc f856 	bl	8001ed4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e04f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 020c 	and.w	r2, r3, #12
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1eb      	bne.n	8005e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4c:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d20c      	bcs.n	8005e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5a:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e62:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e032      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e80:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4916      	ldr	r1, [pc, #88]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	490e      	ldr	r1, [pc, #56]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eb2:	f000 f821 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	490a      	ldr	r1, [pc, #40]	; (8005eec <HAL_RCC_ClockConfig+0x1c0>)
 8005ec4:	5ccb      	ldrb	r3, [r1, r3]
 8005ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eca:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fb ffba 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40023c00 	.word	0x40023c00
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	080191b0 	.word	0x080191b0
 8005ef0:	20000004 	.word	0x20000004
 8005ef4:	20000008 	.word	0x20000008

08005ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005efc:	b094      	sub	sp, #80	; 0x50
 8005efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	647b      	str	r3, [r7, #68]	; 0x44
 8005f04:	2300      	movs	r3, #0
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f08:	2300      	movs	r3, #0
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f10:	4b79      	ldr	r3, [pc, #484]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d00d      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x40>
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	f200 80e1 	bhi.w	80060e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x34>
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d003      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f2a:	e0db      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f2c:	4b73      	ldr	r3, [pc, #460]	; (80060fc <HAL_RCC_GetSysClockFreq+0x204>)
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f30:	e0db      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f32:	4b73      	ldr	r3, [pc, #460]	; (8006100 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f36:	e0d8      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f38:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f42:	4b6d      	ldr	r3, [pc, #436]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d063      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	099b      	lsrs	r3, r3, #6
 8005f54:	2200      	movs	r2, #0
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 8005f62:	2300      	movs	r3, #0
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
 8005f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	f04f 0000 	mov.w	r0, #0
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f7c:	0150      	lsls	r0, r2, #5
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4621      	mov	r1, r4
 8005f84:	1a51      	subs	r1, r2, r1
 8005f86:	6139      	str	r1, [r7, #16]
 8005f88:	4629      	mov	r1, r5
 8005f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	018b      	lsls	r3, r1, #6
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	018a      	lsls	r2, r1, #6
 8005faa:	4651      	mov	r1, sl
 8005fac:	ebb2 0801 	subs.w	r8, r2, r1
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fca:	4690      	mov	r8, r2
 8005fcc:	4699      	mov	r9, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	eb18 0303 	adds.w	r3, r8, r3
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	eb49 0303 	adc.w	r3, r9, r3
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fea:	4629      	mov	r1, r5
 8005fec:	024b      	lsls	r3, r1, #9
 8005fee:	4621      	mov	r1, r4
 8005ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	024a      	lsls	r2, r1, #9
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffe:	2200      	movs	r2, #0
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
 8006002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006008:	f7fa f99a 	bl	8000340 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4613      	mov	r3, r2
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006014:	e058      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006016:	4b38      	ldr	r3, [pc, #224]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	099b      	lsrs	r3, r3, #6
 800601c:	2200      	movs	r2, #0
 800601e:	4618      	mov	r0, r3
 8006020:	4611      	mov	r1, r2
 8006022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	2300      	movs	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	0159      	lsls	r1, r3, #5
 800603e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006042:	0150      	lsls	r0, r2, #5
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4641      	mov	r1, r8
 800604a:	ebb2 0a01 	subs.w	sl, r2, r1
 800604e:	4649      	mov	r1, r9
 8006050:	eb63 0b01 	sbc.w	fp, r3, r1
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006068:	ebb2 040a 	subs.w	r4, r2, sl
 800606c:	eb63 050b 	sbc.w	r5, r3, fp
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	00eb      	lsls	r3, r5, #3
 800607a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607e:	00e2      	lsls	r2, r4, #3
 8006080:	4614      	mov	r4, r2
 8006082:	461d      	mov	r5, r3
 8006084:	4643      	mov	r3, r8
 8006086:	18e3      	adds	r3, r4, r3
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	464b      	mov	r3, r9
 800608c:	eb45 0303 	adc.w	r3, r5, r3
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800609e:	4629      	mov	r1, r5
 80060a0:	028b      	lsls	r3, r1, #10
 80060a2:	4621      	mov	r1, r4
 80060a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060a8:	4621      	mov	r1, r4
 80060aa:	028a      	lsls	r2, r1, #10
 80060ac:	4610      	mov	r0, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b2:	2200      	movs	r2, #0
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	61fa      	str	r2, [r7, #28]
 80060b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060bc:	f7fa f940 	bl	8000340 <__aeabi_uldivmod>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4613      	mov	r3, r2
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	3301      	adds	r3, #1
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060e2:	e002      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <HAL_RCC_GetSysClockFreq+0x204>)
 80060e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3750      	adds	r7, #80	; 0x50
 80060f0:	46bd      	mov	sp, r7
 80060f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800
 80060fc:	00f42400 	.word	0x00f42400
 8006100:	007a1200 	.word	0x007a1200

08006104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006108:	4b03      	ldr	r3, [pc, #12]	; (8006118 <HAL_RCC_GetHCLKFreq+0x14>)
 800610a:	681b      	ldr	r3, [r3, #0]
}
 800610c:	4618      	mov	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	20000004 	.word	0x20000004

0800611c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006120:	f7ff fff0 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	0a9b      	lsrs	r3, r3, #10
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40023800 	.word	0x40023800
 8006140:	080191c0 	.word	0x080191c0

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006148:	f7ff ffdc 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	0b5b      	lsrs	r3, r3, #13
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4903      	ldr	r1, [pc, #12]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40023800 	.word	0x40023800
 8006168:	080191c0 	.word	0x080191c0

0800616c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006190:	2b00      	cmp	r3, #0
 8006192:	d035      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006194:	4b62      	ldr	r3, [pc, #392]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800619a:	f7fb fe9b 	bl	8001ed4 <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061a0:	e008      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061a2:	f7fb fe97 	bl	8001ed4 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e0b0      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061b4:	4b5b      	ldr	r3, [pc, #364]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f0      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	019a      	lsls	r2, r3, #6
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	071b      	lsls	r3, r3, #28
 80061cc:	4955      	ldr	r1, [pc, #340]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061d4:	4b52      	ldr	r3, [pc, #328]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061da:	f7fb fe7b 	bl	8001ed4 <HAL_GetTick>
 80061de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061e2:	f7fb fe77 	bl	8001ed4 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e090      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f4:	4b4b      	ldr	r3, [pc, #300]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8083 	beq.w	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	4b44      	ldr	r3, [pc, #272]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	4a43      	ldr	r2, [pc, #268]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621c:	6413      	str	r3, [r2, #64]	; 0x40
 800621e:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800622a:	4b3f      	ldr	r3, [pc, #252]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3e      	ldr	r2, [pc, #248]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006234:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006236:	f7fb fe4d 	bl	8001ed4 <HAL_GetTick>
 800623a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800623c:	e008      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800623e:	f7fb fe49 	bl	8001ed4 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e062      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006250:	4b35      	ldr	r3, [pc, #212]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0f0      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800625c:	4b31      	ldr	r3, [pc, #196]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006264:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	d028      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800627a:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006282:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006284:	4b29      	ldr	r3, [pc, #164]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800628a:	4b28      	ldr	r3, [pc, #160]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006290:	4a24      	ldr	r2, [pc, #144]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006296:	4b23      	ldr	r3, [pc, #140]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d114      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062a2:	f7fb fe17 	bl	8001ed4 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a8:	e00a      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062aa:	f7fb fe13 	bl	8001ed4 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e02a      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c0:	4b18      	ldr	r3, [pc, #96]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0ee      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d8:	d10d      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ee:	490d      	ldr	r1, [pc, #52]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	608b      	str	r3, [r1, #8]
 80062f4:	e005      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006300:	6093      	str	r3, [r2, #8]
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	4905      	ldr	r1, [pc, #20]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006310:	4313      	orrs	r3, r2
 8006312:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	42470068 	.word	0x42470068
 8006324:	40023800 	.word	0x40023800
 8006328:	40007000 	.word	0x40007000
 800632c:	42470e40 	.word	0x42470e40

08006330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d13e      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800634e:	4b23      	ldr	r3, [pc, #140]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d12f      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006364:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006366:	617b      	str	r3, [r7, #20]
          break;
 8006368:	e02f      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006376:	d108      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006378:	4b18      	ldr	r3, [pc, #96]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006380:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006382:	fbb2 f3f3 	udiv	r3, r2, r3
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	e007      	b.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006392:	4a15      	ldr	r2, [pc, #84]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800639a:	4b10      	ldr	r3, [pc, #64]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800639c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a0:	099b      	lsrs	r3, r3, #6
 80063a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	fb02 f303 	mul.w	r3, r2, r3
 80063ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b4:	0f1b      	lsrs	r3, r3, #28
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c0:	617b      	str	r3, [r7, #20]
          break;
 80063c2:	e002      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
          break;
 80063c8:	bf00      	nop
        }
      }
      break;
 80063ca:	bf00      	nop
    }
  }
  return frequency;
 80063cc:	697b      	ldr	r3, [r7, #20]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40023800 	.word	0x40023800
 80063e0:	00bb8000 	.word	0x00bb8000
 80063e4:	007a1200 	.word	0x007a1200
 80063e8:	00f42400 	.word	0x00f42400

080063ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e07b      	b.n	80064f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	d108      	bne.n	8006418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800640e:	d009      	beq.n	8006424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	61da      	str	r2, [r3, #28]
 8006416:	e005      	b.n	8006424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fb f9de 	bl	8001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a8:	ea42 0103 	orr.w	r1, r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	0c1b      	lsrs	r3, r3, #16
 80064c2:	f003 0104 	and.w	r1, r3, #4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f003 0210 	and.w	r2, r3, #16
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e03f      	b.n	8006590 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fb f9b3 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2224      	movs	r2, #36	; 0x24
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006540:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 ffd6 	bl	80074f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006556:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006566:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006576:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	; 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d165      	bne.n	800667e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_UART_Transmit_DMA+0x26>
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e05e      	b.n	8006680 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Transmit_DMA+0x38>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e057      	b.n	8006680 <HAL_UART_Transmit_DMA+0xe8>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2221      	movs	r2, #33	; 0x21
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <HAL_UART_Transmit_DMA+0xf0>)
 80065fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006604:	4a21      	ldr	r2, [pc, #132]	; (800668c <HAL_UART_Transmit_DMA+0xf4>)
 8006606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	4a20      	ldr	r2, [pc, #128]	; (8006690 <HAL_UART_Transmit_DMA+0xf8>)
 800660e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006614:	2200      	movs	r2, #0
 8006616:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006618:	f107 0308 	add.w	r3, r7, #8
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	6819      	ldr	r1, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3304      	adds	r3, #4
 800662c:	461a      	mov	r2, r3
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	f7fc fa0c 	bl	8002a4c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800663c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3314      	adds	r3, #20
 800664c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	617b      	str	r3, [r7, #20]
   return(result);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3314      	adds	r3, #20
 8006664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006666:	627a      	str	r2, [r7, #36]	; 0x24
 8006668:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6a39      	ldr	r1, [r7, #32]
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	61fb      	str	r3, [r7, #28]
   return(result);
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3730      	adds	r7, #48	; 0x30
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	08006d8d 	.word	0x08006d8d
 800668c:	08006e27 	.word	0x08006e27
 8006690:	08006f9f 	.word	0x08006f9f

08006694 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d11d      	bne.n	80066ea <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_UART_Receive_DMA+0x26>
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e016      	b.n	80066ec <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_UART_Receive_DMA+0x38>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e00f      	b.n	80066ec <HAL_UART_Receive_DMA+0x58>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	461a      	mov	r2, r3
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fca7 	bl	8007034 <UART_Start_Receive_DMA>
 80066e6:	4603      	mov	r3, r0
 80066e8:	e000      	b.n	80066ec <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066ea:	2302      	movs	r3, #2
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b090      	sub	sp, #64	; 0x40
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b80      	cmp	r3, #128	; 0x80
 800670c:	bf0c      	ite	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	2300      	movne	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b21      	cmp	r3, #33	; 0x21
 8006720:	d128      	bne.n	8006774 <HAL_UART_DMAStop+0x80>
 8006722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d025      	beq.n	8006774 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	623b      	str	r3, [r7, #32]
   return(result);
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800673e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006748:	633a      	str	r2, [r7, #48]	; 0x30
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800674e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e5      	bne.n	8006728 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	4618      	mov	r0, r3
 800676a:	f7fc f9c7 	bl	8002afc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fcfe 	bl	8007170 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b22      	cmp	r3, #34	; 0x22
 8006794:	d128      	bne.n	80067e8 <HAL_UART_DMAStop+0xf4>
 8006796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d025      	beq.n	80067e8 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3314      	adds	r3, #20
 80067a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067bc:	61fa      	str	r2, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fc f98d 	bl	8002afc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fcec 	bl	80071c0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3740      	adds	r7, #64	; 0x40
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b0ba      	sub	sp, #232	; 0xe8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800681a:	2300      	movs	r3, #0
 800681c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006820:	2300      	movs	r3, #0
 8006822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10f      	bne.n	800685a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <HAL_UART_IRQHandler+0x66>
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fd93 	bl	800737e <UART_Receive_IT>
      return;
 8006858:	e256      	b.n	8006d08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800685a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80de 	beq.w	8006a20 <HAL_UART_IRQHandler+0x22c>
 8006864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006874:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80d1 	beq.w	8006a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <HAL_UART_IRQHandler+0xae>
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f043 0201 	orr.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <HAL_UART_IRQHandler+0xd2>
 80068ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	f043 0202 	orr.w	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0xf6>
 80068d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0204 	orr.w	r2, r3, #4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d011      	beq.n	800691a <HAL_UART_IRQHandler+0x126>
 80068f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f043 0208 	orr.w	r2, r3, #8
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 81ed 	beq.w	8006cfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_UART_IRQHandler+0x14e>
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fd1e 	bl	800737e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	bf0c      	ite	eq
 8006950:	2301      	moveq	r3, #1
 8006952:	2300      	movne	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <HAL_UART_IRQHandler+0x17a>
 8006966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04f      	beq.n	8006a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fc26 	bl	80071c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d141      	bne.n	8006a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1d9      	bne.n	8006982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d013      	beq.n	80069fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	4a7d      	ldr	r2, [pc, #500]	; (8006bd0 <HAL_UART_IRQHandler+0x3dc>)
 80069dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fc f8fa 	bl	8002bdc <HAL_DMA_Abort_IT>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d016      	beq.n	8006a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	e00e      	b.n	8006a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9ae 	bl	8006d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e00a      	b.n	8006a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9aa 	bl	8006d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e006      	b.n	8006a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9a6 	bl	8006d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a1a:	e170      	b.n	8006cfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	bf00      	nop
    return;
 8006a1e:	e16e      	b.n	8006cfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	f040 814a 	bne.w	8006cbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8143 	beq.w	8006cbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 813c 	beq.w	8006cbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	f040 80b4 	bne.w	8006bd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8140 	beq.w	8006d02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	f080 8139 	bcs.w	8006d02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa2:	f000 8088 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1d9      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3314      	adds	r3, #20
 8006af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3314      	adds	r3, #20
 8006b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e1      	bne.n	8006af2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e3      	bne.n	8006b2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b86:	f023 0310 	bic.w	r3, r3, #16
 8006b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e3      	bne.n	8006b74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fb ffa3 	bl	8002afc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8d4 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bcc:	e099      	b.n	8006d02 <HAL_UART_IRQHandler+0x50e>
 8006bce:	bf00      	nop
 8006bd0:	08007287 	.word	0x08007287
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 808b 	beq.w	8006d06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8086 	beq.w	8006d06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e3      	bne.n	8006bfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3314      	adds	r3, #20
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	623b      	str	r3, [r7, #32]
   return(result);
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c56:	633a      	str	r2, [r7, #48]	; 0x30
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e3      	bne.n	8006c32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0310 	bic.w	r3, r3, #16
 8006c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c9c:	61fa      	str	r2, [r7, #28]
 8006c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e3      	bne.n	8006c78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f85c 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cbc:	e023      	b.n	8006d06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_UART_IRQHandler+0x4ea>
 8006cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fae9 	bl	80072ae <UART_Transmit_IT>
    return;
 8006cdc:	e014      	b.n	8006d08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00e      	beq.n	8006d08 <HAL_UART_IRQHandler+0x514>
 8006cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb29 	bl	800734e <UART_EndTransmit_IT>
    return;
 8006cfc:	e004      	b.n	8006d08 <HAL_UART_IRQHandler+0x514>
    return;
 8006cfe:	bf00      	nop
 8006d00:	e002      	b.n	8006d08 <HAL_UART_IRQHandler+0x514>
      return;
 8006d02:	bf00      	nop
 8006d04:	e000      	b.n	8006d08 <HAL_UART_IRQHandler+0x514>
      return;
 8006d06:	bf00      	nop
  }
}
 8006d08:	37e8      	adds	r7, #232	; 0xe8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop

08006d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b090      	sub	sp, #64	; 0x40
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d137      	bne.n	8006e18 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006daa:	2200      	movs	r2, #0
 8006dac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3314      	adds	r3, #20
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3314      	adds	r3, #20
 8006dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dce:	633a      	str	r2, [r7, #48]	; 0x30
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e5      	bne.n	8006dae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e02:	61fa      	str	r2, [r7, #28]
 8006e04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	69b9      	ldr	r1, [r7, #24]
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e5      	bne.n	8006de2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e16:	e002      	b.n	8006e1e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e1a:	f7ff ff79 	bl	8006d10 <HAL_UART_TxCpltCallback>
}
 8006e1e:	bf00      	nop
 8006e20:	3740      	adds	r7, #64	; 0x40
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff ff75 	bl	8006d24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e3a:	bf00      	nop
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b09c      	sub	sp, #112	; 0x70
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d172      	bne.n	8006f44 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e60:	2200      	movs	r2, #0
 8006e62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e5      	bne.n	8006e64 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	667b      	str	r3, [r7, #100]	; 0x64
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3314      	adds	r3, #20
 8006eb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006eb8:	647a      	str	r2, [r7, #68]	; 0x44
 8006eba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e5      	bne.n	8006e98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3314      	adds	r3, #20
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	623b      	str	r3, [r7, #32]
   return(result);
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eec:	633a      	str	r2, [r7, #48]	; 0x30
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d119      	bne.n	8006f44 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0310 	bic.w	r3, r3, #16
 8006f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f30:	61fa      	str	r2, [r7, #28]
 8006f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	69b9      	ldr	r1, [r7, #24]
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d106      	bne.n	8006f5a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f50:	4619      	mov	r1, r3
 8006f52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f54:	f7ff ff0e 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f58:	e002      	b.n	8006f60 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f5c:	f7ff feec 	bl	8006d38 <HAL_UART_RxCpltCallback>
}
 8006f60:	bf00      	nop
 8006f62:	3770      	adds	r7, #112	; 0x70
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d108      	bne.n	8006f90 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fef3 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f8e:	e002      	b.n	8006f96 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fedb 	bl	8006d4c <HAL_UART_RxHalfCpltCallback>
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b21      	cmp	r3, #33	; 0x21
 8006fd0:	d108      	bne.n	8006fe4 <UART_DMAError+0x46>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006fde:	68b8      	ldr	r0, [r7, #8]
 8006fe0:	f000 f8c6 	bl	8007170 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	bf0c      	ite	eq
 8006ff2:	2301      	moveq	r3, #1
 8006ff4:	2300      	movne	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b22      	cmp	r3, #34	; 0x22
 8007004:	d108      	bne.n	8007018 <UART_DMAError+0x7a>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2200      	movs	r2, #0
 8007010:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007012:	68b8      	ldr	r0, [r7, #8]
 8007014:	f000 f8d4 	bl	80071c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	f043 0210 	orr.w	r2, r3, #16
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007024:	68b8      	ldr	r0, [r7, #8]
 8007026:	f7ff fe9b 	bl	8006d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b098      	sub	sp, #96	; 0x60
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2222      	movs	r2, #34	; 0x22
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	4a40      	ldr	r2, [pc, #256]	; (8007164 <UART_Start_Receive_DMA+0x130>)
 8007062:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <UART_Start_Receive_DMA+0x134>)
 800706a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	4a3e      	ldr	r2, [pc, #248]	; (800716c <UART_Start_Receive_DMA+0x138>)
 8007072:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	2200      	movs	r2, #0
 800707a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	f7fb fcda 	bl	8002a4c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007098:	2300      	movs	r3, #0
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d019      	beq.n	80070f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	330c      	adds	r3, #12
 80070c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80070e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80070e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80070ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e5      	bne.n	80070be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3314      	adds	r3, #20
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	f043 0301 	orr.w	r3, r3, #1
 8007108:	657b      	str	r3, [r7, #84]	; 0x54
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3314      	adds	r3, #20
 8007110:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007112:	63ba      	str	r2, [r7, #56]	; 0x38
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e5      	bne.n	80070f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3314      	adds	r3, #20
 800712c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	617b      	str	r3, [r7, #20]
   return(result);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800713c:	653b      	str	r3, [r7, #80]	; 0x50
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3314      	adds	r3, #20
 8007144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007146:	627a      	str	r2, [r7, #36]	; 0x24
 8007148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6a39      	ldr	r1, [r7, #32]
 800714c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	61fb      	str	r3, [r7, #28]
   return(result);
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e5      	bne.n	8007126 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3760      	adds	r7, #96	; 0x60
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	08006e43 	.word	0x08006e43
 8007168:	08006f69 	.word	0x08006f69
 800716c:	08006f9f 	.word	0x08006f9f

08007170 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b089      	sub	sp, #36	; 0x24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60bb      	str	r3, [r7, #8]
   return(result);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	61ba      	str	r2, [r7, #24]
 800719a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80071b4:	bf00      	nop
 80071b6:	3724      	adds	r7, #36	; 0x24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b095      	sub	sp, #84	; 0x54
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	330c      	adds	r3, #12
 80071ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071e8:	643a      	str	r2, [r7, #64]	; 0x40
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e5      	bne.n	80071c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3314      	adds	r3, #20
 8007202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	61fb      	str	r3, [r7, #28]
   return(result);
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f023 0301 	bic.w	r3, r3, #1
 8007212:	64bb      	str	r3, [r7, #72]	; 0x48
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3314      	adds	r3, #20
 800721a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800721c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800721e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e5      	bne.n	80071fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	2b01      	cmp	r3, #1
 8007236:	d119      	bne.n	800726c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	60bb      	str	r3, [r7, #8]
   return(result);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f023 0310 	bic.w	r3, r3, #16
 800724e:	647b      	str	r3, [r7, #68]	; 0x44
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007258:	61ba      	str	r2, [r7, #24]
 800725a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6979      	ldr	r1, [r7, #20]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	613b      	str	r3, [r7, #16]
   return(result);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e5      	bne.n	8007238 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
}
 800727a:	bf00      	nop
 800727c:	3754      	adds	r7, #84	; 0x54
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff fd5d 	bl	8006d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b21      	cmp	r3, #33	; 0x21
 80072c0:	d13e      	bne.n	8007340 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ca:	d114      	bne.n	80072f6 <UART_Transmit_IT+0x48>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d110      	bne.n	80072f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	1c9a      	adds	r2, r3, #2
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	621a      	str	r2, [r3, #32]
 80072f4:	e008      	b.n	8007308 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	1c59      	adds	r1, r3, #1
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6211      	str	r1, [r2, #32]
 8007300:	781a      	ldrb	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29b      	uxth	r3, r3
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	4619      	mov	r1, r3
 8007316:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10f      	bne.n	800733c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800732a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800733a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e000      	b.n	8007342 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007340:	2302      	movs	r3, #2
  }
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2220      	movs	r2, #32
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fcce 	bl	8006d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b08c      	sub	sp, #48	; 0x30
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b22      	cmp	r3, #34	; 0x22
 8007390:	f040 80ab 	bne.w	80074ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739c:	d117      	bne.n	80073ce <UART_Receive_IT+0x50>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d113      	bne.n	80073ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073bc:	b29a      	uxth	r2, r3
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	1c9a      	adds	r2, r3, #2
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28
 80073cc:	e026      	b.n	800741c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e0:	d007      	beq.n	80073f2 <UART_Receive_IT+0x74>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <UART_Receive_IT+0x82>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e008      	b.n	8007412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740c:	b2da      	uxtb	r2, r3
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29b      	uxth	r3, r3
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	4619      	mov	r1, r3
 800742a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800742c:	2b00      	cmp	r3, #0
 800742e:	d15a      	bne.n	80074e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0220 	bic.w	r2, r2, #32
 800743e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800744e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695a      	ldr	r2, [r3, #20]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746c:	2b01      	cmp	r3, #1
 800746e:	d135      	bne.n	80074dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	613b      	str	r3, [r7, #16]
   return(result);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f023 0310 	bic.w	r3, r3, #16
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007496:	623a      	str	r2, [r7, #32]
 8007498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69f9      	ldr	r1, [r7, #28]
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d10a      	bne.n	80074ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fc4d 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
 80074da:	e002      	b.n	80074e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff fc2b 	bl	8006d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e002      	b.n	80074ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e000      	b.n	80074ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
  }
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3730      	adds	r7, #48	; 0x30
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074f8:	b0c0      	sub	sp, #256	; 0x100
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	68d9      	ldr	r1, [r3, #12]
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	ea40 0301 	orr.w	r3, r0, r1
 800751c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	431a      	orrs	r2, r3
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	431a      	orrs	r2, r3
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	4313      	orrs	r3, r2
 800753c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800754c:	f021 010c 	bic.w	r1, r1, #12
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800755a:	430b      	orrs	r3, r1
 800755c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756e:	6999      	ldr	r1, [r3, #24]
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	ea40 0301 	orr.w	r3, r0, r1
 800757a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b8f      	ldr	r3, [pc, #572]	; (80077c0 <UART_SetConfig+0x2cc>)
 8007584:	429a      	cmp	r2, r3
 8007586:	d005      	beq.n	8007594 <UART_SetConfig+0xa0>
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b8d      	ldr	r3, [pc, #564]	; (80077c4 <UART_SetConfig+0x2d0>)
 8007590:	429a      	cmp	r2, r3
 8007592:	d104      	bne.n	800759e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007594:	f7fe fdd6 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8007598:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800759c:	e003      	b.n	80075a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800759e:	f7fe fdbd 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 80075a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b0:	f040 810c 	bne.w	80077cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075c6:	4622      	mov	r2, r4
 80075c8:	462b      	mov	r3, r5
 80075ca:	1891      	adds	r1, r2, r2
 80075cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80075ce:	415b      	adcs	r3, r3
 80075d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075d6:	4621      	mov	r1, r4
 80075d8:	eb12 0801 	adds.w	r8, r2, r1
 80075dc:	4629      	mov	r1, r5
 80075de:	eb43 0901 	adc.w	r9, r3, r1
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075f6:	4690      	mov	r8, r2
 80075f8:	4699      	mov	r9, r3
 80075fa:	4623      	mov	r3, r4
 80075fc:	eb18 0303 	adds.w	r3, r8, r3
 8007600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007604:	462b      	mov	r3, r5
 8007606:	eb49 0303 	adc.w	r3, r9, r3
 800760a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800761a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800761e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007622:	460b      	mov	r3, r1
 8007624:	18db      	adds	r3, r3, r3
 8007626:	653b      	str	r3, [r7, #80]	; 0x50
 8007628:	4613      	mov	r3, r2
 800762a:	eb42 0303 	adc.w	r3, r2, r3
 800762e:	657b      	str	r3, [r7, #84]	; 0x54
 8007630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007638:	f7f8 fe82 	bl	8000340 <__aeabi_uldivmod>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4b61      	ldr	r3, [pc, #388]	; (80077c8 <UART_SetConfig+0x2d4>)
 8007642:	fba3 2302 	umull	r2, r3, r3, r2
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	011c      	lsls	r4, r3, #4
 800764a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800764e:	2200      	movs	r2, #0
 8007650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007654:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800765c:	4642      	mov	r2, r8
 800765e:	464b      	mov	r3, r9
 8007660:	1891      	adds	r1, r2, r2
 8007662:	64b9      	str	r1, [r7, #72]	; 0x48
 8007664:	415b      	adcs	r3, r3
 8007666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800766c:	4641      	mov	r1, r8
 800766e:	eb12 0a01 	adds.w	sl, r2, r1
 8007672:	4649      	mov	r1, r9
 8007674:	eb43 0b01 	adc.w	fp, r3, r1
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800768c:	4692      	mov	sl, r2
 800768e:	469b      	mov	fp, r3
 8007690:	4643      	mov	r3, r8
 8007692:	eb1a 0303 	adds.w	r3, sl, r3
 8007696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800769a:	464b      	mov	r3, r9
 800769c:	eb4b 0303 	adc.w	r3, fp, r3
 80076a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076b8:	460b      	mov	r3, r1
 80076ba:	18db      	adds	r3, r3, r3
 80076bc:	643b      	str	r3, [r7, #64]	; 0x40
 80076be:	4613      	mov	r3, r2
 80076c0:	eb42 0303 	adc.w	r3, r2, r3
 80076c4:	647b      	str	r3, [r7, #68]	; 0x44
 80076c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076ce:	f7f8 fe37 	bl	8000340 <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	4b3b      	ldr	r3, [pc, #236]	; (80077c8 <UART_SetConfig+0x2d4>)
 80076da:	fba3 2301 	umull	r2, r3, r3, r1
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	2264      	movs	r2, #100	; 0x64
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	1acb      	subs	r3, r1, r3
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076ee:	4b36      	ldr	r3, [pc, #216]	; (80077c8 <UART_SetConfig+0x2d4>)
 80076f0:	fba3 2302 	umull	r2, r3, r3, r2
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076fc:	441c      	add	r4, r3
 80076fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007702:	2200      	movs	r2, #0
 8007704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007708:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800770c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007710:	4642      	mov	r2, r8
 8007712:	464b      	mov	r3, r9
 8007714:	1891      	adds	r1, r2, r2
 8007716:	63b9      	str	r1, [r7, #56]	; 0x38
 8007718:	415b      	adcs	r3, r3
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800771c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007720:	4641      	mov	r1, r8
 8007722:	1851      	adds	r1, r2, r1
 8007724:	6339      	str	r1, [r7, #48]	; 0x30
 8007726:	4649      	mov	r1, r9
 8007728:	414b      	adcs	r3, r1
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007738:	4659      	mov	r1, fp
 800773a:	00cb      	lsls	r3, r1, #3
 800773c:	4651      	mov	r1, sl
 800773e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007742:	4651      	mov	r1, sl
 8007744:	00ca      	lsls	r2, r1, #3
 8007746:	4610      	mov	r0, r2
 8007748:	4619      	mov	r1, r3
 800774a:	4603      	mov	r3, r0
 800774c:	4642      	mov	r2, r8
 800774e:	189b      	adds	r3, r3, r2
 8007750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007754:	464b      	mov	r3, r9
 8007756:	460a      	mov	r2, r1
 8007758:	eb42 0303 	adc.w	r3, r2, r3
 800775c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800776c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007774:	460b      	mov	r3, r1
 8007776:	18db      	adds	r3, r3, r3
 8007778:	62bb      	str	r3, [r7, #40]	; 0x28
 800777a:	4613      	mov	r3, r2
 800777c:	eb42 0303 	adc.w	r3, r2, r3
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800778a:	f7f8 fdd9 	bl	8000340 <__aeabi_uldivmod>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <UART_SetConfig+0x2d4>)
 8007794:	fba3 1302 	umull	r1, r3, r3, r2
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	2164      	movs	r1, #100	; 0x64
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	3332      	adds	r3, #50	; 0x32
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <UART_SetConfig+0x2d4>)
 80077a8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	f003 0207 	and.w	r2, r3, #7
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4422      	add	r2, r4
 80077ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077bc:	e106      	b.n	80079cc <UART_SetConfig+0x4d8>
 80077be:	bf00      	nop
 80077c0:	40011000 	.word	0x40011000
 80077c4:	40011400 	.word	0x40011400
 80077c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077de:	4642      	mov	r2, r8
 80077e0:	464b      	mov	r3, r9
 80077e2:	1891      	adds	r1, r2, r2
 80077e4:	6239      	str	r1, [r7, #32]
 80077e6:	415b      	adcs	r3, r3
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ee:	4641      	mov	r1, r8
 80077f0:	1854      	adds	r4, r2, r1
 80077f2:	4649      	mov	r1, r9
 80077f4:	eb43 0501 	adc.w	r5, r3, r1
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	00eb      	lsls	r3, r5, #3
 8007802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007806:	00e2      	lsls	r2, r4, #3
 8007808:	4614      	mov	r4, r2
 800780a:	461d      	mov	r5, r3
 800780c:	4643      	mov	r3, r8
 800780e:	18e3      	adds	r3, r4, r3
 8007810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007814:	464b      	mov	r3, r9
 8007816:	eb45 0303 	adc.w	r3, r5, r3
 800781a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800781e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800782a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800783a:	4629      	mov	r1, r5
 800783c:	008b      	lsls	r3, r1, #2
 800783e:	4621      	mov	r1, r4
 8007840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007844:	4621      	mov	r1, r4
 8007846:	008a      	lsls	r2, r1, #2
 8007848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800784c:	f7f8 fd78 	bl	8000340 <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4b60      	ldr	r3, [pc, #384]	; (80079d8 <UART_SetConfig+0x4e4>)
 8007856:	fba3 2302 	umull	r2, r3, r3, r2
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	011c      	lsls	r4, r3, #4
 800785e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007862:	2200      	movs	r2, #0
 8007864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007868:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800786c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007870:	4642      	mov	r2, r8
 8007872:	464b      	mov	r3, r9
 8007874:	1891      	adds	r1, r2, r2
 8007876:	61b9      	str	r1, [r7, #24]
 8007878:	415b      	adcs	r3, r3
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007880:	4641      	mov	r1, r8
 8007882:	1851      	adds	r1, r2, r1
 8007884:	6139      	str	r1, [r7, #16]
 8007886:	4649      	mov	r1, r9
 8007888:	414b      	adcs	r3, r1
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007898:	4659      	mov	r1, fp
 800789a:	00cb      	lsls	r3, r1, #3
 800789c:	4651      	mov	r1, sl
 800789e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078a2:	4651      	mov	r1, sl
 80078a4:	00ca      	lsls	r2, r1, #3
 80078a6:	4610      	mov	r0, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	4642      	mov	r2, r8
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078b4:	464b      	mov	r3, r9
 80078b6:	460a      	mov	r2, r1
 80078b8:	eb42 0303 	adc.w	r3, r2, r3
 80078bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80078ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078d8:	4649      	mov	r1, r9
 80078da:	008b      	lsls	r3, r1, #2
 80078dc:	4641      	mov	r1, r8
 80078de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078e2:	4641      	mov	r1, r8
 80078e4:	008a      	lsls	r2, r1, #2
 80078e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078ea:	f7f8 fd29 	bl	8000340 <__aeabi_uldivmod>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	4b38      	ldr	r3, [pc, #224]	; (80079d8 <UART_SetConfig+0x4e4>)
 80078f6:	fba3 2301 	umull	r2, r3, r3, r1
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	2264      	movs	r2, #100	; 0x64
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	1acb      	subs	r3, r1, r3
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	3332      	adds	r3, #50	; 0x32
 8007908:	4a33      	ldr	r2, [pc, #204]	; (80079d8 <UART_SetConfig+0x4e4>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	095b      	lsrs	r3, r3, #5
 8007910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007914:	441c      	add	r4, r3
 8007916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800791a:	2200      	movs	r2, #0
 800791c:	673b      	str	r3, [r7, #112]	; 0x70
 800791e:	677a      	str	r2, [r7, #116]	; 0x74
 8007920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007924:	4642      	mov	r2, r8
 8007926:	464b      	mov	r3, r9
 8007928:	1891      	adds	r1, r2, r2
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	415b      	adcs	r3, r3
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007934:	4641      	mov	r1, r8
 8007936:	1851      	adds	r1, r2, r1
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	4649      	mov	r1, r9
 800793c:	414b      	adcs	r3, r1
 800793e:	607b      	str	r3, [r7, #4]
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800794c:	4659      	mov	r1, fp
 800794e:	00cb      	lsls	r3, r1, #3
 8007950:	4651      	mov	r1, sl
 8007952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007956:	4651      	mov	r1, sl
 8007958:	00ca      	lsls	r2, r1, #3
 800795a:	4610      	mov	r0, r2
 800795c:	4619      	mov	r1, r3
 800795e:	4603      	mov	r3, r0
 8007960:	4642      	mov	r2, r8
 8007962:	189b      	adds	r3, r3, r2
 8007964:	66bb      	str	r3, [r7, #104]	; 0x68
 8007966:	464b      	mov	r3, r9
 8007968:	460a      	mov	r2, r1
 800796a:	eb42 0303 	adc.w	r3, r2, r3
 800796e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	663b      	str	r3, [r7, #96]	; 0x60
 800797a:	667a      	str	r2, [r7, #100]	; 0x64
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007988:	4649      	mov	r1, r9
 800798a:	008b      	lsls	r3, r1, #2
 800798c:	4641      	mov	r1, r8
 800798e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007992:	4641      	mov	r1, r8
 8007994:	008a      	lsls	r2, r1, #2
 8007996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800799a:	f7f8 fcd1 	bl	8000340 <__aeabi_uldivmod>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4b0d      	ldr	r3, [pc, #52]	; (80079d8 <UART_SetConfig+0x4e4>)
 80079a4:	fba3 1302 	umull	r1, r3, r3, r2
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	2164      	movs	r1, #100	; 0x64
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	3332      	adds	r3, #50	; 0x32
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <UART_SetConfig+0x4e4>)
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	f003 020f 	and.w	r2, r3, #15
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4422      	add	r2, r4
 80079ca:	609a      	str	r2, [r3, #8]
}
 80079cc:	bf00      	nop
 80079ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079d2:	46bd      	mov	sp, r7
 80079d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079d8:	51eb851f 	.word	0x51eb851f

080079dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079dc:	b084      	sub	sp, #16
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	f107 001c 	add.w	r0, r7, #28
 80079ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d122      	bne.n	8007a3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d105      	bne.n	8007a2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9c0 	bl	8007db4 <USB_CoreReset>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
 8007a38:	e01a      	b.n	8007a70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9b4 	bl	8007db4 <USB_CoreReset>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38
 8007a62:	e005      	b.n	8007a70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d10b      	bne.n	8007a8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f043 0206 	orr.w	r2, r3, #6
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f043 0220 	orr.w	r2, r3, #32
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a9a:	b004      	add	sp, #16
 8007a9c:	4770      	bx	lr

08007a9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f043 0201 	orr.w	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f023 0201 	bic.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d115      	bne.n	8007b30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b10:	2001      	movs	r0, #1
 8007b12:	f7fa f9eb 	bl	8001eec <HAL_Delay>
      ms++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f93a 	bl	8007d96 <USB_GetMode>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d01e      	beq.n	8007b66 <USB_SetCurrentMode+0x84>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b31      	cmp	r3, #49	; 0x31
 8007b2c:	d9f0      	bls.n	8007b10 <USB_SetCurrentMode+0x2e>
 8007b2e:	e01a      	b.n	8007b66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d115      	bne.n	8007b62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b42:	2001      	movs	r0, #1
 8007b44:	f7fa f9d2 	bl	8001eec <HAL_Delay>
      ms++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f921 	bl	8007d96 <USB_GetMode>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <USB_SetCurrentMode+0x84>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b31      	cmp	r3, #49	; 0x31
 8007b5e:	d9f0      	bls.n	8007b42 <USB_SetCurrentMode+0x60>
 8007b60:	e001      	b.n	8007b66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e005      	b.n	8007b72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b32      	cmp	r3, #50	; 0x32
 8007b6a:	d101      	bne.n	8007b70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <USB_FlushTxFifo+0x64>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d901      	bls.n	8007b9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e01b      	b.n	8007bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	daf2      	bge.n	8007b8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	019b      	lsls	r3, r3, #6
 8007bac:	f043 0220 	orr.w	r2, r3, #32
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4a08      	ldr	r2, [pc, #32]	; (8007be0 <USB_FlushTxFifo+0x64>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d901      	bls.n	8007bc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e006      	b.n	8007bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d0f0      	beq.n	8007bb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	00030d40 	.word	0x00030d40

08007be4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <USB_FlushRxFifo+0x5c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d901      	bls.n	8007c02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e018      	b.n	8007c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	daf2      	bge.n	8007bf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2210      	movs	r2, #16
 8007c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3301      	adds	r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4a08      	ldr	r2, [pc, #32]	; (8007c40 <USB_FlushRxFifo+0x5c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d901      	bls.n	8007c26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e006      	b.n	8007c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d0f0      	beq.n	8007c14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	00030d40 	.word	0x00030d40

08007c44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b089      	sub	sp, #36	; 0x24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	461a      	mov	r2, r3
 8007c52:	460b      	mov	r3, r1
 8007c54:	71fb      	strb	r3, [r7, #7]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d123      	bne.n	8007cb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c6a:	88bb      	ldrh	r3, [r7, #4]
 8007c6c:	3303      	adds	r3, #3
 8007c6e:	089b      	lsrs	r3, r3, #2
 8007c70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c72:	2300      	movs	r3, #0
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	e018      	b.n	8007caa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	031a      	lsls	r2, r3, #12
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	461a      	mov	r2, r3
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	3301      	adds	r3, #1
 8007c96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d3e2      	bcc.n	8007c78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3724      	adds	r7, #36	; 0x24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b08b      	sub	sp, #44	; 0x2c
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	089b      	lsrs	r3, r3, #2
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	623b      	str	r3, [r7, #32]
 8007cea:	e014      	b.n	8007d16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	3301      	adds	r3, #1
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	3301      	adds	r3, #1
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	3301      	adds	r3, #1
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	6a3a      	ldr	r2, [r7, #32]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d3e6      	bcc.n	8007cec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d1e:	8bfb      	ldrh	r3, [r7, #30]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01e      	beq.n	8007d62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	fa22 f303 	lsr.w	r3, r2, r3
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	701a      	strb	r2, [r3, #0]
      i++;
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	3301      	adds	r3, #1
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d56:	8bfb      	ldrh	r3, [r7, #30]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d5c:	8bfb      	ldrh	r3, [r7, #30]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1ea      	bne.n	8007d38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	372c      	adds	r7, #44	; 0x2c
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4013      	ands	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d88:	68fb      	ldr	r3, [r7, #12]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f003 0301 	and.w	r3, r3, #1
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
	...

08007db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <USB_CoreReset+0x64>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d901      	bls.n	8007dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e01b      	b.n	8007e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	daf2      	bge.n	8007dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f043 0201 	orr.w	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <USB_CoreReset+0x64>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d901      	bls.n	8007dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e006      	b.n	8007e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d0f0      	beq.n	8007dea <USB_CoreReset+0x36>

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	00030d40 	.word	0x00030d40

08007e1c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b086      	sub	sp, #24
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2300      	movs	r3, #0
 8007e40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d018      	beq.n	8007ea4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d10a      	bne.n	8007e8e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e86:	f043 0304 	orr.w	r3, r3, #4
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e014      	b.n	8007eb8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e9c:	f023 0304 	bic.w	r3, r3, #4
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e009      	b.n	8007eb8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007eb2:	f023 0304 	bic.w	r3, r3, #4
 8007eb6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007eb8:	2110      	movs	r1, #16
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fe5e 	bl	8007b7c <USB_FlushTxFifo>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff fe8a 	bl	8007be4 <USB_FlushRxFifo>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	e015      	b.n	8007f0c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eec:	461a      	mov	r2, r3
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f00:	461a      	mov	r2, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d3e5      	bcc.n	8007ee0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f20:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f34:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <USB_HostInit+0x16c>)
 8007f3a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a13      	ldr	r2, [pc, #76]	; (8007f8c <USB_HostInit+0x170>)
 8007f40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007f44:	e009      	b.n	8007f5a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2280      	movs	r2, #128	; 0x80
 8007f4a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a10      	ldr	r2, [pc, #64]	; (8007f90 <USB_HostInit+0x174>)
 8007f50:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a0f      	ldr	r2, [pc, #60]	; (8007f94 <USB_HostInit+0x178>)
 8007f56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	f043 0210 	orr.w	r2, r3, #16
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699a      	ldr	r2, [r3, #24]
 8007f70:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <USB_HostInit+0x17c>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f84:	b004      	add	sp, #16
 8007f86:	4770      	bx	lr
 8007f88:	01000200 	.word	0x01000200
 8007f8c:	00e00300 	.word	0x00e00300
 8007f90:	00600080 	.word	0x00600080
 8007f94:	004000e0 	.word	0x004000e0
 8007f98:	a3200008 	.word	0xa3200008

08007f9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fba:	f023 0303 	bic.w	r3, r3, #3
 8007fbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d107      	bne.n	8007fee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007fea:	6053      	str	r3, [r2, #4]
 8007fec:	e009      	b.n	8008002 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d106      	bne.n	8008002 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f241 7370 	movw	r3, #6000	; 0x1770
 8008000:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008030:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800803a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800803e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008040:	2064      	movs	r0, #100	; 0x64
 8008042:	f7f9 ff53 	bl	8001eec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800804e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008052:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008054:	200a      	movs	r0, #10
 8008056:	f7f9 ff49 	bl	8001eec <HAL_Delay>

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008088:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d109      	bne.n	80080a8 <USB_DriveVbus+0x44>
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d106      	bne.n	80080a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b2:	d109      	bne.n	80080c8 <USB_DriveVbus+0x64>
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	0c5b      	lsrs	r3, r3, #17
 80080f4:	f003 0303 	and.w	r3, r3, #3
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	b29b      	uxth	r3, r3
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	4608      	mov	r0, r1
 8008132:	4611      	mov	r1, r2
 8008134:	461a      	mov	r2, r3
 8008136:	4603      	mov	r3, r0
 8008138:	70fb      	strb	r3, [r7, #3]
 800813a:	460b      	mov	r3, r1
 800813c:	70bb      	strb	r3, [r7, #2]
 800813e:	4613      	mov	r3, r2
 8008140:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	4413      	add	r3, r2
 8008152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008156:	461a      	mov	r2, r3
 8008158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800815c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800815e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008162:	2b03      	cmp	r3, #3
 8008164:	d87e      	bhi.n	8008264 <USB_HC_Init+0x13c>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <USB_HC_Init+0x44>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	0800817d 	.word	0x0800817d
 8008170:	08008227 	.word	0x08008227
 8008174:	0800817d 	.word	0x0800817d
 8008178:	080081e9 	.word	0x080081e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	4413      	add	r3, r2
 8008184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008188:	461a      	mov	r2, r3
 800818a:	f240 439d 	movw	r3, #1181	; 0x49d
 800818e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da10      	bge.n	80081ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081b6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80081b8:	e057      	b.n	800826a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d051      	beq.n	800826a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081e4:	60d3      	str	r3, [r2, #12]
      break;
 80081e6:	e040      	b.n	800826a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f4:	461a      	mov	r2, r3
 80081f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80081fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80081fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008200:	2b00      	cmp	r3, #0
 8008202:	da34      	bge.n	800826e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4413      	add	r3, r2
 800820c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	78fa      	ldrb	r2, [r7, #3]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	440a      	add	r2, r1
 800821a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800821e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008222:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008224:	e023      	b.n	800826e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008232:	461a      	mov	r2, r3
 8008234:	f240 2325 	movw	r3, #549	; 0x225
 8008238:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800823a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800823e:	2b00      	cmp	r3, #0
 8008240:	da17      	bge.n	8008272 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	4413      	add	r3, r2
 800824a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	78fa      	ldrb	r2, [r7, #3]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	440a      	add	r2, r1
 8008258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008260:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008262:	e006      	b.n	8008272 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	77fb      	strb	r3, [r7, #31]
      break;
 8008268:	e004      	b.n	8008274 <USB_HC_Init+0x14c>
      break;
 800826a:	bf00      	nop
 800826c:	e002      	b.n	8008274 <USB_HC_Init+0x14c>
      break;
 800826e:	bf00      	nop
 8008270:	e000      	b.n	8008274 <USB_HC_Init+0x14c>
      break;
 8008272:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	4413      	add	r3, r2
 800827c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	440a      	add	r2, r1
 800828a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800828e:	f043 0302 	orr.w	r3, r3, #2
 8008292:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	78fb      	ldrb	r3, [r7, #3]
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	2101      	movs	r1, #1
 80082a4:	fa01 f303 	lsl.w	r3, r1, r3
 80082a8:	6939      	ldr	r1, [r7, #16]
 80082aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80082ae:	4313      	orrs	r3, r2
 80082b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80082be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da03      	bge.n	80082ce <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80082c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ca:	61bb      	str	r3, [r7, #24]
 80082cc:	e001      	b.n	80082d2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff feff 	bl	80080d6 <USB_GetHostSpeed>
 80082d8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80082da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d106      	bne.n	80082f0 <USB_HC_Init+0x1c8>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d003      	beq.n	80082f0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80082e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e001      	b.n	80082f4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082f4:	787b      	ldrb	r3, [r7, #1]
 80082f6:	059b      	lsls	r3, r3, #22
 80082f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082fc:	78bb      	ldrb	r3, [r7, #2]
 80082fe:	02db      	lsls	r3, r3, #11
 8008300:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008304:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008306:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800830a:	049b      	lsls	r3, r3, #18
 800830c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008310:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008312:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008314:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008318:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	0159      	lsls	r1, r3, #5
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	440b      	add	r3, r1
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008330:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008336:	2b03      	cmp	r3, #3
 8008338:	d003      	beq.n	8008342 <USB_HC_Init+0x21a>
 800833a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d10f      	bne.n	8008362 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	4413      	add	r3, r2
 800834a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	440a      	add	r2, r1
 8008358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800835c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008360:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008362:	7ffb      	ldrb	r3, [r7, #31]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08c      	sub	sp, #48	; 0x30
 8008370:	af02      	add	r7, sp, #8
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008388:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008392:	2b00      	cmp	r3, #0
 8008394:	d02d      	beq.n	80083f2 <USB_HC_StartXfer+0x86>
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d129      	bne.n	80083f2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d117      	bne.n	80083d4 <USB_HC_StartXfer+0x68>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	79db      	ldrb	r3, [r3, #7]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <USB_HC_StartXfer+0x48>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	79db      	ldrb	r3, [r3, #7]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d10f      	bne.n	80083d4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	0151      	lsls	r1, r2, #5
 80083c6:	6a3a      	ldr	r2, [r7, #32]
 80083c8:	440a      	add	r2, r1
 80083ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <USB_HC_StartXfer+0x86>
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	795b      	ldrb	r3, [r3, #5]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d107      	bne.n	80083f2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	4619      	mov	r1, r3
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fa0f 	bl	800880c <USB_DoPing>
      return HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e0f8      	b.n	80085e4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d018      	beq.n	800842c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	8912      	ldrh	r2, [r2, #8]
 8008402:	4413      	add	r3, r2
 8008404:	3b01      	subs	r3, #1
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	8912      	ldrh	r2, [r2, #8]
 800840a:	fbb3 f3f2 	udiv	r3, r3, r2
 800840e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008410:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008412:	8b7b      	ldrh	r3, [r7, #26]
 8008414:	429a      	cmp	r2, r3
 8008416:	d90b      	bls.n	8008430 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008418:	8b7b      	ldrh	r3, [r7, #26]
 800841a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800841c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	8912      	ldrh	r2, [r2, #8]
 8008422:	fb03 f202 	mul.w	r2, r3, r2
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	611a      	str	r2, [r3, #16]
 800842a:	e001      	b.n	8008430 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800842c:	2301      	movs	r3, #1
 800842e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	78db      	ldrb	r3, [r3, #3]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	8912      	ldrh	r2, [r2, #8]
 800843e:	fb03 f202 	mul.w	r2, r3, r2
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	611a      	str	r2, [r3, #16]
 8008446:	e003      	b.n	8008450 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	695a      	ldr	r2, [r3, #20]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800845a:	04d9      	lsls	r1, r3, #19
 800845c:	4b63      	ldr	r3, [pc, #396]	; (80085ec <USB_HC_StartXfer+0x280>)
 800845e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008460:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	7a9b      	ldrb	r3, [r3, #10]
 8008466:	075b      	lsls	r3, r3, #29
 8008468:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800846c:	69f9      	ldr	r1, [r7, #28]
 800846e:	0148      	lsls	r0, r1, #5
 8008470:	6a39      	ldr	r1, [r7, #32]
 8008472:	4401      	add	r1, r0
 8008474:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008478:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800847a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d009      	beq.n	8008496 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	68d9      	ldr	r1, [r3, #12]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	4413      	add	r3, r2
 800848e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008492:	460a      	mov	r2, r1
 8008494:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bf0c      	ite	eq
 80084a6:	2301      	moveq	r3, #1
 80084a8:	2300      	movne	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	6a3a      	ldr	r2, [r7, #32]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	7e7b      	ldrb	r3, [r7, #25]
 80084de:	075b      	lsls	r3, r3, #29
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	0148      	lsls	r0, r1, #5
 80084e4:	6a39      	ldr	r1, [r7, #32]
 80084e6:	4401      	add	r1, r0
 80084e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80084ec:	4313      	orrs	r3, r2
 80084ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008506:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	78db      	ldrb	r3, [r3, #3]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	e003      	b.n	8008522 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008520:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008528:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	4413      	add	r3, r2
 8008532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008536:	461a      	mov	r2, r3
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	e04e      	b.n	80085e4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	78db      	ldrb	r3, [r3, #3]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d149      	bne.n	80085e2 <USB_HC_StartXfer+0x276>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d045      	beq.n	80085e2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	79db      	ldrb	r3, [r3, #7]
 800855a:	2b03      	cmp	r3, #3
 800855c:	d830      	bhi.n	80085c0 <USB_HC_StartXfer+0x254>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <USB_HC_StartXfer+0x1f8>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	08008575 	.word	0x08008575
 8008568:	08008599 	.word	0x08008599
 800856c:	08008575 	.word	0x08008575
 8008570:	08008599 	.word	0x08008599
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	3303      	adds	r3, #3
 800857a:	089b      	lsrs	r3, r3, #2
 800857c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800857e:	8afa      	ldrh	r2, [r7, #22]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	b29b      	uxth	r3, r3
 8008586:	429a      	cmp	r2, r3
 8008588:	d91c      	bls.n	80085c4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f043 0220 	orr.w	r2, r3, #32
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	619a      	str	r2, [r3, #24]
        }
        break;
 8008596:	e015      	b.n	80085c4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	3303      	adds	r3, #3
 800859e:	089b      	lsrs	r3, r3, #2
 80085a0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80085a2:	8afa      	ldrh	r2, [r7, #22]
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d90a      	bls.n	80085c8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80085be:	e003      	b.n	80085c8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <USB_HC_StartXfer+0x25e>
        break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <USB_HC_StartXfer+0x25e>
        break;
 80085c8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	68d9      	ldr	r1, [r3, #12]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	785a      	ldrb	r2, [r3, #1]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	2000      	movs	r0, #0
 80085da:	9000      	str	r0, [sp, #0]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7ff fb31 	bl	8007c44 <USB_WritePacket>
  }

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3728      	adds	r7, #40	; 0x28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	1ff80000 	.word	0x1ff80000

080085f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	b29b      	uxth	r3, r3
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008612:	b480      	push	{r7}
 8008614:	b089      	sub	sp, #36	; 0x24
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	460b      	mov	r3, r1
 800861c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	4413      	add	r3, r2
 8008632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	0c9b      	lsrs	r3, r3, #18
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	4413      	add	r3, r2
 8008648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	0fdb      	lsrs	r3, r3, #31
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b20      	cmp	r3, #32
 8008660:	d104      	bne.n	800866c <USB_HC_Halt+0x5a>
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	e0c8      	b.n	80087fe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <USB_HC_Halt+0x66>
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d163      	bne.n	8008740 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	440a      	add	r2, r1
 800868e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008696:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f040 80ab 	bne.w	80087fc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d133      	bne.n	800871a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	0151      	lsls	r1, r2, #5
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	440a      	add	r2, r1
 80086c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086f0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3301      	adds	r3, #1
 80086f6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086fe:	d81d      	bhi.n	800873c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008716:	d0ec      	beq.n	80086f2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008718:	e070      	b.n	80087fc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	0151      	lsls	r1, r2, #5
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	440a      	add	r2, r1
 8008730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008738:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800873a:	e05f      	b.n	80087fc <USB_HC_Halt+0x1ea>
            break;
 800873c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800873e:	e05d      	b.n	80087fc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	4413      	add	r3, r2
 8008748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	440a      	add	r2, r1
 8008756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800875a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800875e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d133      	bne.n	80087d8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	440a      	add	r2, r1
 8008786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800878a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800878e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	4413      	add	r3, r2
 8008798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087bc:	d81d      	bhi.n	80087fa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087d4:	d0ec      	beq.n	80087b0 <USB_HC_Halt+0x19e>
 80087d6:	e011      	b.n	80087fc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	69fa      	ldr	r2, [r7, #28]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	e000      	b.n	80087fc <USB_HC_Halt+0x1ea>
          break;
 80087fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3724      	adds	r7, #36	; 0x24
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008820:	2301      	movs	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	04da      	lsls	r2, r3, #19
 8008828:	4b15      	ldr	r3, [pc, #84]	; (8008880 <USB_DoPing+0x74>)
 800882a:	4013      	ands	r3, r2
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	440a      	add	r2, r1
 8008834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800883c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008854:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800885c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	461a      	mov	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	1ff80000 	.word	0x1ff80000

08008884 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff f911 	bl	8007ac0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800889e:	2110      	movs	r1, #16
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff f96b 	bl	8007b7c <USB_FlushTxFifo>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff f997 	bl	8007be4 <USB_FlushRxFifo>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80088c0:	2300      	movs	r3, #0
 80088c2:	61bb      	str	r3, [r7, #24]
 80088c4:	e01f      	b.n	8008906 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fa:	461a      	mov	r2, r3
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	3301      	adds	r3, #1
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2b0f      	cmp	r3, #15
 800890a:	d9dc      	bls.n	80088c6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800890c:	2300      	movs	r3, #0
 800890e:	61bb      	str	r3, [r7, #24]
 8008910:	e034      	b.n	800897c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008928:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008930:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008938:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	461a      	mov	r2, r3
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008958:	d80c      	bhi.n	8008974 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	4413      	add	r3, r2
 8008962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800896c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008970:	d0ec      	beq.n	800894c <USB_StopHost+0xc8>
 8008972:	e000      	b.n	8008976 <USB_StopHost+0xf2>
        break;
 8008974:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	3301      	adds	r3, #1
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b0f      	cmp	r3, #15
 8008980:	d9c7      	bls.n	8008912 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008988:	461a      	mov	r2, r3
 800898a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800898e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008996:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff f880 	bl	8007a9e <USB_EnableGlobalInt>

  return ret;
 800899e:	7ffb      	ldrb	r3, [r7, #31]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3720      	adds	r7, #32
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80089a8:	b590      	push	{r4, r7, lr}
 80089aa:	b089      	sub	sp, #36	; 0x24
 80089ac:	af04      	add	r7, sp, #16
 80089ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80089b0:	2301      	movs	r3, #1
 80089b2:	2202      	movs	r2, #2
 80089b4:	2102      	movs	r1, #2
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fcb2 	bl	8009320 <USBH_FindInterface>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2bff      	cmp	r3, #255	; 0xff
 80089c4:	d002      	beq.n	80089cc <USBH_CDC_InterfaceInit+0x24>
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d901      	bls.n	80089d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089cc:	2302      	movs	r3, #2
 80089ce:	e13d      	b.n	8008c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc87 	bl	80092e8 <USBH_SelectInterface>
 80089da:	4603      	mov	r3, r0
 80089dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80089e4:	2302      	movs	r3, #2
 80089e6:	e131      	b.n	8008c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80089ee:	2050      	movs	r0, #80	; 0x50
 80089f0:	f00f f84e 	bl	8017a90 <malloc>
 80089f4:	4603      	mov	r3, r0
 80089f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e11f      	b.n	8008c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008a0c:	2250      	movs	r2, #80	; 0x50
 8008a0e:	2100      	movs	r1, #0
 8008a10:	68b8      	ldr	r0, [r7, #8]
 8008a12:	f00f fba5 	bl	8018160 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	211a      	movs	r1, #26
 8008a1c:	fb01 f303 	mul.w	r3, r1, r3
 8008a20:	4413      	add	r3, r2
 8008a22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b25b      	sxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da15      	bge.n	8008a5a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	211a      	movs	r1, #26
 8008a34:	fb01 f303 	mul.w	r3, r1, r3
 8008a38:	4413      	add	r3, r2
 8008a3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	211a      	movs	r1, #26
 8008a4a:	fb01 f303 	mul.w	r3, r1, r3
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a54:	881a      	ldrh	r2, [r3, #0]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f002 f986 	bl	800ad72 <USBH_AllocPipe>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	7819      	ldrb	r1, [r3, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	7858      	ldrb	r0, [r3, #1]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	8952      	ldrh	r2, [r2, #10]
 8008a86:	9202      	str	r2, [sp, #8]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	9201      	str	r2, [sp, #4]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	4623      	mov	r3, r4
 8008a90:	4602      	mov	r2, r0
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f002 f93e 	bl	800ad14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f005 fbd9 	bl	800e258 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	210a      	movs	r1, #10
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fc37 	bl	8009320 <USBH_FindInterface>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	2bff      	cmp	r3, #255	; 0xff
 8008aba:	d002      	beq.n	8008ac2 <USBH_CDC_InterfaceInit+0x11a>
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d901      	bls.n	8008ac6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e0c2      	b.n	8008c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	211a      	movs	r1, #26
 8008acc:	fb01 f303 	mul.w	r3, r1, r3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	b25b      	sxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	da16      	bge.n	8008b0c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	211a      	movs	r1, #26
 8008ae4:	fb01 f303 	mul.w	r3, r1, r3
 8008ae8:	4413      	add	r3, r2
 8008aea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	211a      	movs	r1, #26
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b04:	881a      	ldrh	r2, [r3, #0]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	835a      	strh	r2, [r3, #26]
 8008b0a:	e015      	b.n	8008b38 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	211a      	movs	r1, #26
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	211a      	movs	r1, #26
 8008b28:	fb01 f303 	mul.w	r3, r1, r3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b32:	881a      	ldrh	r2, [r3, #0]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	211a      	movs	r1, #26
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	b25b      	sxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	da16      	bge.n	8008b7e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	211a      	movs	r1, #26
 8008b56:	fb01 f303 	mul.w	r3, r1, r3
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b60:	781a      	ldrb	r2, [r3, #0]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	211a      	movs	r1, #26
 8008b6c:	fb01 f303 	mul.w	r3, r1, r3
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b76:	881a      	ldrh	r2, [r3, #0]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	835a      	strh	r2, [r3, #26]
 8008b7c:	e015      	b.n	8008baa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	211a      	movs	r1, #26
 8008b84:	fb01 f303 	mul.w	r3, r1, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	211a      	movs	r1, #26
 8008b9a:	fb01 f303 	mul.w	r3, r1, r3
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008ba4:	881a      	ldrh	r2, [r3, #0]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	7b9b      	ldrb	r3, [r3, #14]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f002 f8de 	bl	800ad72 <USBH_AllocPipe>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	461a      	mov	r2, r3
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	7bdb      	ldrb	r3, [r3, #15]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f002 f8d4 	bl	800ad72 <USBH_AllocPipe>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	461a      	mov	r2, r3
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	7b59      	ldrb	r1, [r3, #13]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	7b98      	ldrb	r0, [r3, #14]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	8b12      	ldrh	r2, [r2, #24]
 8008bea:	9202      	str	r2, [sp, #8]
 8008bec:	2202      	movs	r2, #2
 8008bee:	9201      	str	r2, [sp, #4]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4623      	mov	r3, r4
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f002 f88c 	bl	800ad14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	7b19      	ldrb	r1, [r3, #12]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	7bd8      	ldrb	r0, [r3, #15]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	8b52      	ldrh	r2, [r2, #26]
 8008c14:	9202      	str	r2, [sp, #8]
 8008c16:	2202      	movs	r2, #2
 8008c18:	9201      	str	r2, [sp, #4]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4623      	mov	r3, r4
 8008c1e:	4602      	mov	r2, r0
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f002 f877 	bl	800ad14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	7b5b      	ldrb	r3, [r3, #13]
 8008c32:	2200      	movs	r2, #0
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f005 fb0e 	bl	800e258 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	7b1b      	ldrb	r3, [r3, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f005 fb07 	bl	800e258 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd90      	pop	{r4, r7, pc}

08008c54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f002 f86c 	bl	800ad52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f002 f897 	bl	800adb4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	7b1b      	ldrb	r3, [r3, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00e      	beq.n	8008cb2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	7b1b      	ldrb	r3, [r3, #12]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f002 f859 	bl	800ad52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	7b1b      	ldrb	r3, [r3, #12]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f002 f884 	bl	800adb4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	7b5b      	ldrb	r3, [r3, #13]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00e      	beq.n	8008cd8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	7b5b      	ldrb	r3, [r3, #13]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f002 f846 	bl	800ad52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	7b5b      	ldrb	r3, [r3, #13]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f002 f871 	bl	800adb4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f00e fed7 	bl	8017aa0 <free>
    phost->pActiveClass->pData = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3340      	adds	r3, #64	; 0x40
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f8b1 	bl	8008e86 <GetLineCoding>
 8008d24:	4603      	mov	r3, r0
 8008d26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d34:	2102      	movs	r1, #2
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d877      	bhi.n	8008e58 <USBH_CDC_Process+0x114>
 8008d68:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <USBH_CDC_Process+0x2c>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008d85 	.word	0x08008d85
 8008d74:	08008d8b 	.word	0x08008d8b
 8008d78:	08008dbb 	.word	0x08008dbb
 8008d7c:	08008e2f 	.word	0x08008e2f
 8008d80:	08008e3d 	.word	0x08008e3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
      break;
 8008d88:	e06d      	b.n	8008e66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f897 	bl	8008ec4 <SetLineCoding>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008da8:	e058      	b.n	8008e5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d055      	beq.n	8008e5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2204      	movs	r2, #4
 8008db4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008db8:	e050      	b.n	8008e5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	3340      	adds	r3, #64	; 0x40
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f860 	bl	8008e86 <GetLineCoding>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d126      	bne.n	8008e1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de2:	791b      	ldrb	r3, [r3, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d13b      	bne.n	8008e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d133      	bne.n	8008e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d12b      	bne.n	8008e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d124      	bne.n	8008e60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f982 	bl	8009120 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e1c:	e020      	b.n	8008e60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d01d      	beq.n	8008e60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2204      	movs	r2, #4
 8008e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e2c:	e018      	b.n	8008e60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f867 	bl	8008f02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f8f6 	bl	8009026 <CDC_ProcessReception>
      break;
 8008e3a:	e014      	b.n	8008e66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 f957 	bl	800a0f2 <USBH_ClrFeature>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10a      	bne.n	8008e64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008e56:	e005      	b.n	8008e64 <USBH_CDC_Process+0x120>

    default:
      break;
 8008e58:	bf00      	nop
 8008e5a:	e004      	b.n	8008e66 <USBH_CDC_Process+0x122>
      break;
 8008e5c:	bf00      	nop
 8008e5e:	e002      	b.n	8008e66 <USBH_CDC_Process+0x122>
      break;
 8008e60:	bf00      	nop
 8008e62:	e000      	b.n	8008e66 <USBH_CDC_Process+0x122>
      break;
 8008e64:	bf00      	nop

  }

  return status;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	22a1      	movs	r2, #161	; 0xa1
 8008e94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2221      	movs	r2, #33	; 0x21
 8008e9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2207      	movs	r2, #7
 8008eac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 fbeb 	bl	800a690 <USBH_CtlReq>
 8008eba:	4603      	mov	r3, r0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2221      	movs	r2, #33	; 0x21
 8008ed2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2207      	movs	r2, #7
 8008eea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2207      	movs	r2, #7
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 fbcc 	bl	800a690 <USBH_CtlReq>
 8008ef8:	4603      	mov	r3, r0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b086      	sub	sp, #24
 8008f06:	af02      	add	r7, sp, #8
 8008f08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d002      	beq.n	8008f28 <CDC_ProcessTransmission+0x26>
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d023      	beq.n	8008f6e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008f26:	e07a      	b.n	800901e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	8b12      	ldrh	r2, [r2, #24]
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d90b      	bls.n	8008f4c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	69d9      	ldr	r1, [r3, #28]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8b1a      	ldrh	r2, [r3, #24]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	7b5b      	ldrb	r3, [r3, #13]
 8008f40:	2001      	movs	r0, #1
 8008f42:	9000      	str	r0, [sp, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 fea2 	bl	800ac8e <USBH_BulkSendData>
 8008f4a:	e00b      	b.n	8008f64 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	7b5b      	ldrb	r3, [r3, #13]
 8008f5a:	2001      	movs	r0, #1
 8008f5c:	9000      	str	r0, [sp, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 fe95 	bl	800ac8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008f6c:	e057      	b.n	800901e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	7b5b      	ldrb	r3, [r3, #13]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f005 f945 	bl	800e204 <USBH_LL_GetURBState>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d136      	bne.n	8008ff2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	8b12      	ldrh	r2, [r2, #24]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d90e      	bls.n	8008fae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	8b12      	ldrh	r2, [r2, #24]
 8008f98:	1a9a      	subs	r2, r3, r2
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	8b12      	ldrh	r2, [r2, #24]
 8008fa6:	441a      	add	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	61da      	str	r2, [r3, #28]
 8008fac:	e002      	b.n	8008fb4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008fc4:	e006      	b.n	8008fd4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f892 	bl	80090f8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2204      	movs	r2, #4
 8008fd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	f002 f8c2 	bl	800b174 <osMessageQueuePut>
      break;
 8008ff0:	e014      	b.n	800901c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d111      	bne.n	800901c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2204      	movs	r2, #4
 8009004:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009014:	2300      	movs	r3, #0
 8009016:	2200      	movs	r2, #0
 8009018:	f002 f8ac 	bl	800b174 <osMessageQueuePut>
      break;
 800901c:	bf00      	nop
  }
}
 800901e:	bf00      	nop
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b086      	sub	sp, #24
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009038:	2300      	movs	r3, #0
 800903a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009042:	2b03      	cmp	r3, #3
 8009044:	d002      	beq.n	800904c <CDC_ProcessReception+0x26>
 8009046:	2b04      	cmp	r3, #4
 8009048:	d00e      	beq.n	8009068 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800904a:	e051      	b.n	80090f0 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	6a19      	ldr	r1, [r3, #32]
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	8b5a      	ldrh	r2, [r3, #26]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	7b1b      	ldrb	r3, [r3, #12]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 fe3d 	bl	800acd8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2204      	movs	r2, #4
 8009062:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009066:	e043      	b.n	80090f0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	7b1b      	ldrb	r3, [r3, #12]
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f005 f8c8 	bl	800e204 <USBH_LL_GetURBState>
 8009074:	4603      	mov	r3, r0
 8009076:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009078:	7cfb      	ldrb	r3, [r7, #19]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d137      	bne.n	80090ee <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	7b1b      	ldrb	r3, [r3, #12]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f005 f82b 	bl	800e0e0 <USBH_LL_GetLastXferSize>
 800908a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	429a      	cmp	r2, r3
 8009094:	d016      	beq.n	80090c4 <CDC_ProcessReception+0x9e>
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	8b5b      	ldrh	r3, [r3, #26]
 800909a:	461a      	mov	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4293      	cmp	r3, r2
 80090a0:	d910      	bls.n	80090c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad2      	subs	r2, r2, r3
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	441a      	add	r2, r3
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2203      	movs	r2, #3
 80090be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80090c2:	e006      	b.n	80090d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f81d 	bl	800910c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2204      	movs	r2, #4
 80090d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090e6:	2300      	movs	r3, #0
 80090e8:	2200      	movs	r2, #0
 80090ea:	f002 f843 	bl	800b174 <osMessageQueuePut>
      break;
 80090ee:	bf00      	nop
  }
}
 80090f0:	bf00      	nop
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009148:	2302      	movs	r3, #2
 800914a:	e044      	b.n	80091d6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	79fa      	ldrb	r2, [r7, #7]
 8009150:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f841 	bl	80091ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009198:	2200      	movs	r2, #0
 800919a:	2104      	movs	r1, #4
 800919c:	2010      	movs	r0, #16
 800919e:	f001 ff76 	bl	800b08e <osMessageQueueNew>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80091aa:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <USBH_Init+0xac>)
 80091ac:	4a0d      	ldr	r2, [pc, #52]	; (80091e4 <USBH_Init+0xb0>)
 80091ae:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <USBH_Init+0xac>)
 80091b2:	2280      	movs	r2, #128	; 0x80
 80091b4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <USBH_Init+0xac>)
 80091b8:	2218      	movs	r2, #24
 80091ba:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80091bc:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <USBH_Init+0xac>)
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	4809      	ldr	r0, [pc, #36]	; (80091e8 <USBH_Init+0xb4>)
 80091c2:	f001 feb7 	bl	800af34 <osThreadNew>
 80091c6:	4602      	mov	r2, r0
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f004 fed2 	bl	800df78 <USBH_LL_Init>

  return USBH_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20004828 	.word	0x20004828
 80091e4:	0801915c 	.word	0x0801915c
 80091e8:	08009e69 	.word	0x08009e69

080091ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e009      	b.n	8009212 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	33e0      	adds	r3, #224	; 0xe0
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	2200      	movs	r2, #0
 800920a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3301      	adds	r3, #1
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b0f      	cmp	r3, #15
 8009216:	d9f2      	bls.n	80091fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e009      	b.n	8009232 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009228:	2200      	movs	r2, #0
 800922a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009238:	d3f1      	bcc.n	800921e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2240      	movs	r2, #64	; 0x40
 800925e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d016      	beq.n	80092d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10e      	bne.n	80092d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092b8:	1c59      	adds	r1, r3, #1
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	33de      	adds	r3, #222	; 0xde
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
 80092ce:	e004      	b.n	80092da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092d0:	2302      	movs	r3, #2
 80092d2:	73fb      	strb	r3, [r7, #15]
 80092d4:	e001      	b.n	80092da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092d6:	2302      	movs	r3, #2
 80092d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	429a      	cmp	r2, r3
 8009302:	d204      	bcs.n	800930e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800930c:	e001      	b.n	8009312 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800930e:	2302      	movs	r3, #2
 8009310:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	461a      	mov	r2, r3
 800932e:	4603      	mov	r3, r0
 8009330:	70fb      	strb	r3, [r7, #3]
 8009332:	460b      	mov	r3, r1
 8009334:	70bb      	strb	r3, [r7, #2]
 8009336:	4613      	mov	r3, r2
 8009338:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009348:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800934a:	e025      	b.n	8009398 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	221a      	movs	r2, #26
 8009350:	fb02 f303 	mul.w	r3, r2, r3
 8009354:	3308      	adds	r3, #8
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	4413      	add	r3, r2
 800935a:	3302      	adds	r3, #2
 800935c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	795b      	ldrb	r3, [r3, #5]
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	429a      	cmp	r2, r3
 8009366:	d002      	beq.n	800936e <USBH_FindInterface+0x4e>
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	2bff      	cmp	r3, #255	; 0xff
 800936c:	d111      	bne.n	8009392 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009372:	78ba      	ldrb	r2, [r7, #2]
 8009374:	429a      	cmp	r2, r3
 8009376:	d002      	beq.n	800937e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009378:	78bb      	ldrb	r3, [r7, #2]
 800937a:	2bff      	cmp	r3, #255	; 0xff
 800937c:	d109      	bne.n	8009392 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009382:	787a      	ldrb	r2, [r7, #1]
 8009384:	429a      	cmp	r2, r3
 8009386:	d002      	beq.n	800938e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009388:	787b      	ldrb	r3, [r7, #1]
 800938a:	2bff      	cmp	r3, #255	; 0xff
 800938c:	d101      	bne.n	8009392 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	e006      	b.n	80093a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	3301      	adds	r3, #1
 8009396:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d9d6      	bls.n	800934c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800939e:	23ff      	movs	r3, #255	; 0xff
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f004 fe1b 	bl	800dff0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80093ba:	2101      	movs	r1, #1
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f004 ff34 	bl	800e22a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093d4:	2302      	movs	r3, #2
 80093d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d102      	bne.n	80093ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2203      	movs	r2, #3
 80093ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b0b      	cmp	r3, #11
 80093f6:	f200 8247 	bhi.w	8009888 <USBH_Process+0x4bc>
 80093fa:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <USBH_Process+0x34>)
 80093fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009400:	08009431 	.word	0x08009431
 8009404:	0800947f 	.word	0x0800947f
 8009408:	08009503 	.word	0x08009503
 800940c:	08009807 	.word	0x08009807
 8009410:	08009889 	.word	0x08009889
 8009414:	080095c3 	.word	0x080095c3
 8009418:	08009791 	.word	0x08009791
 800941c:	08009615 	.word	0x08009615
 8009420:	08009651 	.word	0x08009651
 8009424:	0800968b 	.word	0x0800968b
 8009428:	080096e9 	.word	0x080096e9
 800942c:	080097ef 	.word	0x080097ef
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 8227 	beq.w	800988c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009444:	20c8      	movs	r0, #200	; 0xc8
 8009446:	f004 ff37 	bl	800e2b8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f004 fe2d 	bl	800e0aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009474:	2300      	movs	r3, #0
 8009476:	2200      	movs	r2, #0
 8009478:	f001 fe7c 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800947c:	e206      	b.n	800988c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009484:	2b01      	cmp	r3, #1
 8009486:	d107      	bne.n	8009498 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	701a      	strb	r2, [r3, #0]
 8009496:	e025      	b.n	80094e4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800949e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094a2:	d914      	bls.n	80094ce <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094aa:	3301      	adds	r3, #1
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d903      	bls.n	80094c6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	220d      	movs	r2, #13
 80094c2:	701a      	strb	r2, [r3, #0]
 80094c4:	e00e      	b.n	80094e4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	e00a      	b.n	80094e4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094d4:	f103 020a 	add.w	r2, r3, #10
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80094de:	200a      	movs	r0, #10
 80094e0:	f004 feea 	bl	800e2b8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094f8:	2300      	movs	r3, #0
 80094fa:	2200      	movs	r2, #0
 80094fc:	f001 fe3a 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      break;
 8009500:	e1cb      	b.n	800989a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009512:	2104      	movs	r1, #4
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009518:	2064      	movs	r0, #100	; 0x64
 800951a:	f004 fecd 	bl	800e2b8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f004 fd9c 	bl	800e05c <USBH_LL_GetSpeed>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2205      	movs	r2, #5
 8009532:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009534:	2100      	movs	r1, #0
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fc1b 	bl	800ad72 <USBH_AllocPipe>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009544:	2180      	movs	r1, #128	; 0x80
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 fc13 	bl	800ad72 <USBH_AllocPipe>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7919      	ldrb	r1, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009568:	b292      	uxth	r2, r2
 800956a:	9202      	str	r2, [sp, #8]
 800956c:	2200      	movs	r2, #0
 800956e:	9201      	str	r2, [sp, #4]
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	4603      	mov	r3, r0
 8009574:	2280      	movs	r2, #128	; 0x80
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 fbcc 	bl	800ad14 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7959      	ldrb	r1, [r3, #5]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009590:	b292      	uxth	r2, r2
 8009592:	9202      	str	r2, [sp, #8]
 8009594:	2200      	movs	r2, #0
 8009596:	9201      	str	r2, [sp, #4]
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	4603      	mov	r3, r0
 800959c:	2200      	movs	r2, #0
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 fbb8 	bl	800ad14 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095b8:	2300      	movs	r3, #0
 80095ba:	2200      	movs	r2, #0
 80095bc:	f001 fdda 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      break;
 80095c0:	e16b      	b.n	800989a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f96e 	bl	80098a4 <USBH_HandleEnum>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f040 815d 	bne.w	8009890 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d103      	bne.n	80095f0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2208      	movs	r2, #8
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	e002      	b.n	80095f6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2207      	movs	r2, #7
 80095f4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2205      	movs	r2, #5
 80095fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800960a:	2300      	movs	r3, #0
 800960c:	2200      	movs	r2, #0
 800960e:	f001 fdb1 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009612:	e13d      	b.n	8009890 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 813a 	beq.w	8009894 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009626:	2101      	movs	r1, #1
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2208      	movs	r2, #8
 8009630:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2205      	movs	r2, #5
 8009636:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009646:	2300      	movs	r3, #0
 8009648:	2200      	movs	r2, #0
 800964a:	f001 fd93 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800964e:	e121      	b.n	8009894 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009656:	b29b      	uxth	r3, r3
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fd02 	bl	800a064 <USBH_SetCfg>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2209      	movs	r2, #9
 800966a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009680:	2300      	movs	r3, #0
 8009682:	2200      	movs	r2, #0
 8009684:	f001 fd76 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      break;
 8009688:	e107      	b.n	800989a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009690:	f003 0320 	and.w	r3, r3, #32
 8009694:	2b00      	cmp	r3, #0
 8009696:	d015      	beq.n	80096c4 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009698:	2101      	movs	r1, #1
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fd05 	bl	800a0aa <USBH_SetFeature>
 80096a0:	4603      	mov	r3, r0
 80096a2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	220a      	movs	r2, #10
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	e00a      	b.n	80096ca <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d106      	bne.n	80096ca <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	220a      	movs	r2, #10
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e002      	b.n	80096ca <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	220a      	movs	r2, #10
 80096c8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80096de:	2300      	movs	r3, #0
 80096e0:	2200      	movs	r2, #0
 80096e2:	f001 fd47 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      break;
 80096e6:	e0d8      	b.n	800989a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d03f      	beq.n	8009772 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
 80096fe:	e016      	b.n	800972e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009700:	7bfa      	ldrb	r2, [r7, #15]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	32de      	adds	r2, #222	; 0xde
 8009706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970a:	791a      	ldrb	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009712:	429a      	cmp	r2, r3
 8009714:	d108      	bne.n	8009728 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009716:	7bfa      	ldrb	r2, [r7, #15]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	32de      	adds	r2, #222	; 0xde
 800971c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009726:	e005      	b.n	8009734 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	3301      	adds	r3, #1
 800972c:	73fb      	strb	r3, [r7, #15]
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0e5      	beq.n	8009700 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d016      	beq.n	800976c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d109      	bne.n	8009764 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2206      	movs	r2, #6
 8009754:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800975c:	2103      	movs	r1, #3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
 8009762:	e006      	b.n	8009772 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	220d      	movs	r2, #13
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e002      	b.n	8009772 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	220d      	movs	r2, #13
 8009770:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2205      	movs	r2, #5
 8009776:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009786:	2300      	movs	r3, #0
 8009788:	2200      	movs	r2, #0
 800978a:	f001 fcf3 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      break;
 800978e:	e084      	b.n	800989a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d103      	bne.n	80097ba <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	220b      	movs	r2, #11
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	e00a      	b.n	80097d0 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d106      	bne.n	80097d0 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	220d      	movs	r2, #13
 80097c6:	701a      	strb	r2, [r3, #0]
 80097c8:	e002      	b.n	80097d0 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	220d      	movs	r2, #13
 80097ce:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2205      	movs	r2, #5
 80097d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80097e4:	2300      	movs	r3, #0
 80097e6:	2200      	movs	r2, #0
 80097e8:	f001 fcc4 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      break;
 80097ec:	e055      	b.n	800989a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d04f      	beq.n	8009898 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
      }
      break;
 8009804:	e048      	b.n	8009898 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff fcec 	bl	80091ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009842:	2105      	movs	r1, #5
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b01      	cmp	r3, #1
 8009852:	d107      	bne.n	8009864 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff fda5 	bl	80093ac <USBH_Start>
 8009862:	e002      	b.n	800986a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f004 fbc3 	bl	800dff0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800987e:	2300      	movs	r3, #0
 8009880:	2200      	movs	r2, #0
 8009882:	f001 fc77 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      break;
 8009886:	e008      	b.n	800989a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8009888:	bf00      	nop
 800988a:	e006      	b.n	800989a <USBH_Process+0x4ce>
      break;
 800988c:	bf00      	nop
 800988e:	e004      	b.n	800989a <USBH_Process+0x4ce>
      break;
 8009890:	bf00      	nop
 8009892:	e002      	b.n	800989a <USBH_Process+0x4ce>
    break;
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <USBH_Process+0x4ce>
      break;
 8009898:	bf00      	nop
  }
  return USBH_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af04      	add	r7, sp, #16
 80098aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80098ac:	2301      	movs	r3, #1
 80098ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80098b0:	2301      	movs	r3, #1
 80098b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	2b07      	cmp	r3, #7
 80098ba:	f200 8208 	bhi.w	8009cce <USBH_HandleEnum+0x42a>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <USBH_HandleEnum+0x20>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098e5 	.word	0x080098e5
 80098c8:	080099a3 	.word	0x080099a3
 80098cc:	08009a0d 	.word	0x08009a0d
 80098d0:	08009a9b 	.word	0x08009a9b
 80098d4:	08009b05 	.word	0x08009b05
 80098d8:	08009b75 	.word	0x08009b75
 80098dc:	08009c11 	.word	0x08009c11
 80098e0:	08009c8f 	.word	0x08009c8f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098e4:	2108      	movs	r1, #8
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 faec 	bl	8009ec4 <USBH_Get_DevDesc>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d130      	bne.n	8009958 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	7919      	ldrb	r1, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800991a:	b292      	uxth	r2, r2
 800991c:	9202      	str	r2, [sp, #8]
 800991e:	2200      	movs	r2, #0
 8009920:	9201      	str	r2, [sp, #4]
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	4603      	mov	r3, r0
 8009926:	2280      	movs	r2, #128	; 0x80
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 f9f3 	bl	800ad14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7959      	ldrb	r1, [r3, #5]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009942:	b292      	uxth	r2, r2
 8009944:	9202      	str	r2, [sp, #8]
 8009946:	2200      	movs	r2, #0
 8009948:	9201      	str	r2, [sp, #4]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	4603      	mov	r3, r0
 800994e:	2200      	movs	r2, #0
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 f9df 	bl	800ad14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009956:	e1bc      	b.n	8009cd2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b03      	cmp	r3, #3
 800995c:	f040 81b9 	bne.w	8009cd2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009966:	3301      	adds	r3, #1
 8009968:	b2da      	uxtb	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009976:	2b03      	cmp	r3, #3
 8009978:	d903      	bls.n	8009982 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	220d      	movs	r2, #13
 800997e:	701a      	strb	r2, [r3, #0]
      break;
 8009980:	e1a7      	b.n	8009cd2 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	795b      	ldrb	r3, [r3, #5]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 fa13 	bl	800adb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	791b      	ldrb	r3, [r3, #4]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f001 fa0d 	bl	800adb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
      break;
 80099a0:	e197      	b.n	8009cd2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099a2:	2112      	movs	r1, #18
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fa8d 	bl	8009ec4 <USBH_Get_DevDesc>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099ba:	e18c      	b.n	8009cd6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	f040 8189 	bne.w	8009cd6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ca:	3301      	adds	r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d903      	bls.n	80099e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	220d      	movs	r2, #13
 80099e2:	701a      	strb	r2, [r3, #0]
      break;
 80099e4:	e177      	b.n	8009cd6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	795b      	ldrb	r3, [r3, #5]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f001 f9e1 	bl	800adb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	791b      	ldrb	r3, [r3, #4]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 f9db 	bl	800adb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
      break;
 8009a0a:	e164      	b.n	8009cd6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fb04 	bl	800a01c <USBH_SetAddress>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d132      	bne.n	8009a84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009a1e:	2002      	movs	r0, #2
 8009a20:	f004 fc4a 	bl	800e2b8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2203      	movs	r2, #3
 8009a30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	7919      	ldrb	r1, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a46:	b292      	uxth	r2, r2
 8009a48:	9202      	str	r2, [sp, #8]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	9201      	str	r2, [sp, #4]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	4603      	mov	r3, r0
 8009a52:	2280      	movs	r2, #128	; 0x80
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 f95d 	bl	800ad14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	7959      	ldrb	r1, [r3, #5]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a6e:	b292      	uxth	r2, r2
 8009a70:	9202      	str	r2, [sp, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	9201      	str	r2, [sp, #4]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 f949 	bl	800ad14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a82:	e12a      	b.n	8009cda <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	f040 8127 	bne.w	8009cda <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	220d      	movs	r2, #13
 8009a90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	705a      	strb	r2, [r3, #1]
      break;
 8009a98:	e11f      	b.n	8009cda <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009a9a:	2109      	movs	r1, #9
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fa39 	bl	8009f14 <USBH_Get_CfgDesc>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2204      	movs	r2, #4
 8009ab0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ab2:	e114      	b.n	8009cde <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	f040 8111 	bne.w	8009cde <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d903      	bls.n	8009ade <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	220d      	movs	r2, #13
 8009ada:	701a      	strb	r2, [r3, #0]
      break;
 8009adc:	e0ff      	b.n	8009cde <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	795b      	ldrb	r3, [r3, #5]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 f965 	bl	800adb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	791b      	ldrb	r3, [r3, #4]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f95f 	bl	800adb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
      break;
 8009b02:	e0ec      	b.n	8009cde <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa01 	bl	8009f14 <USBH_Get_CfgDesc>
 8009b12:	4603      	mov	r3, r0
 8009b14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d103      	bne.n	8009b24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2205      	movs	r2, #5
 8009b20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b22:	e0de      	b.n	8009ce2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	f040 80db 	bne.w	8009ce2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b32:	3301      	adds	r3, #1
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d903      	bls.n	8009b4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	220d      	movs	r2, #13
 8009b4a:	701a      	strb	r2, [r3, #0]
      break;
 8009b4c:	e0c9      	b.n	8009ce2 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	795b      	ldrb	r3, [r3, #5]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 f92d 	bl	800adb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	791b      	ldrb	r3, [r3, #4]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 f927 	bl	800adb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
      break;
 8009b72:	e0b6      	b.n	8009ce2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d036      	beq.n	8009bec <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b8a:	23ff      	movs	r3, #255	; 0xff
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f9e5 	bl	8009f5c <USBH_Get_StringDesc>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d111      	bne.n	8009bc0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2206      	movs	r2, #6
 8009ba0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2205      	movs	r2, #5
 8009ba6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f001 fadb 	bl	800b174 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bbe:	e092      	b.n	8009ce6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	f040 808f 	bne.w	8009ce6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2206      	movs	r2, #6
 8009bcc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2205      	movs	r2, #5
 8009bd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009be2:	2300      	movs	r3, #0
 8009be4:	2200      	movs	r2, #0
 8009be6:	f001 fac5 	bl	800b174 <osMessageQueuePut>
      break;
 8009bea:	e07c      	b.n	8009ce6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2206      	movs	r2, #6
 8009bf0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2205      	movs	r2, #5
 8009bf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c06:	2300      	movs	r3, #0
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f001 fab3 	bl	800b174 <osMessageQueuePut>
      break;
 8009c0e:	e06a      	b.n	8009ce6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d027      	beq.n	8009c6a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c26:	23ff      	movs	r3, #255	; 0xff
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f997 	bl	8009f5c <USBH_Get_StringDesc>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2207      	movs	r2, #7
 8009c3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c3e:	e054      	b.n	8009cea <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d151      	bne.n	8009cea <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2207      	movs	r2, #7
 8009c4a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2205      	movs	r2, #5
 8009c50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c60:	2300      	movs	r3, #0
 8009c62:	2200      	movs	r2, #0
 8009c64:	f001 fa86 	bl	800b174 <osMessageQueuePut>
      break;
 8009c68:	e03f      	b.n	8009cea <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2207      	movs	r2, #7
 8009c6e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2205      	movs	r2, #5
 8009c74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c84:	2300      	movs	r3, #0
 8009c86:	2200      	movs	r2, #0
 8009c88:	f001 fa74 	bl	800b174 <osMessageQueuePut>
      break;
 8009c8c:	e02d      	b.n	8009cea <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d017      	beq.n	8009cc8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ca4:	23ff      	movs	r3, #255	; 0xff
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f958 	bl	8009f5c <USBH_Get_StringDesc>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d102      	bne.n	8009cbc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009cba:	e018      	b.n	8009cee <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d115      	bne.n	8009cee <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc6:	e012      	b.n	8009cee <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ccc:	e00f      	b.n	8009cee <USBH_HandleEnum+0x44a>

    default:
      break;
 8009cce:	bf00      	nop
 8009cd0:	e00e      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009cd2:	bf00      	nop
 8009cd4:	e00c      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009cd6:	bf00      	nop
 8009cd8:	e00a      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009cda:	bf00      	nop
 8009cdc:	e008      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009cde:	bf00      	nop
 8009ce0:	e006      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e004      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009ce6:	bf00      	nop
 8009ce8:	e002      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <USBH_HandleEnum+0x44c>
      break;
 8009cee:	bf00      	nop
  }
  return Status;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop

08009cfc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f804 	bl	8009d3e <USBH_HandleSof>
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b0b      	cmp	r3, #11
 8009d4e:	d10a      	bne.n	8009d66 <USBH_HandleSof+0x28>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d005      	beq.n	8009d66 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
  }
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009d92:	2300      	movs	r3, #0
 8009d94:	2200      	movs	r2, #0
 8009d96:	f001 f9ed 	bl	800b174 <osMessageQueuePut>
#endif
#endif

  return;
 8009d9a:	bf00      	nop
}
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009db2:	bf00      	nop
}
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009df2:	2300      	movs	r3, #0
 8009df4:	2200      	movs	r2, #0
 8009df6:	f001 f9bd 	bl	800b174 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f004 f8fe 	bl	800e026 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	791b      	ldrb	r3, [r3, #4]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 ffbf 	bl	800adb4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	795b      	ldrb	r3, [r3, #5]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 ffb9 	bl	800adb4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009e56:	2300      	movs	r3, #0
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f001 f98b 	bl	800b174 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e80:	2200      	movs	r2, #0
 8009e82:	f001 f9d7 	bl	800b234 <osMessageQueueGet>
 8009e86:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1f0      	bne.n	8009e70 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff fa9c 	bl	80093cc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009e94:	e7ec      	b.n	8009e70 <USBH_Process_OS+0x8>

08009e96 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f001 f95d 	bl	800b174 <osMessageQueuePut>
#endif

  return USBH_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	4613      	mov	r3, r2
 8009ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f864 	bl	8009fb2 <USBH_GetDescriptor>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f00:	78fa      	ldrb	r2, [r7, #3]
 8009f02:	b292      	uxth	r2, r2
 8009f04:	4619      	mov	r1, r3
 8009f06:	f000 f919 	bl	800a13c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af02      	add	r7, sp, #8
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	331c      	adds	r3, #28
 8009f24:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009f26:	887b      	ldrh	r3, [r7, #2]
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f30:	2100      	movs	r1, #0
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f83d 	bl	8009fb2 <USBH_GetDescriptor>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d107      	bne.n	8009f52 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009f42:	887b      	ldrh	r3, [r7, #2]
 8009f44:	461a      	mov	r2, r3
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f989 	bl	800a260 <USBH_ParseCfgDesc>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	461a      	mov	r2, r3
 8009f68:	460b      	mov	r3, r1
 8009f6a:	72fb      	strb	r3, [r7, #11]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009f70:	7afb      	ldrb	r3, [r7, #11]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f78:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009f80:	893b      	ldrh	r3, [r7, #8]
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	460b      	mov	r3, r1
 8009f86:	2100      	movs	r1, #0
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f812 	bl	8009fb2 <USBH_GetDescriptor>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d107      	bne.n	8009fa8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f9e:	893a      	ldrh	r2, [r7, #8]
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 fb26 	bl	800a5f4 <USBH_ParseStringDesc>
  }

  return status;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	607b      	str	r3, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	72fb      	strb	r3, [r7, #11]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	789b      	ldrb	r3, [r3, #2]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d11c      	bne.n	800a006 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2206      	movs	r2, #6
 8009fdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	893a      	ldrh	r2, [r7, #8]
 8009fe2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009fe4:	893b      	ldrh	r3, [r7, #8]
 8009fe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fee:	d104      	bne.n	8009ffa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f240 4209 	movw	r2, #1033	; 0x409
 8009ff6:	829a      	strh	r2, [r3, #20]
 8009ff8:	e002      	b.n	800a000 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	8b3a      	ldrh	r2, [r7, #24]
 800a004:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a006:	8b3b      	ldrh	r3, [r7, #24]
 800a008:	461a      	mov	r2, r3
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 fb3f 	bl	800a690 <USBH_CtlReq>
 800a012:	4603      	mov	r3, r0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	789b      	ldrb	r3, [r3, #2]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d10f      	bne.n	800a050 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2205      	movs	r2, #5
 800a03a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a050:	2200      	movs	r2, #0
 800a052:	2100      	movs	r1, #0
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fb1b 	bl	800a690 <USBH_CtlReq>
 800a05a:	4603      	mov	r3, r0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	789b      	ldrb	r3, [r3, #2]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d10e      	bne.n	800a096 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2209      	movs	r2, #9
 800a082:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	887a      	ldrh	r2, [r7, #2]
 800a088:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 faf8 	bl	800a690 <USBH_CtlReq>
 800a0a0:	4603      	mov	r3, r0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	789b      	ldrb	r3, [r3, #2]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d10f      	bne.n	800a0de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2203      	movs	r2, #3
 800a0c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fad4 	bl	800a690 <USBH_CtlReq>
 800a0e8:	4603      	mov	r3, r0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	789b      	ldrb	r3, [r3, #2]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10f      	bne.n	800a126 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2202      	movs	r2, #2
 800a10a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fab0 	bl	800a690 <USBH_CtlReq>
 800a130:	4603      	mov	r3, r0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	785a      	ldrb	r2, [r3, #1]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	3302      	adds	r3, #2
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	b29a      	uxth	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	3303      	adds	r3, #3
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4313      	orrs	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	791a      	ldrb	r2, [r3, #4]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	795a      	ldrb	r2, [r3, #5]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	799a      	ldrb	r2, [r3, #6]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	79da      	ldrb	r2, [r3, #7]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	79db      	ldrb	r3, [r3, #7]
 800a19a:	2b20      	cmp	r3, #32
 800a19c:	dc0f      	bgt.n	800a1be <USBH_ParseDevDesc+0x82>
 800a19e:	2b08      	cmp	r3, #8
 800a1a0:	db14      	blt.n	800a1cc <USBH_ParseDevDesc+0x90>
 800a1a2:	3b08      	subs	r3, #8
 800a1a4:	4a2d      	ldr	r2, [pc, #180]	; (800a25c <USBH_ParseDevDesc+0x120>)
 800a1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bf14      	ite	ne
 800a1b2:	2301      	movne	r3, #1
 800a1b4:	2300      	moveq	r3, #0
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <USBH_ParseDevDesc+0x86>
 800a1bc:	e006      	b.n	800a1cc <USBH_ParseDevDesc+0x90>
 800a1be:	2b40      	cmp	r3, #64	; 0x40
 800a1c0:	d104      	bne.n	800a1cc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	79da      	ldrb	r2, [r3, #7]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	71da      	strb	r2, [r3, #7]
      break;
 800a1ca:	e003      	b.n	800a1d4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2240      	movs	r2, #64	; 0x40
 800a1d0:	71da      	strb	r2, [r3, #7]
      break;
 800a1d2:	bf00      	nop
  }

  if (length > 8U)
 800a1d4:	88fb      	ldrh	r3, [r7, #6]
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	d939      	bls.n	800a24e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	3308      	adds	r3, #8
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	3309      	adds	r3, #9
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	021b      	lsls	r3, r3, #8
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	330a      	adds	r3, #10
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	330b      	adds	r3, #11
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	b29b      	uxth	r3, r3
 800a20a:	4313      	orrs	r3, r2
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	330c      	adds	r3, #12
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	b29a      	uxth	r2, r3
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	330d      	adds	r3, #13
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	021b      	lsls	r3, r3, #8
 800a224:	b29b      	uxth	r3, r3
 800a226:	4313      	orrs	r3, r2
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	7b9a      	ldrb	r2, [r3, #14]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	7bda      	ldrb	r2, [r3, #15]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	7c1a      	ldrb	r2, [r3, #16]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	7c5a      	ldrb	r2, [r3, #17]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	745a      	strb	r2, [r3, #17]
  }
}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	01000101 	.word	0x01000101

0800a260 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08c      	sub	sp, #48	; 0x30
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a274:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	781a      	ldrb	r2, [r3, #0]
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	785a      	ldrb	r2, [r3, #1]
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	3302      	adds	r3, #2
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	3303      	adds	r3, #3
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	021b      	lsls	r3, r3, #8
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2bc:	bf28      	it	cs
 800a2be:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	791a      	ldrb	r2, [r3, #4]
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	795a      	ldrb	r2, [r3, #5]
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	799a      	ldrb	r2, [r3, #6]
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	79da      	ldrb	r2, [r3, #7]
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	7a1a      	ldrb	r2, [r3, #8]
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	2b09      	cmp	r3, #9
 800a2f6:	d002      	beq.n	800a2fe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2209      	movs	r2, #9
 800a2fc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	2b09      	cmp	r3, #9
 800a302:	f240 809d 	bls.w	800a440 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a306:	2309      	movs	r3, #9
 800a308:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a30e:	e081      	b.n	800a414 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a310:	f107 0316 	add.w	r3, r7, #22
 800a314:	4619      	mov	r1, r3
 800a316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a318:	f000 f99f 	bl	800a65a <USBH_GetNextDesc>
 800a31c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	2b04      	cmp	r3, #4
 800a324:	d176      	bne.n	800a414 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d002      	beq.n	800a334 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	2209      	movs	r2, #9
 800a332:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a338:	221a      	movs	r2, #26
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	3308      	adds	r3, #8
 800a340:	6a3a      	ldr	r2, [r7, #32]
 800a342:	4413      	add	r3, r2
 800a344:	3302      	adds	r3, #2
 800a346:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a34a:	69f8      	ldr	r0, [r7, #28]
 800a34c:	f000 f87e 	bl	800a44c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a35a:	e043      	b.n	800a3e4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a35c:	f107 0316 	add.w	r3, r7, #22
 800a360:	4619      	mov	r1, r3
 800a362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a364:	f000 f979 	bl	800a65a <USBH_GetNextDesc>
 800a368:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	2b05      	cmp	r3, #5
 800a370:	d138      	bne.n	800a3e4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	795b      	ldrb	r3, [r3, #5]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d10f      	bne.n	800a39a <USBH_ParseCfgDesc+0x13a>
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	799b      	ldrb	r3, [r3, #6]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d10b      	bne.n	800a39a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	79db      	ldrb	r3, [r3, #7]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10f      	bne.n	800a3aa <USBH_ParseCfgDesc+0x14a>
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b09      	cmp	r3, #9
 800a390:	d00b      	beq.n	800a3aa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	2209      	movs	r2, #9
 800a396:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a398:	e007      	b.n	800a3aa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b07      	cmp	r3, #7
 800a3a0:	d004      	beq.n	800a3ac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	2207      	movs	r2, #7
 800a3a6:	701a      	strb	r2, [r3, #0]
 800a3a8:	e000      	b.n	800a3ac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a3aa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a3b4:	3201      	adds	r2, #1
 800a3b6:	00d2      	lsls	r2, r2, #3
 800a3b8:	211a      	movs	r1, #26
 800a3ba:	fb01 f303 	mul.w	r3, r1, r3
 800a3be:	4413      	add	r3, r2
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	6a3a      	ldr	r2, [r7, #32]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3cc:	69b9      	ldr	r1, [r7, #24]
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 f86b 	bl	800a4aa <USBH_ParseEPDesc>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a3da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3de:	3301      	adds	r3, #1
 800a3e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	791b      	ldrb	r3, [r3, #4]
 800a3e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d204      	bcs.n	800a3fa <USBH_ParseCfgDesc+0x19a>
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	885a      	ldrh	r2, [r3, #2]
 800a3f4:	8afb      	ldrh	r3, [r7, #22]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d8b0      	bhi.n	800a35c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	791b      	ldrb	r3, [r3, #4]
 800a3fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a402:	429a      	cmp	r2, r3
 800a404:	d201      	bcs.n	800a40a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a406:	2303      	movs	r3, #3
 800a408:	e01c      	b.n	800a444 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a40a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a40e:	3301      	adds	r3, #1
 800a410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d805      	bhi.n	800a428 <USBH_ParseCfgDesc+0x1c8>
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	885a      	ldrh	r2, [r3, #2]
 800a420:	8afb      	ldrh	r3, [r7, #22]
 800a422:	429a      	cmp	r2, r3
 800a424:	f63f af74 	bhi.w	800a310 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	791b      	ldrb	r3, [r3, #4]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	bf28      	it	cs
 800a430:	2302      	movcs	r3, #2
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a438:	429a      	cmp	r2, r3
 800a43a:	d201      	bcs.n	800a440 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e001      	b.n	800a444 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a444:	4618      	mov	r0, r3
 800a446:	3730      	adds	r7, #48	; 0x30
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781a      	ldrb	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	785a      	ldrb	r2, [r3, #1]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	789a      	ldrb	r2, [r3, #2]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	78da      	ldrb	r2, [r3, #3]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	791a      	ldrb	r2, [r3, #4]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	795a      	ldrb	r2, [r3, #5]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	799a      	ldrb	r2, [r3, #6]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	79da      	ldrb	r2, [r3, #7]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	7a1a      	ldrb	r2, [r3, #8]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	721a      	strb	r2, [r3, #8]
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b087      	sub	sp, #28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	781a      	ldrb	r2, [r3, #0]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	785a      	ldrb	r2, [r3, #1]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	789a      	ldrb	r2, [r3, #2]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	78da      	ldrb	r2, [r3, #3]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3305      	adds	r3, #5
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	021b      	lsls	r3, r3, #8
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	799a      	ldrb	r2, [r3, #6]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	889b      	ldrh	r3, [r3, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a506:	2303      	movs	r3, #3
 800a508:	75fb      	strb	r3, [r7, #23]
 800a50a:	e033      	b.n	800a574 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	889b      	ldrh	r3, [r3, #4]
 800a510:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a514:	f023 0307 	bic.w	r3, r3, #7
 800a518:	b29a      	uxth	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	889b      	ldrh	r3, [r3, #4]
 800a522:	b21a      	sxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	b299      	uxth	r1, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3305      	adds	r3, #5
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	b29b      	uxth	r3, r3
 800a538:	430b      	orrs	r3, r1
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a540:	2b00      	cmp	r3, #0
 800a542:	d110      	bne.n	800a566 <USBH_ParseEPDesc+0xbc>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b299      	uxth	r1, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3305      	adds	r3, #5
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b29b      	uxth	r3, r3
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	b29b      	uxth	r3, r3
 800a558:	430b      	orrs	r3, r1
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	b21b      	sxth	r3, r3
 800a55e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a562:	b21b      	sxth	r3, r3
 800a564:	e001      	b.n	800a56a <USBH_ParseEPDesc+0xc0>
 800a566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a56a:	4313      	orrs	r3, r2
 800a56c:	b21b      	sxth	r3, r3
 800a56e:	b29a      	uxth	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d116      	bne.n	800a5ac <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	78db      	ldrb	r3, [r3, #3]
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	2b01      	cmp	r3, #1
 800a588:	d005      	beq.n	800a596 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	78db      	ldrb	r3, [r3, #3]
 800a58e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a592:	2b03      	cmp	r3, #3
 800a594:	d127      	bne.n	800a5e6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	799b      	ldrb	r3, [r3, #6]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <USBH_ParseEPDesc+0xfc>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	799b      	ldrb	r3, [r3, #6]
 800a5a2:	2b10      	cmp	r3, #16
 800a5a4:	d91f      	bls.n	800a5e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	75fb      	strb	r3, [r7, #23]
 800a5aa:	e01c      	b.n	800a5e6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	78db      	ldrb	r3, [r3, #3]
 800a5b0:	f003 0303 	and.w	r3, r3, #3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d10a      	bne.n	800a5ce <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	799b      	ldrb	r3, [r3, #6]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <USBH_ParseEPDesc+0x11e>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	799b      	ldrb	r3, [r3, #6]
 800a5c4:	2b10      	cmp	r3, #16
 800a5c6:	d90e      	bls.n	800a5e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	75fb      	strb	r3, [r7, #23]
 800a5cc:	e00b      	b.n	800a5e6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	78db      	ldrb	r3, [r3, #3]
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d105      	bne.n	800a5e6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	799b      	ldrb	r3, [r3, #6]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3301      	adds	r3, #1
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d120      	bne.n	800a64e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	1e9a      	subs	r2, r3, #2
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	4293      	cmp	r3, r2
 800a616:	bf28      	it	cs
 800a618:	4613      	movcs	r3, r2
 800a61a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3302      	adds	r3, #2
 800a620:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a622:	2300      	movs	r3, #0
 800a624:	82fb      	strh	r3, [r7, #22]
 800a626:	e00b      	b.n	800a640 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a628:	8afb      	ldrh	r3, [r7, #22]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4413      	add	r3, r2
 800a62e:	781a      	ldrb	r2, [r3, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	3301      	adds	r3, #1
 800a638:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a63a:	8afb      	ldrh	r3, [r7, #22]
 800a63c:	3302      	adds	r3, #2
 800a63e:	82fb      	strh	r3, [r7, #22]
 800a640:	8afa      	ldrh	r2, [r7, #22]
 800a642:	8abb      	ldrh	r3, [r7, #20]
 800a644:	429a      	cmp	r2, r3
 800a646:	d3ef      	bcc.n	800a628 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
  }
}
 800a64e:	bf00      	nop
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	881a      	ldrh	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	4413      	add	r3, r2
 800a670:	b29a      	uxth	r2, r3
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4413      	add	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a682:	68fb      	ldr	r3, [r7, #12]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	789b      	ldrb	r3, [r3, #2]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d002      	beq.n	800a6b0 <USBH_CtlReq+0x20>
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d01d      	beq.n	800a6ea <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a6ae:	e043      	b.n	800a738 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	88fa      	ldrh	r2, [r7, #6]
 800a6ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f000 fd46 	bl	800b174 <osMessageQueuePut>
      break;
 800a6e8:	e026      	b.n	800a738 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 f82a 	bl	800a744 <USBH_HandleControl>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <USBH_CtlReq+0x70>
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d106      	bne.n	800a70e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2201      	movs	r2, #1
 800a704:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	761a      	strb	r2, [r3, #24]
 800a70c:	e005      	b.n	800a71a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d102      	bne.n	800a71a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2203      	movs	r2, #3
 800a71e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a72e:	2300      	movs	r3, #0
 800a730:	2200      	movs	r2, #0
 800a732:	f000 fd1f 	bl	800b174 <osMessageQueuePut>
      break;
 800a736:	bf00      	nop
  }
  return status;
 800a738:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af02      	add	r7, sp, #8
 800a74a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a750:	2300      	movs	r3, #0
 800a752:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7e1b      	ldrb	r3, [r3, #24]
 800a758:	3b01      	subs	r3, #1
 800a75a:	2b0a      	cmp	r3, #10
 800a75c:	f200 8229 	bhi.w	800abb2 <USBH_HandleControl+0x46e>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <USBH_HandleControl+0x24>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a795 	.word	0x0800a795
 800a76c:	0800a7af 	.word	0x0800a7af
 800a770:	0800a851 	.word	0x0800a851
 800a774:	0800a877 	.word	0x0800a877
 800a778:	0800a903 	.word	0x0800a903
 800a77c:	0800a92d 	.word	0x0800a92d
 800a780:	0800a9ef 	.word	0x0800a9ef
 800a784:	0800aa11 	.word	0x0800aa11
 800a788:	0800aaa3 	.word	0x0800aaa3
 800a78c:	0800aac9 	.word	0x0800aac9
 800a790:	0800ab5b 	.word	0x0800ab5b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f103 0110 	add.w	r1, r3, #16
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	795b      	ldrb	r3, [r3, #5]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fa17 	bl	800abd4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	761a      	strb	r2, [r3, #24]
      break;
 800a7ac:	e20c      	b.n	800abc8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	795b      	ldrb	r3, [r3, #5]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f003 fd25 	bl	800e204 <USBH_LL_GetURBState>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d12c      	bne.n	800a81e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	7c1b      	ldrb	r3, [r3, #16]
 800a7c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8adb      	ldrh	r3, [r3, #22]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a7d6:	7b7b      	ldrb	r3, [r7, #13]
 800a7d8:	2b80      	cmp	r3, #128	; 0x80
 800a7da:	d103      	bne.n	800a7e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2203      	movs	r2, #3
 800a7e0:	761a      	strb	r2, [r3, #24]
 800a7e2:	e00d      	b.n	800a800 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2205      	movs	r2, #5
 800a7e8:	761a      	strb	r2, [r3, #24]
 800a7ea:	e009      	b.n	800a800 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a7ec:	7b7b      	ldrb	r3, [r7, #13]
 800a7ee:	2b80      	cmp	r3, #128	; 0x80
 800a7f0:	d103      	bne.n	800a7fa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2209      	movs	r2, #9
 800a7f6:	761a      	strb	r2, [r3, #24]
 800a7f8:	e002      	b.n	800a800 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2207      	movs	r2, #7
 800a7fe:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2203      	movs	r2, #3
 800a804:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a814:	2300      	movs	r3, #0
 800a816:	2200      	movs	r2, #0
 800a818:	f000 fcac 	bl	800b174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a81c:	e1cb      	b.n	800abb6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	2b04      	cmp	r3, #4
 800a822:	d003      	beq.n	800a82c <USBH_HandleControl+0xe8>
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2b02      	cmp	r3, #2
 800a828:	f040 81c5 	bne.w	800abb6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	220b      	movs	r2, #11
 800a830:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2203      	movs	r2, #3
 800a836:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a846:	2300      	movs	r3, #0
 800a848:	2200      	movs	r2, #0
 800a84a:	f000 fc93 	bl	800b174 <osMessageQueuePut>
      break;
 800a84e:	e1b2      	b.n	800abb6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a856:	b29a      	uxth	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6899      	ldr	r1, [r3, #8]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	899a      	ldrh	r2, [r3, #12]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	791b      	ldrb	r3, [r3, #4]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f9f2 	bl	800ac52 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2204      	movs	r2, #4
 800a872:	761a      	strb	r2, [r3, #24]
      break;
 800a874:	e1a8      	b.n	800abc8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	791b      	ldrb	r3, [r3, #4]
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f003 fcc1 	bl	800e204 <USBH_LL_GetURBState>
 800a882:	4603      	mov	r3, r0
 800a884:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d110      	bne.n	800a8ae <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2209      	movs	r2, #9
 800a890:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2203      	movs	r2, #3
 800a896:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f000 fc63 	bl	800b174 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	2b05      	cmp	r3, #5
 800a8b2:	d110      	bne.n	800a8d6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2203      	movs	r2, #3
 800a8bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f000 fc50 	bl	800b174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8d4:	e171      	b.n	800abba <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	f040 816e 	bne.w	800abba <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	220b      	movs	r2, #11
 800a8e2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2203      	movs	r2, #3
 800a8e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f000 fc3a 	bl	800b174 <osMessageQueuePut>
      break;
 800a900:	e15b      	b.n	800abba <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6899      	ldr	r1, [r3, #8]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	899a      	ldrh	r2, [r3, #12]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	795b      	ldrb	r3, [r3, #5]
 800a90e:	2001      	movs	r0, #1
 800a910:	9000      	str	r0, [sp, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f978 	bl	800ac08 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a91e:	b29a      	uxth	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2206      	movs	r2, #6
 800a928:	761a      	strb	r2, [r3, #24]
      break;
 800a92a:	e14d      	b.n	800abc8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	795b      	ldrb	r3, [r3, #5]
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f003 fc66 	bl	800e204 <USBH_LL_GetURBState>
 800a938:	4603      	mov	r3, r0
 800a93a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d111      	bne.n	800a966 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2207      	movs	r2, #7
 800a946:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2203      	movs	r2, #3
 800a94c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a95c:	2300      	movs	r3, #0
 800a95e:	2200      	movs	r2, #0
 800a960:	f000 fc08 	bl	800b174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a964:	e12b      	b.n	800abbe <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b05      	cmp	r3, #5
 800a96a:	d113      	bne.n	800a994 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	220c      	movs	r2, #12
 800a970:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a972:	2303      	movs	r3, #3
 800a974:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2203      	movs	r2, #3
 800a97a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a98a:	2300      	movs	r3, #0
 800a98c:	2200      	movs	r2, #0
 800a98e:	f000 fbf1 	bl	800b174 <osMessageQueuePut>
      break;
 800a992:	e114      	b.n	800abbe <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2b02      	cmp	r3, #2
 800a998:	d111      	bne.n	800a9be <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2205      	movs	r2, #5
 800a99e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f000 fbdc 	bl	800b174 <osMessageQueuePut>
      break;
 800a9bc:	e0ff      	b.n	800abbe <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	f040 80fc 	bne.w	800abbe <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	220b      	movs	r2, #11
 800a9ca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2203      	movs	r2, #3
 800a9d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f000 fbc4 	bl	800b174 <osMessageQueuePut>
      break;
 800a9ec:	e0e7      	b.n	800abbe <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	791b      	ldrb	r3, [r3, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f92b 	bl	800ac52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	761a      	strb	r2, [r3, #24]

      break;
 800aa0e:	e0db      	b.n	800abc8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	791b      	ldrb	r3, [r3, #4]
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f003 fbf4 	bl	800e204 <USBH_LL_GetURBState>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aa20:	7bbb      	ldrb	r3, [r7, #14]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d113      	bne.n	800aa4e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	220d      	movs	r2, #13
 800aa2a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2203      	movs	r2, #3
 800aa34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa44:	2300      	movs	r3, #0
 800aa46:	2200      	movs	r2, #0
 800aa48:	f000 fb94 	bl	800b174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa4c:	e0b9      	b.n	800abc2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d111      	bne.n	800aa78 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	220b      	movs	r2, #11
 800aa58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa6e:	2300      	movs	r3, #0
 800aa70:	2200      	movs	r2, #0
 800aa72:	f000 fb7f 	bl	800b174 <osMessageQueuePut>
      break;
 800aa76:	e0a4      	b.n	800abc2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	2b05      	cmp	r3, #5
 800aa7c:	f040 80a1 	bne.w	800abc2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800aa80:	2303      	movs	r3, #3
 800aa82:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2203      	movs	r2, #3
 800aa88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f000 fb6a 	bl	800b174 <osMessageQueuePut>
      break;
 800aaa0:	e08f      	b.n	800abc2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	795b      	ldrb	r3, [r3, #5]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	9200      	str	r2, [sp, #0]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f8aa 	bl	800ac08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	220a      	movs	r2, #10
 800aac4:	761a      	strb	r2, [r3, #24]
      break;
 800aac6:	e07f      	b.n	800abc8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	795b      	ldrb	r3, [r3, #5]
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f003 fb98 	bl	800e204 <USBH_LL_GetURBState>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d113      	bne.n	800ab06 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	220d      	movs	r2, #13
 800aae6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2203      	movs	r2, #3
 800aaec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aafc:	2300      	movs	r3, #0
 800aafe:	2200      	movs	r2, #0
 800ab00:	f000 fb38 	bl	800b174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab04:	e05f      	b.n	800abc6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d111      	bne.n	800ab30 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2209      	movs	r2, #9
 800ab10:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2203      	movs	r2, #3
 800ab16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab26:	2300      	movs	r3, #0
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f000 fb23 	bl	800b174 <osMessageQueuePut>
      break;
 800ab2e:	e04a      	b.n	800abc6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d147      	bne.n	800abc6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	220b      	movs	r2, #11
 800ab3a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2203      	movs	r2, #3
 800ab40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab50:	2300      	movs	r3, #0
 800ab52:	2200      	movs	r2, #0
 800ab54:	f000 fb0e 	bl	800b174 <osMessageQueuePut>
      break;
 800ab58:	e035      	b.n	800abc6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	7e5b      	ldrb	r3, [r3, #25]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	765a      	strb	r2, [r3, #25]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	7e5b      	ldrb	r3, [r3, #25]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d806      	bhi.n	800ab7c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ab7a:	e025      	b.n	800abc8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab82:	2106      	movs	r1, #6
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	795b      	ldrb	r3, [r3, #5]
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f90d 	bl	800adb4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	791b      	ldrb	r3, [r3, #4]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f907 	bl	800adb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800abac:	2302      	movs	r3, #2
 800abae:	73fb      	strb	r3, [r7, #15]
      break;
 800abb0:	e00a      	b.n	800abc8 <USBH_HandleControl+0x484>

    default:
      break;
 800abb2:	bf00      	nop
 800abb4:	e008      	b.n	800abc8 <USBH_HandleControl+0x484>
      break;
 800abb6:	bf00      	nop
 800abb8:	e006      	b.n	800abc8 <USBH_HandleControl+0x484>
      break;
 800abba:	bf00      	nop
 800abbc:	e004      	b.n	800abc8 <USBH_HandleControl+0x484>
      break;
 800abbe:	bf00      	nop
 800abc0:	e002      	b.n	800abc8 <USBH_HandleControl+0x484>
      break;
 800abc2:	bf00      	nop
 800abc4:	e000      	b.n	800abc8 <USBH_HandleControl+0x484>
      break;
 800abc6:	bf00      	nop
  }

  return status;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop

0800abd4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af04      	add	r7, sp, #16
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abe2:	79f9      	ldrb	r1, [r7, #7]
 800abe4:	2300      	movs	r3, #0
 800abe6:	9303      	str	r3, [sp, #12]
 800abe8:	2308      	movs	r3, #8
 800abea:	9302      	str	r3, [sp, #8]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	9301      	str	r3, [sp, #4]
 800abf0:	2300      	movs	r3, #0
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	2200      	movs	r2, #0
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f003 fad2 	bl	800e1a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af04      	add	r7, sp, #16
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4611      	mov	r1, r2
 800ac14:	461a      	mov	r2, r3
 800ac16:	460b      	mov	r3, r1
 800ac18:	80fb      	strh	r3, [r7, #6]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac2c:	7979      	ldrb	r1, [r7, #5]
 800ac2e:	7e3b      	ldrb	r3, [r7, #24]
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	9302      	str	r3, [sp, #8]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2200      	movs	r2, #0
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f003 faad 	bl	800e1a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af04      	add	r7, sp, #16
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	461a      	mov	r2, r3
 800ac60:	460b      	mov	r3, r1
 800ac62:	80fb      	strh	r3, [r7, #6]
 800ac64:	4613      	mov	r3, r2
 800ac66:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac68:	7979      	ldrb	r1, [r7, #5]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9303      	str	r3, [sp, #12]
 800ac6e:	88fb      	ldrh	r3, [r7, #6]
 800ac70:	9302      	str	r3, [sp, #8]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	2301      	movs	r3, #1
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f003 fa8f 	bl	800e1a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ac84:	2300      	movs	r3, #0

}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b088      	sub	sp, #32
 800ac92:	af04      	add	r7, sp, #16
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	80fb      	strh	r3, [r7, #6]
 800aca0:	4613      	mov	r3, r2
 800aca2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800acb2:	7979      	ldrb	r1, [r7, #5]
 800acb4:	7e3b      	ldrb	r3, [r7, #24]
 800acb6:	9303      	str	r3, [sp, #12]
 800acb8:	88fb      	ldrh	r3, [r7, #6]
 800acba:	9302      	str	r3, [sp, #8]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	2301      	movs	r3, #1
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	2302      	movs	r3, #2
 800acc6:	2200      	movs	r2, #0
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f003 fa6a 	bl	800e1a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af04      	add	r7, sp, #16
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4611      	mov	r1, r2
 800ace4:	461a      	mov	r2, r3
 800ace6:	460b      	mov	r3, r1
 800ace8:	80fb      	strh	r3, [r7, #6]
 800acea:	4613      	mov	r3, r2
 800acec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800acee:	7979      	ldrb	r1, [r7, #5]
 800acf0:	2300      	movs	r3, #0
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	88fb      	ldrh	r3, [r7, #6]
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	2301      	movs	r3, #1
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2302      	movs	r3, #2
 800ad02:	2201      	movs	r2, #1
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f003 fa4c 	bl	800e1a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af04      	add	r7, sp, #16
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	70fb      	strb	r3, [r7, #3]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70bb      	strb	r3, [r7, #2]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ad2e:	7878      	ldrb	r0, [r7, #1]
 800ad30:	78ba      	ldrb	r2, [r7, #2]
 800ad32:	78f9      	ldrb	r1, [r7, #3]
 800ad34:	8b3b      	ldrh	r3, [r7, #24]
 800ad36:	9302      	str	r3, [sp, #8]
 800ad38:	7d3b      	ldrb	r3, [r7, #20]
 800ad3a:	9301      	str	r3, [sp, #4]
 800ad3c:	7c3b      	ldrb	r3, [r7, #16]
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	4603      	mov	r3, r0
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f003 f9df 	bl	800e106 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ad5e:	78fb      	ldrb	r3, [r7, #3]
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f003 f9fe 	bl	800e164 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f836 	bl	800adf0 <USBH_GetFreePipe>
 800ad84:	4603      	mov	r3, r0
 800ad86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ad88:	89fb      	ldrh	r3, [r7, #14]
 800ad8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d00a      	beq.n	800ada8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ad92:	78fa      	ldrb	r2, [r7, #3]
 800ad94:	89fb      	ldrh	r3, [r7, #14]
 800ad96:	f003 030f 	and.w	r3, r3, #15
 800ad9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	33e0      	adds	r3, #224	; 0xe0
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	440b      	add	r3, r1
 800ada6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ada8:	89fb      	ldrh	r3, [r7, #14]
 800adaa:	b2db      	uxtb	r3, r3
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	2b0f      	cmp	r3, #15
 800adc4:	d80d      	bhi.n	800ade2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800adc6:	78fb      	ldrb	r3, [r7, #3]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	33e0      	adds	r3, #224	; 0xe0
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	33e0      	adds	r3, #224	; 0xe0
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	440b      	add	r3, r1
 800ade0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	e00f      	b.n	800ae22 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	33e0      	adds	r3, #224	; 0xe0
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d102      	bne.n	800ae1c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	e007      	b.n	800ae2c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	73fb      	strb	r3, [r7, #15]
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	2b0f      	cmp	r3, #15
 800ae26:	d9ec      	bls.n	800ae02 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ae28:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <__NVIC_SetPriority>:
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	6039      	str	r1, [r7, #0]
 800ae42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	db0a      	blt.n	800ae62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	490c      	ldr	r1, [pc, #48]	; (800ae84 <__NVIC_SetPriority+0x4c>)
 800ae52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae56:	0112      	lsls	r2, r2, #4
 800ae58:	b2d2      	uxtb	r2, r2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ae60:	e00a      	b.n	800ae78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	4908      	ldr	r1, [pc, #32]	; (800ae88 <__NVIC_SetPriority+0x50>)
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	f003 030f 	and.w	r3, r3, #15
 800ae6e:	3b04      	subs	r3, #4
 800ae70:	0112      	lsls	r2, r2, #4
 800ae72:	b2d2      	uxtb	r2, r2
 800ae74:	440b      	add	r3, r1
 800ae76:	761a      	strb	r2, [r3, #24]
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	e000e100 	.word	0xe000e100
 800ae88:	e000ed00 	.word	0xe000ed00

0800ae8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae90:	2100      	movs	r1, #0
 800ae92:	f06f 0004 	mvn.w	r0, #4
 800ae96:	f7ff ffcf 	bl	800ae38 <__NVIC_SetPriority>
#endif
}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aea6:	f3ef 8305 	mrs	r3, IPSR
 800aeaa:	603b      	str	r3, [r7, #0]
  return(result);
 800aeac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aeb2:	f06f 0305 	mvn.w	r3, #5
 800aeb6:	607b      	str	r3, [r7, #4]
 800aeb8:	e00c      	b.n	800aed4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aeba:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <osKernelInitialize+0x44>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d105      	bne.n	800aece <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aec2:	4b08      	ldr	r3, [pc, #32]	; (800aee4 <osKernelInitialize+0x44>)
 800aec4:	2201      	movs	r2, #1
 800aec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	607b      	str	r3, [r7, #4]
 800aecc:	e002      	b.n	800aed4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aed4:	687b      	ldr	r3, [r7, #4]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	2000484c 	.word	0x2000484c

0800aee8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeee:	f3ef 8305 	mrs	r3, IPSR
 800aef2:	603b      	str	r3, [r7, #0]
  return(result);
 800aef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <osKernelStart+0x1a>
    stat = osErrorISR;
 800aefa:	f06f 0305 	mvn.w	r3, #5
 800aefe:	607b      	str	r3, [r7, #4]
 800af00:	e010      	b.n	800af24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af02:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <osKernelStart+0x48>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d109      	bne.n	800af1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af0a:	f7ff ffbf 	bl	800ae8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af0e:	4b08      	ldr	r3, [pc, #32]	; (800af30 <osKernelStart+0x48>)
 800af10:	2202      	movs	r2, #2
 800af12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af14:	f001 fa50 	bl	800c3b8 <vTaskStartScheduler>
      stat = osOK;
 800af18:	2300      	movs	r3, #0
 800af1a:	607b      	str	r3, [r7, #4]
 800af1c:	e002      	b.n	800af24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800af1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af24:	687b      	ldr	r3, [r7, #4]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	2000484c 	.word	0x2000484c

0800af34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800af34:	b580      	push	{r7, lr}
 800af36:	b08e      	sub	sp, #56	; 0x38
 800af38:	af04      	add	r7, sp, #16
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800af40:	2300      	movs	r3, #0
 800af42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af44:	f3ef 8305 	mrs	r3, IPSR
 800af48:	617b      	str	r3, [r7, #20]
  return(result);
 800af4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d17e      	bne.n	800b04e <osThreadNew+0x11a>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d07b      	beq.n	800b04e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800af56:	2380      	movs	r3, #128	; 0x80
 800af58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800af5a:	2318      	movs	r3, #24
 800af5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af5e:	2300      	movs	r3, #0
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800af62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d045      	beq.n	800affa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <osThreadNew+0x48>
        name = attr->name;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d008      	beq.n	800afa2 <osThreadNew+0x6e>
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	2b38      	cmp	r3, #56	; 0x38
 800af94:	d805      	bhi.n	800afa2 <osThreadNew+0x6e>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <osThreadNew+0x72>
        return (NULL);
 800afa2:	2300      	movs	r3, #0
 800afa4:	e054      	b.n	800b050 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	089b      	lsrs	r3, r3, #2
 800afb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00e      	beq.n	800afdc <osThreadNew+0xa8>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	2b5b      	cmp	r3, #91	; 0x5b
 800afc4:	d90a      	bls.n	800afdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d006      	beq.n	800afdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <osThreadNew+0xa8>
        mem = 1;
 800afd6:	2301      	movs	r3, #1
 800afd8:	61bb      	str	r3, [r7, #24]
 800afda:	e010      	b.n	800affe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10c      	bne.n	800affe <osThreadNew+0xca>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d108      	bne.n	800affe <osThreadNew+0xca>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d104      	bne.n	800affe <osThreadNew+0xca>
          mem = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
 800aff8:	e001      	b.n	800affe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d110      	bne.n	800b026 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b00c:	9202      	str	r2, [sp, #8]
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	6a3a      	ldr	r2, [r7, #32]
 800b018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f000 fff6 	bl	800c00c <xTaskCreateStatic>
 800b020:	4603      	mov	r3, r0
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	e013      	b.n	800b04e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d110      	bne.n	800b04e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	b29a      	uxth	r2, r3
 800b030:	f107 0310 	add.w	r3, r7, #16
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f001 f841 	bl	800c0c6 <xTaskCreate>
 800b044:	4603      	mov	r3, r0
 800b046:	2b01      	cmp	r3, #1
 800b048:	d001      	beq.n	800b04e <osThreadNew+0x11a>
            hTask = NULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b04e:	693b      	ldr	r3, [r7, #16]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3728      	adds	r7, #40	; 0x28
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b060:	f3ef 8305 	mrs	r3, IPSR
 800b064:	60bb      	str	r3, [r7, #8]
  return(result);
 800b066:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <osDelay+0x1c>
    stat = osErrorISR;
 800b06c:	f06f 0305 	mvn.w	r3, #5
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	e007      	b.n	800b084 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 f966 	bl	800c350 <vTaskDelay>
    }
  }

  return (stat);
 800b084:	68fb      	ldr	r3, [r7, #12]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b08e:	b580      	push	{r7, lr}
 800b090:	b08a      	sub	sp, #40	; 0x28
 800b092:	af02      	add	r7, sp, #8
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b09e:	f3ef 8305 	mrs	r3, IPSR
 800b0a2:	613b      	str	r3, [r7, #16]
  return(result);
 800b0a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d15f      	bne.n	800b16a <osMessageQueueNew+0xdc>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d05c      	beq.n	800b16a <osMessageQueueNew+0xdc>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d059      	beq.n	800b16a <osMessageQueueNew+0xdc>
    mem = -1;
 800b0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d029      	beq.n	800b116 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d012      	beq.n	800b0f0 <osMessageQueueNew+0x62>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	2b4f      	cmp	r3, #79	; 0x4f
 800b0d0:	d90e      	bls.n	800b0f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695a      	ldr	r2, [r3, #20]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	fb01 f303 	mul.w	r3, r1, r3
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d302      	bcc.n	800b0f0 <osMessageQueueNew+0x62>
        mem = 1;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	61bb      	str	r3, [r7, #24]
 800b0ee:	e014      	b.n	800b11a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d110      	bne.n	800b11a <osMessageQueueNew+0x8c>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10c      	bne.n	800b11a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b104:	2b00      	cmp	r3, #0
 800b106:	d108      	bne.n	800b11a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <osMessageQueueNew+0x8c>
          mem = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	61bb      	str	r3, [r7, #24]
 800b114:	e001      	b.n	800b11a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d10b      	bne.n	800b138 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691a      	ldr	r2, [r3, #16]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	2100      	movs	r1, #0
 800b12a:	9100      	str	r1, [sp, #0]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f000 fa2e 	bl	800b590 <xQueueGenericCreateStatic>
 800b134:	61f8      	str	r0, [r7, #28]
 800b136:	e008      	b.n	800b14a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d105      	bne.n	800b14a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b13e:	2200      	movs	r2, #0
 800b140:	68b9      	ldr	r1, [r7, #8]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 fa9c 	bl	800b680 <xQueueGenericCreate>
 800b148:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00c      	beq.n	800b16a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <osMessageQueueNew+0xd0>
        name = attr->name;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	e001      	b.n	800b162 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b15e:	2300      	movs	r3, #0
 800b160:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b162:	6979      	ldr	r1, [r7, #20]
 800b164:	69f8      	ldr	r0, [r7, #28]
 800b166:	f000 fef3 	bl	800bf50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b16a:	69fb      	ldr	r3, [r7, #28]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3720      	adds	r7, #32
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b088      	sub	sp, #32
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	4613      	mov	r3, r2
 800b182:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b188:	2300      	movs	r3, #0
 800b18a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b18c:	f3ef 8305 	mrs	r3, IPSR
 800b190:	617b      	str	r3, [r7, #20]
  return(result);
 800b192:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b194:	2b00      	cmp	r3, #0
 800b196:	d028      	beq.n	800b1ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d005      	beq.n	800b1aa <osMessageQueuePut+0x36>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <osMessageQueuePut+0x36>
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b1aa:	f06f 0303 	mvn.w	r3, #3
 800b1ae:	61fb      	str	r3, [r7, #28]
 800b1b0:	e038      	b.n	800b224 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b1b6:	f107 0210 	add.w	r2, r7, #16
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	69b8      	ldr	r0, [r7, #24]
 800b1c0:	f000 fbba 	bl	800b938 <xQueueGenericSendFromISR>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d003      	beq.n	800b1d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b1ca:	f06f 0302 	mvn.w	r3, #2
 800b1ce:	61fb      	str	r3, [r7, #28]
 800b1d0:	e028      	b.n	800b224 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d025      	beq.n	800b224 <osMessageQueuePut+0xb0>
 800b1d8:	4b15      	ldr	r3, [pc, #84]	; (800b230 <osMessageQueuePut+0xbc>)
 800b1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	e01c      	b.n	800b224 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <osMessageQueuePut+0x82>
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d103      	bne.n	800b1fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b1f6:	f06f 0303 	mvn.w	r3, #3
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	e012      	b.n	800b224 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1fe:	2300      	movs	r3, #0
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	69b8      	ldr	r0, [r7, #24]
 800b206:	f000 fa99 	bl	800b73c <xQueueGenericSend>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d009      	beq.n	800b224 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b216:	f06f 0301 	mvn.w	r3, #1
 800b21a:	61fb      	str	r3, [r7, #28]
 800b21c:	e002      	b.n	800b224 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b21e:	f06f 0302 	mvn.w	r3, #2
 800b222:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b224:	69fb      	ldr	r3, [r7, #28]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3720      	adds	r7, #32
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	e000ed04 	.word	0xe000ed04

0800b234 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b246:	2300      	movs	r3, #0
 800b248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b24a:	f3ef 8305 	mrs	r3, IPSR
 800b24e:	617b      	str	r3, [r7, #20]
  return(result);
 800b250:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b252:	2b00      	cmp	r3, #0
 800b254:	d028      	beq.n	800b2a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <osMessageQueueGet+0x34>
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <osMessageQueueGet+0x34>
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d003      	beq.n	800b270 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b268:	f06f 0303 	mvn.w	r3, #3
 800b26c:	61fb      	str	r3, [r7, #28]
 800b26e:	e037      	b.n	800b2e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b270:	2300      	movs	r3, #0
 800b272:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b274:	f107 0310 	add.w	r3, r7, #16
 800b278:	461a      	mov	r2, r3
 800b27a:	68b9      	ldr	r1, [r7, #8]
 800b27c:	69b8      	ldr	r0, [r7, #24]
 800b27e:	f000 fcd7 	bl	800bc30 <xQueueReceiveFromISR>
 800b282:	4603      	mov	r3, r0
 800b284:	2b01      	cmp	r3, #1
 800b286:	d003      	beq.n	800b290 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b288:	f06f 0302 	mvn.w	r3, #2
 800b28c:	61fb      	str	r3, [r7, #28]
 800b28e:	e027      	b.n	800b2e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d024      	beq.n	800b2e0 <osMessageQueueGet+0xac>
 800b296:	4b15      	ldr	r3, [pc, #84]	; (800b2ec <osMessageQueueGet+0xb8>)
 800b298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	e01b      	b.n	800b2e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <osMessageQueueGet+0x80>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d103      	bne.n	800b2bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b2b4:	f06f 0303 	mvn.w	r3, #3
 800b2b8:	61fb      	str	r3, [r7, #28]
 800b2ba:	e011      	b.n	800b2e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	69b8      	ldr	r0, [r7, #24]
 800b2c2:	f000 fbd5 	bl	800ba70 <xQueueReceive>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d009      	beq.n	800b2e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b2d2:	f06f 0301 	mvn.w	r3, #1
 800b2d6:	61fb      	str	r3, [r7, #28]
 800b2d8:	e002      	b.n	800b2e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b2da:	f06f 0302 	mvn.w	r3, #2
 800b2de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b2e0:	69fb      	ldr	r3, [r7, #28]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3720      	adds	r7, #32
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	e000ed04 	.word	0xe000ed04

0800b2f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4a07      	ldr	r2, [pc, #28]	; (800b31c <vApplicationGetIdleTaskMemory+0x2c>)
 800b300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	4a06      	ldr	r2, [pc, #24]	; (800b320 <vApplicationGetIdleTaskMemory+0x30>)
 800b306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2280      	movs	r2, #128	; 0x80
 800b30c:	601a      	str	r2, [r3, #0]
}
 800b30e:	bf00      	nop
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20004850 	.word	0x20004850
 800b320:	200048ac 	.word	0x200048ac

0800b324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4a07      	ldr	r2, [pc, #28]	; (800b350 <vApplicationGetTimerTaskMemory+0x2c>)
 800b334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	4a06      	ldr	r2, [pc, #24]	; (800b354 <vApplicationGetTimerTaskMemory+0x30>)
 800b33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b342:	601a      	str	r2, [r3, #0]
}
 800b344:	bf00      	nop
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	20004aac 	.word	0x20004aac
 800b354:	20004b08 	.word	0x20004b08

0800b358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f103 0208 	add.w	r2, r3, #8
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f103 0208 	add.w	r2, r3, #8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f103 0208 	add.w	r2, r3, #8
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	601a      	str	r2, [r3, #0]
}
 800b3ee:	bf00      	nop
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b410:	d103      	bne.n	800b41a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e00c      	b.n	800b434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3308      	adds	r3, #8
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e002      	b.n	800b428 <vListInsert+0x2e>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	429a      	cmp	r2, r3
 800b432:	d2f6      	bcs.n	800b422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	601a      	str	r2, [r3, #0]
}
 800b460:	bf00      	nop
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	6892      	ldr	r2, [r2, #8]
 800b482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	6852      	ldr	r2, [r2, #4]
 800b48c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	429a      	cmp	r2, r3
 800b496:	d103      	bne.n	800b4a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	689a      	ldr	r2, [r3, #8]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	1e5a      	subs	r2, r3, #1
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <xQueueGenericReset+0x2a>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60bb      	str	r3, [r7, #8]
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4ea:	f002 f92b 	bl	800d744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f6:	68f9      	ldr	r1, [r7, #12]
 800b4f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	441a      	add	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51a:	3b01      	subs	r3, #1
 800b51c:	68f9      	ldr	r1, [r7, #12]
 800b51e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b520:	fb01 f303 	mul.w	r3, r1, r3
 800b524:	441a      	add	r2, r3
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	22ff      	movs	r2, #255	; 0xff
 800b52e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	22ff      	movs	r2, #255	; 0xff
 800b536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d114      	bne.n	800b56a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01a      	beq.n	800b57e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3310      	adds	r3, #16
 800b54c:	4618      	mov	r0, r3
 800b54e:	f001 f9bd 	bl	800c8cc <xTaskRemoveFromEventList>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d012      	beq.n	800b57e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <xQueueGenericReset+0xcc>)
 800b55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	e009      	b.n	800b57e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3310      	adds	r3, #16
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff fef2 	bl	800b358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3324      	adds	r3, #36	; 0x24
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff feed 	bl	800b358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b57e:	f002 f911 	bl	800d7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b582:	2301      	movs	r3, #1
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	e000ed04 	.word	0xe000ed04

0800b590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08e      	sub	sp, #56	; 0x38
 800b594:	af02      	add	r7, sp, #8
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10a      	bne.n	800b5ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <xQueueGenericCreateStatic+0x52>
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <xQueueGenericCreateStatic+0x56>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <xQueueGenericCreateStatic+0x58>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	623b      	str	r3, [r7, #32]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <xQueueGenericCreateStatic+0x7e>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <xQueueGenericCreateStatic+0x82>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <xQueueGenericCreateStatic+0x84>
 800b612:	2300      	movs	r3, #0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10a      	bne.n	800b62e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	61fb      	str	r3, [r7, #28]
}
 800b62a:	bf00      	nop
 800b62c:	e7fe      	b.n	800b62c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b62e:	2350      	movs	r3, #80	; 0x50
 800b630:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b50      	cmp	r3, #80	; 0x50
 800b636:	d00a      	beq.n	800b64e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	61bb      	str	r3, [r7, #24]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b64e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00d      	beq.n	800b676 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b662:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	4613      	mov	r3, r2
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	68b9      	ldr	r1, [r7, #8]
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 f83f 	bl	800b6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b678:	4618      	mov	r0, r3
 800b67a:	3730      	adds	r7, #48	; 0x30
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08a      	sub	sp, #40	; 0x28
 800b684:	af02      	add	r7, sp, #8
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	4613      	mov	r3, r2
 800b68c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10a      	bne.n	800b6aa <xQueueGenericCreate+0x2a>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	613b      	str	r3, [r7, #16]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	fb02 f303 	mul.w	r3, r2, r3
 800b6b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	3350      	adds	r3, #80	; 0x50
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f002 f965 	bl	800d988 <pvPortMalloc>
 800b6be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d011      	beq.n	800b6ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	3350      	adds	r3, #80	; 0x50
 800b6ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6d8:	79fa      	ldrb	r2, [r7, #7]
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f805 	bl	800b6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6ea:	69bb      	ldr	r3, [r7, #24]
	}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3720      	adds	r7, #32
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d103      	bne.n	800b710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	e002      	b.n	800b716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b722:	2101      	movs	r1, #1
 800b724:	69b8      	ldr	r0, [r7, #24]
 800b726:	f7ff fecb 	bl	800b4c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	78fa      	ldrb	r2, [r7, #3]
 800b72e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b732:	bf00      	nop
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08e      	sub	sp, #56	; 0x38
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b74a:	2300      	movs	r3, #0
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <xQueueGenericSend+0x32>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d103      	bne.n	800b77c <xQueueGenericSend+0x40>
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <xQueueGenericSend+0x44>
 800b77c:	2301      	movs	r3, #1
 800b77e:	e000      	b.n	800b782 <xQueueGenericSend+0x46>
 800b780:	2300      	movs	r3, #0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <xQueueGenericSend+0x60>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d103      	bne.n	800b7aa <xQueueGenericSend+0x6e>
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d101      	bne.n	800b7ae <xQueueGenericSend+0x72>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e000      	b.n	800b7b0 <xQueueGenericSend+0x74>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xQueueGenericSend+0x8e>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	623b      	str	r3, [r7, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ca:	f001 fa63 	bl	800cc94 <xTaskGetSchedulerState>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <xQueueGenericSend+0x9e>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <xQueueGenericSend+0xa2>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <xQueueGenericSend+0xa4>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueGenericSend+0xbe>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61fb      	str	r3, [r7, #28]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fa:	f001 ffa3 	bl	800d744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b806:	429a      	cmp	r2, r3
 800b808:	d302      	bcc.n	800b810 <xQueueGenericSend+0xd4>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d129      	bne.n	800b864 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b816:	f000 fa8b 	bl	800bd30 <prvCopyDataToQueue>
 800b81a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	d010      	beq.n	800b846 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	3324      	adds	r3, #36	; 0x24
 800b828:	4618      	mov	r0, r3
 800b82a:	f001 f84f 	bl	800c8cc <xTaskRemoveFromEventList>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d013      	beq.n	800b85c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b834:	4b3f      	ldr	r3, [pc, #252]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	e00a      	b.n	800b85c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b84c:	4b39      	ldr	r3, [pc, #228]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b85c:	f001 ffa2 	bl	800d7a4 <vPortExitCritical>
				return pdPASS;
 800b860:	2301      	movs	r3, #1
 800b862:	e063      	b.n	800b92c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d103      	bne.n	800b872 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b86a:	f001 ff9b 	bl	800d7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	e05c      	b.n	800b92c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b878:	f107 0314 	add.w	r3, r7, #20
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 f8af 	bl	800c9e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b886:	f001 ff8d 	bl	800d7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b88a:	f000 fdfb 	bl	800c484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b88e:	f001 ff59 	bl	800d744 <vPortEnterCritical>
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b89e:	d103      	bne.n	800b8a8 <xQueueGenericSend+0x16c>
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8b4:	d103      	bne.n	800b8be <xQueueGenericSend+0x182>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8be:	f001 ff71 	bl	800d7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c2:	1d3a      	adds	r2, r7, #4
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f001 f89e 	bl	800ca0c <xTaskCheckForTimeOut>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d124      	bne.n	800b920 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d8:	f000 fb22 	bl	800bf20 <prvIsQueueFull>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d018      	beq.n	800b914 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	3310      	adds	r3, #16
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 ff9e 	bl	800c82c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f2:	f000 faad 	bl	800be50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8f6:	f000 fdd3 	bl	800c4a0 <xTaskResumeAll>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f47f af7c 	bne.w	800b7fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b902:	4b0c      	ldr	r3, [pc, #48]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	e772      	b.n	800b7fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b916:	f000 fa9b 	bl	800be50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b91a:	f000 fdc1 	bl	800c4a0 <xTaskResumeAll>
 800b91e:	e76c      	b.n	800b7fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b922:	f000 fa95 	bl	800be50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b926:	f000 fdbb 	bl	800c4a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b92a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3738      	adds	r7, #56	; 0x38
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b090      	sub	sp, #64	; 0x40
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d103      	bne.n	800b974 <xQueueGenericSendFromISR+0x3c>
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <xQueueGenericSendFromISR+0x40>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <xQueueGenericSendFromISR+0x42>
 800b978:	2300      	movs	r3, #0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d103      	bne.n	800b9a2 <xQueueGenericSendFromISR+0x6a>
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d101      	bne.n	800b9a6 <xQueueGenericSendFromISR+0x6e>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <xQueueGenericSendFromISR+0x70>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	623b      	str	r3, [r7, #32]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9c2:	f001 ffa1 	bl	800d908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	61fa      	str	r2, [r7, #28]
 800b9dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d302      	bcc.n	800b9f4 <xQueueGenericSendFromISR+0xbc>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d12f      	bne.n	800ba54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	68b9      	ldr	r1, [r7, #8]
 800ba08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba0a:	f000 f991 	bl	800bd30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba16:	d112      	bne.n	800ba3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d016      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	3324      	adds	r3, #36	; 0x24
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 ff51 	bl	800c8cc <xTaskRemoveFromEventList>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00e      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e007      	b.n	800ba4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba42:	3301      	adds	r3, #1
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	b25a      	sxtb	r2, r3
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba52:	e001      	b.n	800ba58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3740      	adds	r7, #64	; 0x40
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08c      	sub	sp, #48	; 0x30
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <xQueueReceive+0x30>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	623b      	str	r3, [r7, #32]
}
 800ba9c:	bf00      	nop
 800ba9e:	e7fe      	b.n	800ba9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d103      	bne.n	800baae <xQueueReceive+0x3e>
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <xQueueReceive+0x42>
 800baae:	2301      	movs	r3, #1
 800bab0:	e000      	b.n	800bab4 <xQueueReceive+0x44>
 800bab2:	2300      	movs	r3, #0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <xQueueReceive+0x5e>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	61fb      	str	r3, [r7, #28]
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bace:	f001 f8e1 	bl	800cc94 <xTaskGetSchedulerState>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <xQueueReceive+0x6e>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <xQueueReceive+0x72>
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <xQueueReceive+0x74>
 800bae2:	2300      	movs	r3, #0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <xQueueReceive+0x8e>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	61bb      	str	r3, [r7, #24]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bafe:	f001 fe21 	bl	800d744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d01f      	beq.n	800bb4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb12:	f000 f977 	bl	800be04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	1e5a      	subs	r2, r3, #1
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00f      	beq.n	800bb46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	3310      	adds	r3, #16
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 fece 	bl	800c8cc <xTaskRemoveFromEventList>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d007      	beq.n	800bb46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb36:	4b3d      	ldr	r3, [pc, #244]	; (800bc2c <xQueueReceive+0x1bc>)
 800bb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb46:	f001 fe2d 	bl	800d7a4 <vPortExitCritical>
				return pdPASS;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e069      	b.n	800bc22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d103      	bne.n	800bb5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb54:	f001 fe26 	bl	800d7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e062      	b.n	800bc22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb62:	f107 0310 	add.w	r3, r7, #16
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 ff3a 	bl	800c9e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb70:	f001 fe18 	bl	800d7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb74:	f000 fc86 	bl	800c484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb78:	f001 fde4 	bl	800d744 <vPortEnterCritical>
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb82:	b25b      	sxtb	r3, r3
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb88:	d103      	bne.n	800bb92 <xQueueReceive+0x122>
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb98:	b25b      	sxtb	r3, r3
 800bb9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb9e:	d103      	bne.n	800bba8 <xQueueReceive+0x138>
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bba8:	f001 fdfc 	bl	800d7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbac:	1d3a      	adds	r2, r7, #4
 800bbae:	f107 0310 	add.w	r3, r7, #16
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 ff29 	bl	800ca0c <xTaskCheckForTimeOut>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d123      	bne.n	800bc08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc2:	f000 f997 	bl	800bef4 <prvIsQueueEmpty>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d017      	beq.n	800bbfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	3324      	adds	r3, #36	; 0x24
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fe29 	bl	800c82c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbdc:	f000 f938 	bl	800be50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbe0:	f000 fc5e 	bl	800c4a0 <xTaskResumeAll>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d189      	bne.n	800bafe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbea:	4b10      	ldr	r3, [pc, #64]	; (800bc2c <xQueueReceive+0x1bc>)
 800bbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	e780      	b.n	800bafe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbfe:	f000 f927 	bl	800be50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc02:	f000 fc4d 	bl	800c4a0 <xTaskResumeAll>
 800bc06:	e77a      	b.n	800bafe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0a:	f000 f921 	bl	800be50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc0e:	f000 fc47 	bl	800c4a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc14:	f000 f96e 	bl	800bef4 <prvIsQueueEmpty>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f43f af6f 	beq.w	800bafe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3730      	adds	r7, #48	; 0x30
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	e000ed04 	.word	0xe000ed04

0800bc30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b08e      	sub	sp, #56	; 0x38
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10a      	bne.n	800bc5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	623b      	str	r3, [r7, #32]
}
 800bc58:	bf00      	nop
 800bc5a:	e7fe      	b.n	800bc5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d103      	bne.n	800bc6a <xQueueReceiveFromISR+0x3a>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <xQueueReceiveFromISR+0x3e>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <xQueueReceiveFromISR+0x40>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	61fb      	str	r3, [r7, #28]
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc8a:	f001 fe3d 	bl	800d908 <vPortValidateInterruptPriority>
	__asm volatile
 800bc8e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	61ba      	str	r2, [r7, #24]
 800bca4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bca6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d02f      	beq.n	800bd16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcc0:	68b9      	ldr	r1, [r7, #8]
 800bcc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcc4:	f000 f89e 	bl	800be04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	1e5a      	subs	r2, r3, #1
 800bccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bcd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcd8:	d112      	bne.n	800bd00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d016      	beq.n	800bd10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce4:	3310      	adds	r3, #16
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 fdf0 	bl	800c8cc <xTaskRemoveFromEventList>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00e      	beq.n	800bd10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	e007      	b.n	800bd10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bd00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd04:	3301      	adds	r3, #1
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	b25a      	sxtb	r2, r3
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd10:	2301      	movs	r3, #1
 800bd12:	637b      	str	r3, [r7, #52]	; 0x34
 800bd14:	e001      	b.n	800bd1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	f383 8811 	msr	BASEPRI, r3
}
 800bd24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3738      	adds	r7, #56	; 0x38
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10d      	bne.n	800bd6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d14d      	bne.n	800bdf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 ffb8 	bl	800ccd0 <xTaskPriorityDisinherit>
 800bd60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	609a      	str	r2, [r3, #8]
 800bd68:	e043      	b.n	800bdf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d119      	bne.n	800bda4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6858      	ldr	r0, [r3, #4]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68b9      	ldr	r1, [r7, #8]
 800bd7c:	f00c fab8 	bl	80182f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd88:	441a      	add	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d32b      	bcc.n	800bdf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	605a      	str	r2, [r3, #4]
 800bda2:	e026      	b.n	800bdf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	68d8      	ldr	r0, [r3, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdac:	461a      	mov	r2, r3
 800bdae:	68b9      	ldr	r1, [r7, #8]
 800bdb0:	f00c fa9e 	bl	80182f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	68da      	ldr	r2, [r3, #12]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbc:	425b      	negs	r3, r3
 800bdbe:	441a      	add	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d207      	bcs.n	800bde0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd8:	425b      	negs	r3, r3
 800bdda:	441a      	add	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d105      	bne.n	800bdf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bdfa:	697b      	ldr	r3, [r7, #20]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be12:	2b00      	cmp	r3, #0
 800be14:	d018      	beq.n	800be48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68da      	ldr	r2, [r3, #12]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1e:	441a      	add	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68da      	ldr	r2, [r3, #12]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d303      	bcc.n	800be38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68d9      	ldr	r1, [r3, #12]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be40:	461a      	mov	r2, r3
 800be42:	6838      	ldr	r0, [r7, #0]
 800be44:	f00c fa54 	bl	80182f0 <memcpy>
	}
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be58:	f001 fc74 	bl	800d744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be64:	e011      	b.n	800be8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d012      	beq.n	800be94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3324      	adds	r3, #36	; 0x24
 800be72:	4618      	mov	r0, r3
 800be74:	f000 fd2a 	bl	800c8cc <xTaskRemoveFromEventList>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be7e:	f000 fe27 	bl	800cad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	3b01      	subs	r3, #1
 800be86:	b2db      	uxtb	r3, r3
 800be88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dce9      	bgt.n	800be66 <prvUnlockQueue+0x16>
 800be92:	e000      	b.n	800be96 <prvUnlockQueue+0x46>
					break;
 800be94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	22ff      	movs	r2, #255	; 0xff
 800be9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be9e:	f001 fc81 	bl	800d7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bea2:	f001 fc4f 	bl	800d744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800beae:	e011      	b.n	800bed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d012      	beq.n	800bede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3310      	adds	r3, #16
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 fd05 	bl	800c8cc <xTaskRemoveFromEventList>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bec8:	f000 fe02 	bl	800cad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	3b01      	subs	r3, #1
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	dce9      	bgt.n	800beb0 <prvUnlockQueue+0x60>
 800bedc:	e000      	b.n	800bee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	22ff      	movs	r2, #255	; 0xff
 800bee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bee8:	f001 fc5c 	bl	800d7a4 <vPortExitCritical>
}
 800beec:	bf00      	nop
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800befc:	f001 fc22 	bl	800d744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	e001      	b.n	800bf12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf12:	f001 fc47 	bl	800d7a4 <vPortExitCritical>

	return xReturn;
 800bf16:	68fb      	ldr	r3, [r7, #12]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf28:	f001 fc0c 	bl	800d744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d102      	bne.n	800bf3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	60fb      	str	r3, [r7, #12]
 800bf3c:	e001      	b.n	800bf42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf42:	f001 fc2f 	bl	800d7a4 <vPortExitCritical>

	return xReturn;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e014      	b.n	800bf8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf60:	4a0f      	ldr	r2, [pc, #60]	; (800bfa0 <vQueueAddToRegistry+0x50>)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10b      	bne.n	800bf84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf6c:	490c      	ldr	r1, [pc, #48]	; (800bfa0 <vQueueAddToRegistry+0x50>)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf76:	4a0a      	ldr	r2, [pc, #40]	; (800bfa0 <vQueueAddToRegistry+0x50>)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	4413      	add	r3, r2
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf82:	e006      	b.n	800bf92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	3301      	adds	r3, #1
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b07      	cmp	r3, #7
 800bf8e:	d9e7      	bls.n	800bf60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf90:	bf00      	nop
 800bf92:	bf00      	nop
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	20004f08 	.word	0x20004f08

0800bfa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bfb4:	f001 fbc6 	bl	800d744 <vPortEnterCritical>
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfc4:	d103      	bne.n	800bfce <vQueueWaitForMessageRestricted+0x2a>
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfd4:	b25b      	sxtb	r3, r3
 800bfd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfda:	d103      	bne.n	800bfe4 <vQueueWaitForMessageRestricted+0x40>
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfe4:	f001 fbde 	bl	800d7a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	3324      	adds	r3, #36	; 0x24
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 fc3b 	bl	800c874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	f7ff ff26 	bl	800be50 <prvUnlockQueue>
	}
 800c004:	bf00      	nop
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08e      	sub	sp, #56	; 0x38
 800c010:	af04      	add	r7, sp, #16
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	623b      	str	r3, [r7, #32]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <xTaskCreateStatic+0x46>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	61fb      	str	r3, [r7, #28]
}
 800c04e:	bf00      	nop
 800c050:	e7fe      	b.n	800c050 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c052:	235c      	movs	r3, #92	; 0x5c
 800c054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b5c      	cmp	r3, #92	; 0x5c
 800c05a:	d00a      	beq.n	800c072 <xTaskCreateStatic+0x66>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	61bb      	str	r3, [r7, #24]
}
 800c06e:	bf00      	nop
 800c070:	e7fe      	b.n	800c070 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c072:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c076:	2b00      	cmp	r3, #0
 800c078:	d01e      	beq.n	800c0b8 <xTaskCreateStatic+0xac>
 800c07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d01b      	beq.n	800c0b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c088:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	2202      	movs	r2, #2
 800c08e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c092:	2300      	movs	r3, #0
 800c094:	9303      	str	r3, [sp, #12]
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	9302      	str	r3, [sp, #8]
 800c09a:	f107 0314 	add.w	r3, r7, #20
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f850 	bl	800c150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0b2:	f000 f8dd 	bl	800c270 <prvAddNewTaskToReadyList>
 800c0b6:	e001      	b.n	800c0bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c0bc:	697b      	ldr	r3, [r7, #20]
	}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b08c      	sub	sp, #48	; 0x30
 800c0ca:	af04      	add	r7, sp, #16
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	603b      	str	r3, [r7, #0]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0d6:	88fb      	ldrh	r3, [r7, #6]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f001 fc54 	bl	800d988 <pvPortMalloc>
 800c0e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00e      	beq.n	800c106 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0e8:	205c      	movs	r0, #92	; 0x5c
 800c0ea:	f001 fc4d 	bl	800d988 <pvPortMalloc>
 800c0ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	631a      	str	r2, [r3, #48]	; 0x30
 800c0fc:	e005      	b.n	800c10a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0fe:	6978      	ldr	r0, [r7, #20]
 800c100:	f001 fd0e 	bl	800db20 <vPortFree>
 800c104:	e001      	b.n	800c10a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d017      	beq.n	800c140 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c118:	88fa      	ldrh	r2, [r7, #6]
 800c11a:	2300      	movs	r3, #0
 800c11c:	9303      	str	r3, [sp, #12]
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	9302      	str	r3, [sp, #8]
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 f80e 	bl	800c150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c134:	69f8      	ldr	r0, [r7, #28]
 800c136:	f000 f89b 	bl	800c270 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c13a:	2301      	movs	r3, #1
 800c13c:	61bb      	str	r3, [r7, #24]
 800c13e:	e002      	b.n	800c146 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c144:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c146:	69bb      	ldr	r3, [r7, #24]
	}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	461a      	mov	r2, r3
 800c168:	21a5      	movs	r1, #165	; 0xa5
 800c16a:	f00b fff9 	bl	8018160 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c178:	3b01      	subs	r3, #1
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f023 0307 	bic.w	r3, r3, #7
 800c186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	f003 0307 	and.w	r3, r3, #7
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00a      	beq.n	800c1a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	617b      	str	r3, [r7, #20]
}
 800c1a4:	bf00      	nop
 800c1a6:	e7fe      	b.n	800c1a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d01f      	beq.n	800c1ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	61fb      	str	r3, [r7, #28]
 800c1b2:	e012      	b.n	800c1da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	7819      	ldrb	r1, [r3, #0]
 800c1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	3334      	adds	r3, #52	; 0x34
 800c1c4:	460a      	mov	r2, r1
 800c1c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	61fb      	str	r3, [r7, #28]
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	2b0f      	cmp	r3, #15
 800c1de:	d9e9      	bls.n	800c1b4 <prvInitialiseNewTask+0x64>
 800c1e0:	e000      	b.n	800c1e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c1e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1ec:	e003      	b.n	800c1f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	2b37      	cmp	r3, #55	; 0x37
 800c1fa:	d901      	bls.n	800c200 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1fc:	2337      	movs	r3, #55	; 0x37
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c204:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	2200      	movs	r2, #0
 800c210:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	3304      	adds	r3, #4
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff f8be 	bl	800b398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	3318      	adds	r3, #24
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff f8b9 	bl	800b398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c23a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	2200      	movs	r2, #0
 800c240:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	68f9      	ldr	r1, [r7, #12]
 800c24e:	69b8      	ldr	r0, [r7, #24]
 800c250:	f001 f94e 	bl	800d4f0 <pxPortInitialiseStack>
 800c254:	4602      	mov	r2, r0
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c266:	bf00      	nop
 800c268:	3720      	adds	r7, #32
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c278:	f001 fa64 	bl	800d744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c27c:	4b2d      	ldr	r3, [pc, #180]	; (800c334 <prvAddNewTaskToReadyList+0xc4>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3301      	adds	r3, #1
 800c282:	4a2c      	ldr	r2, [pc, #176]	; (800c334 <prvAddNewTaskToReadyList+0xc4>)
 800c284:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c286:	4b2c      	ldr	r3, [pc, #176]	; (800c338 <prvAddNewTaskToReadyList+0xc8>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d109      	bne.n	800c2a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c28e:	4a2a      	ldr	r2, [pc, #168]	; (800c338 <prvAddNewTaskToReadyList+0xc8>)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c294:	4b27      	ldr	r3, [pc, #156]	; (800c334 <prvAddNewTaskToReadyList+0xc4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d110      	bne.n	800c2be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c29c:	f000 fc3c 	bl	800cb18 <prvInitialiseTaskLists>
 800c2a0:	e00d      	b.n	800c2be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c2a2:	4b26      	ldr	r3, [pc, #152]	; (800c33c <prvAddNewTaskToReadyList+0xcc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d109      	bne.n	800c2be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2aa:	4b23      	ldr	r3, [pc, #140]	; (800c338 <prvAddNewTaskToReadyList+0xc8>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d802      	bhi.n	800c2be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2b8:	4a1f      	ldr	r2, [pc, #124]	; (800c338 <prvAddNewTaskToReadyList+0xc8>)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2be:	4b20      	ldr	r3, [pc, #128]	; (800c340 <prvAddNewTaskToReadyList+0xd0>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	4a1e      	ldr	r2, [pc, #120]	; (800c340 <prvAddNewTaskToReadyList+0xd0>)
 800c2c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c2c8:	4b1d      	ldr	r3, [pc, #116]	; (800c340 <prvAddNewTaskToReadyList+0xd0>)
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d4:	4b1b      	ldr	r3, [pc, #108]	; (800c344 <prvAddNewTaskToReadyList+0xd4>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d903      	bls.n	800c2e4 <prvAddNewTaskToReadyList+0x74>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e0:	4a18      	ldr	r2, [pc, #96]	; (800c344 <prvAddNewTaskToReadyList+0xd4>)
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4413      	add	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4a15      	ldr	r2, [pc, #84]	; (800c348 <prvAddNewTaskToReadyList+0xd8>)
 800c2f2:	441a      	add	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	f7ff f859 	bl	800b3b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c300:	f001 fa50 	bl	800d7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c304:	4b0d      	ldr	r3, [pc, #52]	; (800c33c <prvAddNewTaskToReadyList+0xcc>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00e      	beq.n	800c32a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <prvAddNewTaskToReadyList+0xc8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c316:	429a      	cmp	r2, r3
 800c318:	d207      	bcs.n	800c32a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <prvAddNewTaskToReadyList+0xdc>)
 800c31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c32a:	bf00      	nop
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	2000541c 	.word	0x2000541c
 800c338:	20004f48 	.word	0x20004f48
 800c33c:	20005428 	.word	0x20005428
 800c340:	20005438 	.word	0x20005438
 800c344:	20005424 	.word	0x20005424
 800c348:	20004f4c 	.word	0x20004f4c
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c358:	2300      	movs	r3, #0
 800c35a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d017      	beq.n	800c392 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c362:	4b13      	ldr	r3, [pc, #76]	; (800c3b0 <vTaskDelay+0x60>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00a      	beq.n	800c380 <vTaskDelay+0x30>
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	60bb      	str	r3, [r7, #8]
}
 800c37c:	bf00      	nop
 800c37e:	e7fe      	b.n	800c37e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c380:	f000 f880 	bl	800c484 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c384:	2100      	movs	r1, #0
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fd10 	bl	800cdac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c38c:	f000 f888 	bl	800c4a0 <xTaskResumeAll>
 800c390:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d107      	bne.n	800c3a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c398:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <vTaskDelay+0x64>)
 800c39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c39e:	601a      	str	r2, [r3, #0]
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3a8:	bf00      	nop
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	20005444 	.word	0x20005444
 800c3b4:	e000ed04 	.word	0xe000ed04

0800c3b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08a      	sub	sp, #40	; 0x28
 800c3bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3c6:	463a      	mov	r2, r7
 800c3c8:	1d39      	adds	r1, r7, #4
 800c3ca:	f107 0308 	add.w	r3, r7, #8
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe ff8e 	bl	800b2f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	9202      	str	r2, [sp, #8]
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	460a      	mov	r2, r1
 800c3e6:	4921      	ldr	r1, [pc, #132]	; (800c46c <vTaskStartScheduler+0xb4>)
 800c3e8:	4821      	ldr	r0, [pc, #132]	; (800c470 <vTaskStartScheduler+0xb8>)
 800c3ea:	f7ff fe0f 	bl	800c00c <xTaskCreateStatic>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4a20      	ldr	r2, [pc, #128]	; (800c474 <vTaskStartScheduler+0xbc>)
 800c3f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3f4:	4b1f      	ldr	r3, [pc, #124]	; (800c474 <vTaskStartScheduler+0xbc>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	617b      	str	r3, [r7, #20]
 800c400:	e001      	b.n	800c406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d102      	bne.n	800c412 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c40c:	f000 fd22 	bl	800ce54 <xTimerCreateTimerTask>
 800c410:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d116      	bne.n	800c446 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	613b      	str	r3, [r7, #16]
}
 800c42a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c42c:	4b12      	ldr	r3, [pc, #72]	; (800c478 <vTaskStartScheduler+0xc0>)
 800c42e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c432:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c434:	4b11      	ldr	r3, [pc, #68]	; (800c47c <vTaskStartScheduler+0xc4>)
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c43a:	4b11      	ldr	r3, [pc, #68]	; (800c480 <vTaskStartScheduler+0xc8>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c440:	f001 f8de 	bl	800d600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c444:	e00e      	b.n	800c464 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c44c:	d10a      	bne.n	800c464 <vTaskStartScheduler+0xac>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	60fb      	str	r3, [r7, #12]
}
 800c460:	bf00      	nop
 800c462:	e7fe      	b.n	800c462 <vTaskStartScheduler+0xaa>
}
 800c464:	bf00      	nop
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	08019168 	.word	0x08019168
 800c470:	0800cae9 	.word	0x0800cae9
 800c474:	20005440 	.word	0x20005440
 800c478:	2000543c 	.word	0x2000543c
 800c47c:	20005428 	.word	0x20005428
 800c480:	20005420 	.word	0x20005420

0800c484 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c484:	b480      	push	{r7}
 800c486:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c488:	4b04      	ldr	r3, [pc, #16]	; (800c49c <vTaskSuspendAll+0x18>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3301      	adds	r3, #1
 800c48e:	4a03      	ldr	r2, [pc, #12]	; (800c49c <vTaskSuspendAll+0x18>)
 800c490:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c492:	bf00      	nop
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	20005444 	.word	0x20005444

0800c4a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4ae:	4b42      	ldr	r3, [pc, #264]	; (800c5b8 <xTaskResumeAll+0x118>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <xTaskResumeAll+0x2c>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	603b      	str	r3, [r7, #0]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4cc:	f001 f93a 	bl	800d744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4d0:	4b39      	ldr	r3, [pc, #228]	; (800c5b8 <xTaskResumeAll+0x118>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	4a38      	ldr	r2, [pc, #224]	; (800c5b8 <xTaskResumeAll+0x118>)
 800c4d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4da:	4b37      	ldr	r3, [pc, #220]	; (800c5b8 <xTaskResumeAll+0x118>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d162      	bne.n	800c5a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4e2:	4b36      	ldr	r3, [pc, #216]	; (800c5bc <xTaskResumeAll+0x11c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d05e      	beq.n	800c5a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4ea:	e02f      	b.n	800c54c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ec:	4b34      	ldr	r3, [pc, #208]	; (800c5c0 <xTaskResumeAll+0x120>)
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	3318      	adds	r3, #24
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe ffb7 	bl	800b46c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	3304      	adds	r3, #4
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe ffb2 	bl	800b46c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50c:	4b2d      	ldr	r3, [pc, #180]	; (800c5c4 <xTaskResumeAll+0x124>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d903      	bls.n	800c51c <xTaskResumeAll+0x7c>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	4a2a      	ldr	r2, [pc, #168]	; (800c5c4 <xTaskResumeAll+0x124>)
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c520:	4613      	mov	r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4a27      	ldr	r2, [pc, #156]	; (800c5c8 <xTaskResumeAll+0x128>)
 800c52a:	441a      	add	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	3304      	adds	r3, #4
 800c530:	4619      	mov	r1, r3
 800c532:	4610      	mov	r0, r2
 800c534:	f7fe ff3d 	bl	800b3b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53c:	4b23      	ldr	r3, [pc, #140]	; (800c5cc <xTaskResumeAll+0x12c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	429a      	cmp	r2, r3
 800c544:	d302      	bcc.n	800c54c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c546:	4b22      	ldr	r3, [pc, #136]	; (800c5d0 <xTaskResumeAll+0x130>)
 800c548:	2201      	movs	r2, #1
 800c54a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c54c:	4b1c      	ldr	r3, [pc, #112]	; (800c5c0 <xTaskResumeAll+0x120>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1cb      	bne.n	800c4ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d001      	beq.n	800c55e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c55a:	f000 fb7b 	bl	800cc54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c55e:	4b1d      	ldr	r3, [pc, #116]	; (800c5d4 <xTaskResumeAll+0x134>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d010      	beq.n	800c58c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c56a:	f000 f847 	bl	800c5fc <xTaskIncrementTick>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c574:	4b16      	ldr	r3, [pc, #88]	; (800c5d0 <xTaskResumeAll+0x130>)
 800c576:	2201      	movs	r2, #1
 800c578:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1f1      	bne.n	800c56a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c586:	4b13      	ldr	r3, [pc, #76]	; (800c5d4 <xTaskResumeAll+0x134>)
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c58c:	4b10      	ldr	r3, [pc, #64]	; (800c5d0 <xTaskResumeAll+0x130>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d009      	beq.n	800c5a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c594:	2301      	movs	r3, #1
 800c596:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <xTaskResumeAll+0x138>)
 800c59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5a8:	f001 f8fc 	bl	800d7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20005444 	.word	0x20005444
 800c5bc:	2000541c 	.word	0x2000541c
 800c5c0:	200053dc 	.word	0x200053dc
 800c5c4:	20005424 	.word	0x20005424
 800c5c8:	20004f4c 	.word	0x20004f4c
 800c5cc:	20004f48 	.word	0x20004f48
 800c5d0:	20005430 	.word	0x20005430
 800c5d4:	2000542c 	.word	0x2000542c
 800c5d8:	e000ed04 	.word	0xe000ed04

0800c5dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5e2:	4b05      	ldr	r3, [pc, #20]	; (800c5f8 <xTaskGetTickCount+0x1c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5e8:	687b      	ldr	r3, [r7, #4]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	20005420 	.word	0x20005420

0800c5fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c602:	2300      	movs	r3, #0
 800c604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c606:	4b4f      	ldr	r3, [pc, #316]	; (800c744 <xTaskIncrementTick+0x148>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f040 808f 	bne.w	800c72e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c610:	4b4d      	ldr	r3, [pc, #308]	; (800c748 <xTaskIncrementTick+0x14c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c618:	4a4b      	ldr	r2, [pc, #300]	; (800c748 <xTaskIncrementTick+0x14c>)
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d120      	bne.n	800c666 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c624:	4b49      	ldr	r3, [pc, #292]	; (800c74c <xTaskIncrementTick+0x150>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00a      	beq.n	800c644 <xTaskIncrementTick+0x48>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	603b      	str	r3, [r7, #0]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <xTaskIncrementTick+0x46>
 800c644:	4b41      	ldr	r3, [pc, #260]	; (800c74c <xTaskIncrementTick+0x150>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	4b41      	ldr	r3, [pc, #260]	; (800c750 <xTaskIncrementTick+0x154>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a3f      	ldr	r2, [pc, #252]	; (800c74c <xTaskIncrementTick+0x150>)
 800c650:	6013      	str	r3, [r2, #0]
 800c652:	4a3f      	ldr	r2, [pc, #252]	; (800c750 <xTaskIncrementTick+0x154>)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	4b3e      	ldr	r3, [pc, #248]	; (800c754 <xTaskIncrementTick+0x158>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3301      	adds	r3, #1
 800c65e:	4a3d      	ldr	r2, [pc, #244]	; (800c754 <xTaskIncrementTick+0x158>)
 800c660:	6013      	str	r3, [r2, #0]
 800c662:	f000 faf7 	bl	800cc54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c666:	4b3c      	ldr	r3, [pc, #240]	; (800c758 <xTaskIncrementTick+0x15c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d349      	bcc.n	800c704 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c670:	4b36      	ldr	r3, [pc, #216]	; (800c74c <xTaskIncrementTick+0x150>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67a:	4b37      	ldr	r3, [pc, #220]	; (800c758 <xTaskIncrementTick+0x15c>)
 800c67c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c680:	601a      	str	r2, [r3, #0]
					break;
 800c682:	e03f      	b.n	800c704 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c684:	4b31      	ldr	r3, [pc, #196]	; (800c74c <xTaskIncrementTick+0x150>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d203      	bcs.n	800c6a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c69c:	4a2e      	ldr	r2, [pc, #184]	; (800c758 <xTaskIncrementTick+0x15c>)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6a2:	e02f      	b.n	800c704 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fe fedf 	bl	800b46c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d004      	beq.n	800c6c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	3318      	adds	r3, #24
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe fed6 	bl	800b46c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c4:	4b25      	ldr	r3, [pc, #148]	; (800c75c <xTaskIncrementTick+0x160>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d903      	bls.n	800c6d4 <xTaskIncrementTick+0xd8>
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	4a22      	ldr	r2, [pc, #136]	; (800c75c <xTaskIncrementTick+0x160>)
 800c6d2:	6013      	str	r3, [r2, #0]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d8:	4613      	mov	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4413      	add	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4a1f      	ldr	r2, [pc, #124]	; (800c760 <xTaskIncrementTick+0x164>)
 800c6e2:	441a      	add	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	f7fe fe61 	bl	800b3b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f4:	4b1b      	ldr	r3, [pc, #108]	; (800c764 <xTaskIncrementTick+0x168>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d3b8      	bcc.n	800c670 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c6fe:	2301      	movs	r3, #1
 800c700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c702:	e7b5      	b.n	800c670 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c704:	4b17      	ldr	r3, [pc, #92]	; (800c764 <xTaskIncrementTick+0x168>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c70a:	4915      	ldr	r1, [pc, #84]	; (800c760 <xTaskIncrementTick+0x164>)
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	440b      	add	r3, r1
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d901      	bls.n	800c720 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c71c:	2301      	movs	r3, #1
 800c71e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c720:	4b11      	ldr	r3, [pc, #68]	; (800c768 <xTaskIncrementTick+0x16c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d007      	beq.n	800c738 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c728:	2301      	movs	r3, #1
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	e004      	b.n	800c738 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <xTaskIncrementTick+0x170>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3301      	adds	r3, #1
 800c734:	4a0d      	ldr	r2, [pc, #52]	; (800c76c <xTaskIncrementTick+0x170>)
 800c736:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c738:	697b      	ldr	r3, [r7, #20]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3718      	adds	r7, #24
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	20005444 	.word	0x20005444
 800c748:	20005420 	.word	0x20005420
 800c74c:	200053d4 	.word	0x200053d4
 800c750:	200053d8 	.word	0x200053d8
 800c754:	20005434 	.word	0x20005434
 800c758:	2000543c 	.word	0x2000543c
 800c75c:	20005424 	.word	0x20005424
 800c760:	20004f4c 	.word	0x20004f4c
 800c764:	20004f48 	.word	0x20004f48
 800c768:	20005430 	.word	0x20005430
 800c76c:	2000542c 	.word	0x2000542c

0800c770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c776:	4b28      	ldr	r3, [pc, #160]	; (800c818 <vTaskSwitchContext+0xa8>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d003      	beq.n	800c786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c77e:	4b27      	ldr	r3, [pc, #156]	; (800c81c <vTaskSwitchContext+0xac>)
 800c780:	2201      	movs	r2, #1
 800c782:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c784:	e041      	b.n	800c80a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c786:	4b25      	ldr	r3, [pc, #148]	; (800c81c <vTaskSwitchContext+0xac>)
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c78c:	4b24      	ldr	r3, [pc, #144]	; (800c820 <vTaskSwitchContext+0xb0>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	60fb      	str	r3, [r7, #12]
 800c792:	e010      	b.n	800c7b6 <vTaskSwitchContext+0x46>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10a      	bne.n	800c7b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	607b      	str	r3, [r7, #4]
}
 800c7ac:	bf00      	nop
 800c7ae:	e7fe      	b.n	800c7ae <vTaskSwitchContext+0x3e>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	60fb      	str	r3, [r7, #12]
 800c7b6:	491b      	ldr	r1, [pc, #108]	; (800c824 <vTaskSwitchContext+0xb4>)
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	440b      	add	r3, r1
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0e4      	beq.n	800c794 <vTaskSwitchContext+0x24>
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4a13      	ldr	r2, [pc, #76]	; (800c824 <vTaskSwitchContext+0xb4>)
 800c7d6:	4413      	add	r3, r2
 800c7d8:	60bb      	str	r3, [r7, #8]
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	605a      	str	r2, [r3, #4]
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d104      	bne.n	800c7fa <vTaskSwitchContext+0x8a>
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	605a      	str	r2, [r3, #4]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	4a09      	ldr	r2, [pc, #36]	; (800c828 <vTaskSwitchContext+0xb8>)
 800c802:	6013      	str	r3, [r2, #0]
 800c804:	4a06      	ldr	r2, [pc, #24]	; (800c820 <vTaskSwitchContext+0xb0>)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6013      	str	r3, [r2, #0]
}
 800c80a:	bf00      	nop
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	20005444 	.word	0x20005444
 800c81c:	20005430 	.word	0x20005430
 800c820:	20005424 	.word	0x20005424
 800c824:	20004f4c 	.word	0x20004f4c
 800c828:	20004f48 	.word	0x20004f48

0800c82c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	60fb      	str	r3, [r7, #12]
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c852:	4b07      	ldr	r3, [pc, #28]	; (800c870 <vTaskPlaceOnEventList+0x44>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3318      	adds	r3, #24
 800c858:	4619      	mov	r1, r3
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7fe fdcd 	bl	800b3fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c860:	2101      	movs	r1, #1
 800c862:	6838      	ldr	r0, [r7, #0]
 800c864:	f000 faa2 	bl	800cdac <prvAddCurrentTaskToDelayedList>
}
 800c868:	bf00      	nop
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20004f48 	.word	0x20004f48

0800c874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10a      	bne.n	800c89c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	617b      	str	r3, [r7, #20]
}
 800c898:	bf00      	nop
 800c89a:	e7fe      	b.n	800c89a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c89c:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3318      	adds	r3, #24
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f7fe fd84 	bl	800b3b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	68b8      	ldr	r0, [r7, #8]
 800c8ba:	f000 fa77 	bl	800cdac <prvAddCurrentTaskToDelayedList>
	}
 800c8be:	bf00      	nop
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20004f48 	.word	0x20004f48

0800c8cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60fb      	str	r3, [r7, #12]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	3318      	adds	r3, #24
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fe fdb5 	bl	800b46c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c902:	4b1e      	ldr	r3, [pc, #120]	; (800c97c <xTaskRemoveFromEventList+0xb0>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d11d      	bne.n	800c946 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	3304      	adds	r3, #4
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fdac 	bl	800b46c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c918:	4b19      	ldr	r3, [pc, #100]	; (800c980 <xTaskRemoveFromEventList+0xb4>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d903      	bls.n	800c928 <xTaskRemoveFromEventList+0x5c>
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c924:	4a16      	ldr	r2, [pc, #88]	; (800c980 <xTaskRemoveFromEventList+0xb4>)
 800c926:	6013      	str	r3, [r2, #0]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92c:	4613      	mov	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4a13      	ldr	r2, [pc, #76]	; (800c984 <xTaskRemoveFromEventList+0xb8>)
 800c936:	441a      	add	r2, r3
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	3304      	adds	r3, #4
 800c93c:	4619      	mov	r1, r3
 800c93e:	4610      	mov	r0, r2
 800c940:	f7fe fd37 	bl	800b3b2 <vListInsertEnd>
 800c944:	e005      	b.n	800c952 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	3318      	adds	r3, #24
 800c94a:	4619      	mov	r1, r3
 800c94c:	480e      	ldr	r0, [pc, #56]	; (800c988 <xTaskRemoveFromEventList+0xbc>)
 800c94e:	f7fe fd30 	bl	800b3b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c956:	4b0d      	ldr	r3, [pc, #52]	; (800c98c <xTaskRemoveFromEventList+0xc0>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d905      	bls.n	800c96c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c960:	2301      	movs	r3, #1
 800c962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c964:	4b0a      	ldr	r3, [pc, #40]	; (800c990 <xTaskRemoveFromEventList+0xc4>)
 800c966:	2201      	movs	r2, #1
 800c968:	601a      	str	r2, [r3, #0]
 800c96a:	e001      	b.n	800c970 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c96c:	2300      	movs	r3, #0
 800c96e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c970:	697b      	ldr	r3, [r7, #20]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20005444 	.word	0x20005444
 800c980:	20005424 	.word	0x20005424
 800c984:	20004f4c 	.word	0x20004f4c
 800c988:	200053dc 	.word	0x200053dc
 800c98c:	20004f48 	.word	0x20004f48
 800c990:	20005430 	.word	0x20005430

0800c994 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10a      	bne.n	800c9b8 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	60fb      	str	r3, [r7, #12]
}
 800c9b4:	bf00      	nop
 800c9b6:	e7fe      	b.n	800c9b6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c9b8:	f000 fec4 	bl	800d744 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <vTaskSetTimeOutState+0x44>)
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c9c4:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <vTaskSetTimeOutState+0x48>)
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c9cc:	f000 feea 	bl	800d7a4 <vPortExitCritical>
}
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20005434 	.word	0x20005434
 800c9dc:	20005420 	.word	0x20005420

0800c9e0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9e8:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <vTaskInternalSetTimeOutState+0x24>)
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <vTaskInternalSetTimeOutState+0x28>)
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	605a      	str	r2, [r3, #4]
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr
 800ca04:	20005434 	.word	0x20005434
 800ca08:	20005420 	.word	0x20005420

0800ca0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	613b      	str	r3, [r7, #16]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10a      	bne.n	800ca4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	60fb      	str	r3, [r7, #12]
}
 800ca4a:	bf00      	nop
 800ca4c:	e7fe      	b.n	800ca4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca4e:	f000 fe79 	bl	800d744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca52:	4b1d      	ldr	r3, [pc, #116]	; (800cac8 <xTaskCheckForTimeOut+0xbc>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	69ba      	ldr	r2, [r7, #24]
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca6a:	d102      	bne.n	800ca72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	e023      	b.n	800caba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <xTaskCheckForTimeOut+0xc0>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d007      	beq.n	800ca8e <xTaskCheckForTimeOut+0x82>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	69ba      	ldr	r2, [r7, #24]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d302      	bcc.n	800ca8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	61fb      	str	r3, [r7, #28]
 800ca8c:	e015      	b.n	800caba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d20b      	bcs.n	800cab0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	1ad2      	subs	r2, r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff ff9b 	bl	800c9e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caaa:	2300      	movs	r3, #0
 800caac:	61fb      	str	r3, [r7, #28]
 800caae:	e004      	b.n	800caba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cab6:	2301      	movs	r3, #1
 800cab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800caba:	f000 fe73 	bl	800d7a4 <vPortExitCritical>

	return xReturn;
 800cabe:	69fb      	ldr	r3, [r7, #28]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3720      	adds	r7, #32
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	20005420 	.word	0x20005420
 800cacc:	20005434 	.word	0x20005434

0800cad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cad0:	b480      	push	{r7}
 800cad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cad4:	4b03      	ldr	r3, [pc, #12]	; (800cae4 <vTaskMissedYield+0x14>)
 800cad6:	2201      	movs	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
}
 800cada:	bf00      	nop
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	20005430 	.word	0x20005430

0800cae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800caf0:	f000 f852 	bl	800cb98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <prvIdleTask+0x28>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d9f9      	bls.n	800caf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cafc:	4b05      	ldr	r3, [pc, #20]	; (800cb14 <prvIdleTask+0x2c>)
 800cafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb0c:	e7f0      	b.n	800caf0 <prvIdleTask+0x8>
 800cb0e:	bf00      	nop
 800cb10:	20004f4c 	.word	0x20004f4c
 800cb14:	e000ed04 	.word	0xe000ed04

0800cb18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb1e:	2300      	movs	r3, #0
 800cb20:	607b      	str	r3, [r7, #4]
 800cb22:	e00c      	b.n	800cb3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4a12      	ldr	r2, [pc, #72]	; (800cb78 <prvInitialiseTaskLists+0x60>)
 800cb30:	4413      	add	r3, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fe fc10 	bl	800b358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	607b      	str	r3, [r7, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b37      	cmp	r3, #55	; 0x37
 800cb42:	d9ef      	bls.n	800cb24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb44:	480d      	ldr	r0, [pc, #52]	; (800cb7c <prvInitialiseTaskLists+0x64>)
 800cb46:	f7fe fc07 	bl	800b358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb4a:	480d      	ldr	r0, [pc, #52]	; (800cb80 <prvInitialiseTaskLists+0x68>)
 800cb4c:	f7fe fc04 	bl	800b358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb50:	480c      	ldr	r0, [pc, #48]	; (800cb84 <prvInitialiseTaskLists+0x6c>)
 800cb52:	f7fe fc01 	bl	800b358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb56:	480c      	ldr	r0, [pc, #48]	; (800cb88 <prvInitialiseTaskLists+0x70>)
 800cb58:	f7fe fbfe 	bl	800b358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb5c:	480b      	ldr	r0, [pc, #44]	; (800cb8c <prvInitialiseTaskLists+0x74>)
 800cb5e:	f7fe fbfb 	bl	800b358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb62:	4b0b      	ldr	r3, [pc, #44]	; (800cb90 <prvInitialiseTaskLists+0x78>)
 800cb64:	4a05      	ldr	r2, [pc, #20]	; (800cb7c <prvInitialiseTaskLists+0x64>)
 800cb66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <prvInitialiseTaskLists+0x7c>)
 800cb6a:	4a05      	ldr	r2, [pc, #20]	; (800cb80 <prvInitialiseTaskLists+0x68>)
 800cb6c:	601a      	str	r2, [r3, #0]
}
 800cb6e:	bf00      	nop
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	20004f4c 	.word	0x20004f4c
 800cb7c:	200053ac 	.word	0x200053ac
 800cb80:	200053c0 	.word	0x200053c0
 800cb84:	200053dc 	.word	0x200053dc
 800cb88:	200053f0 	.word	0x200053f0
 800cb8c:	20005408 	.word	0x20005408
 800cb90:	200053d4 	.word	0x200053d4
 800cb94:	200053d8 	.word	0x200053d8

0800cb98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb9e:	e019      	b.n	800cbd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cba0:	f000 fdd0 	bl	800d744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba4:	4b10      	ldr	r3, [pc, #64]	; (800cbe8 <prvCheckTasksWaitingTermination+0x50>)
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe fc5b 	bl	800b46c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbb6:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <prvCheckTasksWaitingTermination+0x54>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	4a0b      	ldr	r2, [pc, #44]	; (800cbec <prvCheckTasksWaitingTermination+0x54>)
 800cbbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	4a0a      	ldr	r2, [pc, #40]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbca:	f000 fdeb 	bl	800d7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f810 	bl	800cbf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbd4:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e1      	bne.n	800cba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbdc:	bf00      	nop
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	200053f0 	.word	0x200053f0
 800cbec:	2000541c 	.word	0x2000541c
 800cbf0:	20005404 	.word	0x20005404

0800cbf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d108      	bne.n	800cc18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 ff88 	bl	800db20 <vPortFree>
				vPortFree( pxTCB );
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 ff85 	bl	800db20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc16:	e018      	b.n	800cc4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d103      	bne.n	800cc2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 ff7c 	bl	800db20 <vPortFree>
	}
 800cc28:	e00f      	b.n	800cc4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d00a      	beq.n	800cc4a <prvDeleteTCB+0x56>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	60fb      	str	r3, [r7, #12]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <prvDeleteTCB+0x54>
	}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc5a:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <prvResetNextTaskUnblockTime+0x38>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d104      	bne.n	800cc6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc64:	4b0a      	ldr	r3, [pc, #40]	; (800cc90 <prvResetNextTaskUnblockTime+0x3c>)
 800cc66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc6c:	e008      	b.n	800cc80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc6e:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <prvResetNextTaskUnblockTime+0x38>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4a04      	ldr	r2, [pc, #16]	; (800cc90 <prvResetNextTaskUnblockTime+0x3c>)
 800cc7e:	6013      	str	r3, [r2, #0]
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	200053d4 	.word	0x200053d4
 800cc90:	2000543c 	.word	0x2000543c

0800cc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <xTaskGetSchedulerState+0x34>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cca2:	2301      	movs	r3, #1
 800cca4:	607b      	str	r3, [r7, #4]
 800cca6:	e008      	b.n	800ccba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cca8:	4b08      	ldr	r3, [pc, #32]	; (800cccc <xTaskGetSchedulerState+0x38>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	607b      	str	r3, [r7, #4]
 800ccb4:	e001      	b.n	800ccba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccba:	687b      	ldr	r3, [r7, #4]
	}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	20005428 	.word	0x20005428
 800cccc:	20005444 	.word	0x20005444

0800ccd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d056      	beq.n	800cd94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cce6:	4b2e      	ldr	r3, [pc, #184]	; (800cda0 <xTaskPriorityDisinherit+0xd0>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d00a      	beq.n	800cd06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	60bb      	str	r3, [r7, #8]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd28:	1e5a      	subs	r2, r3, #1
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d02c      	beq.n	800cd94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d128      	bne.n	800cd94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	3304      	adds	r3, #4
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe fb90 	bl	800b46c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <xTaskPriorityDisinherit+0xd4>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d903      	bls.n	800cd74 <xTaskPriorityDisinherit+0xa4>
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	4a0c      	ldr	r2, [pc, #48]	; (800cda4 <xTaskPriorityDisinherit+0xd4>)
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4a09      	ldr	r2, [pc, #36]	; (800cda8 <xTaskPriorityDisinherit+0xd8>)
 800cd82:	441a      	add	r2, r3
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	f7fe fb11 	bl	800b3b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd90:	2301      	movs	r3, #1
 800cd92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd94:	697b      	ldr	r3, [r7, #20]
	}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20004f48 	.word	0x20004f48
 800cda4:	20005424 	.word	0x20005424
 800cda8:	20004f4c 	.word	0x20004f4c

0800cdac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdb6:	4b21      	ldr	r3, [pc, #132]	; (800ce3c <prvAddCurrentTaskToDelayedList+0x90>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdbc:	4b20      	ldr	r3, [pc, #128]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fe fb52 	bl	800b46c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdce:	d10a      	bne.n	800cde6 <prvAddCurrentTaskToDelayedList+0x3a>
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d007      	beq.n	800cde6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdd6:	4b1a      	ldr	r3, [pc, #104]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3304      	adds	r3, #4
 800cddc:	4619      	mov	r1, r3
 800cdde:	4819      	ldr	r0, [pc, #100]	; (800ce44 <prvAddCurrentTaskToDelayedList+0x98>)
 800cde0:	f7fe fae7 	bl	800b3b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cde4:	e026      	b.n	800ce34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4413      	add	r3, r2
 800cdec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cdee:	4b14      	ldr	r3, [pc, #80]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d209      	bcs.n	800ce12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdfe:	4b12      	ldr	r3, [pc, #72]	; (800ce48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3304      	adds	r3, #4
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	f7fe faf5 	bl	800b3fa <vListInsert>
}
 800ce10:	e010      	b.n	800ce34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce12:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	4b0a      	ldr	r3, [pc, #40]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f7fe faeb 	bl	800b3fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce24:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d202      	bcs.n	800ce34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce2e:	4a08      	ldr	r2, [pc, #32]	; (800ce50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	6013      	str	r3, [r2, #0]
}
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	20005420 	.word	0x20005420
 800ce40:	20004f48 	.word	0x20004f48
 800ce44:	20005408 	.word	0x20005408
 800ce48:	200053d8 	.word	0x200053d8
 800ce4c:	200053d4 	.word	0x200053d4
 800ce50:	2000543c 	.word	0x2000543c

0800ce54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08a      	sub	sp, #40	; 0x28
 800ce58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce5e:	f000 fb07 	bl	800d470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce62:	4b1c      	ldr	r3, [pc, #112]	; (800ced4 <xTimerCreateTimerTask+0x80>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d021      	beq.n	800ceae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce72:	1d3a      	adds	r2, r7, #4
 800ce74:	f107 0108 	add.w	r1, r7, #8
 800ce78:	f107 030c 	add.w	r3, r7, #12
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fe fa51 	bl	800b324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce82:	6879      	ldr	r1, [r7, #4]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	9202      	str	r2, [sp, #8]
 800ce8a:	9301      	str	r3, [sp, #4]
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	2300      	movs	r3, #0
 800ce92:	460a      	mov	r2, r1
 800ce94:	4910      	ldr	r1, [pc, #64]	; (800ced8 <xTimerCreateTimerTask+0x84>)
 800ce96:	4811      	ldr	r0, [pc, #68]	; (800cedc <xTimerCreateTimerTask+0x88>)
 800ce98:	f7ff f8b8 	bl	800c00c <xTaskCreateStatic>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	4a10      	ldr	r2, [pc, #64]	; (800cee0 <xTimerCreateTimerTask+0x8c>)
 800cea0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cea2:	4b0f      	ldr	r3, [pc, #60]	; (800cee0 <xTimerCreateTimerTask+0x8c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10a      	bne.n	800ceca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	613b      	str	r3, [r7, #16]
}
 800cec6:	bf00      	nop
 800cec8:	e7fe      	b.n	800cec8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ceca:	697b      	ldr	r3, [r7, #20]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	20005478 	.word	0x20005478
 800ced8:	08019170 	.word	0x08019170
 800cedc:	0800d019 	.word	0x0800d019
 800cee0:	2000547c 	.word	0x2000547c

0800cee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08a      	sub	sp, #40	; 0x28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	623b      	str	r3, [r7, #32]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf12:	4b1a      	ldr	r3, [pc, #104]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d02a      	beq.n	800cf70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	2b05      	cmp	r3, #5
 800cf2a:	dc18      	bgt.n	800cf5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf2c:	f7ff feb2 	bl	800cc94 <xTaskGetSchedulerState>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d109      	bne.n	800cf4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf36:	4b11      	ldr	r3, [pc, #68]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf38:	6818      	ldr	r0, [r3, #0]
 800cf3a:	f107 0110 	add.w	r1, r7, #16
 800cf3e:	2300      	movs	r3, #0
 800cf40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf42:	f7fe fbfb 	bl	800b73c <xQueueGenericSend>
 800cf46:	6278      	str	r0, [r7, #36]	; 0x24
 800cf48:	e012      	b.n	800cf70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf4a:	4b0c      	ldr	r3, [pc, #48]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf4c:	6818      	ldr	r0, [r3, #0]
 800cf4e:	f107 0110 	add.w	r1, r7, #16
 800cf52:	2300      	movs	r3, #0
 800cf54:	2200      	movs	r2, #0
 800cf56:	f7fe fbf1 	bl	800b73c <xQueueGenericSend>
 800cf5a:	6278      	str	r0, [r7, #36]	; 0x24
 800cf5c:	e008      	b.n	800cf70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf5e:	4b07      	ldr	r3, [pc, #28]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f107 0110 	add.w	r1, r7, #16
 800cf66:	2300      	movs	r3, #0
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	f7fe fce5 	bl	800b938 <xQueueGenericSendFromISR>
 800cf6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3728      	adds	r7, #40	; 0x28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	20005478 	.word	0x20005478

0800cf80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af02      	add	r7, sp, #8
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf8a:	4b22      	ldr	r3, [pc, #136]	; (800d014 <prvProcessExpiredTimer+0x94>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fa67 	bl	800b46c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d022      	beq.n	800cff2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	699a      	ldr	r2, [r3, #24]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	18d1      	adds	r1, r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	6978      	ldr	r0, [r7, #20]
 800cfba:	f000 f8d1 	bl	800d160 <prvInsertTimerInActiveList>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01f      	beq.n	800d004 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	2300      	movs	r3, #0
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	6978      	ldr	r0, [r7, #20]
 800cfd0:	f7ff ff88 	bl	800cee4 <xTimerGenericCommand>
 800cfd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d113      	bne.n	800d004 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	60fb      	str	r3, [r7, #12]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cff8:	f023 0301 	bic.w	r3, r3, #1
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	6978      	ldr	r0, [r7, #20]
 800d00a:	4798      	blx	r3
}
 800d00c:	bf00      	nop
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	20005470 	.word	0x20005470

0800d018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d020:	f107 0308 	add.w	r3, r7, #8
 800d024:	4618      	mov	r0, r3
 800d026:	f000 f857 	bl	800d0d8 <prvGetNextExpireTime>
 800d02a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	4619      	mov	r1, r3
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 f803 	bl	800d03c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d036:	f000 f8d5 	bl	800d1e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d03a:	e7f1      	b.n	800d020 <prvTimerTask+0x8>

0800d03c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d046:	f7ff fa1d 	bl	800c484 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d04a:	f107 0308 	add.w	r3, r7, #8
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 f866 	bl	800d120 <prvSampleTimeNow>
 800d054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d130      	bne.n	800d0be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10a      	bne.n	800d078 <prvProcessTimerOrBlockTask+0x3c>
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	429a      	cmp	r2, r3
 800d068:	d806      	bhi.n	800d078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d06a:	f7ff fa19 	bl	800c4a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff ff85 	bl	800cf80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d076:	e024      	b.n	800d0c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d008      	beq.n	800d090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d07e:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <prvProcessTimerOrBlockTask+0x90>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <prvProcessTimerOrBlockTask+0x50>
 800d088:	2301      	movs	r3, #1
 800d08a:	e000      	b.n	800d08e <prvProcessTimerOrBlockTask+0x52>
 800d08c:	2300      	movs	r3, #0
 800d08e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d090:	4b0f      	ldr	r3, [pc, #60]	; (800d0d0 <prvProcessTimerOrBlockTask+0x94>)
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	4619      	mov	r1, r3
 800d09e:	f7fe ff81 	bl	800bfa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0a2:	f7ff f9fd 	bl	800c4a0 <xTaskResumeAll>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10a      	bne.n	800d0c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d0ac:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <prvProcessTimerOrBlockTask+0x98>)
 800d0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	f3bf 8f6f 	isb	sy
}
 800d0bc:	e001      	b.n	800d0c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d0be:	f7ff f9ef 	bl	800c4a0 <xTaskResumeAll>
}
 800d0c2:	bf00      	nop
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20005474 	.word	0x20005474
 800d0d0:	20005478 	.word	0x20005478
 800d0d4:	e000ed04 	.word	0xe000ed04

0800d0d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d0e0:	4b0e      	ldr	r3, [pc, #56]	; (800d11c <prvGetNextExpireTime+0x44>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <prvGetNextExpireTime+0x16>
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	e000      	b.n	800d0f0 <prvGetNextExpireTime+0x18>
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d105      	bne.n	800d108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0fc:	4b07      	ldr	r3, [pc, #28]	; (800d11c <prvGetNextExpireTime+0x44>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	e001      	b.n	800d10c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d10c:	68fb      	ldr	r3, [r7, #12]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	20005470 	.word	0x20005470

0800d120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d128:	f7ff fa58 	bl	800c5dc <xTaskGetTickCount>
 800d12c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d12e:	4b0b      	ldr	r3, [pc, #44]	; (800d15c <prvSampleTimeNow+0x3c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	429a      	cmp	r2, r3
 800d136:	d205      	bcs.n	800d144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d138:	f000 f936 	bl	800d3a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	601a      	str	r2, [r3, #0]
 800d142:	e002      	b.n	800d14a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d14a:	4a04      	ldr	r2, [pc, #16]	; (800d15c <prvSampleTimeNow+0x3c>)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d150:	68fb      	ldr	r3, [r7, #12]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	20005480 	.word	0x20005480

0800d160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
 800d16c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d16e:	2300      	movs	r3, #0
 800d170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	429a      	cmp	r2, r3
 800d184:	d812      	bhi.n	800d1ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	1ad2      	subs	r2, r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	429a      	cmp	r2, r3
 800d192:	d302      	bcc.n	800d19a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d194:	2301      	movs	r3, #1
 800d196:	617b      	str	r3, [r7, #20]
 800d198:	e01b      	b.n	800d1d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d19a:	4b10      	ldr	r3, [pc, #64]	; (800d1dc <prvInsertTimerInActiveList+0x7c>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	f7fe f928 	bl	800b3fa <vListInsert>
 800d1aa:	e012      	b.n	800d1d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d206      	bcs.n	800d1c2 <prvInsertTimerInActiveList+0x62>
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d302      	bcc.n	800d1c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
 800d1c0:	e007      	b.n	800d1d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1c2:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <prvInsertTimerInActiveList+0x80>)
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	f7fe f914 	bl	800b3fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d1d2:	697b      	ldr	r3, [r7, #20]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3718      	adds	r7, #24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20005474 	.word	0x20005474
 800d1e0:	20005470 	.word	0x20005470

0800d1e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	; 0x38
 800d1e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1ea:	e0ca      	b.n	800d382 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	da18      	bge.n	800d224 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d1f2:	1d3b      	adds	r3, r7, #4
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10a      	bne.n	800d214 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	61fb      	str	r3, [r7, #28]
}
 800d210:	bf00      	nop
 800d212:	e7fe      	b.n	800d212 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d21a:	6850      	ldr	r0, [r2, #4]
 800d21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d21e:	6892      	ldr	r2, [r2, #8]
 800d220:	4611      	mov	r1, r2
 800d222:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	f2c0 80ab 	blt.w	800d382 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	695b      	ldr	r3, [r3, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d004      	beq.n	800d242 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	3304      	adds	r3, #4
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fe f915 	bl	800b46c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d242:	463b      	mov	r3, r7
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff ff6b 	bl	800d120 <prvSampleTimeNow>
 800d24a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b09      	cmp	r3, #9
 800d250:	f200 8096 	bhi.w	800d380 <prvProcessReceivedCommands+0x19c>
 800d254:	a201      	add	r2, pc, #4	; (adr r2, 800d25c <prvProcessReceivedCommands+0x78>)
 800d256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25a:	bf00      	nop
 800d25c:	0800d285 	.word	0x0800d285
 800d260:	0800d285 	.word	0x0800d285
 800d264:	0800d285 	.word	0x0800d285
 800d268:	0800d2f9 	.word	0x0800d2f9
 800d26c:	0800d30d 	.word	0x0800d30d
 800d270:	0800d357 	.word	0x0800d357
 800d274:	0800d285 	.word	0x0800d285
 800d278:	0800d285 	.word	0x0800d285
 800d27c:	0800d2f9 	.word	0x0800d2f9
 800d280:	0800d30d 	.word	0x0800d30d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d28a:	f043 0301 	orr.w	r3, r3, #1
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	18d1      	adds	r1, r2, r3
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a4:	f7ff ff5c 	bl	800d160 <prvInsertTimerInActiveList>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d069      	beq.n	800d382 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d05e      	beq.n	800d382 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	441a      	add	r2, r3
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d6:	f7ff fe05 	bl	800cee4 <xTimerGenericCommand>
 800d2da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d14f      	bne.n	800d382 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	61bb      	str	r3, [r7, #24]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2fe:	f023 0301 	bic.w	r3, r3, #1
 800d302:	b2da      	uxtb	r2, r3
 800d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d30a:	e03a      	b.n	800d382 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d312:	f043 0301 	orr.w	r3, r3, #1
 800d316:	b2da      	uxtb	r2, r3
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	617b      	str	r3, [r7, #20]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	18d1      	adds	r1, r2, r3
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d350:	f7ff ff06 	bl	800d160 <prvInsertTimerInActiveList>
					break;
 800d354:	e015      	b.n	800d382 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d35c:	f003 0302 	and.w	r3, r3, #2
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d366:	f000 fbdb 	bl	800db20 <vPortFree>
 800d36a:	e00a      	b.n	800d382 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d372:	f023 0301 	bic.w	r3, r3, #1
 800d376:	b2da      	uxtb	r2, r3
 800d378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d37e:	e000      	b.n	800d382 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d382:	4b08      	ldr	r3, [pc, #32]	; (800d3a4 <prvProcessReceivedCommands+0x1c0>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	1d39      	adds	r1, r7, #4
 800d388:	2200      	movs	r2, #0
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe fb70 	bl	800ba70 <xQueueReceive>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	f47f af2a 	bne.w	800d1ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	3730      	adds	r7, #48	; 0x30
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	20005478 	.word	0x20005478

0800d3a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b088      	sub	sp, #32
 800d3ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3ae:	e048      	b.n	800d442 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3b0:	4b2d      	ldr	r3, [pc, #180]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ba:	4b2b      	ldr	r3, [pc, #172]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe f84f 	bl	800b46c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3dc:	f003 0304 	and.w	r3, r3, #4
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d02e      	beq.n	800d442 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d90e      	bls.n	800d414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d402:	4b19      	ldr	r3, [pc, #100]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3304      	adds	r3, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fd fff4 	bl	800b3fa <vListInsert>
 800d412:	e016      	b.n	800d442 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d414:	2300      	movs	r3, #0
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	2300      	movs	r3, #0
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	2100      	movs	r1, #0
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f7ff fd60 	bl	800cee4 <xTimerGenericCommand>
 800d424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	603b      	str	r3, [r7, #0]
}
 800d43e:	bf00      	nop
 800d440:	e7fe      	b.n	800d440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d442:	4b09      	ldr	r3, [pc, #36]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1b1      	bne.n	800d3b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d452:	4b06      	ldr	r3, [pc, #24]	; (800d46c <prvSwitchTimerLists+0xc4>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a04      	ldr	r2, [pc, #16]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d458:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d45a:	4a04      	ldr	r2, [pc, #16]	; (800d46c <prvSwitchTimerLists+0xc4>)
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	6013      	str	r3, [r2, #0]
}
 800d460:	bf00      	nop
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20005470 	.word	0x20005470
 800d46c:	20005474 	.word	0x20005474

0800d470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d476:	f000 f965 	bl	800d744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d47a:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d120      	bne.n	800d4c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d482:	4814      	ldr	r0, [pc, #80]	; (800d4d4 <prvCheckForValidListAndQueue+0x64>)
 800d484:	f7fd ff68 	bl	800b358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d488:	4813      	ldr	r0, [pc, #76]	; (800d4d8 <prvCheckForValidListAndQueue+0x68>)
 800d48a:	f7fd ff65 	bl	800b358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d48e:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <prvCheckForValidListAndQueue+0x6c>)
 800d490:	4a10      	ldr	r2, [pc, #64]	; (800d4d4 <prvCheckForValidListAndQueue+0x64>)
 800d492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d494:	4b12      	ldr	r3, [pc, #72]	; (800d4e0 <prvCheckForValidListAndQueue+0x70>)
 800d496:	4a10      	ldr	r2, [pc, #64]	; (800d4d8 <prvCheckForValidListAndQueue+0x68>)
 800d498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d49a:	2300      	movs	r3, #0
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	4b11      	ldr	r3, [pc, #68]	; (800d4e4 <prvCheckForValidListAndQueue+0x74>)
 800d4a0:	4a11      	ldr	r2, [pc, #68]	; (800d4e8 <prvCheckForValidListAndQueue+0x78>)
 800d4a2:	2110      	movs	r1, #16
 800d4a4:	200a      	movs	r0, #10
 800d4a6:	f7fe f873 	bl	800b590 <xQueueGenericCreateStatic>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d4ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4b0:	4b07      	ldr	r3, [pc, #28]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d005      	beq.n	800d4c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4b8:	4b05      	ldr	r3, [pc, #20]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	490b      	ldr	r1, [pc, #44]	; (800d4ec <prvCheckForValidListAndQueue+0x7c>)
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe fd46 	bl	800bf50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4c4:	f000 f96e 	bl	800d7a4 <vPortExitCritical>
}
 800d4c8:	bf00      	nop
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20005478 	.word	0x20005478
 800d4d4:	20005448 	.word	0x20005448
 800d4d8:	2000545c 	.word	0x2000545c
 800d4dc:	20005470 	.word	0x20005470
 800d4e0:	20005474 	.word	0x20005474
 800d4e4:	20005524 	.word	0x20005524
 800d4e8:	20005484 	.word	0x20005484
 800d4ec:	08019178 	.word	0x08019178

0800d4f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	3b04      	subs	r3, #4
 800d500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	3b04      	subs	r3, #4
 800d50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f023 0201 	bic.w	r2, r3, #1
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	3b04      	subs	r3, #4
 800d51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d520:	4a0c      	ldr	r2, [pc, #48]	; (800d554 <pxPortInitialiseStack+0x64>)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3b14      	subs	r3, #20
 800d52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3b04      	subs	r3, #4
 800d536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f06f 0202 	mvn.w	r2, #2
 800d53e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3b20      	subs	r3, #32
 800d544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d546:	68fb      	ldr	r3, [r7, #12]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	0800d559 	.word	0x0800d559

0800d558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <prvTaskExitError+0x54>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d56a:	d00a      	beq.n	800d582 <prvTaskExitError+0x2a>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	60fb      	str	r3, [r7, #12]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <prvTaskExitError+0x28>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	60bb      	str	r3, [r7, #8]
}
 800d594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d596:	bf00      	nop
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d0fc      	beq.n	800d598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	3714      	adds	r7, #20
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	20000030 	.word	0x20000030

0800d5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5b0:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <pxCurrentTCBConst2>)
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	6808      	ldr	r0, [r1, #0]
 800d5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ba:	f380 8809 	msr	PSP, r0
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f04f 0000 	mov.w	r0, #0
 800d5c6:	f380 8811 	msr	BASEPRI, r0
 800d5ca:	4770      	bx	lr
 800d5cc:	f3af 8000 	nop.w

0800d5d0 <pxCurrentTCBConst2>:
 800d5d0:	20004f48 	.word	0x20004f48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop

0800d5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5d8:	4808      	ldr	r0, [pc, #32]	; (800d5fc <prvPortStartFirstTask+0x24>)
 800d5da:	6800      	ldr	r0, [r0, #0]
 800d5dc:	6800      	ldr	r0, [r0, #0]
 800d5de:	f380 8808 	msr	MSP, r0
 800d5e2:	f04f 0000 	mov.w	r0, #0
 800d5e6:	f380 8814 	msr	CONTROL, r0
 800d5ea:	b662      	cpsie	i
 800d5ec:	b661      	cpsie	f
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	df00      	svc	0
 800d5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5fa:	bf00      	nop
 800d5fc:	e000ed08 	.word	0xe000ed08

0800d600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d606:	4b46      	ldr	r3, [pc, #280]	; (800d720 <xPortStartScheduler+0x120>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a46      	ldr	r2, [pc, #280]	; (800d724 <xPortStartScheduler+0x124>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d10a      	bne.n	800d626 <xPortStartScheduler+0x26>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	613b      	str	r3, [r7, #16]
}
 800d622:	bf00      	nop
 800d624:	e7fe      	b.n	800d624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d626:	4b3e      	ldr	r3, [pc, #248]	; (800d720 <xPortStartScheduler+0x120>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a3f      	ldr	r2, [pc, #252]	; (800d728 <xPortStartScheduler+0x128>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d10a      	bne.n	800d646 <xPortStartScheduler+0x46>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	60fb      	str	r3, [r7, #12]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d646:	4b39      	ldr	r3, [pc, #228]	; (800d72c <xPortStartScheduler+0x12c>)
 800d648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	22ff      	movs	r2, #255	; 0xff
 800d656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d660:	78fb      	ldrb	r3, [r7, #3]
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	4b31      	ldr	r3, [pc, #196]	; (800d730 <xPortStartScheduler+0x130>)
 800d66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d66e:	4b31      	ldr	r3, [pc, #196]	; (800d734 <xPortStartScheduler+0x134>)
 800d670:	2207      	movs	r2, #7
 800d672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d674:	e009      	b.n	800d68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d676:	4b2f      	ldr	r3, [pc, #188]	; (800d734 <xPortStartScheduler+0x134>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	4a2d      	ldr	r2, [pc, #180]	; (800d734 <xPortStartScheduler+0x134>)
 800d67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d68a:	78fb      	ldrb	r3, [r7, #3]
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d692:	2b80      	cmp	r3, #128	; 0x80
 800d694:	d0ef      	beq.n	800d676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d696:	4b27      	ldr	r3, [pc, #156]	; (800d734 <xPortStartScheduler+0x134>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f1c3 0307 	rsb	r3, r3, #7
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	d00a      	beq.n	800d6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	60bb      	str	r3, [r7, #8]
}
 800d6b4:	bf00      	nop
 800d6b6:	e7fe      	b.n	800d6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6b8:	4b1e      	ldr	r3, [pc, #120]	; (800d734 <xPortStartScheduler+0x134>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	021b      	lsls	r3, r3, #8
 800d6be:	4a1d      	ldr	r2, [pc, #116]	; (800d734 <xPortStartScheduler+0x134>)
 800d6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6c2:	4b1c      	ldr	r3, [pc, #112]	; (800d734 <xPortStartScheduler+0x134>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6ca:	4a1a      	ldr	r2, [pc, #104]	; (800d734 <xPortStartScheduler+0x134>)
 800d6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6d6:	4b18      	ldr	r3, [pc, #96]	; (800d738 <xPortStartScheduler+0x138>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a17      	ldr	r2, [pc, #92]	; (800d738 <xPortStartScheduler+0x138>)
 800d6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6e2:	4b15      	ldr	r3, [pc, #84]	; (800d738 <xPortStartScheduler+0x138>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a14      	ldr	r2, [pc, #80]	; (800d738 <xPortStartScheduler+0x138>)
 800d6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6ee:	f000 f8dd 	bl	800d8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6f2:	4b12      	ldr	r3, [pc, #72]	; (800d73c <xPortStartScheduler+0x13c>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6f8:	f000 f8fc 	bl	800d8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6fc:	4b10      	ldr	r3, [pc, #64]	; (800d740 <xPortStartScheduler+0x140>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a0f      	ldr	r2, [pc, #60]	; (800d740 <xPortStartScheduler+0x140>)
 800d702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d708:	f7ff ff66 	bl	800d5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d70c:	f7ff f830 	bl	800c770 <vTaskSwitchContext>
	prvTaskExitError();
 800d710:	f7ff ff22 	bl	800d558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	e000ed00 	.word	0xe000ed00
 800d724:	410fc271 	.word	0x410fc271
 800d728:	410fc270 	.word	0x410fc270
 800d72c:	e000e400 	.word	0xe000e400
 800d730:	20005574 	.word	0x20005574
 800d734:	20005578 	.word	0x20005578
 800d738:	e000ed20 	.word	0xe000ed20
 800d73c:	20000030 	.word	0x20000030
 800d740:	e000ef34 	.word	0xe000ef34

0800d744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	607b      	str	r3, [r7, #4]
}
 800d75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d75e:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <vPortEnterCritical+0x58>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	3301      	adds	r3, #1
 800d764:	4a0d      	ldr	r2, [pc, #52]	; (800d79c <vPortEnterCritical+0x58>)
 800d766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d768:	4b0c      	ldr	r3, [pc, #48]	; (800d79c <vPortEnterCritical+0x58>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d10f      	bne.n	800d790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d770:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <vPortEnterCritical+0x5c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	b2db      	uxtb	r3, r3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00a      	beq.n	800d790 <vPortEnterCritical+0x4c>
	__asm volatile
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	603b      	str	r3, [r7, #0]
}
 800d78c:	bf00      	nop
 800d78e:	e7fe      	b.n	800d78e <vPortEnterCritical+0x4a>
	}
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	20000030 	.word	0x20000030
 800d7a0:	e000ed04 	.word	0xe000ed04

0800d7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7aa:	4b12      	ldr	r3, [pc, #72]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10a      	bne.n	800d7c8 <vPortExitCritical+0x24>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	607b      	str	r3, [r7, #4]
}
 800d7c4:	bf00      	nop
 800d7c6:	e7fe      	b.n	800d7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7c8:	4b0a      	ldr	r3, [pc, #40]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	4a09      	ldr	r2, [pc, #36]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7d2:	4b08      	ldr	r3, [pc, #32]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <vPortExitCritical+0x42>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	f383 8811 	msr	BASEPRI, r3
}
 800d7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7e6:	bf00      	nop
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000030 	.word	0x20000030
	...

0800d800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d800:	f3ef 8009 	mrs	r0, PSP
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	4b15      	ldr	r3, [pc, #84]	; (800d860 <pxCurrentTCBConst>)
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	f01e 0f10 	tst.w	lr, #16
 800d810:	bf08      	it	eq
 800d812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81a:	6010      	str	r0, [r2, #0]
 800d81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d824:	f380 8811 	msr	BASEPRI, r0
 800d828:	f3bf 8f4f 	dsb	sy
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f7fe ff9e 	bl	800c770 <vTaskSwitchContext>
 800d834:	f04f 0000 	mov.w	r0, #0
 800d838:	f380 8811 	msr	BASEPRI, r0
 800d83c:	bc09      	pop	{r0, r3}
 800d83e:	6819      	ldr	r1, [r3, #0]
 800d840:	6808      	ldr	r0, [r1, #0]
 800d842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d846:	f01e 0f10 	tst.w	lr, #16
 800d84a:	bf08      	it	eq
 800d84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d850:	f380 8809 	msr	PSP, r0
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	f3af 8000 	nop.w

0800d860 <pxCurrentTCBConst>:
 800d860:	20004f48 	.word	0x20004f48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d864:	bf00      	nop
 800d866:	bf00      	nop

0800d868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	607b      	str	r3, [r7, #4]
}
 800d880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d882:	f7fe febb 	bl	800c5fc <xTaskIncrementTick>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d88c:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <xPortSysTickHandler+0x40>)
 800d88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	2300      	movs	r3, #0
 800d896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	f383 8811 	msr	BASEPRI, r3
}
 800d89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	e000ed04 	.word	0xe000ed04

0800d8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8b0:	4b0b      	ldr	r3, [pc, #44]	; (800d8e0 <vPortSetupTimerInterrupt+0x34>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8b6:	4b0b      	ldr	r3, [pc, #44]	; (800d8e4 <vPortSetupTimerInterrupt+0x38>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <vPortSetupTimerInterrupt+0x3c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a0a      	ldr	r2, [pc, #40]	; (800d8ec <vPortSetupTimerInterrupt+0x40>)
 800d8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8c6:	099b      	lsrs	r3, r3, #6
 800d8c8:	4a09      	ldr	r2, [pc, #36]	; (800d8f0 <vPortSetupTimerInterrupt+0x44>)
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8ce:	4b04      	ldr	r3, [pc, #16]	; (800d8e0 <vPortSetupTimerInterrupt+0x34>)
 800d8d0:	2207      	movs	r2, #7
 800d8d2:	601a      	str	r2, [r3, #0]
}
 800d8d4:	bf00      	nop
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
 800d8de:	bf00      	nop
 800d8e0:	e000e010 	.word	0xe000e010
 800d8e4:	e000e018 	.word	0xe000e018
 800d8e8:	20000004 	.word	0x20000004
 800d8ec:	10624dd3 	.word	0x10624dd3
 800d8f0:	e000e014 	.word	0xe000e014

0800d8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d904 <vPortEnableVFP+0x10>
 800d8f8:	6801      	ldr	r1, [r0, #0]
 800d8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8fe:	6001      	str	r1, [r0, #0]
 800d900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d902:	bf00      	nop
 800d904:	e000ed88 	.word	0xe000ed88

0800d908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d90e:	f3ef 8305 	mrs	r3, IPSR
 800d912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b0f      	cmp	r3, #15
 800d918:	d914      	bls.n	800d944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d91a:	4a17      	ldr	r2, [pc, #92]	; (800d978 <vPortValidateInterruptPriority+0x70>)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	4413      	add	r3, r2
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d924:	4b15      	ldr	r3, [pc, #84]	; (800d97c <vPortValidateInterruptPriority+0x74>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	7afa      	ldrb	r2, [r7, #11]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d20a      	bcs.n	800d944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	607b      	str	r3, [r7, #4]
}
 800d940:	bf00      	nop
 800d942:	e7fe      	b.n	800d942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d944:	4b0e      	ldr	r3, [pc, #56]	; (800d980 <vPortValidateInterruptPriority+0x78>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d94c:	4b0d      	ldr	r3, [pc, #52]	; (800d984 <vPortValidateInterruptPriority+0x7c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	429a      	cmp	r2, r3
 800d952:	d90a      	bls.n	800d96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	603b      	str	r3, [r7, #0]
}
 800d966:	bf00      	nop
 800d968:	e7fe      	b.n	800d968 <vPortValidateInterruptPriority+0x60>
	}
 800d96a:	bf00      	nop
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	e000e3f0 	.word	0xe000e3f0
 800d97c:	20005574 	.word	0x20005574
 800d980:	e000ed0c 	.word	0xe000ed0c
 800d984:	20005578 	.word	0x20005578

0800d988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08a      	sub	sp, #40	; 0x28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d990:	2300      	movs	r3, #0
 800d992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d994:	f7fe fd76 	bl	800c484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d998:	4b5b      	ldr	r3, [pc, #364]	; (800db08 <pvPortMalloc+0x180>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d101      	bne.n	800d9a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9a0:	f000 f920 	bl	800dbe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9a4:	4b59      	ldr	r3, [pc, #356]	; (800db0c <pvPortMalloc+0x184>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 8093 	bne.w	800dad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01d      	beq.n	800d9f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9b8:	2208      	movs	r2, #8
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4413      	add	r3, r2
 800d9be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d014      	beq.n	800d9f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f023 0307 	bic.w	r3, r3, #7
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f003 0307 	and.w	r3, r3, #7
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00a      	beq.n	800d9f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	617b      	str	r3, [r7, #20]
}
 800d9f0:	bf00      	nop
 800d9f2:	e7fe      	b.n	800d9f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d06e      	beq.n	800dad8 <pvPortMalloc+0x150>
 800d9fa:	4b45      	ldr	r3, [pc, #276]	; (800db10 <pvPortMalloc+0x188>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	429a      	cmp	r2, r3
 800da02:	d869      	bhi.n	800dad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da04:	4b43      	ldr	r3, [pc, #268]	; (800db14 <pvPortMalloc+0x18c>)
 800da06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da08:	4b42      	ldr	r3, [pc, #264]	; (800db14 <pvPortMalloc+0x18c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da0e:	e004      	b.n	800da1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	429a      	cmp	r2, r3
 800da22:	d903      	bls.n	800da2c <pvPortMalloc+0xa4>
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d1f1      	bne.n	800da10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da2c:	4b36      	ldr	r3, [pc, #216]	; (800db08 <pvPortMalloc+0x180>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da32:	429a      	cmp	r2, r3
 800da34:	d050      	beq.n	800dad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2208      	movs	r2, #8
 800da3c:	4413      	add	r3, r2
 800da3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	1ad2      	subs	r2, r2, r3
 800da50:	2308      	movs	r3, #8
 800da52:	005b      	lsls	r3, r3, #1
 800da54:	429a      	cmp	r2, r3
 800da56:	d91f      	bls.n	800da98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4413      	add	r3, r2
 800da5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <pvPortMalloc+0xf8>
	__asm volatile
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	613b      	str	r3, [r7, #16]
}
 800da7c:	bf00      	nop
 800da7e:	e7fe      	b.n	800da7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	1ad2      	subs	r2, r2, r3
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da92:	69b8      	ldr	r0, [r7, #24]
 800da94:	f000 f908 	bl	800dca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da98:	4b1d      	ldr	r3, [pc, #116]	; (800db10 <pvPortMalloc+0x188>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	4a1b      	ldr	r2, [pc, #108]	; (800db10 <pvPortMalloc+0x188>)
 800daa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800daa6:	4b1a      	ldr	r3, [pc, #104]	; (800db10 <pvPortMalloc+0x188>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	4b1b      	ldr	r3, [pc, #108]	; (800db18 <pvPortMalloc+0x190>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d203      	bcs.n	800daba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dab2:	4b17      	ldr	r3, [pc, #92]	; (800db10 <pvPortMalloc+0x188>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a18      	ldr	r2, [pc, #96]	; (800db18 <pvPortMalloc+0x190>)
 800dab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	4b13      	ldr	r3, [pc, #76]	; (800db0c <pvPortMalloc+0x184>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	431a      	orrs	r2, r3
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dace:	4b13      	ldr	r3, [pc, #76]	; (800db1c <pvPortMalloc+0x194>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	3301      	adds	r3, #1
 800dad4:	4a11      	ldr	r2, [pc, #68]	; (800db1c <pvPortMalloc+0x194>)
 800dad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dad8:	f7fe fce2 	bl	800c4a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <pvPortMalloc+0x174>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	60fb      	str	r3, [r7, #12]
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <pvPortMalloc+0x172>
	return pvReturn;
 800dafc:	69fb      	ldr	r3, [r7, #28]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3728      	adds	r7, #40	; 0x28
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	20009184 	.word	0x20009184
 800db0c:	20009198 	.word	0x20009198
 800db10:	20009188 	.word	0x20009188
 800db14:	2000917c 	.word	0x2000917c
 800db18:	2000918c 	.word	0x2000918c
 800db1c:	20009190 	.word	0x20009190

0800db20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d04d      	beq.n	800dbce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db32:	2308      	movs	r3, #8
 800db34:	425b      	negs	r3, r3
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	4413      	add	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	4b24      	ldr	r3, [pc, #144]	; (800dbd8 <vPortFree+0xb8>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4013      	ands	r3, r2
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10a      	bne.n	800db64 <vPortFree+0x44>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	60fb      	str	r3, [r7, #12]
}
 800db60:	bf00      	nop
 800db62:	e7fe      	b.n	800db62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00a      	beq.n	800db82 <vPortFree+0x62>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	60bb      	str	r3, [r7, #8]
}
 800db7e:	bf00      	nop
 800db80:	e7fe      	b.n	800db80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	685a      	ldr	r2, [r3, #4]
 800db86:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <vPortFree+0xb8>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4013      	ands	r3, r2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d01e      	beq.n	800dbce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d11a      	bne.n	800dbce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	4b0e      	ldr	r3, [pc, #56]	; (800dbd8 <vPortFree+0xb8>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	43db      	mvns	r3, r3
 800dba2:	401a      	ands	r2, r3
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dba8:	f7fe fc6c 	bl	800c484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <vPortFree+0xbc>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	4a09      	ldr	r2, [pc, #36]	; (800dbdc <vPortFree+0xbc>)
 800dbb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbba:	6938      	ldr	r0, [r7, #16]
 800dbbc:	f000 f874 	bl	800dca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dbc0:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <vPortFree+0xc0>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	4a06      	ldr	r2, [pc, #24]	; (800dbe0 <vPortFree+0xc0>)
 800dbc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dbca:	f7fe fc69 	bl	800c4a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbce:	bf00      	nop
 800dbd0:	3718      	adds	r7, #24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20009198 	.word	0x20009198
 800dbdc:	20009188 	.word	0x20009188
 800dbe0:	20009194 	.word	0x20009194

0800dbe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dbea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dbee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dbf0:	4b27      	ldr	r3, [pc, #156]	; (800dc90 <prvHeapInit+0xac>)
 800dbf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f003 0307 	and.w	r3, r3, #7
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00c      	beq.n	800dc18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3307      	adds	r3, #7
 800dc02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f023 0307 	bic.w	r3, r3, #7
 800dc0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	4a1f      	ldr	r2, [pc, #124]	; (800dc90 <prvHeapInit+0xac>)
 800dc14:	4413      	add	r3, r2
 800dc16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc1c:	4a1d      	ldr	r2, [pc, #116]	; (800dc94 <prvHeapInit+0xb0>)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc22:	4b1c      	ldr	r3, [pc, #112]	; (800dc94 <prvHeapInit+0xb0>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc30:	2208      	movs	r2, #8
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	1a9b      	subs	r3, r3, r2
 800dc36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f023 0307 	bic.w	r3, r3, #7
 800dc3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	4a15      	ldr	r2, [pc, #84]	; (800dc98 <prvHeapInit+0xb4>)
 800dc44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc46:	4b14      	ldr	r3, [pc, #80]	; (800dc98 <prvHeapInit+0xb4>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc4e:	4b12      	ldr	r3, [pc, #72]	; (800dc98 <prvHeapInit+0xb4>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2200      	movs	r2, #0
 800dc54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	1ad2      	subs	r2, r2, r3
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc64:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <prvHeapInit+0xb4>)
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	4a0a      	ldr	r2, [pc, #40]	; (800dc9c <prvHeapInit+0xb8>)
 800dc72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	4a09      	ldr	r2, [pc, #36]	; (800dca0 <prvHeapInit+0xbc>)
 800dc7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc7c:	4b09      	ldr	r3, [pc, #36]	; (800dca4 <prvHeapInit+0xc0>)
 800dc7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc82:	601a      	str	r2, [r3, #0]
}
 800dc84:	bf00      	nop
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	2000557c 	.word	0x2000557c
 800dc94:	2000917c 	.word	0x2000917c
 800dc98:	20009184 	.word	0x20009184
 800dc9c:	2000918c 	.word	0x2000918c
 800dca0:	20009188 	.word	0x20009188
 800dca4:	20009198 	.word	0x20009198

0800dca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcb0:	4b28      	ldr	r3, [pc, #160]	; (800dd54 <prvInsertBlockIntoFreeList+0xac>)
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	e002      	b.n	800dcbc <prvInsertBlockIntoFreeList+0x14>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d8f7      	bhi.n	800dcb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d108      	bne.n	800dcea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	685a      	ldr	r2, [r3, #4]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	441a      	add	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	68ba      	ldr	r2, [r7, #8]
 800dcf4:	441a      	add	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d118      	bne.n	800dd30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <prvInsertBlockIntoFreeList+0xb0>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d00d      	beq.n	800dd26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	441a      	add	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	e008      	b.n	800dd38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd26:	4b0c      	ldr	r3, [pc, #48]	; (800dd58 <prvInsertBlockIntoFreeList+0xb0>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	e003      	b.n	800dd38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d002      	beq.n	800dd46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd46:	bf00      	nop
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	2000917c 	.word	0x2000917c
 800dd58:	20009184 	.word	0x20009184

0800dd5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dd60:	2201      	movs	r2, #1
 800dd62:	490e      	ldr	r1, [pc, #56]	; (800dd9c <MX_USB_HOST_Init+0x40>)
 800dd64:	480e      	ldr	r0, [pc, #56]	; (800dda0 <MX_USB_HOST_Init+0x44>)
 800dd66:	f7fb f9e5 	bl	8009134 <USBH_Init>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d001      	beq.n	800dd74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dd70:	f7f3 fa6e 	bl	8001250 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800dd74:	490b      	ldr	r1, [pc, #44]	; (800dda4 <MX_USB_HOST_Init+0x48>)
 800dd76:	480a      	ldr	r0, [pc, #40]	; (800dda0 <MX_USB_HOST_Init+0x44>)
 800dd78:	f7fb fa8c 	bl	8009294 <USBH_RegisterClass>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dd82:	f7f3 fa65 	bl	8001250 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dd86:	4806      	ldr	r0, [pc, #24]	; (800dda0 <MX_USB_HOST_Init+0x44>)
 800dd88:	f7fb fb10 	bl	80093ac <USBH_Start>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dd92:	f7f3 fa5d 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dd96:	bf00      	nop
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	0800dda9 	.word	0x0800dda9
 800dda0:	2000919c 	.word	0x2000919c
 800dda4:	20000010 	.word	0x20000010

0800dda8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ddb4:	78fb      	ldrb	r3, [r7, #3]
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	2b04      	cmp	r3, #4
 800ddba:	d819      	bhi.n	800ddf0 <USBH_UserProcess+0x48>
 800ddbc:	a201      	add	r2, pc, #4	; (adr r2, 800ddc4 <USBH_UserProcess+0x1c>)
 800ddbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc2:	bf00      	nop
 800ddc4:	0800ddf1 	.word	0x0800ddf1
 800ddc8:	0800dde1 	.word	0x0800dde1
 800ddcc:	0800ddf1 	.word	0x0800ddf1
 800ddd0:	0800dde9 	.word	0x0800dde9
 800ddd4:	0800ddd9 	.word	0x0800ddd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ddd8:	4b09      	ldr	r3, [pc, #36]	; (800de00 <USBH_UserProcess+0x58>)
 800ddda:	2203      	movs	r2, #3
 800dddc:	701a      	strb	r2, [r3, #0]
  break;
 800ddde:	e008      	b.n	800ddf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dde0:	4b07      	ldr	r3, [pc, #28]	; (800de00 <USBH_UserProcess+0x58>)
 800dde2:	2202      	movs	r2, #2
 800dde4:	701a      	strb	r2, [r3, #0]
  break;
 800dde6:	e004      	b.n	800ddf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dde8:	4b05      	ldr	r3, [pc, #20]	; (800de00 <USBH_UserProcess+0x58>)
 800ddea:	2201      	movs	r2, #1
 800ddec:	701a      	strb	r2, [r3, #0]
  break;
 800ddee:	e000      	b.n	800ddf2 <USBH_UserProcess+0x4a>

  default:
  break;
 800ddf0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ddf2:	bf00      	nop
 800ddf4:	370c      	adds	r7, #12
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	20009580 	.word	0x20009580

0800de04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	; 0x28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	605a      	str	r2, [r3, #4]
 800de16:	609a      	str	r2, [r3, #8]
 800de18:	60da      	str	r2, [r3, #12]
 800de1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800de24:	d147      	bne.n	800deb6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de26:	2300      	movs	r3, #0
 800de28:	613b      	str	r3, [r7, #16]
 800de2a:	4b25      	ldr	r3, [pc, #148]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2e:	4a24      	ldr	r2, [pc, #144]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de30:	f043 0301 	orr.w	r3, r3, #1
 800de34:	6313      	str	r3, [r2, #48]	; 0x30
 800de36:	4b22      	ldr	r3, [pc, #136]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3a:	f003 0301 	and.w	r3, r3, #1
 800de3e:	613b      	str	r3, [r7, #16]
 800de40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800de42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800de48:	2300      	movs	r3, #0
 800de4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de4c:	2300      	movs	r3, #0
 800de4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800de50:	f107 0314 	add.w	r3, r7, #20
 800de54:	4619      	mov	r1, r3
 800de56:	481b      	ldr	r0, [pc, #108]	; (800dec4 <HAL_HCD_MspInit+0xc0>)
 800de58:	f7f5 f94c 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800de5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800de60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de62:	2302      	movs	r3, #2
 800de64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de66:	2300      	movs	r3, #0
 800de68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de6a:	2300      	movs	r3, #0
 800de6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800de6e:	230a      	movs	r3, #10
 800de70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de72:	f107 0314 	add.w	r3, r7, #20
 800de76:	4619      	mov	r1, r3
 800de78:	4812      	ldr	r0, [pc, #72]	; (800dec4 <HAL_HCD_MspInit+0xc0>)
 800de7a:	f7f5 f93b 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800de7e:	4b10      	ldr	r3, [pc, #64]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de82:	4a0f      	ldr	r2, [pc, #60]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de88:	6353      	str	r3, [r2, #52]	; 0x34
 800de8a:	2300      	movs	r3, #0
 800de8c:	60fb      	str	r3, [r7, #12]
 800de8e:	4b0c      	ldr	r3, [pc, #48]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de92:	4a0b      	ldr	r2, [pc, #44]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de98:	6453      	str	r3, [r2, #68]	; 0x44
 800de9a:	4b09      	ldr	r3, [pc, #36]	; (800dec0 <HAL_HCD_MspInit+0xbc>)
 800de9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dea6:	2200      	movs	r2, #0
 800dea8:	2105      	movs	r1, #5
 800deaa:	2043      	movs	r0, #67	; 0x43
 800deac:	f7f4 fce9 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800deb0:	2043      	movs	r0, #67	; 0x43
 800deb2:	f7f4 fd02 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800deb6:	bf00      	nop
 800deb8:	3728      	adds	r7, #40	; 0x28
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	40023800 	.word	0x40023800
 800dec4:	40020000 	.word	0x40020000

0800dec8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fb ff1f 	bl	8009d1a <USBH_LL_IncTimer>
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800def2:	4618      	mov	r0, r3
 800def4:	f7fb ff63 	bl	8009dbe <USBH_LL_Connect>
}
 800def8:	bf00      	nop
 800defa:	3708      	adds	r7, #8
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fb ff78 	bl	8009e04 <USBH_LL_Disconnect>
}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	70fb      	strb	r3, [r7, #3]
 800df28:	4613      	mov	r3, r2
 800df2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df32:	4618      	mov	r0, r3
 800df34:	f7fb ffaf 	bl	8009e96 <USBH_LL_NotifyURBChange>
#endif
}
 800df38:	bf00      	nop
 800df3a:	3708      	adds	r7, #8
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fb ff0d 	bl	8009d6e <USBH_LL_PortEnabled>
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fb ff19 	bl	8009da2 <USBH_LL_PortDisabled>
}
 800df70:	bf00      	nop
 800df72:	3708      	adds	r7, #8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800df86:	2b01      	cmp	r3, #1
 800df88:	d12a      	bne.n	800dfe0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800df8a:	4a18      	ldr	r2, [pc, #96]	; (800dfec <USBH_LL_Init+0x74>)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4a15      	ldr	r2, [pc, #84]	; (800dfec <USBH_LL_Init+0x74>)
 800df96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800df9a:	4b14      	ldr	r3, [pc, #80]	; (800dfec <USBH_LL_Init+0x74>)
 800df9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dfa0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dfa2:	4b12      	ldr	r3, [pc, #72]	; (800dfec <USBH_LL_Init+0x74>)
 800dfa4:	2208      	movs	r2, #8
 800dfa6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dfa8:	4b10      	ldr	r3, [pc, #64]	; (800dfec <USBH_LL_Init+0x74>)
 800dfaa:	2201      	movs	r2, #1
 800dfac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dfae:	4b0f      	ldr	r3, [pc, #60]	; (800dfec <USBH_LL_Init+0x74>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dfb4:	4b0d      	ldr	r3, [pc, #52]	; (800dfec <USBH_LL_Init+0x74>)
 800dfb6:	2202      	movs	r2, #2
 800dfb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dfba:	4b0c      	ldr	r3, [pc, #48]	; (800dfec <USBH_LL_Init+0x74>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dfc0:	480a      	ldr	r0, [pc, #40]	; (800dfec <USBH_LL_Init+0x74>)
 800dfc2:	f7f5 fa4c 	bl	800345e <HAL_HCD_Init>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dfcc:	f7f3 f940 	bl	8001250 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dfd0:	4806      	ldr	r0, [pc, #24]	; (800dfec <USBH_LL_Init+0x74>)
 800dfd2:	f7f5 fe30 	bl	8003c36 <HAL_HCD_GetCurrentFrame>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4619      	mov	r1, r3
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7fb fe8e 	bl	8009cfc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	20009584 	.word	0x20009584

0800dff0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dffc:	2300      	movs	r3, #0
 800dffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e006:	4618      	mov	r0, r3
 800e008:	f7f5 fd9f 	bl	8003b4a <HAL_HCD_Start>
 800e00c:	4603      	mov	r3, r0
 800e00e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	4618      	mov	r0, r3
 800e014:	f000 f95c 	bl	800e2d0 <USBH_Get_USB_Status>
 800e018:	4603      	mov	r3, r0
 800e01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b084      	sub	sp, #16
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f5 fda7 	bl	8003b90 <HAL_HCD_Stop>
 800e042:	4603      	mov	r3, r0
 800e044:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e046:	7bfb      	ldrb	r3, [r7, #15]
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 f941 	bl	800e2d0 <USBH_Get_USB_Status>
 800e04e:	4603      	mov	r3, r0
 800e050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e052:	7bbb      	ldrb	r3, [r7, #14]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e064:	2301      	movs	r3, #1
 800e066:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f5 fdef 	bl	8003c52 <HAL_HCD_GetCurrentSpeed>
 800e074:	4603      	mov	r3, r0
 800e076:	2b02      	cmp	r3, #2
 800e078:	d00c      	beq.n	800e094 <USBH_LL_GetSpeed+0x38>
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d80d      	bhi.n	800e09a <USBH_LL_GetSpeed+0x3e>
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <USBH_LL_GetSpeed+0x2c>
 800e082:	2b01      	cmp	r3, #1
 800e084:	d003      	beq.n	800e08e <USBH_LL_GetSpeed+0x32>
 800e086:	e008      	b.n	800e09a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e088:	2300      	movs	r3, #0
 800e08a:	73fb      	strb	r3, [r7, #15]
    break;
 800e08c:	e008      	b.n	800e0a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e08e:	2301      	movs	r3, #1
 800e090:	73fb      	strb	r3, [r7, #15]
    break;
 800e092:	e005      	b.n	800e0a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e094:	2302      	movs	r3, #2
 800e096:	73fb      	strb	r3, [r7, #15]
    break;
 800e098:	e002      	b.n	800e0a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e09a:	2301      	movs	r3, #1
 800e09c:	73fb      	strb	r3, [r7, #15]
    break;
 800e09e:	bf00      	nop
  }
  return  speed;
 800e0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7f5 fd82 	bl	8003bca <HAL_HCD_ResetPort>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 f8ff 	bl	800e2d0 <USBH_Get_USB_Status>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0f2:	78fa      	ldrb	r2, [r7, #3]
 800e0f4:	4611      	mov	r1, r2
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7f5 fd89 	bl	8003c0e <HAL_HCD_HC_GetXferCount>
 800e0fc:	4603      	mov	r3, r0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e106:	b590      	push	{r4, r7, lr}
 800e108:	b089      	sub	sp, #36	; 0x24
 800e10a:	af04      	add	r7, sp, #16
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	4608      	mov	r0, r1
 800e110:	4611      	mov	r1, r2
 800e112:	461a      	mov	r2, r3
 800e114:	4603      	mov	r3, r0
 800e116:	70fb      	strb	r3, [r7, #3]
 800e118:	460b      	mov	r3, r1
 800e11a:	70bb      	strb	r3, [r7, #2]
 800e11c:	4613      	mov	r3, r2
 800e11e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e124:	2300      	movs	r3, #0
 800e126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e12e:	787c      	ldrb	r4, [r7, #1]
 800e130:	78ba      	ldrb	r2, [r7, #2]
 800e132:	78f9      	ldrb	r1, [r7, #3]
 800e134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e136:	9302      	str	r3, [sp, #8]
 800e138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	4623      	mov	r3, r4
 800e146:	f7f5 f9ec 	bl	8003522 <HAL_HCD_HC_Init>
 800e14a:	4603      	mov	r3, r0
 800e14c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	4618      	mov	r0, r3
 800e152:	f000 f8bd 	bl	800e2d0 <USBH_Get_USB_Status>
 800e156:	4603      	mov	r3, r0
 800e158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e15a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	bd90      	pop	{r4, r7, pc}

0800e164 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e17e:	78fa      	ldrb	r2, [r7, #3]
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7f5 fa5c 	bl	8003640 <HAL_HCD_HC_Halt>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 f89e 	bl	800e2d0 <USBH_Get_USB_Status>
 800e194:	4603      	mov	r3, r0
 800e196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e198:	7bbb      	ldrb	r3, [r7, #14]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e1a2:	b590      	push	{r4, r7, lr}
 800e1a4:	b089      	sub	sp, #36	; 0x24
 800e1a6:	af04      	add	r7, sp, #16
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	4608      	mov	r0, r1
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	70fb      	strb	r3, [r7, #3]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70bb      	strb	r3, [r7, #2]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e1ca:	787c      	ldrb	r4, [r7, #1]
 800e1cc:	78ba      	ldrb	r2, [r7, #2]
 800e1ce:	78f9      	ldrb	r1, [r7, #3]
 800e1d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e1d4:	9303      	str	r3, [sp, #12]
 800e1d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1d8:	9302      	str	r3, [sp, #8]
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	4623      	mov	r3, r4
 800e1e6:	f7f5 fa4f 	bl	8003688 <HAL_HCD_HC_SubmitRequest>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 f86d 	bl	800e2d0 <USBH_Get_USB_Status>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	bd90      	pop	{r4, r7, pc}

0800e204 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	460b      	mov	r3, r1
 800e20e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e216:	78fa      	ldrb	r2, [r7, #3]
 800e218:	4611      	mov	r1, r2
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7f5 fce3 	bl	8003be6 <HAL_HCD_HC_GetURBState>
 800e220:	4603      	mov	r3, r0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b082      	sub	sp, #8
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	460b      	mov	r3, r1
 800e234:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d103      	bne.n	800e248 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	4618      	mov	r0, r3
 800e244:	f000 f870 	bl	800e328 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e248:	20c8      	movs	r0, #200	; 0xc8
 800e24a:	f7f3 fe4f 	bl	8001eec <HAL_Delay>
  return USBH_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
 800e264:	4613      	mov	r3, r2
 800e266:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e26e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	212c      	movs	r1, #44	; 0x2c
 800e276:	fb01 f303 	mul.w	r3, r1, r3
 800e27a:	4413      	add	r3, r2
 800e27c:	333b      	adds	r3, #59	; 0x3b
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d009      	beq.n	800e298 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	212c      	movs	r1, #44	; 0x2c
 800e28a:	fb01 f303 	mul.w	r3, r1, r3
 800e28e:	4413      	add	r3, r2
 800e290:	3354      	adds	r3, #84	; 0x54
 800e292:	78ba      	ldrb	r2, [r7, #2]
 800e294:	701a      	strb	r2, [r3, #0]
 800e296:	e008      	b.n	800e2aa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e298:	78fb      	ldrb	r3, [r7, #3]
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	212c      	movs	r1, #44	; 0x2c
 800e29e:	fb01 f303 	mul.w	r3, r1, r3
 800e2a2:	4413      	add	r3, r2
 800e2a4:	3355      	adds	r3, #85	; 0x55
 800e2a6:	78ba      	ldrb	r2, [r7, #2]
 800e2a8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3714      	adds	r7, #20
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7f3 fe13 	bl	8001eec <HAL_Delay>
}
 800e2c6:	bf00      	nop
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d817      	bhi.n	800e314 <USBH_Get_USB_Status+0x44>
 800e2e4:	a201      	add	r2, pc, #4	; (adr r2, 800e2ec <USBH_Get_USB_Status+0x1c>)
 800e2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ea:	bf00      	nop
 800e2ec:	0800e2fd 	.word	0x0800e2fd
 800e2f0:	0800e303 	.word	0x0800e303
 800e2f4:	0800e309 	.word	0x0800e309
 800e2f8:	0800e30f 	.word	0x0800e30f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e300:	e00b      	b.n	800e31a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e302:	2302      	movs	r3, #2
 800e304:	73fb      	strb	r3, [r7, #15]
    break;
 800e306:	e008      	b.n	800e31a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e308:	2301      	movs	r3, #1
 800e30a:	73fb      	strb	r3, [r7, #15]
    break;
 800e30c:	e005      	b.n	800e31a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e30e:	2302      	movs	r3, #2
 800e310:	73fb      	strb	r3, [r7, #15]
    break;
 800e312:	e002      	b.n	800e31a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e314:	2302      	movs	r3, #2
 800e316:	73fb      	strb	r3, [r7, #15]
    break;
 800e318:	bf00      	nop
  }
  return usb_status;
 800e31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	4603      	mov	r3, r0
 800e330:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d102      	bne.n	800e342 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73fb      	strb	r3, [r7, #15]
 800e340:	e001      	b.n	800e346 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e342:	2301      	movs	r3, #1
 800e344:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	461a      	mov	r2, r3
 800e34a:	2101      	movs	r1, #1
 800e34c:	4803      	ldr	r0, [pc, #12]	; (800e35c <MX_DriverVbusFS+0x34>)
 800e34e:	f7f5 f86d 	bl	800342c <HAL_GPIO_WritePin>
}
 800e352:	bf00      	nop
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	40020800 	.word	0x40020800

0800e360 <rcl_get_zero_initialized_publisher>:
 800e360:	4b01      	ldr	r3, [pc, #4]	; (800e368 <rcl_get_zero_initialized_publisher+0x8>)
 800e362:	6818      	ldr	r0, [r3, #0]
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	080191d0 	.word	0x080191d0

0800e36c <rcl_publisher_init>:
 800e36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e370:	b088      	sub	sp, #32
 800e372:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e374:	2d00      	cmp	r5, #0
 800e376:	d069      	beq.n	800e44c <rcl_publisher_init+0xe0>
 800e378:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800e37c:	4604      	mov	r4, r0
 800e37e:	4648      	mov	r0, r9
 800e380:	460e      	mov	r6, r1
 800e382:	4690      	mov	r8, r2
 800e384:	461f      	mov	r7, r3
 800e386:	f000 fae3 	bl	800e950 <rcutils_allocator_is_valid>
 800e38a:	2800      	cmp	r0, #0
 800e38c:	d05e      	beq.n	800e44c <rcl_publisher_init+0xe0>
 800e38e:	2c00      	cmp	r4, #0
 800e390:	d05c      	beq.n	800e44c <rcl_publisher_init+0xe0>
 800e392:	f8d4 a000 	ldr.w	sl, [r4]
 800e396:	f1ba 0f00 	cmp.w	sl, #0
 800e39a:	d004      	beq.n	800e3a6 <rcl_publisher_init+0x3a>
 800e39c:	2764      	movs	r7, #100	; 0x64
 800e39e:	4638      	mov	r0, r7
 800e3a0:	b008      	add	sp, #32
 800e3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f005 faaa 	bl	8013900 <rcl_node_is_valid>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d052      	beq.n	800e456 <rcl_publisher_init+0xea>
 800e3b0:	f1b8 0f00 	cmp.w	r8, #0
 800e3b4:	d04a      	beq.n	800e44c <rcl_publisher_init+0xe0>
 800e3b6:	2f00      	cmp	r7, #0
 800e3b8:	d048      	beq.n	800e44c <rcl_publisher_init+0xe0>
 800e3ba:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e3be:	aa07      	add	r2, sp, #28
 800e3c0:	9205      	str	r2, [sp, #20]
 800e3c2:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800e3c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e3ce:	f8cd a01c 	str.w	sl, [sp, #28]
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f005 fae5 	bl	80139a8 <rcl_node_resolve_name>
 800e3de:	4607      	mov	r7, r0
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d14f      	bne.n	800e484 <rcl_publisher_init+0x118>
 800e3e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e3e6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800e3e8:	20c8      	movs	r0, #200	; 0xc8
 800e3ea:	4798      	blx	r3
 800e3ec:	6020      	str	r0, [r4, #0]
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	d04e      	beq.n	800e490 <rcl_publisher_init+0x124>
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f005 faa6 	bl	8013944 <rcl_node_get_rmw_handle>
 800e3f8:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	9a07      	ldr	r2, [sp, #28]
 800e400:	6827      	ldr	r7, [r4, #0]
 800e402:	462b      	mov	r3, r5
 800e404:	4641      	mov	r1, r8
 800e406:	f000 fbb1 	bl	800eb6c <rmw_create_publisher>
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800e410:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800e414:	b370      	cbz	r0, 800e474 <rcl_publisher_init+0x108>
 800e416:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800e41a:	f000 fc85 	bl	800ed28 <rmw_publisher_get_actual_qos>
 800e41e:	6823      	ldr	r3, [r4, #0]
 800e420:	4607      	mov	r7, r0
 800e422:	b9d0      	cbnz	r0, 800e45a <rcl_publisher_init+0xee>
 800e424:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800e428:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800e42c:	4629      	mov	r1, r5
 800e42e:	2270      	movs	r2, #112	; 0x70
 800e430:	4618      	mov	r0, r3
 800e432:	f009 ff5d 	bl	80182f0 <memcpy>
 800e436:	6832      	ldr	r2, [r6, #0]
 800e438:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800e43c:	9807      	ldr	r0, [sp, #28]
 800e43e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e440:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800e442:	4798      	blx	r3
 800e444:	4638      	mov	r0, r7
 800e446:	b008      	add	sp, #32
 800e448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44c:	270b      	movs	r7, #11
 800e44e:	4638      	mov	r0, r7
 800e450:	b008      	add	sp, #32
 800e452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e456:	27c8      	movs	r7, #200	; 0xc8
 800e458:	e7a1      	b.n	800e39e <rcl_publisher_init+0x32>
 800e45a:	b18b      	cbz	r3, 800e480 <rcl_publisher_init+0x114>
 800e45c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800e460:	b142      	cbz	r2, 800e474 <rcl_publisher_init+0x108>
 800e462:	4630      	mov	r0, r6
 800e464:	f005 fa6e 	bl	8013944 <rcl_node_get_rmw_handle>
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800e46e:	f000 fc6b 	bl	800ed48 <rmw_destroy_publisher>
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800e476:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800e478:	4618      	mov	r0, r3
 800e47a:	4790      	blx	r2
 800e47c:	2300      	movs	r3, #0
 800e47e:	6023      	str	r3, [r4, #0]
 800e480:	2701      	movs	r7, #1
 800e482:	e7db      	b.n	800e43c <rcl_publisher_init+0xd0>
 800e484:	2867      	cmp	r0, #103	; 0x67
 800e486:	d0d9      	beq.n	800e43c <rcl_publisher_init+0xd0>
 800e488:	2869      	cmp	r0, #105	; 0x69
 800e48a:	d003      	beq.n	800e494 <rcl_publisher_init+0x128>
 800e48c:	280a      	cmp	r0, #10
 800e48e:	d1f7      	bne.n	800e480 <rcl_publisher_init+0x114>
 800e490:	270a      	movs	r7, #10
 800e492:	e7d3      	b.n	800e43c <rcl_publisher_init+0xd0>
 800e494:	2767      	movs	r7, #103	; 0x67
 800e496:	e7d1      	b.n	800e43c <rcl_publisher_init+0xd0>

0800e498 <rcl_publisher_get_default_options>:
 800e498:	b570      	push	{r4, r5, r6, lr}
 800e49a:	4d14      	ldr	r5, [pc, #80]	; (800e4ec <rcl_publisher_get_default_options+0x54>)
 800e49c:	4914      	ldr	r1, [pc, #80]	; (800e4f0 <rcl_publisher_get_default_options+0x58>)
 800e49e:	b088      	sub	sp, #32
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	2250      	movs	r2, #80	; 0x50
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	f009 ff23 	bl	80182f0 <memcpy>
 800e4aa:	a802      	add	r0, sp, #8
 800e4ac:	f000 fa42 	bl	800e934 <rcutils_get_default_allocator>
 800e4b0:	f10d 0c08 	add.w	ip, sp, #8
 800e4b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4b8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800e4bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e4c0:	466e      	mov	r6, sp
 800e4c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e4c6:	f8ce 3000 	str.w	r3, [lr]
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f000 fad0 	bl	800ea70 <rmw_get_default_publisher_options>
 800e4d0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e4d4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800e4d8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e4dc:	2270      	movs	r2, #112	; 0x70
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f009 ff05 	bl	80182f0 <memcpy>
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	b008      	add	sp, #32
 800e4ea:	bd70      	pop	{r4, r5, r6, pc}
 800e4ec:	20009888 	.word	0x20009888
 800e4f0:	080191d8 	.word	0x080191d8

0800e4f4 <rcl_publish>:
 800e4f4:	b1f8      	cbz	r0, 800e536 <rcl_publish+0x42>
 800e4f6:	6803      	ldr	r3, [r0, #0]
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	b1b3      	cbz	r3, 800e52c <rcl_publish+0x38>
 800e4fe:	4616      	mov	r6, r2
 800e500:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800e504:	b192      	cbz	r2, 800e52c <rcl_publish+0x38>
 800e506:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800e50a:	460d      	mov	r5, r1
 800e50c:	f004 fe1e 	bl	801314c <rcl_context_is_valid>
 800e510:	b160      	cbz	r0, 800e52c <rcl_publish+0x38>
 800e512:	6823      	ldr	r3, [r4, #0]
 800e514:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800e518:	b140      	cbz	r0, 800e52c <rcl_publish+0x38>
 800e51a:	b155      	cbz	r5, 800e532 <rcl_publish+0x3e>
 800e51c:	4632      	mov	r2, r6
 800e51e:	4629      	mov	r1, r5
 800e520:	f000 fac4 	bl	800eaac <rmw_publish>
 800e524:	3800      	subs	r0, #0
 800e526:	bf18      	it	ne
 800e528:	2001      	movne	r0, #1
 800e52a:	bd70      	pop	{r4, r5, r6, pc}
 800e52c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e530:	bd70      	pop	{r4, r5, r6, pc}
 800e532:	200b      	movs	r0, #11
 800e534:	bd70      	pop	{r4, r5, r6, pc}
 800e536:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e53a:	4770      	bx	lr

0800e53c <rclc_executor_trigger_any>:
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d03f      	beq.n	800e5c0 <rclc_executor_trigger_any+0x84>
 800e540:	2900      	cmp	r1, #0
 800e542:	d03e      	beq.n	800e5c2 <rclc_executor_trigger_any+0x86>
 800e544:	4603      	mov	r3, r0
 800e546:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800e54a:	2200      	movs	r2, #0
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d037      	beq.n	800e5c0 <rclc_executor_trigger_any+0x84>
 800e550:	b430      	push	{r4, r5}
 800e552:	f893 c000 	ldrb.w	ip, [r3]
 800e556:	f1bc 0f08 	cmp.w	ip, #8
 800e55a:	d11e      	bne.n	800e59a <rclc_executor_trigger_any+0x5e>
 800e55c:	685c      	ldr	r4, [r3, #4]
 800e55e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800e560:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800e564:	d105      	bne.n	800e572 <rclc_executor_trigger_any+0x36>
 800e566:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e56a:	b910      	cbnz	r0, 800e572 <rclc_executor_trigger_any+0x36>
 800e56c:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800e570:	b128      	cbz	r0, 800e57e <rclc_executor_trigger_any+0x42>
 800e572:	bc30      	pop	{r4, r5}
 800e574:	4770      	bx	lr
 800e576:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d1f9      	bne.n	800e572 <rclc_executor_trigger_any+0x36>
 800e57e:	3201      	adds	r2, #1
 800e580:	4291      	cmp	r1, r2
 800e582:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800e586:	d018      	beq.n	800e5ba <rclc_executor_trigger_any+0x7e>
 800e588:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d0f0      	beq.n	800e572 <rclc_executor_trigger_any+0x36>
 800e590:	f893 c000 	ldrb.w	ip, [r3]
 800e594:	f1bc 0f08 	cmp.w	ip, #8
 800e598:	d0e0      	beq.n	800e55c <rclc_executor_trigger_any+0x20>
 800e59a:	f1bc 0f09 	cmp.w	ip, #9
 800e59e:	d1ea      	bne.n	800e576 <rclc_executor_trigger_any+0x3a>
 800e5a0:	685c      	ldr	r4, [r3, #4]
 800e5a2:	6a25      	ldr	r5, [r4, #32]
 800e5a4:	2d00      	cmp	r5, #0
 800e5a6:	d1e4      	bne.n	800e572 <rclc_executor_trigger_any+0x36>
 800e5a8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d1e0      	bne.n	800e572 <rclc_executor_trigger_any+0x36>
 800e5b0:	3201      	adds	r2, #1
 800e5b2:	4291      	cmp	r1, r2
 800e5b4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800e5b8:	d1e6      	bne.n	800e588 <rclc_executor_trigger_any+0x4c>
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	bc30      	pop	{r4, r5}
 800e5be:	4770      	bx	lr
 800e5c0:	4770      	bx	lr
 800e5c2:	4608      	mov	r0, r1
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop

0800e5c8 <rclc_executor_init>:
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d05f      	beq.n	800e68c <rclc_executor_init+0xc4>
 800e5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	b0b0      	sub	sp, #192	; 0xc0
 800e5d4:	2900      	cmp	r1, #0
 800e5d6:	d051      	beq.n	800e67c <rclc_executor_init+0xb4>
 800e5d8:	4605      	mov	r5, r0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	4616      	mov	r6, r2
 800e5de:	461f      	mov	r7, r3
 800e5e0:	f000 f9b6 	bl	800e950 <rcutils_allocator_is_valid>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d049      	beq.n	800e67c <rclc_executor_init+0xb4>
 800e5e8:	2e00      	cmp	r6, #0
 800e5ea:	d047      	beq.n	800e67c <rclc_executor_init+0xb4>
 800e5ec:	492c      	ldr	r1, [pc, #176]	; (800e6a0 <rclc_executor_init+0xd8>)
 800e5ee:	2288      	movs	r2, #136	; 0x88
 800e5f0:	a80e      	add	r0, sp, #56	; 0x38
 800e5f2:	f009 fe7d 	bl	80182f0 <memcpy>
 800e5f6:	a90e      	add	r1, sp, #56	; 0x38
 800e5f8:	2288      	movs	r2, #136	; 0x88
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f009 fe78 	bl	80182f0 <memcpy>
 800e600:	602c      	str	r4, [r5, #0]
 800e602:	4668      	mov	r0, sp
 800e604:	60ae      	str	r6, [r5, #8]
 800e606:	466c      	mov	r4, sp
 800e608:	f005 fd48 	bl	801409c <rcl_get_zero_initialized_wait_set>
 800e60c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e60e:	f105 0c14 	add.w	ip, r5, #20
 800e612:	f8d7 8000 	ldr.w	r8, [r7]
 800e616:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e61a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e61c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e626:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800e698 <rclc_executor_init+0xd0>
 800e62a:	6823      	ldr	r3, [r4, #0]
 800e62c:	f8cc 3000 	str.w	r3, [ip]
 800e630:	6939      	ldr	r1, [r7, #16]
 800e632:	612f      	str	r7, [r5, #16]
 800e634:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800e638:	01b0      	lsls	r0, r6, #6
 800e63a:	47c0      	blx	r8
 800e63c:	6068      	str	r0, [r5, #4]
 800e63e:	b338      	cbz	r0, 800e690 <rclc_executor_init+0xc8>
 800e640:	2400      	movs	r4, #0
 800e642:	e000      	b.n	800e646 <rclc_executor_init+0x7e>
 800e644:	6868      	ldr	r0, [r5, #4]
 800e646:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e64a:	4631      	mov	r1, r6
 800e64c:	3401      	adds	r4, #1
 800e64e:	f000 f837 	bl	800e6c0 <rclc_executor_handle_init>
 800e652:	42a6      	cmp	r6, r4
 800e654:	d1f6      	bne.n	800e644 <rclc_executor_init+0x7c>
 800e656:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800e65a:	f000 f825 	bl	800e6a8 <rclc_executor_handle_counters_zero_init>
 800e65e:	4a11      	ldr	r2, [pc, #68]	; (800e6a4 <rclc_executor_init+0xdc>)
 800e660:	686b      	ldr	r3, [r5, #4]
 800e662:	2000      	movs	r0, #0
 800e664:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800e668:	b163      	cbz	r3, 800e684 <rclc_executor_init+0xbc>
 800e66a:	692b      	ldr	r3, [r5, #16]
 800e66c:	b153      	cbz	r3, 800e684 <rclc_executor_init+0xbc>
 800e66e:	68ab      	ldr	r3, [r5, #8]
 800e670:	b143      	cbz	r3, 800e684 <rclc_executor_init+0xbc>
 800e672:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800e676:	b030      	add	sp, #192	; 0xc0
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	200b      	movs	r0, #11
 800e67e:	b030      	add	sp, #192	; 0xc0
 800e680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e684:	4618      	mov	r0, r3
 800e686:	b030      	add	sp, #192	; 0xc0
 800e688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e68c:	200b      	movs	r0, #11
 800e68e:	4770      	bx	lr
 800e690:	200a      	movs	r0, #10
 800e692:	e7f4      	b.n	800e67e <rclc_executor_init+0xb6>
 800e694:	f3af 8000 	nop.w
 800e698:	3b9aca00 	.word	0x3b9aca00
 800e69c:	00000000 	.word	0x00000000
 800e6a0:	08019228 	.word	0x08019228
 800e6a4:	0800e53d 	.word	0x0800e53d

0800e6a8 <rclc_executor_handle_counters_zero_init>:
 800e6a8:	b130      	cbz	r0, 800e6b8 <rclc_executor_handle_counters_zero_init+0x10>
 800e6aa:	b508      	push	{r3, lr}
 800e6ac:	2220      	movs	r2, #32
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	f009 fd56 	bl	8018160 <memset>
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	bd08      	pop	{r3, pc}
 800e6b8:	200b      	movs	r0, #11
 800e6ba:	4770      	bx	lr
 800e6bc:	0000      	movs	r0, r0
	...

0800e6c0 <rclc_executor_handle_init>:
 800e6c0:	b168      	cbz	r0, 800e6de <rclc_executor_handle_init+0x1e>
 800e6c2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800e6e8 <rclc_executor_handle_init+0x28>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	220b      	movs	r2, #11
 800e6ca:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800e6ce:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800e6d2:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800e6d6:	8002      	strh	r2, [r0, #0]
 800e6d8:	8703      	strh	r3, [r0, #56]	; 0x38
 800e6da:	4618      	mov	r0, r3
 800e6dc:	4770      	bx	lr
 800e6de:	200b      	movs	r0, #11
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	f3af 8000 	nop.w
	...

0800e6f0 <rclc_support_init>:
 800e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f4:	b086      	sub	sp, #24
 800e6f6:	b3b8      	cbz	r0, 800e768 <rclc_support_init+0x78>
 800e6f8:	461c      	mov	r4, r3
 800e6fa:	b3ab      	cbz	r3, 800e768 <rclc_support_init+0x78>
 800e6fc:	460f      	mov	r7, r1
 800e6fe:	4690      	mov	r8, r2
 800e700:	4606      	mov	r6, r0
 800e702:	f004 fe8d 	bl	8013420 <rcl_get_zero_initialized_init_options>
 800e706:	f104 030c 	add.w	r3, r4, #12
 800e70a:	9005      	str	r0, [sp, #20]
 800e70c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e710:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e714:	a805      	add	r0, sp, #20
 800e716:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e71a:	f004 fe83 	bl	8013424 <rcl_init_options_init>
 800e71e:	4605      	mov	r5, r0
 800e720:	b9e0      	cbnz	r0, 800e75c <rclc_support_init+0x6c>
 800e722:	ad02      	add	r5, sp, #8
 800e724:	4628      	mov	r0, r5
 800e726:	f004 fd07 	bl	8013138 <rcl_get_zero_initialized_context>
 800e72a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e72e:	4633      	mov	r3, r6
 800e730:	e886 0003 	stmia.w	r6, {r0, r1}
 800e734:	aa05      	add	r2, sp, #20
 800e736:	4641      	mov	r1, r8
 800e738:	4638      	mov	r0, r7
 800e73a:	f004 fd6d 	bl	8013218 <rcl_init>
 800e73e:	4605      	mov	r5, r0
 800e740:	b9b8      	cbnz	r0, 800e772 <rclc_support_init+0x82>
 800e742:	60b4      	str	r4, [r6, #8]
 800e744:	4622      	mov	r2, r4
 800e746:	f106 010c 	add.w	r1, r6, #12
 800e74a:	2003      	movs	r0, #3
 800e74c:	f005 fbc4 	bl	8013ed8 <rcl_clock_init>
 800e750:	4605      	mov	r5, r0
 800e752:	b970      	cbnz	r0, 800e772 <rclc_support_init+0x82>
 800e754:	a805      	add	r0, sp, #20
 800e756:	f004 fecb 	bl	80134f0 <rcl_init_options_fini>
 800e75a:	b108      	cbz	r0, 800e760 <rclc_support_init+0x70>
 800e75c:	f000 f91c 	bl	800e998 <rcutils_reset_error>
 800e760:	4628      	mov	r0, r5
 800e762:	b006      	add	sp, #24
 800e764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e768:	250b      	movs	r5, #11
 800e76a:	4628      	mov	r0, r5
 800e76c:	b006      	add	sp, #24
 800e76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e772:	f000 f911 	bl	800e998 <rcutils_reset_error>
 800e776:	a805      	add	r0, sp, #20
 800e778:	f004 feba 	bl	80134f0 <rcl_init_options_fini>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d0ef      	beq.n	800e760 <rclc_support_init+0x70>
 800e780:	e7ec      	b.n	800e75c <rclc_support_init+0x6c>
 800e782:	bf00      	nop

0800e784 <rclc_node_init_default>:
 800e784:	b3b8      	cbz	r0, 800e7f6 <rclc_node_init_default+0x72>
 800e786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e78a:	460d      	mov	r5, r1
 800e78c:	b0a1      	sub	sp, #132	; 0x84
 800e78e:	b329      	cbz	r1, 800e7dc <rclc_node_init_default+0x58>
 800e790:	4616      	mov	r6, r2
 800e792:	b31a      	cbz	r2, 800e7dc <rclc_node_init_default+0x58>
 800e794:	461f      	mov	r7, r3
 800e796:	b30b      	cbz	r3, 800e7dc <rclc_node_init_default+0x58>
 800e798:	f10d 0810 	add.w	r8, sp, #16
 800e79c:	4604      	mov	r4, r0
 800e79e:	4640      	mov	r0, r8
 800e7a0:	f004 ff5e 	bl	8013660 <rcl_get_zero_initialized_node>
 800e7a4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e7a8:	f10d 0918 	add.w	r9, sp, #24
 800e7ac:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7b0:	4648      	mov	r0, r9
 800e7b2:	f005 f8cd 	bl	8013950 <rcl_node_get_default_options>
 800e7b6:	4640      	mov	r0, r8
 800e7b8:	f004 ff52 	bl	8013660 <rcl_get_zero_initialized_node>
 800e7bc:	f8cd 9000 	str.w	r9, [sp]
 800e7c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e7c4:	463b      	mov	r3, r7
 800e7c6:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7ca:	4632      	mov	r2, r6
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f004 ff50 	bl	8013674 <rcl_node_init>
 800e7d4:	b930      	cbnz	r0, 800e7e4 <rclc_node_init_default+0x60>
 800e7d6:	b021      	add	sp, #132	; 0x84
 800e7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7dc:	200b      	movs	r0, #11
 800e7de:	b021      	add	sp, #132	; 0x84
 800e7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7e4:	9003      	str	r0, [sp, #12]
 800e7e6:	f000 f8d7 	bl	800e998 <rcutils_reset_error>
 800e7ea:	f000 f8d5 	bl	800e998 <rcutils_reset_error>
 800e7ee:	9803      	ldr	r0, [sp, #12]
 800e7f0:	b021      	add	sp, #132	; 0x84
 800e7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7f6:	200b      	movs	r0, #11
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop

0800e7fc <rclc_publisher_init_default>:
 800e7fc:	b368      	cbz	r0, 800e85a <rclc_publisher_init_default+0x5e>
 800e7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e802:	460d      	mov	r5, r1
 800e804:	b0a0      	sub	sp, #128	; 0x80
 800e806:	b321      	cbz	r1, 800e852 <rclc_publisher_init_default+0x56>
 800e808:	4616      	mov	r6, r2
 800e80a:	b312      	cbz	r2, 800e852 <rclc_publisher_init_default+0x56>
 800e80c:	461f      	mov	r7, r3
 800e80e:	b303      	cbz	r3, 800e852 <rclc_publisher_init_default+0x56>
 800e810:	4604      	mov	r4, r0
 800e812:	f7ff fda5 	bl	800e360 <rcl_get_zero_initialized_publisher>
 800e816:	f10d 0810 	add.w	r8, sp, #16
 800e81a:	6020      	str	r0, [r4, #0]
 800e81c:	4640      	mov	r0, r8
 800e81e:	f7ff fe3b 	bl	800e498 <rcl_publisher_get_default_options>
 800e822:	490f      	ldr	r1, [pc, #60]	; (800e860 <rclc_publisher_init_default+0x64>)
 800e824:	2250      	movs	r2, #80	; 0x50
 800e826:	4640      	mov	r0, r8
 800e828:	f009 fd62 	bl	80182f0 <memcpy>
 800e82c:	f8cd 8000 	str.w	r8, [sp]
 800e830:	463b      	mov	r3, r7
 800e832:	4632      	mov	r2, r6
 800e834:	4629      	mov	r1, r5
 800e836:	4620      	mov	r0, r4
 800e838:	f7ff fd98 	bl	800e36c <rcl_publisher_init>
 800e83c:	b910      	cbnz	r0, 800e844 <rclc_publisher_init_default+0x48>
 800e83e:	b020      	add	sp, #128	; 0x80
 800e840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e844:	9003      	str	r0, [sp, #12]
 800e846:	f000 f8a7 	bl	800e998 <rcutils_reset_error>
 800e84a:	9803      	ldr	r0, [sp, #12]
 800e84c:	b020      	add	sp, #128	; 0x80
 800e84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e852:	200b      	movs	r0, #11
 800e854:	b020      	add	sp, #128	; 0x80
 800e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85a:	200b      	movs	r0, #11
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	080192b0 	.word	0x080192b0

0800e864 <rclc_subscription_init_default>:
 800e864:	b368      	cbz	r0, 800e8c2 <rclc_subscription_init_default+0x5e>
 800e866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e86a:	460d      	mov	r5, r1
 800e86c:	b0a0      	sub	sp, #128	; 0x80
 800e86e:	b321      	cbz	r1, 800e8ba <rclc_subscription_init_default+0x56>
 800e870:	4616      	mov	r6, r2
 800e872:	b312      	cbz	r2, 800e8ba <rclc_subscription_init_default+0x56>
 800e874:	461f      	mov	r7, r3
 800e876:	b303      	cbz	r3, 800e8ba <rclc_subscription_init_default+0x56>
 800e878:	4604      	mov	r4, r0
 800e87a:	f005 fa39 	bl	8013cf0 <rcl_get_zero_initialized_subscription>
 800e87e:	f10d 0810 	add.w	r8, sp, #16
 800e882:	6020      	str	r0, [r4, #0]
 800e884:	4640      	mov	r0, r8
 800e886:	f005 fae1 	bl	8013e4c <rcl_subscription_get_default_options>
 800e88a:	490f      	ldr	r1, [pc, #60]	; (800e8c8 <rclc_subscription_init_default+0x64>)
 800e88c:	2250      	movs	r2, #80	; 0x50
 800e88e:	4640      	mov	r0, r8
 800e890:	f009 fd2e 	bl	80182f0 <memcpy>
 800e894:	f8cd 8000 	str.w	r8, [sp]
 800e898:	463b      	mov	r3, r7
 800e89a:	4632      	mov	r2, r6
 800e89c:	4629      	mov	r1, r5
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f005 fa2c 	bl	8013cfc <rcl_subscription_init>
 800e8a4:	b910      	cbnz	r0, 800e8ac <rclc_subscription_init_default+0x48>
 800e8a6:	b020      	add	sp, #128	; 0x80
 800e8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ac:	9003      	str	r0, [sp, #12]
 800e8ae:	f000 f873 	bl	800e998 <rcutils_reset_error>
 800e8b2:	9803      	ldr	r0, [sp, #12]
 800e8b4:	b020      	add	sp, #128	; 0x80
 800e8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ba:	200b      	movs	r0, #11
 800e8bc:	b020      	add	sp, #128	; 0x80
 800e8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c2:	200b      	movs	r0, #11
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	08019300 	.word	0x08019300

0800e8cc <__default_zero_allocate>:
 800e8cc:	f009 b87a 	b.w	80179c4 <calloc>

0800e8d0 <__default_reallocate>:
 800e8d0:	f009 ba06 	b.w	8017ce0 <realloc>

0800e8d4 <__default_deallocate>:
 800e8d4:	f009 b8e4 	b.w	8017aa0 <free>

0800e8d8 <__default_allocate>:
 800e8d8:	f009 b8da 	b.w	8017a90 <malloc>

0800e8dc <rcutils_get_zero_initialized_allocator>:
 800e8dc:	b510      	push	{r4, lr}
 800e8de:	4c05      	ldr	r4, [pc, #20]	; (800e8f4 <rcutils_get_zero_initialized_allocator+0x18>)
 800e8e0:	4686      	mov	lr, r0
 800e8e2:	4684      	mov	ip, r0
 800e8e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8ea:	6823      	ldr	r3, [r4, #0]
 800e8ec:	f8cc 3000 	str.w	r3, [ip]
 800e8f0:	4670      	mov	r0, lr
 800e8f2:	bd10      	pop	{r4, pc}
 800e8f4:	08019350 	.word	0x08019350

0800e8f8 <rcutils_set_default_allocator>:
 800e8f8:	b1a8      	cbz	r0, 800e926 <rcutils_set_default_allocator+0x2e>
 800e8fa:	6802      	ldr	r2, [r0, #0]
 800e8fc:	b1a2      	cbz	r2, 800e928 <rcutils_set_default_allocator+0x30>
 800e8fe:	6841      	ldr	r1, [r0, #4]
 800e900:	b1a1      	cbz	r1, 800e92c <rcutils_set_default_allocator+0x34>
 800e902:	b410      	push	{r4}
 800e904:	68c4      	ldr	r4, [r0, #12]
 800e906:	b164      	cbz	r4, 800e922 <rcutils_set_default_allocator+0x2a>
 800e908:	6880      	ldr	r0, [r0, #8]
 800e90a:	b138      	cbz	r0, 800e91c <rcutils_set_default_allocator+0x24>
 800e90c:	4b08      	ldr	r3, [pc, #32]	; (800e930 <rcutils_set_default_allocator+0x38>)
 800e90e:	601a      	str	r2, [r3, #0]
 800e910:	2200      	movs	r2, #0
 800e912:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e916:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e91a:	2001      	movs	r0, #1
 800e91c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	4620      	mov	r0, r4
 800e924:	e7fa      	b.n	800e91c <rcutils_set_default_allocator+0x24>
 800e926:	4770      	bx	lr
 800e928:	4610      	mov	r0, r2
 800e92a:	4770      	bx	lr
 800e92c:	4608      	mov	r0, r1
 800e92e:	4770      	bx	lr
 800e930:	20000034 	.word	0x20000034

0800e934 <rcutils_get_default_allocator>:
 800e934:	b510      	push	{r4, lr}
 800e936:	4c05      	ldr	r4, [pc, #20]	; (800e94c <rcutils_get_default_allocator+0x18>)
 800e938:	4686      	mov	lr, r0
 800e93a:	4684      	mov	ip, r0
 800e93c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e93e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	f8cc 3000 	str.w	r3, [ip]
 800e948:	4670      	mov	r0, lr
 800e94a:	bd10      	pop	{r4, pc}
 800e94c:	20000034 	.word	0x20000034

0800e950 <rcutils_allocator_is_valid>:
 800e950:	b158      	cbz	r0, 800e96a <rcutils_allocator_is_valid+0x1a>
 800e952:	6803      	ldr	r3, [r0, #0]
 800e954:	b143      	cbz	r3, 800e968 <rcutils_allocator_is_valid+0x18>
 800e956:	6843      	ldr	r3, [r0, #4]
 800e958:	b133      	cbz	r3, 800e968 <rcutils_allocator_is_valid+0x18>
 800e95a:	68c3      	ldr	r3, [r0, #12]
 800e95c:	b123      	cbz	r3, 800e968 <rcutils_allocator_is_valid+0x18>
 800e95e:	6880      	ldr	r0, [r0, #8]
 800e960:	3800      	subs	r0, #0
 800e962:	bf18      	it	ne
 800e964:	2001      	movne	r0, #1
 800e966:	4770      	bx	lr
 800e968:	4618      	mov	r0, r3
 800e96a:	4770      	bx	lr

0800e96c <rcutils_get_error_string>:
 800e96c:	4b06      	ldr	r3, [pc, #24]	; (800e988 <rcutils_get_error_string+0x1c>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	b13b      	cbz	r3, 800e982 <rcutils_get_error_string+0x16>
 800e972:	4b06      	ldr	r3, [pc, #24]	; (800e98c <rcutils_get_error_string+0x20>)
 800e974:	781a      	ldrb	r2, [r3, #0]
 800e976:	b90a      	cbnz	r2, 800e97c <rcutils_get_error_string+0x10>
 800e978:	2201      	movs	r2, #1
 800e97a:	701a      	strb	r2, [r3, #0]
 800e97c:	4b04      	ldr	r3, [pc, #16]	; (800e990 <rcutils_get_error_string+0x24>)
 800e97e:	7818      	ldrb	r0, [r3, #0]
 800e980:	4770      	bx	lr
 800e982:	4b04      	ldr	r3, [pc, #16]	; (800e994 <rcutils_get_error_string+0x28>)
 800e984:	7818      	ldrb	r0, [r3, #0]
 800e986:	4770      	bx	lr
 800e988:	200098f8 	.word	0x200098f8
 800e98c:	20009911 	.word	0x20009911
 800e990:	20009910 	.word	0x20009910
 800e994:	08019364 	.word	0x08019364

0800e998 <rcutils_reset_error>:
 800e998:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800e9b8 <rcutils_reset_error+0x20>
 800e99c:	4a08      	ldr	r2, [pc, #32]	; (800e9c0 <rcutils_reset_error+0x28>)
 800e99e:	4809      	ldr	r0, [pc, #36]	; (800e9c4 <rcutils_reset_error+0x2c>)
 800e9a0:	4909      	ldr	r1, [pc, #36]	; (800e9c8 <rcutils_reset_error+0x30>)
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	8013      	strh	r3, [r2, #0]
 800e9a6:	ed82 7b02 	vstr	d7, [r2, #8]
 800e9aa:	4a08      	ldr	r2, [pc, #32]	; (800e9cc <rcutils_reset_error+0x34>)
 800e9ac:	7003      	strb	r3, [r0, #0]
 800e9ae:	700b      	strb	r3, [r1, #0]
 800e9b0:	7013      	strb	r3, [r2, #0]
 800e9b2:	4770      	bx	lr
 800e9b4:	f3af 8000 	nop.w
	...
 800e9c0:	20009900 	.word	0x20009900
 800e9c4:	20009911 	.word	0x20009911
 800e9c8:	20009910 	.word	0x20009910
 800e9cc:	200098f8 	.word	0x200098f8

0800e9d0 <rcutils_system_time_now>:
 800e9d0:	b308      	cbz	r0, 800ea16 <rcutils_system_time_now+0x46>
 800e9d2:	b570      	push	{r4, r5, r6, lr}
 800e9d4:	b084      	sub	sp, #16
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	4669      	mov	r1, sp
 800e9da:	2001      	movs	r0, #1
 800e9dc:	f7f2 fd2c 	bl	8001438 <clock_gettime>
 800e9e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e9e4:	2d00      	cmp	r5, #0
 800e9e6:	db13      	blt.n	800ea10 <rcutils_system_time_now+0x40>
 800e9e8:	9902      	ldr	r1, [sp, #8]
 800e9ea:	2900      	cmp	r1, #0
 800e9ec:	db0d      	blt.n	800ea0a <rcutils_system_time_now+0x3a>
 800e9ee:	4e0b      	ldr	r6, [pc, #44]	; (800ea1c <rcutils_system_time_now+0x4c>)
 800e9f0:	fba3 3206 	umull	r3, r2, r3, r6
 800e9f4:	185b      	adds	r3, r3, r1
 800e9f6:	fb06 2205 	mla	r2, r6, r5, r2
 800e9fa:	f04f 0000 	mov.w	r0, #0
 800e9fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ea02:	e9c4 3200 	strd	r3, r2, [r4]
 800ea06:	b004      	add	sp, #16
 800ea08:	bd70      	pop	{r4, r5, r6, pc}
 800ea0a:	ea53 0205 	orrs.w	r2, r3, r5
 800ea0e:	d1ee      	bne.n	800e9ee <rcutils_system_time_now+0x1e>
 800ea10:	2002      	movs	r0, #2
 800ea12:	b004      	add	sp, #16
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	200b      	movs	r0, #11
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	3b9aca00 	.word	0x3b9aca00

0800ea20 <rcutils_steady_time_now>:
 800ea20:	b308      	cbz	r0, 800ea66 <rcutils_steady_time_now+0x46>
 800ea22:	b570      	push	{r4, r5, r6, lr}
 800ea24:	b084      	sub	sp, #16
 800ea26:	4604      	mov	r4, r0
 800ea28:	4669      	mov	r1, sp
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	f7f2 fd04 	bl	8001438 <clock_gettime>
 800ea30:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ea34:	2d00      	cmp	r5, #0
 800ea36:	db13      	blt.n	800ea60 <rcutils_steady_time_now+0x40>
 800ea38:	9902      	ldr	r1, [sp, #8]
 800ea3a:	2900      	cmp	r1, #0
 800ea3c:	db0d      	blt.n	800ea5a <rcutils_steady_time_now+0x3a>
 800ea3e:	4e0b      	ldr	r6, [pc, #44]	; (800ea6c <rcutils_steady_time_now+0x4c>)
 800ea40:	fba3 3206 	umull	r3, r2, r3, r6
 800ea44:	185b      	adds	r3, r3, r1
 800ea46:	fb06 2205 	mla	r2, r6, r5, r2
 800ea4a:	f04f 0000 	mov.w	r0, #0
 800ea4e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ea52:	e9c4 3200 	strd	r3, r2, [r4]
 800ea56:	b004      	add	sp, #16
 800ea58:	bd70      	pop	{r4, r5, r6, pc}
 800ea5a:	ea53 0205 	orrs.w	r2, r3, r5
 800ea5e:	d1ee      	bne.n	800ea3e <rcutils_steady_time_now+0x1e>
 800ea60:	2002      	movs	r0, #2
 800ea62:	b004      	add	sp, #16
 800ea64:	bd70      	pop	{r4, r5, r6, pc}
 800ea66:	200b      	movs	r0, #11
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop
 800ea6c:	3b9aca00 	.word	0x3b9aca00

0800ea70 <rmw_get_default_publisher_options>:
 800ea70:	2200      	movs	r2, #0
 800ea72:	6002      	str	r2, [r0, #0]
 800ea74:	7102      	strb	r2, [r0, #4]
 800ea76:	4770      	bx	lr

0800ea78 <rmw_uros_set_custom_transport>:
 800ea78:	b470      	push	{r4, r5, r6}
 800ea7a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ea7e:	b162      	cbz	r2, 800ea9a <rmw_uros_set_custom_transport+0x22>
 800ea80:	b15b      	cbz	r3, 800ea9a <rmw_uros_set_custom_transport+0x22>
 800ea82:	b155      	cbz	r5, 800ea9a <rmw_uros_set_custom_transport+0x22>
 800ea84:	b14e      	cbz	r6, 800ea9a <rmw_uros_set_custom_transport+0x22>
 800ea86:	4c06      	ldr	r4, [pc, #24]	; (800eaa0 <rmw_uros_set_custom_transport+0x28>)
 800ea88:	7020      	strb	r0, [r4, #0]
 800ea8a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ea8e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ea92:	6166      	str	r6, [r4, #20]
 800ea94:	2000      	movs	r0, #0
 800ea96:	bc70      	pop	{r4, r5, r6}
 800ea98:	4770      	bx	lr
 800ea9a:	200b      	movs	r0, #11
 800ea9c:	bc70      	pop	{r4, r5, r6}
 800ea9e:	4770      	bx	lr
 800eaa0:	20009914 	.word	0x20009914

0800eaa4 <flush_session>:
 800eaa4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800eaa6:	f002 bbe5 	b.w	8011274 <uxr_run_session_until_confirm_delivery>
 800eaaa:	bf00      	nop

0800eaac <rmw_publish>:
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d053      	beq.n	800eb58 <rmw_publish+0xac>
 800eab0:	b570      	push	{r4, r5, r6, lr}
 800eab2:	460d      	mov	r5, r1
 800eab4:	b08e      	sub	sp, #56	; 0x38
 800eab6:	2900      	cmp	r1, #0
 800eab8:	d04b      	beq.n	800eb52 <rmw_publish+0xa6>
 800eaba:	4604      	mov	r4, r0
 800eabc:	6800      	ldr	r0, [r0, #0]
 800eabe:	f000 fc47 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d045      	beq.n	800eb52 <rmw_publish+0xa6>
 800eac6:	6866      	ldr	r6, [r4, #4]
 800eac8:	2e00      	cmp	r6, #0
 800eaca:	d042      	beq.n	800eb52 <rmw_publish+0xa6>
 800eacc:	69b4      	ldr	r4, [r6, #24]
 800eace:	4628      	mov	r0, r5
 800ead0:	6923      	ldr	r3, [r4, #16]
 800ead2:	4798      	blx	r3
 800ead4:	69f3      	ldr	r3, [r6, #28]
 800ead6:	9005      	str	r0, [sp, #20]
 800ead8:	b113      	cbz	r3, 800eae0 <rmw_publish+0x34>
 800eada:	a805      	add	r0, sp, #20
 800eadc:	4798      	blx	r3
 800eade:	9805      	ldr	r0, [sp, #20]
 800eae0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800eae4:	691b      	ldr	r3, [r3, #16]
 800eae6:	9000      	str	r0, [sp, #0]
 800eae8:	6972      	ldr	r2, [r6, #20]
 800eaea:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800eaec:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800eaf0:	ab06      	add	r3, sp, #24
 800eaf2:	f003 f9ab 	bl	8011e4c <uxr_prepare_output_stream>
 800eaf6:	b1d8      	cbz	r0, 800eb30 <rmw_publish+0x84>
 800eaf8:	68a3      	ldr	r3, [r4, #8]
 800eafa:	a906      	add	r1, sp, #24
 800eafc:	4628      	mov	r0, r5
 800eafe:	4798      	blx	r3
 800eb00:	6a33      	ldr	r3, [r6, #32]
 800eb02:	4604      	mov	r4, r0
 800eb04:	b10b      	cbz	r3, 800eb0a <rmw_publish+0x5e>
 800eb06:	a806      	add	r0, sp, #24
 800eb08:	4798      	blx	r3
 800eb0a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800eb14:	d022      	beq.n	800eb5c <rmw_publish+0xb0>
 800eb16:	6918      	ldr	r0, [r3, #16]
 800eb18:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800eb1a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eb1e:	f002 fba9 	bl	8011274 <uxr_run_session_until_confirm_delivery>
 800eb22:	4020      	ands	r0, r4
 800eb24:	b2c4      	uxtb	r4, r0
 800eb26:	f084 0001 	eor.w	r0, r4, #1
 800eb2a:	b2c0      	uxtb	r0, r0
 800eb2c:	b00e      	add	sp, #56	; 0x38
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800eb34:	6918      	ldr	r0, [r3, #16]
 800eb36:	9b05      	ldr	r3, [sp, #20]
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	4b0b      	ldr	r3, [pc, #44]	; (800eb68 <rmw_publish+0xbc>)
 800eb3c:	9301      	str	r3, [sp, #4]
 800eb3e:	9602      	str	r6, [sp, #8]
 800eb40:	6972      	ldr	r2, [r6, #20]
 800eb42:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800eb44:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eb48:	ab06      	add	r3, sp, #24
 800eb4a:	f003 f9af 	bl	8011eac <uxr_prepare_output_stream_fragmented>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	d1d2      	bne.n	800eaf8 <rmw_publish+0x4c>
 800eb52:	2001      	movs	r0, #1
 800eb54:	b00e      	add	sp, #56	; 0x38
 800eb56:	bd70      	pop	{r4, r5, r6, pc}
 800eb58:	2001      	movs	r0, #1
 800eb5a:	4770      	bx	lr
 800eb5c:	6918      	ldr	r0, [r3, #16]
 800eb5e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eb62:	f002 f801 	bl	8010b68 <uxr_flash_output_streams>
 800eb66:	e7de      	b.n	800eb26 <rmw_publish+0x7a>
 800eb68:	0800eaa5 	.word	0x0800eaa5

0800eb6c <rmw_create_publisher>:
 800eb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb70:	b087      	sub	sp, #28
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f000 80cc 	beq.w	800ed10 <rmw_create_publisher+0x1a4>
 800eb78:	460e      	mov	r6, r1
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	f000 80c8 	beq.w	800ed10 <rmw_create_publisher+0x1a4>
 800eb80:	4604      	mov	r4, r0
 800eb82:	6800      	ldr	r0, [r0, #0]
 800eb84:	4615      	mov	r5, r2
 800eb86:	4698      	mov	r8, r3
 800eb88:	f000 fbe2 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	f000 80bf 	beq.w	800ed10 <rmw_create_publisher+0x1a4>
 800eb92:	2d00      	cmp	r5, #0
 800eb94:	f000 80bc 	beq.w	800ed10 <rmw_create_publisher+0x1a4>
 800eb98:	782b      	ldrb	r3, [r5, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f000 80b8 	beq.w	800ed10 <rmw_create_publisher+0x1a4>
 800eba0:	f1b8 0f00 	cmp.w	r8, #0
 800eba4:	f000 80b4 	beq.w	800ed10 <rmw_create_publisher+0x1a4>
 800eba8:	485c      	ldr	r0, [pc, #368]	; (800ed1c <rmw_create_publisher+0x1b0>)
 800ebaa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ebae:	f005 feef 	bl	8014990 <get_memory>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f000 80ac 	beq.w	800ed10 <rmw_create_publisher+0x1a4>
 800ebb8:	6884      	ldr	r4, [r0, #8]
 800ebba:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800ebbe:	f005 ff4f 	bl	8014a60 <rmw_get_implementation_identifier>
 800ebc2:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800ebc6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ebca:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f7f1 fb08 	bl	80001e4 <strlen>
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	283c      	cmp	r0, #60	; 0x3c
 800ebd8:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800ebdc:	f200 8091 	bhi.w	800ed02 <rmw_create_publisher+0x196>
 800ebe0:	4a4f      	ldr	r2, [pc, #316]	; (800ed20 <rmw_create_publisher+0x1b4>)
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	213c      	movs	r1, #60	; 0x3c
 800ebe6:	4650      	mov	r0, sl
 800ebe8:	f009 f9f0 	bl	8017fcc <sniprintf>
 800ebec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ebf0:	67e3      	str	r3, [r4, #124]	; 0x7c
 800ebf2:	4641      	mov	r1, r8
 800ebf4:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800ebf8:	2250      	movs	r2, #80	; 0x50
 800ebfa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ebfe:	f009 fb77 	bl	80182f0 <memcpy>
 800ec02:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ec06:	4947      	ldr	r1, [pc, #284]	; (800ed24 <rmw_create_publisher+0x1b8>)
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec0e:	bf0c      	ite	eq
 800ec10:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800ec14:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ec18:	67a3      	str	r3, [r4, #120]	; 0x78
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ec20:	4630      	mov	r0, r6
 800ec22:	f000 fba3 	bl	800f36c <get_message_typesupport_handle>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d06b      	beq.n	800ed02 <rmw_create_publisher+0x196>
 800ec2a:	6842      	ldr	r2, [r0, #4]
 800ec2c:	61a2      	str	r2, [r4, #24]
 800ec2e:	2a00      	cmp	r2, #0
 800ec30:	d067      	beq.n	800ed02 <rmw_create_publisher+0x196>
 800ec32:	4629      	mov	r1, r5
 800ec34:	4643      	mov	r3, r8
 800ec36:	4648      	mov	r0, r9
 800ec38:	f006 f978 	bl	8014f2c <create_topic>
 800ec3c:	6260      	str	r0, [r4, #36]	; 0x24
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	d063      	beq.n	800ed0a <rmw_create_publisher+0x19e>
 800ec42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec4a:	2103      	movs	r1, #3
 800ec4c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800ec50:	1c42      	adds	r2, r0, #1
 800ec52:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800ec56:	f001 fe39 	bl	80108cc <uxr_object_id>
 800ec5a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ec5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec62:	6120      	str	r0, [r4, #16]
 800ec64:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800ec68:	6910      	ldr	r0, [r2, #16]
 800ec6a:	2506      	movs	r5, #6
 800ec6c:	9500      	str	r5, [sp, #0]
 800ec6e:	6819      	ldr	r1, [r3, #0]
 800ec70:	6922      	ldr	r2, [r4, #16]
 800ec72:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ec76:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ec7a:	f001 fcd9 	bl	8010630 <uxr_buffer_create_publisher_bin>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ec84:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ec88:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ec8c:	f000 fae0 	bl	800f250 <run_xrce_session>
 800ec90:	b3b8      	cbz	r0, 800ed02 <rmw_create_publisher+0x196>
 800ec92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec9a:	2105      	movs	r1, #5
 800ec9c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800eca0:	1c42      	adds	r2, r0, #1
 800eca2:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800eca6:	f001 fe11 	bl	80108cc <uxr_object_id>
 800ecaa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ecae:	6160      	str	r0, [r4, #20]
 800ecb0:	691e      	ldr	r6, [r3, #16]
 800ecb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecb6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ecba:	f10d 0a10 	add.w	sl, sp, #16
 800ecbe:	4641      	mov	r1, r8
 800ecc0:	4650      	mov	r0, sl
 800ecc2:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800ecc6:	f000 fadf 	bl	800f288 <convert_qos_profile>
 800ecca:	9503      	str	r5, [sp, #12]
 800eccc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ecd0:	9001      	str	r0, [sp, #4]
 800ecd2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ecd6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800ece0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ece4:	f8d8 1000 	ldr.w	r1, [r8]
 800ece8:	4630      	mov	r0, r6
 800ecea:	f001 fd01 	bl	80106f0 <uxr_buffer_create_datawriter_bin>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ecf4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ecf8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ecfc:	f000 faa8 	bl	800f250 <run_xrce_session>
 800ed00:	b938      	cbnz	r0, 800ed12 <rmw_create_publisher+0x1a6>
 800ed02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ed04:	b108      	cbz	r0, 800ed0a <rmw_create_publisher+0x19e>
 800ed06:	f000 fa47 	bl	800f198 <rmw_uxrce_fini_topic_memory>
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	f000 f9ec 	bl	800f0e8 <rmw_uxrce_fini_publisher_memory>
 800ed10:	2700      	movs	r7, #0
 800ed12:	4638      	mov	r0, r7
 800ed14:	b007      	add	sp, #28
 800ed16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1a:	bf00      	nop
 800ed1c:	2000e20c 	.word	0x2000e20c
 800ed20:	0801939c 	.word	0x0801939c
 800ed24:	08019368 	.word	0x08019368

0800ed28 <rmw_publisher_get_actual_qos>:
 800ed28:	b150      	cbz	r0, 800ed40 <rmw_publisher_get_actual_qos+0x18>
 800ed2a:	b508      	push	{r3, lr}
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	b149      	cbz	r1, 800ed44 <rmw_publisher_get_actual_qos+0x1c>
 800ed30:	6841      	ldr	r1, [r0, #4]
 800ed32:	2250      	movs	r2, #80	; 0x50
 800ed34:	3128      	adds	r1, #40	; 0x28
 800ed36:	4618      	mov	r0, r3
 800ed38:	f009 fada 	bl	80182f0 <memcpy>
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	bd08      	pop	{r3, pc}
 800ed40:	200b      	movs	r0, #11
 800ed42:	4770      	bx	lr
 800ed44:	200b      	movs	r0, #11
 800ed46:	bd08      	pop	{r3, pc}

0800ed48 <rmw_destroy_publisher>:
 800ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4a:	b128      	cbz	r0, 800ed58 <rmw_destroy_publisher+0x10>
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	6800      	ldr	r0, [r0, #0]
 800ed50:	460d      	mov	r5, r1
 800ed52:	f000 fafd 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 800ed56:	b910      	cbnz	r0, 800ed5e <rmw_destroy_publisher+0x16>
 800ed58:	2401      	movs	r4, #1
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed5e:	6863      	ldr	r3, [r4, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d0f9      	beq.n	800ed58 <rmw_destroy_publisher+0x10>
 800ed64:	2d00      	cmp	r5, #0
 800ed66:	d0f7      	beq.n	800ed58 <rmw_destroy_publisher+0x10>
 800ed68:	6828      	ldr	r0, [r5, #0]
 800ed6a:	f000 faf1 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d0f2      	beq.n	800ed58 <rmw_destroy_publisher+0x10>
 800ed72:	686c      	ldr	r4, [r5, #4]
 800ed74:	2c00      	cmp	r4, #0
 800ed76:	d0ef      	beq.n	800ed58 <rmw_destroy_publisher+0x10>
 800ed78:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ed7a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800ed7e:	f006 f925 	bl	8014fcc <destroy_topic>
 800ed82:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ed86:	6962      	ldr	r2, [r4, #20]
 800ed88:	6918      	ldr	r0, [r3, #16]
 800ed8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ed8e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed92:	6819      	ldr	r1, [r3, #0]
 800ed94:	f001 fb98 	bl	80104c8 <uxr_buffer_delete_entity>
 800ed98:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ed9c:	6922      	ldr	r2, [r4, #16]
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800eda4:	4604      	mov	r4, r0
 800eda6:	6809      	ldr	r1, [r1, #0]
 800eda8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800edac:	f001 fb8c 	bl	80104c8 <uxr_buffer_delete_entity>
 800edb0:	693e      	ldr	r6, [r7, #16]
 800edb2:	4622      	mov	r2, r4
 800edb4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800edb8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800edbc:	4604      	mov	r4, r0
 800edbe:	4630      	mov	r0, r6
 800edc0:	f000 fa46 	bl	800f250 <run_xrce_session>
 800edc4:	693e      	ldr	r6, [r7, #16]
 800edc6:	4622      	mov	r2, r4
 800edc8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800edcc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800edd0:	4604      	mov	r4, r0
 800edd2:	4630      	mov	r0, r6
 800edd4:	f000 fa3c 	bl	800f250 <run_xrce_session>
 800edd8:	b12c      	cbz	r4, 800ede6 <rmw_destroy_publisher+0x9e>
 800edda:	b120      	cbz	r0, 800ede6 <rmw_destroy_publisher+0x9e>
 800eddc:	2400      	movs	r4, #0
 800edde:	4628      	mov	r0, r5
 800ede0:	f000 f982 	bl	800f0e8 <rmw_uxrce_fini_publisher_memory>
 800ede4:	e7b9      	b.n	800ed5a <rmw_destroy_publisher+0x12>
 800ede6:	2402      	movs	r4, #2
 800ede8:	e7f9      	b.n	800edde <rmw_destroy_publisher+0x96>
 800edea:	bf00      	nop

0800edec <rmw_uxrce_init_service_memory>:
 800edec:	b1e2      	cbz	r2, 800ee28 <rmw_uxrce_init_service_memory+0x3c>
 800edee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf2:	7b05      	ldrb	r5, [r0, #12]
 800edf4:	4606      	mov	r6, r0
 800edf6:	b9ad      	cbnz	r5, 800ee24 <rmw_uxrce_init_service_memory+0x38>
 800edf8:	23c8      	movs	r3, #200	; 0xc8
 800edfa:	e9c0 5500 	strd	r5, r5, [r0]
 800edfe:	6083      	str	r3, [r0, #8]
 800ee00:	f240 1301 	movw	r3, #257	; 0x101
 800ee04:	4617      	mov	r7, r2
 800ee06:	8183      	strh	r3, [r0, #12]
 800ee08:	460c      	mov	r4, r1
 800ee0a:	46a8      	mov	r8, r5
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4630      	mov	r0, r6
 800ee10:	3501      	adds	r5, #1
 800ee12:	f005 fdcd 	bl	80149b0 <put_memory>
 800ee16:	42af      	cmp	r7, r5
 800ee18:	60a4      	str	r4, [r4, #8]
 800ee1a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee1e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800ee22:	d1f3      	bne.n	800ee0c <rmw_uxrce_init_service_memory+0x20>
 800ee24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop

0800ee2c <rmw_uxrce_init_client_memory>:
 800ee2c:	b1e2      	cbz	r2, 800ee68 <rmw_uxrce_init_client_memory+0x3c>
 800ee2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee32:	7b05      	ldrb	r5, [r0, #12]
 800ee34:	4606      	mov	r6, r0
 800ee36:	b9ad      	cbnz	r5, 800ee64 <rmw_uxrce_init_client_memory+0x38>
 800ee38:	23c8      	movs	r3, #200	; 0xc8
 800ee3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee3e:	6083      	str	r3, [r0, #8]
 800ee40:	f240 1301 	movw	r3, #257	; 0x101
 800ee44:	4617      	mov	r7, r2
 800ee46:	8183      	strh	r3, [r0, #12]
 800ee48:	460c      	mov	r4, r1
 800ee4a:	46a8      	mov	r8, r5
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4630      	mov	r0, r6
 800ee50:	3501      	adds	r5, #1
 800ee52:	f005 fdad 	bl	80149b0 <put_memory>
 800ee56:	42af      	cmp	r7, r5
 800ee58:	60a4      	str	r4, [r4, #8]
 800ee5a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee5e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800ee62:	d1f3      	bne.n	800ee4c <rmw_uxrce_init_client_memory+0x20>
 800ee64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop

0800ee6c <rmw_uxrce_init_publisher_memory>:
 800ee6c:	b1e2      	cbz	r2, 800eea8 <rmw_uxrce_init_publisher_memory+0x3c>
 800ee6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee72:	7b05      	ldrb	r5, [r0, #12]
 800ee74:	4606      	mov	r6, r0
 800ee76:	b9ad      	cbnz	r5, 800eea4 <rmw_uxrce_init_publisher_memory+0x38>
 800ee78:	23d8      	movs	r3, #216	; 0xd8
 800ee7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee7e:	6083      	str	r3, [r0, #8]
 800ee80:	f240 1301 	movw	r3, #257	; 0x101
 800ee84:	4617      	mov	r7, r2
 800ee86:	8183      	strh	r3, [r0, #12]
 800ee88:	460c      	mov	r4, r1
 800ee8a:	46a8      	mov	r8, r5
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4630      	mov	r0, r6
 800ee90:	3501      	adds	r5, #1
 800ee92:	f005 fd8d 	bl	80149b0 <put_memory>
 800ee96:	42af      	cmp	r7, r5
 800ee98:	60a4      	str	r4, [r4, #8]
 800ee9a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee9e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800eea2:	d1f3      	bne.n	800ee8c <rmw_uxrce_init_publisher_memory+0x20>
 800eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop

0800eeac <rmw_uxrce_init_subscription_memory>:
 800eeac:	b1e2      	cbz	r2, 800eee8 <rmw_uxrce_init_subscription_memory+0x3c>
 800eeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb2:	7b05      	ldrb	r5, [r0, #12]
 800eeb4:	4606      	mov	r6, r0
 800eeb6:	b9ad      	cbnz	r5, 800eee4 <rmw_uxrce_init_subscription_memory+0x38>
 800eeb8:	23d8      	movs	r3, #216	; 0xd8
 800eeba:	e9c0 5500 	strd	r5, r5, [r0]
 800eebe:	6083      	str	r3, [r0, #8]
 800eec0:	f240 1301 	movw	r3, #257	; 0x101
 800eec4:	4617      	mov	r7, r2
 800eec6:	8183      	strh	r3, [r0, #12]
 800eec8:	460c      	mov	r4, r1
 800eeca:	46a8      	mov	r8, r5
 800eecc:	4621      	mov	r1, r4
 800eece:	4630      	mov	r0, r6
 800eed0:	3501      	adds	r5, #1
 800eed2:	f005 fd6d 	bl	80149b0 <put_memory>
 800eed6:	42af      	cmp	r7, r5
 800eed8:	60a4      	str	r4, [r4, #8]
 800eeda:	f884 800c 	strb.w	r8, [r4, #12]
 800eede:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800eee2:	d1f3      	bne.n	800eecc <rmw_uxrce_init_subscription_memory+0x20>
 800eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop

0800eeec <rmw_uxrce_init_node_memory>:
 800eeec:	b1e2      	cbz	r2, 800ef28 <rmw_uxrce_init_node_memory+0x3c>
 800eeee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef2:	7b05      	ldrb	r5, [r0, #12]
 800eef4:	4606      	mov	r6, r0
 800eef6:	b9ad      	cbnz	r5, 800ef24 <rmw_uxrce_init_node_memory+0x38>
 800eef8:	23a4      	movs	r3, #164	; 0xa4
 800eefa:	e9c0 5500 	strd	r5, r5, [r0]
 800eefe:	6083      	str	r3, [r0, #8]
 800ef00:	f240 1301 	movw	r3, #257	; 0x101
 800ef04:	4617      	mov	r7, r2
 800ef06:	8183      	strh	r3, [r0, #12]
 800ef08:	460c      	mov	r4, r1
 800ef0a:	46a8      	mov	r8, r5
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	4630      	mov	r0, r6
 800ef10:	3501      	adds	r5, #1
 800ef12:	f005 fd4d 	bl	80149b0 <put_memory>
 800ef16:	42af      	cmp	r7, r5
 800ef18:	60a4      	str	r4, [r4, #8]
 800ef1a:	f884 800c 	strb.w	r8, [r4, #12]
 800ef1e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800ef22:	d1f3      	bne.n	800ef0c <rmw_uxrce_init_node_memory+0x20>
 800ef24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop

0800ef2c <rmw_uxrce_init_session_memory>:
 800ef2c:	b1ea      	cbz	r2, 800ef6a <rmw_uxrce_init_session_memory+0x3e>
 800ef2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef32:	7b05      	ldrb	r5, [r0, #12]
 800ef34:	4606      	mov	r6, r0
 800ef36:	b9b5      	cbnz	r5, 800ef66 <rmw_uxrce_init_session_memory+0x3a>
 800ef38:	e9c0 5500 	strd	r5, r5, [r0]
 800ef3c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800ef40:	f240 1301 	movw	r3, #257	; 0x101
 800ef44:	4617      	mov	r7, r2
 800ef46:	f8c0 8008 	str.w	r8, [r0, #8]
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	8183      	strh	r3, [r0, #12]
 800ef4e:	46a9      	mov	r9, r5
 800ef50:	4621      	mov	r1, r4
 800ef52:	4630      	mov	r0, r6
 800ef54:	3501      	adds	r5, #1
 800ef56:	f005 fd2b 	bl	80149b0 <put_memory>
 800ef5a:	42af      	cmp	r7, r5
 800ef5c:	60a4      	str	r4, [r4, #8]
 800ef5e:	f884 900c 	strb.w	r9, [r4, #12]
 800ef62:	4444      	add	r4, r8
 800ef64:	d1f4      	bne.n	800ef50 <rmw_uxrce_init_session_memory+0x24>
 800ef66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef6a:	4770      	bx	lr

0800ef6c <rmw_uxrce_init_topic_memory>:
 800ef6c:	b1e2      	cbz	r2, 800efa8 <rmw_uxrce_init_topic_memory+0x3c>
 800ef6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	7b05      	ldrb	r5, [r0, #12]
 800ef74:	4606      	mov	r6, r0
 800ef76:	b9ad      	cbnz	r5, 800efa4 <rmw_uxrce_init_topic_memory+0x38>
 800ef78:	231c      	movs	r3, #28
 800ef7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef7e:	6083      	str	r3, [r0, #8]
 800ef80:	f240 1301 	movw	r3, #257	; 0x101
 800ef84:	4617      	mov	r7, r2
 800ef86:	8183      	strh	r3, [r0, #12]
 800ef88:	460c      	mov	r4, r1
 800ef8a:	46a8      	mov	r8, r5
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4630      	mov	r0, r6
 800ef90:	3501      	adds	r5, #1
 800ef92:	f005 fd0d 	bl	80149b0 <put_memory>
 800ef96:	42af      	cmp	r7, r5
 800ef98:	60a4      	str	r4, [r4, #8]
 800ef9a:	f884 800c 	strb.w	r8, [r4, #12]
 800ef9e:	f104 041c 	add.w	r4, r4, #28
 800efa2:	d1f3      	bne.n	800ef8c <rmw_uxrce_init_topic_memory+0x20>
 800efa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop

0800efac <rmw_uxrce_init_static_input_buffer_memory>:
 800efac:	b1ea      	cbz	r2, 800efea <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800efae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb2:	7b05      	ldrb	r5, [r0, #12]
 800efb4:	4606      	mov	r6, r0
 800efb6:	b9b5      	cbnz	r5, 800efe6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800efb8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800efbc:	e9c0 5500 	strd	r5, r5, [r0]
 800efc0:	6083      	str	r3, [r0, #8]
 800efc2:	f240 1301 	movw	r3, #257	; 0x101
 800efc6:	4617      	mov	r7, r2
 800efc8:	8183      	strh	r3, [r0, #12]
 800efca:	460c      	mov	r4, r1
 800efcc:	46a8      	mov	r8, r5
 800efce:	4621      	mov	r1, r4
 800efd0:	4630      	mov	r0, r6
 800efd2:	3501      	adds	r5, #1
 800efd4:	f005 fcec 	bl	80149b0 <put_memory>
 800efd8:	42af      	cmp	r7, r5
 800efda:	60a4      	str	r4, [r4, #8]
 800efdc:	f884 800c 	strb.w	r8, [r4, #12]
 800efe0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800efe4:	d1f3      	bne.n	800efce <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800efe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efea:	4770      	bx	lr

0800efec <rmw_uxrce_init_init_options_impl_memory>:
 800efec:	b1e2      	cbz	r2, 800f028 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800efee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff2:	7b05      	ldrb	r5, [r0, #12]
 800eff4:	4606      	mov	r6, r0
 800eff6:	b9ad      	cbnz	r5, 800f024 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800eff8:	232c      	movs	r3, #44	; 0x2c
 800effa:	e9c0 5500 	strd	r5, r5, [r0]
 800effe:	6083      	str	r3, [r0, #8]
 800f000:	f240 1301 	movw	r3, #257	; 0x101
 800f004:	4617      	mov	r7, r2
 800f006:	8183      	strh	r3, [r0, #12]
 800f008:	460c      	mov	r4, r1
 800f00a:	46a8      	mov	r8, r5
 800f00c:	4621      	mov	r1, r4
 800f00e:	4630      	mov	r0, r6
 800f010:	3501      	adds	r5, #1
 800f012:	f005 fccd 	bl	80149b0 <put_memory>
 800f016:	42af      	cmp	r7, r5
 800f018:	60a4      	str	r4, [r4, #8]
 800f01a:	f884 800c 	strb.w	r8, [r4, #12]
 800f01e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800f022:	d1f3      	bne.n	800f00c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop

0800f02c <rmw_uxrce_init_wait_set_memory>:
 800f02c:	b1e2      	cbz	r2, 800f068 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f032:	7b05      	ldrb	r5, [r0, #12]
 800f034:	4606      	mov	r6, r0
 800f036:	b9ad      	cbnz	r5, 800f064 <rmw_uxrce_init_wait_set_memory+0x38>
 800f038:	231c      	movs	r3, #28
 800f03a:	e9c0 5500 	strd	r5, r5, [r0]
 800f03e:	6083      	str	r3, [r0, #8]
 800f040:	f240 1301 	movw	r3, #257	; 0x101
 800f044:	4617      	mov	r7, r2
 800f046:	8183      	strh	r3, [r0, #12]
 800f048:	460c      	mov	r4, r1
 800f04a:	46a8      	mov	r8, r5
 800f04c:	4621      	mov	r1, r4
 800f04e:	4630      	mov	r0, r6
 800f050:	3501      	adds	r5, #1
 800f052:	f005 fcad 	bl	80149b0 <put_memory>
 800f056:	42af      	cmp	r7, r5
 800f058:	60a4      	str	r4, [r4, #8]
 800f05a:	f884 800c 	strb.w	r8, [r4, #12]
 800f05e:	f104 041c 	add.w	r4, r4, #28
 800f062:	d1f3      	bne.n	800f04c <rmw_uxrce_init_wait_set_memory+0x20>
 800f064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop

0800f06c <rmw_uxrce_init_guard_condition_memory>:
 800f06c:	b1e2      	cbz	r2, 800f0a8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f072:	7b05      	ldrb	r5, [r0, #12]
 800f074:	4606      	mov	r6, r0
 800f076:	b9ad      	cbnz	r5, 800f0a4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f078:	2320      	movs	r3, #32
 800f07a:	e9c0 5500 	strd	r5, r5, [r0]
 800f07e:	6083      	str	r3, [r0, #8]
 800f080:	f240 1301 	movw	r3, #257	; 0x101
 800f084:	4617      	mov	r7, r2
 800f086:	8183      	strh	r3, [r0, #12]
 800f088:	460c      	mov	r4, r1
 800f08a:	46a8      	mov	r8, r5
 800f08c:	4621      	mov	r1, r4
 800f08e:	4630      	mov	r0, r6
 800f090:	3501      	adds	r5, #1
 800f092:	f005 fc8d 	bl	80149b0 <put_memory>
 800f096:	42af      	cmp	r7, r5
 800f098:	60a4      	str	r4, [r4, #8]
 800f09a:	f884 800c 	strb.w	r8, [r4, #12]
 800f09e:	f104 0420 	add.w	r4, r4, #32
 800f0a2:	d1f3      	bne.n	800f08c <rmw_uxrce_init_guard_condition_memory+0x20>
 800f0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a8:	4770      	bx	lr
 800f0aa:	bf00      	nop

0800f0ac <rmw_uxrce_fini_session_memory>:
 800f0ac:	4601      	mov	r1, r0
 800f0ae:	4801      	ldr	r0, [pc, #4]	; (800f0b4 <rmw_uxrce_fini_session_memory+0x8>)
 800f0b0:	f005 bc7e 	b.w	80149b0 <put_memory>
 800f0b4:	2000e22c 	.word	0x2000e22c

0800f0b8 <rmw_uxrce_fini_node_memory>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	6800      	ldr	r0, [r0, #0]
 800f0be:	b128      	cbz	r0, 800f0cc <rmw_uxrce_fini_node_memory+0x14>
 800f0c0:	4b07      	ldr	r3, [pc, #28]	; (800f0e0 <rmw_uxrce_fini_node_memory+0x28>)
 800f0c2:	6819      	ldr	r1, [r3, #0]
 800f0c4:	f7f1 f884 	bl	80001d0 <strcmp>
 800f0c8:	b940      	cbnz	r0, 800f0dc <rmw_uxrce_fini_node_memory+0x24>
 800f0ca:	6020      	str	r0, [r4, #0]
 800f0cc:	6861      	ldr	r1, [r4, #4]
 800f0ce:	b129      	cbz	r1, 800f0dc <rmw_uxrce_fini_node_memory+0x24>
 800f0d0:	2500      	movs	r5, #0
 800f0d2:	4804      	ldr	r0, [pc, #16]	; (800f0e4 <rmw_uxrce_fini_node_memory+0x2c>)
 800f0d4:	610d      	str	r5, [r1, #16]
 800f0d6:	f005 fc6b 	bl	80149b0 <put_memory>
 800f0da:	6065      	str	r5, [r4, #4]
 800f0dc:	bd38      	pop	{r3, r4, r5, pc}
 800f0de:	bf00      	nop
 800f0e0:	08019a0c 	.word	0x08019a0c
 800f0e4:	2000e1fc 	.word	0x2000e1fc

0800f0e8 <rmw_uxrce_fini_publisher_memory>:
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	6800      	ldr	r0, [r0, #0]
 800f0ee:	b128      	cbz	r0, 800f0fc <rmw_uxrce_fini_publisher_memory+0x14>
 800f0f0:	4b06      	ldr	r3, [pc, #24]	; (800f10c <rmw_uxrce_fini_publisher_memory+0x24>)
 800f0f2:	6819      	ldr	r1, [r3, #0]
 800f0f4:	f7f1 f86c 	bl	80001d0 <strcmp>
 800f0f8:	b938      	cbnz	r0, 800f10a <rmw_uxrce_fini_publisher_memory+0x22>
 800f0fa:	6020      	str	r0, [r4, #0]
 800f0fc:	6861      	ldr	r1, [r4, #4]
 800f0fe:	b121      	cbz	r1, 800f10a <rmw_uxrce_fini_publisher_memory+0x22>
 800f100:	4803      	ldr	r0, [pc, #12]	; (800f110 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f102:	f005 fc55 	bl	80149b0 <put_memory>
 800f106:	2300      	movs	r3, #0
 800f108:	6063      	str	r3, [r4, #4]
 800f10a:	bd10      	pop	{r4, pc}
 800f10c:	08019a0c 	.word	0x08019a0c
 800f110:	2000e20c 	.word	0x2000e20c

0800f114 <rmw_uxrce_fini_subscription_memory>:
 800f114:	b510      	push	{r4, lr}
 800f116:	4604      	mov	r4, r0
 800f118:	6800      	ldr	r0, [r0, #0]
 800f11a:	b128      	cbz	r0, 800f128 <rmw_uxrce_fini_subscription_memory+0x14>
 800f11c:	4b06      	ldr	r3, [pc, #24]	; (800f138 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f11e:	6819      	ldr	r1, [r3, #0]
 800f120:	f7f1 f856 	bl	80001d0 <strcmp>
 800f124:	b938      	cbnz	r0, 800f136 <rmw_uxrce_fini_subscription_memory+0x22>
 800f126:	6020      	str	r0, [r4, #0]
 800f128:	6861      	ldr	r1, [r4, #4]
 800f12a:	b121      	cbz	r1, 800f136 <rmw_uxrce_fini_subscription_memory+0x22>
 800f12c:	4803      	ldr	r0, [pc, #12]	; (800f13c <rmw_uxrce_fini_subscription_memory+0x28>)
 800f12e:	f005 fc3f 	bl	80149b0 <put_memory>
 800f132:	2300      	movs	r3, #0
 800f134:	6063      	str	r3, [r4, #4]
 800f136:	bd10      	pop	{r4, pc}
 800f138:	08019a0c 	.word	0x08019a0c
 800f13c:	2000e24c 	.word	0x2000e24c

0800f140 <rmw_uxrce_fini_service_memory>:
 800f140:	b510      	push	{r4, lr}
 800f142:	4604      	mov	r4, r0
 800f144:	6800      	ldr	r0, [r0, #0]
 800f146:	b128      	cbz	r0, 800f154 <rmw_uxrce_fini_service_memory+0x14>
 800f148:	4b06      	ldr	r3, [pc, #24]	; (800f164 <rmw_uxrce_fini_service_memory+0x24>)
 800f14a:	6819      	ldr	r1, [r3, #0]
 800f14c:	f7f1 f840 	bl	80001d0 <strcmp>
 800f150:	b938      	cbnz	r0, 800f162 <rmw_uxrce_fini_service_memory+0x22>
 800f152:	6020      	str	r0, [r4, #0]
 800f154:	6861      	ldr	r1, [r4, #4]
 800f156:	b121      	cbz	r1, 800f162 <rmw_uxrce_fini_service_memory+0x22>
 800f158:	4803      	ldr	r0, [pc, #12]	; (800f168 <rmw_uxrce_fini_service_memory+0x28>)
 800f15a:	f005 fc29 	bl	80149b0 <put_memory>
 800f15e:	2300      	movs	r3, #0
 800f160:	6063      	str	r3, [r4, #4]
 800f162:	bd10      	pop	{r4, pc}
 800f164:	08019a0c 	.word	0x08019a0c
 800f168:	2000e21c 	.word	0x2000e21c

0800f16c <rmw_uxrce_fini_client_memory>:
 800f16c:	b510      	push	{r4, lr}
 800f16e:	4604      	mov	r4, r0
 800f170:	6800      	ldr	r0, [r0, #0]
 800f172:	b128      	cbz	r0, 800f180 <rmw_uxrce_fini_client_memory+0x14>
 800f174:	4b06      	ldr	r3, [pc, #24]	; (800f190 <rmw_uxrce_fini_client_memory+0x24>)
 800f176:	6819      	ldr	r1, [r3, #0]
 800f178:	f7f1 f82a 	bl	80001d0 <strcmp>
 800f17c:	b938      	cbnz	r0, 800f18e <rmw_uxrce_fini_client_memory+0x22>
 800f17e:	6020      	str	r0, [r4, #0]
 800f180:	6861      	ldr	r1, [r4, #4]
 800f182:	b121      	cbz	r1, 800f18e <rmw_uxrce_fini_client_memory+0x22>
 800f184:	4803      	ldr	r0, [pc, #12]	; (800f194 <rmw_uxrce_fini_client_memory+0x28>)
 800f186:	f005 fc13 	bl	80149b0 <put_memory>
 800f18a:	2300      	movs	r3, #0
 800f18c:	6063      	str	r3, [r4, #4]
 800f18e:	bd10      	pop	{r4, pc}
 800f190:	08019a0c 	.word	0x08019a0c
 800f194:	20009930 	.word	0x20009930

0800f198 <rmw_uxrce_fini_topic_memory>:
 800f198:	b510      	push	{r4, lr}
 800f19a:	4604      	mov	r4, r0
 800f19c:	4621      	mov	r1, r4
 800f19e:	4803      	ldr	r0, [pc, #12]	; (800f1ac <rmw_uxrce_fini_topic_memory+0x14>)
 800f1a0:	f005 fc06 	bl	80149b0 <put_memory>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	61a3      	str	r3, [r4, #24]
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	bf00      	nop
 800f1ac:	2000e25c 	.word	0x2000e25c

0800f1b0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	b530      	push	{r4, r5, lr}
 800f1b4:	4925      	ldr	r1, [pc, #148]	; (800f24c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f1b6:	680d      	ldr	r5, [r1, #0]
 800f1b8:	ac03      	add	r4, sp, #12
 800f1ba:	e884 000c 	stmia.w	r4, {r2, r3}
 800f1be:	461c      	mov	r4, r3
 800f1c0:	2d00      	cmp	r5, #0
 800f1c2:	d041      	beq.n	800f248 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f1c4:	462b      	mov	r3, r5
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	689a      	ldr	r2, [r3, #8]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800f1d0:	4290      	cmp	r0, r2
 800f1d2:	bf08      	it	eq
 800f1d4:	3101      	addeq	r1, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1f6      	bne.n	800f1c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f1da:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	d029      	beq.n	800f236 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f1e2:	d907      	bls.n	800f1f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1e4:	2b03      	cmp	r3, #3
 800f1e6:	d005      	beq.n	800f1f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ee:	4608      	mov	r0, r1
 800f1f0:	b002      	add	sp, #8
 800f1f2:	4770      	bx	lr
 800f1f4:	b314      	cbz	r4, 800f23c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1f6:	428c      	cmp	r4, r1
 800f1f8:	d820      	bhi.n	800f23c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1fa:	2d00      	cmp	r5, #0
 800f1fc:	d0f4      	beq.n	800f1e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f1fe:	2100      	movs	r1, #0
 800f200:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f204:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f208:	e002      	b.n	800f210 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800f20a:	686d      	ldr	r5, [r5, #4]
 800f20c:	2d00      	cmp	r5, #0
 800f20e:	d0ec      	beq.n	800f1ea <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f210:	68ab      	ldr	r3, [r5, #8]
 800f212:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800f216:	4290      	cmp	r0, r2
 800f218:	d1f7      	bne.n	800f20a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f21a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800f21e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800f222:	4562      	cmp	r2, ip
 800f224:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f228:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f22c:	daed      	bge.n	800f20a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f22e:	4694      	mov	ip, r2
 800f230:	461c      	mov	r4, r3
 800f232:	4629      	mov	r1, r5
 800f234:	e7e9      	b.n	800f20a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f236:	b10c      	cbz	r4, 800f23c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f238:	428c      	cmp	r4, r1
 800f23a:	d9d5      	bls.n	800f1e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f23c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f240:	4802      	ldr	r0, [pc, #8]	; (800f24c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f242:	b002      	add	sp, #8
 800f244:	f005 bba4 	b.w	8014990 <get_memory>
 800f248:	4629      	mov	r1, r5
 800f24a:	e7c6      	b.n	800f1da <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f24c:	2000e23c 	.word	0x2000e23c

0800f250 <run_xrce_session>:
 800f250:	b510      	push	{r4, lr}
 800f252:	788c      	ldrb	r4, [r1, #2]
 800f254:	b086      	sub	sp, #24
 800f256:	2c01      	cmp	r4, #1
 800f258:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f25c:	d00c      	beq.n	800f278 <run_xrce_session+0x28>
 800f25e:	4619      	mov	r1, r3
 800f260:	2301      	movs	r3, #1
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	f10d 020e 	add.w	r2, sp, #14
 800f268:	f10d 0317 	add.w	r3, sp, #23
 800f26c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f270:	f002 f826 	bl	80112c0 <uxr_run_session_until_all_status>
 800f274:	b006      	add	sp, #24
 800f276:	bd10      	pop	{r4, pc}
 800f278:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f27c:	f001 fc74 	bl	8010b68 <uxr_flash_output_streams>
 800f280:	4620      	mov	r0, r4
 800f282:	b006      	add	sp, #24
 800f284:	bd10      	pop	{r4, pc}
 800f286:	bf00      	nop

0800f288 <convert_qos_profile>:
 800f288:	7a4a      	ldrb	r2, [r1, #9]
 800f28a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f28e:	2a02      	cmp	r2, #2
 800f290:	bf18      	it	ne
 800f292:	2200      	movne	r2, #0
 800f294:	7002      	strb	r2, [r0, #0]
 800f296:	780a      	ldrb	r2, [r1, #0]
 800f298:	8889      	ldrh	r1, [r1, #4]
 800f29a:	8081      	strh	r1, [r0, #4]
 800f29c:	f1ac 0c02 	sub.w	ip, ip, #2
 800f2a0:	f1a2 0202 	sub.w	r2, r2, #2
 800f2a4:	fabc fc8c 	clz	ip, ip
 800f2a8:	fab2 f282 	clz	r2, r2
 800f2ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f2b0:	0952      	lsrs	r2, r2, #5
 800f2b2:	f880 c001 	strb.w	ip, [r0, #1]
 800f2b6:	7082      	strb	r2, [r0, #2]
 800f2b8:	4770      	bx	lr
 800f2ba:	bf00      	nop

0800f2bc <generate_type_name>:
 800f2bc:	b530      	push	{r4, r5, lr}
 800f2be:	2300      	movs	r3, #0
 800f2c0:	700b      	strb	r3, [r1, #0]
 800f2c2:	6803      	ldr	r3, [r0, #0]
 800f2c4:	b087      	sub	sp, #28
 800f2c6:	4614      	mov	r4, r2
 800f2c8:	b1d3      	cbz	r3, 800f300 <generate_type_name+0x44>
 800f2ca:	4a0f      	ldr	r2, [pc, #60]	; (800f308 <generate_type_name+0x4c>)
 800f2cc:	4615      	mov	r5, r2
 800f2ce:	9203      	str	r2, [sp, #12]
 800f2d0:	9500      	str	r5, [sp, #0]
 800f2d2:	6842      	ldr	r2, [r0, #4]
 800f2d4:	480d      	ldr	r0, [pc, #52]	; (800f30c <generate_type_name+0x50>)
 800f2d6:	9001      	str	r0, [sp, #4]
 800f2d8:	4608      	mov	r0, r1
 800f2da:	490d      	ldr	r1, [pc, #52]	; (800f310 <generate_type_name+0x54>)
 800f2dc:	9204      	str	r2, [sp, #16]
 800f2de:	9105      	str	r1, [sp, #20]
 800f2e0:	9102      	str	r1, [sp, #8]
 800f2e2:	4a0c      	ldr	r2, [pc, #48]	; (800f314 <generate_type_name+0x58>)
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	f008 fe71 	bl	8017fcc <sniprintf>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	db05      	blt.n	800f2fa <generate_type_name+0x3e>
 800f2ee:	4284      	cmp	r4, r0
 800f2f0:	bfd4      	ite	le
 800f2f2:	2000      	movle	r0, #0
 800f2f4:	2001      	movgt	r0, #1
 800f2f6:	b007      	add	sp, #28
 800f2f8:	bd30      	pop	{r4, r5, pc}
 800f2fa:	2000      	movs	r0, #0
 800f2fc:	b007      	add	sp, #28
 800f2fe:	bd30      	pop	{r4, r5, pc}
 800f300:	4b05      	ldr	r3, [pc, #20]	; (800f318 <generate_type_name+0x5c>)
 800f302:	4a01      	ldr	r2, [pc, #4]	; (800f308 <generate_type_name+0x4c>)
 800f304:	461d      	mov	r5, r3
 800f306:	e7e2      	b.n	800f2ce <generate_type_name+0x12>
 800f308:	0801938c 	.word	0x0801938c
 800f30c:	080193a4 	.word	0x080193a4
 800f310:	080193a0 	.word	0x080193a0
 800f314:	08019390 	.word	0x08019390
 800f318:	080197e4 	.word	0x080197e4

0800f31c <generate_topic_name>:
 800f31c:	b510      	push	{r4, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	4614      	mov	r4, r2
 800f322:	9000      	str	r0, [sp, #0]
 800f324:	4b08      	ldr	r3, [pc, #32]	; (800f348 <generate_topic_name+0x2c>)
 800f326:	4a09      	ldr	r2, [pc, #36]	; (800f34c <generate_topic_name+0x30>)
 800f328:	4608      	mov	r0, r1
 800f32a:	4621      	mov	r1, r4
 800f32c:	f008 fe4e 	bl	8017fcc <sniprintf>
 800f330:	2800      	cmp	r0, #0
 800f332:	db05      	blt.n	800f340 <generate_topic_name+0x24>
 800f334:	4284      	cmp	r4, r0
 800f336:	bfd4      	ite	le
 800f338:	2000      	movle	r0, #0
 800f33a:	2001      	movgt	r0, #1
 800f33c:	b002      	add	sp, #8
 800f33e:	bd10      	pop	{r4, pc}
 800f340:	2000      	movs	r0, #0
 800f342:	b002      	add	sp, #8
 800f344:	bd10      	pop	{r4, pc}
 800f346:	bf00      	nop
 800f348:	080193b0 	.word	0x080193b0
 800f34c:	080193a8 	.word	0x080193a8

0800f350 <is_uxrce_rmw_identifier_valid>:
 800f350:	b510      	push	{r4, lr}
 800f352:	4604      	mov	r4, r0
 800f354:	b140      	cbz	r0, 800f368 <is_uxrce_rmw_identifier_valid+0x18>
 800f356:	f005 fb83 	bl	8014a60 <rmw_get_implementation_identifier>
 800f35a:	4601      	mov	r1, r0
 800f35c:	4620      	mov	r0, r4
 800f35e:	f7f0 ff37 	bl	80001d0 <strcmp>
 800f362:	fab0 f080 	clz	r0, r0
 800f366:	0940      	lsrs	r0, r0, #5
 800f368:	bd10      	pop	{r4, pc}
 800f36a:	bf00      	nop

0800f36c <get_message_typesupport_handle>:
 800f36c:	6883      	ldr	r3, [r0, #8]
 800f36e:	4718      	bx	r3

0800f370 <get_message_typesupport_handle_function>:
 800f370:	b510      	push	{r4, lr}
 800f372:	4604      	mov	r4, r0
 800f374:	6800      	ldr	r0, [r0, #0]
 800f376:	f7f0 ff2b 	bl	80001d0 <strcmp>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	bf0c      	ite	eq
 800f37e:	4620      	moveq	r0, r4
 800f380:	2000      	movne	r0, #0
 800f382:	bd10      	pop	{r4, pc}

0800f384 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f384:	4b04      	ldr	r3, [pc, #16]	; (800f398 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	b10a      	cbz	r2, 800f38e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f38a:	4803      	ldr	r0, [pc, #12]	; (800f398 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f38c:	4770      	bx	lr
 800f38e:	4a03      	ldr	r2, [pc, #12]	; (800f39c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f390:	4801      	ldr	r0, [pc, #4]	; (800f398 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f392:	6812      	ldr	r2, [r2, #0]
 800f394:	601a      	str	r2, [r3, #0]
 800f396:	4770      	bx	lr
 800f398:	20000050 	.word	0x20000050
 800f39c:	200000cc 	.word	0x200000cc

0800f3a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f3a0:	4a02      	ldr	r2, [pc, #8]	; (800f3ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800f3a2:	4b03      	ldr	r3, [pc, #12]	; (800f3b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800f3a4:	6812      	ldr	r2, [r2, #0]
 800f3a6:	601a      	str	r2, [r3, #0]
 800f3a8:	4770      	bx	lr
 800f3aa:	bf00      	nop
 800f3ac:	200000cc 	.word	0x200000cc
 800f3b0:	20000050 	.word	0x20000050

0800f3b4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f3b4:	f006 b92a 	b.w	801560c <std_msgs__msg__Int32__init>

0800f3b8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f3b8:	f006 b92c 	b.w	8015614 <std_msgs__msg__Int32__fini>

0800f3bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f3bc:	4b04      	ldr	r3, [pc, #16]	; (800f3d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	b10a      	cbz	r2, 800f3c6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f3c2:	4803      	ldr	r0, [pc, #12]	; (800f3d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f3c4:	4770      	bx	lr
 800f3c6:	4a03      	ldr	r2, [pc, #12]	; (800f3d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f3c8:	4801      	ldr	r0, [pc, #4]	; (800f3d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f3ca:	6812      	ldr	r2, [r2, #0]
 800f3cc:	601a      	str	r2, [r3, #0]
 800f3ce:	4770      	bx	lr
 800f3d0:	20000098 	.word	0x20000098
 800f3d4:	200000d0 	.word	0x200000d0

0800f3d8 <_Int32__max_serialized_size>:
 800f3d8:	b508      	push	{r3, lr}
 800f3da:	2104      	movs	r1, #4
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f001 f807 	bl	80103f0 <ucdr_alignment>
 800f3e2:	3004      	adds	r0, #4
 800f3e4:	bd08      	pop	{r3, pc}
 800f3e6:	bf00      	nop

0800f3e8 <_Int32__cdr_deserialize>:
 800f3e8:	b109      	cbz	r1, 800f3ee <_Int32__cdr_deserialize+0x6>
 800f3ea:	f000 bf19 	b.w	8010220 <ucdr_deserialize_int32_t>
 800f3ee:	4608      	mov	r0, r1
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop

0800f3f4 <get_serialized_size_std_msgs__msg__Int32>:
 800f3f4:	b138      	cbz	r0, 800f406 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800f3f6:	b508      	push	{r3, lr}
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	2104      	movs	r1, #4
 800f3fe:	f000 fff7 	bl	80103f0 <ucdr_alignment>
 800f402:	3004      	adds	r0, #4
 800f404:	bd08      	pop	{r3, pc}
 800f406:	4770      	bx	lr

0800f408 <_Int32__cdr_serialize>:
 800f408:	460a      	mov	r2, r1
 800f40a:	b118      	cbz	r0, 800f414 <_Int32__cdr_serialize+0xc>
 800f40c:	6801      	ldr	r1, [r0, #0]
 800f40e:	4610      	mov	r0, r2
 800f410:	f000 be6e 	b.w	80100f0 <ucdr_serialize_int32_t>
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop

0800f418 <_Int32__get_serialized_size>:
 800f418:	b130      	cbz	r0, 800f428 <_Int32__get_serialized_size+0x10>
 800f41a:	b508      	push	{r3, lr}
 800f41c:	2104      	movs	r1, #4
 800f41e:	2000      	movs	r0, #0
 800f420:	f000 ffe6 	bl	80103f0 <ucdr_alignment>
 800f424:	3004      	adds	r0, #4
 800f426:	bd08      	pop	{r3, pc}
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop

0800f42c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f42c:	4800      	ldr	r0, [pc, #0]	; (800f430 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f42e:	4770      	bx	lr
 800f430:	200000a4 	.word	0x200000a4

0800f434 <ucdr_serialize_bool>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	460d      	mov	r5, r1
 800f438:	2101      	movs	r1, #1
 800f43a:	4604      	mov	r4, r0
 800f43c:	f000 ff8c 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f440:	b148      	cbz	r0, 800f456 <ucdr_serialize_bool+0x22>
 800f442:	68a3      	ldr	r3, [r4, #8]
 800f444:	701d      	strb	r5, [r3, #0]
 800f446:	68a2      	ldr	r2, [r4, #8]
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	2101      	movs	r1, #1
 800f44c:	440a      	add	r2, r1
 800f44e:	440b      	add	r3, r1
 800f450:	60a2      	str	r2, [r4, #8]
 800f452:	6123      	str	r3, [r4, #16]
 800f454:	7561      	strb	r1, [r4, #21]
 800f456:	7da0      	ldrb	r0, [r4, #22]
 800f458:	f080 0001 	eor.w	r0, r0, #1
 800f45c:	bd38      	pop	{r3, r4, r5, pc}
 800f45e:	bf00      	nop

0800f460 <ucdr_deserialize_bool>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	460d      	mov	r5, r1
 800f464:	2101      	movs	r1, #1
 800f466:	4604      	mov	r4, r0
 800f468:	f000 ff76 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f46c:	b160      	cbz	r0, 800f488 <ucdr_deserialize_bool+0x28>
 800f46e:	68a2      	ldr	r2, [r4, #8]
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f476:	3900      	subs	r1, #0
 800f478:	bf18      	it	ne
 800f47a:	2101      	movne	r1, #1
 800f47c:	7029      	strb	r1, [r5, #0]
 800f47e:	3301      	adds	r3, #1
 800f480:	2101      	movs	r1, #1
 800f482:	60a2      	str	r2, [r4, #8]
 800f484:	6123      	str	r3, [r4, #16]
 800f486:	7561      	strb	r1, [r4, #21]
 800f488:	7da0      	ldrb	r0, [r4, #22]
 800f48a:	f080 0001 	eor.w	r0, r0, #1
 800f48e:	bd38      	pop	{r3, r4, r5, pc}

0800f490 <ucdr_serialize_uint8_t>:
 800f490:	b538      	push	{r3, r4, r5, lr}
 800f492:	460d      	mov	r5, r1
 800f494:	2101      	movs	r1, #1
 800f496:	4604      	mov	r4, r0
 800f498:	f000 ff5e 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f49c:	b148      	cbz	r0, 800f4b2 <ucdr_serialize_uint8_t+0x22>
 800f49e:	68a3      	ldr	r3, [r4, #8]
 800f4a0:	701d      	strb	r5, [r3, #0]
 800f4a2:	68a2      	ldr	r2, [r4, #8]
 800f4a4:	6923      	ldr	r3, [r4, #16]
 800f4a6:	2101      	movs	r1, #1
 800f4a8:	440a      	add	r2, r1
 800f4aa:	440b      	add	r3, r1
 800f4ac:	60a2      	str	r2, [r4, #8]
 800f4ae:	6123      	str	r3, [r4, #16]
 800f4b0:	7561      	strb	r1, [r4, #21]
 800f4b2:	7da0      	ldrb	r0, [r4, #22]
 800f4b4:	f080 0001 	eor.w	r0, r0, #1
 800f4b8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ba:	bf00      	nop

0800f4bc <ucdr_deserialize_uint8_t>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	460d      	mov	r5, r1
 800f4c0:	2101      	movs	r1, #1
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	f000 ff48 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f4c8:	b150      	cbz	r0, 800f4e0 <ucdr_deserialize_uint8_t+0x24>
 800f4ca:	68a3      	ldr	r3, [r4, #8]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	702b      	strb	r3, [r5, #0]
 800f4d0:	68a2      	ldr	r2, [r4, #8]
 800f4d2:	6923      	ldr	r3, [r4, #16]
 800f4d4:	2101      	movs	r1, #1
 800f4d6:	440a      	add	r2, r1
 800f4d8:	440b      	add	r3, r1
 800f4da:	60a2      	str	r2, [r4, #8]
 800f4dc:	6123      	str	r3, [r4, #16]
 800f4de:	7561      	strb	r1, [r4, #21]
 800f4e0:	7da0      	ldrb	r0, [r4, #22]
 800f4e2:	f080 0001 	eor.w	r0, r0, #1
 800f4e6:	bd38      	pop	{r3, r4, r5, pc}

0800f4e8 <ucdr_serialize_uint16_t>:
 800f4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ec:	b082      	sub	sp, #8
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	2102      	movs	r1, #2
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f4f8:	f000 ff82 	bl	8010400 <ucdr_buffer_alignment>
 800f4fc:	4601      	mov	r1, r0
 800f4fe:	4620      	mov	r0, r4
 800f500:	7d67      	ldrb	r7, [r4, #21]
 800f502:	f000 ffc1 	bl	8010488 <ucdr_advance_buffer>
 800f506:	2102      	movs	r1, #2
 800f508:	4620      	mov	r0, r4
 800f50a:	f000 ff19 	bl	8010340 <ucdr_check_buffer_available_for>
 800f50e:	bb78      	cbnz	r0, 800f570 <ucdr_serialize_uint16_t+0x88>
 800f510:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f514:	42ab      	cmp	r3, r5
 800f516:	d926      	bls.n	800f566 <ucdr_serialize_uint16_t+0x7e>
 800f518:	1b5e      	subs	r6, r3, r5
 800f51a:	60a3      	str	r3, [r4, #8]
 800f51c:	6923      	ldr	r3, [r4, #16]
 800f51e:	f1c6 0802 	rsb	r8, r6, #2
 800f522:	4433      	add	r3, r6
 800f524:	6123      	str	r3, [r4, #16]
 800f526:	4641      	mov	r1, r8
 800f528:	4620      	mov	r0, r4
 800f52a:	f000 ff15 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f52e:	2800      	cmp	r0, #0
 800f530:	d03b      	beq.n	800f5aa <ucdr_serialize_uint16_t+0xc2>
 800f532:	7d23      	ldrb	r3, [r4, #20]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d04a      	beq.n	800f5ce <ucdr_serialize_uint16_t+0xe6>
 800f538:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f53c:	702b      	strb	r3, [r5, #0]
 800f53e:	2e00      	cmp	r6, #0
 800f540:	d040      	beq.n	800f5c4 <ucdr_serialize_uint16_t+0xdc>
 800f542:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f546:	706b      	strb	r3, [r5, #1]
 800f548:	6923      	ldr	r3, [r4, #16]
 800f54a:	68a2      	ldr	r2, [r4, #8]
 800f54c:	7da0      	ldrb	r0, [r4, #22]
 800f54e:	3302      	adds	r3, #2
 800f550:	1b9e      	subs	r6, r3, r6
 800f552:	4442      	add	r2, r8
 800f554:	2302      	movs	r3, #2
 800f556:	f080 0001 	eor.w	r0, r0, #1
 800f55a:	60a2      	str	r2, [r4, #8]
 800f55c:	6126      	str	r6, [r4, #16]
 800f55e:	7563      	strb	r3, [r4, #21]
 800f560:	b002      	add	sp, #8
 800f562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f566:	2102      	movs	r1, #2
 800f568:	4620      	mov	r0, r4
 800f56a:	f000 fef5 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f56e:	b190      	cbz	r0, 800f596 <ucdr_serialize_uint16_t+0xae>
 800f570:	7d23      	ldrb	r3, [r4, #20]
 800f572:	2b01      	cmp	r3, #1
 800f574:	68a3      	ldr	r3, [r4, #8]
 800f576:	d014      	beq.n	800f5a2 <ucdr_serialize_uint16_t+0xba>
 800f578:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f57c:	701a      	strb	r2, [r3, #0]
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f584:	705a      	strb	r2, [r3, #1]
 800f586:	68a2      	ldr	r2, [r4, #8]
 800f588:	6923      	ldr	r3, [r4, #16]
 800f58a:	3202      	adds	r2, #2
 800f58c:	3302      	adds	r3, #2
 800f58e:	2102      	movs	r1, #2
 800f590:	60a2      	str	r2, [r4, #8]
 800f592:	6123      	str	r3, [r4, #16]
 800f594:	7561      	strb	r1, [r4, #21]
 800f596:	7da0      	ldrb	r0, [r4, #22]
 800f598:	f080 0001 	eor.w	r0, r0, #1
 800f59c:	b002      	add	sp, #8
 800f59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f5a6:	801a      	strh	r2, [r3, #0]
 800f5a8:	e7ed      	b.n	800f586 <ucdr_serialize_uint16_t+0x9e>
 800f5aa:	68a2      	ldr	r2, [r4, #8]
 800f5ac:	6923      	ldr	r3, [r4, #16]
 800f5ae:	7da0      	ldrb	r0, [r4, #22]
 800f5b0:	7567      	strb	r7, [r4, #21]
 800f5b2:	1b92      	subs	r2, r2, r6
 800f5b4:	1b9b      	subs	r3, r3, r6
 800f5b6:	f080 0001 	eor.w	r0, r0, #1
 800f5ba:	60a2      	str	r2, [r4, #8]
 800f5bc:	6123      	str	r3, [r4, #16]
 800f5be:	b002      	add	sp, #8
 800f5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5c4:	68a3      	ldr	r3, [r4, #8]
 800f5c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5ca:	701a      	strb	r2, [r3, #0]
 800f5cc:	e7bc      	b.n	800f548 <ucdr_serialize_uint16_t+0x60>
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	f10d 0506 	add.w	r5, sp, #6
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	4632      	mov	r2, r6
 800f5d8:	f008 fe8a 	bl	80182f0 <memcpy>
 800f5dc:	68a0      	ldr	r0, [r4, #8]
 800f5de:	4642      	mov	r2, r8
 800f5e0:	19a9      	adds	r1, r5, r6
 800f5e2:	f008 fe85 	bl	80182f0 <memcpy>
 800f5e6:	e7af      	b.n	800f548 <ucdr_serialize_uint16_t+0x60>

0800f5e8 <ucdr_serialize_endian_uint16_t>:
 800f5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5ec:	b083      	sub	sp, #12
 800f5ee:	460d      	mov	r5, r1
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f5f8:	f000 ff02 	bl	8010400 <ucdr_buffer_alignment>
 800f5fc:	4601      	mov	r1, r0
 800f5fe:	4620      	mov	r0, r4
 800f600:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f604:	f000 ff40 	bl	8010488 <ucdr_advance_buffer>
 800f608:	2102      	movs	r1, #2
 800f60a:	4620      	mov	r0, r4
 800f60c:	f000 fe98 	bl	8010340 <ucdr_check_buffer_available_for>
 800f610:	bb70      	cbnz	r0, 800f670 <ucdr_serialize_endian_uint16_t+0x88>
 800f612:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f616:	42be      	cmp	r6, r7
 800f618:	d925      	bls.n	800f666 <ucdr_serialize_endian_uint16_t+0x7e>
 800f61a:	6923      	ldr	r3, [r4, #16]
 800f61c:	60a6      	str	r6, [r4, #8]
 800f61e:	1bf6      	subs	r6, r6, r7
 800f620:	4433      	add	r3, r6
 800f622:	f1c6 0902 	rsb	r9, r6, #2
 800f626:	6123      	str	r3, [r4, #16]
 800f628:	4649      	mov	r1, r9
 800f62a:	4620      	mov	r0, r4
 800f62c:	f000 fe94 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f630:	2800      	cmp	r0, #0
 800f632:	d039      	beq.n	800f6a8 <ucdr_serialize_endian_uint16_t+0xc0>
 800f634:	2d01      	cmp	r5, #1
 800f636:	d04a      	beq.n	800f6ce <ucdr_serialize_endian_uint16_t+0xe6>
 800f638:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f63c:	703b      	strb	r3, [r7, #0]
 800f63e:	2e00      	cmp	r6, #0
 800f640:	d040      	beq.n	800f6c4 <ucdr_serialize_endian_uint16_t+0xdc>
 800f642:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f646:	707b      	strb	r3, [r7, #1]
 800f648:	6923      	ldr	r3, [r4, #16]
 800f64a:	68a2      	ldr	r2, [r4, #8]
 800f64c:	7da0      	ldrb	r0, [r4, #22]
 800f64e:	3302      	adds	r3, #2
 800f650:	444a      	add	r2, r9
 800f652:	1b9b      	subs	r3, r3, r6
 800f654:	2102      	movs	r1, #2
 800f656:	f080 0001 	eor.w	r0, r0, #1
 800f65a:	60a2      	str	r2, [r4, #8]
 800f65c:	6123      	str	r3, [r4, #16]
 800f65e:	7561      	strb	r1, [r4, #21]
 800f660:	b003      	add	sp, #12
 800f662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f666:	2102      	movs	r1, #2
 800f668:	4620      	mov	r0, r4
 800f66a:	f000 fe75 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f66e:	b188      	cbz	r0, 800f694 <ucdr_serialize_endian_uint16_t+0xac>
 800f670:	2d01      	cmp	r5, #1
 800f672:	68a3      	ldr	r3, [r4, #8]
 800f674:	d014      	beq.n	800f6a0 <ucdr_serialize_endian_uint16_t+0xb8>
 800f676:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f67a:	701a      	strb	r2, [r3, #0]
 800f67c:	68a3      	ldr	r3, [r4, #8]
 800f67e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f682:	705a      	strb	r2, [r3, #1]
 800f684:	68a2      	ldr	r2, [r4, #8]
 800f686:	6923      	ldr	r3, [r4, #16]
 800f688:	3202      	adds	r2, #2
 800f68a:	3302      	adds	r3, #2
 800f68c:	2102      	movs	r1, #2
 800f68e:	60a2      	str	r2, [r4, #8]
 800f690:	6123      	str	r3, [r4, #16]
 800f692:	7561      	strb	r1, [r4, #21]
 800f694:	7da0      	ldrb	r0, [r4, #22]
 800f696:	f080 0001 	eor.w	r0, r0, #1
 800f69a:	b003      	add	sp, #12
 800f69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f6a4:	801a      	strh	r2, [r3, #0]
 800f6a6:	e7ed      	b.n	800f684 <ucdr_serialize_endian_uint16_t+0x9c>
 800f6a8:	68a2      	ldr	r2, [r4, #8]
 800f6aa:	6923      	ldr	r3, [r4, #16]
 800f6ac:	7da0      	ldrb	r0, [r4, #22]
 800f6ae:	f884 8015 	strb.w	r8, [r4, #21]
 800f6b2:	1b92      	subs	r2, r2, r6
 800f6b4:	1b9b      	subs	r3, r3, r6
 800f6b6:	f080 0001 	eor.w	r0, r0, #1
 800f6ba:	60a2      	str	r2, [r4, #8]
 800f6bc:	6123      	str	r3, [r4, #16]
 800f6be:	b003      	add	sp, #12
 800f6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6c4:	68a3      	ldr	r3, [r4, #8]
 800f6c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6ca:	701a      	strb	r2, [r3, #0]
 800f6cc:	e7bc      	b.n	800f648 <ucdr_serialize_endian_uint16_t+0x60>
 800f6ce:	f10d 0506 	add.w	r5, sp, #6
 800f6d2:	4629      	mov	r1, r5
 800f6d4:	4632      	mov	r2, r6
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	f008 fe0a 	bl	80182f0 <memcpy>
 800f6dc:	68a0      	ldr	r0, [r4, #8]
 800f6de:	464a      	mov	r2, r9
 800f6e0:	19a9      	adds	r1, r5, r6
 800f6e2:	f008 fe05 	bl	80182f0 <memcpy>
 800f6e6:	e7af      	b.n	800f648 <ucdr_serialize_endian_uint16_t+0x60>

0800f6e8 <ucdr_deserialize_uint16_t>:
 800f6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6ec:	460d      	mov	r5, r1
 800f6ee:	2102      	movs	r1, #2
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	f000 fe85 	bl	8010400 <ucdr_buffer_alignment>
 800f6f6:	4601      	mov	r1, r0
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f6fe:	f000 fec3 	bl	8010488 <ucdr_advance_buffer>
 800f702:	2102      	movs	r1, #2
 800f704:	4620      	mov	r0, r4
 800f706:	f000 fe1b 	bl	8010340 <ucdr_check_buffer_available_for>
 800f70a:	bb60      	cbnz	r0, 800f766 <ucdr_deserialize_uint16_t+0x7e>
 800f70c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f710:	42be      	cmp	r6, r7
 800f712:	d923      	bls.n	800f75c <ucdr_deserialize_uint16_t+0x74>
 800f714:	6923      	ldr	r3, [r4, #16]
 800f716:	60a6      	str	r6, [r4, #8]
 800f718:	1bf6      	subs	r6, r6, r7
 800f71a:	4433      	add	r3, r6
 800f71c:	f1c6 0902 	rsb	r9, r6, #2
 800f720:	6123      	str	r3, [r4, #16]
 800f722:	4649      	mov	r1, r9
 800f724:	4620      	mov	r0, r4
 800f726:	f000 fe17 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d034      	beq.n	800f798 <ucdr_deserialize_uint16_t+0xb0>
 800f72e:	7d23      	ldrb	r3, [r4, #20]
 800f730:	2b01      	cmp	r3, #1
 800f732:	d042      	beq.n	800f7ba <ucdr_deserialize_uint16_t+0xd2>
 800f734:	787b      	ldrb	r3, [r7, #1]
 800f736:	702b      	strb	r3, [r5, #0]
 800f738:	2e00      	cmp	r6, #0
 800f73a:	d03a      	beq.n	800f7b2 <ucdr_deserialize_uint16_t+0xca>
 800f73c:	783b      	ldrb	r3, [r7, #0]
 800f73e:	706b      	strb	r3, [r5, #1]
 800f740:	6923      	ldr	r3, [r4, #16]
 800f742:	68a2      	ldr	r2, [r4, #8]
 800f744:	7da0      	ldrb	r0, [r4, #22]
 800f746:	2102      	movs	r1, #2
 800f748:	3302      	adds	r3, #2
 800f74a:	444a      	add	r2, r9
 800f74c:	1b9b      	subs	r3, r3, r6
 800f74e:	7561      	strb	r1, [r4, #21]
 800f750:	60a2      	str	r2, [r4, #8]
 800f752:	6123      	str	r3, [r4, #16]
 800f754:	f080 0001 	eor.w	r0, r0, #1
 800f758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f75c:	2102      	movs	r1, #2
 800f75e:	4620      	mov	r0, r4
 800f760:	f000 fdfa 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f764:	b180      	cbz	r0, 800f788 <ucdr_deserialize_uint16_t+0xa0>
 800f766:	7d23      	ldrb	r3, [r4, #20]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	68a3      	ldr	r3, [r4, #8]
 800f76c:	d011      	beq.n	800f792 <ucdr_deserialize_uint16_t+0xaa>
 800f76e:	785b      	ldrb	r3, [r3, #1]
 800f770:	702b      	strb	r3, [r5, #0]
 800f772:	68a3      	ldr	r3, [r4, #8]
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	706b      	strb	r3, [r5, #1]
 800f778:	68a2      	ldr	r2, [r4, #8]
 800f77a:	6923      	ldr	r3, [r4, #16]
 800f77c:	3202      	adds	r2, #2
 800f77e:	3302      	adds	r3, #2
 800f780:	2102      	movs	r1, #2
 800f782:	60a2      	str	r2, [r4, #8]
 800f784:	6123      	str	r3, [r4, #16]
 800f786:	7561      	strb	r1, [r4, #21]
 800f788:	7da0      	ldrb	r0, [r4, #22]
 800f78a:	f080 0001 	eor.w	r0, r0, #1
 800f78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f792:	881b      	ldrh	r3, [r3, #0]
 800f794:	802b      	strh	r3, [r5, #0]
 800f796:	e7ef      	b.n	800f778 <ucdr_deserialize_uint16_t+0x90>
 800f798:	68a2      	ldr	r2, [r4, #8]
 800f79a:	6923      	ldr	r3, [r4, #16]
 800f79c:	7da0      	ldrb	r0, [r4, #22]
 800f79e:	f884 8015 	strb.w	r8, [r4, #21]
 800f7a2:	1b92      	subs	r2, r2, r6
 800f7a4:	1b9b      	subs	r3, r3, r6
 800f7a6:	60a2      	str	r2, [r4, #8]
 800f7a8:	6123      	str	r3, [r4, #16]
 800f7aa:	f080 0001 	eor.w	r0, r0, #1
 800f7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b2:	68a3      	ldr	r3, [r4, #8]
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	706b      	strb	r3, [r5, #1]
 800f7b8:	e7c2      	b.n	800f740 <ucdr_deserialize_uint16_t+0x58>
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	4632      	mov	r2, r6
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f008 fd96 	bl	80182f0 <memcpy>
 800f7c4:	68a1      	ldr	r1, [r4, #8]
 800f7c6:	464a      	mov	r2, r9
 800f7c8:	19a8      	adds	r0, r5, r6
 800f7ca:	f008 fd91 	bl	80182f0 <memcpy>
 800f7ce:	e7b7      	b.n	800f740 <ucdr_deserialize_uint16_t+0x58>

0800f7d0 <ucdr_deserialize_endian_uint16_t>:
 800f7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d4:	460e      	mov	r6, r1
 800f7d6:	2102      	movs	r1, #2
 800f7d8:	4604      	mov	r4, r0
 800f7da:	4615      	mov	r5, r2
 800f7dc:	f000 fe10 	bl	8010400 <ucdr_buffer_alignment>
 800f7e0:	4601      	mov	r1, r0
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f7e8:	f000 fe4e 	bl	8010488 <ucdr_advance_buffer>
 800f7ec:	2102      	movs	r1, #2
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	f000 fda6 	bl	8010340 <ucdr_check_buffer_available_for>
 800f7f4:	bb70      	cbnz	r0, 800f854 <ucdr_deserialize_endian_uint16_t+0x84>
 800f7f6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f7fa:	4547      	cmp	r7, r8
 800f7fc:	d925      	bls.n	800f84a <ucdr_deserialize_endian_uint16_t+0x7a>
 800f7fe:	6923      	ldr	r3, [r4, #16]
 800f800:	60a7      	str	r7, [r4, #8]
 800f802:	eba7 0708 	sub.w	r7, r7, r8
 800f806:	443b      	add	r3, r7
 800f808:	f1c7 0a02 	rsb	sl, r7, #2
 800f80c:	6123      	str	r3, [r4, #16]
 800f80e:	4651      	mov	r1, sl
 800f810:	4620      	mov	r0, r4
 800f812:	f000 fda1 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f816:	2800      	cmp	r0, #0
 800f818:	d034      	beq.n	800f884 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f81a:	2e01      	cmp	r6, #1
 800f81c:	d043      	beq.n	800f8a6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f81e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f822:	702b      	strb	r3, [r5, #0]
 800f824:	2f00      	cmp	r7, #0
 800f826:	d03a      	beq.n	800f89e <ucdr_deserialize_endian_uint16_t+0xce>
 800f828:	f898 3000 	ldrb.w	r3, [r8]
 800f82c:	706b      	strb	r3, [r5, #1]
 800f82e:	6923      	ldr	r3, [r4, #16]
 800f830:	68a2      	ldr	r2, [r4, #8]
 800f832:	7da0      	ldrb	r0, [r4, #22]
 800f834:	2102      	movs	r1, #2
 800f836:	3302      	adds	r3, #2
 800f838:	4452      	add	r2, sl
 800f83a:	1bdb      	subs	r3, r3, r7
 800f83c:	7561      	strb	r1, [r4, #21]
 800f83e:	60a2      	str	r2, [r4, #8]
 800f840:	6123      	str	r3, [r4, #16]
 800f842:	f080 0001 	eor.w	r0, r0, #1
 800f846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f84a:	2102      	movs	r1, #2
 800f84c:	4620      	mov	r0, r4
 800f84e:	f000 fd83 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f852:	b178      	cbz	r0, 800f874 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f854:	2e01      	cmp	r6, #1
 800f856:	68a3      	ldr	r3, [r4, #8]
 800f858:	d011      	beq.n	800f87e <ucdr_deserialize_endian_uint16_t+0xae>
 800f85a:	785b      	ldrb	r3, [r3, #1]
 800f85c:	702b      	strb	r3, [r5, #0]
 800f85e:	68a3      	ldr	r3, [r4, #8]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	706b      	strb	r3, [r5, #1]
 800f864:	68a2      	ldr	r2, [r4, #8]
 800f866:	6923      	ldr	r3, [r4, #16]
 800f868:	3202      	adds	r2, #2
 800f86a:	3302      	adds	r3, #2
 800f86c:	2102      	movs	r1, #2
 800f86e:	60a2      	str	r2, [r4, #8]
 800f870:	6123      	str	r3, [r4, #16]
 800f872:	7561      	strb	r1, [r4, #21]
 800f874:	7da0      	ldrb	r0, [r4, #22]
 800f876:	f080 0001 	eor.w	r0, r0, #1
 800f87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f87e:	881b      	ldrh	r3, [r3, #0]
 800f880:	802b      	strh	r3, [r5, #0]
 800f882:	e7ef      	b.n	800f864 <ucdr_deserialize_endian_uint16_t+0x94>
 800f884:	68a2      	ldr	r2, [r4, #8]
 800f886:	6923      	ldr	r3, [r4, #16]
 800f888:	7da0      	ldrb	r0, [r4, #22]
 800f88a:	f884 9015 	strb.w	r9, [r4, #21]
 800f88e:	1bd2      	subs	r2, r2, r7
 800f890:	1bdb      	subs	r3, r3, r7
 800f892:	60a2      	str	r2, [r4, #8]
 800f894:	6123      	str	r3, [r4, #16]
 800f896:	f080 0001 	eor.w	r0, r0, #1
 800f89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f89e:	68a3      	ldr	r3, [r4, #8]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	706b      	strb	r3, [r5, #1]
 800f8a4:	e7c3      	b.n	800f82e <ucdr_deserialize_endian_uint16_t+0x5e>
 800f8a6:	4641      	mov	r1, r8
 800f8a8:	463a      	mov	r2, r7
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	f008 fd20 	bl	80182f0 <memcpy>
 800f8b0:	68a1      	ldr	r1, [r4, #8]
 800f8b2:	4652      	mov	r2, sl
 800f8b4:	19e8      	adds	r0, r5, r7
 800f8b6:	f008 fd1b 	bl	80182f0 <memcpy>
 800f8ba:	e7b8      	b.n	800f82e <ucdr_deserialize_endian_uint16_t+0x5e>

0800f8bc <ucdr_serialize_uint32_t>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	9101      	str	r1, [sp, #4]
 800f8c6:	2104      	movs	r1, #4
 800f8c8:	f000 fd9a 	bl	8010400 <ucdr_buffer_alignment>
 800f8cc:	4601      	mov	r1, r0
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	7d67      	ldrb	r7, [r4, #21]
 800f8d2:	f000 fdd9 	bl	8010488 <ucdr_advance_buffer>
 800f8d6:	2104      	movs	r1, #4
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 fd31 	bl	8010340 <ucdr_check_buffer_available_for>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d139      	bne.n	800f956 <ucdr_serialize_uint32_t+0x9a>
 800f8e2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f8e6:	42ab      	cmp	r3, r5
 800f8e8:	d930      	bls.n	800f94c <ucdr_serialize_uint32_t+0x90>
 800f8ea:	1b5e      	subs	r6, r3, r5
 800f8ec:	60a3      	str	r3, [r4, #8]
 800f8ee:	6923      	ldr	r3, [r4, #16]
 800f8f0:	f1c6 0804 	rsb	r8, r6, #4
 800f8f4:	4433      	add	r3, r6
 800f8f6:	6123      	str	r3, [r4, #16]
 800f8f8:	4641      	mov	r1, r8
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f000 fd2c 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f900:	2800      	cmp	r0, #0
 800f902:	d04c      	beq.n	800f99e <ucdr_serialize_uint32_t+0xe2>
 800f904:	7d23      	ldrb	r3, [r4, #20]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d063      	beq.n	800f9d2 <ucdr_serialize_uint32_t+0x116>
 800f90a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f90e:	702b      	strb	r3, [r5, #0]
 800f910:	2e00      	cmp	r6, #0
 800f912:	d051      	beq.n	800f9b8 <ucdr_serialize_uint32_t+0xfc>
 800f914:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f918:	706b      	strb	r3, [r5, #1]
 800f91a:	2e01      	cmp	r6, #1
 800f91c:	d050      	beq.n	800f9c0 <ucdr_serialize_uint32_t+0x104>
 800f91e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f922:	70ab      	strb	r3, [r5, #2]
 800f924:	2e02      	cmp	r6, #2
 800f926:	d04f      	beq.n	800f9c8 <ucdr_serialize_uint32_t+0x10c>
 800f928:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f92c:	70eb      	strb	r3, [r5, #3]
 800f92e:	6923      	ldr	r3, [r4, #16]
 800f930:	68a2      	ldr	r2, [r4, #8]
 800f932:	7da0      	ldrb	r0, [r4, #22]
 800f934:	3304      	adds	r3, #4
 800f936:	1b9e      	subs	r6, r3, r6
 800f938:	4442      	add	r2, r8
 800f93a:	2304      	movs	r3, #4
 800f93c:	f080 0001 	eor.w	r0, r0, #1
 800f940:	60a2      	str	r2, [r4, #8]
 800f942:	6126      	str	r6, [r4, #16]
 800f944:	7563      	strb	r3, [r4, #21]
 800f946:	b002      	add	sp, #8
 800f948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f94c:	2104      	movs	r1, #4
 800f94e:	4620      	mov	r0, r4
 800f950:	f000 fd02 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800f954:	b1d0      	cbz	r0, 800f98c <ucdr_serialize_uint32_t+0xd0>
 800f956:	7d23      	ldrb	r3, [r4, #20]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	68a3      	ldr	r3, [r4, #8]
 800f95c:	d01c      	beq.n	800f998 <ucdr_serialize_uint32_t+0xdc>
 800f95e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f962:	701a      	strb	r2, [r3, #0]
 800f964:	68a3      	ldr	r3, [r4, #8]
 800f966:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f96a:	705a      	strb	r2, [r3, #1]
 800f96c:	68a3      	ldr	r3, [r4, #8]
 800f96e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f972:	709a      	strb	r2, [r3, #2]
 800f974:	68a3      	ldr	r3, [r4, #8]
 800f976:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f97a:	70da      	strb	r2, [r3, #3]
 800f97c:	68a2      	ldr	r2, [r4, #8]
 800f97e:	6923      	ldr	r3, [r4, #16]
 800f980:	3204      	adds	r2, #4
 800f982:	3304      	adds	r3, #4
 800f984:	2104      	movs	r1, #4
 800f986:	60a2      	str	r2, [r4, #8]
 800f988:	6123      	str	r3, [r4, #16]
 800f98a:	7561      	strb	r1, [r4, #21]
 800f98c:	7da0      	ldrb	r0, [r4, #22]
 800f98e:	f080 0001 	eor.w	r0, r0, #1
 800f992:	b002      	add	sp, #8
 800f994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f998:	9a01      	ldr	r2, [sp, #4]
 800f99a:	601a      	str	r2, [r3, #0]
 800f99c:	e7ee      	b.n	800f97c <ucdr_serialize_uint32_t+0xc0>
 800f99e:	68a2      	ldr	r2, [r4, #8]
 800f9a0:	6923      	ldr	r3, [r4, #16]
 800f9a2:	7da0      	ldrb	r0, [r4, #22]
 800f9a4:	7567      	strb	r7, [r4, #21]
 800f9a6:	1b92      	subs	r2, r2, r6
 800f9a8:	1b9b      	subs	r3, r3, r6
 800f9aa:	f080 0001 	eor.w	r0, r0, #1
 800f9ae:	60a2      	str	r2, [r4, #8]
 800f9b0:	6123      	str	r3, [r4, #16]
 800f9b2:	b002      	add	sp, #8
 800f9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b8:	68a3      	ldr	r3, [r4, #8]
 800f9ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9be:	701a      	strb	r2, [r3, #0]
 800f9c0:	68a3      	ldr	r3, [r4, #8]
 800f9c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f9c6:	701a      	strb	r2, [r3, #0]
 800f9c8:	68a3      	ldr	r3, [r4, #8]
 800f9ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f9ce:	701a      	strb	r2, [r3, #0]
 800f9d0:	e7ad      	b.n	800f92e <ucdr_serialize_uint32_t+0x72>
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	ad01      	add	r5, sp, #4
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	4632      	mov	r2, r6
 800f9da:	f008 fc89 	bl	80182f0 <memcpy>
 800f9de:	68a0      	ldr	r0, [r4, #8]
 800f9e0:	4642      	mov	r2, r8
 800f9e2:	19a9      	adds	r1, r5, r6
 800f9e4:	f008 fc84 	bl	80182f0 <memcpy>
 800f9e8:	e7a1      	b.n	800f92e <ucdr_serialize_uint32_t+0x72>
 800f9ea:	bf00      	nop

0800f9ec <ucdr_serialize_endian_uint32_t>:
 800f9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9f0:	b083      	sub	sp, #12
 800f9f2:	460d      	mov	r5, r1
 800f9f4:	2104      	movs	r1, #4
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	9201      	str	r2, [sp, #4]
 800f9fa:	f000 fd01 	bl	8010400 <ucdr_buffer_alignment>
 800f9fe:	4601      	mov	r1, r0
 800fa00:	4620      	mov	r0, r4
 800fa02:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa06:	f000 fd3f 	bl	8010488 <ucdr_advance_buffer>
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f000 fc97 	bl	8010340 <ucdr_check_buffer_available_for>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d138      	bne.n	800fa88 <ucdr_serialize_endian_uint32_t+0x9c>
 800fa16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fa1a:	42b7      	cmp	r7, r6
 800fa1c:	d92f      	bls.n	800fa7e <ucdr_serialize_endian_uint32_t+0x92>
 800fa1e:	6923      	ldr	r3, [r4, #16]
 800fa20:	60a7      	str	r7, [r4, #8]
 800fa22:	1bbf      	subs	r7, r7, r6
 800fa24:	443b      	add	r3, r7
 800fa26:	f1c7 0904 	rsb	r9, r7, #4
 800fa2a:	6123      	str	r3, [r4, #16]
 800fa2c:	4649      	mov	r1, r9
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f000 fc92 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d04a      	beq.n	800face <ucdr_serialize_endian_uint32_t+0xe2>
 800fa38:	2d01      	cmp	r5, #1
 800fa3a:	d063      	beq.n	800fb04 <ucdr_serialize_endian_uint32_t+0x118>
 800fa3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa40:	7033      	strb	r3, [r6, #0]
 800fa42:	2f00      	cmp	r7, #0
 800fa44:	d051      	beq.n	800faea <ucdr_serialize_endian_uint32_t+0xfe>
 800fa46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa4a:	7073      	strb	r3, [r6, #1]
 800fa4c:	2f01      	cmp	r7, #1
 800fa4e:	d050      	beq.n	800faf2 <ucdr_serialize_endian_uint32_t+0x106>
 800fa50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa54:	70b3      	strb	r3, [r6, #2]
 800fa56:	2f02      	cmp	r7, #2
 800fa58:	d04f      	beq.n	800fafa <ucdr_serialize_endian_uint32_t+0x10e>
 800fa5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa5e:	70f3      	strb	r3, [r6, #3]
 800fa60:	6923      	ldr	r3, [r4, #16]
 800fa62:	68a2      	ldr	r2, [r4, #8]
 800fa64:	7da0      	ldrb	r0, [r4, #22]
 800fa66:	3304      	adds	r3, #4
 800fa68:	444a      	add	r2, r9
 800fa6a:	1bdb      	subs	r3, r3, r7
 800fa6c:	2104      	movs	r1, #4
 800fa6e:	f080 0001 	eor.w	r0, r0, #1
 800fa72:	60a2      	str	r2, [r4, #8]
 800fa74:	6123      	str	r3, [r4, #16]
 800fa76:	7561      	strb	r1, [r4, #21]
 800fa78:	b003      	add	sp, #12
 800fa7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa7e:	2104      	movs	r1, #4
 800fa80:	4620      	mov	r0, r4
 800fa82:	f000 fc69 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fa86:	b1c8      	cbz	r0, 800fabc <ucdr_serialize_endian_uint32_t+0xd0>
 800fa88:	2d01      	cmp	r5, #1
 800fa8a:	68a3      	ldr	r3, [r4, #8]
 800fa8c:	d01c      	beq.n	800fac8 <ucdr_serialize_endian_uint32_t+0xdc>
 800fa8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fa92:	701a      	strb	r2, [r3, #0]
 800fa94:	68a3      	ldr	r3, [r4, #8]
 800fa96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa9a:	705a      	strb	r2, [r3, #1]
 800fa9c:	68a3      	ldr	r3, [r4, #8]
 800fa9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800faa2:	709a      	strb	r2, [r3, #2]
 800faa4:	68a3      	ldr	r3, [r4, #8]
 800faa6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800faaa:	70da      	strb	r2, [r3, #3]
 800faac:	68a2      	ldr	r2, [r4, #8]
 800faae:	6923      	ldr	r3, [r4, #16]
 800fab0:	3204      	adds	r2, #4
 800fab2:	3304      	adds	r3, #4
 800fab4:	2104      	movs	r1, #4
 800fab6:	60a2      	str	r2, [r4, #8]
 800fab8:	6123      	str	r3, [r4, #16]
 800faba:	7561      	strb	r1, [r4, #21]
 800fabc:	7da0      	ldrb	r0, [r4, #22]
 800fabe:	f080 0001 	eor.w	r0, r0, #1
 800fac2:	b003      	add	sp, #12
 800fac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fac8:	9a01      	ldr	r2, [sp, #4]
 800faca:	601a      	str	r2, [r3, #0]
 800facc:	e7ee      	b.n	800faac <ucdr_serialize_endian_uint32_t+0xc0>
 800face:	68a2      	ldr	r2, [r4, #8]
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	7da0      	ldrb	r0, [r4, #22]
 800fad4:	f884 8015 	strb.w	r8, [r4, #21]
 800fad8:	1bd2      	subs	r2, r2, r7
 800fada:	1bdb      	subs	r3, r3, r7
 800fadc:	f080 0001 	eor.w	r0, r0, #1
 800fae0:	60a2      	str	r2, [r4, #8]
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	b003      	add	sp, #12
 800fae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faea:	68a3      	ldr	r3, [r4, #8]
 800faec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800faf0:	701a      	strb	r2, [r3, #0]
 800faf2:	68a3      	ldr	r3, [r4, #8]
 800faf4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800faf8:	701a      	strb	r2, [r3, #0]
 800fafa:	68a3      	ldr	r3, [r4, #8]
 800fafc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb00:	701a      	strb	r2, [r3, #0]
 800fb02:	e7ad      	b.n	800fa60 <ucdr_serialize_endian_uint32_t+0x74>
 800fb04:	ad01      	add	r5, sp, #4
 800fb06:	4629      	mov	r1, r5
 800fb08:	463a      	mov	r2, r7
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	f008 fbf0 	bl	80182f0 <memcpy>
 800fb10:	68a0      	ldr	r0, [r4, #8]
 800fb12:	464a      	mov	r2, r9
 800fb14:	19e9      	adds	r1, r5, r7
 800fb16:	f008 fbeb 	bl	80182f0 <memcpy>
 800fb1a:	e7a1      	b.n	800fa60 <ucdr_serialize_endian_uint32_t+0x74>

0800fb1c <ucdr_deserialize_uint32_t>:
 800fb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb20:	460d      	mov	r5, r1
 800fb22:	2104      	movs	r1, #4
 800fb24:	4604      	mov	r4, r0
 800fb26:	f000 fc6b 	bl	8010400 <ucdr_buffer_alignment>
 800fb2a:	4601      	mov	r1, r0
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb32:	f000 fca9 	bl	8010488 <ucdr_advance_buffer>
 800fb36:	2104      	movs	r1, #4
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f000 fc01 	bl	8010340 <ucdr_check_buffer_available_for>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d138      	bne.n	800fbb4 <ucdr_deserialize_uint32_t+0x98>
 800fb42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fb46:	42b7      	cmp	r7, r6
 800fb48:	d92f      	bls.n	800fbaa <ucdr_deserialize_uint32_t+0x8e>
 800fb4a:	6923      	ldr	r3, [r4, #16]
 800fb4c:	60a7      	str	r7, [r4, #8]
 800fb4e:	1bbf      	subs	r7, r7, r6
 800fb50:	443b      	add	r3, r7
 800fb52:	f1c7 0904 	rsb	r9, r7, #4
 800fb56:	6123      	str	r3, [r4, #16]
 800fb58:	4649      	mov	r1, r9
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f000 fbfc 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	d046      	beq.n	800fbf2 <ucdr_deserialize_uint32_t+0xd6>
 800fb64:	7d23      	ldrb	r3, [r4, #20]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d05c      	beq.n	800fc24 <ucdr_deserialize_uint32_t+0x108>
 800fb6a:	78f3      	ldrb	r3, [r6, #3]
 800fb6c:	702b      	strb	r3, [r5, #0]
 800fb6e:	2f00      	cmp	r7, #0
 800fb70:	d04c      	beq.n	800fc0c <ucdr_deserialize_uint32_t+0xf0>
 800fb72:	78b3      	ldrb	r3, [r6, #2]
 800fb74:	706b      	strb	r3, [r5, #1]
 800fb76:	2f01      	cmp	r7, #1
 800fb78:	f105 0302 	add.w	r3, r5, #2
 800fb7c:	d04a      	beq.n	800fc14 <ucdr_deserialize_uint32_t+0xf8>
 800fb7e:	7873      	ldrb	r3, [r6, #1]
 800fb80:	70ab      	strb	r3, [r5, #2]
 800fb82:	2f02      	cmp	r7, #2
 800fb84:	f105 0303 	add.w	r3, r5, #3
 800fb88:	d048      	beq.n	800fc1c <ucdr_deserialize_uint32_t+0x100>
 800fb8a:	7833      	ldrb	r3, [r6, #0]
 800fb8c:	70eb      	strb	r3, [r5, #3]
 800fb8e:	6923      	ldr	r3, [r4, #16]
 800fb90:	68a2      	ldr	r2, [r4, #8]
 800fb92:	7da0      	ldrb	r0, [r4, #22]
 800fb94:	2104      	movs	r1, #4
 800fb96:	3304      	adds	r3, #4
 800fb98:	444a      	add	r2, r9
 800fb9a:	1bdb      	subs	r3, r3, r7
 800fb9c:	7561      	strb	r1, [r4, #21]
 800fb9e:	60a2      	str	r2, [r4, #8]
 800fba0:	6123      	str	r3, [r4, #16]
 800fba2:	f080 0001 	eor.w	r0, r0, #1
 800fba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbaa:	2104      	movs	r1, #4
 800fbac:	4620      	mov	r0, r4
 800fbae:	f000 fbd3 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fbb2:	b1b0      	cbz	r0, 800fbe2 <ucdr_deserialize_uint32_t+0xc6>
 800fbb4:	7d23      	ldrb	r3, [r4, #20]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	68a3      	ldr	r3, [r4, #8]
 800fbba:	d017      	beq.n	800fbec <ucdr_deserialize_uint32_t+0xd0>
 800fbbc:	78db      	ldrb	r3, [r3, #3]
 800fbbe:	702b      	strb	r3, [r5, #0]
 800fbc0:	68a3      	ldr	r3, [r4, #8]
 800fbc2:	789b      	ldrb	r3, [r3, #2]
 800fbc4:	706b      	strb	r3, [r5, #1]
 800fbc6:	68a3      	ldr	r3, [r4, #8]
 800fbc8:	785b      	ldrb	r3, [r3, #1]
 800fbca:	70ab      	strb	r3, [r5, #2]
 800fbcc:	68a3      	ldr	r3, [r4, #8]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	70eb      	strb	r3, [r5, #3]
 800fbd2:	68a2      	ldr	r2, [r4, #8]
 800fbd4:	6923      	ldr	r3, [r4, #16]
 800fbd6:	3204      	adds	r2, #4
 800fbd8:	3304      	adds	r3, #4
 800fbda:	2104      	movs	r1, #4
 800fbdc:	60a2      	str	r2, [r4, #8]
 800fbde:	6123      	str	r3, [r4, #16]
 800fbe0:	7561      	strb	r1, [r4, #21]
 800fbe2:	7da0      	ldrb	r0, [r4, #22]
 800fbe4:	f080 0001 	eor.w	r0, r0, #1
 800fbe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	602b      	str	r3, [r5, #0]
 800fbf0:	e7ef      	b.n	800fbd2 <ucdr_deserialize_uint32_t+0xb6>
 800fbf2:	68a2      	ldr	r2, [r4, #8]
 800fbf4:	6923      	ldr	r3, [r4, #16]
 800fbf6:	7da0      	ldrb	r0, [r4, #22]
 800fbf8:	f884 8015 	strb.w	r8, [r4, #21]
 800fbfc:	1bd2      	subs	r2, r2, r7
 800fbfe:	1bdb      	subs	r3, r3, r7
 800fc00:	60a2      	str	r2, [r4, #8]
 800fc02:	6123      	str	r3, [r4, #16]
 800fc04:	f080 0001 	eor.w	r0, r0, #1
 800fc08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc0c:	68a3      	ldr	r3, [r4, #8]
 800fc0e:	789b      	ldrb	r3, [r3, #2]
 800fc10:	706b      	strb	r3, [r5, #1]
 800fc12:	1cab      	adds	r3, r5, #2
 800fc14:	68a2      	ldr	r2, [r4, #8]
 800fc16:	7852      	ldrb	r2, [r2, #1]
 800fc18:	f803 2b01 	strb.w	r2, [r3], #1
 800fc1c:	68a2      	ldr	r2, [r4, #8]
 800fc1e:	7812      	ldrb	r2, [r2, #0]
 800fc20:	701a      	strb	r2, [r3, #0]
 800fc22:	e7b4      	b.n	800fb8e <ucdr_deserialize_uint32_t+0x72>
 800fc24:	4631      	mov	r1, r6
 800fc26:	463a      	mov	r2, r7
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f008 fb61 	bl	80182f0 <memcpy>
 800fc2e:	68a1      	ldr	r1, [r4, #8]
 800fc30:	464a      	mov	r2, r9
 800fc32:	19e8      	adds	r0, r5, r7
 800fc34:	f008 fb5c 	bl	80182f0 <memcpy>
 800fc38:	e7a9      	b.n	800fb8e <ucdr_deserialize_uint32_t+0x72>
 800fc3a:	bf00      	nop

0800fc3c <ucdr_deserialize_endian_uint32_t>:
 800fc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc40:	460e      	mov	r6, r1
 800fc42:	2104      	movs	r1, #4
 800fc44:	4604      	mov	r4, r0
 800fc46:	4615      	mov	r5, r2
 800fc48:	f000 fbda 	bl	8010400 <ucdr_buffer_alignment>
 800fc4c:	4601      	mov	r1, r0
 800fc4e:	4620      	mov	r0, r4
 800fc50:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fc54:	f000 fc18 	bl	8010488 <ucdr_advance_buffer>
 800fc58:	2104      	movs	r1, #4
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f000 fb70 	bl	8010340 <ucdr_check_buffer_available_for>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d13c      	bne.n	800fcde <ucdr_deserialize_endian_uint32_t+0xa2>
 800fc64:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fc68:	42bb      	cmp	r3, r7
 800fc6a:	d933      	bls.n	800fcd4 <ucdr_deserialize_endian_uint32_t+0x98>
 800fc6c:	eba3 0807 	sub.w	r8, r3, r7
 800fc70:	60a3      	str	r3, [r4, #8]
 800fc72:	6923      	ldr	r3, [r4, #16]
 800fc74:	f1c8 0a04 	rsb	sl, r8, #4
 800fc78:	4443      	add	r3, r8
 800fc7a:	6123      	str	r3, [r4, #16]
 800fc7c:	4651      	mov	r1, sl
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 fb6a 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fc84:	2800      	cmp	r0, #0
 800fc86:	d048      	beq.n	800fd1a <ucdr_deserialize_endian_uint32_t+0xde>
 800fc88:	2e01      	cmp	r6, #1
 800fc8a:	d061      	beq.n	800fd50 <ucdr_deserialize_endian_uint32_t+0x114>
 800fc8c:	78fb      	ldrb	r3, [r7, #3]
 800fc8e:	702b      	strb	r3, [r5, #0]
 800fc90:	f1b8 0f00 	cmp.w	r8, #0
 800fc94:	d050      	beq.n	800fd38 <ucdr_deserialize_endian_uint32_t+0xfc>
 800fc96:	78bb      	ldrb	r3, [r7, #2]
 800fc98:	706b      	strb	r3, [r5, #1]
 800fc9a:	f1b8 0f01 	cmp.w	r8, #1
 800fc9e:	f105 0302 	add.w	r3, r5, #2
 800fca2:	d04d      	beq.n	800fd40 <ucdr_deserialize_endian_uint32_t+0x104>
 800fca4:	787b      	ldrb	r3, [r7, #1]
 800fca6:	70ab      	strb	r3, [r5, #2]
 800fca8:	f1b8 0f02 	cmp.w	r8, #2
 800fcac:	f105 0303 	add.w	r3, r5, #3
 800fcb0:	d04a      	beq.n	800fd48 <ucdr_deserialize_endian_uint32_t+0x10c>
 800fcb2:	783b      	ldrb	r3, [r7, #0]
 800fcb4:	70eb      	strb	r3, [r5, #3]
 800fcb6:	6923      	ldr	r3, [r4, #16]
 800fcb8:	68a2      	ldr	r2, [r4, #8]
 800fcba:	7da0      	ldrb	r0, [r4, #22]
 800fcbc:	2104      	movs	r1, #4
 800fcbe:	3304      	adds	r3, #4
 800fcc0:	4452      	add	r2, sl
 800fcc2:	eba3 0308 	sub.w	r3, r3, r8
 800fcc6:	7561      	strb	r1, [r4, #21]
 800fcc8:	60a2      	str	r2, [r4, #8]
 800fcca:	6123      	str	r3, [r4, #16]
 800fccc:	f080 0001 	eor.w	r0, r0, #1
 800fcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd4:	2104      	movs	r1, #4
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f000 fb3e 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fcdc:	b1a8      	cbz	r0, 800fd0a <ucdr_deserialize_endian_uint32_t+0xce>
 800fcde:	2e01      	cmp	r6, #1
 800fce0:	68a3      	ldr	r3, [r4, #8]
 800fce2:	d017      	beq.n	800fd14 <ucdr_deserialize_endian_uint32_t+0xd8>
 800fce4:	78db      	ldrb	r3, [r3, #3]
 800fce6:	702b      	strb	r3, [r5, #0]
 800fce8:	68a3      	ldr	r3, [r4, #8]
 800fcea:	789b      	ldrb	r3, [r3, #2]
 800fcec:	706b      	strb	r3, [r5, #1]
 800fcee:	68a3      	ldr	r3, [r4, #8]
 800fcf0:	785b      	ldrb	r3, [r3, #1]
 800fcf2:	70ab      	strb	r3, [r5, #2]
 800fcf4:	68a3      	ldr	r3, [r4, #8]
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	70eb      	strb	r3, [r5, #3]
 800fcfa:	68a2      	ldr	r2, [r4, #8]
 800fcfc:	6923      	ldr	r3, [r4, #16]
 800fcfe:	3204      	adds	r2, #4
 800fd00:	3304      	adds	r3, #4
 800fd02:	2104      	movs	r1, #4
 800fd04:	60a2      	str	r2, [r4, #8]
 800fd06:	6123      	str	r3, [r4, #16]
 800fd08:	7561      	strb	r1, [r4, #21]
 800fd0a:	7da0      	ldrb	r0, [r4, #22]
 800fd0c:	f080 0001 	eor.w	r0, r0, #1
 800fd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	602b      	str	r3, [r5, #0]
 800fd18:	e7ef      	b.n	800fcfa <ucdr_deserialize_endian_uint32_t+0xbe>
 800fd1a:	68a2      	ldr	r2, [r4, #8]
 800fd1c:	6923      	ldr	r3, [r4, #16]
 800fd1e:	7da0      	ldrb	r0, [r4, #22]
 800fd20:	f884 9015 	strb.w	r9, [r4, #21]
 800fd24:	eba2 0208 	sub.w	r2, r2, r8
 800fd28:	eba3 0308 	sub.w	r3, r3, r8
 800fd2c:	60a2      	str	r2, [r4, #8]
 800fd2e:	6123      	str	r3, [r4, #16]
 800fd30:	f080 0001 	eor.w	r0, r0, #1
 800fd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd38:	68a3      	ldr	r3, [r4, #8]
 800fd3a:	789b      	ldrb	r3, [r3, #2]
 800fd3c:	706b      	strb	r3, [r5, #1]
 800fd3e:	1cab      	adds	r3, r5, #2
 800fd40:	68a2      	ldr	r2, [r4, #8]
 800fd42:	7852      	ldrb	r2, [r2, #1]
 800fd44:	f803 2b01 	strb.w	r2, [r3], #1
 800fd48:	68a2      	ldr	r2, [r4, #8]
 800fd4a:	7812      	ldrb	r2, [r2, #0]
 800fd4c:	701a      	strb	r2, [r3, #0]
 800fd4e:	e7b2      	b.n	800fcb6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800fd50:	4639      	mov	r1, r7
 800fd52:	4642      	mov	r2, r8
 800fd54:	4628      	mov	r0, r5
 800fd56:	f008 facb 	bl	80182f0 <memcpy>
 800fd5a:	68a1      	ldr	r1, [r4, #8]
 800fd5c:	4652      	mov	r2, sl
 800fd5e:	eb05 0008 	add.w	r0, r5, r8
 800fd62:	f008 fac5 	bl	80182f0 <memcpy>
 800fd66:	e7a6      	b.n	800fcb6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800fd68 <ucdr_serialize_uint64_t>:
 800fd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd6c:	2108      	movs	r1, #8
 800fd6e:	b082      	sub	sp, #8
 800fd70:	4604      	mov	r4, r0
 800fd72:	e9cd 2300 	strd	r2, r3, [sp]
 800fd76:	f000 fb43 	bl	8010400 <ucdr_buffer_alignment>
 800fd7a:	4601      	mov	r1, r0
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	7d67      	ldrb	r7, [r4, #21]
 800fd80:	f000 fb82 	bl	8010488 <ucdr_advance_buffer>
 800fd84:	2108      	movs	r1, #8
 800fd86:	4620      	mov	r0, r4
 800fd88:	f000 fada 	bl	8010340 <ucdr_check_buffer_available_for>
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d14e      	bne.n	800fe2e <ucdr_serialize_uint64_t+0xc6>
 800fd90:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fd94:	42ab      	cmp	r3, r5
 800fd96:	d945      	bls.n	800fe24 <ucdr_serialize_uint64_t+0xbc>
 800fd98:	1b5e      	subs	r6, r3, r5
 800fd9a:	60a3      	str	r3, [r4, #8]
 800fd9c:	6923      	ldr	r3, [r4, #16]
 800fd9e:	f1c6 0808 	rsb	r8, r6, #8
 800fda2:	4433      	add	r3, r6
 800fda4:	6123      	str	r3, [r4, #16]
 800fda6:	4641      	mov	r1, r8
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f000 fad5 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d074      	beq.n	800fe9c <ucdr_serialize_uint64_t+0x134>
 800fdb2:	7d23      	ldrb	r3, [r4, #20]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	f000 809b 	beq.w	800fef0 <ucdr_serialize_uint64_t+0x188>
 800fdba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fdbe:	702b      	strb	r3, [r5, #0]
 800fdc0:	2e00      	cmp	r6, #0
 800fdc2:	d078      	beq.n	800feb6 <ucdr_serialize_uint64_t+0x14e>
 800fdc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fdc8:	706b      	strb	r3, [r5, #1]
 800fdca:	2e01      	cmp	r6, #1
 800fdcc:	d077      	beq.n	800febe <ucdr_serialize_uint64_t+0x156>
 800fdce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdd2:	70ab      	strb	r3, [r5, #2]
 800fdd4:	2e02      	cmp	r6, #2
 800fdd6:	d076      	beq.n	800fec6 <ucdr_serialize_uint64_t+0x15e>
 800fdd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fddc:	70eb      	strb	r3, [r5, #3]
 800fdde:	2e03      	cmp	r6, #3
 800fde0:	d075      	beq.n	800fece <ucdr_serialize_uint64_t+0x166>
 800fde2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fde6:	712b      	strb	r3, [r5, #4]
 800fde8:	2e04      	cmp	r6, #4
 800fdea:	d074      	beq.n	800fed6 <ucdr_serialize_uint64_t+0x16e>
 800fdec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fdf0:	716b      	strb	r3, [r5, #5]
 800fdf2:	2e05      	cmp	r6, #5
 800fdf4:	d073      	beq.n	800fede <ucdr_serialize_uint64_t+0x176>
 800fdf6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fdfa:	71ab      	strb	r3, [r5, #6]
 800fdfc:	2e06      	cmp	r6, #6
 800fdfe:	d072      	beq.n	800fee6 <ucdr_serialize_uint64_t+0x17e>
 800fe00:	f89d 3000 	ldrb.w	r3, [sp]
 800fe04:	71eb      	strb	r3, [r5, #7]
 800fe06:	6923      	ldr	r3, [r4, #16]
 800fe08:	68a2      	ldr	r2, [r4, #8]
 800fe0a:	7da0      	ldrb	r0, [r4, #22]
 800fe0c:	3308      	adds	r3, #8
 800fe0e:	1b9e      	subs	r6, r3, r6
 800fe10:	4442      	add	r2, r8
 800fe12:	2308      	movs	r3, #8
 800fe14:	f080 0001 	eor.w	r0, r0, #1
 800fe18:	60a2      	str	r2, [r4, #8]
 800fe1a:	6126      	str	r6, [r4, #16]
 800fe1c:	7563      	strb	r3, [r4, #21]
 800fe1e:	b002      	add	sp, #8
 800fe20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe24:	2108      	movs	r1, #8
 800fe26:	4620      	mov	r0, r4
 800fe28:	f000 fa96 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800fe2c:	b350      	cbz	r0, 800fe84 <ucdr_serialize_uint64_t+0x11c>
 800fe2e:	7d23      	ldrb	r3, [r4, #20]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d02d      	beq.n	800fe90 <ucdr_serialize_uint64_t+0x128>
 800fe34:	68a3      	ldr	r3, [r4, #8]
 800fe36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fe3a:	701a      	strb	r2, [r3, #0]
 800fe3c:	68a3      	ldr	r3, [r4, #8]
 800fe3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe42:	705a      	strb	r2, [r3, #1]
 800fe44:	68a3      	ldr	r3, [r4, #8]
 800fe46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe4a:	709a      	strb	r2, [r3, #2]
 800fe4c:	68a3      	ldr	r3, [r4, #8]
 800fe4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe52:	70da      	strb	r2, [r3, #3]
 800fe54:	68a3      	ldr	r3, [r4, #8]
 800fe56:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fe5a:	711a      	strb	r2, [r3, #4]
 800fe5c:	68a3      	ldr	r3, [r4, #8]
 800fe5e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fe62:	715a      	strb	r2, [r3, #5]
 800fe64:	68a3      	ldr	r3, [r4, #8]
 800fe66:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fe6a:	719a      	strb	r2, [r3, #6]
 800fe6c:	68a3      	ldr	r3, [r4, #8]
 800fe6e:	f89d 2000 	ldrb.w	r2, [sp]
 800fe72:	71da      	strb	r2, [r3, #7]
 800fe74:	68a2      	ldr	r2, [r4, #8]
 800fe76:	6923      	ldr	r3, [r4, #16]
 800fe78:	3208      	adds	r2, #8
 800fe7a:	3308      	adds	r3, #8
 800fe7c:	2108      	movs	r1, #8
 800fe7e:	60a2      	str	r2, [r4, #8]
 800fe80:	6123      	str	r3, [r4, #16]
 800fe82:	7561      	strb	r1, [r4, #21]
 800fe84:	7da0      	ldrb	r0, [r4, #22]
 800fe86:	f080 0001 	eor.w	r0, r0, #1
 800fe8a:	b002      	add	sp, #8
 800fe8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe90:	466b      	mov	r3, sp
 800fe92:	cb03      	ldmia	r3!, {r0, r1}
 800fe94:	68a3      	ldr	r3, [r4, #8]
 800fe96:	6018      	str	r0, [r3, #0]
 800fe98:	6059      	str	r1, [r3, #4]
 800fe9a:	e7eb      	b.n	800fe74 <ucdr_serialize_uint64_t+0x10c>
 800fe9c:	68a2      	ldr	r2, [r4, #8]
 800fe9e:	6923      	ldr	r3, [r4, #16]
 800fea0:	7da0      	ldrb	r0, [r4, #22]
 800fea2:	7567      	strb	r7, [r4, #21]
 800fea4:	1b92      	subs	r2, r2, r6
 800fea6:	1b9b      	subs	r3, r3, r6
 800fea8:	f080 0001 	eor.w	r0, r0, #1
 800feac:	60a2      	str	r2, [r4, #8]
 800feae:	6123      	str	r3, [r4, #16]
 800feb0:	b002      	add	sp, #8
 800feb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb6:	68a3      	ldr	r3, [r4, #8]
 800feb8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800febc:	701a      	strb	r2, [r3, #0]
 800febe:	68a3      	ldr	r3, [r4, #8]
 800fec0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fec4:	701a      	strb	r2, [r3, #0]
 800fec6:	68a3      	ldr	r3, [r4, #8]
 800fec8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fecc:	701a      	strb	r2, [r3, #0]
 800fece:	68a3      	ldr	r3, [r4, #8]
 800fed0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fed4:	701a      	strb	r2, [r3, #0]
 800fed6:	68a3      	ldr	r3, [r4, #8]
 800fed8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fedc:	701a      	strb	r2, [r3, #0]
 800fede:	68a3      	ldr	r3, [r4, #8]
 800fee0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fee4:	701a      	strb	r2, [r3, #0]
 800fee6:	68a3      	ldr	r3, [r4, #8]
 800fee8:	f89d 2000 	ldrb.w	r2, [sp]
 800feec:	701a      	strb	r2, [r3, #0]
 800feee:	e78a      	b.n	800fe06 <ucdr_serialize_uint64_t+0x9e>
 800fef0:	4628      	mov	r0, r5
 800fef2:	466d      	mov	r5, sp
 800fef4:	4629      	mov	r1, r5
 800fef6:	4632      	mov	r2, r6
 800fef8:	f008 f9fa 	bl	80182f0 <memcpy>
 800fefc:	68a0      	ldr	r0, [r4, #8]
 800fefe:	4642      	mov	r2, r8
 800ff00:	19a9      	adds	r1, r5, r6
 800ff02:	f008 f9f5 	bl	80182f0 <memcpy>
 800ff06:	e77e      	b.n	800fe06 <ucdr_serialize_uint64_t+0x9e>

0800ff08 <ucdr_serialize_int16_t>:
 800ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0c:	b082      	sub	sp, #8
 800ff0e:	460b      	mov	r3, r1
 800ff10:	2102      	movs	r1, #2
 800ff12:	4604      	mov	r4, r0
 800ff14:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ff18:	f000 fa72 	bl	8010400 <ucdr_buffer_alignment>
 800ff1c:	4601      	mov	r1, r0
 800ff1e:	4620      	mov	r0, r4
 800ff20:	7d67      	ldrb	r7, [r4, #21]
 800ff22:	f000 fab1 	bl	8010488 <ucdr_advance_buffer>
 800ff26:	2102      	movs	r1, #2
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f000 fa09 	bl	8010340 <ucdr_check_buffer_available_for>
 800ff2e:	bb78      	cbnz	r0, 800ff90 <ucdr_serialize_int16_t+0x88>
 800ff30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ff34:	42ab      	cmp	r3, r5
 800ff36:	d926      	bls.n	800ff86 <ucdr_serialize_int16_t+0x7e>
 800ff38:	1b5e      	subs	r6, r3, r5
 800ff3a:	60a3      	str	r3, [r4, #8]
 800ff3c:	6923      	ldr	r3, [r4, #16]
 800ff3e:	f1c6 0802 	rsb	r8, r6, #2
 800ff42:	4433      	add	r3, r6
 800ff44:	6123      	str	r3, [r4, #16]
 800ff46:	4641      	mov	r1, r8
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f000 fa05 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d03b      	beq.n	800ffca <ucdr_serialize_int16_t+0xc2>
 800ff52:	7d23      	ldrb	r3, [r4, #20]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d04a      	beq.n	800ffee <ucdr_serialize_int16_t+0xe6>
 800ff58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff5c:	702b      	strb	r3, [r5, #0]
 800ff5e:	2e00      	cmp	r6, #0
 800ff60:	d040      	beq.n	800ffe4 <ucdr_serialize_int16_t+0xdc>
 800ff62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff66:	706b      	strb	r3, [r5, #1]
 800ff68:	6923      	ldr	r3, [r4, #16]
 800ff6a:	68a2      	ldr	r2, [r4, #8]
 800ff6c:	7da0      	ldrb	r0, [r4, #22]
 800ff6e:	3302      	adds	r3, #2
 800ff70:	1b9e      	subs	r6, r3, r6
 800ff72:	4442      	add	r2, r8
 800ff74:	2302      	movs	r3, #2
 800ff76:	f080 0001 	eor.w	r0, r0, #1
 800ff7a:	60a2      	str	r2, [r4, #8]
 800ff7c:	6126      	str	r6, [r4, #16]
 800ff7e:	7563      	strb	r3, [r4, #21]
 800ff80:	b002      	add	sp, #8
 800ff82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff86:	2102      	movs	r1, #2
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f000 f9e5 	bl	8010358 <ucdr_check_final_buffer_behavior>
 800ff8e:	b190      	cbz	r0, 800ffb6 <ucdr_serialize_int16_t+0xae>
 800ff90:	7d23      	ldrb	r3, [r4, #20]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	68a3      	ldr	r3, [r4, #8]
 800ff96:	d014      	beq.n	800ffc2 <ucdr_serialize_int16_t+0xba>
 800ff98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ff9c:	701a      	strb	r2, [r3, #0]
 800ff9e:	68a3      	ldr	r3, [r4, #8]
 800ffa0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ffa4:	705a      	strb	r2, [r3, #1]
 800ffa6:	68a2      	ldr	r2, [r4, #8]
 800ffa8:	6923      	ldr	r3, [r4, #16]
 800ffaa:	3202      	adds	r2, #2
 800ffac:	3302      	adds	r3, #2
 800ffae:	2102      	movs	r1, #2
 800ffb0:	60a2      	str	r2, [r4, #8]
 800ffb2:	6123      	str	r3, [r4, #16]
 800ffb4:	7561      	strb	r1, [r4, #21]
 800ffb6:	7da0      	ldrb	r0, [r4, #22]
 800ffb8:	f080 0001 	eor.w	r0, r0, #1
 800ffbc:	b002      	add	sp, #8
 800ffbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ffc6:	801a      	strh	r2, [r3, #0]
 800ffc8:	e7ed      	b.n	800ffa6 <ucdr_serialize_int16_t+0x9e>
 800ffca:	68a2      	ldr	r2, [r4, #8]
 800ffcc:	6923      	ldr	r3, [r4, #16]
 800ffce:	7da0      	ldrb	r0, [r4, #22]
 800ffd0:	7567      	strb	r7, [r4, #21]
 800ffd2:	1b92      	subs	r2, r2, r6
 800ffd4:	1b9b      	subs	r3, r3, r6
 800ffd6:	f080 0001 	eor.w	r0, r0, #1
 800ffda:	60a2      	str	r2, [r4, #8]
 800ffdc:	6123      	str	r3, [r4, #16]
 800ffde:	b002      	add	sp, #8
 800ffe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe4:	68a3      	ldr	r3, [r4, #8]
 800ffe6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ffea:	701a      	strb	r2, [r3, #0]
 800ffec:	e7bc      	b.n	800ff68 <ucdr_serialize_int16_t+0x60>
 800ffee:	4628      	mov	r0, r5
 800fff0:	f10d 0506 	add.w	r5, sp, #6
 800fff4:	4629      	mov	r1, r5
 800fff6:	4632      	mov	r2, r6
 800fff8:	f008 f97a 	bl	80182f0 <memcpy>
 800fffc:	68a0      	ldr	r0, [r4, #8]
 800fffe:	4642      	mov	r2, r8
 8010000:	19a9      	adds	r1, r5, r6
 8010002:	f008 f975 	bl	80182f0 <memcpy>
 8010006:	e7af      	b.n	800ff68 <ucdr_serialize_int16_t+0x60>

08010008 <ucdr_deserialize_int16_t>:
 8010008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801000c:	460d      	mov	r5, r1
 801000e:	2102      	movs	r1, #2
 8010010:	4604      	mov	r4, r0
 8010012:	f000 f9f5 	bl	8010400 <ucdr_buffer_alignment>
 8010016:	4601      	mov	r1, r0
 8010018:	4620      	mov	r0, r4
 801001a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801001e:	f000 fa33 	bl	8010488 <ucdr_advance_buffer>
 8010022:	2102      	movs	r1, #2
 8010024:	4620      	mov	r0, r4
 8010026:	f000 f98b 	bl	8010340 <ucdr_check_buffer_available_for>
 801002a:	bb60      	cbnz	r0, 8010086 <ucdr_deserialize_int16_t+0x7e>
 801002c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010030:	42be      	cmp	r6, r7
 8010032:	d923      	bls.n	801007c <ucdr_deserialize_int16_t+0x74>
 8010034:	6923      	ldr	r3, [r4, #16]
 8010036:	60a6      	str	r6, [r4, #8]
 8010038:	1bf6      	subs	r6, r6, r7
 801003a:	4433      	add	r3, r6
 801003c:	f1c6 0902 	rsb	r9, r6, #2
 8010040:	6123      	str	r3, [r4, #16]
 8010042:	4649      	mov	r1, r9
 8010044:	4620      	mov	r0, r4
 8010046:	f000 f987 	bl	8010358 <ucdr_check_final_buffer_behavior>
 801004a:	2800      	cmp	r0, #0
 801004c:	d034      	beq.n	80100b8 <ucdr_deserialize_int16_t+0xb0>
 801004e:	7d23      	ldrb	r3, [r4, #20]
 8010050:	2b01      	cmp	r3, #1
 8010052:	d042      	beq.n	80100da <ucdr_deserialize_int16_t+0xd2>
 8010054:	787b      	ldrb	r3, [r7, #1]
 8010056:	702b      	strb	r3, [r5, #0]
 8010058:	2e00      	cmp	r6, #0
 801005a:	d03a      	beq.n	80100d2 <ucdr_deserialize_int16_t+0xca>
 801005c:	783b      	ldrb	r3, [r7, #0]
 801005e:	706b      	strb	r3, [r5, #1]
 8010060:	6923      	ldr	r3, [r4, #16]
 8010062:	68a2      	ldr	r2, [r4, #8]
 8010064:	7da0      	ldrb	r0, [r4, #22]
 8010066:	2102      	movs	r1, #2
 8010068:	3302      	adds	r3, #2
 801006a:	444a      	add	r2, r9
 801006c:	1b9b      	subs	r3, r3, r6
 801006e:	7561      	strb	r1, [r4, #21]
 8010070:	60a2      	str	r2, [r4, #8]
 8010072:	6123      	str	r3, [r4, #16]
 8010074:	f080 0001 	eor.w	r0, r0, #1
 8010078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801007c:	2102      	movs	r1, #2
 801007e:	4620      	mov	r0, r4
 8010080:	f000 f96a 	bl	8010358 <ucdr_check_final_buffer_behavior>
 8010084:	b180      	cbz	r0, 80100a8 <ucdr_deserialize_int16_t+0xa0>
 8010086:	7d23      	ldrb	r3, [r4, #20]
 8010088:	2b01      	cmp	r3, #1
 801008a:	68a3      	ldr	r3, [r4, #8]
 801008c:	d011      	beq.n	80100b2 <ucdr_deserialize_int16_t+0xaa>
 801008e:	785b      	ldrb	r3, [r3, #1]
 8010090:	702b      	strb	r3, [r5, #0]
 8010092:	68a3      	ldr	r3, [r4, #8]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	706b      	strb	r3, [r5, #1]
 8010098:	68a2      	ldr	r2, [r4, #8]
 801009a:	6923      	ldr	r3, [r4, #16]
 801009c:	3202      	adds	r2, #2
 801009e:	3302      	adds	r3, #2
 80100a0:	2102      	movs	r1, #2
 80100a2:	60a2      	str	r2, [r4, #8]
 80100a4:	6123      	str	r3, [r4, #16]
 80100a6:	7561      	strb	r1, [r4, #21]
 80100a8:	7da0      	ldrb	r0, [r4, #22]
 80100aa:	f080 0001 	eor.w	r0, r0, #1
 80100ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	802b      	strh	r3, [r5, #0]
 80100b6:	e7ef      	b.n	8010098 <ucdr_deserialize_int16_t+0x90>
 80100b8:	68a2      	ldr	r2, [r4, #8]
 80100ba:	6923      	ldr	r3, [r4, #16]
 80100bc:	7da0      	ldrb	r0, [r4, #22]
 80100be:	f884 8015 	strb.w	r8, [r4, #21]
 80100c2:	1b92      	subs	r2, r2, r6
 80100c4:	1b9b      	subs	r3, r3, r6
 80100c6:	60a2      	str	r2, [r4, #8]
 80100c8:	6123      	str	r3, [r4, #16]
 80100ca:	f080 0001 	eor.w	r0, r0, #1
 80100ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d2:	68a3      	ldr	r3, [r4, #8]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	706b      	strb	r3, [r5, #1]
 80100d8:	e7c2      	b.n	8010060 <ucdr_deserialize_int16_t+0x58>
 80100da:	4639      	mov	r1, r7
 80100dc:	4632      	mov	r2, r6
 80100de:	4628      	mov	r0, r5
 80100e0:	f008 f906 	bl	80182f0 <memcpy>
 80100e4:	68a1      	ldr	r1, [r4, #8]
 80100e6:	464a      	mov	r2, r9
 80100e8:	19a8      	adds	r0, r5, r6
 80100ea:	f008 f901 	bl	80182f0 <memcpy>
 80100ee:	e7b7      	b.n	8010060 <ucdr_deserialize_int16_t+0x58>

080100f0 <ucdr_serialize_int32_t>:
 80100f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f4:	b082      	sub	sp, #8
 80100f6:	4604      	mov	r4, r0
 80100f8:	9101      	str	r1, [sp, #4]
 80100fa:	2104      	movs	r1, #4
 80100fc:	f000 f980 	bl	8010400 <ucdr_buffer_alignment>
 8010100:	4601      	mov	r1, r0
 8010102:	4620      	mov	r0, r4
 8010104:	7d67      	ldrb	r7, [r4, #21]
 8010106:	f000 f9bf 	bl	8010488 <ucdr_advance_buffer>
 801010a:	2104      	movs	r1, #4
 801010c:	4620      	mov	r0, r4
 801010e:	f000 f917 	bl	8010340 <ucdr_check_buffer_available_for>
 8010112:	2800      	cmp	r0, #0
 8010114:	d139      	bne.n	801018a <ucdr_serialize_int32_t+0x9a>
 8010116:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801011a:	42ab      	cmp	r3, r5
 801011c:	d930      	bls.n	8010180 <ucdr_serialize_int32_t+0x90>
 801011e:	1b5e      	subs	r6, r3, r5
 8010120:	60a3      	str	r3, [r4, #8]
 8010122:	6923      	ldr	r3, [r4, #16]
 8010124:	f1c6 0804 	rsb	r8, r6, #4
 8010128:	4433      	add	r3, r6
 801012a:	6123      	str	r3, [r4, #16]
 801012c:	4641      	mov	r1, r8
 801012e:	4620      	mov	r0, r4
 8010130:	f000 f912 	bl	8010358 <ucdr_check_final_buffer_behavior>
 8010134:	2800      	cmp	r0, #0
 8010136:	d04c      	beq.n	80101d2 <ucdr_serialize_int32_t+0xe2>
 8010138:	7d23      	ldrb	r3, [r4, #20]
 801013a:	2b01      	cmp	r3, #1
 801013c:	d063      	beq.n	8010206 <ucdr_serialize_int32_t+0x116>
 801013e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010142:	702b      	strb	r3, [r5, #0]
 8010144:	2e00      	cmp	r6, #0
 8010146:	d051      	beq.n	80101ec <ucdr_serialize_int32_t+0xfc>
 8010148:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801014c:	706b      	strb	r3, [r5, #1]
 801014e:	2e01      	cmp	r6, #1
 8010150:	d050      	beq.n	80101f4 <ucdr_serialize_int32_t+0x104>
 8010152:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010156:	70ab      	strb	r3, [r5, #2]
 8010158:	2e02      	cmp	r6, #2
 801015a:	d04f      	beq.n	80101fc <ucdr_serialize_int32_t+0x10c>
 801015c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010160:	70eb      	strb	r3, [r5, #3]
 8010162:	6923      	ldr	r3, [r4, #16]
 8010164:	68a2      	ldr	r2, [r4, #8]
 8010166:	7da0      	ldrb	r0, [r4, #22]
 8010168:	3304      	adds	r3, #4
 801016a:	1b9e      	subs	r6, r3, r6
 801016c:	4442      	add	r2, r8
 801016e:	2304      	movs	r3, #4
 8010170:	f080 0001 	eor.w	r0, r0, #1
 8010174:	60a2      	str	r2, [r4, #8]
 8010176:	6126      	str	r6, [r4, #16]
 8010178:	7563      	strb	r3, [r4, #21]
 801017a:	b002      	add	sp, #8
 801017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010180:	2104      	movs	r1, #4
 8010182:	4620      	mov	r0, r4
 8010184:	f000 f8e8 	bl	8010358 <ucdr_check_final_buffer_behavior>
 8010188:	b1d0      	cbz	r0, 80101c0 <ucdr_serialize_int32_t+0xd0>
 801018a:	7d23      	ldrb	r3, [r4, #20]
 801018c:	2b01      	cmp	r3, #1
 801018e:	68a3      	ldr	r3, [r4, #8]
 8010190:	d01c      	beq.n	80101cc <ucdr_serialize_int32_t+0xdc>
 8010192:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010196:	701a      	strb	r2, [r3, #0]
 8010198:	68a3      	ldr	r3, [r4, #8]
 801019a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801019e:	705a      	strb	r2, [r3, #1]
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80101a6:	709a      	strb	r2, [r3, #2]
 80101a8:	68a3      	ldr	r3, [r4, #8]
 80101aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80101ae:	70da      	strb	r2, [r3, #3]
 80101b0:	68a2      	ldr	r2, [r4, #8]
 80101b2:	6923      	ldr	r3, [r4, #16]
 80101b4:	3204      	adds	r2, #4
 80101b6:	3304      	adds	r3, #4
 80101b8:	2104      	movs	r1, #4
 80101ba:	60a2      	str	r2, [r4, #8]
 80101bc:	6123      	str	r3, [r4, #16]
 80101be:	7561      	strb	r1, [r4, #21]
 80101c0:	7da0      	ldrb	r0, [r4, #22]
 80101c2:	f080 0001 	eor.w	r0, r0, #1
 80101c6:	b002      	add	sp, #8
 80101c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101cc:	9a01      	ldr	r2, [sp, #4]
 80101ce:	601a      	str	r2, [r3, #0]
 80101d0:	e7ee      	b.n	80101b0 <ucdr_serialize_int32_t+0xc0>
 80101d2:	68a2      	ldr	r2, [r4, #8]
 80101d4:	6923      	ldr	r3, [r4, #16]
 80101d6:	7da0      	ldrb	r0, [r4, #22]
 80101d8:	7567      	strb	r7, [r4, #21]
 80101da:	1b92      	subs	r2, r2, r6
 80101dc:	1b9b      	subs	r3, r3, r6
 80101de:	f080 0001 	eor.w	r0, r0, #1
 80101e2:	60a2      	str	r2, [r4, #8]
 80101e4:	6123      	str	r3, [r4, #16]
 80101e6:	b002      	add	sp, #8
 80101e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ec:	68a3      	ldr	r3, [r4, #8]
 80101ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80101f2:	701a      	strb	r2, [r3, #0]
 80101f4:	68a3      	ldr	r3, [r4, #8]
 80101f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80101fa:	701a      	strb	r2, [r3, #0]
 80101fc:	68a3      	ldr	r3, [r4, #8]
 80101fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010202:	701a      	strb	r2, [r3, #0]
 8010204:	e7ad      	b.n	8010162 <ucdr_serialize_int32_t+0x72>
 8010206:	4628      	mov	r0, r5
 8010208:	ad01      	add	r5, sp, #4
 801020a:	4629      	mov	r1, r5
 801020c:	4632      	mov	r2, r6
 801020e:	f008 f86f 	bl	80182f0 <memcpy>
 8010212:	68a0      	ldr	r0, [r4, #8]
 8010214:	4642      	mov	r2, r8
 8010216:	19a9      	adds	r1, r5, r6
 8010218:	f008 f86a 	bl	80182f0 <memcpy>
 801021c:	e7a1      	b.n	8010162 <ucdr_serialize_int32_t+0x72>
 801021e:	bf00      	nop

08010220 <ucdr_deserialize_int32_t>:
 8010220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010224:	460d      	mov	r5, r1
 8010226:	2104      	movs	r1, #4
 8010228:	4604      	mov	r4, r0
 801022a:	f000 f8e9 	bl	8010400 <ucdr_buffer_alignment>
 801022e:	4601      	mov	r1, r0
 8010230:	4620      	mov	r0, r4
 8010232:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010236:	f000 f927 	bl	8010488 <ucdr_advance_buffer>
 801023a:	2104      	movs	r1, #4
 801023c:	4620      	mov	r0, r4
 801023e:	f000 f87f 	bl	8010340 <ucdr_check_buffer_available_for>
 8010242:	2800      	cmp	r0, #0
 8010244:	d138      	bne.n	80102b8 <ucdr_deserialize_int32_t+0x98>
 8010246:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801024a:	42b7      	cmp	r7, r6
 801024c:	d92f      	bls.n	80102ae <ucdr_deserialize_int32_t+0x8e>
 801024e:	6923      	ldr	r3, [r4, #16]
 8010250:	60a7      	str	r7, [r4, #8]
 8010252:	1bbf      	subs	r7, r7, r6
 8010254:	443b      	add	r3, r7
 8010256:	f1c7 0904 	rsb	r9, r7, #4
 801025a:	6123      	str	r3, [r4, #16]
 801025c:	4649      	mov	r1, r9
 801025e:	4620      	mov	r0, r4
 8010260:	f000 f87a 	bl	8010358 <ucdr_check_final_buffer_behavior>
 8010264:	2800      	cmp	r0, #0
 8010266:	d046      	beq.n	80102f6 <ucdr_deserialize_int32_t+0xd6>
 8010268:	7d23      	ldrb	r3, [r4, #20]
 801026a:	2b01      	cmp	r3, #1
 801026c:	d05c      	beq.n	8010328 <ucdr_deserialize_int32_t+0x108>
 801026e:	78f3      	ldrb	r3, [r6, #3]
 8010270:	702b      	strb	r3, [r5, #0]
 8010272:	2f00      	cmp	r7, #0
 8010274:	d04c      	beq.n	8010310 <ucdr_deserialize_int32_t+0xf0>
 8010276:	78b3      	ldrb	r3, [r6, #2]
 8010278:	706b      	strb	r3, [r5, #1]
 801027a:	2f01      	cmp	r7, #1
 801027c:	f105 0302 	add.w	r3, r5, #2
 8010280:	d04a      	beq.n	8010318 <ucdr_deserialize_int32_t+0xf8>
 8010282:	7873      	ldrb	r3, [r6, #1]
 8010284:	70ab      	strb	r3, [r5, #2]
 8010286:	2f02      	cmp	r7, #2
 8010288:	f105 0303 	add.w	r3, r5, #3
 801028c:	d048      	beq.n	8010320 <ucdr_deserialize_int32_t+0x100>
 801028e:	7833      	ldrb	r3, [r6, #0]
 8010290:	70eb      	strb	r3, [r5, #3]
 8010292:	6923      	ldr	r3, [r4, #16]
 8010294:	68a2      	ldr	r2, [r4, #8]
 8010296:	7da0      	ldrb	r0, [r4, #22]
 8010298:	2104      	movs	r1, #4
 801029a:	3304      	adds	r3, #4
 801029c:	444a      	add	r2, r9
 801029e:	1bdb      	subs	r3, r3, r7
 80102a0:	7561      	strb	r1, [r4, #21]
 80102a2:	60a2      	str	r2, [r4, #8]
 80102a4:	6123      	str	r3, [r4, #16]
 80102a6:	f080 0001 	eor.w	r0, r0, #1
 80102aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102ae:	2104      	movs	r1, #4
 80102b0:	4620      	mov	r0, r4
 80102b2:	f000 f851 	bl	8010358 <ucdr_check_final_buffer_behavior>
 80102b6:	b1b0      	cbz	r0, 80102e6 <ucdr_deserialize_int32_t+0xc6>
 80102b8:	7d23      	ldrb	r3, [r4, #20]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	68a3      	ldr	r3, [r4, #8]
 80102be:	d017      	beq.n	80102f0 <ucdr_deserialize_int32_t+0xd0>
 80102c0:	78db      	ldrb	r3, [r3, #3]
 80102c2:	702b      	strb	r3, [r5, #0]
 80102c4:	68a3      	ldr	r3, [r4, #8]
 80102c6:	789b      	ldrb	r3, [r3, #2]
 80102c8:	706b      	strb	r3, [r5, #1]
 80102ca:	68a3      	ldr	r3, [r4, #8]
 80102cc:	785b      	ldrb	r3, [r3, #1]
 80102ce:	70ab      	strb	r3, [r5, #2]
 80102d0:	68a3      	ldr	r3, [r4, #8]
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	70eb      	strb	r3, [r5, #3]
 80102d6:	68a2      	ldr	r2, [r4, #8]
 80102d8:	6923      	ldr	r3, [r4, #16]
 80102da:	3204      	adds	r2, #4
 80102dc:	3304      	adds	r3, #4
 80102de:	2104      	movs	r1, #4
 80102e0:	60a2      	str	r2, [r4, #8]
 80102e2:	6123      	str	r3, [r4, #16]
 80102e4:	7561      	strb	r1, [r4, #21]
 80102e6:	7da0      	ldrb	r0, [r4, #22]
 80102e8:	f080 0001 	eor.w	r0, r0, #1
 80102ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	602b      	str	r3, [r5, #0]
 80102f4:	e7ef      	b.n	80102d6 <ucdr_deserialize_int32_t+0xb6>
 80102f6:	68a2      	ldr	r2, [r4, #8]
 80102f8:	6923      	ldr	r3, [r4, #16]
 80102fa:	7da0      	ldrb	r0, [r4, #22]
 80102fc:	f884 8015 	strb.w	r8, [r4, #21]
 8010300:	1bd2      	subs	r2, r2, r7
 8010302:	1bdb      	subs	r3, r3, r7
 8010304:	60a2      	str	r2, [r4, #8]
 8010306:	6123      	str	r3, [r4, #16]
 8010308:	f080 0001 	eor.w	r0, r0, #1
 801030c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010310:	68a3      	ldr	r3, [r4, #8]
 8010312:	789b      	ldrb	r3, [r3, #2]
 8010314:	706b      	strb	r3, [r5, #1]
 8010316:	1cab      	adds	r3, r5, #2
 8010318:	68a2      	ldr	r2, [r4, #8]
 801031a:	7852      	ldrb	r2, [r2, #1]
 801031c:	f803 2b01 	strb.w	r2, [r3], #1
 8010320:	68a2      	ldr	r2, [r4, #8]
 8010322:	7812      	ldrb	r2, [r2, #0]
 8010324:	701a      	strb	r2, [r3, #0]
 8010326:	e7b4      	b.n	8010292 <ucdr_deserialize_int32_t+0x72>
 8010328:	4631      	mov	r1, r6
 801032a:	463a      	mov	r2, r7
 801032c:	4628      	mov	r0, r5
 801032e:	f007 ffdf 	bl	80182f0 <memcpy>
 8010332:	68a1      	ldr	r1, [r4, #8]
 8010334:	464a      	mov	r2, r9
 8010336:	19e8      	adds	r0, r5, r7
 8010338:	f007 ffda 	bl	80182f0 <memcpy>
 801033c:	e7a9      	b.n	8010292 <ucdr_deserialize_int32_t+0x72>
 801033e:	bf00      	nop

08010340 <ucdr_check_buffer_available_for>:
 8010340:	7d83      	ldrb	r3, [r0, #22]
 8010342:	b93b      	cbnz	r3, 8010354 <ucdr_check_buffer_available_for+0x14>
 8010344:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010348:	4419      	add	r1, r3
 801034a:	4288      	cmp	r0, r1
 801034c:	bf34      	ite	cc
 801034e:	2000      	movcc	r0, #0
 8010350:	2001      	movcs	r0, #1
 8010352:	4770      	bx	lr
 8010354:	2000      	movs	r0, #0
 8010356:	4770      	bx	lr

08010358 <ucdr_check_final_buffer_behavior>:
 8010358:	7d83      	ldrb	r3, [r0, #22]
 801035a:	b943      	cbnz	r3, 801036e <ucdr_check_final_buffer_behavior+0x16>
 801035c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010360:	4291      	cmp	r1, r2
 8010362:	b510      	push	{r4, lr}
 8010364:	4604      	mov	r4, r0
 8010366:	d205      	bcs.n	8010374 <ucdr_check_final_buffer_behavior+0x1c>
 8010368:	2301      	movs	r3, #1
 801036a:	4618      	mov	r0, r3
 801036c:	bd10      	pop	{r4, pc}
 801036e:	2300      	movs	r3, #0
 8010370:	4618      	mov	r0, r3
 8010372:	4770      	bx	lr
 8010374:	6982      	ldr	r2, [r0, #24]
 8010376:	b13a      	cbz	r2, 8010388 <ucdr_check_final_buffer_behavior+0x30>
 8010378:	69c1      	ldr	r1, [r0, #28]
 801037a:	4790      	blx	r2
 801037c:	f080 0301 	eor.w	r3, r0, #1
 8010380:	b2db      	uxtb	r3, r3
 8010382:	75a0      	strb	r0, [r4, #22]
 8010384:	4618      	mov	r0, r3
 8010386:	bd10      	pop	{r4, pc}
 8010388:	2001      	movs	r0, #1
 801038a:	75a0      	strb	r0, [r4, #22]
 801038c:	e7fa      	b.n	8010384 <ucdr_check_final_buffer_behavior+0x2c>
 801038e:	bf00      	nop

08010390 <ucdr_set_on_full_buffer_callback>:
 8010390:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop

08010398 <ucdr_init_buffer_origin_offset_endian>:
 8010398:	b410      	push	{r4}
 801039a:	9c01      	ldr	r4, [sp, #4]
 801039c:	6001      	str	r1, [r0, #0]
 801039e:	440a      	add	r2, r1
 80103a0:	6042      	str	r2, [r0, #4]
 80103a2:	190a      	adds	r2, r1, r4
 80103a4:	441c      	add	r4, r3
 80103a6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80103aa:	6082      	str	r2, [r0, #8]
 80103ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80103b0:	7503      	strb	r3, [r0, #20]
 80103b2:	2200      	movs	r2, #0
 80103b4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80103b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103bc:	7542      	strb	r2, [r0, #21]
 80103be:	7582      	strb	r2, [r0, #22]
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop

080103c4 <ucdr_init_buffer_origin_offset>:
 80103c4:	b510      	push	{r4, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	9c04      	ldr	r4, [sp, #16]
 80103ca:	9400      	str	r4, [sp, #0]
 80103cc:	2401      	movs	r4, #1
 80103ce:	9401      	str	r4, [sp, #4]
 80103d0:	f7ff ffe2 	bl	8010398 <ucdr_init_buffer_origin_offset_endian>
 80103d4:	b002      	add	sp, #8
 80103d6:	bd10      	pop	{r4, pc}

080103d8 <ucdr_init_buffer_origin>:
 80103d8:	b510      	push	{r4, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	2400      	movs	r4, #0
 80103de:	9400      	str	r4, [sp, #0]
 80103e0:	f7ff fff0 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 80103e4:	b002      	add	sp, #8
 80103e6:	bd10      	pop	{r4, pc}

080103e8 <ucdr_init_buffer>:
 80103e8:	2300      	movs	r3, #0
 80103ea:	f7ff bff5 	b.w	80103d8 <ucdr_init_buffer_origin>
 80103ee:	bf00      	nop

080103f0 <ucdr_alignment>:
 80103f0:	fbb0 f3f1 	udiv	r3, r0, r1
 80103f4:	fb03 0011 	mls	r0, r3, r1, r0
 80103f8:	1a08      	subs	r0, r1, r0
 80103fa:	3901      	subs	r1, #1
 80103fc:	4008      	ands	r0, r1
 80103fe:	4770      	bx	lr

08010400 <ucdr_buffer_alignment>:
 8010400:	7d43      	ldrb	r3, [r0, #21]
 8010402:	428b      	cmp	r3, r1
 8010404:	d208      	bcs.n	8010418 <ucdr_buffer_alignment+0x18>
 8010406:	6900      	ldr	r0, [r0, #16]
 8010408:	fbb0 f3f1 	udiv	r3, r0, r1
 801040c:	fb01 0013 	mls	r0, r1, r3, r0
 8010410:	1a08      	subs	r0, r1, r0
 8010412:	3901      	subs	r1, #1
 8010414:	4008      	ands	r0, r1
 8010416:	4770      	bx	lr
 8010418:	2000      	movs	r0, #0
 801041a:	4770      	bx	lr

0801041c <ucdr_align_to>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4604      	mov	r4, r0
 8010420:	460d      	mov	r5, r1
 8010422:	f7ff ffed 	bl	8010400 <ucdr_buffer_alignment>
 8010426:	68a3      	ldr	r3, [r4, #8]
 8010428:	6921      	ldr	r1, [r4, #16]
 801042a:	7565      	strb	r5, [r4, #21]
 801042c:	181a      	adds	r2, r3, r0
 801042e:	6863      	ldr	r3, [r4, #4]
 8010430:	4293      	cmp	r3, r2
 8010432:	4408      	add	r0, r1
 8010434:	bf28      	it	cs
 8010436:	4613      	movcs	r3, r2
 8010438:	6120      	str	r0, [r4, #16]
 801043a:	60a3      	str	r3, [r4, #8]
 801043c:	bd38      	pop	{r3, r4, r5, pc}
 801043e:	bf00      	nop

08010440 <ucdr_buffer_length>:
 8010440:	6882      	ldr	r2, [r0, #8]
 8010442:	6800      	ldr	r0, [r0, #0]
 8010444:	1a10      	subs	r0, r2, r0
 8010446:	4770      	bx	lr

08010448 <ucdr_buffer_remaining>:
 8010448:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801044c:	1a10      	subs	r0, r2, r0
 801044e:	4770      	bx	lr

08010450 <ucdr_check_final_buffer_behavior_array>:
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	7d83      	ldrb	r3, [r0, #22]
 8010454:	b963      	cbnz	r3, 8010470 <ucdr_check_final_buffer_behavior_array+0x20>
 8010456:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801045a:	429a      	cmp	r2, r3
 801045c:	4604      	mov	r4, r0
 801045e:	460d      	mov	r5, r1
 8010460:	d308      	bcc.n	8010474 <ucdr_check_final_buffer_behavior_array+0x24>
 8010462:	b139      	cbz	r1, 8010474 <ucdr_check_final_buffer_behavior_array+0x24>
 8010464:	6983      	ldr	r3, [r0, #24]
 8010466:	b163      	cbz	r3, 8010482 <ucdr_check_final_buffer_behavior_array+0x32>
 8010468:	69c1      	ldr	r1, [r0, #28]
 801046a:	4798      	blx	r3
 801046c:	75a0      	strb	r0, [r4, #22]
 801046e:	b108      	cbz	r0, 8010474 <ucdr_check_final_buffer_behavior_array+0x24>
 8010470:	2000      	movs	r0, #0
 8010472:	bd38      	pop	{r3, r4, r5, pc}
 8010474:	4620      	mov	r0, r4
 8010476:	f7ff ffe7 	bl	8010448 <ucdr_buffer_remaining>
 801047a:	42a8      	cmp	r0, r5
 801047c:	bf28      	it	cs
 801047e:	4628      	movcs	r0, r5
 8010480:	bd38      	pop	{r3, r4, r5, pc}
 8010482:	2301      	movs	r3, #1
 8010484:	7583      	strb	r3, [r0, #22]
 8010486:	e7f3      	b.n	8010470 <ucdr_check_final_buffer_behavior_array+0x20>

08010488 <ucdr_advance_buffer>:
 8010488:	b538      	push	{r3, r4, r5, lr}
 801048a:	4604      	mov	r4, r0
 801048c:	460d      	mov	r5, r1
 801048e:	f7ff ff57 	bl	8010340 <ucdr_check_buffer_available_for>
 8010492:	b178      	cbz	r0, 80104b4 <ucdr_advance_buffer+0x2c>
 8010494:	6923      	ldr	r3, [r4, #16]
 8010496:	68a2      	ldr	r2, [r4, #8]
 8010498:	442b      	add	r3, r5
 801049a:	6123      	str	r3, [r4, #16]
 801049c:	2301      	movs	r3, #1
 801049e:	442a      	add	r2, r5
 80104a0:	7563      	strb	r3, [r4, #21]
 80104a2:	60a2      	str	r2, [r4, #8]
 80104a4:	bd38      	pop	{r3, r4, r5, pc}
 80104a6:	68a2      	ldr	r2, [r4, #8]
 80104a8:	6923      	ldr	r3, [r4, #16]
 80104aa:	4402      	add	r2, r0
 80104ac:	4403      	add	r3, r0
 80104ae:	1a2d      	subs	r5, r5, r0
 80104b0:	60a2      	str	r2, [r4, #8]
 80104b2:	6123      	str	r3, [r4, #16]
 80104b4:	4629      	mov	r1, r5
 80104b6:	2201      	movs	r2, #1
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7ff ffc9 	bl	8010450 <ucdr_check_final_buffer_behavior_array>
 80104be:	2800      	cmp	r0, #0
 80104c0:	d1f1      	bne.n	80104a6 <ucdr_advance_buffer+0x1e>
 80104c2:	2301      	movs	r3, #1
 80104c4:	7563      	strb	r3, [r4, #21]
 80104c6:	bd38      	pop	{r3, r4, r5, pc}

080104c8 <uxr_buffer_delete_entity>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	2300      	movs	r3, #0
 80104cc:	b08e      	sub	sp, #56	; 0x38
 80104ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80104d2:	2303      	movs	r3, #3
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	2204      	movs	r2, #4
 80104d8:	ab06      	add	r3, sp, #24
 80104da:	4604      	mov	r4, r0
 80104dc:	9103      	str	r1, [sp, #12]
 80104de:	f001 f917 	bl	8011710 <uxr_prepare_stream_to_write_submessage>
 80104e2:	b918      	cbnz	r0, 80104ec <uxr_buffer_delete_entity+0x24>
 80104e4:	4604      	mov	r4, r0
 80104e6:	4620      	mov	r0, r4
 80104e8:	b00e      	add	sp, #56	; 0x38
 80104ea:	bd10      	pop	{r4, pc}
 80104ec:	9902      	ldr	r1, [sp, #8]
 80104ee:	aa05      	add	r2, sp, #20
 80104f0:	4620      	mov	r0, r4
 80104f2:	f001 fa43 	bl	801197c <uxr_init_base_object_request>
 80104f6:	a905      	add	r1, sp, #20
 80104f8:	4604      	mov	r4, r0
 80104fa:	a806      	add	r0, sp, #24
 80104fc:	f002 fc94 	bl	8012e28 <uxr_serialize_DELETE_Payload>
 8010500:	4620      	mov	r0, r4
 8010502:	b00e      	add	sp, #56	; 0x38
 8010504:	bd10      	pop	{r4, pc}
 8010506:	bf00      	nop

08010508 <uxr_common_create_entity>:
 8010508:	b510      	push	{r4, lr}
 801050a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801050e:	b08c      	sub	sp, #48	; 0x30
 8010510:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010514:	f1bc 0f01 	cmp.w	ip, #1
 8010518:	bf0c      	ite	eq
 801051a:	f003 0201 	andeq.w	r2, r3, #1
 801051e:	2200      	movne	r2, #0
 8010520:	330e      	adds	r3, #14
 8010522:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8010526:	9101      	str	r1, [sp, #4]
 8010528:	441a      	add	r2, r3
 801052a:	2301      	movs	r3, #1
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	9903      	ldr	r1, [sp, #12]
 8010530:	ab04      	add	r3, sp, #16
 8010532:	b292      	uxth	r2, r2
 8010534:	4604      	mov	r4, r0
 8010536:	f001 f8eb 	bl	8011710 <uxr_prepare_stream_to_write_submessage>
 801053a:	b918      	cbnz	r0, 8010544 <uxr_common_create_entity+0x3c>
 801053c:	4604      	mov	r4, r0
 801053e:	4620      	mov	r0, r4
 8010540:	b00c      	add	sp, #48	; 0x30
 8010542:	bd10      	pop	{r4, pc}
 8010544:	9902      	ldr	r1, [sp, #8]
 8010546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010548:	4620      	mov	r0, r4
 801054a:	f001 fa17 	bl	801197c <uxr_init_base_object_request>
 801054e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010550:	4604      	mov	r4, r0
 8010552:	a804      	add	r0, sp, #16
 8010554:	f002 fbc4 	bl	8012ce0 <uxr_serialize_CREATE_Payload>
 8010558:	4620      	mov	r0, r4
 801055a:	b00c      	add	sp, #48	; 0x30
 801055c:	bd10      	pop	{r4, pc}
 801055e:	bf00      	nop

08010560 <uxr_buffer_create_participant_bin>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010566:	ac11      	add	r4, sp, #68	; 0x44
 8010568:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801056c:	2303      	movs	r3, #3
 801056e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010572:	7223      	strb	r3, [r4, #8]
 8010574:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8010576:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 801057a:	2201      	movs	r2, #1
 801057c:	2100      	movs	r1, #0
 801057e:	4605      	mov	r5, r0
 8010580:	7122      	strb	r2, [r4, #4]
 8010582:	f88d 1014 	strb.w	r1, [sp, #20]
 8010586:	b1cb      	cbz	r3, 80105bc <uxr_buffer_create_participant_bin+0x5c>
 8010588:	f88d 201c 	strb.w	r2, [sp, #28]
 801058c:	9308      	str	r3, [sp, #32]
 801058e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010592:	a915      	add	r1, sp, #84	; 0x54
 8010594:	a809      	add	r0, sp, #36	; 0x24
 8010596:	f7ff ff27 	bl	80103e8 <ucdr_init_buffer>
 801059a:	a905      	add	r1, sp, #20
 801059c:	a809      	add	r0, sp, #36	; 0x24
 801059e:	f001 ff81 	bl	80124a4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80105a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105a4:	9600      	str	r6, [sp, #0]
 80105a6:	9401      	str	r4, [sp, #4]
 80105a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80105ac:	60e3      	str	r3, [r4, #12]
 80105ae:	4628      	mov	r0, r5
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	f7ff ffa9 	bl	8010508 <uxr_common_create_entity>
 80105b6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	f88d 301c 	strb.w	r3, [sp, #28]
 80105c0:	e7e5      	b.n	801058e <uxr_buffer_create_participant_bin+0x2e>
 80105c2:	bf00      	nop

080105c4 <uxr_buffer_create_topic_bin>:
 80105c4:	b570      	push	{r4, r5, r6, lr}
 80105c6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80105ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80105ce:	9105      	str	r1, [sp, #20]
 80105d0:	4605      	mov	r5, r0
 80105d2:	a997      	add	r1, sp, #604	; 0x25c
 80105d4:	4618      	mov	r0, r3
 80105d6:	2302      	movs	r3, #2
 80105d8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 80105dc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80105e0:	f000 f996 	bl	8010910 <uxr_object_id_to_raw>
 80105e4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 80105e6:	9306      	str	r3, [sp, #24]
 80105e8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80105ea:	930a      	str	r3, [sp, #40]	; 0x28
 80105ec:	2303      	movs	r3, #3
 80105ee:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80105f2:	2301      	movs	r3, #1
 80105f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80105fc:	a917      	add	r1, sp, #92	; 0x5c
 80105fe:	2300      	movs	r3, #0
 8010600:	a80b      	add	r0, sp, #44	; 0x2c
 8010602:	f88d 301c 	strb.w	r3, [sp, #28]
 8010606:	f7ff feef 	bl	80103e8 <ucdr_init_buffer>
 801060a:	a906      	add	r1, sp, #24
 801060c:	a80b      	add	r0, sp, #44	; 0x2c
 801060e:	f001 ff6b 	bl	80124e8 <uxr_serialize_OBJK_Topic_Binary>
 8010612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010614:	9316      	str	r3, [sp, #88]	; 0x58
 8010616:	ac13      	add	r4, sp, #76	; 0x4c
 8010618:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801061c:	9600      	str	r6, [sp, #0]
 801061e:	9401      	str	r4, [sp, #4]
 8010620:	b29b      	uxth	r3, r3
 8010622:	4628      	mov	r0, r5
 8010624:	f7ff ff70 	bl	8010508 <uxr_common_create_entity>
 8010628:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 801062c:	bd70      	pop	{r4, r5, r6, pc}
 801062e:	bf00      	nop

08010630 <uxr_buffer_create_publisher_bin>:
 8010630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010632:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010636:	4605      	mov	r5, r0
 8010638:	9105      	str	r1, [sp, #20]
 801063a:	4618      	mov	r0, r3
 801063c:	2603      	movs	r6, #3
 801063e:	a992      	add	r1, sp, #584	; 0x248
 8010640:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010644:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010648:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801064c:	f000 f960 	bl	8010910 <uxr_object_id_to_raw>
 8010650:	2300      	movs	r3, #0
 8010652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010656:	a912      	add	r1, sp, #72	; 0x48
 8010658:	a806      	add	r0, sp, #24
 801065a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801065e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010662:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010666:	f7ff febf 	bl	80103e8 <ucdr_init_buffer>
 801066a:	a993      	add	r1, sp, #588	; 0x24c
 801066c:	a806      	add	r0, sp, #24
 801066e:	f001 ffef 	bl	8012650 <uxr_serialize_OBJK_Publisher_Binary>
 8010672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010674:	9311      	str	r3, [sp, #68]	; 0x44
 8010676:	ac0e      	add	r4, sp, #56	; 0x38
 8010678:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801067c:	9700      	str	r7, [sp, #0]
 801067e:	9401      	str	r4, [sp, #4]
 8010680:	b29b      	uxth	r3, r3
 8010682:	4628      	mov	r0, r5
 8010684:	f7ff ff40 	bl	8010508 <uxr_common_create_entity>
 8010688:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801068e:	bf00      	nop

08010690 <uxr_buffer_create_subscriber_bin>:
 8010690:	b570      	push	{r4, r5, r6, lr}
 8010692:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8010696:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801069a:	9105      	str	r1, [sp, #20]
 801069c:	4605      	mov	r5, r0
 801069e:	a992      	add	r1, sp, #584	; 0x248
 80106a0:	4618      	mov	r0, r3
 80106a2:	2304      	movs	r3, #4
 80106a4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 80106a8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80106ac:	f000 f930 	bl	8010910 <uxr_object_id_to_raw>
 80106b0:	2300      	movs	r3, #0
 80106b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106b6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80106ba:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80106be:	a912      	add	r1, sp, #72	; 0x48
 80106c0:	2303      	movs	r3, #3
 80106c2:	a806      	add	r0, sp, #24
 80106c4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80106c8:	f7ff fe8e 	bl	80103e8 <ucdr_init_buffer>
 80106cc:	a993      	add	r1, sp, #588	; 0x24c
 80106ce:	a806      	add	r0, sp, #24
 80106d0:	f002 f86e 	bl	80127b0 <uxr_serialize_OBJK_Subscriber_Binary>
 80106d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d6:	9311      	str	r3, [sp, #68]	; 0x44
 80106d8:	ac0e      	add	r4, sp, #56	; 0x38
 80106da:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80106de:	9600      	str	r6, [sp, #0]
 80106e0:	9401      	str	r4, [sp, #4]
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	4628      	mov	r0, r5
 80106e6:	f7ff ff0f 	bl	8010508 <uxr_common_create_entity>
 80106ea:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 80106ee:	bd70      	pop	{r4, r5, r6, pc}

080106f0 <uxr_buffer_create_datawriter_bin>:
 80106f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80106f8:	ac1d      	add	r4, sp, #116	; 0x74
 80106fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106fe:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8010702:	9105      	str	r1, [sp, #20]
 8010704:	4606      	mov	r6, r0
 8010706:	a9a1      	add	r1, sp, #644	; 0x284
 8010708:	4618      	mov	r0, r3
 801070a:	2305      	movs	r3, #5
 801070c:	7123      	strb	r3, [r4, #4]
 801070e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8010712:	2703      	movs	r7, #3
 8010714:	f000 f8fc 	bl	8010910 <uxr_object_id_to_raw>
 8010718:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801071a:	7227      	strb	r7, [r4, #8]
 801071c:	a90e      	add	r1, sp, #56	; 0x38
 801071e:	f000 f8f7 	bl	8010910 <uxr_object_id_to_raw>
 8010722:	2300      	movs	r3, #0
 8010724:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010728:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 801072c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010730:	3d00      	subs	r5, #0
 8010732:	bf18      	it	ne
 8010734:	2501      	movne	r5, #1
 8010736:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801073a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801073e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010742:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010746:	2301      	movs	r3, #1
 8010748:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801074c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010750:	bb8a      	cbnz	r2, 80107b6 <uxr_buffer_create_datawriter_bin+0xc6>
 8010752:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010756:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801075a:	f04f 0c13 	mov.w	ip, #19
 801075e:	250b      	movs	r5, #11
 8010760:	2221      	movs	r2, #33	; 0x21
 8010762:	2111      	movs	r1, #17
 8010764:	2009      	movs	r0, #9
 8010766:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 801076a:	b923      	cbnz	r3, 8010776 <uxr_buffer_create_datawriter_bin+0x86>
 801076c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010770:	4672      	mov	r2, lr
 8010772:	4661      	mov	r1, ip
 8010774:	4628      	mov	r0, r5
 8010776:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 801077a:	2b01      	cmp	r3, #1
 801077c:	d025      	beq.n	80107ca <uxr_buffer_create_datawriter_bin+0xda>
 801077e:	2b03      	cmp	r3, #3
 8010780:	d029      	beq.n	80107d6 <uxr_buffer_create_datawriter_bin+0xe6>
 8010782:	b32b      	cbz	r3, 80107d0 <uxr_buffer_create_datawriter_bin+0xe0>
 8010784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010788:	a921      	add	r1, sp, #132	; 0x84
 801078a:	a806      	add	r0, sp, #24
 801078c:	f7ff fe2c 	bl	80103e8 <ucdr_init_buffer>
 8010790:	a90e      	add	r1, sp, #56	; 0x38
 8010792:	a806      	add	r0, sp, #24
 8010794:	f002 f8be 	bl	8012914 <uxr_serialize_OBJK_DataWriter_Binary>
 8010798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801079a:	f8cd 8000 	str.w	r8, [sp]
 801079e:	9401      	str	r4, [sp, #4]
 80107a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80107a4:	60e3      	str	r3, [r4, #12]
 80107a6:	4630      	mov	r0, r6
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	f7ff fead 	bl	8010508 <uxr_common_create_entity>
 80107ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80107b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80107ba:	f04f 0c12 	mov.w	ip, #18
 80107be:	250a      	movs	r5, #10
 80107c0:	2220      	movs	r2, #32
 80107c2:	2110      	movs	r1, #16
 80107c4:	2008      	movs	r0, #8
 80107c6:	2702      	movs	r7, #2
 80107c8:	e7cd      	b.n	8010766 <uxr_buffer_create_datawriter_bin+0x76>
 80107ca:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80107ce:	e7d9      	b.n	8010784 <uxr_buffer_create_datawriter_bin+0x94>
 80107d0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80107d4:	e7d6      	b.n	8010784 <uxr_buffer_create_datawriter_bin+0x94>
 80107d6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80107da:	e7d3      	b.n	8010784 <uxr_buffer_create_datawriter_bin+0x94>

080107dc <uxr_buffer_create_datareader_bin>:
 80107dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107e0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80107e4:	ac1f      	add	r4, sp, #124	; 0x7c
 80107e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80107ea:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 80107ee:	9105      	str	r1, [sp, #20]
 80107f0:	4606      	mov	r6, r0
 80107f2:	a9a3      	add	r1, sp, #652	; 0x28c
 80107f4:	4618      	mov	r0, r3
 80107f6:	2306      	movs	r3, #6
 80107f8:	7123      	strb	r3, [r4, #4]
 80107fa:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 80107fe:	2703      	movs	r7, #3
 8010800:	f000 f886 	bl	8010910 <uxr_object_id_to_raw>
 8010804:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8010806:	7227      	strb	r7, [r4, #8]
 8010808:	a90e      	add	r1, sp, #56	; 0x38
 801080a:	f000 f881 	bl	8010910 <uxr_object_id_to_raw>
 801080e:	2300      	movs	r3, #0
 8010810:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010814:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8010818:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 801081c:	3d00      	subs	r5, #0
 801081e:	bf18      	it	ne
 8010820:	2501      	movne	r5, #1
 8010822:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010826:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801082a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801082e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010832:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010836:	2301      	movs	r3, #1
 8010838:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801083c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010840:	bb8a      	cbnz	r2, 80108a6 <uxr_buffer_create_datareader_bin+0xca>
 8010842:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010846:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801084a:	f04f 0c13 	mov.w	ip, #19
 801084e:	250b      	movs	r5, #11
 8010850:	2221      	movs	r2, #33	; 0x21
 8010852:	2111      	movs	r1, #17
 8010854:	2009      	movs	r0, #9
 8010856:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 801085a:	b923      	cbnz	r3, 8010866 <uxr_buffer_create_datareader_bin+0x8a>
 801085c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010860:	4672      	mov	r2, lr
 8010862:	4661      	mov	r1, ip
 8010864:	4628      	mov	r0, r5
 8010866:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 801086a:	2b01      	cmp	r3, #1
 801086c:	d025      	beq.n	80108ba <uxr_buffer_create_datareader_bin+0xde>
 801086e:	2b03      	cmp	r3, #3
 8010870:	d029      	beq.n	80108c6 <uxr_buffer_create_datareader_bin+0xea>
 8010872:	b32b      	cbz	r3, 80108c0 <uxr_buffer_create_datareader_bin+0xe4>
 8010874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010878:	a923      	add	r1, sp, #140	; 0x8c
 801087a:	a806      	add	r0, sp, #24
 801087c:	f7ff fdb4 	bl	80103e8 <ucdr_init_buffer>
 8010880:	a90e      	add	r1, sp, #56	; 0x38
 8010882:	a806      	add	r0, sp, #24
 8010884:	f002 f80a 	bl	801289c <uxr_serialize_OBJK_DataReader_Binary>
 8010888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801088a:	f8cd 8000 	str.w	r8, [sp]
 801088e:	9401      	str	r4, [sp, #4]
 8010890:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010894:	60e3      	str	r3, [r4, #12]
 8010896:	4630      	mov	r0, r6
 8010898:	b29b      	uxth	r3, r3
 801089a:	f7ff fe35 	bl	8010508 <uxr_common_create_entity>
 801089e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80108a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80108aa:	f04f 0c12 	mov.w	ip, #18
 80108ae:	250a      	movs	r5, #10
 80108b0:	2220      	movs	r2, #32
 80108b2:	2110      	movs	r1, #16
 80108b4:	2008      	movs	r0, #8
 80108b6:	2702      	movs	r7, #2
 80108b8:	e7cd      	b.n	8010856 <uxr_buffer_create_datareader_bin+0x7a>
 80108ba:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80108be:	e7d9      	b.n	8010874 <uxr_buffer_create_datareader_bin+0x98>
 80108c0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80108c4:	e7d6      	b.n	8010874 <uxr_buffer_create_datareader_bin+0x98>
 80108c6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80108ca:	e7d3      	b.n	8010874 <uxr_buffer_create_datareader_bin+0x98>

080108cc <uxr_object_id>:
 80108cc:	b082      	sub	sp, #8
 80108ce:	2300      	movs	r3, #0
 80108d0:	f88d 1006 	strb.w	r1, [sp, #6]
 80108d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80108d8:	f360 030f 	bfi	r3, r0, #0, #16
 80108dc:	f362 431f 	bfi	r3, r2, #16, #16
 80108e0:	4618      	mov	r0, r3
 80108e2:	b002      	add	sp, #8
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop

080108e8 <uxr_object_id_from_raw>:
 80108e8:	7843      	ldrb	r3, [r0, #1]
 80108ea:	7801      	ldrb	r1, [r0, #0]
 80108ec:	b082      	sub	sp, #8
 80108ee:	f003 020f 	and.w	r2, r3, #15
 80108f2:	f88d 2006 	strb.w	r2, [sp, #6]
 80108f6:	091b      	lsrs	r3, r3, #4
 80108f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80108fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010900:	2000      	movs	r0, #0
 8010902:	f363 000f 	bfi	r0, r3, #0, #16
 8010906:	f362 401f 	bfi	r0, r2, #16, #16
 801090a:	b002      	add	sp, #8
 801090c:	4770      	bx	lr
 801090e:	bf00      	nop

08010910 <uxr_object_id_to_raw>:
 8010910:	4602      	mov	r2, r0
 8010912:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010916:	b082      	sub	sp, #8
 8010918:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801091c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010920:	f881 c000 	strb.w	ip, [r1]
 8010924:	7048      	strb	r0, [r1, #1]
 8010926:	b002      	add	sp, #8
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop

0801092c <on_get_fragmentation_info>:
 801092c:	b500      	push	{lr}
 801092e:	b08b      	sub	sp, #44	; 0x2c
 8010930:	4601      	mov	r1, r0
 8010932:	2204      	movs	r2, #4
 8010934:	a802      	add	r0, sp, #8
 8010936:	f7ff fd57 	bl	80103e8 <ucdr_init_buffer>
 801093a:	f10d 0305 	add.w	r3, sp, #5
 801093e:	f10d 0206 	add.w	r2, sp, #6
 8010942:	a901      	add	r1, sp, #4
 8010944:	a802      	add	r0, sp, #8
 8010946:	f001 f99b 	bl	8011c80 <uxr_read_submessage_header>
 801094a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801094e:	2b0d      	cmp	r3, #13
 8010950:	d003      	beq.n	801095a <on_get_fragmentation_info+0x2e>
 8010952:	2000      	movs	r0, #0
 8010954:	b00b      	add	sp, #44	; 0x2c
 8010956:	f85d fb04 	ldr.w	pc, [sp], #4
 801095a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801095e:	f013 0f02 	tst.w	r3, #2
 8010962:	bf14      	ite	ne
 8010964:	2002      	movne	r0, #2
 8010966:	2001      	moveq	r0, #1
 8010968:	b00b      	add	sp, #44	; 0x2c
 801096a:	f85d fb04 	ldr.w	pc, [sp], #4
 801096e:	bf00      	nop

08010970 <read_submessage_get_info>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	2500      	movs	r5, #0
 8010974:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010978:	4604      	mov	r4, r0
 801097a:	f44f 7224 	mov.w	r2, #656	; 0x290
 801097e:	460e      	mov	r6, r1
 8010980:	a810      	add	r0, sp, #64	; 0x40
 8010982:	4629      	mov	r1, r5
 8010984:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010988:	f007 fbea 	bl	8018160 <memset>
 801098c:	a903      	add	r1, sp, #12
 801098e:	4630      	mov	r0, r6
 8010990:	f002 fa36 	bl	8012e00 <uxr_deserialize_GET_INFO_Payload>
 8010994:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010998:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801099c:	4620      	mov	r0, r4
 801099e:	f000 ffe5 	bl	801196c <uxr_session_header_offset>
 80109a2:	462b      	mov	r3, r5
 80109a4:	9000      	str	r0, [sp, #0]
 80109a6:	220c      	movs	r2, #12
 80109a8:	a905      	add	r1, sp, #20
 80109aa:	a808      	add	r0, sp, #32
 80109ac:	f7ff fd0a 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 80109b0:	a910      	add	r1, sp, #64	; 0x40
 80109b2:	a808      	add	r0, sp, #32
 80109b4:	f002 fa96 	bl	8012ee4 <uxr_serialize_INFO_Payload>
 80109b8:	9b08      	ldr	r3, [sp, #32]
 80109ba:	462a      	mov	r2, r5
 80109bc:	4629      	mov	r1, r5
 80109be:	4620      	mov	r0, r4
 80109c0:	f000 ff7e 	bl	80118c0 <uxr_stamp_session_header>
 80109c4:	a808      	add	r0, sp, #32
 80109c6:	f7ff fd3b 	bl	8010440 <ucdr_buffer_length>
 80109ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80109cc:	4602      	mov	r2, r0
 80109ce:	a905      	add	r1, sp, #20
 80109d0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80109d4:	47a0      	blx	r4
 80109d6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80109da:	bd70      	pop	{r4, r5, r6, pc}

080109dc <write_submessage_acknack.isra.0>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	b092      	sub	sp, #72	; 0x48
 80109e0:	4605      	mov	r5, r0
 80109e2:	460e      	mov	r6, r1
 80109e4:	4614      	mov	r4, r2
 80109e6:	f000 ffc1 	bl	801196c <uxr_session_header_offset>
 80109ea:	a905      	add	r1, sp, #20
 80109ec:	9000      	str	r0, [sp, #0]
 80109ee:	2300      	movs	r3, #0
 80109f0:	a80a      	add	r0, sp, #40	; 0x28
 80109f2:	2211      	movs	r2, #17
 80109f4:	f7ff fce6 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 80109f8:	2218      	movs	r2, #24
 80109fa:	fb02 5404 	mla	r4, r2, r4, r5
 80109fe:	2300      	movs	r3, #0
 8010a00:	2205      	movs	r2, #5
 8010a02:	3450      	adds	r4, #80	; 0x50
 8010a04:	210a      	movs	r1, #10
 8010a06:	a80a      	add	r0, sp, #40	; 0x28
 8010a08:	f001 f920 	bl	8011c4c <uxr_buffer_submessage_header>
 8010a0c:	a903      	add	r1, sp, #12
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f005 fa02 	bl	8015e18 <uxr_compute_acknack>
 8010a14:	ba40      	rev16	r0, r0
 8010a16:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010a1a:	a903      	add	r1, sp, #12
 8010a1c:	a80a      	add	r0, sp, #40	; 0x28
 8010a1e:	f88d 6010 	strb.w	r6, [sp, #16]
 8010a22:	f002 facf 	bl	8012fc4 <uxr_serialize_ACKNACK_Payload>
 8010a26:	2200      	movs	r2, #0
 8010a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	f000 ff47 	bl	80118c0 <uxr_stamp_session_header>
 8010a32:	a80a      	add	r0, sp, #40	; 0x28
 8010a34:	f7ff fd04 	bl	8010440 <ucdr_buffer_length>
 8010a38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	a905      	add	r1, sp, #20
 8010a3e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010a42:	47a0      	blx	r4
 8010a44:	b012      	add	sp, #72	; 0x48
 8010a46:	bd70      	pop	{r4, r5, r6, pc}

08010a48 <uxr_init_session>:
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010a80 <uxr_init_session+0x38>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8010a54:	4604      	mov	r4, r0
 8010a56:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8010a5a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8010a5e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8010a62:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8010a66:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8010a6a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010a6e:	2181      	movs	r1, #129	; 0x81
 8010a70:	f000 fe92 	bl	8011798 <uxr_init_session_info>
 8010a74:	f104 0008 	add.w	r0, r4, #8
 8010a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a7c:	f001 b802 	b.w	8011a84 <uxr_init_stream_storage>
	...

08010a88 <uxr_set_status_callback>:
 8010a88:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop

08010a90 <uxr_set_topic_callback>:
 8010a90:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010a94:	4770      	bx	lr
 8010a96:	bf00      	nop

08010a98 <uxr_set_request_callback>:
 8010a98:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop

08010aa0 <uxr_set_reply_callback>:
 8010aa0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop

08010aa8 <uxr_create_output_best_effort_stream>:
 8010aa8:	b510      	push	{r4, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	e9cd 2100 	strd	r2, r1, [sp]
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	f000 ff5b 	bl	801196c <uxr_session_header_offset>
 8010ab6:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010aba:	4603      	mov	r3, r0
 8010abc:	f104 0008 	add.w	r0, r4, #8
 8010ac0:	b004      	add	sp, #16
 8010ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ac6:	f001 b827 	b.w	8011b18 <uxr_add_output_best_effort_buffer>
 8010aca:	bf00      	nop

08010acc <uxr_create_output_reliable_stream>:
 8010acc:	b510      	push	{r4, lr}
 8010ace:	b088      	sub	sp, #32
 8010ad0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	9303      	str	r3, [sp, #12]
 8010ad8:	f000 ff48 	bl	801196c <uxr_session_header_offset>
 8010adc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010ae0:	9000      	str	r0, [sp, #0]
 8010ae2:	9905      	ldr	r1, [sp, #20]
 8010ae4:	f104 0008 	add.w	r0, r4, #8
 8010ae8:	f001 f82a 	bl	8011b40 <uxr_add_output_reliable_buffer>
 8010aec:	2200      	movs	r2, #0
 8010aee:	b2c3      	uxtb	r3, r0
 8010af0:	f363 0207 	bfi	r2, r3, #0, #8
 8010af4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010af8:	f363 220f 	bfi	r2, r3, #8, #8
 8010afc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b00:	f363 4217 	bfi	r2, r3, #16, #8
 8010b04:	0e03      	lsrs	r3, r0, #24
 8010b06:	f363 621f 	bfi	r2, r3, #24, #8
 8010b0a:	4610      	mov	r0, r2
 8010b0c:	b008      	add	sp, #32
 8010b0e:	bd10      	pop	{r4, pc}

08010b10 <uxr_create_input_best_effort_stream>:
 8010b10:	b082      	sub	sp, #8
 8010b12:	3008      	adds	r0, #8
 8010b14:	b002      	add	sp, #8
 8010b16:	f001 b82d 	b.w	8011b74 <uxr_add_input_best_effort_buffer>
 8010b1a:	bf00      	nop

08010b1c <uxr_create_input_reliable_stream>:
 8010b1c:	b510      	push	{r4, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	4c0b      	ldr	r4, [pc, #44]	; (8010b50 <uxr_create_input_reliable_stream+0x34>)
 8010b22:	9400      	str	r4, [sp, #0]
 8010b24:	3008      	adds	r0, #8
 8010b26:	f001 f83b 	bl	8011ba0 <uxr_add_input_reliable_buffer>
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	b2c3      	uxtb	r3, r0
 8010b2e:	f363 0207 	bfi	r2, r3, #0, #8
 8010b32:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010b36:	f363 220f 	bfi	r2, r3, #8, #8
 8010b3a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b3e:	f363 4217 	bfi	r2, r3, #16, #8
 8010b42:	0e03      	lsrs	r3, r0, #24
 8010b44:	f363 621f 	bfi	r2, r3, #24, #8
 8010b48:	4610      	mov	r0, r2
 8010b4a:	b004      	add	sp, #16
 8010b4c:	bd10      	pop	{r4, pc}
 8010b4e:	bf00      	nop
 8010b50:	0801092d 	.word	0x0801092d

08010b54 <uxr_epoch_nanos>:
 8010b54:	b510      	push	{r4, lr}
 8010b56:	4604      	mov	r4, r0
 8010b58:	f001 f8d8 	bl	8011d0c <uxr_nanos>
 8010b5c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010b60:	1ac0      	subs	r0, r0, r3
 8010b62:	eb61 0102 	sbc.w	r1, r1, r2
 8010b66:	bd10      	pop	{r4, pc}

08010b68 <uxr_flash_output_streams>:
 8010b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b6c:	7e03      	ldrb	r3, [r0, #24]
 8010b6e:	b084      	sub	sp, #16
 8010b70:	4604      	mov	r4, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d035      	beq.n	8010be2 <uxr_flash_output_streams+0x7a>
 8010b76:	f04f 0900 	mov.w	r9, #0
 8010b7a:	4648      	mov	r0, r9
 8010b7c:	f10d 0802 	add.w	r8, sp, #2
 8010b80:	af03      	add	r7, sp, #12
 8010b82:	ae02      	add	r6, sp, #8
 8010b84:	e006      	b.n	8010b94 <uxr_flash_output_streams+0x2c>
 8010b86:	7e23      	ldrb	r3, [r4, #24]
 8010b88:	f109 0901 	add.w	r9, r9, #1
 8010b8c:	fa5f f089 	uxtb.w	r0, r9
 8010b90:	4283      	cmp	r3, r0
 8010b92:	d926      	bls.n	8010be2 <uxr_flash_output_streams+0x7a>
 8010b94:	2201      	movs	r2, #1
 8010b96:	4611      	mov	r1, r2
 8010b98:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010b9c:	f000 ff1e 	bl	80119dc <uxr_stream_id>
 8010ba0:	3508      	adds	r5, #8
 8010ba2:	4684      	mov	ip, r0
 8010ba4:	4643      	mov	r3, r8
 8010ba6:	463a      	mov	r2, r7
 8010ba8:	4631      	mov	r1, r6
 8010baa:	4628      	mov	r0, r5
 8010bac:	f8cd c004 	str.w	ip, [sp, #4]
 8010bb0:	f005 f9b8 	bl	8015f24 <uxr_prepare_best_effort_buffer_to_send>
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d0e6      	beq.n	8010b86 <uxr_flash_output_streams+0x1e>
 8010bb8:	9b02      	ldr	r3, [sp, #8]
 8010bba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010bbe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f000 fe7c 	bl	80118c0 <uxr_stamp_session_header>
 8010bc8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010bca:	9a03      	ldr	r2, [sp, #12]
 8010bcc:	685d      	ldr	r5, [r3, #4]
 8010bce:	6818      	ldr	r0, [r3, #0]
 8010bd0:	9902      	ldr	r1, [sp, #8]
 8010bd2:	47a8      	blx	r5
 8010bd4:	f109 0901 	add.w	r9, r9, #1
 8010bd8:	7e23      	ldrb	r3, [r4, #24]
 8010bda:	fa5f f089 	uxtb.w	r0, r9
 8010bde:	4283      	cmp	r3, r0
 8010be0:	d8d8      	bhi.n	8010b94 <uxr_flash_output_streams+0x2c>
 8010be2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010be6:	b38b      	cbz	r3, 8010c4c <uxr_flash_output_streams+0xe4>
 8010be8:	f04f 0900 	mov.w	r9, #0
 8010bec:	f10d 0802 	add.w	r8, sp, #2
 8010bf0:	af03      	add	r7, sp, #12
 8010bf2:	ae02      	add	r6, sp, #8
 8010bf4:	4648      	mov	r0, r9
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	2102      	movs	r1, #2
 8010bfa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010bfe:	f000 feed 	bl	80119dc <uxr_stream_id>
 8010c02:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010c06:	3520      	adds	r5, #32
 8010c08:	9001      	str	r0, [sp, #4]
 8010c0a:	e00d      	b.n	8010c28 <uxr_flash_output_streams+0xc0>
 8010c0c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010c10:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010c14:	9b02      	ldr	r3, [sp, #8]
 8010c16:	f000 fe53 	bl	80118c0 <uxr_stamp_session_header>
 8010c1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c1c:	9a03      	ldr	r2, [sp, #12]
 8010c1e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010c22:	9902      	ldr	r1, [sp, #8]
 8010c24:	6818      	ldr	r0, [r3, #0]
 8010c26:	47d0      	blx	sl
 8010c28:	4643      	mov	r3, r8
 8010c2a:	463a      	mov	r2, r7
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	4628      	mov	r0, r5
 8010c30:	f005 fb96 	bl	8016360 <uxr_prepare_next_reliable_buffer_to_send>
 8010c34:	4603      	mov	r3, r0
 8010c36:	4620      	mov	r0, r4
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1e7      	bne.n	8010c0c <uxr_flash_output_streams+0xa4>
 8010c3c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010c40:	f109 0901 	add.w	r9, r9, #1
 8010c44:	fa5f f089 	uxtb.w	r0, r9
 8010c48:	4283      	cmp	r3, r0
 8010c4a:	d8d4      	bhi.n	8010bf6 <uxr_flash_output_streams+0x8e>
 8010c4c:	b004      	add	sp, #16
 8010c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c52:	bf00      	nop

08010c54 <read_submessage_info>:
 8010c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c58:	460d      	mov	r5, r1
 8010c5a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010c5e:	4669      	mov	r1, sp
 8010c60:	4607      	mov	r7, r0
 8010c62:	4628      	mov	r0, r5
 8010c64:	f001 ffda 	bl	8012c1c <uxr_deserialize_BaseObjectReply>
 8010c68:	a902      	add	r1, sp, #8
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010c72:	f7fe fbf5 	bl	800f460 <ucdr_deserialize_bool>
 8010c76:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010c7a:	4004      	ands	r4, r0
 8010c7c:	b2e4      	uxtb	r4, r4
 8010c7e:	b95b      	cbnz	r3, 8010c98 <read_submessage_info+0x44>
 8010c80:	a987      	add	r1, sp, #540	; 0x21c
 8010c82:	4628      	mov	r0, r5
 8010c84:	f7fe fbec 	bl	800f460 <ucdr_deserialize_bool>
 8010c88:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8010c8c:	4606      	mov	r6, r0
 8010c8e:	b94b      	cbnz	r3, 8010ca4 <read_submessage_info+0x50>
 8010c90:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c98:	a903      	add	r1, sp, #12
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f001 fe66 	bl	801296c <uxr_deserialize_ObjectVariant>
 8010ca0:	4004      	ands	r4, r0
 8010ca2:	e7ed      	b.n	8010c80 <read_submessage_info+0x2c>
 8010ca4:	a988      	add	r1, sp, #544	; 0x220
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f7fe fc08 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8010cac:	4234      	tst	r4, r6
 8010cae:	d0ef      	beq.n	8010c90 <read_submessage_info+0x3c>
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d0ed      	beq.n	8010c90 <read_submessage_info+0x3c>
 8010cb4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8010cb8:	2b0d      	cmp	r3, #13
 8010cba:	d1e9      	bne.n	8010c90 <read_submessage_info+0x3c>
 8010cbc:	a98a      	add	r1, sp, #552	; 0x228
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f7ff f9a2 	bl	8010008 <ucdr_deserialize_int16_t>
 8010cc4:	b140      	cbz	r0, 8010cd8 <read_submessage_info+0x84>
 8010cc6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	dd07      	ble.n	8010cde <read_submessage_info+0x8a>
 8010cce:	f1b8 0f00 	cmp.w	r8, #0
 8010cd2:	bf14      	ite	ne
 8010cd4:	2001      	movne	r0, #1
 8010cd6:	2002      	moveq	r0, #2
 8010cd8:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8010cdc:	e7d8      	b.n	8010c90 <read_submessage_info+0x3c>
 8010cde:	2000      	movs	r0, #0
 8010ce0:	e7fa      	b.n	8010cd8 <read_submessage_info+0x84>
 8010ce2:	bf00      	nop

08010ce4 <read_submessage_list>:
 8010ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce8:	b097      	sub	sp, #92	; 0x5c
 8010cea:	4ec1      	ldr	r6, [pc, #772]	; (8010ff0 <read_submessage_list+0x30c>)
 8010cec:	9209      	str	r2, [sp, #36]	; 0x24
 8010cee:	4604      	mov	r4, r0
 8010cf0:	460d      	mov	r5, r1
 8010cf2:	f04f 0801 	mov.w	r8, #1
 8010cf6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8010cfa:	aa0c      	add	r2, sp, #48	; 0x30
 8010cfc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8010d00:	4628      	mov	r0, r5
 8010d02:	f000 ffbd 	bl	8011c80 <uxr_read_submessage_header>
 8010d06:	2800      	cmp	r0, #0
 8010d08:	f000 813e 	beq.w	8010f88 <read_submessage_list+0x2a4>
 8010d0c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8010d10:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8010d14:	3b02      	subs	r3, #2
 8010d16:	2b0d      	cmp	r3, #13
 8010d18:	d8ed      	bhi.n	8010cf6 <read_submessage_list+0x12>
 8010d1a:	a101      	add	r1, pc, #4	; (adr r1, 8010d20 <read_submessage_list+0x3c>)
 8010d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d20:	08010f7f 	.word	0x08010f7f
 8010d24:	08010cf7 	.word	0x08010cf7
 8010d28:	08010f6f 	.word	0x08010f6f
 8010d2c:	08010f0d 	.word	0x08010f0d
 8010d30:	08010f03 	.word	0x08010f03
 8010d34:	08010cf7 	.word	0x08010cf7
 8010d38:	08010cf7 	.word	0x08010cf7
 8010d3c:	08010e63 	.word	0x08010e63
 8010d40:	08010df3 	.word	0x08010df3
 8010d44:	08010db3 	.word	0x08010db3
 8010d48:	08010cf7 	.word	0x08010cf7
 8010d4c:	08010cf7 	.word	0x08010cf7
 8010d50:	08010cf7 	.word	0x08010cf7
 8010d54:	08010d59 	.word	0x08010d59
 8010d58:	a910      	add	r1, sp, #64	; 0x40
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	f002 f982 	bl	8013064 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010d60:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 8010d64:	f1b9 0f00 	cmp.w	r9, #0
 8010d68:	f000 8116 	beq.w	8010f98 <read_submessage_list+0x2b4>
 8010d6c:	f000 ffce 	bl	8011d0c <uxr_nanos>
 8010d70:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8010d72:	4602      	mov	r2, r0
 8010d74:	460b      	mov	r3, r1
 8010d76:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010d78:	2100      	movs	r1, #0
 8010d7a:	468c      	mov	ip, r1
 8010d7c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010d80:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010d84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010d86:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010d88:	468c      	mov	ip, r1
 8010d8a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010d8e:	46e2      	mov	sl, ip
 8010d90:	46bc      	mov	ip, r7
 8010d92:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 8010d96:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010d9a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010d9e:	e9cd 7100 	strd	r7, r1, [sp]
 8010da2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8010da6:	9106      	str	r1, [sp, #24]
 8010da8:	4620      	mov	r0, r4
 8010daa:	47c8      	blx	r9
 8010dac:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8010db0:	e7a1      	b.n	8010cf6 <read_submessage_list+0x12>
 8010db2:	a910      	add	r1, sp, #64	; 0x40
 8010db4:	4628      	mov	r0, r5
 8010db6:	f002 f943 	bl	8013040 <uxr_deserialize_HEARTBEAT_Payload>
 8010dba:	2100      	movs	r1, #0
 8010dbc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8010dc0:	f000 fe36 	bl	8011a30 <uxr_stream_id_from_raw>
 8010dc4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010dc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8010dca:	4639      	mov	r1, r7
 8010dcc:	f104 0008 	add.w	r0, r4, #8
 8010dd0:	f000 ff1c 	bl	8011c0c <uxr_get_input_reliable_stream>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	d08e      	beq.n	8010cf6 <read_submessage_list+0x12>
 8010dd8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8010ddc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8010de0:	f005 f80e 	bl	8015e00 <uxr_process_heartbeat>
 8010de4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8010de8:	463a      	mov	r2, r7
 8010dea:	4620      	mov	r0, r4
 8010dec:	f7ff fdf6 	bl	80109dc <write_submessage_acknack.isra.0>
 8010df0:	e781      	b.n	8010cf6 <read_submessage_list+0x12>
 8010df2:	a910      	add	r1, sp, #64	; 0x40
 8010df4:	4628      	mov	r0, r5
 8010df6:	f002 f8fb 	bl	8012ff0 <uxr_deserialize_ACKNACK_Payload>
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8010e00:	f000 fe16 	bl	8011a30 <uxr_stream_id_from_raw>
 8010e04:	900d      	str	r0, [sp, #52]	; 0x34
 8010e06:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010e0a:	f104 0008 	add.w	r0, r4, #8
 8010e0e:	f000 fee9 	bl	8011be4 <uxr_get_output_reliable_stream>
 8010e12:	4607      	mov	r7, r0
 8010e14:	2800      	cmp	r0, #0
 8010e16:	f43f af6e 	beq.w	8010cf6 <read_submessage_list+0x12>
 8010e1a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8010e1e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8010e22:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010e26:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010e2a:	b289      	uxth	r1, r1
 8010e2c:	f005 fb42 	bl	80164b4 <uxr_process_acknack>
 8010e30:	4638      	mov	r0, r7
 8010e32:	f005 faff 	bl	8016434 <uxr_begin_output_nack_buffer_it>
 8010e36:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8010e3a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8010e3e:	e006      	b.n	8010e4e <read_submessage_list+0x16a>
 8010e40:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010e42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e44:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010e48:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010e4a:	6818      	ldr	r0, [r3, #0]
 8010e4c:	47c8      	blx	r9
 8010e4e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8010e52:	aa0f      	add	r2, sp, #60	; 0x3c
 8010e54:	4651      	mov	r1, sl
 8010e56:	4638      	mov	r0, r7
 8010e58:	f005 faee 	bl	8016438 <uxr_next_reliable_nack_buffer_to_send>
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d1ef      	bne.n	8010e40 <read_submessage_list+0x15c>
 8010e60:	e749      	b.n	8010cf6 <read_submessage_list+0x12>
 8010e62:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8010e66:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8010e6a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8010e6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8010e72:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8010e76:	4651      	mov	r1, sl
 8010e78:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010e7c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8010e80:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8010e84:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8010e8e:	f001 fe0f 	bl	8012ab0 <uxr_deserialize_BaseObjectRequest>
 8010e92:	4650      	mov	r0, sl
 8010e94:	a90f      	add	r1, sp, #60	; 0x3c
 8010e96:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010e9a:	f000 fd8d 	bl	80119b8 <uxr_parse_base_object_request>
 8010e9e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8010ea2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010ea4:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8010ea8:	9110      	str	r1, [sp, #64]	; 0x40
 8010eaa:	3f04      	subs	r7, #4
 8010eac:	f009 090e 	and.w	r9, r9, #14
 8010eb0:	b2bf      	uxth	r7, r7
 8010eb2:	f1bb 0f00 	cmp.w	fp, #0
 8010eb6:	d006      	beq.n	8010ec6 <read_submessage_list+0x1e2>
 8010eb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010ebc:	9300      	str	r3, [sp, #0]
 8010ebe:	4652      	mov	r2, sl
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	47d8      	blx	fp
 8010ec6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8010ec8:	b16a      	cbz	r2, 8010ee6 <read_submessage_list+0x202>
 8010eca:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010ecc:	2100      	movs	r1, #0
 8010ece:	3802      	subs	r0, #2
 8010ed0:	e002      	b.n	8010ed8 <read_submessage_list+0x1f4>
 8010ed2:	3101      	adds	r1, #1
 8010ed4:	4291      	cmp	r1, r2
 8010ed6:	d006      	beq.n	8010ee6 <read_submessage_list+0x202>
 8010ed8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010edc:	4553      	cmp	r3, sl
 8010ede:	d1f8      	bne.n	8010ed2 <read_submessage_list+0x1ee>
 8010ee0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	545a      	strb	r2, [r3, r1]
 8010ee6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8010eea:	9102      	str	r1, [sp, #8]
 8010eec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010eee:	9101      	str	r1, [sp, #4]
 8010ef0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010ef2:	9100      	str	r1, [sp, #0]
 8010ef4:	464b      	mov	r3, r9
 8010ef6:	463a      	mov	r2, r7
 8010ef8:	4629      	mov	r1, r5
 8010efa:	4620      	mov	r0, r4
 8010efc:	f005 fb98 	bl	8016630 <read_submessage_format>
 8010f00:	e6f9      	b.n	8010cf6 <read_submessage_list+0x12>
 8010f02:	4629      	mov	r1, r5
 8010f04:	4620      	mov	r0, r4
 8010f06:	f7ff fea5 	bl	8010c54 <read_submessage_info>
 8010f0a:	e6f4      	b.n	8010cf6 <read_submessage_list+0x12>
 8010f0c:	2a00      	cmp	r2, #0
 8010f0e:	d03e      	beq.n	8010f8e <read_submessage_list+0x2aa>
 8010f10:	a910      	add	r1, sp, #64	; 0x40
 8010f12:	4628      	mov	r0, r5
 8010f14:	f001 ffc8 	bl	8012ea8 <uxr_deserialize_STATUS_Payload>
 8010f18:	a90e      	add	r1, sp, #56	; 0x38
 8010f1a:	aa0d      	add	r2, sp, #52	; 0x34
 8010f1c:	a810      	add	r0, sp, #64	; 0x40
 8010f1e:	f000 fd4b 	bl	80119b8 <uxr_parse_base_object_request>
 8010f22:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8010f26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010f28:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8010f2c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8010f30:	910f      	str	r1, [sp, #60]	; 0x3c
 8010f32:	f1ba 0f00 	cmp.w	sl, #0
 8010f36:	d006      	beq.n	8010f46 <read_submessage_list+0x262>
 8010f38:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	463a      	mov	r2, r7
 8010f40:	464b      	mov	r3, r9
 8010f42:	4620      	mov	r0, r4
 8010f44:	47d0      	blx	sl
 8010f46:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	f43f aed4 	beq.w	8010cf6 <read_submessage_list+0x12>
 8010f4e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010f50:	2100      	movs	r1, #0
 8010f52:	3802      	subs	r0, #2
 8010f54:	e003      	b.n	8010f5e <read_submessage_list+0x27a>
 8010f56:	3101      	adds	r1, #1
 8010f58:	4291      	cmp	r1, r2
 8010f5a:	f43f aecc 	beq.w	8010cf6 <read_submessage_list+0x12>
 8010f5e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010f62:	42bb      	cmp	r3, r7
 8010f64:	d1f7      	bne.n	8010f56 <read_submessage_list+0x272>
 8010f66:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010f68:	f803 9001 	strb.w	r9, [r3, r1]
 8010f6c:	e6c3      	b.n	8010cf6 <read_submessage_list+0x12>
 8010f6e:	2a00      	cmp	r2, #0
 8010f70:	f47f aec1 	bne.w	8010cf6 <read_submessage_list+0x12>
 8010f74:	4629      	mov	r1, r5
 8010f76:	4620      	mov	r0, r4
 8010f78:	f000 fc64 	bl	8011844 <uxr_read_create_session_status>
 8010f7c:	e6bb      	b.n	8010cf6 <read_submessage_list+0x12>
 8010f7e:	4629      	mov	r1, r5
 8010f80:	4620      	mov	r0, r4
 8010f82:	f7ff fcf5 	bl	8010970 <read_submessage_get_info>
 8010f86:	e6b6      	b.n	8010cf6 <read_submessage_list+0x12>
 8010f88:	b017      	add	sp, #92	; 0x5c
 8010f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f8e:	4629      	mov	r1, r5
 8010f90:	4620      	mov	r0, r4
 8010f92:	f000 fc63 	bl	801185c <uxr_read_delete_session_status>
 8010f96:	e6ae      	b.n	8010cf6 <read_submessage_list+0x12>
 8010f98:	f000 feb8 	bl	8011d0c <uxr_nanos>
 8010f9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fa0:	464f      	mov	r7, r9
 8010fa2:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010fa6:	1812      	adds	r2, r2, r0
 8010fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010faa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010fac:	eb47 0101 	adc.w	r1, r7, r1
 8010fb0:	464f      	mov	r7, r9
 8010fb2:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010fb6:	463b      	mov	r3, r7
 8010fb8:	4684      	mov	ip, r0
 8010fba:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8010fbe:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010fc2:	eb1c 0c00 	adds.w	ip, ip, r0
 8010fc6:	464f      	mov	r7, r9
 8010fc8:	eb43 0307 	adc.w	r3, r3, r7
 8010fcc:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010fd0:	eb61 0303 	sbc.w	r3, r1, r3
 8010fd4:	0fda      	lsrs	r2, r3, #31
 8010fd6:	eb12 020c 	adds.w	r2, r2, ip
 8010fda:	f143 0300 	adc.w	r3, r3, #0
 8010fde:	0852      	lsrs	r2, r2, #1
 8010fe0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010fe4:	105b      	asrs	r3, r3, #1
 8010fe6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8010fea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8010fee:	e6dd      	b.n	8010dac <read_submessage_list+0xc8>
 8010ff0:	3b9aca00 	.word	0x3b9aca00

08010ff4 <listen_message_reliably>:
 8010ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff8:	1e0b      	subs	r3, r1, #0
 8010ffa:	b09d      	sub	sp, #116	; 0x74
 8010ffc:	bfb8      	it	lt
 8010ffe:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011002:	4680      	mov	r8, r0
 8011004:	9305      	str	r3, [sp, #20]
 8011006:	f000 fe67 	bl	8011cd8 <uxr_millis>
 801100a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801100e:	4681      	mov	r9, r0
 8011010:	2a00      	cmp	r2, #0
 8011012:	f000 80a1 	beq.w	8011158 <listen_message_reliably+0x164>
 8011016:	2600      	movs	r6, #0
 8011018:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801101c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011020:	9303      	str	r3, [sp, #12]
 8011022:	4630      	mov	r0, r6
 8011024:	460f      	mov	r7, r1
 8011026:	e00f      	b.n	8011048 <listen_message_reliably+0x54>
 8011028:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801102c:	9903      	ldr	r1, [sp, #12]
 801102e:	455a      	cmp	r2, fp
 8011030:	f106 0601 	add.w	r6, r6, #1
 8011034:	eb73 0101 	sbcs.w	r1, r3, r1
 8011038:	b2f0      	uxtb	r0, r6
 801103a:	da01      	bge.n	8011040 <listen_message_reliably+0x4c>
 801103c:	4693      	mov	fp, r2
 801103e:	9303      	str	r3, [sp, #12]
 8011040:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8011044:	4283      	cmp	r3, r0
 8011046:	d960      	bls.n	801110a <listen_message_reliably+0x116>
 8011048:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801104c:	2102      	movs	r1, #2
 801104e:	2201      	movs	r2, #1
 8011050:	f000 fcc4 	bl	80119dc <uxr_stream_id>
 8011054:	00e4      	lsls	r4, r4, #3
 8011056:	f104 0520 	add.w	r5, r4, #32
 801105a:	4445      	add	r5, r8
 801105c:	4601      	mov	r1, r0
 801105e:	463b      	mov	r3, r7
 8011060:	464a      	mov	r2, r9
 8011062:	4628      	mov	r0, r5
 8011064:	9109      	str	r1, [sp, #36]	; 0x24
 8011066:	f005 f9bb 	bl	80163e0 <uxr_update_output_stream_heartbeat_timestamp>
 801106a:	eb08 0304 	add.w	r3, r8, r4
 801106e:	2800      	cmp	r0, #0
 8011070:	d0da      	beq.n	8011028 <listen_message_reliably+0x34>
 8011072:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011076:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801107a:	9304      	str	r3, [sp, #16]
 801107c:	4640      	mov	r0, r8
 801107e:	f000 fc75 	bl	801196c <uxr_session_header_offset>
 8011082:	3501      	adds	r5, #1
 8011084:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8011088:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801108c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011090:	2300      	movs	r3, #0
 8011092:	2211      	movs	r2, #17
 8011094:	9000      	str	r0, [sp, #0]
 8011096:	a90c      	add	r1, sp, #48	; 0x30
 8011098:	4650      	mov	r0, sl
 801109a:	f7ff f993 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 801109e:	2300      	movs	r3, #0
 80110a0:	2205      	movs	r2, #5
 80110a2:	210b      	movs	r1, #11
 80110a4:	4650      	mov	r0, sl
 80110a6:	f000 fdd1 	bl	8011c4c <uxr_buffer_submessage_header>
 80110aa:	8968      	ldrh	r0, [r5, #10]
 80110ac:	2101      	movs	r1, #1
 80110ae:	f005 fb89 	bl	80167c4 <uxr_seq_num_add>
 80110b2:	892b      	ldrh	r3, [r5, #8]
 80110b4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80110b8:	4602      	mov	r2, r0
 80110ba:	9b04      	ldr	r3, [sp, #16]
 80110bc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80110c0:	a90a      	add	r1, sp, #40	; 0x28
 80110c2:	4650      	mov	r0, sl
 80110c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80110c8:	f001 ffa6 	bl	8013018 <uxr_serialize_HEARTBEAT_Payload>
 80110cc:	2200      	movs	r2, #0
 80110ce:	4611      	mov	r1, r2
 80110d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110d2:	4640      	mov	r0, r8
 80110d4:	f000 fbf4 	bl	80118c0 <uxr_stamp_session_header>
 80110d8:	4650      	mov	r0, sl
 80110da:	f7ff f9b1 	bl	8010440 <ucdr_buffer_length>
 80110de:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80110e2:	4602      	mov	r2, r0
 80110e4:	a90c      	add	r1, sp, #48	; 0x30
 80110e6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80110ea:	4444      	add	r4, r8
 80110ec:	47a8      	blx	r5
 80110ee:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80110f2:	9903      	ldr	r1, [sp, #12]
 80110f4:	455a      	cmp	r2, fp
 80110f6:	f106 0601 	add.w	r6, r6, #1
 80110fa:	eb73 0101 	sbcs.w	r1, r3, r1
 80110fe:	b2f0      	uxtb	r0, r6
 8011100:	db9c      	blt.n	801103c <listen_message_reliably+0x48>
 8011102:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8011106:	4283      	cmp	r3, r0
 8011108:	d89e      	bhi.n	8011048 <listen_message_reliably+0x54>
 801110a:	9a03      	ldr	r2, [sp, #12]
 801110c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011110:	429a      	cmp	r2, r3
 8011112:	bf08      	it	eq
 8011114:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8011118:	d01e      	beq.n	8011158 <listen_message_reliably+0x164>
 801111a:	ebab 0309 	sub.w	r3, fp, r9
 801111e:	9905      	ldr	r1, [sp, #20]
 8011120:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 8011124:	2b00      	cmp	r3, #0
 8011126:	bf08      	it	eq
 8011128:	2301      	moveq	r3, #1
 801112a:	4299      	cmp	r1, r3
 801112c:	bfa8      	it	ge
 801112e:	4619      	movge	r1, r3
 8011130:	6894      	ldr	r4, [r2, #8]
 8011132:	6810      	ldr	r0, [r2, #0]
 8011134:	4689      	mov	r9, r1
 8011136:	460b      	mov	r3, r1
 8011138:	aa08      	add	r2, sp, #32
 801113a:	a907      	add	r1, sp, #28
 801113c:	47a0      	blx	r4
 801113e:	b968      	cbnz	r0, 801115c <listen_message_reliably+0x168>
 8011140:	9b05      	ldr	r3, [sp, #20]
 8011142:	eba3 0309 	sub.w	r3, r3, r9
 8011146:	2b00      	cmp	r3, #0
 8011148:	9305      	str	r3, [sp, #20]
 801114a:	f73f af5c 	bgt.w	8011006 <listen_message_reliably+0x12>
 801114e:	4604      	mov	r4, r0
 8011150:	4620      	mov	r0, r4
 8011152:	b01d      	add	sp, #116	; 0x74
 8011154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011158:	9b05      	ldr	r3, [sp, #20]
 801115a:	e7e0      	b.n	801111e <listen_message_reliably+0x12a>
 801115c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011160:	4604      	mov	r4, r0
 8011162:	a80c      	add	r0, sp, #48	; 0x30
 8011164:	f7ff f940 	bl	80103e8 <ucdr_init_buffer>
 8011168:	2500      	movs	r5, #0
 801116a:	f10d 031a 	add.w	r3, sp, #26
 801116e:	aa06      	add	r2, sp, #24
 8011170:	a90c      	add	r1, sp, #48	; 0x30
 8011172:	4640      	mov	r0, r8
 8011174:	f88d 5018 	strb.w	r5, [sp, #24]
 8011178:	f000 fbb6 	bl	80118e8 <uxr_read_session_header>
 801117c:	b918      	cbnz	r0, 8011186 <listen_message_reliably+0x192>
 801117e:	4620      	mov	r0, r4
 8011180:	b01d      	add	sp, #116	; 0x74
 8011182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011186:	4629      	mov	r1, r5
 8011188:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801118c:	f000 fc50 	bl	8011a30 <uxr_stream_id_from_raw>
 8011190:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011194:	2d01      	cmp	r5, #1
 8011196:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801119a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801119e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80111a2:	d04b      	beq.n	801123c <listen_message_reliably+0x248>
 80111a4:	2d02      	cmp	r5, #2
 80111a6:	d00f      	beq.n	80111c8 <listen_message_reliably+0x1d4>
 80111a8:	2d00      	cmp	r5, #0
 80111aa:	d1e8      	bne.n	801117e <listen_message_reliably+0x18a>
 80111ac:	4629      	mov	r1, r5
 80111ae:	4628      	mov	r0, r5
 80111b0:	f000 fc3e 	bl	8011a30 <uxr_stream_id_from_raw>
 80111b4:	a90c      	add	r1, sp, #48	; 0x30
 80111b6:	4602      	mov	r2, r0
 80111b8:	4640      	mov	r0, r8
 80111ba:	920a      	str	r2, [sp, #40]	; 0x28
 80111bc:	f7ff fd92 	bl	8010ce4 <read_submessage_list>
 80111c0:	4620      	mov	r0, r4
 80111c2:	b01d      	add	sp, #116	; 0x74
 80111c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c8:	4631      	mov	r1, r6
 80111ca:	f108 0008 	add.w	r0, r8, #8
 80111ce:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80111d2:	f000 fd1b 	bl	8011c0c <uxr_get_input_reliable_stream>
 80111d6:	4607      	mov	r7, r0
 80111d8:	b338      	cbz	r0, 801122a <listen_message_reliably+0x236>
 80111da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111dc:	9203      	str	r2, [sp, #12]
 80111de:	a80c      	add	r0, sp, #48	; 0x30
 80111e0:	f7ff f932 	bl	8010448 <ucdr_buffer_remaining>
 80111e4:	4603      	mov	r3, r0
 80111e6:	f10d 0019 	add.w	r0, sp, #25
 80111ea:	9000      	str	r0, [sp, #0]
 80111ec:	9a03      	ldr	r2, [sp, #12]
 80111ee:	4651      	mov	r1, sl
 80111f0:	4638      	mov	r0, r7
 80111f2:	f004 fd0b 	bl	8015c0c <uxr_receive_reliable_message>
 80111f6:	b1c0      	cbz	r0, 801122a <listen_message_reliably+0x236>
 80111f8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80111fc:	b393      	cbz	r3, 8011264 <listen_message_reliably+0x270>
 80111fe:	ad14      	add	r5, sp, #80	; 0x50
 8011200:	f04f 0a02 	mov.w	sl, #2
 8011204:	e00a      	b.n	801121c <listen_message_reliably+0x228>
 8011206:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 801120a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 801120e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8011212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011214:	4629      	mov	r1, r5
 8011216:	4640      	mov	r0, r8
 8011218:	f7ff fd64 	bl	8010ce4 <read_submessage_list>
 801121c:	2204      	movs	r2, #4
 801121e:	4629      	mov	r1, r5
 8011220:	4638      	mov	r0, r7
 8011222:	f004 fd73 	bl	8015d0c <uxr_next_input_reliable_buffer_available>
 8011226:	2800      	cmp	r0, #0
 8011228:	d1ed      	bne.n	8011206 <listen_message_reliably+0x212>
 801122a:	4640      	mov	r0, r8
 801122c:	4632      	mov	r2, r6
 801122e:	4649      	mov	r1, r9
 8011230:	f7ff fbd4 	bl	80109dc <write_submessage_acknack.isra.0>
 8011234:	4620      	mov	r0, r4
 8011236:	b01d      	add	sp, #116	; 0x74
 8011238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801123c:	4631      	mov	r1, r6
 801123e:	f108 0008 	add.w	r0, r8, #8
 8011242:	f000 fcd9 	bl	8011bf8 <uxr_get_input_best_effort_stream>
 8011246:	2800      	cmp	r0, #0
 8011248:	d099      	beq.n	801117e <listen_message_reliably+0x18a>
 801124a:	4651      	mov	r1, sl
 801124c:	f004 fc4a 	bl	8015ae4 <uxr_receive_best_effort_message>
 8011250:	2800      	cmp	r0, #0
 8011252:	d094      	beq.n	801117e <listen_message_reliably+0x18a>
 8011254:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8011258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801125a:	a90c      	add	r1, sp, #48	; 0x30
 801125c:	4640      	mov	r0, r8
 801125e:	f7ff fd41 	bl	8010ce4 <read_submessage_list>
 8011262:	e78c      	b.n	801117e <listen_message_reliably+0x18a>
 8011264:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8011268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801126a:	a90c      	add	r1, sp, #48	; 0x30
 801126c:	4640      	mov	r0, r8
 801126e:	f7ff fd39 	bl	8010ce4 <read_submessage_list>
 8011272:	e7c4      	b.n	80111fe <listen_message_reliably+0x20a>

08011274 <uxr_run_session_until_confirm_delivery>:
 8011274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011278:	4606      	mov	r6, r0
 801127a:	460d      	mov	r5, r1
 801127c:	f000 fd2c 	bl	8011cd8 <uxr_millis>
 8011280:	4607      	mov	r7, r0
 8011282:	4630      	mov	r0, r6
 8011284:	f7ff fc70 	bl	8010b68 <uxr_flash_output_streams>
 8011288:	2d00      	cmp	r5, #0
 801128a:	f106 0808 	add.w	r8, r6, #8
 801128e:	bfa8      	it	ge
 8011290:	462c      	movge	r4, r5
 8011292:	da07      	bge.n	80112a4 <uxr_run_session_until_confirm_delivery+0x30>
 8011294:	e00e      	b.n	80112b4 <uxr_run_session_until_confirm_delivery+0x40>
 8011296:	f7ff fead 	bl	8010ff4 <listen_message_reliably>
 801129a:	f000 fd1d 	bl	8011cd8 <uxr_millis>
 801129e:	1bc3      	subs	r3, r0, r7
 80112a0:	1aec      	subs	r4, r5, r3
 80112a2:	d407      	bmi.n	80112b4 <uxr_run_session_until_confirm_delivery+0x40>
 80112a4:	4640      	mov	r0, r8
 80112a6:	f000 fcbb 	bl	8011c20 <uxr_output_streams_confirmed>
 80112aa:	4603      	mov	r3, r0
 80112ac:	4621      	mov	r1, r4
 80112ae:	4630      	mov	r0, r6
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d0f0      	beq.n	8011296 <uxr_run_session_until_confirm_delivery+0x22>
 80112b4:	4640      	mov	r0, r8
 80112b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ba:	f000 bcb1 	b.w	8011c20 <uxr_output_streams_confirmed>
 80112be:	bf00      	nop

080112c0 <uxr_run_session_until_all_status>:
 80112c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112c4:	9c08      	ldr	r4, [sp, #32]
 80112c6:	4606      	mov	r6, r0
 80112c8:	460f      	mov	r7, r1
 80112ca:	4691      	mov	r9, r2
 80112cc:	461d      	mov	r5, r3
 80112ce:	f7ff fc4b 	bl	8010b68 <uxr_flash_output_streams>
 80112d2:	b124      	cbz	r4, 80112de <uxr_run_session_until_all_status+0x1e>
 80112d4:	4622      	mov	r2, r4
 80112d6:	21ff      	movs	r1, #255	; 0xff
 80112d8:	4628      	mov	r0, r5
 80112da:	f006 ff41 	bl	8018160 <memset>
 80112de:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 80112e2:	67f4      	str	r4, [r6, #124]	; 0x7c
 80112e4:	f000 fcf8 	bl	8011cd8 <uxr_millis>
 80112e8:	3d01      	subs	r5, #1
 80112ea:	f1a9 0902 	sub.w	r9, r9, #2
 80112ee:	4680      	mov	r8, r0
 80112f0:	4639      	mov	r1, r7
 80112f2:	4630      	mov	r0, r6
 80112f4:	f7ff fe7e 	bl	8010ff4 <listen_message_reliably>
 80112f8:	f000 fcee 	bl	8011cd8 <uxr_millis>
 80112fc:	eba0 0008 	sub.w	r0, r0, r8
 8011300:	1a39      	subs	r1, r7, r0
 8011302:	b344      	cbz	r4, 8011356 <uxr_run_session_until_all_status+0x96>
 8011304:	4628      	mov	r0, r5
 8011306:	46ac      	mov	ip, r5
 8011308:	2301      	movs	r3, #1
 801130a:	e002      	b.n	8011312 <uxr_run_session_until_all_status+0x52>
 801130c:	42a3      	cmp	r3, r4
 801130e:	d20d      	bcs.n	801132c <uxr_run_session_until_all_status+0x6c>
 8011310:	3301      	adds	r3, #1
 8011312:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011316:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801131a:	d1f7      	bne.n	801130c <uxr_run_session_until_all_status+0x4c>
 801131c:	42a3      	cmp	r3, r4
 801131e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011322:	d213      	bcs.n	801134c <uxr_run_session_until_all_status+0x8c>
 8011324:	2a00      	cmp	r2, #0
 8011326:	d0f3      	beq.n	8011310 <uxr_run_session_until_all_status+0x50>
 8011328:	2900      	cmp	r1, #0
 801132a:	dce2      	bgt.n	80112f2 <uxr_run_session_until_all_status+0x32>
 801132c:	2300      	movs	r3, #0
 801132e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8011330:	442c      	add	r4, r5
 8011332:	e001      	b.n	8011338 <uxr_run_session_until_all_status+0x78>
 8011334:	2b01      	cmp	r3, #1
 8011336:	d812      	bhi.n	801135e <uxr_run_session_until_all_status+0x9e>
 8011338:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801133c:	4284      	cmp	r4, r0
 801133e:	d1f9      	bne.n	8011334 <uxr_run_session_until_all_status+0x74>
 8011340:	2b01      	cmp	r3, #1
 8011342:	bf8c      	ite	hi
 8011344:	2000      	movhi	r0, #0
 8011346:	2001      	movls	r0, #1
 8011348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801134c:	2900      	cmp	r1, #0
 801134e:	dded      	ble.n	801132c <uxr_run_session_until_all_status+0x6c>
 8011350:	2a00      	cmp	r2, #0
 8011352:	d1ce      	bne.n	80112f2 <uxr_run_session_until_all_status+0x32>
 8011354:	e7ea      	b.n	801132c <uxr_run_session_until_all_status+0x6c>
 8011356:	67f4      	str	r4, [r6, #124]	; 0x7c
 8011358:	2001      	movs	r0, #1
 801135a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801135e:	2000      	movs	r0, #0
 8011360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011364 <wait_session_status>:
 8011364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011368:	4604      	mov	r4, r0
 801136a:	b09d      	sub	sp, #116	; 0x74
 801136c:	20ff      	movs	r0, #255	; 0xff
 801136e:	7160      	strb	r0, [r4, #5]
 8011370:	9303      	str	r3, [sp, #12]
 8011372:	2b00      	cmp	r3, #0
 8011374:	f000 80b6 	beq.w	80114e4 <wait_session_status+0x180>
 8011378:	468a      	mov	sl, r1
 801137a:	4691      	mov	r9, r2
 801137c:	f04f 0b00 	mov.w	fp, #0
 8011380:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011382:	464a      	mov	r2, r9
 8011384:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011388:	4651      	mov	r1, sl
 801138a:	47a8      	blx	r5
 801138c:	f000 fca4 	bl	8011cd8 <uxr_millis>
 8011390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011394:	4605      	mov	r5, r0
 8011396:	e009      	b.n	80113ac <wait_session_status+0x48>
 8011398:	f000 fc9e 	bl	8011cd8 <uxr_millis>
 801139c:	1b40      	subs	r0, r0, r5
 801139e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	dd40      	ble.n	8011428 <wait_session_status+0xc4>
 80113a6:	7960      	ldrb	r0, [r4, #5]
 80113a8:	28ff      	cmp	r0, #255	; 0xff
 80113aa:	d145      	bne.n	8011438 <wait_session_status+0xd4>
 80113ac:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80113ae:	a908      	add	r1, sp, #32
 80113b0:	6896      	ldr	r6, [r2, #8]
 80113b2:	6810      	ldr	r0, [r2, #0]
 80113b4:	aa09      	add	r2, sp, #36	; 0x24
 80113b6:	47b0      	blx	r6
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d0ed      	beq.n	8011398 <wait_session_status+0x34>
 80113bc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80113c0:	a80c      	add	r0, sp, #48	; 0x30
 80113c2:	f7ff f811 	bl	80103e8 <ucdr_init_buffer>
 80113c6:	2600      	movs	r6, #0
 80113c8:	f10d 031e 	add.w	r3, sp, #30
 80113cc:	aa07      	add	r2, sp, #28
 80113ce:	a90c      	add	r1, sp, #48	; 0x30
 80113d0:	4620      	mov	r0, r4
 80113d2:	f88d 601c 	strb.w	r6, [sp, #28]
 80113d6:	f000 fa87 	bl	80118e8 <uxr_read_session_header>
 80113da:	2800      	cmp	r0, #0
 80113dc:	d0dc      	beq.n	8011398 <wait_session_status+0x34>
 80113de:	4631      	mov	r1, r6
 80113e0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80113e4:	f000 fb24 	bl	8011a30 <uxr_stream_id_from_raw>
 80113e8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80113ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80113f0:	9302      	str	r3, [sp, #8]
 80113f2:	2f01      	cmp	r7, #1
 80113f4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80113f8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80113fc:	d05c      	beq.n	80114b8 <wait_session_status+0x154>
 80113fe:	2f02      	cmp	r7, #2
 8011400:	d020      	beq.n	8011444 <wait_session_status+0xe0>
 8011402:	2f00      	cmp	r7, #0
 8011404:	d1c8      	bne.n	8011398 <wait_session_status+0x34>
 8011406:	4639      	mov	r1, r7
 8011408:	4638      	mov	r0, r7
 801140a:	f000 fb11 	bl	8011a30 <uxr_stream_id_from_raw>
 801140e:	a90c      	add	r1, sp, #48	; 0x30
 8011410:	4602      	mov	r2, r0
 8011412:	900b      	str	r0, [sp, #44]	; 0x2c
 8011414:	4620      	mov	r0, r4
 8011416:	f7ff fc65 	bl	8010ce4 <read_submessage_list>
 801141a:	f000 fc5d 	bl	8011cd8 <uxr_millis>
 801141e:	1b40      	subs	r0, r0, r5
 8011420:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011424:	2b00      	cmp	r3, #0
 8011426:	dcbe      	bgt.n	80113a6 <wait_session_status+0x42>
 8011428:	9b03      	ldr	r3, [sp, #12]
 801142a:	7960      	ldrb	r0, [r4, #5]
 801142c:	f10b 0b01 	add.w	fp, fp, #1
 8011430:	455b      	cmp	r3, fp
 8011432:	d001      	beq.n	8011438 <wait_session_status+0xd4>
 8011434:	28ff      	cmp	r0, #255	; 0xff
 8011436:	d0a3      	beq.n	8011380 <wait_session_status+0x1c>
 8011438:	38ff      	subs	r0, #255	; 0xff
 801143a:	bf18      	it	ne
 801143c:	2001      	movne	r0, #1
 801143e:	b01d      	add	sp, #116	; 0x74
 8011440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011444:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011448:	9304      	str	r3, [sp, #16]
 801144a:	4631      	mov	r1, r6
 801144c:	f104 0008 	add.w	r0, r4, #8
 8011450:	f000 fbdc 	bl	8011c0c <uxr_get_input_reliable_stream>
 8011454:	4680      	mov	r8, r0
 8011456:	b348      	cbz	r0, 80114ac <wait_session_status+0x148>
 8011458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801145a:	9205      	str	r2, [sp, #20]
 801145c:	a80c      	add	r0, sp, #48	; 0x30
 801145e:	f7fe fff3 	bl	8010448 <ucdr_buffer_remaining>
 8011462:	4603      	mov	r3, r0
 8011464:	f10d 001d 	add.w	r0, sp, #29
 8011468:	9000      	str	r0, [sp, #0]
 801146a:	9a05      	ldr	r2, [sp, #20]
 801146c:	9902      	ldr	r1, [sp, #8]
 801146e:	4640      	mov	r0, r8
 8011470:	f004 fbcc 	bl	8015c0c <uxr_receive_reliable_message>
 8011474:	b1d0      	cbz	r0, 80114ac <wait_session_status+0x148>
 8011476:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d03a      	beq.n	80114f4 <wait_session_status+0x190>
 801147e:	9f04      	ldr	r7, [sp, #16]
 8011480:	e00a      	b.n	8011498 <wait_session_status+0x134>
 8011482:	f04f 0302 	mov.w	r3, #2
 8011486:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801148a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801148e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8011492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011494:	f7ff fc26 	bl	8010ce4 <read_submessage_list>
 8011498:	a914      	add	r1, sp, #80	; 0x50
 801149a:	2204      	movs	r2, #4
 801149c:	4640      	mov	r0, r8
 801149e:	f004 fc35 	bl	8015d0c <uxr_next_input_reliable_buffer_available>
 80114a2:	4603      	mov	r3, r0
 80114a4:	a914      	add	r1, sp, #80	; 0x50
 80114a6:	4620      	mov	r0, r4
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1ea      	bne.n	8011482 <wait_session_status+0x11e>
 80114ac:	9904      	ldr	r1, [sp, #16]
 80114ae:	4632      	mov	r2, r6
 80114b0:	4620      	mov	r0, r4
 80114b2:	f7ff fa93 	bl	80109dc <write_submessage_acknack.isra.0>
 80114b6:	e76f      	b.n	8011398 <wait_session_status+0x34>
 80114b8:	4631      	mov	r1, r6
 80114ba:	f104 0008 	add.w	r0, r4, #8
 80114be:	f000 fb9b 	bl	8011bf8 <uxr_get_input_best_effort_stream>
 80114c2:	2800      	cmp	r0, #0
 80114c4:	f43f af68 	beq.w	8011398 <wait_session_status+0x34>
 80114c8:	9902      	ldr	r1, [sp, #8]
 80114ca:	f004 fb0b 	bl	8015ae4 <uxr_receive_best_effort_message>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	f43f af62 	beq.w	8011398 <wait_session_status+0x34>
 80114d4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80114d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80114da:	a90c      	add	r1, sp, #48	; 0x30
 80114dc:	4620      	mov	r0, r4
 80114de:	f7ff fc01 	bl	8010ce4 <read_submessage_list>
 80114e2:	e759      	b.n	8011398 <wait_session_status+0x34>
 80114e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80114e6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80114ea:	47a0      	blx	r4
 80114ec:	2001      	movs	r0, #1
 80114ee:	b01d      	add	sp, #116	; 0x74
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80114f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80114fa:	a90c      	add	r1, sp, #48	; 0x30
 80114fc:	4620      	mov	r0, r4
 80114fe:	f7ff fbf1 	bl	8010ce4 <read_submessage_list>
 8011502:	e7bc      	b.n	801147e <wait_session_status+0x11a>

08011504 <uxr_delete_session_retries>:
 8011504:	b530      	push	{r4, r5, lr}
 8011506:	b08f      	sub	sp, #60	; 0x3c
 8011508:	4604      	mov	r4, r0
 801150a:	460d      	mov	r5, r1
 801150c:	f000 fa2e 	bl	801196c <uxr_session_header_offset>
 8011510:	2300      	movs	r3, #0
 8011512:	2210      	movs	r2, #16
 8011514:	9000      	str	r0, [sp, #0]
 8011516:	a902      	add	r1, sp, #8
 8011518:	a806      	add	r0, sp, #24
 801151a:	f7fe ff53 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 801151e:	a906      	add	r1, sp, #24
 8011520:	4620      	mov	r0, r4
 8011522:	f000 f973 	bl	801180c <uxr_buffer_delete_session>
 8011526:	2200      	movs	r2, #0
 8011528:	4611      	mov	r1, r2
 801152a:	9b06      	ldr	r3, [sp, #24]
 801152c:	4620      	mov	r0, r4
 801152e:	f000 f9c7 	bl	80118c0 <uxr_stamp_session_header>
 8011532:	a806      	add	r0, sp, #24
 8011534:	f7fe ff84 	bl	8010440 <ucdr_buffer_length>
 8011538:	462b      	mov	r3, r5
 801153a:	4602      	mov	r2, r0
 801153c:	a902      	add	r1, sp, #8
 801153e:	4620      	mov	r0, r4
 8011540:	f7ff ff10 	bl	8011364 <wait_session_status>
 8011544:	b118      	cbz	r0, 801154e <uxr_delete_session_retries+0x4a>
 8011546:	7960      	ldrb	r0, [r4, #5]
 8011548:	fab0 f080 	clz	r0, r0
 801154c:	0940      	lsrs	r0, r0, #5
 801154e:	b00f      	add	sp, #60	; 0x3c
 8011550:	bd30      	pop	{r4, r5, pc}
 8011552:	bf00      	nop

08011554 <uxr_create_session>:
 8011554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011558:	f100 0b08 	add.w	fp, r0, #8
 801155c:	b0ab      	sub	sp, #172	; 0xac
 801155e:	4604      	mov	r4, r0
 8011560:	4658      	mov	r0, fp
 8011562:	f000 fa99 	bl	8011a98 <uxr_reset_stream_storage>
 8011566:	4620      	mov	r0, r4
 8011568:	f000 fa00 	bl	801196c <uxr_session_header_offset>
 801156c:	2300      	movs	r3, #0
 801156e:	9000      	str	r0, [sp, #0]
 8011570:	221c      	movs	r2, #28
 8011572:	a90b      	add	r1, sp, #44	; 0x2c
 8011574:	a812      	add	r0, sp, #72	; 0x48
 8011576:	f7fe ff25 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 801157a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801157c:	8a1a      	ldrh	r2, [r3, #16]
 801157e:	3a04      	subs	r2, #4
 8011580:	b292      	uxth	r2, r2
 8011582:	a912      	add	r1, sp, #72	; 0x48
 8011584:	4620      	mov	r0, r4
 8011586:	f000 f917 	bl	80117b8 <uxr_buffer_create_session>
 801158a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801158c:	4620      	mov	r0, r4
 801158e:	f000 f983 	bl	8011898 <uxr_stamp_create_session_header>
 8011592:	a812      	add	r0, sp, #72	; 0x48
 8011594:	f7fe ff54 	bl	8010440 <ucdr_buffer_length>
 8011598:	23ff      	movs	r3, #255	; 0xff
 801159a:	7163      	strb	r3, [r4, #5]
 801159c:	230a      	movs	r3, #10
 801159e:	46da      	mov	sl, fp
 80115a0:	9303      	str	r3, [sp, #12]
 80115a2:	4683      	mov	fp, r0
 80115a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80115a6:	465a      	mov	r2, fp
 80115a8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80115ac:	a90b      	add	r1, sp, #44	; 0x2c
 80115ae:	47a8      	blx	r5
 80115b0:	f000 fb92 	bl	8011cd8 <uxr_millis>
 80115b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80115b8:	4605      	mov	r5, r0
 80115ba:	e009      	b.n	80115d0 <uxr_create_session+0x7c>
 80115bc:	f000 fb8c 	bl	8011cd8 <uxr_millis>
 80115c0:	1b40      	subs	r0, r0, r5
 80115c2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	7962      	ldrb	r2, [r4, #5]
 80115ca:	dd38      	ble.n	801163e <uxr_create_session+0xea>
 80115cc:	2aff      	cmp	r2, #255	; 0xff
 80115ce:	d13c      	bne.n	801164a <uxr_create_session+0xf6>
 80115d0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80115d2:	a907      	add	r1, sp, #28
 80115d4:	6896      	ldr	r6, [r2, #8]
 80115d6:	6810      	ldr	r0, [r2, #0]
 80115d8:	aa08      	add	r2, sp, #32
 80115da:	47b0      	blx	r6
 80115dc:	2800      	cmp	r0, #0
 80115de:	d0ed      	beq.n	80115bc <uxr_create_session+0x68>
 80115e0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80115e4:	a81a      	add	r0, sp, #104	; 0x68
 80115e6:	f7fe feff 	bl	80103e8 <ucdr_init_buffer>
 80115ea:	2600      	movs	r6, #0
 80115ec:	f10d 031a 	add.w	r3, sp, #26
 80115f0:	aa06      	add	r2, sp, #24
 80115f2:	a91a      	add	r1, sp, #104	; 0x68
 80115f4:	4620      	mov	r0, r4
 80115f6:	f88d 6018 	strb.w	r6, [sp, #24]
 80115fa:	f000 f975 	bl	80118e8 <uxr_read_session_header>
 80115fe:	2800      	cmp	r0, #0
 8011600:	d0dc      	beq.n	80115bc <uxr_create_session+0x68>
 8011602:	4631      	mov	r1, r6
 8011604:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011608:	f000 fa12 	bl	8011a30 <uxr_stream_id_from_raw>
 801160c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011610:	2e01      	cmp	r6, #1
 8011612:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8011616:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801161a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801161e:	d053      	beq.n	80116c8 <uxr_create_session+0x174>
 8011620:	2e02      	cmp	r6, #2
 8011622:	d018      	beq.n	8011656 <uxr_create_session+0x102>
 8011624:	2e00      	cmp	r6, #0
 8011626:	d1c9      	bne.n	80115bc <uxr_create_session+0x68>
 8011628:	4631      	mov	r1, r6
 801162a:	4630      	mov	r0, r6
 801162c:	f000 fa00 	bl	8011a30 <uxr_stream_id_from_raw>
 8011630:	a91a      	add	r1, sp, #104	; 0x68
 8011632:	4602      	mov	r2, r0
 8011634:	900a      	str	r0, [sp, #40]	; 0x28
 8011636:	4620      	mov	r0, r4
 8011638:	f7ff fb54 	bl	8010ce4 <read_submessage_list>
 801163c:	e7be      	b.n	80115bc <uxr_create_session+0x68>
 801163e:	9b03      	ldr	r3, [sp, #12]
 8011640:	3b01      	subs	r3, #1
 8011642:	9303      	str	r3, [sp, #12]
 8011644:	d001      	beq.n	801164a <uxr_create_session+0xf6>
 8011646:	2aff      	cmp	r2, #255	; 0xff
 8011648:	d0ac      	beq.n	80115a4 <uxr_create_session+0x50>
 801164a:	2a00      	cmp	r2, #0
 801164c:	d051      	beq.n	80116f2 <uxr_create_session+0x19e>
 801164e:	2000      	movs	r0, #0
 8011650:	b02b      	add	sp, #172	; 0xac
 8011652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011656:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801165a:	9304      	str	r3, [sp, #16]
 801165c:	4639      	mov	r1, r7
 801165e:	4650      	mov	r0, sl
 8011660:	f000 fad4 	bl	8011c0c <uxr_get_input_reliable_stream>
 8011664:	4680      	mov	r8, r0
 8011666:	b348      	cbz	r0, 80116bc <uxr_create_session+0x168>
 8011668:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801166a:	9205      	str	r2, [sp, #20]
 801166c:	a81a      	add	r0, sp, #104	; 0x68
 801166e:	f7fe feeb 	bl	8010448 <ucdr_buffer_remaining>
 8011672:	4603      	mov	r3, r0
 8011674:	f10d 0019 	add.w	r0, sp, #25
 8011678:	9000      	str	r0, [sp, #0]
 801167a:	9a05      	ldr	r2, [sp, #20]
 801167c:	4649      	mov	r1, r9
 801167e:	4640      	mov	r0, r8
 8011680:	f004 fac4 	bl	8015c0c <uxr_receive_reliable_message>
 8011684:	b1d0      	cbz	r0, 80116bc <uxr_create_session+0x168>
 8011686:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d038      	beq.n	8011700 <uxr_create_session+0x1ac>
 801168e:	9e04      	ldr	r6, [sp, #16]
 8011690:	e00a      	b.n	80116a8 <uxr_create_session+0x154>
 8011692:	f04f 0302 	mov.w	r3, #2
 8011696:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 801169a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 801169e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116a4:	f7ff fb1e 	bl	8010ce4 <read_submessage_list>
 80116a8:	a922      	add	r1, sp, #136	; 0x88
 80116aa:	2204      	movs	r2, #4
 80116ac:	4640      	mov	r0, r8
 80116ae:	f004 fb2d 	bl	8015d0c <uxr_next_input_reliable_buffer_available>
 80116b2:	4603      	mov	r3, r0
 80116b4:	a922      	add	r1, sp, #136	; 0x88
 80116b6:	4620      	mov	r0, r4
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d1ea      	bne.n	8011692 <uxr_create_session+0x13e>
 80116bc:	9904      	ldr	r1, [sp, #16]
 80116be:	463a      	mov	r2, r7
 80116c0:	4620      	mov	r0, r4
 80116c2:	f7ff f98b 	bl	80109dc <write_submessage_acknack.isra.0>
 80116c6:	e779      	b.n	80115bc <uxr_create_session+0x68>
 80116c8:	4639      	mov	r1, r7
 80116ca:	4650      	mov	r0, sl
 80116cc:	f000 fa94 	bl	8011bf8 <uxr_get_input_best_effort_stream>
 80116d0:	2800      	cmp	r0, #0
 80116d2:	f43f af73 	beq.w	80115bc <uxr_create_session+0x68>
 80116d6:	4649      	mov	r1, r9
 80116d8:	f004 fa04 	bl	8015ae4 <uxr_receive_best_effort_message>
 80116dc:	2800      	cmp	r0, #0
 80116de:	f43f af6d 	beq.w	80115bc <uxr_create_session+0x68>
 80116e2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80116e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116e8:	a91a      	add	r1, sp, #104	; 0x68
 80116ea:	4620      	mov	r0, r4
 80116ec:	f7ff fafa 	bl	8010ce4 <read_submessage_list>
 80116f0:	e764      	b.n	80115bc <uxr_create_session+0x68>
 80116f2:	4650      	mov	r0, sl
 80116f4:	f000 f9d0 	bl	8011a98 <uxr_reset_stream_storage>
 80116f8:	2001      	movs	r0, #1
 80116fa:	b02b      	add	sp, #172	; 0xac
 80116fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011700:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8011704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011706:	a91a      	add	r1, sp, #104	; 0x68
 8011708:	4620      	mov	r0, r4
 801170a:	f7ff faeb 	bl	8010ce4 <read_submessage_list>
 801170e:	e7be      	b.n	801168e <uxr_create_session+0x13a>

08011710 <uxr_prepare_stream_to_write_submessage>:
 8011710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011714:	b082      	sub	sp, #8
 8011716:	4682      	mov	sl, r0
 8011718:	4610      	mov	r0, r2
 801171a:	4615      	mov	r5, r2
 801171c:	461e      	mov	r6, r3
 801171e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011722:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011726:	9101      	str	r1, [sp, #4]
 8011728:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801172c:	f000 face 	bl	8011ccc <uxr_submessage_padding>
 8011730:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011734:	f105 0904 	add.w	r9, r5, #4
 8011738:	2b01      	cmp	r3, #1
 801173a:	4481      	add	r9, r0
 801173c:	d01d      	beq.n	801177a <uxr_prepare_stream_to_write_submessage+0x6a>
 801173e:	2b02      	cmp	r3, #2
 8011740:	d116      	bne.n	8011770 <uxr_prepare_stream_to_write_submessage+0x60>
 8011742:	4621      	mov	r1, r4
 8011744:	f10a 0008 	add.w	r0, sl, #8
 8011748:	f000 fa4c 	bl	8011be4 <uxr_get_output_reliable_stream>
 801174c:	4604      	mov	r4, r0
 801174e:	b158      	cbz	r0, 8011768 <uxr_prepare_stream_to_write_submessage+0x58>
 8011750:	4649      	mov	r1, r9
 8011752:	4632      	mov	r2, r6
 8011754:	f004 fc96 	bl	8016084 <uxr_prepare_reliable_buffer_to_write>
 8011758:	4604      	mov	r4, r0
 801175a:	b12c      	cbz	r4, 8011768 <uxr_prepare_stream_to_write_submessage+0x58>
 801175c:	4643      	mov	r3, r8
 801175e:	b2aa      	uxth	r2, r5
 8011760:	4639      	mov	r1, r7
 8011762:	4630      	mov	r0, r6
 8011764:	f000 fa72 	bl	8011c4c <uxr_buffer_submessage_header>
 8011768:	4620      	mov	r0, r4
 801176a:	b002      	add	sp, #8
 801176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011770:	2400      	movs	r4, #0
 8011772:	4620      	mov	r0, r4
 8011774:	b002      	add	sp, #8
 8011776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801177a:	4621      	mov	r1, r4
 801177c:	f10a 0008 	add.w	r0, sl, #8
 8011780:	f000 fa28 	bl	8011bd4 <uxr_get_output_best_effort_stream>
 8011784:	4604      	mov	r4, r0
 8011786:	2800      	cmp	r0, #0
 8011788:	d0ee      	beq.n	8011768 <uxr_prepare_stream_to_write_submessage+0x58>
 801178a:	4649      	mov	r1, r9
 801178c:	4632      	mov	r2, r6
 801178e:	f004 fba9 	bl	8015ee4 <uxr_prepare_best_effort_buffer_to_write>
 8011792:	4604      	mov	r4, r0
 8011794:	e7e1      	b.n	801175a <uxr_prepare_stream_to_write_submessage+0x4a>
 8011796:	bf00      	nop

08011798 <uxr_init_session_info>:
 8011798:	0e13      	lsrs	r3, r2, #24
 801179a:	7043      	strb	r3, [r0, #1]
 801179c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80117a0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80117a4:	7001      	strb	r1, [r0, #0]
 80117a6:	70c3      	strb	r3, [r0, #3]
 80117a8:	2109      	movs	r1, #9
 80117aa:	23ff      	movs	r3, #255	; 0xff
 80117ac:	f880 c002 	strb.w	ip, [r0, #2]
 80117b0:	7102      	strb	r2, [r0, #4]
 80117b2:	80c1      	strh	r1, [r0, #6]
 80117b4:	7143      	strb	r3, [r0, #5]
 80117b6:	4770      	bx	lr

080117b8 <uxr_buffer_create_session>:
 80117b8:	b530      	push	{r4, r5, lr}
 80117ba:	b089      	sub	sp, #36	; 0x24
 80117bc:	2300      	movs	r3, #0
 80117be:	4d12      	ldr	r5, [pc, #72]	; (8011808 <uxr_buffer_create_session+0x50>)
 80117c0:	9307      	str	r3, [sp, #28]
 80117c2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80117c6:	2201      	movs	r2, #1
 80117c8:	9301      	str	r3, [sp, #4]
 80117ca:	80c2      	strh	r2, [r0, #6]
 80117cc:	f88d 2004 	strb.w	r2, [sp, #4]
 80117d0:	682a      	ldr	r2, [r5, #0]
 80117d2:	9200      	str	r2, [sp, #0]
 80117d4:	88aa      	ldrh	r2, [r5, #4]
 80117d6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80117da:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80117de:	9202      	str	r2, [sp, #8]
 80117e0:	460c      	mov	r4, r1
 80117e2:	7802      	ldrb	r2, [r0, #0]
 80117e4:	9303      	str	r3, [sp, #12]
 80117e6:	4619      	mov	r1, r3
 80117e8:	f88d 200c 	strb.w	r2, [sp, #12]
 80117ec:	4620      	mov	r0, r4
 80117ee:	2210      	movs	r2, #16
 80117f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80117f4:	9306      	str	r3, [sp, #24]
 80117f6:	f000 fa29 	bl	8011c4c <uxr_buffer_submessage_header>
 80117fa:	4669      	mov	r1, sp
 80117fc:	4620      	mov	r0, r4
 80117fe:	f001 fa6d 	bl	8012cdc <uxr_serialize_CREATE_CLIENT_Payload>
 8011802:	b009      	add	sp, #36	; 0x24
 8011804:	bd30      	pop	{r4, r5, pc}
 8011806:	bf00      	nop
 8011808:	08019180 	.word	0x08019180

0801180c <uxr_buffer_delete_session>:
 801180c:	b510      	push	{r4, lr}
 801180e:	4b0c      	ldr	r3, [pc, #48]	; (8011840 <uxr_buffer_delete_session+0x34>)
 8011810:	b082      	sub	sp, #8
 8011812:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011816:	f8ad c006 	strh.w	ip, [sp, #6]
 801181a:	460c      	mov	r4, r1
 801181c:	2202      	movs	r2, #2
 801181e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011822:	80c2      	strh	r2, [r0, #6]
 8011824:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011828:	2204      	movs	r2, #4
 801182a:	2300      	movs	r3, #0
 801182c:	2103      	movs	r1, #3
 801182e:	4620      	mov	r0, r4
 8011830:	f000 fa0c 	bl	8011c4c <uxr_buffer_submessage_header>
 8011834:	a901      	add	r1, sp, #4
 8011836:	4620      	mov	r0, r4
 8011838:	f001 faf6 	bl	8012e28 <uxr_serialize_DELETE_Payload>
 801183c:	b002      	add	sp, #8
 801183e:	bd10      	pop	{r4, pc}
 8011840:	08019180 	.word	0x08019180

08011844 <uxr_read_create_session_status>:
 8011844:	b510      	push	{r4, lr}
 8011846:	b088      	sub	sp, #32
 8011848:	4604      	mov	r4, r0
 801184a:	4608      	mov	r0, r1
 801184c:	a901      	add	r1, sp, #4
 801184e:	f001 fafb 	bl	8012e48 <uxr_deserialize_STATUS_AGENT_Payload>
 8011852:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011856:	7163      	strb	r3, [r4, #5]
 8011858:	b008      	add	sp, #32
 801185a:	bd10      	pop	{r4, pc}

0801185c <uxr_read_delete_session_status>:
 801185c:	b510      	push	{r4, lr}
 801185e:	4604      	mov	r4, r0
 8011860:	b084      	sub	sp, #16
 8011862:	4608      	mov	r0, r1
 8011864:	a902      	add	r1, sp, #8
 8011866:	f001 fb1f 	bl	8012ea8 <uxr_deserialize_STATUS_Payload>
 801186a:	88e3      	ldrh	r3, [r4, #6]
 801186c:	2b02      	cmp	r3, #2
 801186e:	d001      	beq.n	8011874 <uxr_read_delete_session_status+0x18>
 8011870:	b004      	add	sp, #16
 8011872:	bd10      	pop	{r4, pc}
 8011874:	f10d 000a 	add.w	r0, sp, #10
 8011878:	f7ff f836 	bl	80108e8 <uxr_object_id_from_raw>
 801187c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011880:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011884:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011888:	b29b      	uxth	r3, r3
 801188a:	2b02      	cmp	r3, #2
 801188c:	bf04      	itt	eq
 801188e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011892:	7163      	strbeq	r3, [r4, #5]
 8011894:	b004      	add	sp, #16
 8011896:	bd10      	pop	{r4, pc}

08011898 <uxr_stamp_create_session_header>:
 8011898:	b510      	push	{r4, lr}
 801189a:	2208      	movs	r2, #8
 801189c:	b08a      	sub	sp, #40	; 0x28
 801189e:	4604      	mov	r4, r0
 80118a0:	eb0d 0002 	add.w	r0, sp, r2
 80118a4:	f7fe fda0 	bl	80103e8 <ucdr_init_buffer>
 80118a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118ac:	9400      	str	r4, [sp, #0]
 80118ae:	2300      	movs	r3, #0
 80118b0:	461a      	mov	r2, r3
 80118b2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80118b6:	a802      	add	r0, sp, #8
 80118b8:	f000 fbc2 	bl	8012040 <uxr_serialize_message_header>
 80118bc:	b00a      	add	sp, #40	; 0x28
 80118be:	bd10      	pop	{r4, pc}

080118c0 <uxr_stamp_session_header>:
 80118c0:	b530      	push	{r4, r5, lr}
 80118c2:	b08d      	sub	sp, #52	; 0x34
 80118c4:	4604      	mov	r4, r0
 80118c6:	460d      	mov	r5, r1
 80118c8:	9203      	str	r2, [sp, #12]
 80118ca:	4619      	mov	r1, r3
 80118cc:	a804      	add	r0, sp, #16
 80118ce:	2208      	movs	r2, #8
 80118d0:	f7fe fd8a 	bl	80103e8 <ucdr_init_buffer>
 80118d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118d8:	9b03      	ldr	r3, [sp, #12]
 80118da:	9400      	str	r4, [sp, #0]
 80118dc:	462a      	mov	r2, r5
 80118de:	a804      	add	r0, sp, #16
 80118e0:	f000 fbae 	bl	8012040 <uxr_serialize_message_header>
 80118e4:	b00d      	add	sp, #52	; 0x34
 80118e6:	bd30      	pop	{r4, r5, pc}

080118e8 <uxr_read_session_header>:
 80118e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ec:	4607      	mov	r7, r0
 80118ee:	b084      	sub	sp, #16
 80118f0:	4608      	mov	r0, r1
 80118f2:	460c      	mov	r4, r1
 80118f4:	4615      	mov	r5, r2
 80118f6:	461e      	mov	r6, r3
 80118f8:	f7fe fda6 	bl	8010448 <ucdr_buffer_remaining>
 80118fc:	2808      	cmp	r0, #8
 80118fe:	d803      	bhi.n	8011908 <uxr_read_session_header+0x20>
 8011900:	2000      	movs	r0, #0
 8011902:	b004      	add	sp, #16
 8011904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011908:	f10d 080c 	add.w	r8, sp, #12
 801190c:	4633      	mov	r3, r6
 801190e:	462a      	mov	r2, r5
 8011910:	f8cd 8000 	str.w	r8, [sp]
 8011914:	4620      	mov	r0, r4
 8011916:	f10d 010b 	add.w	r1, sp, #11
 801191a:	f000 fbaf 	bl	801207c <uxr_deserialize_message_header>
 801191e:	783a      	ldrb	r2, [r7, #0]
 8011920:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011924:	4293      	cmp	r3, r2
 8011926:	d1eb      	bne.n	8011900 <uxr_read_session_header+0x18>
 8011928:	061b      	lsls	r3, r3, #24
 801192a:	d41c      	bmi.n	8011966 <uxr_read_session_header+0x7e>
 801192c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011930:	787b      	ldrb	r3, [r7, #1]
 8011932:	429a      	cmp	r2, r3
 8011934:	d003      	beq.n	801193e <uxr_read_session_header+0x56>
 8011936:	2001      	movs	r0, #1
 8011938:	f080 0001 	eor.w	r0, r0, #1
 801193c:	e7e1      	b.n	8011902 <uxr_read_session_header+0x1a>
 801193e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011942:	78bb      	ldrb	r3, [r7, #2]
 8011944:	429a      	cmp	r2, r3
 8011946:	f107 0102 	add.w	r1, r7, #2
 801194a:	d1f4      	bne.n	8011936 <uxr_read_session_header+0x4e>
 801194c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011954:	429a      	cmp	r2, r3
 8011956:	d1ee      	bne.n	8011936 <uxr_read_session_header+0x4e>
 8011958:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801195c:	784b      	ldrb	r3, [r1, #1]
 801195e:	429a      	cmp	r2, r3
 8011960:	d1e9      	bne.n	8011936 <uxr_read_session_header+0x4e>
 8011962:	2000      	movs	r0, #0
 8011964:	e7e8      	b.n	8011938 <uxr_read_session_header+0x50>
 8011966:	2001      	movs	r0, #1
 8011968:	e7cb      	b.n	8011902 <uxr_read_session_header+0x1a>
 801196a:	bf00      	nop

0801196c <uxr_session_header_offset>:
 801196c:	f990 3000 	ldrsb.w	r3, [r0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	bfac      	ite	ge
 8011974:	2008      	movge	r0, #8
 8011976:	2004      	movlt	r0, #4
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop

0801197c <uxr_init_base_object_request>:
 801197c:	b510      	push	{r4, lr}
 801197e:	88c3      	ldrh	r3, [r0, #6]
 8011980:	b082      	sub	sp, #8
 8011982:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011986:	9101      	str	r1, [sp, #4]
 8011988:	f1a3 010a 	sub.w	r1, r3, #10
 801198c:	b289      	uxth	r1, r1
 801198e:	42a1      	cmp	r1, r4
 8011990:	d80e      	bhi.n	80119b0 <uxr_init_base_object_request+0x34>
 8011992:	3301      	adds	r3, #1
 8011994:	b29c      	uxth	r4, r3
 8011996:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801199a:	b2db      	uxtb	r3, r3
 801199c:	80c4      	strh	r4, [r0, #6]
 801199e:	9801      	ldr	r0, [sp, #4]
 80119a0:	7011      	strb	r1, [r2, #0]
 80119a2:	7053      	strb	r3, [r2, #1]
 80119a4:	1c91      	adds	r1, r2, #2
 80119a6:	f7fe ffb3 	bl	8010910 <uxr_object_id_to_raw>
 80119aa:	4620      	mov	r0, r4
 80119ac:	b002      	add	sp, #8
 80119ae:	bd10      	pop	{r4, pc}
 80119b0:	230a      	movs	r3, #10
 80119b2:	2100      	movs	r1, #0
 80119b4:	461c      	mov	r4, r3
 80119b6:	e7f1      	b.n	801199c <uxr_init_base_object_request+0x20>

080119b8 <uxr_parse_base_object_request>:
 80119b8:	b570      	push	{r4, r5, r6, lr}
 80119ba:	4604      	mov	r4, r0
 80119bc:	3002      	adds	r0, #2
 80119be:	460d      	mov	r5, r1
 80119c0:	4616      	mov	r6, r2
 80119c2:	f7fe ff91 	bl	80108e8 <uxr_object_id_from_raw>
 80119c6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80119ca:	8028      	strh	r0, [r5, #0]
 80119cc:	806b      	strh	r3, [r5, #2]
 80119ce:	7822      	ldrb	r2, [r4, #0]
 80119d0:	7863      	ldrb	r3, [r4, #1]
 80119d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80119d6:	8033      	strh	r3, [r6, #0]
 80119d8:	bd70      	pop	{r4, r5, r6, pc}
 80119da:	bf00      	nop

080119dc <uxr_stream_id>:
 80119dc:	2901      	cmp	r1, #1
 80119de:	b082      	sub	sp, #8
 80119e0:	d01d      	beq.n	8011a1e <uxr_stream_id+0x42>
 80119e2:	2902      	cmp	r1, #2
 80119e4:	f04f 0c00 	mov.w	ip, #0
 80119e8:	d01e      	beq.n	8011a28 <uxr_stream_id+0x4c>
 80119ea:	2300      	movs	r3, #0
 80119ec:	f36c 0307 	bfi	r3, ip, #0, #8
 80119f0:	f360 230f 	bfi	r3, r0, #8, #8
 80119f4:	f361 4317 	bfi	r3, r1, #16, #8
 80119f8:	f362 631f 	bfi	r3, r2, #24, #8
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	2000      	movs	r0, #0
 8011a00:	f362 0007 	bfi	r0, r2, #0, #8
 8011a04:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011a08:	f362 200f 	bfi	r0, r2, #8, #8
 8011a0c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011a10:	f362 4017 	bfi	r0, r2, #16, #8
 8011a14:	0e1b      	lsrs	r3, r3, #24
 8011a16:	f363 601f 	bfi	r0, r3, #24, #8
 8011a1a:	b002      	add	sp, #8
 8011a1c:	4770      	bx	lr
 8011a1e:	f100 0c01 	add.w	ip, r0, #1
 8011a22:	fa5f fc8c 	uxtb.w	ip, ip
 8011a26:	e7e0      	b.n	80119ea <uxr_stream_id+0xe>
 8011a28:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 8011a2c:	e7dd      	b.n	80119ea <uxr_stream_id+0xe>
 8011a2e:	bf00      	nop

08011a30 <uxr_stream_id_from_raw>:
 8011a30:	b082      	sub	sp, #8
 8011a32:	b130      	cbz	r0, 8011a42 <uxr_stream_id_from_raw+0x12>
 8011a34:	0603      	lsls	r3, r0, #24
 8011a36:	d420      	bmi.n	8011a7a <uxr_stream_id_from_raw+0x4a>
 8011a38:	1e42      	subs	r2, r0, #1
 8011a3a:	b2d2      	uxtb	r2, r2
 8011a3c:	f04f 0c01 	mov.w	ip, #1
 8011a40:	e001      	b.n	8011a46 <uxr_stream_id_from_raw+0x16>
 8011a42:	4684      	mov	ip, r0
 8011a44:	4602      	mov	r2, r0
 8011a46:	2300      	movs	r3, #0
 8011a48:	f360 0307 	bfi	r3, r0, #0, #8
 8011a4c:	f362 230f 	bfi	r3, r2, #8, #8
 8011a50:	f36c 4317 	bfi	r3, ip, #16, #8
 8011a54:	f361 631f 	bfi	r3, r1, #24, #8
 8011a58:	b2da      	uxtb	r2, r3
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	f362 0007 	bfi	r0, r2, #0, #8
 8011a60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011a64:	f362 200f 	bfi	r0, r2, #8, #8
 8011a68:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011a6c:	f362 4017 	bfi	r0, r2, #16, #8
 8011a70:	0e1b      	lsrs	r3, r3, #24
 8011a72:	f363 601f 	bfi	r0, r3, #24, #8
 8011a76:	b002      	add	sp, #8
 8011a78:	4770      	bx	lr
 8011a7a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8011a7e:	f04f 0c02 	mov.w	ip, #2
 8011a82:	e7e0      	b.n	8011a46 <uxr_stream_id_from_raw+0x16>

08011a84 <uxr_init_stream_storage>:
 8011a84:	2300      	movs	r3, #0
 8011a86:	7403      	strb	r3, [r0, #16]
 8011a88:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8011a8c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011a90:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop

08011a98 <uxr_reset_stream_storage>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	7c03      	ldrb	r3, [r0, #16]
 8011a9c:	4604      	mov	r4, r0
 8011a9e:	b153      	cbz	r3, 8011ab6 <uxr_reset_stream_storage+0x1e>
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f004 fa17 	bl	8015ed8 <uxr_reset_output_best_effort_stream>
 8011aaa:	7c23      	ldrb	r3, [r4, #16]
 8011aac:	3501      	adds	r5, #1
 8011aae:	42ab      	cmp	r3, r5
 8011ab0:	f106 0610 	add.w	r6, r6, #16
 8011ab4:	d8f6      	bhi.n	8011aa4 <uxr_reset_stream_storage+0xc>
 8011ab6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011aba:	b163      	cbz	r3, 8011ad6 <uxr_reset_stream_storage+0x3e>
 8011abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ac0:	2500      	movs	r5, #0
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	f004 f80a 	bl	8015adc <uxr_reset_input_best_effort_stream>
 8011ac8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011acc:	3501      	adds	r5, #1
 8011ace:	42ab      	cmp	r3, r5
 8011ad0:	f106 0602 	add.w	r6, r6, #2
 8011ad4:	d8f5      	bhi.n	8011ac2 <uxr_reset_stream_storage+0x2a>
 8011ad6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011ada:	b163      	cbz	r3, 8011af6 <uxr_reset_stream_storage+0x5e>
 8011adc:	f104 0618 	add.w	r6, r4, #24
 8011ae0:	2500      	movs	r5, #0
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f004 faa4 	bl	8016030 <uxr_reset_output_reliable_stream>
 8011ae8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011aec:	3501      	adds	r5, #1
 8011aee:	42ab      	cmp	r3, r5
 8011af0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8011af4:	d8f5      	bhi.n	8011ae2 <uxr_reset_stream_storage+0x4a>
 8011af6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011afa:	b163      	cbz	r3, 8011b16 <uxr_reset_stream_storage+0x7e>
 8011afc:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011b00:	2500      	movs	r5, #0
 8011b02:	4630      	mov	r0, r6
 8011b04:	f004 f85e 	bl	8015bc4 <uxr_reset_input_reliable_stream>
 8011b08:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	42ab      	cmp	r3, r5
 8011b10:	f106 0618 	add.w	r6, r6, #24
 8011b14:	d8f5      	bhi.n	8011b02 <uxr_reset_stream_storage+0x6a>
 8011b16:	bd70      	pop	{r4, r5, r6, pc}

08011b18 <uxr_add_output_best_effort_buffer>:
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	7c04      	ldrb	r4, [r0, #16]
 8011b1c:	f104 0c01 	add.w	ip, r4, #1
 8011b20:	b082      	sub	sp, #8
 8011b22:	f880 c010 	strb.w	ip, [r0, #16]
 8011b26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011b2a:	f004 f9cb 	bl	8015ec4 <uxr_init_output_best_effort_stream>
 8011b2e:	2201      	movs	r2, #1
 8011b30:	4611      	mov	r1, r2
 8011b32:	4620      	mov	r0, r4
 8011b34:	b002      	add	sp, #8
 8011b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b3a:	f7ff bf4f 	b.w	80119dc <uxr_stream_id>
 8011b3e:	bf00      	nop

08011b40 <uxr_add_output_reliable_buffer>:
 8011b40:	b510      	push	{r4, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	4684      	mov	ip, r0
 8011b46:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011b4a:	9000      	str	r0, [sp, #0]
 8011b4c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8011b50:	2028      	movs	r0, #40	; 0x28
 8011b52:	fb00 c004 	mla	r0, r0, r4, ip
 8011b56:	f104 0e01 	add.w	lr, r4, #1
 8011b5a:	3018      	adds	r0, #24
 8011b5c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8011b60:	f004 fa2e 	bl	8015fc0 <uxr_init_output_reliable_stream>
 8011b64:	2201      	movs	r2, #1
 8011b66:	2102      	movs	r1, #2
 8011b68:	4620      	mov	r0, r4
 8011b6a:	b004      	add	sp, #16
 8011b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b70:	f7ff bf34 	b.w	80119dc <uxr_stream_id>

08011b74 <uxr_add_input_best_effort_buffer>:
 8011b74:	b510      	push	{r4, lr}
 8011b76:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	1c62      	adds	r2, r4, #1
 8011b7e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8011b82:	b082      	sub	sp, #8
 8011b84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b8c:	f003 ffa2 	bl	8015ad4 <uxr_init_input_best_effort_stream>
 8011b90:	2200      	movs	r2, #0
 8011b92:	2101      	movs	r1, #1
 8011b94:	4620      	mov	r0, r4
 8011b96:	b002      	add	sp, #8
 8011b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b9c:	f7ff bf1e 	b.w	80119dc <uxr_stream_id>

08011ba0 <uxr_add_input_reliable_buffer>:
 8011ba0:	b510      	push	{r4, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	4684      	mov	ip, r0
 8011ba6:	9806      	ldr	r0, [sp, #24]
 8011ba8:	9000      	str	r0, [sp, #0]
 8011baa:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8011bae:	2018      	movs	r0, #24
 8011bb0:	fb00 c004 	mla	r0, r0, r4, ip
 8011bb4:	f104 0e01 	add.w	lr, r4, #1
 8011bb8:	3048      	adds	r0, #72	; 0x48
 8011bba:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8011bbe:	f003 ffd5 	bl	8015b6c <uxr_init_input_reliable_stream>
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	2102      	movs	r1, #2
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	b004      	add	sp, #16
 8011bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bce:	f7ff bf05 	b.w	80119dc <uxr_stream_id>
 8011bd2:	bf00      	nop

08011bd4 <uxr_get_output_best_effort_stream>:
 8011bd4:	7c03      	ldrb	r3, [r0, #16]
 8011bd6:	428b      	cmp	r3, r1
 8011bd8:	bf8c      	ite	hi
 8011bda:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011bde:	2000      	movls	r0, #0
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop

08011be4 <uxr_get_output_reliable_stream>:
 8011be4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011be8:	428b      	cmp	r3, r1
 8011bea:	bf83      	ittte	hi
 8011bec:	2328      	movhi	r3, #40	; 0x28
 8011bee:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011bf2:	3018      	addhi	r0, #24
 8011bf4:	2000      	movls	r0, #0
 8011bf6:	4770      	bx	lr

08011bf8 <uxr_get_input_best_effort_stream>:
 8011bf8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011bfc:	428b      	cmp	r3, r1
 8011bfe:	bf86      	itte	hi
 8011c00:	3121      	addhi	r1, #33	; 0x21
 8011c02:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011c06:	2000      	movls	r0, #0
 8011c08:	4770      	bx	lr
 8011c0a:	bf00      	nop

08011c0c <uxr_get_input_reliable_stream>:
 8011c0c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8011c10:	428b      	cmp	r3, r1
 8011c12:	bf83      	ittte	hi
 8011c14:	2318      	movhi	r3, #24
 8011c16:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011c1a:	3048      	addhi	r0, #72	; 0x48
 8011c1c:	2000      	movls	r0, #0
 8011c1e:	4770      	bx	lr

08011c20 <uxr_output_streams_confirmed>:
 8011c20:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011c24:	b183      	cbz	r3, 8011c48 <uxr_output_streams_confirmed+0x28>
 8011c26:	b570      	push	{r4, r5, r6, lr}
 8011c28:	4606      	mov	r6, r0
 8011c2a:	f100 0518 	add.w	r5, r0, #24
 8011c2e:	2400      	movs	r4, #0
 8011c30:	e001      	b.n	8011c36 <uxr_output_streams_confirmed+0x16>
 8011c32:	3528      	adds	r5, #40	; 0x28
 8011c34:	b138      	cbz	r0, 8011c46 <uxr_output_streams_confirmed+0x26>
 8011c36:	4628      	mov	r0, r5
 8011c38:	f004 fc6a 	bl	8016510 <uxr_is_output_up_to_date>
 8011c3c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8011c40:	3401      	adds	r4, #1
 8011c42:	42a3      	cmp	r3, r4
 8011c44:	d8f5      	bhi.n	8011c32 <uxr_output_streams_confirmed+0x12>
 8011c46:	bd70      	pop	{r4, r5, r6, pc}
 8011c48:	2001      	movs	r0, #1
 8011c4a:	4770      	bx	lr

08011c4c <uxr_buffer_submessage_header>:
 8011c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c4e:	4604      	mov	r4, r0
 8011c50:	460e      	mov	r6, r1
 8011c52:	2104      	movs	r1, #4
 8011c54:	4615      	mov	r5, r2
 8011c56:	461f      	mov	r7, r3
 8011c58:	f7fe fbe0 	bl	801041c <ucdr_align_to>
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	ea47 0203 	orr.w	r2, r7, r3
 8011c62:	4631      	mov	r1, r6
 8011c64:	7523      	strb	r3, [r4, #20]
 8011c66:	4620      	mov	r0, r4
 8011c68:	462b      	mov	r3, r5
 8011c6a:	f000 fa27 	bl	80120bc <uxr_serialize_submessage_header>
 8011c6e:	4620      	mov	r0, r4
 8011c70:	f7fe fbea 	bl	8010448 <ucdr_buffer_remaining>
 8011c74:	42a8      	cmp	r0, r5
 8011c76:	bf34      	ite	cc
 8011c78:	2000      	movcc	r0, #0
 8011c7a:	2001      	movcs	r0, #1
 8011c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c7e:	bf00      	nop

08011c80 <uxr_read_submessage_header>:
 8011c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c84:	4604      	mov	r4, r0
 8011c86:	460d      	mov	r5, r1
 8011c88:	2104      	movs	r1, #4
 8011c8a:	4616      	mov	r6, r2
 8011c8c:	4698      	mov	r8, r3
 8011c8e:	f7fe fbc5 	bl	801041c <ucdr_align_to>
 8011c92:	4620      	mov	r0, r4
 8011c94:	f7fe fbd8 	bl	8010448 <ucdr_buffer_remaining>
 8011c98:	2803      	cmp	r0, #3
 8011c9a:	bf8c      	ite	hi
 8011c9c:	2701      	movhi	r7, #1
 8011c9e:	2700      	movls	r7, #0
 8011ca0:	d802      	bhi.n	8011ca8 <uxr_read_submessage_header+0x28>
 8011ca2:	4638      	mov	r0, r7
 8011ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca8:	4633      	mov	r3, r6
 8011caa:	4642      	mov	r2, r8
 8011cac:	4620      	mov	r0, r4
 8011cae:	4629      	mov	r1, r5
 8011cb0:	f000 fa18 	bl	80120e4 <uxr_deserialize_submessage_header>
 8011cb4:	f898 3000 	ldrb.w	r3, [r8]
 8011cb8:	f003 0201 	and.w	r2, r3, #1
 8011cbc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8011cc0:	f888 3000 	strb.w	r3, [r8]
 8011cc4:	7522      	strb	r2, [r4, #20]
 8011cc6:	4638      	mov	r0, r7
 8011cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ccc <uxr_submessage_padding>:
 8011ccc:	f010 0003 	ands.w	r0, r0, #3
 8011cd0:	bf18      	it	ne
 8011cd2:	f1c0 0004 	rsbne	r0, r0, #4
 8011cd6:	4770      	bx	lr

08011cd8 <uxr_millis>:
 8011cd8:	b510      	push	{r4, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	4669      	mov	r1, sp
 8011cde:	2001      	movs	r0, #1
 8011ce0:	f7ef fbaa 	bl	8001438 <clock_gettime>
 8011ce4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011ce8:	4906      	ldr	r1, [pc, #24]	; (8011d04 <uxr_millis+0x2c>)
 8011cea:	fba0 0301 	umull	r0, r3, r0, r1
 8011cee:	1900      	adds	r0, r0, r4
 8011cf0:	fb01 3102 	mla	r1, r1, r2, r3
 8011cf4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011cf8:	4a03      	ldr	r2, [pc, #12]	; (8011d08 <uxr_millis+0x30>)
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	f7ee fad0 	bl	80002a0 <__aeabi_ldivmod>
 8011d00:	b004      	add	sp, #16
 8011d02:	bd10      	pop	{r4, pc}
 8011d04:	3b9aca00 	.word	0x3b9aca00
 8011d08:	000f4240 	.word	0x000f4240

08011d0c <uxr_nanos>:
 8011d0c:	b510      	push	{r4, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	4669      	mov	r1, sp
 8011d12:	2001      	movs	r0, #1
 8011d14:	f7ef fb90 	bl	8001438 <clock_gettime>
 8011d18:	4a06      	ldr	r2, [pc, #24]	; (8011d34 <uxr_nanos+0x28>)
 8011d1a:	9800      	ldr	r0, [sp, #0]
 8011d1c:	9902      	ldr	r1, [sp, #8]
 8011d1e:	9c01      	ldr	r4, [sp, #4]
 8011d20:	fba0 0302 	umull	r0, r3, r0, r2
 8011d24:	1840      	adds	r0, r0, r1
 8011d26:	fb02 3304 	mla	r3, r2, r4, r3
 8011d2a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011d2e:	b004      	add	sp, #16
 8011d30:	bd10      	pop	{r4, pc}
 8011d32:	bf00      	nop
 8011d34:	3b9aca00 	.word	0x3b9aca00

08011d38 <on_full_output_buffer_fragmented>:
 8011d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3c:	460c      	mov	r4, r1
 8011d3e:	b08a      	sub	sp, #40	; 0x28
 8011d40:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8011d44:	4606      	mov	r6, r0
 8011d46:	f104 0008 	add.w	r0, r4, #8
 8011d4a:	f7ff ff4b 	bl	8011be4 <uxr_get_output_reliable_stream>
 8011d4e:	4605      	mov	r5, r0
 8011d50:	f004 fbe8 	bl	8016524 <get_available_free_slots>
 8011d54:	b968      	cbnz	r0, 8011d72 <on_full_output_buffer_fragmented+0x3a>
 8011d56:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	4798      	blx	r3
 8011d5e:	b918      	cbnz	r0, 8011d68 <on_full_output_buffer_fragmented+0x30>
 8011d60:	2001      	movs	r0, #1
 8011d62:	b00a      	add	sp, #40	; 0x28
 8011d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d68:	4628      	mov	r0, r5
 8011d6a:	f004 fbdb 	bl	8016524 <get_available_free_slots>
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	d0f6      	beq.n	8011d60 <on_full_output_buffer_fragmented+0x28>
 8011d72:	8929      	ldrh	r1, [r5, #8]
 8011d74:	89eb      	ldrh	r3, [r5, #14]
 8011d76:	7b28      	ldrb	r0, [r5, #12]
 8011d78:	686a      	ldr	r2, [r5, #4]
 8011d7a:	fbb2 f8f1 	udiv	r8, r2, r1
 8011d7e:	fbb3 f2f1 	udiv	r2, r3, r1
 8011d82:	fb01 3112 	mls	r1, r1, r2, r3
 8011d86:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 8011d8a:	b289      	uxth	r1, r1
 8011d8c:	fb08 f101 	mul.w	r1, r8, r1
 8011d90:	30fc      	adds	r0, #252	; 0xfc
 8011d92:	f1a8 0804 	sub.w	r8, r8, #4
 8011d96:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8011d9a:	4440      	add	r0, r8
 8011d9c:	b287      	uxth	r7, r0
 8011d9e:	1bdb      	subs	r3, r3, r7
 8011da0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8011da4:	682b      	ldr	r3, [r5, #0]
 8011da6:	3104      	adds	r1, #4
 8011da8:	4419      	add	r1, r3
 8011daa:	4642      	mov	r2, r8
 8011dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011db0:	9300      	str	r3, [sp, #0]
 8011db2:	a802      	add	r0, sp, #8
 8011db4:	2300      	movs	r3, #0
 8011db6:	f7fe fb05 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 8011dba:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011dbe:	f102 0308 	add.w	r3, r2, #8
 8011dc2:	4543      	cmp	r3, r8
 8011dc4:	d928      	bls.n	8011e18 <on_full_output_buffer_fragmented+0xe0>
 8011dc6:	463a      	mov	r2, r7
 8011dc8:	2300      	movs	r3, #0
 8011dca:	210d      	movs	r1, #13
 8011dcc:	a802      	add	r0, sp, #8
 8011dce:	f7ff ff3d 	bl	8011c4c <uxr_buffer_submessage_header>
 8011dd2:	8929      	ldrh	r1, [r5, #8]
 8011dd4:	89eb      	ldrh	r3, [r5, #14]
 8011dd6:	fbb3 f2f1 	udiv	r2, r3, r1
 8011dda:	fb01 3312 	mls	r3, r1, r2, r3
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	686a      	ldr	r2, [r5, #4]
 8011de2:	fbb2 f2f1 	udiv	r2, r2, r1
 8011de6:	fb02 f303 	mul.w	r3, r2, r3
 8011dea:	682a      	ldr	r2, [r5, #0]
 8011dec:	f842 8003 	str.w	r8, [r2, r3]
 8011df0:	89e8      	ldrh	r0, [r5, #14]
 8011df2:	2101      	movs	r1, #1
 8011df4:	f004 fce6 	bl	80167c4 <uxr_seq_num_add>
 8011df8:	9904      	ldr	r1, [sp, #16]
 8011dfa:	9a03      	ldr	r2, [sp, #12]
 8011dfc:	81e8      	strh	r0, [r5, #14]
 8011dfe:	1a52      	subs	r2, r2, r1
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7fe faf1 	bl	80103e8 <ucdr_init_buffer>
 8011e06:	4630      	mov	r0, r6
 8011e08:	490f      	ldr	r1, [pc, #60]	; (8011e48 <on_full_output_buffer_fragmented+0x110>)
 8011e0a:	4622      	mov	r2, r4
 8011e0c:	f7fe fac0 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8011e10:	2000      	movs	r0, #0
 8011e12:	b00a      	add	sp, #40	; 0x28
 8011e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e18:	b292      	uxth	r2, r2
 8011e1a:	2302      	movs	r3, #2
 8011e1c:	210d      	movs	r1, #13
 8011e1e:	a802      	add	r0, sp, #8
 8011e20:	f7ff ff14 	bl	8011c4c <uxr_buffer_submessage_header>
 8011e24:	8928      	ldrh	r0, [r5, #8]
 8011e26:	89eb      	ldrh	r3, [r5, #14]
 8011e28:	fbb3 f1f0 	udiv	r1, r3, r0
 8011e2c:	fb00 3311 	mls	r3, r0, r1, r3
 8011e30:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011e34:	6869      	ldr	r1, [r5, #4]
 8011e36:	fbb1 f1f0 	udiv	r1, r1, r0
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	fb01 f303 	mul.w	r3, r1, r3
 8011e40:	6829      	ldr	r1, [r5, #0]
 8011e42:	3208      	adds	r2, #8
 8011e44:	50ca      	str	r2, [r1, r3]
 8011e46:	e7d3      	b.n	8011df0 <on_full_output_buffer_fragmented+0xb8>
 8011e48:	08011d39 	.word	0x08011d39

08011e4c <uxr_prepare_output_stream>:
 8011e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e4e:	b087      	sub	sp, #28
 8011e50:	2707      	movs	r7, #7
 8011e52:	9202      	str	r2, [sp, #8]
 8011e54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e56:	9103      	str	r1, [sp, #12]
 8011e58:	2500      	movs	r5, #0
 8011e5a:	3204      	adds	r2, #4
 8011e5c:	e9cd 7500 	strd	r7, r5, [sp]
 8011e60:	461c      	mov	r4, r3
 8011e62:	4606      	mov	r6, r0
 8011e64:	f7ff fc54 	bl	8011710 <uxr_prepare_stream_to_write_submessage>
 8011e68:	f080 0201 	eor.w	r2, r0, #1
 8011e6c:	b2d2      	uxtb	r2, r2
 8011e6e:	75a2      	strb	r2, [r4, #22]
 8011e70:	b112      	cbz	r2, 8011e78 <uxr_prepare_output_stream+0x2c>
 8011e72:	4628      	mov	r0, r5
 8011e74:	b007      	add	sp, #28
 8011e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e78:	aa05      	add	r2, sp, #20
 8011e7a:	9902      	ldr	r1, [sp, #8]
 8011e7c:	4630      	mov	r0, r6
 8011e7e:	f7ff fd7d 	bl	801197c <uxr_init_base_object_request>
 8011e82:	a905      	add	r1, sp, #20
 8011e84:	4605      	mov	r5, r0
 8011e86:	4620      	mov	r0, r4
 8011e88:	f001 f88c 	bl	8012fa4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011e8c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011e90:	69a6      	ldr	r6, [r4, #24]
 8011e92:	69e7      	ldr	r7, [r4, #28]
 8011e94:	1a52      	subs	r2, r2, r1
 8011e96:	4620      	mov	r0, r4
 8011e98:	f7fe faa6 	bl	80103e8 <ucdr_init_buffer>
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	463a      	mov	r2, r7
 8011ea0:	4631      	mov	r1, r6
 8011ea2:	f7fe fa75 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	b007      	add	sp, #28
 8011eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011eac <uxr_prepare_output_stream_fragmented>:
 8011eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	b091      	sub	sp, #68	; 0x44
 8011eb2:	4605      	mov	r5, r0
 8011eb4:	9105      	str	r1, [sp, #20]
 8011eb6:	3008      	adds	r0, #8
 8011eb8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011ebc:	461e      	mov	r6, r3
 8011ebe:	9204      	str	r2, [sp, #16]
 8011ec0:	f7ff fe90 	bl	8011be4 <uxr_get_output_reliable_stream>
 8011ec4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	f000 8091 	beq.w	8011ff0 <uxr_prepare_output_stream_fragmented+0x144>
 8011ece:	4604      	mov	r4, r0
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	f000 808d 	beq.w	8011ff0 <uxr_prepare_output_stream_fragmented+0x144>
 8011ed6:	f004 fb25 	bl	8016524 <get_available_free_slots>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	f000 8083 	beq.w	8011fe6 <uxr_prepare_output_stream_fragmented+0x13a>
 8011ee0:	8922      	ldrh	r2, [r4, #8]
 8011ee2:	89e7      	ldrh	r7, [r4, #14]
 8011ee4:	fbb7 f9f2 	udiv	r9, r7, r2
 8011ee8:	fb02 7919 	mls	r9, r2, r9, r7
 8011eec:	fa1f f989 	uxth.w	r9, r9
 8011ef0:	6863      	ldr	r3, [r4, #4]
 8011ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	9203      	str	r2, [sp, #12]
 8011efa:	fb02 f909 	mul.w	r9, r2, r9
 8011efe:	f109 0904 	add.w	r9, r9, #4
 8011f02:	4499      	add	r9, r3
 8011f04:	7b23      	ldrb	r3, [r4, #12]
 8011f06:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011f0a:	4543      	cmp	r3, r8
 8011f0c:	f1a2 0b04 	sub.w	fp, r2, #4
 8011f10:	d37a      	bcc.n	8012008 <uxr_prepare_output_stream_fragmented+0x15c>
 8011f12:	f1ab 0a04 	sub.w	sl, fp, #4
 8011f16:	ebaa 0a03 	sub.w	sl, sl, r3
 8011f1a:	465a      	mov	r2, fp
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	4649      	mov	r1, r9
 8011f20:	a808      	add	r0, sp, #32
 8011f22:	f8cd 8000 	str.w	r8, [sp]
 8011f26:	f7fe fa4d 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 8011f2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011f2c:	fa1f fa8a 	uxth.w	sl, sl
 8011f30:	4652      	mov	r2, sl
 8011f32:	f103 0a08 	add.w	sl, r3, #8
 8011f36:	45da      	cmp	sl, fp
 8011f38:	bf34      	ite	cc
 8011f3a:	2302      	movcc	r3, #2
 8011f3c:	2300      	movcs	r3, #0
 8011f3e:	210d      	movs	r1, #13
 8011f40:	a808      	add	r0, sp, #32
 8011f42:	f7ff fe83 	bl	8011c4c <uxr_buffer_submessage_header>
 8011f46:	8921      	ldrh	r1, [r4, #8]
 8011f48:	fbb7 f2f1 	udiv	r2, r7, r1
 8011f4c:	fb01 7212 	mls	r2, r1, r2, r7
 8011f50:	b292      	uxth	r2, r2
 8011f52:	6863      	ldr	r3, [r4, #4]
 8011f54:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f58:	fb02 f303 	mul.w	r3, r2, r3
 8011f5c:	6822      	ldr	r2, [r4, #0]
 8011f5e:	4638      	mov	r0, r7
 8011f60:	f842 b003 	str.w	fp, [r2, r3]
 8011f64:	2101      	movs	r1, #1
 8011f66:	f004 fc2d 	bl	80167c4 <uxr_seq_num_add>
 8011f6a:	9b03      	ldr	r3, [sp, #12]
 8011f6c:	f108 0104 	add.w	r1, r8, #4
 8011f70:	f1a3 0208 	sub.w	r2, r3, #8
 8011f74:	eba2 0208 	sub.w	r2, r2, r8
 8011f78:	4449      	add	r1, r9
 8011f7a:	4607      	mov	r7, r0
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	f7fe fa33 	bl	80103e8 <ucdr_init_buffer>
 8011f82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011f84:	81e7      	strh	r7, [r4, #14]
 8011f86:	1d1a      	adds	r2, r3, #4
 8011f88:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011f8c:	bf28      	it	cs
 8011f8e:	2200      	movcs	r2, #0
 8011f90:	2300      	movs	r3, #0
 8011f92:	b292      	uxth	r2, r2
 8011f94:	2107      	movs	r1, #7
 8011f96:	4630      	mov	r0, r6
 8011f98:	f7ff fe58 	bl	8011c4c <uxr_buffer_submessage_header>
 8011f9c:	9904      	ldr	r1, [sp, #16]
 8011f9e:	aa07      	add	r2, sp, #28
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	f7ff fceb 	bl	801197c <uxr_init_base_object_request>
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	b318      	cbz	r0, 8011ff2 <uxr_prepare_output_stream_fragmented+0x146>
 8011faa:	a907      	add	r1, sp, #28
 8011fac:	4630      	mov	r0, r6
 8011fae:	f000 fff9 	bl	8012fa4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011fb2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	1a52      	subs	r2, r2, r1
 8011fba:	f7fe fa15 	bl	80103e8 <ucdr_init_buffer>
 8011fbe:	9b05      	ldr	r3, [sp, #20]
 8011fc0:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8011fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fc6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8011fca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011fcc:	491b      	ldr	r1, [pc, #108]	; (801203c <uxr_prepare_output_stream_fragmented+0x190>)
 8011fce:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8011fd8:	462a      	mov	r2, r5
 8011fda:	f7fe f9d9 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8011fde:	4620      	mov	r0, r4
 8011fe0:	b011      	add	sp, #68	; 0x44
 8011fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011fe8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fea:	4628      	mov	r0, r5
 8011fec:	4798      	blx	r3
 8011fee:	b920      	cbnz	r0, 8011ffa <uxr_prepare_output_stream_fragmented+0x14e>
 8011ff0:	2400      	movs	r4, #0
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	b011      	add	sp, #68	; 0x44
 8011ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f004 fa92 	bl	8016524 <get_available_free_slots>
 8012000:	2800      	cmp	r0, #0
 8012002:	f47f af6d 	bne.w	8011ee0 <uxr_prepare_output_stream_fragmented+0x34>
 8012006:	e7f3      	b.n	8011ff0 <uxr_prepare_output_stream_fragmented+0x144>
 8012008:	4638      	mov	r0, r7
 801200a:	2101      	movs	r1, #1
 801200c:	f004 fbda 	bl	80167c4 <uxr_seq_num_add>
 8012010:	8921      	ldrh	r1, [r4, #8]
 8012012:	fbb0 f2f1 	udiv	r2, r0, r1
 8012016:	fb01 0912 	mls	r9, r1, r2, r0
 801201a:	fa1f f289 	uxth.w	r2, r9
 801201e:	6863      	ldr	r3, [r4, #4]
 8012020:	fbb3 f9f1 	udiv	r9, r3, r1
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	fb02 f909 	mul.w	r9, r2, r9
 801202a:	f109 0904 	add.w	r9, r9, #4
 801202e:	4499      	add	r9, r3
 8012030:	4607      	mov	r7, r0
 8012032:	7b23      	ldrb	r3, [r4, #12]
 8012034:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012038:	e76b      	b.n	8011f12 <uxr_prepare_output_stream_fragmented+0x66>
 801203a:	bf00      	nop
 801203c:	08011d39 	.word	0x08011d39

08012040 <uxr_serialize_message_header>:
 8012040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012042:	b083      	sub	sp, #12
 8012044:	4616      	mov	r6, r2
 8012046:	4604      	mov	r4, r0
 8012048:	9301      	str	r3, [sp, #4]
 801204a:	460d      	mov	r5, r1
 801204c:	9f08      	ldr	r7, [sp, #32]
 801204e:	f7fd fa1f 	bl	800f490 <ucdr_serialize_uint8_t>
 8012052:	4631      	mov	r1, r6
 8012054:	4620      	mov	r0, r4
 8012056:	f7fd fa1b 	bl	800f490 <ucdr_serialize_uint8_t>
 801205a:	9a01      	ldr	r2, [sp, #4]
 801205c:	2101      	movs	r1, #1
 801205e:	4620      	mov	r0, r4
 8012060:	f7fd fac2 	bl	800f5e8 <ucdr_serialize_endian_uint16_t>
 8012064:	062b      	lsls	r3, r5, #24
 8012066:	d501      	bpl.n	801206c <uxr_serialize_message_header+0x2c>
 8012068:	b003      	add	sp, #12
 801206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801206c:	2204      	movs	r2, #4
 801206e:	4639      	mov	r1, r7
 8012070:	4620      	mov	r0, r4
 8012072:	b003      	add	sp, #12
 8012074:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012078:	f003 bb32 	b.w	80156e0 <ucdr_serialize_array_uint8_t>

0801207c <uxr_deserialize_message_header>:
 801207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801207e:	b083      	sub	sp, #12
 8012080:	4616      	mov	r6, r2
 8012082:	4604      	mov	r4, r0
 8012084:	9301      	str	r3, [sp, #4]
 8012086:	460d      	mov	r5, r1
 8012088:	9f08      	ldr	r7, [sp, #32]
 801208a:	f7fd fa17 	bl	800f4bc <ucdr_deserialize_uint8_t>
 801208e:	4631      	mov	r1, r6
 8012090:	4620      	mov	r0, r4
 8012092:	f7fd fa13 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012096:	9a01      	ldr	r2, [sp, #4]
 8012098:	2101      	movs	r1, #1
 801209a:	4620      	mov	r0, r4
 801209c:	f7fd fb98 	bl	800f7d0 <ucdr_deserialize_endian_uint16_t>
 80120a0:	f995 3000 	ldrsb.w	r3, [r5]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	da01      	bge.n	80120ac <uxr_deserialize_message_header+0x30>
 80120a8:	b003      	add	sp, #12
 80120aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120ac:	2204      	movs	r2, #4
 80120ae:	4639      	mov	r1, r7
 80120b0:	4620      	mov	r0, r4
 80120b2:	b003      	add	sp, #12
 80120b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80120b8:	f003 bb76 	b.w	80157a8 <ucdr_deserialize_array_uint8_t>

080120bc <uxr_serialize_submessage_header>:
 80120bc:	b530      	push	{r4, r5, lr}
 80120be:	b083      	sub	sp, #12
 80120c0:	4615      	mov	r5, r2
 80120c2:	4604      	mov	r4, r0
 80120c4:	9301      	str	r3, [sp, #4]
 80120c6:	f7fd f9e3 	bl	800f490 <ucdr_serialize_uint8_t>
 80120ca:	4629      	mov	r1, r5
 80120cc:	4620      	mov	r0, r4
 80120ce:	f7fd f9df 	bl	800f490 <ucdr_serialize_uint8_t>
 80120d2:	9a01      	ldr	r2, [sp, #4]
 80120d4:	2101      	movs	r1, #1
 80120d6:	4620      	mov	r0, r4
 80120d8:	b003      	add	sp, #12
 80120da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120de:	f7fd ba83 	b.w	800f5e8 <ucdr_serialize_endian_uint16_t>
 80120e2:	bf00      	nop

080120e4 <uxr_deserialize_submessage_header>:
 80120e4:	b530      	push	{r4, r5, lr}
 80120e6:	b083      	sub	sp, #12
 80120e8:	4615      	mov	r5, r2
 80120ea:	4604      	mov	r4, r0
 80120ec:	9301      	str	r3, [sp, #4]
 80120ee:	f7fd f9e5 	bl	800f4bc <ucdr_deserialize_uint8_t>
 80120f2:	4629      	mov	r1, r5
 80120f4:	4620      	mov	r0, r4
 80120f6:	f7fd f9e1 	bl	800f4bc <ucdr_deserialize_uint8_t>
 80120fa:	9a01      	ldr	r2, [sp, #4]
 80120fc:	2101      	movs	r1, #1
 80120fe:	4620      	mov	r0, r4
 8012100:	b003      	add	sp, #12
 8012102:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012106:	f7fd bb63 	b.w	800f7d0 <ucdr_deserialize_endian_uint16_t>
 801210a:	bf00      	nop

0801210c <uxr_serialize_CLIENT_Representation>:
 801210c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012110:	2204      	movs	r2, #4
 8012112:	460e      	mov	r6, r1
 8012114:	4605      	mov	r5, r0
 8012116:	f003 fae3 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 801211a:	2202      	movs	r2, #2
 801211c:	4607      	mov	r7, r0
 801211e:	1d31      	adds	r1, r6, #4
 8012120:	4628      	mov	r0, r5
 8012122:	f003 fadd 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012126:	4038      	ands	r0, r7
 8012128:	2202      	movs	r2, #2
 801212a:	1db1      	adds	r1, r6, #6
 801212c:	b2c7      	uxtb	r7, r0
 801212e:	4628      	mov	r0, r5
 8012130:	f003 fad6 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012134:	2204      	movs	r2, #4
 8012136:	4007      	ands	r7, r0
 8012138:	f106 0108 	add.w	r1, r6, #8
 801213c:	4628      	mov	r0, r5
 801213e:	f003 facf 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012142:	7b31      	ldrb	r1, [r6, #12]
 8012144:	4007      	ands	r7, r0
 8012146:	4628      	mov	r0, r5
 8012148:	f7fd f9a2 	bl	800f490 <ucdr_serialize_uint8_t>
 801214c:	7b71      	ldrb	r1, [r6, #13]
 801214e:	4007      	ands	r7, r0
 8012150:	4628      	mov	r0, r5
 8012152:	f7fd f96f 	bl	800f434 <ucdr_serialize_bool>
 8012156:	7b73      	ldrb	r3, [r6, #13]
 8012158:	ea07 0800 	and.w	r8, r7, r0
 801215c:	b93b      	cbnz	r3, 801216e <uxr_serialize_CLIENT_Representation+0x62>
 801215e:	8bb1      	ldrh	r1, [r6, #28]
 8012160:	4628      	mov	r0, r5
 8012162:	f7fd f9c1 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012166:	ea08 0000 	and.w	r0, r8, r0
 801216a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801216e:	6931      	ldr	r1, [r6, #16]
 8012170:	4628      	mov	r0, r5
 8012172:	f7fd fba3 	bl	800f8bc <ucdr_serialize_uint32_t>
 8012176:	6933      	ldr	r3, [r6, #16]
 8012178:	b1e3      	cbz	r3, 80121b4 <uxr_serialize_CLIENT_Representation+0xa8>
 801217a:	b1c0      	cbz	r0, 80121ae <uxr_serialize_CLIENT_Representation+0xa2>
 801217c:	4637      	mov	r7, r6
 801217e:	f04f 0900 	mov.w	r9, #0
 8012182:	e001      	b.n	8012188 <uxr_serialize_CLIENT_Representation+0x7c>
 8012184:	3708      	adds	r7, #8
 8012186:	b194      	cbz	r4, 80121ae <uxr_serialize_CLIENT_Representation+0xa2>
 8012188:	6979      	ldr	r1, [r7, #20]
 801218a:	4628      	mov	r0, r5
 801218c:	f003 fbc8 	bl	8015920 <ucdr_serialize_string>
 8012190:	69b9      	ldr	r1, [r7, #24]
 8012192:	4604      	mov	r4, r0
 8012194:	4628      	mov	r0, r5
 8012196:	f003 fbc3 	bl	8015920 <ucdr_serialize_string>
 801219a:	6933      	ldr	r3, [r6, #16]
 801219c:	f109 0901 	add.w	r9, r9, #1
 80121a0:	4004      	ands	r4, r0
 80121a2:	4599      	cmp	r9, r3
 80121a4:	b2e4      	uxtb	r4, r4
 80121a6:	d3ed      	bcc.n	8012184 <uxr_serialize_CLIENT_Representation+0x78>
 80121a8:	ea08 0804 	and.w	r8, r8, r4
 80121ac:	e7d7      	b.n	801215e <uxr_serialize_CLIENT_Representation+0x52>
 80121ae:	f04f 0800 	mov.w	r8, #0
 80121b2:	e7d4      	b.n	801215e <uxr_serialize_CLIENT_Representation+0x52>
 80121b4:	ea08 0800 	and.w	r8, r8, r0
 80121b8:	e7d1      	b.n	801215e <uxr_serialize_CLIENT_Representation+0x52>
 80121ba:	bf00      	nop

080121bc <uxr_deserialize_CLIENT_Representation>:
 80121bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c0:	2204      	movs	r2, #4
 80121c2:	460c      	mov	r4, r1
 80121c4:	4605      	mov	r5, r0
 80121c6:	f003 faef 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 80121ca:	2202      	movs	r2, #2
 80121cc:	4607      	mov	r7, r0
 80121ce:	1d21      	adds	r1, r4, #4
 80121d0:	4628      	mov	r0, r5
 80121d2:	f003 fae9 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 80121d6:	4038      	ands	r0, r7
 80121d8:	2202      	movs	r2, #2
 80121da:	1da1      	adds	r1, r4, #6
 80121dc:	b2c6      	uxtb	r6, r0
 80121de:	4628      	mov	r0, r5
 80121e0:	f003 fae2 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 80121e4:	2204      	movs	r2, #4
 80121e6:	4006      	ands	r6, r0
 80121e8:	f104 0108 	add.w	r1, r4, #8
 80121ec:	4628      	mov	r0, r5
 80121ee:	f003 fadb 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 80121f2:	f104 010c 	add.w	r1, r4, #12
 80121f6:	4006      	ands	r6, r0
 80121f8:	4628      	mov	r0, r5
 80121fa:	f7fd f95f 	bl	800f4bc <ucdr_deserialize_uint8_t>
 80121fe:	f104 010d 	add.w	r1, r4, #13
 8012202:	ea06 0700 	and.w	r7, r6, r0
 8012206:	4628      	mov	r0, r5
 8012208:	f7fd f92a 	bl	800f460 <ucdr_deserialize_bool>
 801220c:	7b63      	ldrb	r3, [r4, #13]
 801220e:	4007      	ands	r7, r0
 8012210:	b93b      	cbnz	r3, 8012222 <uxr_deserialize_CLIENT_Representation+0x66>
 8012212:	f104 011c 	add.w	r1, r4, #28
 8012216:	4628      	mov	r0, r5
 8012218:	f7fd fa66 	bl	800f6e8 <ucdr_deserialize_uint16_t>
 801221c:	4038      	ands	r0, r7
 801221e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012222:	f104 0110 	add.w	r1, r4, #16
 8012226:	4628      	mov	r0, r5
 8012228:	f7fd fc78 	bl	800fb1c <ucdr_deserialize_uint32_t>
 801222c:	6923      	ldr	r3, [r4, #16]
 801222e:	2b01      	cmp	r3, #1
 8012230:	d903      	bls.n	801223a <uxr_deserialize_CLIENT_Representation+0x7e>
 8012232:	2301      	movs	r3, #1
 8012234:	75ab      	strb	r3, [r5, #22]
 8012236:	2700      	movs	r7, #0
 8012238:	e7eb      	b.n	8012212 <uxr_deserialize_CLIENT_Representation+0x56>
 801223a:	b30b      	cbz	r3, 8012280 <uxr_deserialize_CLIENT_Representation+0xc4>
 801223c:	2800      	cmp	r0, #0
 801223e:	d0fa      	beq.n	8012236 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012240:	46a0      	mov	r8, r4
 8012242:	f04f 0900 	mov.w	r9, #0
 8012246:	e001      	b.n	801224c <uxr_deserialize_CLIENT_Representation+0x90>
 8012248:	2e00      	cmp	r6, #0
 801224a:	d0f4      	beq.n	8012236 <uxr_deserialize_CLIENT_Representation+0x7a>
 801224c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012254:	4628      	mov	r0, r5
 8012256:	f003 fb73 	bl	8015940 <ucdr_deserialize_string>
 801225a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801225e:	4606      	mov	r6, r0
 8012260:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012264:	4628      	mov	r0, r5
 8012266:	f003 fb6b 	bl	8015940 <ucdr_deserialize_string>
 801226a:	6923      	ldr	r3, [r4, #16]
 801226c:	f109 0901 	add.w	r9, r9, #1
 8012270:	4006      	ands	r6, r0
 8012272:	4599      	cmp	r9, r3
 8012274:	f108 0808 	add.w	r8, r8, #8
 8012278:	b2f6      	uxtb	r6, r6
 801227a:	d3e5      	bcc.n	8012248 <uxr_deserialize_CLIENT_Representation+0x8c>
 801227c:	4037      	ands	r7, r6
 801227e:	e7c8      	b.n	8012212 <uxr_deserialize_CLIENT_Representation+0x56>
 8012280:	4007      	ands	r7, r0
 8012282:	e7c6      	b.n	8012212 <uxr_deserialize_CLIENT_Representation+0x56>

08012284 <uxr_serialize_AGENT_Representation>:
 8012284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012288:	2204      	movs	r2, #4
 801228a:	460f      	mov	r7, r1
 801228c:	4605      	mov	r5, r0
 801228e:	f003 fa27 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012292:	2202      	movs	r2, #2
 8012294:	4604      	mov	r4, r0
 8012296:	1d39      	adds	r1, r7, #4
 8012298:	4628      	mov	r0, r5
 801229a:	f003 fa21 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 801229e:	4020      	ands	r0, r4
 80122a0:	2202      	movs	r2, #2
 80122a2:	1db9      	adds	r1, r7, #6
 80122a4:	b2c4      	uxtb	r4, r0
 80122a6:	4628      	mov	r0, r5
 80122a8:	f003 fa1a 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 80122ac:	7a39      	ldrb	r1, [r7, #8]
 80122ae:	4004      	ands	r4, r0
 80122b0:	4628      	mov	r0, r5
 80122b2:	f7fd f8bf 	bl	800f434 <ucdr_serialize_bool>
 80122b6:	7a3b      	ldrb	r3, [r7, #8]
 80122b8:	ea00 0804 	and.w	r8, r0, r4
 80122bc:	b913      	cbnz	r3, 80122c4 <uxr_serialize_AGENT_Representation+0x40>
 80122be:	4640      	mov	r0, r8
 80122c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122c4:	68f9      	ldr	r1, [r7, #12]
 80122c6:	4628      	mov	r0, r5
 80122c8:	f7fd faf8 	bl	800f8bc <ucdr_serialize_uint32_t>
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	b303      	cbz	r3, 8012312 <uxr_serialize_AGENT_Representation+0x8e>
 80122d0:	b1d0      	cbz	r0, 8012308 <uxr_serialize_AGENT_Representation+0x84>
 80122d2:	463e      	mov	r6, r7
 80122d4:	f04f 0900 	mov.w	r9, #0
 80122d8:	e001      	b.n	80122de <uxr_serialize_AGENT_Representation+0x5a>
 80122da:	3608      	adds	r6, #8
 80122dc:	b1a4      	cbz	r4, 8012308 <uxr_serialize_AGENT_Representation+0x84>
 80122de:	6931      	ldr	r1, [r6, #16]
 80122e0:	4628      	mov	r0, r5
 80122e2:	f003 fb1d 	bl	8015920 <ucdr_serialize_string>
 80122e6:	6971      	ldr	r1, [r6, #20]
 80122e8:	4604      	mov	r4, r0
 80122ea:	4628      	mov	r0, r5
 80122ec:	f003 fb18 	bl	8015920 <ucdr_serialize_string>
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f109 0901 	add.w	r9, r9, #1
 80122f6:	4004      	ands	r4, r0
 80122f8:	4599      	cmp	r9, r3
 80122fa:	b2e4      	uxtb	r4, r4
 80122fc:	d3ed      	bcc.n	80122da <uxr_serialize_AGENT_Representation+0x56>
 80122fe:	ea08 0804 	and.w	r8, r8, r4
 8012302:	4640      	mov	r0, r8
 8012304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012308:	f04f 0800 	mov.w	r8, #0
 801230c:	4640      	mov	r0, r8
 801230e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012312:	ea08 0800 	and.w	r8, r8, r0
 8012316:	e7d2      	b.n	80122be <uxr_serialize_AGENT_Representation+0x3a>

08012318 <uxr_serialize_DATAWRITER_Representation>:
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	460d      	mov	r5, r1
 801231c:	7809      	ldrb	r1, [r1, #0]
 801231e:	4606      	mov	r6, r0
 8012320:	f7fd f8b6 	bl	800f490 <ucdr_serialize_uint8_t>
 8012324:	4604      	mov	r4, r0
 8012326:	b130      	cbz	r0, 8012336 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012328:	782b      	ldrb	r3, [r5, #0]
 801232a:	2b02      	cmp	r3, #2
 801232c:	d00c      	beq.n	8012348 <uxr_serialize_DATAWRITER_Representation+0x30>
 801232e:	2b03      	cmp	r3, #3
 8012330:	d010      	beq.n	8012354 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012332:	2b01      	cmp	r3, #1
 8012334:	d008      	beq.n	8012348 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012336:	2202      	movs	r2, #2
 8012338:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801233c:	4630      	mov	r0, r6
 801233e:	f003 f9cf 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012342:	4020      	ands	r0, r4
 8012344:	b2c0      	uxtb	r0, r0
 8012346:	bd70      	pop	{r4, r5, r6, pc}
 8012348:	6869      	ldr	r1, [r5, #4]
 801234a:	4630      	mov	r0, r6
 801234c:	f003 fae8 	bl	8015920 <ucdr_serialize_string>
 8012350:	4604      	mov	r4, r0
 8012352:	e7f0      	b.n	8012336 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012354:	4629      	mov	r1, r5
 8012356:	4630      	mov	r0, r6
 8012358:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801235c:	3104      	adds	r1, #4
 801235e:	f003 fab3 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 8012362:	4604      	mov	r4, r0
 8012364:	e7e7      	b.n	8012336 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012366:	bf00      	nop

08012368 <uxr_serialize_ObjectVariant.part.0>:
 8012368:	b570      	push	{r4, r5, r6, lr}
 801236a:	780b      	ldrb	r3, [r1, #0]
 801236c:	3b01      	subs	r3, #1
 801236e:	460c      	mov	r4, r1
 8012370:	4605      	mov	r5, r0
 8012372:	2b0d      	cmp	r3, #13
 8012374:	d854      	bhi.n	8012420 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012376:	e8df f003 	tbb	[pc, r3]
 801237a:	0730      	.short	0x0730
 801237c:	07071b1b 	.word	0x07071b1b
 8012380:	0c530707 	.word	0x0c530707
 8012384:	494e0c0c 	.word	0x494e0c0c
 8012388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801238c:	3104      	adds	r1, #4
 801238e:	f7ff bfc3 	b.w	8012318 <uxr_serialize_DATAWRITER_Representation>
 8012392:	7909      	ldrb	r1, [r1, #4]
 8012394:	f7fd f87c 	bl	800f490 <ucdr_serialize_uint8_t>
 8012398:	b1e8      	cbz	r0, 80123d6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801239a:	7923      	ldrb	r3, [r4, #4]
 801239c:	2b01      	cmp	r3, #1
 801239e:	d001      	beq.n	80123a4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d13d      	bne.n	8012420 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80123a4:	68a1      	ldr	r1, [r4, #8]
 80123a6:	4628      	mov	r0, r5
 80123a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123ac:	f003 bab8 	b.w	8015920 <ucdr_serialize_string>
 80123b0:	7909      	ldrb	r1, [r1, #4]
 80123b2:	f7fd f86d 	bl	800f490 <ucdr_serialize_uint8_t>
 80123b6:	4606      	mov	r6, r0
 80123b8:	b120      	cbz	r0, 80123c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80123ba:	7923      	ldrb	r3, [r4, #4]
 80123bc:	2b02      	cmp	r3, #2
 80123be:	d039      	beq.n	8012434 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80123c0:	2b03      	cmp	r3, #3
 80123c2:	d02f      	beq.n	8012424 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80123c4:	2202      	movs	r2, #2
 80123c6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80123ca:	4628      	mov	r0, r5
 80123cc:	f003 f988 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 80123d0:	4030      	ands	r0, r6
 80123d2:	b2c0      	uxtb	r0, r0
 80123d4:	bd70      	pop	{r4, r5, r6, pc}
 80123d6:	2000      	movs	r0, #0
 80123d8:	bd70      	pop	{r4, r5, r6, pc}
 80123da:	7909      	ldrb	r1, [r1, #4]
 80123dc:	f7fd f858 	bl	800f490 <ucdr_serialize_uint8_t>
 80123e0:	4606      	mov	r6, r0
 80123e2:	b158      	cbz	r0, 80123fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80123e4:	7923      	ldrb	r3, [r4, #4]
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	d003      	beq.n	80123f2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d028      	beq.n	8012440 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d104      	bne.n	80123fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80123f2:	68a1      	ldr	r1, [r4, #8]
 80123f4:	4628      	mov	r0, r5
 80123f6:	f003 fa93 	bl	8015920 <ucdr_serialize_string>
 80123fa:	4606      	mov	r6, r0
 80123fc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8012400:	4628      	mov	r0, r5
 8012402:	f7fd fd81 	bl	800ff08 <ucdr_serialize_int16_t>
 8012406:	4030      	ands	r0, r6
 8012408:	b2c0      	uxtb	r0, r0
 801240a:	bd70      	pop	{r4, r5, r6, pc}
 801240c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012410:	3104      	adds	r1, #4
 8012412:	f7ff be7b 	b.w	801210c <uxr_serialize_CLIENT_Representation>
 8012416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801241a:	3104      	adds	r1, #4
 801241c:	f7ff bf32 	b.w	8012284 <uxr_serialize_AGENT_Representation>
 8012420:	2001      	movs	r0, #1
 8012422:	bd70      	pop	{r4, r5, r6, pc}
 8012424:	68a2      	ldr	r2, [r4, #8]
 8012426:	f104 010c 	add.w	r1, r4, #12
 801242a:	4628      	mov	r0, r5
 801242c:	f003 fa4c 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 8012430:	4606      	mov	r6, r0
 8012432:	e7c7      	b.n	80123c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012434:	68a1      	ldr	r1, [r4, #8]
 8012436:	4628      	mov	r0, r5
 8012438:	f003 fa72 	bl	8015920 <ucdr_serialize_string>
 801243c:	4606      	mov	r6, r0
 801243e:	e7c1      	b.n	80123c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012440:	68a2      	ldr	r2, [r4, #8]
 8012442:	f104 010c 	add.w	r1, r4, #12
 8012446:	4628      	mov	r0, r5
 8012448:	f003 fa3e 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 801244c:	4606      	mov	r6, r0
 801244e:	e7d5      	b.n	80123fc <uxr_serialize_ObjectVariant.part.0+0x94>

08012450 <uxr_deserialize_DATAWRITER_Representation>:
 8012450:	b570      	push	{r4, r5, r6, lr}
 8012452:	4606      	mov	r6, r0
 8012454:	460d      	mov	r5, r1
 8012456:	f7fd f831 	bl	800f4bc <ucdr_deserialize_uint8_t>
 801245a:	4604      	mov	r4, r0
 801245c:	b130      	cbz	r0, 801246c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801245e:	782b      	ldrb	r3, [r5, #0]
 8012460:	2b02      	cmp	r3, #2
 8012462:	d00c      	beq.n	801247e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012464:	2b03      	cmp	r3, #3
 8012466:	d012      	beq.n	801248e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012468:	2b01      	cmp	r3, #1
 801246a:	d008      	beq.n	801247e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801246c:	2202      	movs	r2, #2
 801246e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8012472:	4630      	mov	r0, r6
 8012474:	f003 f998 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012478:	4020      	ands	r0, r4
 801247a:	b2c0      	uxtb	r0, r0
 801247c:	bd70      	pop	{r4, r5, r6, pc}
 801247e:	6869      	ldr	r1, [r5, #4]
 8012480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012484:	4630      	mov	r0, r6
 8012486:	f003 fa5b 	bl	8015940 <ucdr_deserialize_string>
 801248a:	4604      	mov	r4, r0
 801248c:	e7ee      	b.n	801246c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801248e:	1d2b      	adds	r3, r5, #4
 8012490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012494:	f105 0108 	add.w	r1, r5, #8
 8012498:	4630      	mov	r0, r6
 801249a:	f003 fa27 	bl	80158ec <ucdr_deserialize_sequence_uint8_t>
 801249e:	4604      	mov	r4, r0
 80124a0:	e7e4      	b.n	801246c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80124a2:	bf00      	nop

080124a4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80124a4:	b570      	push	{r4, r5, r6, lr}
 80124a6:	460d      	mov	r5, r1
 80124a8:	7809      	ldrb	r1, [r1, #0]
 80124aa:	4606      	mov	r6, r0
 80124ac:	f7fc ffc2 	bl	800f434 <ucdr_serialize_bool>
 80124b0:	782b      	ldrb	r3, [r5, #0]
 80124b2:	4604      	mov	r4, r0
 80124b4:	b94b      	cbnz	r3, 80124ca <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80124b6:	7a29      	ldrb	r1, [r5, #8]
 80124b8:	4630      	mov	r0, r6
 80124ba:	f7fc ffbb 	bl	800f434 <ucdr_serialize_bool>
 80124be:	7a2b      	ldrb	r3, [r5, #8]
 80124c0:	4004      	ands	r4, r0
 80124c2:	b2e4      	uxtb	r4, r4
 80124c4:	b943      	cbnz	r3, 80124d8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80124c6:	4620      	mov	r0, r4
 80124c8:	bd70      	pop	{r4, r5, r6, pc}
 80124ca:	6869      	ldr	r1, [r5, #4]
 80124cc:	4630      	mov	r0, r6
 80124ce:	f003 fa27 	bl	8015920 <ucdr_serialize_string>
 80124d2:	4004      	ands	r4, r0
 80124d4:	b2e4      	uxtb	r4, r4
 80124d6:	e7ee      	b.n	80124b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80124d8:	68e9      	ldr	r1, [r5, #12]
 80124da:	4630      	mov	r0, r6
 80124dc:	f003 fa20 	bl	8015920 <ucdr_serialize_string>
 80124e0:	4004      	ands	r4, r0
 80124e2:	4620      	mov	r0, r4
 80124e4:	bd70      	pop	{r4, r5, r6, pc}
 80124e6:	bf00      	nop

080124e8 <uxr_serialize_OBJK_Topic_Binary>:
 80124e8:	b570      	push	{r4, r5, r6, lr}
 80124ea:	460d      	mov	r5, r1
 80124ec:	6809      	ldr	r1, [r1, #0]
 80124ee:	4606      	mov	r6, r0
 80124f0:	f003 fa16 	bl	8015920 <ucdr_serialize_string>
 80124f4:	7929      	ldrb	r1, [r5, #4]
 80124f6:	4604      	mov	r4, r0
 80124f8:	4630      	mov	r0, r6
 80124fa:	f7fc ff9b 	bl	800f434 <ucdr_serialize_bool>
 80124fe:	792b      	ldrb	r3, [r5, #4]
 8012500:	4004      	ands	r4, r0
 8012502:	b2e4      	uxtb	r4, r4
 8012504:	b943      	cbnz	r3, 8012518 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012506:	7b29      	ldrb	r1, [r5, #12]
 8012508:	4630      	mov	r0, r6
 801250a:	f7fc ff93 	bl	800f434 <ucdr_serialize_bool>
 801250e:	7b2b      	ldrb	r3, [r5, #12]
 8012510:	4004      	ands	r4, r0
 8012512:	b93b      	cbnz	r3, 8012524 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012514:	4620      	mov	r0, r4
 8012516:	bd70      	pop	{r4, r5, r6, pc}
 8012518:	68a9      	ldr	r1, [r5, #8]
 801251a:	4630      	mov	r0, r6
 801251c:	f003 fa00 	bl	8015920 <ucdr_serialize_string>
 8012520:	4004      	ands	r4, r0
 8012522:	e7f0      	b.n	8012506 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012524:	6929      	ldr	r1, [r5, #16]
 8012526:	4630      	mov	r0, r6
 8012528:	f003 f9fa 	bl	8015920 <ucdr_serialize_string>
 801252c:	4004      	ands	r4, r0
 801252e:	b2e4      	uxtb	r4, r4
 8012530:	4620      	mov	r0, r4
 8012532:	bd70      	pop	{r4, r5, r6, pc}

08012534 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012538:	460c      	mov	r4, r1
 801253a:	7809      	ldrb	r1, [r1, #0]
 801253c:	4606      	mov	r6, r0
 801253e:	f7fc ff79 	bl	800f434 <ucdr_serialize_bool>
 8012542:	7823      	ldrb	r3, [r4, #0]
 8012544:	4605      	mov	r5, r0
 8012546:	b96b      	cbnz	r3, 8012564 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012548:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801254c:	4630      	mov	r0, r6
 801254e:	f7fc ff71 	bl	800f434 <ucdr_serialize_bool>
 8012552:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012556:	4005      	ands	r5, r0
 8012558:	b2ed      	uxtb	r5, r5
 801255a:	2b00      	cmp	r3, #0
 801255c:	d169      	bne.n	8012632 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801255e:	4628      	mov	r0, r5
 8012560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012564:	6861      	ldr	r1, [r4, #4]
 8012566:	4630      	mov	r0, r6
 8012568:	f7fd f9a8 	bl	800f8bc <ucdr_serialize_uint32_t>
 801256c:	6863      	ldr	r3, [r4, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d06b      	beq.n	801264a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012572:	2800      	cmp	r0, #0
 8012574:	d067      	beq.n	8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012576:	68a1      	ldr	r1, [r4, #8]
 8012578:	4630      	mov	r0, r6
 801257a:	f003 f9d1 	bl	8015920 <ucdr_serialize_string>
 801257e:	6863      	ldr	r3, [r4, #4]
 8012580:	2b01      	cmp	r3, #1
 8012582:	d953      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012584:	2800      	cmp	r0, #0
 8012586:	d05e      	beq.n	8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012588:	68e1      	ldr	r1, [r4, #12]
 801258a:	4630      	mov	r0, r6
 801258c:	f003 f9c8 	bl	8015920 <ucdr_serialize_string>
 8012590:	6863      	ldr	r3, [r4, #4]
 8012592:	2b02      	cmp	r3, #2
 8012594:	d94a      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012596:	2800      	cmp	r0, #0
 8012598:	d055      	beq.n	8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801259a:	6921      	ldr	r1, [r4, #16]
 801259c:	4630      	mov	r0, r6
 801259e:	f003 f9bf 	bl	8015920 <ucdr_serialize_string>
 80125a2:	6863      	ldr	r3, [r4, #4]
 80125a4:	2b03      	cmp	r3, #3
 80125a6:	d941      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80125a8:	2800      	cmp	r0, #0
 80125aa:	d04c      	beq.n	8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80125ac:	6961      	ldr	r1, [r4, #20]
 80125ae:	4630      	mov	r0, r6
 80125b0:	f003 f9b6 	bl	8015920 <ucdr_serialize_string>
 80125b4:	6863      	ldr	r3, [r4, #4]
 80125b6:	2b04      	cmp	r3, #4
 80125b8:	d938      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d043      	beq.n	8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80125be:	69a1      	ldr	r1, [r4, #24]
 80125c0:	4630      	mov	r0, r6
 80125c2:	f003 f9ad 	bl	8015920 <ucdr_serialize_string>
 80125c6:	6863      	ldr	r3, [r4, #4]
 80125c8:	2b05      	cmp	r3, #5
 80125ca:	d92f      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d03a      	beq.n	8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80125d0:	69e1      	ldr	r1, [r4, #28]
 80125d2:	4630      	mov	r0, r6
 80125d4:	f003 f9a4 	bl	8015920 <ucdr_serialize_string>
 80125d8:	6863      	ldr	r3, [r4, #4]
 80125da:	2b06      	cmp	r3, #6
 80125dc:	d926      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80125de:	b390      	cbz	r0, 8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80125e0:	6a21      	ldr	r1, [r4, #32]
 80125e2:	4630      	mov	r0, r6
 80125e4:	f003 f99c 	bl	8015920 <ucdr_serialize_string>
 80125e8:	6863      	ldr	r3, [r4, #4]
 80125ea:	2b07      	cmp	r3, #7
 80125ec:	d91e      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80125ee:	b350      	cbz	r0, 8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80125f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80125f2:	4630      	mov	r0, r6
 80125f4:	f003 f994 	bl	8015920 <ucdr_serialize_string>
 80125f8:	6863      	ldr	r3, [r4, #4]
 80125fa:	2b08      	cmp	r3, #8
 80125fc:	d916      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80125fe:	b310      	cbz	r0, 8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012600:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012602:	4630      	mov	r0, r6
 8012604:	f003 f98c 	bl	8015920 <ucdr_serialize_string>
 8012608:	6863      	ldr	r3, [r4, #4]
 801260a:	2b09      	cmp	r3, #9
 801260c:	d90e      	bls.n	801262c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801260e:	b1d0      	cbz	r0, 8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012610:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012614:	2709      	movs	r7, #9
 8012616:	e000      	b.n	801261a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012618:	b1a8      	cbz	r0, 8012646 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801261a:	f858 1b04 	ldr.w	r1, [r8], #4
 801261e:	4630      	mov	r0, r6
 8012620:	f003 f97e 	bl	8015920 <ucdr_serialize_string>
 8012624:	6862      	ldr	r2, [r4, #4]
 8012626:	3701      	adds	r7, #1
 8012628:	4297      	cmp	r7, r2
 801262a:	d3f5      	bcc.n	8012618 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801262c:	4005      	ands	r5, r0
 801262e:	b2ed      	uxtb	r5, r5
 8012630:	e78a      	b.n	8012548 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012632:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012634:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012638:	4630      	mov	r0, r6
 801263a:	f003 f945 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 801263e:	4005      	ands	r5, r0
 8012640:	4628      	mov	r0, r5
 8012642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012646:	2500      	movs	r5, #0
 8012648:	e77e      	b.n	8012548 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801264a:	4028      	ands	r0, r5
 801264c:	b2c5      	uxtb	r5, r0
 801264e:	e77b      	b.n	8012548 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012650 <uxr_serialize_OBJK_Publisher_Binary>:
 8012650:	b570      	push	{r4, r5, r6, lr}
 8012652:	460d      	mov	r5, r1
 8012654:	7809      	ldrb	r1, [r1, #0]
 8012656:	4606      	mov	r6, r0
 8012658:	f7fc feec 	bl	800f434 <ucdr_serialize_bool>
 801265c:	782b      	ldrb	r3, [r5, #0]
 801265e:	4604      	mov	r4, r0
 8012660:	b94b      	cbnz	r3, 8012676 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012662:	7a29      	ldrb	r1, [r5, #8]
 8012664:	4630      	mov	r0, r6
 8012666:	f7fc fee5 	bl	800f434 <ucdr_serialize_bool>
 801266a:	7a2b      	ldrb	r3, [r5, #8]
 801266c:	4004      	ands	r4, r0
 801266e:	b2e4      	uxtb	r4, r4
 8012670:	b943      	cbnz	r3, 8012684 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012672:	4620      	mov	r0, r4
 8012674:	bd70      	pop	{r4, r5, r6, pc}
 8012676:	6869      	ldr	r1, [r5, #4]
 8012678:	4630      	mov	r0, r6
 801267a:	f003 f951 	bl	8015920 <ucdr_serialize_string>
 801267e:	4004      	ands	r4, r0
 8012680:	b2e4      	uxtb	r4, r4
 8012682:	e7ee      	b.n	8012662 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012684:	f105 010c 	add.w	r1, r5, #12
 8012688:	4630      	mov	r0, r6
 801268a:	f7ff ff53 	bl	8012534 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801268e:	4004      	ands	r4, r0
 8012690:	4620      	mov	r0, r4
 8012692:	bd70      	pop	{r4, r5, r6, pc}

08012694 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012698:	460c      	mov	r4, r1
 801269a:	7809      	ldrb	r1, [r1, #0]
 801269c:	4606      	mov	r6, r0
 801269e:	f7fc fec9 	bl	800f434 <ucdr_serialize_bool>
 80126a2:	7823      	ldrb	r3, [r4, #0]
 80126a4:	4605      	mov	r5, r0
 80126a6:	b96b      	cbnz	r3, 80126c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80126a8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80126ac:	4630      	mov	r0, r6
 80126ae:	f7fc fec1 	bl	800f434 <ucdr_serialize_bool>
 80126b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80126b6:	4005      	ands	r5, r0
 80126b8:	b2ed      	uxtb	r5, r5
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d169      	bne.n	8012792 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80126be:	4628      	mov	r0, r5
 80126c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c4:	6861      	ldr	r1, [r4, #4]
 80126c6:	4630      	mov	r0, r6
 80126c8:	f7fd f8f8 	bl	800f8bc <ucdr_serialize_uint32_t>
 80126cc:	6863      	ldr	r3, [r4, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d06b      	beq.n	80127aa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80126d2:	2800      	cmp	r0, #0
 80126d4:	d067      	beq.n	80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126d6:	68a1      	ldr	r1, [r4, #8]
 80126d8:	4630      	mov	r0, r6
 80126da:	f003 f921 	bl	8015920 <ucdr_serialize_string>
 80126de:	6863      	ldr	r3, [r4, #4]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	d953      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d05e      	beq.n	80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126e8:	68e1      	ldr	r1, [r4, #12]
 80126ea:	4630      	mov	r0, r6
 80126ec:	f003 f918 	bl	8015920 <ucdr_serialize_string>
 80126f0:	6863      	ldr	r3, [r4, #4]
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d94a      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d055      	beq.n	80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126fa:	6921      	ldr	r1, [r4, #16]
 80126fc:	4630      	mov	r0, r6
 80126fe:	f003 f90f 	bl	8015920 <ucdr_serialize_string>
 8012702:	6863      	ldr	r3, [r4, #4]
 8012704:	2b03      	cmp	r3, #3
 8012706:	d941      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012708:	2800      	cmp	r0, #0
 801270a:	d04c      	beq.n	80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801270c:	6961      	ldr	r1, [r4, #20]
 801270e:	4630      	mov	r0, r6
 8012710:	f003 f906 	bl	8015920 <ucdr_serialize_string>
 8012714:	6863      	ldr	r3, [r4, #4]
 8012716:	2b04      	cmp	r3, #4
 8012718:	d938      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801271a:	2800      	cmp	r0, #0
 801271c:	d043      	beq.n	80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801271e:	69a1      	ldr	r1, [r4, #24]
 8012720:	4630      	mov	r0, r6
 8012722:	f003 f8fd 	bl	8015920 <ucdr_serialize_string>
 8012726:	6863      	ldr	r3, [r4, #4]
 8012728:	2b05      	cmp	r3, #5
 801272a:	d92f      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801272c:	2800      	cmp	r0, #0
 801272e:	d03a      	beq.n	80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012730:	69e1      	ldr	r1, [r4, #28]
 8012732:	4630      	mov	r0, r6
 8012734:	f003 f8f4 	bl	8015920 <ucdr_serialize_string>
 8012738:	6863      	ldr	r3, [r4, #4]
 801273a:	2b06      	cmp	r3, #6
 801273c:	d926      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801273e:	b390      	cbz	r0, 80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012740:	6a21      	ldr	r1, [r4, #32]
 8012742:	4630      	mov	r0, r6
 8012744:	f003 f8ec 	bl	8015920 <ucdr_serialize_string>
 8012748:	6863      	ldr	r3, [r4, #4]
 801274a:	2b07      	cmp	r3, #7
 801274c:	d91e      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801274e:	b350      	cbz	r0, 80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012750:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012752:	4630      	mov	r0, r6
 8012754:	f003 f8e4 	bl	8015920 <ucdr_serialize_string>
 8012758:	6863      	ldr	r3, [r4, #4]
 801275a:	2b08      	cmp	r3, #8
 801275c:	d916      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801275e:	b310      	cbz	r0, 80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012760:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012762:	4630      	mov	r0, r6
 8012764:	f003 f8dc 	bl	8015920 <ucdr_serialize_string>
 8012768:	6863      	ldr	r3, [r4, #4]
 801276a:	2b09      	cmp	r3, #9
 801276c:	d90e      	bls.n	801278c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801276e:	b1d0      	cbz	r0, 80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012770:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012774:	2709      	movs	r7, #9
 8012776:	e000      	b.n	801277a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012778:	b1a8      	cbz	r0, 80127a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801277a:	f858 1b04 	ldr.w	r1, [r8], #4
 801277e:	4630      	mov	r0, r6
 8012780:	f003 f8ce 	bl	8015920 <ucdr_serialize_string>
 8012784:	6862      	ldr	r2, [r4, #4]
 8012786:	3701      	adds	r7, #1
 8012788:	4297      	cmp	r7, r2
 801278a:	d3f5      	bcc.n	8012778 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801278c:	4005      	ands	r5, r0
 801278e:	b2ed      	uxtb	r5, r5
 8012790:	e78a      	b.n	80126a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012794:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012798:	4630      	mov	r0, r6
 801279a:	f003 f895 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 801279e:	4005      	ands	r5, r0
 80127a0:	4628      	mov	r0, r5
 80127a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a6:	2500      	movs	r5, #0
 80127a8:	e77e      	b.n	80126a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80127aa:	4028      	ands	r0, r5
 80127ac:	b2c5      	uxtb	r5, r0
 80127ae:	e77b      	b.n	80126a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080127b0 <uxr_serialize_OBJK_Subscriber_Binary>:
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	460d      	mov	r5, r1
 80127b4:	7809      	ldrb	r1, [r1, #0]
 80127b6:	4606      	mov	r6, r0
 80127b8:	f7fc fe3c 	bl	800f434 <ucdr_serialize_bool>
 80127bc:	782b      	ldrb	r3, [r5, #0]
 80127be:	4604      	mov	r4, r0
 80127c0:	b94b      	cbnz	r3, 80127d6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80127c2:	7a29      	ldrb	r1, [r5, #8]
 80127c4:	4630      	mov	r0, r6
 80127c6:	f7fc fe35 	bl	800f434 <ucdr_serialize_bool>
 80127ca:	7a2b      	ldrb	r3, [r5, #8]
 80127cc:	4004      	ands	r4, r0
 80127ce:	b2e4      	uxtb	r4, r4
 80127d0:	b943      	cbnz	r3, 80127e4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80127d2:	4620      	mov	r0, r4
 80127d4:	bd70      	pop	{r4, r5, r6, pc}
 80127d6:	6869      	ldr	r1, [r5, #4]
 80127d8:	4630      	mov	r0, r6
 80127da:	f003 f8a1 	bl	8015920 <ucdr_serialize_string>
 80127de:	4004      	ands	r4, r0
 80127e0:	b2e4      	uxtb	r4, r4
 80127e2:	e7ee      	b.n	80127c2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80127e4:	f105 010c 	add.w	r1, r5, #12
 80127e8:	4630      	mov	r0, r6
 80127ea:	f7ff ff53 	bl	8012694 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80127ee:	4004      	ands	r4, r0
 80127f0:	4620      	mov	r0, r4
 80127f2:	bd70      	pop	{r4, r5, r6, pc}

080127f4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80127f4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80127f8:	4688      	mov	r8, r1
 80127fa:	8809      	ldrh	r1, [r1, #0]
 80127fc:	4681      	mov	r9, r0
 80127fe:	f7fc fe73 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012802:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012806:	4606      	mov	r6, r0
 8012808:	4648      	mov	r0, r9
 801280a:	f7fc fe13 	bl	800f434 <ucdr_serialize_bool>
 801280e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012812:	4006      	ands	r6, r0
 8012814:	b2f5      	uxtb	r5, r6
 8012816:	b9eb      	cbnz	r3, 8012854 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012818:	f898 1006 	ldrb.w	r1, [r8, #6]
 801281c:	4648      	mov	r0, r9
 801281e:	f7fc fe09 	bl	800f434 <ucdr_serialize_bool>
 8012822:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012826:	4005      	ands	r5, r0
 8012828:	bb7b      	cbnz	r3, 801288a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801282a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801282e:	4648      	mov	r0, r9
 8012830:	f7fc fe00 	bl	800f434 <ucdr_serialize_bool>
 8012834:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012838:	4005      	ands	r5, r0
 801283a:	b9f3      	cbnz	r3, 801287a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801283c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012840:	4648      	mov	r0, r9
 8012842:	f7fc fdf7 	bl	800f434 <ucdr_serialize_bool>
 8012846:	f898 3014 	ldrb.w	r3, [r8, #20]
 801284a:	4005      	ands	r5, r0
 801284c:	b94b      	cbnz	r3, 8012862 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801284e:	4628      	mov	r0, r5
 8012850:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012854:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012858:	4648      	mov	r0, r9
 801285a:	f7fc fe45 	bl	800f4e8 <ucdr_serialize_uint16_t>
 801285e:	4005      	ands	r5, r0
 8012860:	e7da      	b.n	8012818 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012862:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012866:	f108 011c 	add.w	r1, r8, #28
 801286a:	4648      	mov	r0, r9
 801286c:	f003 f82c 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 8012870:	4028      	ands	r0, r5
 8012872:	b2c5      	uxtb	r5, r0
 8012874:	4628      	mov	r0, r5
 8012876:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801287a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801287e:	4648      	mov	r0, r9
 8012880:	f7fd f81c 	bl	800f8bc <ucdr_serialize_uint32_t>
 8012884:	4028      	ands	r0, r5
 8012886:	b2c5      	uxtb	r5, r0
 8012888:	e7d8      	b.n	801283c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801288a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801288e:	4648      	mov	r0, r9
 8012890:	f7fd f814 	bl	800f8bc <ucdr_serialize_uint32_t>
 8012894:	4028      	ands	r0, r5
 8012896:	b2c5      	uxtb	r5, r0
 8012898:	e7c7      	b.n	801282a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801289a:	bf00      	nop

0801289c <uxr_serialize_OBJK_DataReader_Binary>:
 801289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801289e:	2202      	movs	r2, #2
 80128a0:	460c      	mov	r4, r1
 80128a2:	4606      	mov	r6, r0
 80128a4:	f002 ff1c 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 80128a8:	78a1      	ldrb	r1, [r4, #2]
 80128aa:	4605      	mov	r5, r0
 80128ac:	4630      	mov	r0, r6
 80128ae:	f7fc fdc1 	bl	800f434 <ucdr_serialize_bool>
 80128b2:	78a3      	ldrb	r3, [r4, #2]
 80128b4:	4005      	ands	r5, r0
 80128b6:	b2ed      	uxtb	r5, r5
 80128b8:	b90b      	cbnz	r3, 80128be <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80128ba:	4628      	mov	r0, r5
 80128bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128be:	f104 0108 	add.w	r1, r4, #8
 80128c2:	4630      	mov	r0, r6
 80128c4:	f7ff ff96 	bl	80127f4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80128c8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80128cc:	4607      	mov	r7, r0
 80128ce:	4630      	mov	r0, r6
 80128d0:	f7fc fdb0 	bl	800f434 <ucdr_serialize_bool>
 80128d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80128d8:	4038      	ands	r0, r7
 80128da:	b2c7      	uxtb	r7, r0
 80128dc:	b95b      	cbnz	r3, 80128f6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80128de:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80128e2:	4630      	mov	r0, r6
 80128e4:	f7fc fda6 	bl	800f434 <ucdr_serialize_bool>
 80128e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80128ec:	4007      	ands	r7, r0
 80128ee:	b94b      	cbnz	r3, 8012904 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80128f0:	403d      	ands	r5, r7
 80128f2:	4628      	mov	r0, r5
 80128f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128f6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80128fa:	4630      	mov	r0, r6
 80128fc:	f7fd fa34 	bl	800fd68 <ucdr_serialize_uint64_t>
 8012900:	4007      	ands	r7, r0
 8012902:	e7ec      	b.n	80128de <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012904:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012906:	4630      	mov	r0, r6
 8012908:	f003 f80a 	bl	8015920 <ucdr_serialize_string>
 801290c:	4007      	ands	r7, r0
 801290e:	b2ff      	uxtb	r7, r7
 8012910:	e7ee      	b.n	80128f0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012912:	bf00      	nop

08012914 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012916:	2202      	movs	r2, #2
 8012918:	460d      	mov	r5, r1
 801291a:	4606      	mov	r6, r0
 801291c:	f002 fee0 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012920:	78a9      	ldrb	r1, [r5, #2]
 8012922:	4604      	mov	r4, r0
 8012924:	4630      	mov	r0, r6
 8012926:	f7fc fd85 	bl	800f434 <ucdr_serialize_bool>
 801292a:	78ab      	ldrb	r3, [r5, #2]
 801292c:	4004      	ands	r4, r0
 801292e:	b2e4      	uxtb	r4, r4
 8012930:	b90b      	cbnz	r3, 8012936 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012932:	4620      	mov	r0, r4
 8012934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012936:	f105 0108 	add.w	r1, r5, #8
 801293a:	4630      	mov	r0, r6
 801293c:	f7ff ff5a 	bl	80127f4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012940:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012944:	4607      	mov	r7, r0
 8012946:	4630      	mov	r0, r6
 8012948:	f7fc fd74 	bl	800f434 <ucdr_serialize_bool>
 801294c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012950:	4038      	ands	r0, r7
 8012952:	b2c7      	uxtb	r7, r0
 8012954:	b913      	cbnz	r3, 801295c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012956:	403c      	ands	r4, r7
 8012958:	4620      	mov	r0, r4
 801295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801295c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012960:	4630      	mov	r0, r6
 8012962:	f7fd fa01 	bl	800fd68 <ucdr_serialize_uint64_t>
 8012966:	4007      	ands	r7, r0
 8012968:	e7f5      	b.n	8012956 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801296a:	bf00      	nop

0801296c <uxr_deserialize_ObjectVariant>:
 801296c:	b570      	push	{r4, r5, r6, lr}
 801296e:	4605      	mov	r5, r0
 8012970:	460e      	mov	r6, r1
 8012972:	f7fc fda3 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012976:	b168      	cbz	r0, 8012994 <uxr_deserialize_ObjectVariant+0x28>
 8012978:	7833      	ldrb	r3, [r6, #0]
 801297a:	3b01      	subs	r3, #1
 801297c:	4604      	mov	r4, r0
 801297e:	2b0d      	cmp	r3, #13
 8012980:	d809      	bhi.n	8012996 <uxr_deserialize_ObjectVariant+0x2a>
 8012982:	e8df f003 	tbb	[pc, r3]
 8012986:	0a41      	.short	0x0a41
 8012988:	0a0a2323 	.word	0x0a0a2323
 801298c:	10080a0a 	.word	0x10080a0a
 8012990:	565c1010 	.word	0x565c1010
 8012994:	2400      	movs	r4, #0
 8012996:	4620      	mov	r0, r4
 8012998:	bd70      	pop	{r4, r5, r6, pc}
 801299a:	1d31      	adds	r1, r6, #4
 801299c:	4628      	mov	r0, r5
 801299e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129a2:	f7ff bd55 	b.w	8012450 <uxr_deserialize_DATAWRITER_Representation>
 80129a6:	1d31      	adds	r1, r6, #4
 80129a8:	4628      	mov	r0, r5
 80129aa:	f7fc fd87 	bl	800f4bc <ucdr_deserialize_uint8_t>
 80129ae:	2800      	cmp	r0, #0
 80129b0:	d0f0      	beq.n	8012994 <uxr_deserialize_ObjectVariant+0x28>
 80129b2:	7933      	ldrb	r3, [r6, #4]
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d001      	beq.n	80129bc <uxr_deserialize_ObjectVariant+0x50>
 80129b8:	2b02      	cmp	r3, #2
 80129ba:	d1ec      	bne.n	8012996 <uxr_deserialize_ObjectVariant+0x2a>
 80129bc:	68b1      	ldr	r1, [r6, #8]
 80129be:	4628      	mov	r0, r5
 80129c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129c8:	f002 bfba 	b.w	8015940 <ucdr_deserialize_string>
 80129cc:	1d31      	adds	r1, r6, #4
 80129ce:	4628      	mov	r0, r5
 80129d0:	f7fc fd74 	bl	800f4bc <ucdr_deserialize_uint8_t>
 80129d4:	4604      	mov	r4, r0
 80129d6:	b170      	cbz	r0, 80129f6 <uxr_deserialize_ObjectVariant+0x8a>
 80129d8:	7933      	ldrb	r3, [r6, #4]
 80129da:	2b02      	cmp	r3, #2
 80129dc:	d04c      	beq.n	8012a78 <uxr_deserialize_ObjectVariant+0x10c>
 80129de:	2b03      	cmp	r3, #3
 80129e0:	d109      	bne.n	80129f6 <uxr_deserialize_ObjectVariant+0x8a>
 80129e2:	f106 0308 	add.w	r3, r6, #8
 80129e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129ea:	f106 010c 	add.w	r1, r6, #12
 80129ee:	4628      	mov	r0, r5
 80129f0:	f002 ff7c 	bl	80158ec <ucdr_deserialize_sequence_uint8_t>
 80129f4:	4604      	mov	r4, r0
 80129f6:	2202      	movs	r2, #2
 80129f8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80129fc:	4628      	mov	r0, r5
 80129fe:	f002 fed3 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012a02:	4020      	ands	r0, r4
 8012a04:	b2c4      	uxtb	r4, r0
 8012a06:	e7c6      	b.n	8012996 <uxr_deserialize_ObjectVariant+0x2a>
 8012a08:	1d31      	adds	r1, r6, #4
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	f7fc fd56 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012a10:	4604      	mov	r4, r0
 8012a12:	b130      	cbz	r0, 8012a22 <uxr_deserialize_ObjectVariant+0xb6>
 8012a14:	7933      	ldrb	r3, [r6, #4]
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	d036      	beq.n	8012a88 <uxr_deserialize_ObjectVariant+0x11c>
 8012a1a:	2b03      	cmp	r3, #3
 8012a1c:	d03c      	beq.n	8012a98 <uxr_deserialize_ObjectVariant+0x12c>
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d032      	beq.n	8012a88 <uxr_deserialize_ObjectVariant+0x11c>
 8012a22:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012a26:	4628      	mov	r0, r5
 8012a28:	f7fd faee 	bl	8010008 <ucdr_deserialize_int16_t>
 8012a2c:	4020      	ands	r0, r4
 8012a2e:	b2c4      	uxtb	r4, r0
 8012a30:	e7b1      	b.n	8012996 <uxr_deserialize_ObjectVariant+0x2a>
 8012a32:	1d31      	adds	r1, r6, #4
 8012a34:	4628      	mov	r0, r5
 8012a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a3a:	f7ff bbbf 	b.w	80121bc <uxr_deserialize_CLIENT_Representation>
 8012a3e:	2204      	movs	r2, #4
 8012a40:	18b1      	adds	r1, r6, r2
 8012a42:	4628      	mov	r0, r5
 8012a44:	f002 feb0 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012a48:	2202      	movs	r2, #2
 8012a4a:	f106 0108 	add.w	r1, r6, #8
 8012a4e:	4604      	mov	r4, r0
 8012a50:	4628      	mov	r0, r5
 8012a52:	f002 fea9 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012a56:	2202      	movs	r2, #2
 8012a58:	4004      	ands	r4, r0
 8012a5a:	f106 010a 	add.w	r1, r6, #10
 8012a5e:	4628      	mov	r0, r5
 8012a60:	f002 fea2 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012a64:	b2e4      	uxtb	r4, r4
 8012a66:	4603      	mov	r3, r0
 8012a68:	f106 010c 	add.w	r1, r6, #12
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	401c      	ands	r4, r3
 8012a70:	f7fc fcf6 	bl	800f460 <ucdr_deserialize_bool>
 8012a74:	4004      	ands	r4, r0
 8012a76:	e78e      	b.n	8012996 <uxr_deserialize_ObjectVariant+0x2a>
 8012a78:	68b1      	ldr	r1, [r6, #8]
 8012a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a7e:	4628      	mov	r0, r5
 8012a80:	f002 ff5e 	bl	8015940 <ucdr_deserialize_string>
 8012a84:	4604      	mov	r4, r0
 8012a86:	e7b6      	b.n	80129f6 <uxr_deserialize_ObjectVariant+0x8a>
 8012a88:	68b1      	ldr	r1, [r6, #8]
 8012a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f002 ff56 	bl	8015940 <ucdr_deserialize_string>
 8012a94:	4604      	mov	r4, r0
 8012a96:	e7c4      	b.n	8012a22 <uxr_deserialize_ObjectVariant+0xb6>
 8012a98:	f106 0308 	add.w	r3, r6, #8
 8012a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012aa0:	f106 010c 	add.w	r1, r6, #12
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	f002 ff21 	bl	80158ec <ucdr_deserialize_sequence_uint8_t>
 8012aaa:	4604      	mov	r4, r0
 8012aac:	e7b9      	b.n	8012a22 <uxr_deserialize_ObjectVariant+0xb6>
 8012aae:	bf00      	nop

08012ab0 <uxr_deserialize_BaseObjectRequest>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	2202      	movs	r2, #2
 8012ab4:	4605      	mov	r5, r0
 8012ab6:	460e      	mov	r6, r1
 8012ab8:	f002 fe76 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012abc:	2202      	movs	r2, #2
 8012abe:	4604      	mov	r4, r0
 8012ac0:	18b1      	adds	r1, r6, r2
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f002 fe70 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012ac8:	4020      	ands	r0, r4
 8012aca:	b2c0      	uxtb	r0, r0
 8012acc:	bd70      	pop	{r4, r5, r6, pc}
 8012ace:	bf00      	nop

08012ad0 <uxr_serialize_ActivityInfoVariant>:
 8012ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ad4:	460d      	mov	r5, r1
 8012ad6:	7809      	ldrb	r1, [r1, #0]
 8012ad8:	4607      	mov	r7, r0
 8012ada:	f7fc fcd9 	bl	800f490 <ucdr_serialize_uint8_t>
 8012ade:	4681      	mov	r9, r0
 8012ae0:	b138      	cbz	r0, 8012af2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012ae2:	782b      	ldrb	r3, [r5, #0]
 8012ae4:	2b06      	cmp	r3, #6
 8012ae6:	f000 8082 	beq.w	8012bee <uxr_serialize_ActivityInfoVariant+0x11e>
 8012aea:	2b0d      	cmp	r3, #13
 8012aec:	d016      	beq.n	8012b1c <uxr_serialize_ActivityInfoVariant+0x4c>
 8012aee:	2b05      	cmp	r3, #5
 8012af0:	d002      	beq.n	8012af8 <uxr_serialize_ActivityInfoVariant+0x28>
 8012af2:	4648      	mov	r0, r9
 8012af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012af8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012afc:	4638      	mov	r0, r7
 8012afe:	f7fd fa03 	bl	800ff08 <ucdr_serialize_int16_t>
 8012b02:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012b06:	4681      	mov	r9, r0
 8012b08:	4638      	mov	r0, r7
 8012b0a:	f7fd f92d 	bl	800fd68 <ucdr_serialize_uint64_t>
 8012b0e:	ea09 0000 	and.w	r0, r9, r0
 8012b12:	fa5f f980 	uxtb.w	r9, r0
 8012b16:	4648      	mov	r0, r9
 8012b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b1c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012b20:	4638      	mov	r0, r7
 8012b22:	f7fd f9f1 	bl	800ff08 <ucdr_serialize_int16_t>
 8012b26:	68e9      	ldr	r1, [r5, #12]
 8012b28:	4681      	mov	r9, r0
 8012b2a:	4638      	mov	r0, r7
 8012b2c:	f7fc fec6 	bl	800f8bc <ucdr_serialize_uint32_t>
 8012b30:	68eb      	ldr	r3, [r5, #12]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d0eb      	beq.n	8012b0e <uxr_serialize_ActivityInfoVariant+0x3e>
 8012b36:	b320      	cbz	r0, 8012b82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012b38:	f105 080c 	add.w	r8, r5, #12
 8012b3c:	2600      	movs	r6, #0
 8012b3e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012b42:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012b46:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012b4a:	4638      	mov	r0, r7
 8012b4c:	f7fc fca0 	bl	800f490 <ucdr_serialize_uint8_t>
 8012b50:	2800      	cmp	r0, #0
 8012b52:	d053      	beq.n	8012bfc <uxr_serialize_ActivityInfoVariant+0x12c>
 8012b54:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012b58:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012b5c:	0074      	lsls	r4, r6, #1
 8012b5e:	00c9      	lsls	r1, r1, #3
 8012b60:	2b03      	cmp	r3, #3
 8012b62:	d854      	bhi.n	8012c0e <uxr_serialize_ActivityInfoVariant+0x13e>
 8012b64:	e8df f003 	tbb	[pc, r3]
 8012b68:	02102132 	.word	0x02102132
 8012b6c:	4441      	add	r1, r8
 8012b6e:	4638      	mov	r0, r7
 8012b70:	6889      	ldr	r1, [r1, #8]
 8012b72:	f002 fed5 	bl	8015920 <ucdr_serialize_string>
 8012b76:	68ea      	ldr	r2, [r5, #12]
 8012b78:	3601      	adds	r6, #1
 8012b7a:	4296      	cmp	r6, r2
 8012b7c:	d242      	bcs.n	8012c04 <uxr_serialize_ActivityInfoVariant+0x134>
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d1dd      	bne.n	8012b3e <uxr_serialize_ActivityInfoVariant+0x6e>
 8012b82:	f04f 0900 	mov.w	r9, #0
 8012b86:	e7b4      	b.n	8012af2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012b88:	3108      	adds	r1, #8
 8012b8a:	4441      	add	r1, r8
 8012b8c:	2210      	movs	r2, #16
 8012b8e:	4638      	mov	r0, r7
 8012b90:	f002 fda6 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012b94:	4434      	add	r4, r6
 8012b96:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012b9e:	4638      	mov	r0, r7
 8012ba0:	f7fc fe8c 	bl	800f8bc <ucdr_serialize_uint32_t>
 8012ba4:	4020      	ands	r0, r4
 8012ba6:	b2c0      	uxtb	r0, r0
 8012ba8:	e7e5      	b.n	8012b76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012baa:	3108      	adds	r1, #8
 8012bac:	4441      	add	r1, r8
 8012bae:	2204      	movs	r2, #4
 8012bb0:	4638      	mov	r0, r7
 8012bb2:	f002 fd95 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012bb6:	4434      	add	r4, r6
 8012bb8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	8b19      	ldrh	r1, [r3, #24]
 8012bc0:	4638      	mov	r0, r7
 8012bc2:	f7fc fc91 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012bc6:	4020      	ands	r0, r4
 8012bc8:	b2c0      	uxtb	r0, r0
 8012bca:	e7d4      	b.n	8012b76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012bcc:	3108      	adds	r1, #8
 8012bce:	4441      	add	r1, r8
 8012bd0:	2202      	movs	r2, #2
 8012bd2:	4638      	mov	r0, r7
 8012bd4:	f002 fd84 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012bd8:	4434      	add	r4, r6
 8012bda:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012bde:	4604      	mov	r4, r0
 8012be0:	7d99      	ldrb	r1, [r3, #22]
 8012be2:	4638      	mov	r0, r7
 8012be4:	f7fc fc54 	bl	800f490 <ucdr_serialize_uint8_t>
 8012be8:	4020      	ands	r0, r4
 8012bea:	b2c0      	uxtb	r0, r0
 8012bec:	e7c3      	b.n	8012b76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012bee:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012bf2:	4638      	mov	r0, r7
 8012bf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf8:	f7fd b986 	b.w	800ff08 <ucdr_serialize_int16_t>
 8012bfc:	68ea      	ldr	r2, [r5, #12]
 8012bfe:	3601      	adds	r6, #1
 8012c00:	42b2      	cmp	r2, r6
 8012c02:	d8be      	bhi.n	8012b82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012c04:	ea09 0900 	and.w	r9, r9, r0
 8012c08:	fa5f f989 	uxtb.w	r9, r9
 8012c0c:	e771      	b.n	8012af2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012c0e:	68eb      	ldr	r3, [r5, #12]
 8012c10:	3601      	adds	r6, #1
 8012c12:	429e      	cmp	r6, r3
 8012c14:	f10a 0a18 	add.w	sl, sl, #24
 8012c18:	d395      	bcc.n	8012b46 <uxr_serialize_ActivityInfoVariant+0x76>
 8012c1a:	e76a      	b.n	8012af2 <uxr_serialize_ActivityInfoVariant+0x22>

08012c1c <uxr_deserialize_BaseObjectReply>:
 8012c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c20:	2202      	movs	r2, #2
 8012c22:	4606      	mov	r6, r0
 8012c24:	460f      	mov	r7, r1
 8012c26:	f002 fdbf 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012c2a:	2202      	movs	r2, #2
 8012c2c:	18b9      	adds	r1, r7, r2
 8012c2e:	4605      	mov	r5, r0
 8012c30:	4630      	mov	r0, r6
 8012c32:	f002 fdb9 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012c36:	1d39      	adds	r1, r7, #4
 8012c38:	4680      	mov	r8, r0
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f7fc fc3e 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012c40:	1d79      	adds	r1, r7, #5
 8012c42:	4604      	mov	r4, r0
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7fc fc39 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012c4a:	ea05 0508 	and.w	r5, r5, r8
 8012c4e:	402c      	ands	r4, r5
 8012c50:	4020      	ands	r0, r4
 8012c52:	b2c0      	uxtb	r0, r0
 8012c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c58 <uxr_serialize_ReadSpecification>:
 8012c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c5c:	460e      	mov	r6, r1
 8012c5e:	7809      	ldrb	r1, [r1, #0]
 8012c60:	4607      	mov	r7, r0
 8012c62:	f7fc fc15 	bl	800f490 <ucdr_serialize_uint8_t>
 8012c66:	7871      	ldrb	r1, [r6, #1]
 8012c68:	4604      	mov	r4, r0
 8012c6a:	4638      	mov	r0, r7
 8012c6c:	f7fc fc10 	bl	800f490 <ucdr_serialize_uint8_t>
 8012c70:	78b1      	ldrb	r1, [r6, #2]
 8012c72:	4004      	ands	r4, r0
 8012c74:	4638      	mov	r0, r7
 8012c76:	f7fc fbdd 	bl	800f434 <ucdr_serialize_bool>
 8012c7a:	78b3      	ldrb	r3, [r6, #2]
 8012c7c:	b2e4      	uxtb	r4, r4
 8012c7e:	4004      	ands	r4, r0
 8012c80:	b94b      	cbnz	r3, 8012c96 <uxr_serialize_ReadSpecification+0x3e>
 8012c82:	7a31      	ldrb	r1, [r6, #8]
 8012c84:	4638      	mov	r0, r7
 8012c86:	f7fc fbd5 	bl	800f434 <ucdr_serialize_bool>
 8012c8a:	7a33      	ldrb	r3, [r6, #8]
 8012c8c:	4004      	ands	r4, r0
 8012c8e:	b943      	cbnz	r3, 8012ca2 <uxr_serialize_ReadSpecification+0x4a>
 8012c90:	4620      	mov	r0, r4
 8012c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c96:	6871      	ldr	r1, [r6, #4]
 8012c98:	4638      	mov	r0, r7
 8012c9a:	f002 fe41 	bl	8015920 <ucdr_serialize_string>
 8012c9e:	4004      	ands	r4, r0
 8012ca0:	e7ef      	b.n	8012c82 <uxr_serialize_ReadSpecification+0x2a>
 8012ca2:	8971      	ldrh	r1, [r6, #10]
 8012ca4:	4638      	mov	r0, r7
 8012ca6:	f7fc fc1f 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012caa:	89b1      	ldrh	r1, [r6, #12]
 8012cac:	4605      	mov	r5, r0
 8012cae:	4638      	mov	r0, r7
 8012cb0:	f7fc fc1a 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012cb4:	89f1      	ldrh	r1, [r6, #14]
 8012cb6:	4005      	ands	r5, r0
 8012cb8:	4638      	mov	r0, r7
 8012cba:	f7fc fc15 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012cbe:	8a31      	ldrh	r1, [r6, #16]
 8012cc0:	4680      	mov	r8, r0
 8012cc2:	4638      	mov	r0, r7
 8012cc4:	f7fc fc10 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012cc8:	b2ed      	uxtb	r5, r5
 8012cca:	4025      	ands	r5, r4
 8012ccc:	ea08 0505 	and.w	r5, r8, r5
 8012cd0:	ea00 0405 	and.w	r4, r0, r5
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cda:	bf00      	nop

08012cdc <uxr_serialize_CREATE_CLIENT_Payload>:
 8012cdc:	f7ff ba16 	b.w	801210c <uxr_serialize_CLIENT_Representation>

08012ce0 <uxr_serialize_CREATE_Payload>:
 8012ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce2:	2202      	movs	r2, #2
 8012ce4:	4607      	mov	r7, r0
 8012ce6:	460e      	mov	r6, r1
 8012ce8:	f002 fcfa 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012cec:	2202      	movs	r2, #2
 8012cee:	18b1      	adds	r1, r6, r2
 8012cf0:	4605      	mov	r5, r0
 8012cf2:	4638      	mov	r0, r7
 8012cf4:	f002 fcf4 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012cf8:	7931      	ldrb	r1, [r6, #4]
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	4638      	mov	r0, r7
 8012cfe:	f7fc fbc7 	bl	800f490 <ucdr_serialize_uint8_t>
 8012d02:	b170      	cbz	r0, 8012d22 <uxr_serialize_CREATE_Payload+0x42>
 8012d04:	7933      	ldrb	r3, [r6, #4]
 8012d06:	402c      	ands	r4, r5
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	b2e4      	uxtb	r4, r4
 8012d0c:	2b0d      	cmp	r3, #13
 8012d0e:	d809      	bhi.n	8012d24 <uxr_serialize_CREATE_Payload+0x44>
 8012d10:	e8df f003 	tbb	[pc, r3]
 8012d14:	23230a4c 	.word	0x23230a4c
 8012d18:	0a0a0a0a 	.word	0x0a0a0a0a
 8012d1c:	12121208 	.word	0x12121208
 8012d20:	3e45      	.short	0x3e45
 8012d22:	2400      	movs	r4, #0
 8012d24:	4620      	mov	r0, r4
 8012d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d28:	f106 0108 	add.w	r1, r6, #8
 8012d2c:	4638      	mov	r0, r7
 8012d2e:	f7ff faf3 	bl	8012318 <uxr_serialize_DATAWRITER_Representation>
 8012d32:	4004      	ands	r4, r0
 8012d34:	4620      	mov	r0, r4
 8012d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d38:	7a31      	ldrb	r1, [r6, #8]
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	f7fc fba8 	bl	800f490 <ucdr_serialize_uint8_t>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	d0ee      	beq.n	8012d22 <uxr_serialize_CREATE_Payload+0x42>
 8012d44:	7a33      	ldrb	r3, [r6, #8]
 8012d46:	2b01      	cmp	r3, #1
 8012d48:	d001      	beq.n	8012d4e <uxr_serialize_CREATE_Payload+0x6e>
 8012d4a:	2b02      	cmp	r3, #2
 8012d4c:	d1ea      	bne.n	8012d24 <uxr_serialize_CREATE_Payload+0x44>
 8012d4e:	68f1      	ldr	r1, [r6, #12]
 8012d50:	4638      	mov	r0, r7
 8012d52:	f002 fde5 	bl	8015920 <ucdr_serialize_string>
 8012d56:	4004      	ands	r4, r0
 8012d58:	e7e4      	b.n	8012d24 <uxr_serialize_CREATE_Payload+0x44>
 8012d5a:	7a31      	ldrb	r1, [r6, #8]
 8012d5c:	4638      	mov	r0, r7
 8012d5e:	f7fc fb97 	bl	800f490 <ucdr_serialize_uint8_t>
 8012d62:	4605      	mov	r5, r0
 8012d64:	b158      	cbz	r0, 8012d7e <uxr_serialize_CREATE_Payload+0x9e>
 8012d66:	7a33      	ldrb	r3, [r6, #8]
 8012d68:	2b02      	cmp	r3, #2
 8012d6a:	d034      	beq.n	8012dd6 <uxr_serialize_CREATE_Payload+0xf6>
 8012d6c:	2b03      	cmp	r3, #3
 8012d6e:	d106      	bne.n	8012d7e <uxr_serialize_CREATE_Payload+0x9e>
 8012d70:	68f2      	ldr	r2, [r6, #12]
 8012d72:	f106 0110 	add.w	r1, r6, #16
 8012d76:	4638      	mov	r0, r7
 8012d78:	f002 fda6 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 8012d7c:	4605      	mov	r5, r0
 8012d7e:	2202      	movs	r2, #2
 8012d80:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8012d84:	4638      	mov	r0, r7
 8012d86:	f002 fcab 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012d8a:	4028      	ands	r0, r5
 8012d8c:	4004      	ands	r4, r0
 8012d8e:	e7c9      	b.n	8012d24 <uxr_serialize_CREATE_Payload+0x44>
 8012d90:	f106 0108 	add.w	r1, r6, #8
 8012d94:	4638      	mov	r0, r7
 8012d96:	f7ff f9b9 	bl	801210c <uxr_serialize_CLIENT_Representation>
 8012d9a:	4004      	ands	r4, r0
 8012d9c:	e7c2      	b.n	8012d24 <uxr_serialize_CREATE_Payload+0x44>
 8012d9e:	f106 0108 	add.w	r1, r6, #8
 8012da2:	4638      	mov	r0, r7
 8012da4:	f7ff fa6e 	bl	8012284 <uxr_serialize_AGENT_Representation>
 8012da8:	4004      	ands	r4, r0
 8012daa:	e7bb      	b.n	8012d24 <uxr_serialize_CREATE_Payload+0x44>
 8012dac:	7a31      	ldrb	r1, [r6, #8]
 8012dae:	4638      	mov	r0, r7
 8012db0:	f7fc fb6e 	bl	800f490 <ucdr_serialize_uint8_t>
 8012db4:	4605      	mov	r5, r0
 8012db6:	b130      	cbz	r0, 8012dc6 <uxr_serialize_CREATE_Payload+0xe6>
 8012db8:	7a33      	ldrb	r3, [r6, #8]
 8012dba:	2b02      	cmp	r3, #2
 8012dbc:	d011      	beq.n	8012de2 <uxr_serialize_CREATE_Payload+0x102>
 8012dbe:	2b03      	cmp	r3, #3
 8012dc0:	d015      	beq.n	8012dee <uxr_serialize_CREATE_Payload+0x10e>
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d00d      	beq.n	8012de2 <uxr_serialize_CREATE_Payload+0x102>
 8012dc6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8012dca:	4638      	mov	r0, r7
 8012dcc:	f7fd f89c 	bl	800ff08 <ucdr_serialize_int16_t>
 8012dd0:	4028      	ands	r0, r5
 8012dd2:	4004      	ands	r4, r0
 8012dd4:	e7a6      	b.n	8012d24 <uxr_serialize_CREATE_Payload+0x44>
 8012dd6:	68f1      	ldr	r1, [r6, #12]
 8012dd8:	4638      	mov	r0, r7
 8012dda:	f002 fda1 	bl	8015920 <ucdr_serialize_string>
 8012dde:	4605      	mov	r5, r0
 8012de0:	e7cd      	b.n	8012d7e <uxr_serialize_CREATE_Payload+0x9e>
 8012de2:	68f1      	ldr	r1, [r6, #12]
 8012de4:	4638      	mov	r0, r7
 8012de6:	f002 fd9b 	bl	8015920 <ucdr_serialize_string>
 8012dea:	4605      	mov	r5, r0
 8012dec:	e7eb      	b.n	8012dc6 <uxr_serialize_CREATE_Payload+0xe6>
 8012dee:	68f2      	ldr	r2, [r6, #12]
 8012df0:	f106 0110 	add.w	r1, r6, #16
 8012df4:	4638      	mov	r0, r7
 8012df6:	f002 fd67 	bl	80158c8 <ucdr_serialize_sequence_uint8_t>
 8012dfa:	4605      	mov	r5, r0
 8012dfc:	e7e3      	b.n	8012dc6 <uxr_serialize_CREATE_Payload+0xe6>
 8012dfe:	bf00      	nop

08012e00 <uxr_deserialize_GET_INFO_Payload>:
 8012e00:	b570      	push	{r4, r5, r6, lr}
 8012e02:	2202      	movs	r2, #2
 8012e04:	4605      	mov	r5, r0
 8012e06:	460e      	mov	r6, r1
 8012e08:	f002 fcce 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012e0c:	2202      	movs	r2, #2
 8012e0e:	18b1      	adds	r1, r6, r2
 8012e10:	4604      	mov	r4, r0
 8012e12:	4628      	mov	r0, r5
 8012e14:	f002 fcc8 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012e18:	1d31      	adds	r1, r6, #4
 8012e1a:	4004      	ands	r4, r0
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	f7fc fe7d 	bl	800fb1c <ucdr_deserialize_uint32_t>
 8012e22:	b2e4      	uxtb	r4, r4
 8012e24:	4020      	ands	r0, r4
 8012e26:	bd70      	pop	{r4, r5, r6, pc}

08012e28 <uxr_serialize_DELETE_Payload>:
 8012e28:	b570      	push	{r4, r5, r6, lr}
 8012e2a:	2202      	movs	r2, #2
 8012e2c:	4605      	mov	r5, r0
 8012e2e:	460e      	mov	r6, r1
 8012e30:	f002 fc56 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012e34:	2202      	movs	r2, #2
 8012e36:	4604      	mov	r4, r0
 8012e38:	18b1      	adds	r1, r6, r2
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	f002 fc50 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012e40:	4020      	ands	r0, r4
 8012e42:	b2c0      	uxtb	r0, r0
 8012e44:	bd70      	pop	{r4, r5, r6, pc}
 8012e46:	bf00      	nop

08012e48 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	460e      	mov	r6, r1
 8012e50:	f7fc fb34 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012e54:	1c71      	adds	r1, r6, #1
 8012e56:	4604      	mov	r4, r0
 8012e58:	4628      	mov	r0, r5
 8012e5a:	f7fc fb2f 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012e5e:	2204      	movs	r2, #4
 8012e60:	18b1      	adds	r1, r6, r2
 8012e62:	4680      	mov	r8, r0
 8012e64:	4628      	mov	r0, r5
 8012e66:	f002 fc9f 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012e6a:	f106 0108 	add.w	r1, r6, #8
 8012e6e:	4607      	mov	r7, r0
 8012e70:	2202      	movs	r2, #2
 8012e72:	4628      	mov	r0, r5
 8012e74:	f002 fc98 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012e78:	ea04 0308 	and.w	r3, r4, r8
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	ea03 0407 	and.w	r4, r3, r7
 8012e82:	2202      	movs	r2, #2
 8012e84:	4607      	mov	r7, r0
 8012e86:	f106 010a 	add.w	r1, r6, #10
 8012e8a:	4628      	mov	r0, r5
 8012e8c:	f002 fc8c 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012e90:	f106 010c 	add.w	r1, r6, #12
 8012e94:	4603      	mov	r3, r0
 8012e96:	4628      	mov	r0, r5
 8012e98:	461d      	mov	r5, r3
 8012e9a:	f7fc fae1 	bl	800f460 <ucdr_deserialize_bool>
 8012e9e:	403c      	ands	r4, r7
 8012ea0:	4025      	ands	r5, r4
 8012ea2:	4028      	ands	r0, r5
 8012ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ea8 <uxr_deserialize_STATUS_Payload>:
 8012ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eac:	2202      	movs	r2, #2
 8012eae:	4606      	mov	r6, r0
 8012eb0:	460f      	mov	r7, r1
 8012eb2:	f002 fc79 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012eb6:	2202      	movs	r2, #2
 8012eb8:	18b9      	adds	r1, r7, r2
 8012eba:	4605      	mov	r5, r0
 8012ebc:	4630      	mov	r0, r6
 8012ebe:	f002 fc73 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8012ec2:	1d39      	adds	r1, r7, #4
 8012ec4:	4680      	mov	r8, r0
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	f7fc faf8 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012ecc:	1d79      	adds	r1, r7, #5
 8012ece:	4604      	mov	r4, r0
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7fc faf3 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8012ed6:	ea05 0508 	and.w	r5, r5, r8
 8012eda:	402c      	ands	r4, r5
 8012edc:	4020      	ands	r0, r4
 8012ede:	b2c0      	uxtb	r0, r0
 8012ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ee4 <uxr_serialize_INFO_Payload>:
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	2202      	movs	r2, #2
 8012eea:	460c      	mov	r4, r1
 8012eec:	4605      	mov	r5, r0
 8012eee:	f002 fbf7 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012ef2:	2202      	movs	r2, #2
 8012ef4:	18a1      	adds	r1, r4, r2
 8012ef6:	4680      	mov	r8, r0
 8012ef8:	4628      	mov	r0, r5
 8012efa:	f002 fbf1 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012efe:	7921      	ldrb	r1, [r4, #4]
 8012f00:	4607      	mov	r7, r0
 8012f02:	4628      	mov	r0, r5
 8012f04:	f7fc fac4 	bl	800f490 <ucdr_serialize_uint8_t>
 8012f08:	7961      	ldrb	r1, [r4, #5]
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f7fc fabf 	bl	800f490 <ucdr_serialize_uint8_t>
 8012f12:	ea08 0807 	and.w	r8, r8, r7
 8012f16:	ea06 0608 	and.w	r6, r6, r8
 8012f1a:	4006      	ands	r6, r0
 8012f1c:	7a21      	ldrb	r1, [r4, #8]
 8012f1e:	4628      	mov	r0, r5
 8012f20:	f7fc fa88 	bl	800f434 <ucdr_serialize_bool>
 8012f24:	7a23      	ldrb	r3, [r4, #8]
 8012f26:	b2f7      	uxtb	r7, r6
 8012f28:	4606      	mov	r6, r0
 8012f2a:	b96b      	cbnz	r3, 8012f48 <uxr_serialize_INFO_Payload+0x64>
 8012f2c:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8012f30:	4628      	mov	r0, r5
 8012f32:	f7fc fa7f 	bl	800f434 <ucdr_serialize_bool>
 8012f36:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8012f3a:	4030      	ands	r0, r6
 8012f3c:	b2c6      	uxtb	r6, r0
 8012f3e:	b983      	cbnz	r3, 8012f62 <uxr_serialize_INFO_Payload+0x7e>
 8012f40:	ea06 0007 	and.w	r0, r6, r7
 8012f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f48:	7b21      	ldrb	r1, [r4, #12]
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	f7fc faa0 	bl	800f490 <ucdr_serialize_uint8_t>
 8012f50:	b188      	cbz	r0, 8012f76 <uxr_serialize_INFO_Payload+0x92>
 8012f52:	f104 010c 	add.w	r1, r4, #12
 8012f56:	4628      	mov	r0, r5
 8012f58:	f7ff fa06 	bl	8012368 <uxr_serialize_ObjectVariant.part.0>
 8012f5c:	4030      	ands	r0, r6
 8012f5e:	b2c6      	uxtb	r6, r0
 8012f60:	e7e4      	b.n	8012f2c <uxr_serialize_INFO_Payload+0x48>
 8012f62:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8012f66:	4628      	mov	r0, r5
 8012f68:	f7ff fdb2 	bl	8012ad0 <uxr_serialize_ActivityInfoVariant>
 8012f6c:	4006      	ands	r6, r0
 8012f6e:	ea06 0007 	and.w	r0, r6, r7
 8012f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f76:	4606      	mov	r6, r0
 8012f78:	e7d8      	b.n	8012f2c <uxr_serialize_INFO_Payload+0x48>
 8012f7a:	bf00      	nop

08012f7c <uxr_serialize_READ_DATA_Payload>:
 8012f7c:	b570      	push	{r4, r5, r6, lr}
 8012f7e:	2202      	movs	r2, #2
 8012f80:	4605      	mov	r5, r0
 8012f82:	460e      	mov	r6, r1
 8012f84:	f002 fbac 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012f88:	2202      	movs	r2, #2
 8012f8a:	18b1      	adds	r1, r6, r2
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f002 fba6 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012f94:	1d31      	adds	r1, r6, #4
 8012f96:	4004      	ands	r4, r0
 8012f98:	4628      	mov	r0, r5
 8012f9a:	f7ff fe5d 	bl	8012c58 <uxr_serialize_ReadSpecification>
 8012f9e:	b2e4      	uxtb	r4, r4
 8012fa0:	4020      	ands	r0, r4
 8012fa2:	bd70      	pop	{r4, r5, r6, pc}

08012fa4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	2202      	movs	r2, #2
 8012fa8:	4605      	mov	r5, r0
 8012faa:	460e      	mov	r6, r1
 8012fac:	f002 fb98 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012fb0:	2202      	movs	r2, #2
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	18b1      	adds	r1, r6, r2
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	f002 fb92 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012fbc:	4020      	ands	r0, r4
 8012fbe:	b2c0      	uxtb	r0, r0
 8012fc0:	bd70      	pop	{r4, r5, r6, pc}
 8012fc2:	bf00      	nop

08012fc4 <uxr_serialize_ACKNACK_Payload>:
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	460c      	mov	r4, r1
 8012fc8:	460e      	mov	r6, r1
 8012fca:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012fce:	4605      	mov	r5, r0
 8012fd0:	f7fc fa8a 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8012fd4:	2202      	movs	r2, #2
 8012fd6:	4621      	mov	r1, r4
 8012fd8:	4604      	mov	r4, r0
 8012fda:	4628      	mov	r0, r5
 8012fdc:	f002 fb80 	bl	80156e0 <ucdr_serialize_array_uint8_t>
 8012fe0:	7931      	ldrb	r1, [r6, #4]
 8012fe2:	4004      	ands	r4, r0
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	f7fc fa53 	bl	800f490 <ucdr_serialize_uint8_t>
 8012fea:	b2e4      	uxtb	r4, r4
 8012fec:	4020      	ands	r0, r4
 8012fee:	bd70      	pop	{r4, r5, r6, pc}

08012ff0 <uxr_deserialize_ACKNACK_Payload>:
 8012ff0:	b570      	push	{r4, r5, r6, lr}
 8012ff2:	4605      	mov	r5, r0
 8012ff4:	460e      	mov	r6, r1
 8012ff6:	f7fc fb77 	bl	800f6e8 <ucdr_deserialize_uint16_t>
 8012ffa:	2202      	movs	r2, #2
 8012ffc:	18b1      	adds	r1, r6, r2
 8012ffe:	4604      	mov	r4, r0
 8013000:	4628      	mov	r0, r5
 8013002:	f002 fbd1 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8013006:	1d31      	adds	r1, r6, #4
 8013008:	4004      	ands	r4, r0
 801300a:	4628      	mov	r0, r5
 801300c:	f7fc fa56 	bl	800f4bc <ucdr_deserialize_uint8_t>
 8013010:	b2e4      	uxtb	r4, r4
 8013012:	4020      	ands	r0, r4
 8013014:	bd70      	pop	{r4, r5, r6, pc}
 8013016:	bf00      	nop

08013018 <uxr_serialize_HEARTBEAT_Payload>:
 8013018:	b570      	push	{r4, r5, r6, lr}
 801301a:	460d      	mov	r5, r1
 801301c:	8809      	ldrh	r1, [r1, #0]
 801301e:	4606      	mov	r6, r0
 8013020:	f7fc fa62 	bl	800f4e8 <ucdr_serialize_uint16_t>
 8013024:	8869      	ldrh	r1, [r5, #2]
 8013026:	4604      	mov	r4, r0
 8013028:	4630      	mov	r0, r6
 801302a:	f7fc fa5d 	bl	800f4e8 <ucdr_serialize_uint16_t>
 801302e:	7929      	ldrb	r1, [r5, #4]
 8013030:	4004      	ands	r4, r0
 8013032:	4630      	mov	r0, r6
 8013034:	f7fc fa2c 	bl	800f490 <ucdr_serialize_uint8_t>
 8013038:	b2e4      	uxtb	r4, r4
 801303a:	4020      	ands	r0, r4
 801303c:	bd70      	pop	{r4, r5, r6, pc}
 801303e:	bf00      	nop

08013040 <uxr_deserialize_HEARTBEAT_Payload>:
 8013040:	b570      	push	{r4, r5, r6, lr}
 8013042:	4605      	mov	r5, r0
 8013044:	460e      	mov	r6, r1
 8013046:	f7fc fb4f 	bl	800f6e8 <ucdr_deserialize_uint16_t>
 801304a:	1cb1      	adds	r1, r6, #2
 801304c:	4604      	mov	r4, r0
 801304e:	4628      	mov	r0, r5
 8013050:	f7fc fb4a 	bl	800f6e8 <ucdr_deserialize_uint16_t>
 8013054:	1d31      	adds	r1, r6, #4
 8013056:	4004      	ands	r4, r0
 8013058:	4628      	mov	r0, r5
 801305a:	f7fc fa2f 	bl	800f4bc <ucdr_deserialize_uint8_t>
 801305e:	b2e4      	uxtb	r4, r4
 8013060:	4020      	ands	r0, r4
 8013062:	bd70      	pop	{r4, r5, r6, pc}

08013064 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013068:	4605      	mov	r5, r0
 801306a:	460e      	mov	r6, r1
 801306c:	f7fd f8d8 	bl	8010220 <ucdr_deserialize_int32_t>
 8013070:	1d31      	adds	r1, r6, #4
 8013072:	4607      	mov	r7, r0
 8013074:	4628      	mov	r0, r5
 8013076:	f7fc fd51 	bl	800fb1c <ucdr_deserialize_uint32_t>
 801307a:	f106 0108 	add.w	r1, r6, #8
 801307e:	4680      	mov	r8, r0
 8013080:	4628      	mov	r0, r5
 8013082:	f7fd f8cd 	bl	8010220 <ucdr_deserialize_int32_t>
 8013086:	f106 010c 	add.w	r1, r6, #12
 801308a:	4604      	mov	r4, r0
 801308c:	4628      	mov	r0, r5
 801308e:	f7fc fd45 	bl	800fb1c <ucdr_deserialize_uint32_t>
 8013092:	ea07 0708 	and.w	r7, r7, r8
 8013096:	403c      	ands	r4, r7
 8013098:	f106 0110 	add.w	r1, r6, #16
 801309c:	4004      	ands	r4, r0
 801309e:	4628      	mov	r0, r5
 80130a0:	f7fd f8be 	bl	8010220 <ucdr_deserialize_int32_t>
 80130a4:	f106 0114 	add.w	r1, r6, #20
 80130a8:	4607      	mov	r7, r0
 80130aa:	4628      	mov	r0, r5
 80130ac:	f7fc fd36 	bl	800fb1c <ucdr_deserialize_uint32_t>
 80130b0:	b2e4      	uxtb	r4, r4
 80130b2:	403c      	ands	r4, r7
 80130b4:	4020      	ands	r0, r4
 80130b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ba:	bf00      	nop

080130bc <uxr_deserialize_SampleIdentity>:
 80130bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c0:	220c      	movs	r2, #12
 80130c2:	4604      	mov	r4, r0
 80130c4:	460d      	mov	r5, r1
 80130c6:	f002 fb6f 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 80130ca:	2203      	movs	r2, #3
 80130cc:	f105 010c 	add.w	r1, r5, #12
 80130d0:	4607      	mov	r7, r0
 80130d2:	4620      	mov	r0, r4
 80130d4:	f002 fb68 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 80130d8:	f105 010f 	add.w	r1, r5, #15
 80130dc:	4680      	mov	r8, r0
 80130de:	4620      	mov	r0, r4
 80130e0:	f7fc f9ec 	bl	800f4bc <ucdr_deserialize_uint8_t>
 80130e4:	f105 0110 	add.w	r1, r5, #16
 80130e8:	4606      	mov	r6, r0
 80130ea:	4620      	mov	r0, r4
 80130ec:	f7fd f898 	bl	8010220 <ucdr_deserialize_int32_t>
 80130f0:	f105 0114 	add.w	r1, r5, #20
 80130f4:	4603      	mov	r3, r0
 80130f6:	4620      	mov	r0, r4
 80130f8:	ea07 0708 	and.w	r7, r7, r8
 80130fc:	461c      	mov	r4, r3
 80130fe:	f7fc fd0d 	bl	800fb1c <ucdr_deserialize_uint32_t>
 8013102:	403e      	ands	r6, r7
 8013104:	4034      	ands	r4, r6
 8013106:	4020      	ands	r0, r4
 8013108:	b2c0      	uxtb	r0, r0
 801310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801310e:	bf00      	nop

08013110 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013110:	280b      	cmp	r0, #11
 8013112:	dc0d      	bgt.n	8013130 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013114:	2800      	cmp	r0, #0
 8013116:	db09      	blt.n	801312c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013118:	280b      	cmp	r0, #11
 801311a:	d807      	bhi.n	801312c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801311c:	e8df f000 	tbb	[pc, r0]
 8013120:	07060607 	.word	0x07060607
 8013124:	06060606 	.word	0x06060606
 8013128:	07070606 	.word	0x07070606
 801312c:	2001      	movs	r0, #1
 801312e:	4770      	bx	lr
 8013130:	28cb      	cmp	r0, #203	; 0xcb
 8013132:	bf18      	it	ne
 8013134:	2001      	movne	r0, #1
 8013136:	4770      	bx	lr

08013138 <rcl_get_zero_initialized_context>:
 8013138:	4a03      	ldr	r2, [pc, #12]	; (8013148 <rcl_get_zero_initialized_context+0x10>)
 801313a:	4603      	mov	r3, r0
 801313c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013140:	e883 0003 	stmia.w	r3, {r0, r1}
 8013144:	4618      	mov	r0, r3
 8013146:	4770      	bx	lr
 8013148:	08019504 	.word	0x08019504

0801314c <rcl_context_is_valid>:
 801314c:	b118      	cbz	r0, 8013156 <rcl_context_is_valid+0xa>
 801314e:	6840      	ldr	r0, [r0, #4]
 8013150:	3800      	subs	r0, #0
 8013152:	bf18      	it	ne
 8013154:	2001      	movne	r0, #1
 8013156:	4770      	bx	lr

08013158 <__cleanup_context>:
 8013158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801315c:	4606      	mov	r6, r0
 801315e:	6800      	ldr	r0, [r0, #0]
 8013160:	2300      	movs	r3, #0
 8013162:	6073      	str	r3, [r6, #4]
 8013164:	2800      	cmp	r0, #0
 8013166:	d049      	beq.n	80131fc <__cleanup_context+0xa4>
 8013168:	6947      	ldr	r7, [r0, #20]
 801316a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801316e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013172:	b137      	cbz	r7, 8013182 <__cleanup_context+0x2a>
 8013174:	3014      	adds	r0, #20
 8013176:	f000 f9bb 	bl	80134f0 <rcl_init_options_fini>
 801317a:	4607      	mov	r7, r0
 801317c:	2800      	cmp	r0, #0
 801317e:	d144      	bne.n	801320a <__cleanup_context+0xb2>
 8013180:	6830      	ldr	r0, [r6, #0]
 8013182:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013184:	b143      	cbz	r3, 8013198 <__cleanup_context+0x40>
 8013186:	3028      	adds	r0, #40	; 0x28
 8013188:	f001 fe9e 	bl	8014ec8 <rmw_context_fini>
 801318c:	b118      	cbz	r0, 8013196 <__cleanup_context+0x3e>
 801318e:	2f00      	cmp	r7, #0
 8013190:	d03e      	beq.n	8013210 <__cleanup_context+0xb8>
 8013192:	f7fb fc01 	bl	800e998 <rcutils_reset_error>
 8013196:	6830      	ldr	r0, [r6, #0]
 8013198:	6a03      	ldr	r3, [r0, #32]
 801319a:	b1db      	cbz	r3, 80131d4 <__cleanup_context+0x7c>
 801319c:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80131a0:	2a01      	cmp	r2, #1
 80131a2:	f17c 0100 	sbcs.w	r1, ip, #0
 80131a6:	db11      	blt.n	80131cc <__cleanup_context+0x74>
 80131a8:	2400      	movs	r4, #0
 80131aa:	4625      	mov	r5, r4
 80131ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80131b0:	4649      	mov	r1, r9
 80131b2:	b1b8      	cbz	r0, 80131e4 <__cleanup_context+0x8c>
 80131b4:	47c0      	blx	r8
 80131b6:	6833      	ldr	r3, [r6, #0]
 80131b8:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80131bc:	3401      	adds	r4, #1
 80131be:	f145 0500 	adc.w	r5, r5, #0
 80131c2:	4294      	cmp	r4, r2
 80131c4:	eb75 010c 	sbcs.w	r1, r5, ip
 80131c8:	6a1b      	ldr	r3, [r3, #32]
 80131ca:	dbef      	blt.n	80131ac <__cleanup_context+0x54>
 80131cc:	4618      	mov	r0, r3
 80131ce:	4649      	mov	r1, r9
 80131d0:	47c0      	blx	r8
 80131d2:	6830      	ldr	r0, [r6, #0]
 80131d4:	4649      	mov	r1, r9
 80131d6:	47c0      	blx	r8
 80131d8:	2300      	movs	r3, #0
 80131da:	e9c6 3300 	strd	r3, r3, [r6]
 80131de:	4638      	mov	r0, r7
 80131e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131e4:	3401      	adds	r4, #1
 80131e6:	f145 0500 	adc.w	r5, r5, #0
 80131ea:	4294      	cmp	r4, r2
 80131ec:	eb75 010c 	sbcs.w	r1, r5, ip
 80131f0:	dbdc      	blt.n	80131ac <__cleanup_context+0x54>
 80131f2:	4618      	mov	r0, r3
 80131f4:	4649      	mov	r1, r9
 80131f6:	47c0      	blx	r8
 80131f8:	6830      	ldr	r0, [r6, #0]
 80131fa:	e7eb      	b.n	80131d4 <__cleanup_context+0x7c>
 80131fc:	4607      	mov	r7, r0
 80131fe:	2300      	movs	r3, #0
 8013200:	e9c6 3300 	strd	r3, r3, [r6]
 8013204:	4638      	mov	r0, r7
 8013206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801320a:	f7fb fbc5 	bl	800e998 <rcutils_reset_error>
 801320e:	e7b7      	b.n	8013180 <__cleanup_context+0x28>
 8013210:	f7ff ff7e 	bl	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 8013214:	4607      	mov	r7, r0
 8013216:	e7bc      	b.n	8013192 <__cleanup_context+0x3a>

08013218 <rcl_init>:
 8013218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801321c:	1e05      	subs	r5, r0, #0
 801321e:	b09e      	sub	sp, #120	; 0x78
 8013220:	460e      	mov	r6, r1
 8013222:	4690      	mov	r8, r2
 8013224:	461f      	mov	r7, r3
 8013226:	f340 809c 	ble.w	8013362 <rcl_init+0x14a>
 801322a:	2900      	cmp	r1, #0
 801322c:	f000 809c 	beq.w	8013368 <rcl_init+0x150>
 8013230:	f1a1 0e04 	sub.w	lr, r1, #4
 8013234:	f04f 0c00 	mov.w	ip, #0
 8013238:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801323c:	f10c 0c01 	add.w	ip, ip, #1
 8013240:	2c00      	cmp	r4, #0
 8013242:	f000 8091 	beq.w	8013368 <rcl_init+0x150>
 8013246:	4565      	cmp	r5, ip
 8013248:	d1f6      	bne.n	8013238 <rcl_init+0x20>
 801324a:	f1b8 0f00 	cmp.w	r8, #0
 801324e:	f000 808b 	beq.w	8013368 <rcl_init+0x150>
 8013252:	f8d8 4000 	ldr.w	r4, [r8]
 8013256:	2c00      	cmp	r4, #0
 8013258:	f000 8086 	beq.w	8013368 <rcl_init+0x150>
 801325c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801325e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8013262:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	f8cc 3000 	str.w	r3, [ip]
 801326c:	a819      	add	r0, sp, #100	; 0x64
 801326e:	f7fb fb6f 	bl	800e950 <rcutils_allocator_is_valid>
 8013272:	2800      	cmp	r0, #0
 8013274:	d078      	beq.n	8013368 <rcl_init+0x150>
 8013276:	2f00      	cmp	r7, #0
 8013278:	d076      	beq.n	8013368 <rcl_init+0x150>
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d178      	bne.n	8013372 <rcl_init+0x15a>
 8013280:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8013284:	2178      	movs	r1, #120	; 0x78
 8013286:	2001      	movs	r0, #1
 8013288:	4798      	blx	r3
 801328a:	4604      	mov	r4, r0
 801328c:	6038      	str	r0, [r7, #0]
 801328e:	2800      	cmp	r0, #0
 8013290:	f000 80b6 	beq.w	8013400 <rcl_init+0x1e8>
 8013294:	a802      	add	r0, sp, #8
 8013296:	f001 f9f7 	bl	8014688 <rmw_get_zero_initialized_context>
 801329a:	a902      	add	r1, sp, #8
 801329c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80132a0:	2250      	movs	r2, #80	; 0x50
 80132a2:	ac19      	add	r4, sp, #100	; 0x64
 80132a4:	f005 f824 	bl	80182f0 <memcpy>
 80132a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132aa:	f8d7 e000 	ldr.w	lr, [r7]
 80132ae:	46f4      	mov	ip, lr
 80132b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132b4:	6823      	ldr	r3, [r4, #0]
 80132b6:	f8cc 3000 	str.w	r3, [ip]
 80132ba:	f10e 0114 	add.w	r1, lr, #20
 80132be:	4640      	mov	r0, r8
 80132c0:	f000 f940 	bl	8013544 <rcl_init_options_copy>
 80132c4:	4604      	mov	r4, r0
 80132c6:	2800      	cmp	r0, #0
 80132c8:	d144      	bne.n	8013354 <rcl_init+0x13c>
 80132ca:	f8d7 9000 	ldr.w	r9, [r7]
 80132ce:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80132d2:	f8c9 0020 	str.w	r0, [r9, #32]
 80132d6:	f8c9 5018 	str.w	r5, [r9, #24]
 80132da:	f8c9 801c 	str.w	r8, [r9, #28]
 80132de:	2d00      	cmp	r5, #0
 80132e0:	d04e      	beq.n	8013380 <rcl_init+0x168>
 80132e2:	2e00      	cmp	r6, #0
 80132e4:	d04c      	beq.n	8013380 <rcl_init+0x168>
 80132e6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80132ea:	2104      	movs	r1, #4
 80132ec:	4628      	mov	r0, r5
 80132ee:	4798      	blx	r3
 80132f0:	f8c9 0020 	str.w	r0, [r9, #32]
 80132f4:	f8d7 9000 	ldr.w	r9, [r7]
 80132f8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80132fc:	46ca      	mov	sl, r9
 80132fe:	b343      	cbz	r3, 8013352 <rcl_init+0x13a>
 8013300:	2d01      	cmp	r5, #1
 8013302:	f178 0300 	sbcs.w	r3, r8, #0
 8013306:	db3b      	blt.n	8013380 <rcl_init+0x168>
 8013308:	2400      	movs	r4, #0
 801330a:	3e04      	subs	r6, #4
 801330c:	46a1      	mov	r9, r4
 801330e:	e00b      	b.n	8013328 <rcl_init+0x110>
 8013310:	6831      	ldr	r1, [r6, #0]
 8013312:	f004 ffed 	bl	80182f0 <memcpy>
 8013316:	3401      	adds	r4, #1
 8013318:	f149 0900 	adc.w	r9, r9, #0
 801331c:	45c8      	cmp	r8, r9
 801331e:	bf08      	it	eq
 8013320:	42a5      	cmpeq	r5, r4
 8013322:	d02b      	beq.n	801337c <rcl_init+0x164>
 8013324:	f8d7 a000 	ldr.w	sl, [r7]
 8013328:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801332c:	f7ec ff5a 	bl	80001e4 <strlen>
 8013330:	1c42      	adds	r2, r0, #1
 8013332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013334:	991d      	ldr	r1, [sp, #116]	; 0x74
 8013336:	f8da a020 	ldr.w	sl, [sl, #32]
 801333a:	9201      	str	r2, [sp, #4]
 801333c:	4610      	mov	r0, r2
 801333e:	4798      	blx	r3
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013346:	6a1b      	ldr	r3, [r3, #32]
 8013348:	9a01      	ldr	r2, [sp, #4]
 801334a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801334e:	2800      	cmp	r0, #0
 8013350:	d1de      	bne.n	8013310 <rcl_init+0xf8>
 8013352:	240a      	movs	r4, #10
 8013354:	4638      	mov	r0, r7
 8013356:	f7ff feff 	bl	8013158 <__cleanup_context>
 801335a:	4620      	mov	r0, r4
 801335c:	b01e      	add	sp, #120	; 0x78
 801335e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013362:	2900      	cmp	r1, #0
 8013364:	f43f af71 	beq.w	801324a <rcl_init+0x32>
 8013368:	240b      	movs	r4, #11
 801336a:	4620      	mov	r0, r4
 801336c:	b01e      	add	sp, #120	; 0x78
 801336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013372:	2464      	movs	r4, #100	; 0x64
 8013374:	4620      	mov	r0, r4
 8013376:	b01e      	add	sp, #120	; 0x78
 8013378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801337c:	f8d7 9000 	ldr.w	r9, [r7]
 8013380:	4926      	ldr	r1, [pc, #152]	; (801341c <rcl_init+0x204>)
 8013382:	680b      	ldr	r3, [r1, #0]
 8013384:	3301      	adds	r3, #1
 8013386:	d036      	beq.n	80133f6 <rcl_init+0x1de>
 8013388:	600b      	str	r3, [r1, #0]
 801338a:	461a      	mov	r2, r3
 801338c:	2400      	movs	r4, #0
 801338e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013392:	607b      	str	r3, [r7, #4]
 8013394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013396:	3301      	adds	r3, #1
 8013398:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801339c:	d034      	beq.n	8013408 <rcl_init+0x1f0>
 801339e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80133a2:	b93b      	cbnz	r3, 80133b4 <rcl_init+0x19c>
 80133a4:	3030      	adds	r0, #48	; 0x30
 80133a6:	f000 f939 	bl	801361c <rcl_get_localhost_only>
 80133aa:	4604      	mov	r4, r0
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d1d1      	bne.n	8013354 <rcl_init+0x13c>
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	6958      	ldr	r0, [r3, #20]
 80133b4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80133b6:	aa18      	add	r2, sp, #96	; 0x60
 80133b8:	a917      	add	r1, sp, #92	; 0x5c
 80133ba:	f000 fe5d 	bl	8014078 <rcl_validate_enclave_name>
 80133be:	4604      	mov	r4, r0
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d1c7      	bne.n	8013354 <rcl_init+0x13c>
 80133c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133c6:	b9eb      	cbnz	r3, 8013404 <rcl_init+0x1ec>
 80133c8:	6839      	ldr	r1, [r7, #0]
 80133ca:	694b      	ldr	r3, [r1, #20]
 80133cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80133ce:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80133d2:	f000 fc3d 	bl	8013c50 <rcl_get_security_options_from_environment>
 80133d6:	4604      	mov	r4, r0
 80133d8:	2800      	cmp	r0, #0
 80133da:	d1bb      	bne.n	8013354 <rcl_init+0x13c>
 80133dc:	6839      	ldr	r1, [r7, #0]
 80133de:	6948      	ldr	r0, [r1, #20]
 80133e0:	3128      	adds	r1, #40	; 0x28
 80133e2:	3018      	adds	r0, #24
 80133e4:	f001 fc3a 	bl	8014c5c <rmw_init>
 80133e8:	4604      	mov	r4, r0
 80133ea:	2800      	cmp	r0, #0
 80133ec:	d0bd      	beq.n	801336a <rcl_init+0x152>
 80133ee:	f7ff fe8f 	bl	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 80133f2:	4604      	mov	r4, r0
 80133f4:	e7ae      	b.n	8013354 <rcl_init+0x13c>
 80133f6:	2201      	movs	r2, #1
 80133f8:	461c      	mov	r4, r3
 80133fa:	600a      	str	r2, [r1, #0]
 80133fc:	4613      	mov	r3, r2
 80133fe:	e7c6      	b.n	801338e <rcl_init+0x176>
 8013400:	240a      	movs	r4, #10
 8013402:	e7b2      	b.n	801336a <rcl_init+0x152>
 8013404:	2401      	movs	r4, #1
 8013406:	e7a5      	b.n	8013354 <rcl_init+0x13c>
 8013408:	3024      	adds	r0, #36	; 0x24
 801340a:	f003 fe8d 	bl	8017128 <rcl_get_default_domain_id>
 801340e:	4604      	mov	r4, r0
 8013410:	2800      	cmp	r0, #0
 8013412:	d19f      	bne.n	8013354 <rcl_init+0x13c>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	6958      	ldr	r0, [r3, #20]
 8013418:	e7c1      	b.n	801339e <rcl_init+0x186>
 801341a:	bf00      	nop
 801341c:	2000e27c 	.word	0x2000e27c

08013420 <rcl_get_zero_initialized_init_options>:
 8013420:	2000      	movs	r0, #0
 8013422:	4770      	bx	lr

08013424 <rcl_init_options_init>:
 8013424:	b084      	sub	sp, #16
 8013426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013428:	b097      	sub	sp, #92	; 0x5c
 801342a:	ae1d      	add	r6, sp, #116	; 0x74
 801342c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013430:	2800      	cmp	r0, #0
 8013432:	d058      	beq.n	80134e6 <rcl_init_options_init+0xc2>
 8013434:	6803      	ldr	r3, [r0, #0]
 8013436:	4605      	mov	r5, r0
 8013438:	b133      	cbz	r3, 8013448 <rcl_init_options_init+0x24>
 801343a:	2464      	movs	r4, #100	; 0x64
 801343c:	4620      	mov	r0, r4
 801343e:	b017      	add	sp, #92	; 0x5c
 8013440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013444:	b004      	add	sp, #16
 8013446:	4770      	bx	lr
 8013448:	4630      	mov	r0, r6
 801344a:	f7fb fa81 	bl	800e950 <rcutils_allocator_is_valid>
 801344e:	2800      	cmp	r0, #0
 8013450:	d049      	beq.n	80134e6 <rcl_init_options_init+0xc2>
 8013452:	46b4      	mov	ip, r6
 8013454:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013458:	ac11      	add	r4, sp, #68	; 0x44
 801345a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801345c:	f8dc 3000 	ldr.w	r3, [ip]
 8013460:	6023      	str	r3, [r4, #0]
 8013462:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013466:	2050      	movs	r0, #80	; 0x50
 8013468:	4798      	blx	r3
 801346a:	4604      	mov	r4, r0
 801346c:	6028      	str	r0, [r5, #0]
 801346e:	2800      	cmp	r0, #0
 8013470:	d03b      	beq.n	80134ea <rcl_init_options_init+0xc6>
 8013472:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013476:	4686      	mov	lr, r0
 8013478:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801347c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013480:	f8dc 3000 	ldr.w	r3, [ip]
 8013484:	f8ce 3000 	str.w	r3, [lr]
 8013488:	a802      	add	r0, sp, #8
 801348a:	f001 f90d 	bl	80146a8 <rmw_get_zero_initialized_init_options>
 801348e:	f10d 0e08 	add.w	lr, sp, #8
 8013492:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013496:	f104 0c18 	add.w	ip, r4, #24
 801349a:	682f      	ldr	r7, [r5, #0]
 801349c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80134b4:	ac20      	add	r4, sp, #128	; 0x80
 80134b6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80134ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80134c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80134c6:	f107 0018 	add.w	r0, r7, #24
 80134ca:	f001 facf 	bl	8014a6c <rmw_init_options_init>
 80134ce:	4604      	mov	r4, r0
 80134d0:	2800      	cmp	r0, #0
 80134d2:	d0b3      	beq.n	801343c <rcl_init_options_init+0x18>
 80134d4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80134d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80134d8:	6828      	ldr	r0, [r5, #0]
 80134da:	4798      	blx	r3
 80134dc:	4620      	mov	r0, r4
 80134de:	f7ff fe17 	bl	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 80134e2:	4604      	mov	r4, r0
 80134e4:	e7aa      	b.n	801343c <rcl_init_options_init+0x18>
 80134e6:	240b      	movs	r4, #11
 80134e8:	e7a8      	b.n	801343c <rcl_init_options_init+0x18>
 80134ea:	240a      	movs	r4, #10
 80134ec:	e7a6      	b.n	801343c <rcl_init_options_init+0x18>
 80134ee:	bf00      	nop

080134f0 <rcl_init_options_fini>:
 80134f0:	b530      	push	{r4, r5, lr}
 80134f2:	b087      	sub	sp, #28
 80134f4:	b1f0      	cbz	r0, 8013534 <rcl_init_options_fini+0x44>
 80134f6:	6803      	ldr	r3, [r0, #0]
 80134f8:	4604      	mov	r4, r0
 80134fa:	b1db      	cbz	r3, 8013534 <rcl_init_options_fini+0x44>
 80134fc:	469c      	mov	ip, r3
 80134fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013502:	f10d 0e04 	add.w	lr, sp, #4
 8013506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801350a:	f8dc 3000 	ldr.w	r3, [ip]
 801350e:	f8ce 3000 	str.w	r3, [lr]
 8013512:	a801      	add	r0, sp, #4
 8013514:	f7fb fa1c 	bl	800e950 <rcutils_allocator_is_valid>
 8013518:	b160      	cbz	r0, 8013534 <rcl_init_options_fini+0x44>
 801351a:	6820      	ldr	r0, [r4, #0]
 801351c:	3018      	adds	r0, #24
 801351e:	f001 fb55 	bl	8014bcc <rmw_init_options_fini>
 8013522:	4605      	mov	r5, r0
 8013524:	b950      	cbnz	r0, 801353c <rcl_init_options_fini+0x4c>
 8013526:	6820      	ldr	r0, [r4, #0]
 8013528:	9b02      	ldr	r3, [sp, #8]
 801352a:	9905      	ldr	r1, [sp, #20]
 801352c:	4798      	blx	r3
 801352e:	4628      	mov	r0, r5
 8013530:	b007      	add	sp, #28
 8013532:	bd30      	pop	{r4, r5, pc}
 8013534:	250b      	movs	r5, #11
 8013536:	4628      	mov	r0, r5
 8013538:	b007      	add	sp, #28
 801353a:	bd30      	pop	{r4, r5, pc}
 801353c:	f7ff fde8 	bl	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 8013540:	4605      	mov	r5, r0
 8013542:	e7f8      	b.n	8013536 <rcl_init_options_fini+0x46>

08013544 <rcl_init_options_copy>:
 8013544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013548:	b094      	sub	sp, #80	; 0x50
 801354a:	2800      	cmp	r0, #0
 801354c:	d058      	beq.n	8013600 <rcl_init_options_copy+0xbc>
 801354e:	4604      	mov	r4, r0
 8013550:	6800      	ldr	r0, [r0, #0]
 8013552:	2800      	cmp	r0, #0
 8013554:	d054      	beq.n	8013600 <rcl_init_options_copy+0xbc>
 8013556:	460e      	mov	r6, r1
 8013558:	f7fb f9fa 	bl	800e950 <rcutils_allocator_is_valid>
 801355c:	2800      	cmp	r0, #0
 801355e:	d04f      	beq.n	8013600 <rcl_init_options_copy+0xbc>
 8013560:	2e00      	cmp	r6, #0
 8013562:	d04d      	beq.n	8013600 <rcl_init_options_copy+0xbc>
 8013564:	6833      	ldr	r3, [r6, #0]
 8013566:	b123      	cbz	r3, 8013572 <rcl_init_options_copy+0x2e>
 8013568:	2464      	movs	r4, #100	; 0x64
 801356a:	4620      	mov	r0, r4
 801356c:	b014      	add	sp, #80	; 0x50
 801356e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013572:	6827      	ldr	r7, [r4, #0]
 8013574:	46bc      	mov	ip, r7
 8013576:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801357a:	ad0f      	add	r5, sp, #60	; 0x3c
 801357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801357e:	f8dc 3000 	ldr.w	r3, [ip]
 8013582:	f8d7 8000 	ldr.w	r8, [r7]
 8013586:	602b      	str	r3, [r5, #0]
 8013588:	4619      	mov	r1, r3
 801358a:	2050      	movs	r0, #80	; 0x50
 801358c:	47c0      	blx	r8
 801358e:	4605      	mov	r5, r0
 8013590:	6030      	str	r0, [r6, #0]
 8013592:	b3d0      	cbz	r0, 801360a <rcl_init_options_copy+0xc6>
 8013594:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8013598:	4686      	mov	lr, r0
 801359a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801359e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135a2:	f8dc 3000 	ldr.w	r3, [ip]
 80135a6:	f8ce 3000 	str.w	r3, [lr]
 80135aa:	4668      	mov	r0, sp
 80135ac:	f001 f87c 	bl	80146a8 <rmw_get_zero_initialized_init_options>
 80135b0:	46ee      	mov	lr, sp
 80135b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135b6:	f105 0c18 	add.w	ip, r5, #24
 80135ba:	6824      	ldr	r4, [r4, #0]
 80135bc:	6835      	ldr	r5, [r6, #0]
 80135be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135d2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80135d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80135da:	f104 0018 	add.w	r0, r4, #24
 80135de:	f105 0118 	add.w	r1, r5, #24
 80135e2:	f001 faab 	bl	8014b3c <rmw_init_options_copy>
 80135e6:	4604      	mov	r4, r0
 80135e8:	2800      	cmp	r0, #0
 80135ea:	d0be      	beq.n	801356a <rcl_init_options_copy+0x26>
 80135ec:	f7fb f9be 	bl	800e96c <rcutils_get_error_string>
 80135f0:	f7fb f9d2 	bl	800e998 <rcutils_reset_error>
 80135f4:	4630      	mov	r0, r6
 80135f6:	f7ff ff7b 	bl	80134f0 <rcl_init_options_fini>
 80135fa:	b140      	cbz	r0, 801360e <rcl_init_options_copy+0xca>
 80135fc:	4604      	mov	r4, r0
 80135fe:	e7b4      	b.n	801356a <rcl_init_options_copy+0x26>
 8013600:	240b      	movs	r4, #11
 8013602:	4620      	mov	r0, r4
 8013604:	b014      	add	sp, #80	; 0x50
 8013606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801360a:	240a      	movs	r4, #10
 801360c:	e7ad      	b.n	801356a <rcl_init_options_copy+0x26>
 801360e:	4620      	mov	r0, r4
 8013610:	b014      	add	sp, #80	; 0x50
 8013612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013616:	f7ff bd7b 	b.w	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 801361a:	bf00      	nop

0801361c <rcl_get_localhost_only>:
 801361c:	b510      	push	{r4, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	2300      	movs	r3, #0
 8013622:	9301      	str	r3, [sp, #4]
 8013624:	b1b8      	cbz	r0, 8013656 <rcl_get_localhost_only+0x3a>
 8013626:	4604      	mov	r4, r0
 8013628:	a901      	add	r1, sp, #4
 801362a:	480c      	ldr	r0, [pc, #48]	; (801365c <rcl_get_localhost_only+0x40>)
 801362c:	f000 fd80 	bl	8014130 <rcutils_get_env>
 8013630:	b110      	cbz	r0, 8013638 <rcl_get_localhost_only+0x1c>
 8013632:	2001      	movs	r0, #1
 8013634:	b002      	add	sp, #8
 8013636:	bd10      	pop	{r4, pc}
 8013638:	9b01      	ldr	r3, [sp, #4]
 801363a:	b113      	cbz	r3, 8013642 <rcl_get_localhost_only+0x26>
 801363c:	781a      	ldrb	r2, [r3, #0]
 801363e:	2a31      	cmp	r2, #49	; 0x31
 8013640:	d004      	beq.n	801364c <rcl_get_localhost_only+0x30>
 8013642:	2302      	movs	r3, #2
 8013644:	2000      	movs	r0, #0
 8013646:	7023      	strb	r3, [r4, #0]
 8013648:	b002      	add	sp, #8
 801364a:	bd10      	pop	{r4, pc}
 801364c:	785b      	ldrb	r3, [r3, #1]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1f7      	bne.n	8013642 <rcl_get_localhost_only+0x26>
 8013652:	2301      	movs	r3, #1
 8013654:	e7f6      	b.n	8013644 <rcl_get_localhost_only+0x28>
 8013656:	200b      	movs	r0, #11
 8013658:	b002      	add	sp, #8
 801365a:	bd10      	pop	{r4, pc}
 801365c:	0801950c 	.word	0x0801950c

08013660 <rcl_get_zero_initialized_node>:
 8013660:	4a03      	ldr	r2, [pc, #12]	; (8013670 <rcl_get_zero_initialized_node+0x10>)
 8013662:	4603      	mov	r3, r0
 8013664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013668:	e883 0003 	stmia.w	r3, {r0, r1}
 801366c:	4618      	mov	r0, r3
 801366e:	4770      	bx	lr
 8013670:	08019534 	.word	0x08019534

08013674 <rcl_node_init>:
 8013674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013678:	b0a9      	sub	sp, #164	; 0xa4
 801367a:	4604      	mov	r4, r0
 801367c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8013680:	a823      	add	r0, sp, #140	; 0x8c
 8013682:	460e      	mov	r6, r1
 8013684:	4615      	mov	r5, r2
 8013686:	461f      	mov	r7, r3
 8013688:	f003 ff76 	bl	8017578 <rcl_guard_condition_get_default_options>
 801368c:	f1b8 0f00 	cmp.w	r8, #0
 8013690:	f000 80e6 	beq.w	8013860 <rcl_node_init+0x1ec>
 8013694:	4640      	mov	r0, r8
 8013696:	f7fb f95b 	bl	800e950 <rcutils_allocator_is_valid>
 801369a:	2800      	cmp	r0, #0
 801369c:	f000 80e0 	beq.w	8013860 <rcl_node_init+0x1ec>
 80136a0:	2e00      	cmp	r6, #0
 80136a2:	f000 80dd 	beq.w	8013860 <rcl_node_init+0x1ec>
 80136a6:	2d00      	cmp	r5, #0
 80136a8:	f000 80da 	beq.w	8013860 <rcl_node_init+0x1ec>
 80136ac:	2c00      	cmp	r4, #0
 80136ae:	f000 80d7 	beq.w	8013860 <rcl_node_init+0x1ec>
 80136b2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80136b6:	f1b9 0f00 	cmp.w	r9, #0
 80136ba:	f040 80fd 	bne.w	80138b8 <rcl_node_init+0x244>
 80136be:	2f00      	cmp	r7, #0
 80136c0:	f000 80ce 	beq.w	8013860 <rcl_node_init+0x1ec>
 80136c4:	4638      	mov	r0, r7
 80136c6:	f7ff fd41 	bl	801314c <rcl_context_is_valid>
 80136ca:	4682      	mov	sl, r0
 80136cc:	2800      	cmp	r0, #0
 80136ce:	f000 80cd 	beq.w	801386c <rcl_node_init+0x1f8>
 80136d2:	464a      	mov	r2, r9
 80136d4:	a922      	add	r1, sp, #136	; 0x88
 80136d6:	4630      	mov	r0, r6
 80136d8:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 80136dc:	f001 f8fa 	bl	80148d4 <rmw_validate_node_name>
 80136e0:	4681      	mov	r9, r0
 80136e2:	2800      	cmp	r0, #0
 80136e4:	f040 80be 	bne.w	8013864 <rcl_node_init+0x1f0>
 80136e8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80136ea:	2800      	cmp	r0, #0
 80136ec:	f040 80f0 	bne.w	80138d0 <rcl_node_init+0x25c>
 80136f0:	4628      	mov	r0, r5
 80136f2:	f7ec fd77 	bl	80001e4 <strlen>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	f040 80bb 	bne.w	8013872 <rcl_node_init+0x1fe>
 80136fc:	4d7c      	ldr	r5, [pc, #496]	; (80138f0 <rcl_node_init+0x27c>)
 80136fe:	a922      	add	r1, sp, #136	; 0x88
 8013700:	2200      	movs	r2, #0
 8013702:	4628      	mov	r0, r5
 8013704:	f001 f8c8 	bl	8014898 <rmw_validate_namespace>
 8013708:	4681      	mov	r9, r0
 801370a:	2800      	cmp	r0, #0
 801370c:	f040 80aa 	bne.w	8013864 <rcl_node_init+0x1f0>
 8013710:	4682      	mov	sl, r0
 8013712:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013714:	2800      	cmp	r0, #0
 8013716:	f040 80e0 	bne.w	80138da <rcl_node_init+0x266>
 801371a:	f8d8 3000 	ldr.w	r3, [r8]
 801371e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013722:	2078      	movs	r0, #120	; 0x78
 8013724:	4798      	blx	r3
 8013726:	4681      	mov	r9, r0
 8013728:	6060      	str	r0, [r4, #4]
 801372a:	2800      	cmp	r0, #0
 801372c:	f000 80ca 	beq.w	80138c4 <rcl_node_init+0x250>
 8013730:	2200      	movs	r2, #0
 8013732:	2300      	movs	r3, #0
 8013734:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8013738:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 801373c:	a808      	add	r0, sp, #32
 801373e:	f000 f907 	bl	8013950 <rcl_node_get_default_options>
 8013742:	a908      	add	r1, sp, #32
 8013744:	4648      	mov	r0, r9
 8013746:	2268      	movs	r2, #104	; 0x68
 8013748:	f004 fdd2 	bl	80182f0 <memcpy>
 801374c:	6861      	ldr	r1, [r4, #4]
 801374e:	6027      	str	r7, [r4, #0]
 8013750:	4640      	mov	r0, r8
 8013752:	f000 f90b 	bl	801396c <rcl_node_options_copy>
 8013756:	2800      	cmp	r0, #0
 8013758:	d158      	bne.n	801380c <rcl_node_init+0x198>
 801375a:	4628      	mov	r0, r5
 801375c:	f7ec fd42 	bl	80001e4 <strlen>
 8013760:	4428      	add	r0, r5
 8013762:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013766:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801376a:	2b2f      	cmp	r3, #47	; 0x2f
 801376c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	bf0c      	ite	eq
 8013774:	4b5f      	ldreq	r3, [pc, #380]	; (80138f4 <rcl_node_init+0x280>)
 8013776:	4b60      	ldrne	r3, [pc, #384]	; (80138f8 <rcl_node_init+0x284>)
 8013778:	9302      	str	r3, [sp, #8]
 801377a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801377e:	9301      	str	r3, [sp, #4]
 8013780:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013784:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013788:	f000 fcfa 	bl	8014180 <rcutils_format_string_limit>
 801378c:	6823      	ldr	r3, [r4, #0]
 801378e:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8013792:	6818      	ldr	r0, [r3, #0]
 8013794:	4631      	mov	r1, r6
 8013796:	3028      	adds	r0, #40	; 0x28
 8013798:	462a      	mov	r2, r5
 801379a:	6866      	ldr	r6, [r4, #4]
 801379c:	f001 fcb2 	bl	8015104 <rmw_create_node>
 80137a0:	6863      	ldr	r3, [r4, #4]
 80137a2:	66b0      	str	r0, [r6, #104]	; 0x68
 80137a4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80137a6:	2800      	cmp	r0, #0
 80137a8:	d032      	beq.n	8013810 <rcl_node_init+0x19c>
 80137aa:	f001 fd3f 	bl	801522c <rmw_node_get_graph_guard_condition>
 80137ae:	4681      	mov	r9, r0
 80137b0:	b360      	cbz	r0, 801380c <rcl_node_init+0x198>
 80137b2:	f8d8 3000 	ldr.w	r3, [r8]
 80137b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137ba:	6866      	ldr	r6, [r4, #4]
 80137bc:	2008      	movs	r0, #8
 80137be:	4798      	blx	r3
 80137c0:	6863      	ldr	r3, [r4, #4]
 80137c2:	66f0      	str	r0, [r6, #108]	; 0x6c
 80137c4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 80137c8:	f1bb 0f00 	cmp.w	fp, #0
 80137cc:	d020      	beq.n	8013810 <rcl_node_init+0x19c>
 80137ce:	a806      	add	r0, sp, #24
 80137d0:	f003 fe42 	bl	8017458 <rcl_get_zero_initialized_guard_condition>
 80137d4:	a806      	add	r0, sp, #24
 80137d6:	c803      	ldmia	r0, {r0, r1}
 80137d8:	6863      	ldr	r3, [r4, #4]
 80137da:	46c4      	mov	ip, r8
 80137dc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80137e0:	e88b 0003 	stmia.w	fp, {r0, r1}
 80137e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137e8:	ae23      	add	r6, sp, #140	; 0x8c
 80137ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80137ec:	f8dc 3000 	ldr.w	r3, [ip]
 80137f0:	6033      	str	r3, [r6, #0]
 80137f2:	ab28      	add	r3, sp, #160	; 0xa0
 80137f4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80137f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80137fc:	4649      	mov	r1, r9
 80137fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013800:	463a      	mov	r2, r7
 8013802:	4670      	mov	r0, lr
 8013804:	f003 fe32 	bl	801746c <rcl_guard_condition_init_from_rmw>
 8013808:	4681      	mov	r9, r0
 801380a:	b328      	cbz	r0, 8013858 <rcl_node_init+0x1e4>
 801380c:	6863      	ldr	r3, [r4, #4]
 801380e:	b1f3      	cbz	r3, 801384e <rcl_node_init+0x1da>
 8013810:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8013812:	b128      	cbz	r0, 8013820 <rcl_node_init+0x1ac>
 8013814:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013818:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801381c:	4798      	blx	r3
 801381e:	6863      	ldr	r3, [r4, #4]
 8013820:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013822:	b110      	cbz	r0, 801382a <rcl_node_init+0x1b6>
 8013824:	f001 fc86 	bl	8015134 <rmw_destroy_node>
 8013828:	6863      	ldr	r3, [r4, #4]
 801382a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801382c:	b148      	cbz	r0, 8013842 <rcl_node_init+0x1ce>
 801382e:	f003 fe7d 	bl	801752c <rcl_guard_condition_fini>
 8013832:	6863      	ldr	r3, [r4, #4]
 8013834:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013838:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801383a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801383e:	4798      	blx	r3
 8013840:	6863      	ldr	r3, [r4, #4]
 8013842:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013846:	4618      	mov	r0, r3
 8013848:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801384c:	4798      	blx	r3
 801384e:	2300      	movs	r3, #0
 8013850:	e9c4 3300 	strd	r3, r3, [r4]
 8013854:	f04f 0901 	mov.w	r9, #1
 8013858:	f1ba 0f00 	cmp.w	sl, #0
 801385c:	d125      	bne.n	80138aa <rcl_node_init+0x236>
 801385e:	e001      	b.n	8013864 <rcl_node_init+0x1f0>
 8013860:	f04f 090b 	mov.w	r9, #11
 8013864:	4648      	mov	r0, r9
 8013866:	b029      	add	sp, #164	; 0xa4
 8013868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386c:	f04f 0965 	mov.w	r9, #101	; 0x65
 8013870:	e7f8      	b.n	8013864 <rcl_node_init+0x1f0>
 8013872:	782b      	ldrb	r3, [r5, #0]
 8013874:	2b2f      	cmp	r3, #47	; 0x2f
 8013876:	f43f af42 	beq.w	80136fe <rcl_node_init+0x8a>
 801387a:	9503      	str	r5, [sp, #12]
 801387c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	4b1e      	ldr	r3, [pc, #120]	; (80138fc <rcl_node_init+0x288>)
 8013884:	9302      	str	r3, [sp, #8]
 8013886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801388a:	9301      	str	r3, [sp, #4]
 801388c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013890:	f000 fc76 	bl	8014180 <rcutils_format_string_limit>
 8013894:	4605      	mov	r5, r0
 8013896:	b340      	cbz	r0, 80138ea <rcl_node_init+0x276>
 8013898:	2200      	movs	r2, #0
 801389a:	a922      	add	r1, sp, #136	; 0x88
 801389c:	9222      	str	r2, [sp, #136]	; 0x88
 801389e:	f000 fffb 	bl	8014898 <rmw_validate_namespace>
 80138a2:	4681      	mov	r9, r0
 80138a4:	2800      	cmp	r0, #0
 80138a6:	f43f af34 	beq.w	8013712 <rcl_node_init+0x9e>
 80138aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80138ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80138b2:	4628      	mov	r0, r5
 80138b4:	4798      	blx	r3
 80138b6:	e7d5      	b.n	8013864 <rcl_node_init+0x1f0>
 80138b8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80138bc:	4648      	mov	r0, r9
 80138be:	b029      	add	sp, #164	; 0xa4
 80138c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c4:	f04f 090a 	mov.w	r9, #10
 80138c8:	f1ba 0f00 	cmp.w	sl, #0
 80138cc:	d1ed      	bne.n	80138aa <rcl_node_init+0x236>
 80138ce:	e7c9      	b.n	8013864 <rcl_node_init+0x1f0>
 80138d0:	f001 f852 	bl	8014978 <rmw_node_name_validation_result_string>
 80138d4:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 80138d8:	e7c4      	b.n	8013864 <rcl_node_init+0x1f0>
 80138da:	f000 ffef 	bl	80148bc <rmw_namespace_validation_result_string>
 80138de:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80138e2:	f1ba 0f00 	cmp.w	sl, #0
 80138e6:	d1e0      	bne.n	80138aa <rcl_node_init+0x236>
 80138e8:	e7bc      	b.n	8013864 <rcl_node_init+0x1f0>
 80138ea:	f04f 090a 	mov.w	r9, #10
 80138ee:	e7b9      	b.n	8013864 <rcl_node_init+0x1f0>
 80138f0:	08019524 	.word	0x08019524
 80138f4:	080193a8 	.word	0x080193a8
 80138f8:	0801952c 	.word	0x0801952c
 80138fc:	08019528 	.word	0x08019528

08013900 <rcl_node_is_valid>:
 8013900:	b130      	cbz	r0, 8013910 <rcl_node_is_valid+0x10>
 8013902:	6843      	ldr	r3, [r0, #4]
 8013904:	b123      	cbz	r3, 8013910 <rcl_node_is_valid+0x10>
 8013906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013908:	b113      	cbz	r3, 8013910 <rcl_node_is_valid+0x10>
 801390a:	6800      	ldr	r0, [r0, #0]
 801390c:	f7ff bc1e 	b.w	801314c <rcl_context_is_valid>
 8013910:	2000      	movs	r0, #0
 8013912:	4770      	bx	lr

08013914 <rcl_node_get_name>:
 8013914:	b120      	cbz	r0, 8013920 <rcl_node_get_name+0xc>
 8013916:	6840      	ldr	r0, [r0, #4]
 8013918:	b110      	cbz	r0, 8013920 <rcl_node_get_name+0xc>
 801391a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801391c:	b100      	cbz	r0, 8013920 <rcl_node_get_name+0xc>
 801391e:	6880      	ldr	r0, [r0, #8]
 8013920:	4770      	bx	lr
 8013922:	bf00      	nop

08013924 <rcl_node_get_namespace>:
 8013924:	b120      	cbz	r0, 8013930 <rcl_node_get_namespace+0xc>
 8013926:	6840      	ldr	r0, [r0, #4]
 8013928:	b110      	cbz	r0, 8013930 <rcl_node_get_namespace+0xc>
 801392a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801392c:	b100      	cbz	r0, 8013930 <rcl_node_get_namespace+0xc>
 801392e:	68c0      	ldr	r0, [r0, #12]
 8013930:	4770      	bx	lr
 8013932:	bf00      	nop

08013934 <rcl_node_get_options>:
 8013934:	b128      	cbz	r0, 8013942 <rcl_node_get_options+0xe>
 8013936:	6840      	ldr	r0, [r0, #4]
 8013938:	b118      	cbz	r0, 8013942 <rcl_node_get_options+0xe>
 801393a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801393c:	2b00      	cmp	r3, #0
 801393e:	bf08      	it	eq
 8013940:	2000      	moveq	r0, #0
 8013942:	4770      	bx	lr

08013944 <rcl_node_get_rmw_handle>:
 8013944:	b110      	cbz	r0, 801394c <rcl_node_get_rmw_handle+0x8>
 8013946:	6840      	ldr	r0, [r0, #4]
 8013948:	b100      	cbz	r0, 801394c <rcl_node_get_rmw_handle+0x8>
 801394a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801394c:	4770      	bx	lr
 801394e:	bf00      	nop

08013950 <rcl_node_get_default_options>:
 8013950:	b510      	push	{r4, lr}
 8013952:	2268      	movs	r2, #104	; 0x68
 8013954:	4604      	mov	r4, r0
 8013956:	2100      	movs	r1, #0
 8013958:	f004 fc02 	bl	8018160 <memset>
 801395c:	4620      	mov	r0, r4
 801395e:	f7fa ffe9 	bl	800e934 <rcutils_get_default_allocator>
 8013962:	2301      	movs	r3, #1
 8013964:	7523      	strb	r3, [r4, #20]
 8013966:	4620      	mov	r0, r4
 8013968:	bd10      	pop	{r4, pc}
 801396a:	bf00      	nop

0801396c <rcl_node_options_copy>:
 801396c:	b1d0      	cbz	r0, 80139a4 <rcl_node_options_copy+0x38>
 801396e:	b570      	push	{r4, r5, r6, lr}
 8013970:	460c      	mov	r4, r1
 8013972:	b1a9      	cbz	r1, 80139a0 <rcl_node_options_copy+0x34>
 8013974:	4288      	cmp	r0, r1
 8013976:	4684      	mov	ip, r0
 8013978:	d012      	beq.n	80139a0 <rcl_node_options_copy+0x34>
 801397a:	4605      	mov	r5, r0
 801397c:	8a86      	ldrh	r6, [r0, #20]
 801397e:	468e      	mov	lr, r1
 8013980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013982:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013986:	682b      	ldr	r3, [r5, #0]
 8013988:	f8ce 3000 	str.w	r3, [lr]
 801398c:	f10c 0118 	add.w	r1, ip, #24
 8013990:	2250      	movs	r2, #80	; 0x50
 8013992:	82a6      	strh	r6, [r4, #20]
 8013994:	f104 0018 	add.w	r0, r4, #24
 8013998:	f004 fcaa 	bl	80182f0 <memcpy>
 801399c:	2000      	movs	r0, #0
 801399e:	bd70      	pop	{r4, r5, r6, pc}
 80139a0:	200b      	movs	r0, #11
 80139a2:	bd70      	pop	{r4, r5, r6, pc}
 80139a4:	200b      	movs	r0, #11
 80139a6:	4770      	bx	lr

080139a8 <rcl_node_resolve_name>:
 80139a8:	b082      	sub	sp, #8
 80139aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ae:	b091      	sub	sp, #68	; 0x44
 80139b0:	ac1a      	add	r4, sp, #104	; 0x68
 80139b2:	e884 000c 	stmia.w	r4, {r2, r3}
 80139b6:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80139ba:	2800      	cmp	r0, #0
 80139bc:	d03b      	beq.n	8013a36 <rcl_node_resolve_name+0x8e>
 80139be:	460c      	mov	r4, r1
 80139c0:	4605      	mov	r5, r0
 80139c2:	f7ff ffb7 	bl	8013934 <rcl_node_get_options>
 80139c6:	2800      	cmp	r0, #0
 80139c8:	d037      	beq.n	8013a3a <rcl_node_resolve_name+0x92>
 80139ca:	4628      	mov	r0, r5
 80139cc:	f7ff ffa2 	bl	8013914 <rcl_node_get_name>
 80139d0:	4606      	mov	r6, r0
 80139d2:	4628      	mov	r0, r5
 80139d4:	f7ff ffa6 	bl	8013924 <rcl_node_get_namespace>
 80139d8:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 80139dc:	4681      	mov	r9, r0
 80139de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139e2:	ad0b      	add	r5, sp, #44	; 0x2c
 80139e4:	46ac      	mov	ip, r5
 80139e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139ea:	f8de 3000 	ldr.w	r3, [lr]
 80139ee:	f8cc 3000 	str.w	r3, [ip]
 80139f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139f4:	b1fb      	cbz	r3, 8013a36 <rcl_node_resolve_name+0x8e>
 80139f6:	468a      	mov	sl, r1
 80139f8:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80139fc:	f000 fd18 	bl	8014430 <rcutils_get_zero_initialized_string_map>
 8013a00:	ab10      	add	r3, sp, #64	; 0x40
 8013a02:	9008      	str	r0, [sp, #32]
 8013a04:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013a08:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a0c:	2100      	movs	r1, #0
 8013a0e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013a12:	a808      	add	r0, sp, #32
 8013a14:	f000 fd84 	bl	8014520 <rcutils_string_map_init>
 8013a18:	4607      	mov	r7, r0
 8013a1a:	b180      	cbz	r0, 8013a3e <rcl_node_resolve_name+0x96>
 8013a1c:	f7fa ffa6 	bl	800e96c <rcutils_get_error_string>
 8013a20:	f7fa ffba 	bl	800e998 <rcutils_reset_error>
 8013a24:	2f0a      	cmp	r7, #10
 8013a26:	bf18      	it	ne
 8013a28:	2701      	movne	r7, #1
 8013a2a:	4638      	mov	r0, r7
 8013a2c:	b011      	add	sp, #68	; 0x44
 8013a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a32:	b002      	add	sp, #8
 8013a34:	4770      	bx	lr
 8013a36:	270b      	movs	r7, #11
 8013a38:	e7f7      	b.n	8013a2a <rcl_node_resolve_name+0x82>
 8013a3a:	2701      	movs	r7, #1
 8013a3c:	e7f5      	b.n	8013a2a <rcl_node_resolve_name+0x82>
 8013a3e:	9009      	str	r0, [sp, #36]	; 0x24
 8013a40:	9007      	str	r0, [sp, #28]
 8013a42:	a808      	add	r0, sp, #32
 8013a44:	f003 fd02 	bl	801744c <rcl_get_default_topic_name_substitutions>
 8013a48:	4607      	mov	r7, r0
 8013a4a:	b1a8      	cbz	r0, 8013a78 <rcl_node_resolve_name+0xd0>
 8013a4c:	280a      	cmp	r0, #10
 8013a4e:	9c07      	ldr	r4, [sp, #28]
 8013a50:	d000      	beq.n	8013a54 <rcl_node_resolve_name+0xac>
 8013a52:	2701      	movs	r7, #1
 8013a54:	a808      	add	r0, sp, #32
 8013a56:	f000 fda3 	bl	80145a0 <rcutils_string_map_fini>
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d13d      	bne.n	8013ada <rcl_node_resolve_name+0x132>
 8013a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a60:	4659      	mov	r1, fp
 8013a62:	47d0      	blx	sl
 8013a64:	4659      	mov	r1, fp
 8013a66:	4620      	mov	r0, r4
 8013a68:	47d0      	blx	sl
 8013a6a:	f1b8 0f00 	cmp.w	r8, #0
 8013a6e:	d0dc      	beq.n	8013a2a <rcl_node_resolve_name+0x82>
 8013a70:	2f67      	cmp	r7, #103	; 0x67
 8013a72:	bf08      	it	eq
 8013a74:	2768      	moveq	r7, #104	; 0x68
 8013a76:	e7d8      	b.n	8013a2a <rcl_node_resolve_name+0x82>
 8013a78:	ab09      	add	r3, sp, #36	; 0x24
 8013a7a:	9305      	str	r3, [sp, #20]
 8013a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a7e:	46ec      	mov	ip, sp
 8013a80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a84:	682b      	ldr	r3, [r5, #0]
 8013a86:	f8cc 3000 	str.w	r3, [ip]
 8013a8a:	464a      	mov	r2, r9
 8013a8c:	4631      	mov	r1, r6
 8013a8e:	4620      	mov	r0, r4
 8013a90:	ab08      	add	r3, sp, #32
 8013a92:	f003 fb7d 	bl	8017190 <rcl_expand_topic_name>
 8013a96:	4607      	mov	r7, r0
 8013a98:	b9b8      	cbnz	r0, 8013aca <rcl_node_resolve_name+0x122>
 8013a9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013a9c:	9009      	str	r0, [sp, #36]	; 0x24
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	a90a      	add	r1, sp, #40	; 0x28
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f000 fe34 	bl	8014710 <rmw_validate_full_topic_name>
 8013aa8:	b988      	cbnz	r0, 8013ace <rcl_node_resolve_name+0x126>
 8013aaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013aac:	b9d5      	cbnz	r5, 8013ae4 <rcl_node_resolve_name+0x13c>
 8013aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ab0:	a808      	add	r0, sp, #32
 8013ab2:	601c      	str	r4, [r3, #0]
 8013ab4:	f000 fd74 	bl	80145a0 <rcutils_string_map_fini>
 8013ab8:	4607      	mov	r7, r0
 8013aba:	b1a8      	cbz	r0, 8013ae8 <rcl_node_resolve_name+0x140>
 8013abc:	f7fa ff56 	bl	800e96c <rcutils_get_error_string>
 8013ac0:	462c      	mov	r4, r5
 8013ac2:	f7fa ff69 	bl	800e998 <rcutils_reset_error>
 8013ac6:	2701      	movs	r7, #1
 8013ac8:	e7c9      	b.n	8013a5e <rcl_node_resolve_name+0xb6>
 8013aca:	9c07      	ldr	r4, [sp, #28]
 8013acc:	e7c2      	b.n	8013a54 <rcl_node_resolve_name+0xac>
 8013ace:	f7fa ff4d 	bl	800e96c <rcutils_get_error_string>
 8013ad2:	2701      	movs	r7, #1
 8013ad4:	f7fa ff60 	bl	800e998 <rcutils_reset_error>
 8013ad8:	e7bc      	b.n	8013a54 <rcl_node_resolve_name+0xac>
 8013ada:	f7fa ff47 	bl	800e96c <rcutils_get_error_string>
 8013ade:	f7fa ff5b 	bl	800e998 <rcutils_reset_error>
 8013ae2:	e7bc      	b.n	8013a5e <rcl_node_resolve_name+0xb6>
 8013ae4:	2767      	movs	r7, #103	; 0x67
 8013ae6:	e7b5      	b.n	8013a54 <rcl_node_resolve_name+0xac>
 8013ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aea:	4659      	mov	r1, fp
 8013aec:	47d0      	blx	sl
 8013aee:	4659      	mov	r1, fp
 8013af0:	4638      	mov	r0, r7
 8013af2:	47d0      	blx	sl
 8013af4:	e799      	b.n	8013a2a <rcl_node_resolve_name+0x82>
 8013af6:	bf00      	nop

08013af8 <exact_match_lookup>:
 8013af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013afa:	f102 0708 	add.w	r7, r2, #8
 8013afe:	460b      	mov	r3, r1
 8013b00:	4614      	mov	r4, r2
 8013b02:	4606      	mov	r6, r0
 8013b04:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013b08:	b085      	sub	sp, #20
 8013b0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	4919      	ldr	r1, [pc, #100]	; (8013b78 <exact_match_lookup+0x80>)
 8013b12:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013b16:	f000 fb25 	bl	8014164 <rcutils_join_path>
 8013b1a:	7833      	ldrb	r3, [r6, #0]
 8013b1c:	2b2f      	cmp	r3, #47	; 0x2f
 8013b1e:	4605      	mov	r5, r0
 8013b20:	d023      	beq.n	8013b6a <exact_match_lookup+0x72>
 8013b22:	f104 030c 	add.w	r3, r4, #12
 8013b26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013b2a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013b2e:	1c70      	adds	r0, r6, #1
 8013b30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013b34:	f000 fb1c 	bl	8014170 <rcutils_to_native_path>
 8013b38:	4606      	mov	r6, r0
 8013b3a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013b3e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013b42:	4631      	mov	r1, r6
 8013b44:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013b48:	4628      	mov	r0, r5
 8013b4a:	f000 fb0b 	bl	8014164 <rcutils_join_path>
 8013b4e:	6862      	ldr	r2, [r4, #4]
 8013b50:	6921      	ldr	r1, [r4, #16]
 8013b52:	4603      	mov	r3, r0
 8013b54:	4630      	mov	r0, r6
 8013b56:	461e      	mov	r6, r3
 8013b58:	4790      	blx	r2
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	6863      	ldr	r3, [r4, #4]
 8013b5e:	6921      	ldr	r1, [r4, #16]
 8013b60:	4798      	blx	r3
 8013b62:	4635      	mov	r5, r6
 8013b64:	4628      	mov	r0, r5
 8013b66:	b005      	add	sp, #20
 8013b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b6a:	7873      	ldrb	r3, [r6, #1]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d1d8      	bne.n	8013b22 <exact_match_lookup+0x2a>
 8013b70:	4628      	mov	r0, r5
 8013b72:	b005      	add	sp, #20
 8013b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b76:	bf00      	nop
 8013b78:	08019578 	.word	0x08019578

08013b7c <rcl_get_secure_root>:
 8013b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b80:	b085      	sub	sp, #20
 8013b82:	b168      	cbz	r0, 8013ba0 <rcl_get_secure_root+0x24>
 8013b84:	4607      	mov	r7, r0
 8013b86:	4608      	mov	r0, r1
 8013b88:	460c      	mov	r4, r1
 8013b8a:	f7fa fee1 	bl	800e950 <rcutils_allocator_is_valid>
 8013b8e:	b138      	cbz	r0, 8013ba0 <rcl_get_secure_root+0x24>
 8013b90:	2300      	movs	r3, #0
 8013b92:	482d      	ldr	r0, [pc, #180]	; (8013c48 <rcl_get_secure_root+0xcc>)
 8013b94:	9303      	str	r3, [sp, #12]
 8013b96:	a903      	add	r1, sp, #12
 8013b98:	f000 faca 	bl	8014130 <rcutils_get_env>
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	b120      	cbz	r0, 8013baa <rcl_get_secure_root+0x2e>
 8013ba0:	2500      	movs	r5, #0
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	b005      	add	sp, #20
 8013ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013baa:	9b03      	ldr	r3, [sp, #12]
 8013bac:	781a      	ldrb	r2, [r3, #0]
 8013bae:	2a00      	cmp	r2, #0
 8013bb0:	d0f6      	beq.n	8013ba0 <rcl_get_secure_root+0x24>
 8013bb2:	f104 090c 	add.w	r9, r4, #12
 8013bb6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013bba:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013bc4:	f000 fbf6 	bl	80143b4 <rcutils_strdup>
 8013bc8:	4680      	mov	r8, r0
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	d0e8      	beq.n	8013ba0 <rcl_get_secure_root+0x24>
 8013bce:	481f      	ldr	r0, [pc, #124]	; (8013c4c <rcl_get_secure_root+0xd0>)
 8013bd0:	9503      	str	r5, [sp, #12]
 8013bd2:	a903      	add	r1, sp, #12
 8013bd4:	f000 faac 	bl	8014130 <rcutils_get_env>
 8013bd8:	b160      	cbz	r0, 8013bf4 <rcl_get_secure_root+0x78>
 8013bda:	2600      	movs	r6, #0
 8013bdc:	6863      	ldr	r3, [r4, #4]
 8013bde:	6921      	ldr	r1, [r4, #16]
 8013be0:	4630      	mov	r0, r6
 8013be2:	4798      	blx	r3
 8013be4:	4640      	mov	r0, r8
 8013be6:	6863      	ldr	r3, [r4, #4]
 8013be8:	6921      	ldr	r1, [r4, #16]
 8013bea:	4798      	blx	r3
 8013bec:	4628      	mov	r0, r5
 8013bee:	b005      	add	sp, #20
 8013bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bf4:	9b03      	ldr	r3, [sp, #12]
 8013bf6:	781e      	ldrb	r6, [r3, #0]
 8013bf8:	b1f6      	cbz	r6, 8013c38 <rcl_get_secure_root+0xbc>
 8013bfa:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013bfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013c02:	4618      	mov	r0, r3
 8013c04:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013c08:	f000 fbd4 	bl	80143b4 <rcutils_strdup>
 8013c0c:	4606      	mov	r6, r0
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d0e3      	beq.n	8013bda <rcl_get_secure_root+0x5e>
 8013c12:	4622      	mov	r2, r4
 8013c14:	4641      	mov	r1, r8
 8013c16:	f7ff ff6f 	bl	8013af8 <exact_match_lookup>
 8013c1a:	4605      	mov	r5, r0
 8013c1c:	2d00      	cmp	r5, #0
 8013c1e:	d0dd      	beq.n	8013bdc <rcl_get_secure_root+0x60>
 8013c20:	4628      	mov	r0, r5
 8013c22:	f000 fa9d 	bl	8014160 <rcutils_is_directory>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	d1d7      	bne.n	8013bdc <rcl_get_secure_root+0x60>
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	6921      	ldr	r1, [r4, #16]
 8013c30:	461d      	mov	r5, r3
 8013c32:	6863      	ldr	r3, [r4, #4]
 8013c34:	4798      	blx	r3
 8013c36:	e7d1      	b.n	8013bdc <rcl_get_secure_root+0x60>
 8013c38:	4622      	mov	r2, r4
 8013c3a:	4638      	mov	r0, r7
 8013c3c:	4641      	mov	r1, r8
 8013c3e:	f7ff ff5b 	bl	8013af8 <exact_match_lookup>
 8013c42:	4605      	mov	r5, r0
 8013c44:	e7ea      	b.n	8013c1c <rcl_get_secure_root+0xa0>
 8013c46:	bf00      	nop
 8013c48:	08019584 	.word	0x08019584
 8013c4c:	0801959c 	.word	0x0801959c

08013c50 <rcl_get_security_options_from_environment>:
 8013c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c54:	b082      	sub	sp, #8
 8013c56:	2300      	movs	r3, #0
 8013c58:	4606      	mov	r6, r0
 8013c5a:	460f      	mov	r7, r1
 8013c5c:	4820      	ldr	r0, [pc, #128]	; (8013ce0 <rcl_get_security_options_from_environment+0x90>)
 8013c5e:	9301      	str	r3, [sp, #4]
 8013c60:	a901      	add	r1, sp, #4
 8013c62:	4690      	mov	r8, r2
 8013c64:	f000 fa64 	bl	8014130 <rcutils_get_env>
 8013c68:	b120      	cbz	r0, 8013c74 <rcl_get_security_options_from_environment+0x24>
 8013c6a:	2501      	movs	r5, #1
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	b002      	add	sp, #8
 8013c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c74:	491b      	ldr	r1, [pc, #108]	; (8013ce4 <rcl_get_security_options_from_environment+0x94>)
 8013c76:	4604      	mov	r4, r0
 8013c78:	9801      	ldr	r0, [sp, #4]
 8013c7a:	f7ec faa9 	bl	80001d0 <strcmp>
 8013c7e:	4605      	mov	r5, r0
 8013c80:	b9e8      	cbnz	r0, 8013cbe <rcl_get_security_options_from_environment+0x6e>
 8013c82:	9001      	str	r0, [sp, #4]
 8013c84:	f1b8 0f00 	cmp.w	r8, #0
 8013c88:	d020      	beq.n	8013ccc <rcl_get_security_options_from_environment+0x7c>
 8013c8a:	4817      	ldr	r0, [pc, #92]	; (8013ce8 <rcl_get_security_options_from_environment+0x98>)
 8013c8c:	a901      	add	r1, sp, #4
 8013c8e:	f000 fa4f 	bl	8014130 <rcutils_get_env>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d1e9      	bne.n	8013c6a <rcl_get_security_options_from_environment+0x1a>
 8013c96:	4915      	ldr	r1, [pc, #84]	; (8013cec <rcl_get_security_options_from_environment+0x9c>)
 8013c98:	9801      	ldr	r0, [sp, #4]
 8013c9a:	f7ec fa99 	bl	80001d0 <strcmp>
 8013c9e:	fab0 f080 	clz	r0, r0
 8013ca2:	0940      	lsrs	r0, r0, #5
 8013ca4:	f888 0000 	strb.w	r0, [r8]
 8013ca8:	4639      	mov	r1, r7
 8013caa:	4630      	mov	r0, r6
 8013cac:	f7ff ff66 	bl	8013b7c <rcl_get_secure_root>
 8013cb0:	b170      	cbz	r0, 8013cd0 <rcl_get_security_options_from_environment+0x80>
 8013cb2:	f8c8 0004 	str.w	r0, [r8, #4]
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	b002      	add	sp, #8
 8013cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cbe:	4625      	mov	r5, r4
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f888 4000 	strb.w	r4, [r8]
 8013cc6:	b002      	add	sp, #8
 8013cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ccc:	250b      	movs	r5, #11
 8013cce:	e7cd      	b.n	8013c6c <rcl_get_security_options_from_environment+0x1c>
 8013cd0:	f898 5000 	ldrb.w	r5, [r8]
 8013cd4:	f1a5 0501 	sub.w	r5, r5, #1
 8013cd8:	fab5 f585 	clz	r5, r5
 8013cdc:	096d      	lsrs	r5, r5, #5
 8013cde:	e7c5      	b.n	8013c6c <rcl_get_security_options_from_environment+0x1c>
 8013ce0:	0801953c 	.word	0x0801953c
 8013ce4:	08019550 	.word	0x08019550
 8013ce8:	08019558 	.word	0x08019558
 8013cec:	08019570 	.word	0x08019570

08013cf0 <rcl_get_zero_initialized_subscription>:
 8013cf0:	4b01      	ldr	r3, [pc, #4]	; (8013cf8 <rcl_get_zero_initialized_subscription+0x8>)
 8013cf2:	6818      	ldr	r0, [r3, #0]
 8013cf4:	4770      	bx	lr
 8013cf6:	bf00      	nop
 8013cf8:	080195bc 	.word	0x080195bc

08013cfc <rcl_subscription_init>:
 8013cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d00:	b089      	sub	sp, #36	; 0x24
 8013d02:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013d04:	b1d6      	cbz	r6, 8013d3c <rcl_subscription_init+0x40>
 8013d06:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8013d0a:	4604      	mov	r4, r0
 8013d0c:	4648      	mov	r0, r9
 8013d0e:	460d      	mov	r5, r1
 8013d10:	4690      	mov	r8, r2
 8013d12:	461f      	mov	r7, r3
 8013d14:	f7fa fe1c 	bl	800e950 <rcutils_allocator_is_valid>
 8013d18:	b180      	cbz	r0, 8013d3c <rcl_subscription_init+0x40>
 8013d1a:	b17c      	cbz	r4, 8013d3c <rcl_subscription_init+0x40>
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	f7ff fdef 	bl	8013900 <rcl_node_is_valid>
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d054      	beq.n	8013dd0 <rcl_subscription_init+0xd4>
 8013d26:	f1b8 0f00 	cmp.w	r8, #0
 8013d2a:	d007      	beq.n	8013d3c <rcl_subscription_init+0x40>
 8013d2c:	b137      	cbz	r7, 8013d3c <rcl_subscription_init+0x40>
 8013d2e:	6823      	ldr	r3, [r4, #0]
 8013d30:	b14b      	cbz	r3, 8013d46 <rcl_subscription_init+0x4a>
 8013d32:	2764      	movs	r7, #100	; 0x64
 8013d34:	4638      	mov	r0, r7
 8013d36:	b009      	add	sp, #36	; 0x24
 8013d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d3c:	270b      	movs	r7, #11
 8013d3e:	4638      	mov	r0, r7
 8013d40:	b009      	add	sp, #36	; 0x24
 8013d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d46:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013d4a:	aa07      	add	r2, sp, #28
 8013d4c:	9205      	str	r2, [sp, #20]
 8013d4e:	9307      	str	r3, [sp, #28]
 8013d50:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8013d54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013d58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013d5c:	4639      	mov	r1, r7
 8013d5e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8013d62:	4628      	mov	r0, r5
 8013d64:	f7ff fe20 	bl	80139a8 <rcl_node_resolve_name>
 8013d68:	4607      	mov	r7, r0
 8013d6a:	2800      	cmp	r0, #0
 8013d6c:	d15f      	bne.n	8013e2e <rcl_subscription_init+0x132>
 8013d6e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 8013d72:	21c8      	movs	r1, #200	; 0xc8
 8013d74:	2001      	movs	r0, #1
 8013d76:	4798      	blx	r3
 8013d78:	6020      	str	r0, [r4, #0]
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d05d      	beq.n	8013e3a <rcl_subscription_init+0x13e>
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f7ff fde0 	bl	8013944 <rcl_node_get_rmw_handle>
 8013d84:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8013d88:	9300      	str	r3, [sp, #0]
 8013d8a:	9a07      	ldr	r2, [sp, #28]
 8013d8c:	6827      	ldr	r7, [r4, #0]
 8013d8e:	4641      	mov	r1, r8
 8013d90:	4633      	mov	r3, r6
 8013d92:	f001 fa95 	bl	80152c0 <rmw_create_subscription>
 8013d96:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8013d9a:	6827      	ldr	r7, [r4, #0]
 8013d9c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8013da0:	b348      	cbz	r0, 8013df6 <rcl_subscription_init+0xfa>
 8013da2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013da6:	f001 fb6d 	bl	8015484 <rmw_subscription_get_actual_qos>
 8013daa:	4607      	mov	r7, r0
 8013dac:	b9a8      	cbnz	r0, 8013dda <rcl_subscription_init+0xde>
 8013dae:	6820      	ldr	r0, [r4, #0]
 8013db0:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8013db4:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8013db8:	2270      	movs	r2, #112	; 0x70
 8013dba:	4631      	mov	r1, r6
 8013dbc:	f004 fa98 	bl	80182f0 <memcpy>
 8013dc0:	9807      	ldr	r0, [sp, #28]
 8013dc2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013dc4:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013dc6:	4798      	blx	r3
 8013dc8:	4638      	mov	r0, r7
 8013dca:	b009      	add	sp, #36	; 0x24
 8013dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dd0:	27c8      	movs	r7, #200	; 0xc8
 8013dd2:	4638      	mov	r0, r7
 8013dd4:	b009      	add	sp, #36	; 0x24
 8013dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dda:	6827      	ldr	r7, [r4, #0]
 8013ddc:	b32f      	cbz	r7, 8013e2a <rcl_subscription_init+0x12e>
 8013dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013de2:	b14b      	cbz	r3, 8013df8 <rcl_subscription_init+0xfc>
 8013de4:	4628      	mov	r0, r5
 8013de6:	f7ff fdad 	bl	8013944 <rcl_node_get_rmw_handle>
 8013dea:	6823      	ldr	r3, [r4, #0]
 8013dec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8013df0:	f001 fb58 	bl	80154a4 <rmw_destroy_subscription>
 8013df4:	6827      	ldr	r7, [r4, #0]
 8013df6:	b197      	cbz	r7, 8013e1e <rcl_subscription_init+0x122>
 8013df8:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	f7fa fda7 	bl	800e950 <rcutils_allocator_is_valid>
 8013e02:	b158      	cbz	r0, 8013e1c <rcl_subscription_init+0x120>
 8013e04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013e06:	b148      	cbz	r0, 8013e1c <rcl_subscription_init+0x120>
 8013e08:	4629      	mov	r1, r5
 8013e0a:	f000 fc61 	bl	80146d0 <rmw_subscription_content_filter_options_fini>
 8013e0e:	4605      	mov	r5, r0
 8013e10:	b9b8      	cbnz	r0, 8013e42 <rcl_subscription_init+0x146>
 8013e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013e16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013e18:	4798      	blx	r3
 8013e1a:	66fd      	str	r5, [r7, #108]	; 0x6c
 8013e1c:	6827      	ldr	r7, [r4, #0]
 8013e1e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013e20:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013e22:	4638      	mov	r0, r7
 8013e24:	4798      	blx	r3
 8013e26:	2300      	movs	r3, #0
 8013e28:	6023      	str	r3, [r4, #0]
 8013e2a:	2701      	movs	r7, #1
 8013e2c:	e7c8      	b.n	8013dc0 <rcl_subscription_init+0xc4>
 8013e2e:	2867      	cmp	r0, #103	; 0x67
 8013e30:	d0c6      	beq.n	8013dc0 <rcl_subscription_init+0xc4>
 8013e32:	2869      	cmp	r0, #105	; 0x69
 8013e34:	d003      	beq.n	8013e3e <rcl_subscription_init+0x142>
 8013e36:	280a      	cmp	r0, #10
 8013e38:	d1f7      	bne.n	8013e2a <rcl_subscription_init+0x12e>
 8013e3a:	270a      	movs	r7, #10
 8013e3c:	e7c0      	b.n	8013dc0 <rcl_subscription_init+0xc4>
 8013e3e:	2767      	movs	r7, #103	; 0x67
 8013e40:	e7be      	b.n	8013dc0 <rcl_subscription_init+0xc4>
 8013e42:	f7ff f965 	bl	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 8013e46:	6827      	ldr	r7, [r4, #0]
 8013e48:	e7e9      	b.n	8013e1e <rcl_subscription_init+0x122>
 8013e4a:	bf00      	nop

08013e4c <rcl_subscription_get_default_options>:
 8013e4c:	b570      	push	{r4, r5, r6, lr}
 8013e4e:	4d14      	ldr	r5, [pc, #80]	; (8013ea0 <rcl_subscription_get_default_options+0x54>)
 8013e50:	4914      	ldr	r1, [pc, #80]	; (8013ea4 <rcl_subscription_get_default_options+0x58>)
 8013e52:	b08a      	sub	sp, #40	; 0x28
 8013e54:	4604      	mov	r4, r0
 8013e56:	2250      	movs	r2, #80	; 0x50
 8013e58:	4628      	mov	r0, r5
 8013e5a:	f004 fa49 	bl	80182f0 <memcpy>
 8013e5e:	a804      	add	r0, sp, #16
 8013e60:	f7fa fd68 	bl	800e934 <rcutils_get_default_allocator>
 8013e64:	f10d 0c10 	add.w	ip, sp, #16
 8013e68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e6c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013e70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e74:	466e      	mov	r6, sp
 8013e76:	f8dc 3000 	ldr.w	r3, [ip]
 8013e7a:	f8ce 3000 	str.w	r3, [lr]
 8013e7e:	4630      	mov	r0, r6
 8013e80:	f000 fc40 	bl	8014704 <rmw_get_default_subscription_options>
 8013e84:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013e88:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e90:	2270      	movs	r2, #112	; 0x70
 8013e92:	4629      	mov	r1, r5
 8013e94:	4620      	mov	r0, r4
 8013e96:	f004 fa2b 	bl	80182f0 <memcpy>
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	b00a      	add	sp, #40	; 0x28
 8013e9e:	bd70      	pop	{r4, r5, r6, pc}
 8013ea0:	2000e280 	.word	0x2000e280
 8013ea4:	080195c0 	.word	0x080195c0

08013ea8 <rcl_get_system_time>:
 8013ea8:	4608      	mov	r0, r1
 8013eaa:	f7fa bd91 	b.w	800e9d0 <rcutils_system_time_now>
 8013eae:	bf00      	nop

08013eb0 <rcl_get_steady_time>:
 8013eb0:	4608      	mov	r0, r1
 8013eb2:	f7fa bdb5 	b.w	800ea20 <rcutils_steady_time_now>
 8013eb6:	bf00      	nop

08013eb8 <rcl_get_ros_time>:
 8013eb8:	7a03      	ldrb	r3, [r0, #8]
 8013eba:	b510      	push	{r4, lr}
 8013ebc:	460c      	mov	r4, r1
 8013ebe:	b133      	cbz	r3, 8013ece <rcl_get_ros_time+0x16>
 8013ec0:	2105      	movs	r1, #5
 8013ec2:	f000 f8ff 	bl	80140c4 <__atomic_load_8>
 8013ec6:	e9c4 0100 	strd	r0, r1, [r4]
 8013eca:	2000      	movs	r0, #0
 8013ecc:	bd10      	pop	{r4, pc}
 8013ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ed2:	4608      	mov	r0, r1
 8013ed4:	f7fa bd7c 	b.w	800e9d0 <rcutils_system_time_now>

08013ed8 <rcl_clock_init>:
 8013ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eda:	4605      	mov	r5, r0
 8013edc:	4610      	mov	r0, r2
 8013ede:	4614      	mov	r4, r2
 8013ee0:	460e      	mov	r6, r1
 8013ee2:	f7fa fd35 	bl	800e950 <rcutils_allocator_is_valid>
 8013ee6:	b128      	cbz	r0, 8013ef4 <rcl_clock_init+0x1c>
 8013ee8:	2d03      	cmp	r5, #3
 8013eea:	d803      	bhi.n	8013ef4 <rcl_clock_init+0x1c>
 8013eec:	e8df f005 	tbb	[pc, r5]
 8013ef0:	06532e1d 	.word	0x06532e1d
 8013ef4:	f04f 0c0b 	mov.w	ip, #11
 8013ef8:	4660      	mov	r0, ip
 8013efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013efc:	2e00      	cmp	r6, #0
 8013efe:	d0f9      	beq.n	8013ef4 <rcl_clock_init+0x1c>
 8013f00:	2c00      	cmp	r4, #0
 8013f02:	d0f7      	beq.n	8013ef4 <rcl_clock_init+0x1c>
 8013f04:	2300      	movs	r3, #0
 8013f06:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f0a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8013fc0 <rcl_clock_init+0xe8>
 8013f0e:	6133      	str	r3, [r6, #16]
 8013f10:	f106 0514 	add.w	r5, r6, #20
 8013f14:	469c      	mov	ip, r3
 8013f16:	2703      	movs	r7, #3
 8013f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f1c:	6823      	ldr	r3, [r4, #0]
 8013f1e:	602b      	str	r3, [r5, #0]
 8013f20:	7037      	strb	r7, [r6, #0]
 8013f22:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013f26:	4660      	mov	r0, ip
 8013f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f2a:	2e00      	cmp	r6, #0
 8013f2c:	d0e2      	beq.n	8013ef4 <rcl_clock_init+0x1c>
 8013f2e:	2300      	movs	r3, #0
 8013f30:	7033      	strb	r3, [r6, #0]
 8013f32:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f36:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013f3a:	469c      	mov	ip, r3
 8013f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f3e:	f106 0514 	add.w	r5, r6, #20
 8013f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f44:	6823      	ldr	r3, [r4, #0]
 8013f46:	602b      	str	r3, [r5, #0]
 8013f48:	4660      	mov	r0, ip
 8013f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f4c:	2e00      	cmp	r6, #0
 8013f4e:	d0d1      	beq.n	8013ef4 <rcl_clock_init+0x1c>
 8013f50:	2c00      	cmp	r4, #0
 8013f52:	d0cf      	beq.n	8013ef4 <rcl_clock_init+0x1c>
 8013f54:	2700      	movs	r7, #0
 8013f56:	7037      	strb	r7, [r6, #0]
 8013f58:	46a4      	mov	ip, r4
 8013f5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f5e:	f106 0514 	add.w	r5, r6, #20
 8013f62:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013f66:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8013f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f6c:	f8dc 3000 	ldr.w	r3, [ip]
 8013f70:	602b      	str	r3, [r5, #0]
 8013f72:	6921      	ldr	r1, [r4, #16]
 8013f74:	6823      	ldr	r3, [r4, #0]
 8013f76:	2010      	movs	r0, #16
 8013f78:	4798      	blx	r3
 8013f7a:	6130      	str	r0, [r6, #16]
 8013f7c:	b1d0      	cbz	r0, 8013fb4 <rcl_clock_init+0xdc>
 8013f7e:	2200      	movs	r2, #0
 8013f80:	2300      	movs	r3, #0
 8013f82:	e9c0 2300 	strd	r2, r3, [r0]
 8013f86:	2301      	movs	r3, #1
 8013f88:	7207      	strb	r7, [r0, #8]
 8013f8a:	4a0c      	ldr	r2, [pc, #48]	; (8013fbc <rcl_clock_init+0xe4>)
 8013f8c:	7033      	strb	r3, [r6, #0]
 8013f8e:	46bc      	mov	ip, r7
 8013f90:	60f2      	str	r2, [r6, #12]
 8013f92:	4660      	mov	r0, ip
 8013f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f96:	2e00      	cmp	r6, #0
 8013f98:	d0ac      	beq.n	8013ef4 <rcl_clock_init+0x1c>
 8013f9a:	2c00      	cmp	r4, #0
 8013f9c:	d0aa      	beq.n	8013ef4 <rcl_clock_init+0x1c>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013fa4:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8013fc4 <rcl_clock_init+0xec>
 8013fa8:	6133      	str	r3, [r6, #16]
 8013faa:	f106 0514 	add.w	r5, r6, #20
 8013fae:	469c      	mov	ip, r3
 8013fb0:	2702      	movs	r7, #2
 8013fb2:	e7b1      	b.n	8013f18 <rcl_clock_init+0x40>
 8013fb4:	f04f 0c0a 	mov.w	ip, #10
 8013fb8:	e79e      	b.n	8013ef8 <rcl_clock_init+0x20>
 8013fba:	bf00      	nop
 8013fbc:	08013eb9 	.word	0x08013eb9
 8013fc0:	08013eb1 	.word	0x08013eb1
 8013fc4:	08013ea9 	.word	0x08013ea9

08013fc8 <rcl_validate_enclave_name_with_size>:
 8013fc8:	b378      	cbz	r0, 801402a <rcl_validate_enclave_name_with_size+0x62>
 8013fca:	b570      	push	{r4, r5, r6, lr}
 8013fcc:	4615      	mov	r5, r2
 8013fce:	b0c2      	sub	sp, #264	; 0x108
 8013fd0:	b302      	cbz	r2, 8014014 <rcl_validate_enclave_name_with_size+0x4c>
 8013fd2:	461e      	mov	r6, r3
 8013fd4:	466a      	mov	r2, sp
 8013fd6:	ab01      	add	r3, sp, #4
 8013fd8:	460c      	mov	r4, r1
 8013fda:	f000 fc0f 	bl	80147fc <rmw_validate_namespace_with_size>
 8013fde:	4684      	mov	ip, r0
 8013fe0:	b9e8      	cbnz	r0, 801401e <rcl_validate_enclave_name_with_size+0x56>
 8013fe2:	9b00      	ldr	r3, [sp, #0]
 8013fe4:	b923      	cbnz	r3, 8013ff0 <rcl_validate_enclave_name_with_size+0x28>
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	602b      	str	r3, [r5, #0]
 8013fea:	4660      	mov	r0, ip
 8013fec:	b042      	add	sp, #264	; 0x108
 8013fee:	bd70      	pop	{r4, r5, r6, pc}
 8013ff0:	2b07      	cmp	r3, #7
 8013ff2:	d007      	beq.n	8014004 <rcl_validate_enclave_name_with_size+0x3c>
 8013ff4:	1e5a      	subs	r2, r3, #1
 8013ff6:	2a05      	cmp	r2, #5
 8013ff8:	d833      	bhi.n	8014062 <rcl_validate_enclave_name_with_size+0x9a>
 8013ffa:	e8df f002 	tbb	[pc, r2]
 8013ffe:	2c2f      	.short	0x2c2f
 8014000:	1a232629 	.word	0x1a232629
 8014004:	2cff      	cmp	r4, #255	; 0xff
 8014006:	d9ee      	bls.n	8013fe6 <rcl_validate_enclave_name_with_size+0x1e>
 8014008:	602b      	str	r3, [r5, #0]
 801400a:	2e00      	cmp	r6, #0
 801400c:	d0ed      	beq.n	8013fea <rcl_validate_enclave_name_with_size+0x22>
 801400e:	23fe      	movs	r3, #254	; 0xfe
 8014010:	6033      	str	r3, [r6, #0]
 8014012:	e7ea      	b.n	8013fea <rcl_validate_enclave_name_with_size+0x22>
 8014014:	f04f 0c0b 	mov.w	ip, #11
 8014018:	4660      	mov	r0, ip
 801401a:	b042      	add	sp, #264	; 0x108
 801401c:	bd70      	pop	{r4, r5, r6, pc}
 801401e:	f7ff f877 	bl	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 8014022:	4684      	mov	ip, r0
 8014024:	4660      	mov	r0, ip
 8014026:	b042      	add	sp, #264	; 0x108
 8014028:	bd70      	pop	{r4, r5, r6, pc}
 801402a:	f04f 0c0b 	mov.w	ip, #11
 801402e:	4660      	mov	r0, ip
 8014030:	4770      	bx	lr
 8014032:	2306      	movs	r3, #6
 8014034:	602b      	str	r3, [r5, #0]
 8014036:	2e00      	cmp	r6, #0
 8014038:	d0d7      	beq.n	8013fea <rcl_validate_enclave_name_with_size+0x22>
 801403a:	9b01      	ldr	r3, [sp, #4]
 801403c:	6033      	str	r3, [r6, #0]
 801403e:	4660      	mov	r0, ip
 8014040:	b042      	add	sp, #264	; 0x108
 8014042:	bd70      	pop	{r4, r5, r6, pc}
 8014044:	2305      	movs	r3, #5
 8014046:	602b      	str	r3, [r5, #0]
 8014048:	e7f5      	b.n	8014036 <rcl_validate_enclave_name_with_size+0x6e>
 801404a:	2304      	movs	r3, #4
 801404c:	602b      	str	r3, [r5, #0]
 801404e:	e7f2      	b.n	8014036 <rcl_validate_enclave_name_with_size+0x6e>
 8014050:	2303      	movs	r3, #3
 8014052:	602b      	str	r3, [r5, #0]
 8014054:	e7ef      	b.n	8014036 <rcl_validate_enclave_name_with_size+0x6e>
 8014056:	2302      	movs	r3, #2
 8014058:	602b      	str	r3, [r5, #0]
 801405a:	e7ec      	b.n	8014036 <rcl_validate_enclave_name_with_size+0x6e>
 801405c:	2301      	movs	r3, #1
 801405e:	602b      	str	r3, [r5, #0]
 8014060:	e7e9      	b.n	8014036 <rcl_validate_enclave_name_with_size+0x6e>
 8014062:	4a04      	ldr	r2, [pc, #16]	; (8014074 <rcl_validate_enclave_name_with_size+0xac>)
 8014064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014068:	a802      	add	r0, sp, #8
 801406a:	f000 f977 	bl	801435c <rcutils_snprintf>
 801406e:	f04f 0c01 	mov.w	ip, #1
 8014072:	e7ba      	b.n	8013fea <rcl_validate_enclave_name_with_size+0x22>
 8014074:	08019610 	.word	0x08019610

08014078 <rcl_validate_enclave_name>:
 8014078:	b168      	cbz	r0, 8014096 <rcl_validate_enclave_name+0x1e>
 801407a:	b570      	push	{r4, r5, r6, lr}
 801407c:	460d      	mov	r5, r1
 801407e:	4616      	mov	r6, r2
 8014080:	4604      	mov	r4, r0
 8014082:	f7ec f8af 	bl	80001e4 <strlen>
 8014086:	4633      	mov	r3, r6
 8014088:	4601      	mov	r1, r0
 801408a:	462a      	mov	r2, r5
 801408c:	4620      	mov	r0, r4
 801408e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014092:	f7ff bf99 	b.w	8013fc8 <rcl_validate_enclave_name_with_size>
 8014096:	200b      	movs	r0, #11
 8014098:	4770      	bx	lr
 801409a:	bf00      	nop

0801409c <rcl_get_zero_initialized_wait_set>:
 801409c:	b510      	push	{r4, lr}
 801409e:	4c08      	ldr	r4, [pc, #32]	; (80140c0 <rcl_get_zero_initialized_wait_set+0x24>)
 80140a0:	4686      	mov	lr, r0
 80140a2:	4684      	mov	ip, r0
 80140a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140b6:	6823      	ldr	r3, [r4, #0]
 80140b8:	f8cc 3000 	str.w	r3, [ip]
 80140bc:	4670      	mov	r0, lr
 80140be:	bd10      	pop	{r4, pc}
 80140c0:	08019670 	.word	0x08019670

080140c4 <__atomic_load_8>:
 80140c4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80140c8:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80140cc:	4a15      	ldr	r2, [pc, #84]	; (8014124 <__atomic_load_8+0x60>)
 80140ce:	4b16      	ldr	r3, [pc, #88]	; (8014128 <__atomic_load_8+0x64>)
 80140d0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80140d4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80140d8:	fb02 f101 	mul.w	r1, r2, r1
 80140dc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80140e0:	fba3 2301 	umull	r2, r3, r3, r1
 80140e4:	091b      	lsrs	r3, r3, #4
 80140e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80140ea:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80140ee:	b4d0      	push	{r4, r6, r7}
 80140f0:	4c0e      	ldr	r4, [pc, #56]	; (801412c <__atomic_load_8+0x68>)
 80140f2:	1ac9      	subs	r1, r1, r3
 80140f4:	1862      	adds	r2, r4, r1
 80140f6:	f04f 0c01 	mov.w	ip, #1
 80140fa:	e8d2 3f4f 	ldrexb	r3, [r2]
 80140fe:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014102:	2e00      	cmp	r6, #0
 8014104:	d1f9      	bne.n	80140fa <__atomic_load_8+0x36>
 8014106:	f3bf 8f5b 	dmb	ish
 801410a:	b2db      	uxtb	r3, r3
 801410c:	2b00      	cmp	r3, #0
 801410e:	d1f4      	bne.n	80140fa <__atomic_load_8+0x36>
 8014110:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014114:	f3bf 8f5b 	dmb	ish
 8014118:	5463      	strb	r3, [r4, r1]
 801411a:	4630      	mov	r0, r6
 801411c:	4639      	mov	r1, r7
 801411e:	bcd0      	pop	{r4, r6, r7}
 8014120:	4770      	bx	lr
 8014122:	bf00      	nop
 8014124:	27d4eb2d 	.word	0x27d4eb2d
 8014128:	b21642c9 	.word	0xb21642c9
 801412c:	2000e2f0 	.word	0x2000e2f0

08014130 <rcutils_get_env>:
 8014130:	b168      	cbz	r0, 801414e <rcutils_get_env+0x1e>
 8014132:	b510      	push	{r4, lr}
 8014134:	460c      	mov	r4, r1
 8014136:	b129      	cbz	r1, 8014144 <rcutils_get_env+0x14>
 8014138:	f003 fc62 	bl	8017a00 <getenv>
 801413c:	b120      	cbz	r0, 8014148 <rcutils_get_env+0x18>
 801413e:	6020      	str	r0, [r4, #0]
 8014140:	2000      	movs	r0, #0
 8014142:	bd10      	pop	{r4, pc}
 8014144:	4803      	ldr	r0, [pc, #12]	; (8014154 <rcutils_get_env+0x24>)
 8014146:	bd10      	pop	{r4, pc}
 8014148:	4b03      	ldr	r3, [pc, #12]	; (8014158 <rcutils_get_env+0x28>)
 801414a:	6023      	str	r3, [r4, #0]
 801414c:	bd10      	pop	{r4, pc}
 801414e:	4803      	ldr	r0, [pc, #12]	; (801415c <rcutils_get_env+0x2c>)
 8014150:	4770      	bx	lr
 8014152:	bf00      	nop
 8014154:	080196c0 	.word	0x080196c0
 8014158:	080197e4 	.word	0x080197e4
 801415c:	080196a4 	.word	0x080196a4

08014160 <rcutils_is_directory>:
 8014160:	2000      	movs	r0, #0
 8014162:	4770      	bx	lr

08014164 <rcutils_join_path>:
 8014164:	b082      	sub	sp, #8
 8014166:	e88d 000c 	stmia.w	sp, {r2, r3}
 801416a:	2000      	movs	r0, #0
 801416c:	b002      	add	sp, #8
 801416e:	4770      	bx	lr

08014170 <rcutils_to_native_path>:
 8014170:	b084      	sub	sp, #16
 8014172:	a801      	add	r0, sp, #4
 8014174:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014178:	b004      	add	sp, #16
 801417a:	2000      	movs	r0, #0
 801417c:	4770      	bx	lr
 801417e:	bf00      	nop

08014180 <rcutils_format_string_limit>:
 8014180:	b40f      	push	{r0, r1, r2, r3}
 8014182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014184:	b083      	sub	sp, #12
 8014186:	ac08      	add	r4, sp, #32
 8014188:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801418a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801418e:	b34e      	cbz	r6, 80141e4 <rcutils_format_string_limit+0x64>
 8014190:	a808      	add	r0, sp, #32
 8014192:	f7fa fbdd 	bl	800e950 <rcutils_allocator_is_valid>
 8014196:	b328      	cbz	r0, 80141e4 <rcutils_format_string_limit+0x64>
 8014198:	2100      	movs	r1, #0
 801419a:	ab0f      	add	r3, sp, #60	; 0x3c
 801419c:	4632      	mov	r2, r6
 801419e:	4608      	mov	r0, r1
 80141a0:	e9cd 3300 	strd	r3, r3, [sp]
 80141a4:	f000 f8f4 	bl	8014390 <rcutils_vsnprintf>
 80141a8:	1c43      	adds	r3, r0, #1
 80141aa:	4605      	mov	r5, r0
 80141ac:	d01a      	beq.n	80141e4 <rcutils_format_string_limit+0x64>
 80141ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80141b2:	1c47      	adds	r7, r0, #1
 80141b4:	429f      	cmp	r7, r3
 80141b6:	bf84      	itt	hi
 80141b8:	461f      	movhi	r7, r3
 80141ba:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 80141be:	4638      	mov	r0, r7
 80141c0:	9b08      	ldr	r3, [sp, #32]
 80141c2:	4798      	blx	r3
 80141c4:	4604      	mov	r4, r0
 80141c6:	b168      	cbz	r0, 80141e4 <rcutils_format_string_limit+0x64>
 80141c8:	9b01      	ldr	r3, [sp, #4]
 80141ca:	4632      	mov	r2, r6
 80141cc:	4639      	mov	r1, r7
 80141ce:	f000 f8df 	bl	8014390 <rcutils_vsnprintf>
 80141d2:	2800      	cmp	r0, #0
 80141d4:	db02      	blt.n	80141dc <rcutils_format_string_limit+0x5c>
 80141d6:	2300      	movs	r3, #0
 80141d8:	5563      	strb	r3, [r4, r5]
 80141da:	e004      	b.n	80141e6 <rcutils_format_string_limit+0x66>
 80141dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80141e0:	4620      	mov	r0, r4
 80141e2:	4798      	blx	r3
 80141e4:	2400      	movs	r4, #0
 80141e6:	4620      	mov	r0, r4
 80141e8:	b003      	add	sp, #12
 80141ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80141ee:	b004      	add	sp, #16
 80141f0:	4770      	bx	lr
 80141f2:	bf00      	nop

080141f4 <rcutils_repl_str>:
 80141f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f8:	ed2d 8b02 	vpush	{d8}
 80141fc:	b087      	sub	sp, #28
 80141fe:	4680      	mov	r8, r0
 8014200:	4608      	mov	r0, r1
 8014202:	f8cd 8004 	str.w	r8, [sp, #4]
 8014206:	ee08 2a10 	vmov	s16, r2
 801420a:	468a      	mov	sl, r1
 801420c:	4699      	mov	r9, r3
 801420e:	f7eb ffe9 	bl	80001e4 <strlen>
 8014212:	2600      	movs	r6, #0
 8014214:	4647      	mov	r7, r8
 8014216:	9002      	str	r0, [sp, #8]
 8014218:	46b3      	mov	fp, r6
 801421a:	2510      	movs	r5, #16
 801421c:	46b0      	mov	r8, r6
 801421e:	e01d      	b.n	801425c <rcutils_repl_str+0x68>
 8014220:	f10b 0b01 	add.w	fp, fp, #1
 8014224:	455e      	cmp	r6, fp
 8014226:	d211      	bcs.n	801424c <rcutils_repl_str+0x58>
 8014228:	442e      	add	r6, r5
 801422a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801422e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014232:	00b1      	lsls	r1, r6, #2
 8014234:	4798      	blx	r3
 8014236:	2800      	cmp	r0, #0
 8014238:	f000 8088 	beq.w	801434c <rcutils_repl_str+0x158>
 801423c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014240:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014244:	4680      	mov	r8, r0
 8014246:	bf28      	it	cs
 8014248:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801424c:	9a01      	ldr	r2, [sp, #4]
 801424e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014252:	1aa2      	subs	r2, r4, r2
 8014254:	f843 2c04 	str.w	r2, [r3, #-4]
 8014258:	9b02      	ldr	r3, [sp, #8]
 801425a:	18e7      	adds	r7, r4, r3
 801425c:	4651      	mov	r1, sl
 801425e:	4638      	mov	r0, r7
 8014260:	f003 ffa5 	bl	80181ae <strstr>
 8014264:	4604      	mov	r4, r0
 8014266:	4640      	mov	r0, r8
 8014268:	2c00      	cmp	r4, #0
 801426a:	d1d9      	bne.n	8014220 <rcutils_repl_str+0x2c>
 801426c:	46b8      	mov	r8, r7
 801426e:	4607      	mov	r7, r0
 8014270:	4640      	mov	r0, r8
 8014272:	f7eb ffb7 	bl	80001e4 <strlen>
 8014276:	9b01      	ldr	r3, [sp, #4]
 8014278:	eba8 0303 	sub.w	r3, r8, r3
 801427c:	181c      	adds	r4, r3, r0
 801427e:	9404      	str	r4, [sp, #16]
 8014280:	f1bb 0f00 	cmp.w	fp, #0
 8014284:	d04a      	beq.n	801431c <rcutils_repl_str+0x128>
 8014286:	ee18 0a10 	vmov	r0, s16
 801428a:	f7eb ffab 	bl	80001e4 <strlen>
 801428e:	9b02      	ldr	r3, [sp, #8]
 8014290:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014294:	1ac3      	subs	r3, r0, r3
 8014296:	fb0b 4303 	mla	r3, fp, r3, r4
 801429a:	461a      	mov	r2, r3
 801429c:	9305      	str	r3, [sp, #20]
 801429e:	4606      	mov	r6, r0
 80142a0:	f8d9 3000 	ldr.w	r3, [r9]
 80142a4:	1c50      	adds	r0, r2, #1
 80142a6:	4798      	blx	r3
 80142a8:	9003      	str	r0, [sp, #12]
 80142aa:	2800      	cmp	r0, #0
 80142ac:	d04f      	beq.n	801434e <rcutils_repl_str+0x15a>
 80142ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80142b2:	683a      	ldr	r2, [r7, #0]
 80142b4:	4641      	mov	r1, r8
 80142b6:	f004 f81b 	bl	80182f0 <memcpy>
 80142ba:	683d      	ldr	r5, [r7, #0]
 80142bc:	9b03      	ldr	r3, [sp, #12]
 80142be:	9701      	str	r7, [sp, #4]
 80142c0:	46ba      	mov	sl, r7
 80142c2:	441d      	add	r5, r3
 80142c4:	9f02      	ldr	r7, [sp, #8]
 80142c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80142ca:	2401      	movs	r4, #1
 80142cc:	46d1      	mov	r9, sl
 80142ce:	ee18 aa10 	vmov	sl, s16
 80142d2:	e00a      	b.n	80142ea <rcutils_repl_str+0xf6>
 80142d4:	f8d9 5000 	ldr.w	r5, [r9]
 80142d8:	1aaa      	subs	r2, r5, r2
 80142da:	1885      	adds	r5, r0, r2
 80142dc:	f004 f808 	bl	80182f0 <memcpy>
 80142e0:	45a3      	cmp	fp, r4
 80142e2:	f104 0201 	add.w	r2, r4, #1
 80142e6:	d935      	bls.n	8014354 <rcutils_repl_str+0x160>
 80142e8:	4614      	mov	r4, r2
 80142ea:	4632      	mov	r2, r6
 80142ec:	4651      	mov	r1, sl
 80142ee:	4628      	mov	r0, r5
 80142f0:	f003 fffe 	bl	80182f0 <memcpy>
 80142f4:	f859 2b04 	ldr.w	r2, [r9], #4
 80142f8:	45a3      	cmp	fp, r4
 80142fa:	443a      	add	r2, r7
 80142fc:	eb05 0006 	add.w	r0, r5, r6
 8014300:	eb08 0102 	add.w	r1, r8, r2
 8014304:	d1e6      	bne.n	80142d4 <rcutils_repl_str+0xe0>
 8014306:	9b04      	ldr	r3, [sp, #16]
 8014308:	1a9a      	subs	r2, r3, r2
 801430a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801430e:	f003 ffef 	bl	80182f0 <memcpy>
 8014312:	9a03      	ldr	r2, [sp, #12]
 8014314:	9905      	ldr	r1, [sp, #20]
 8014316:	2300      	movs	r3, #0
 8014318:	5453      	strb	r3, [r2, r1]
 801431a:	e00b      	b.n	8014334 <rcutils_repl_str+0x140>
 801431c:	4620      	mov	r0, r4
 801431e:	f8d9 3000 	ldr.w	r3, [r9]
 8014322:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014326:	3001      	adds	r0, #1
 8014328:	4798      	blx	r3
 801432a:	9003      	str	r0, [sp, #12]
 801432c:	b110      	cbz	r0, 8014334 <rcutils_repl_str+0x140>
 801432e:	9901      	ldr	r1, [sp, #4]
 8014330:	f003 ffd6 	bl	80182e0 <strcpy>
 8014334:	4638      	mov	r0, r7
 8014336:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801433a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801433e:	4798      	blx	r3
 8014340:	9803      	ldr	r0, [sp, #12]
 8014342:	b007      	add	sp, #28
 8014344:	ecbd 8b02 	vpop	{d8}
 8014348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801434c:	4647      	mov	r7, r8
 801434e:	2300      	movs	r3, #0
 8014350:	9303      	str	r3, [sp, #12]
 8014352:	e7ef      	b.n	8014334 <rcutils_repl_str+0x140>
 8014354:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014358:	e7db      	b.n	8014312 <rcutils_repl_str+0x11e>
 801435a:	bf00      	nop

0801435c <rcutils_snprintf>:
 801435c:	b40c      	push	{r2, r3}
 801435e:	b530      	push	{r4, r5, lr}
 8014360:	b083      	sub	sp, #12
 8014362:	ab06      	add	r3, sp, #24
 8014364:	f853 2b04 	ldr.w	r2, [r3], #4
 8014368:	9301      	str	r3, [sp, #4]
 801436a:	b152      	cbz	r2, 8014382 <rcutils_snprintf+0x26>
 801436c:	b138      	cbz	r0, 801437e <rcutils_snprintf+0x22>
 801436e:	b141      	cbz	r1, 8014382 <rcutils_snprintf+0x26>
 8014370:	f003 fece 	bl	8018110 <vsniprintf>
 8014374:	b003      	add	sp, #12
 8014376:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801437a:	b002      	add	sp, #8
 801437c:	4770      	bx	lr
 801437e:	2900      	cmp	r1, #0
 8014380:	d0f6      	beq.n	8014370 <rcutils_snprintf+0x14>
 8014382:	f003 ff81 	bl	8018288 <__errno>
 8014386:	2316      	movs	r3, #22
 8014388:	6003      	str	r3, [r0, #0]
 801438a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801438e:	e7f1      	b.n	8014374 <rcutils_snprintf+0x18>

08014390 <rcutils_vsnprintf>:
 8014390:	b570      	push	{r4, r5, r6, lr}
 8014392:	b13a      	cbz	r2, 80143a4 <rcutils_vsnprintf+0x14>
 8014394:	b120      	cbz	r0, 80143a0 <rcutils_vsnprintf+0x10>
 8014396:	b129      	cbz	r1, 80143a4 <rcutils_vsnprintf+0x14>
 8014398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801439c:	f003 beb8 	b.w	8018110 <vsniprintf>
 80143a0:	2900      	cmp	r1, #0
 80143a2:	d0f9      	beq.n	8014398 <rcutils_vsnprintf+0x8>
 80143a4:	f003 ff70 	bl	8018288 <__errno>
 80143a8:	2316      	movs	r3, #22
 80143aa:	6003      	str	r3, [r0, #0]
 80143ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143b0:	bd70      	pop	{r4, r5, r6, pc}
 80143b2:	bf00      	nop

080143b4 <rcutils_strdup>:
 80143b4:	b084      	sub	sp, #16
 80143b6:	b570      	push	{r4, r5, r6, lr}
 80143b8:	b082      	sub	sp, #8
 80143ba:	ac07      	add	r4, sp, #28
 80143bc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80143c0:	4605      	mov	r5, r0
 80143c2:	b1b0      	cbz	r0, 80143f2 <rcutils_strdup+0x3e>
 80143c4:	f7eb ff0e 	bl	80001e4 <strlen>
 80143c8:	1c42      	adds	r2, r0, #1
 80143ca:	9b07      	ldr	r3, [sp, #28]
 80143cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143ce:	9201      	str	r2, [sp, #4]
 80143d0:	4606      	mov	r6, r0
 80143d2:	4610      	mov	r0, r2
 80143d4:	4798      	blx	r3
 80143d6:	4604      	mov	r4, r0
 80143d8:	b128      	cbz	r0, 80143e6 <rcutils_strdup+0x32>
 80143da:	9a01      	ldr	r2, [sp, #4]
 80143dc:	4629      	mov	r1, r5
 80143de:	f003 ff87 	bl	80182f0 <memcpy>
 80143e2:	2300      	movs	r3, #0
 80143e4:	55a3      	strb	r3, [r4, r6]
 80143e6:	4620      	mov	r0, r4
 80143e8:	b002      	add	sp, #8
 80143ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143ee:	b004      	add	sp, #16
 80143f0:	4770      	bx	lr
 80143f2:	4604      	mov	r4, r0
 80143f4:	e7f7      	b.n	80143e6 <rcutils_strdup+0x32>
 80143f6:	bf00      	nop

080143f8 <rcutils_strndup>:
 80143f8:	b082      	sub	sp, #8
 80143fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143fc:	ac06      	add	r4, sp, #24
 80143fe:	e884 000c 	stmia.w	r4, {r2, r3}
 8014402:	4605      	mov	r5, r0
 8014404:	b188      	cbz	r0, 801442a <rcutils_strndup+0x32>
 8014406:	1c4f      	adds	r7, r1, #1
 8014408:	460e      	mov	r6, r1
 801440a:	4638      	mov	r0, r7
 801440c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801440e:	4790      	blx	r2
 8014410:	4604      	mov	r4, r0
 8014412:	b128      	cbz	r0, 8014420 <rcutils_strndup+0x28>
 8014414:	463a      	mov	r2, r7
 8014416:	4629      	mov	r1, r5
 8014418:	f003 ff6a 	bl	80182f0 <memcpy>
 801441c:	2300      	movs	r3, #0
 801441e:	55a3      	strb	r3, [r4, r6]
 8014420:	4620      	mov	r0, r4
 8014422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014426:	b002      	add	sp, #8
 8014428:	4770      	bx	lr
 801442a:	4604      	mov	r4, r0
 801442c:	e7f8      	b.n	8014420 <rcutils_strndup+0x28>
 801442e:	bf00      	nop

08014430 <rcutils_get_zero_initialized_string_map>:
 8014430:	4b01      	ldr	r3, [pc, #4]	; (8014438 <rcutils_get_zero_initialized_string_map+0x8>)
 8014432:	2000      	movs	r0, #0
 8014434:	6018      	str	r0, [r3, #0]
 8014436:	4770      	bx	lr
 8014438:	2000e308 	.word	0x2000e308

0801443c <rcutils_string_map_reserve>:
 801443c:	2800      	cmp	r0, #0
 801443e:	d05f      	beq.n	8014500 <rcutils_string_map_reserve+0xc4>
 8014440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014444:	460c      	mov	r4, r1
 8014446:	6801      	ldr	r1, [r0, #0]
 8014448:	b082      	sub	sp, #8
 801444a:	4605      	mov	r5, r0
 801444c:	b129      	cbz	r1, 801445a <rcutils_string_map_reserve+0x1e>
 801444e:	68cb      	ldr	r3, [r1, #12]
 8014450:	42a3      	cmp	r3, r4
 8014452:	d906      	bls.n	8014462 <rcutils_string_map_reserve+0x26>
 8014454:	461c      	mov	r4, r3
 8014456:	2900      	cmp	r1, #0
 8014458:	d1f9      	bne.n	801444e <rcutils_string_map_reserve+0x12>
 801445a:	201f      	movs	r0, #31
 801445c:	b002      	add	sp, #8
 801445e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014462:	688b      	ldr	r3, [r1, #8]
 8014464:	42a3      	cmp	r3, r4
 8014466:	d047      	beq.n	80144f8 <rcutils_string_map_reserve+0xbc>
 8014468:	6a0e      	ldr	r6, [r1, #32]
 801446a:	2c00      	cmp	r4, #0
 801446c:	d034      	beq.n	80144d8 <rcutils_string_map_reserve+0x9c>
 801446e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8014472:	d243      	bcs.n	80144fc <rcutils_string_map_reserve+0xc0>
 8014474:	00a7      	lsls	r7, r4, #2
 8014476:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801447a:	6808      	ldr	r0, [r1, #0]
 801447c:	4632      	mov	r2, r6
 801447e:	4639      	mov	r1, r7
 8014480:	47c0      	blx	r8
 8014482:	2800      	cmp	r0, #0
 8014484:	d03a      	beq.n	80144fc <rcutils_string_map_reserve+0xc0>
 8014486:	682b      	ldr	r3, [r5, #0]
 8014488:	4632      	mov	r2, r6
 801448a:	6018      	str	r0, [r3, #0]
 801448c:	4639      	mov	r1, r7
 801448e:	6858      	ldr	r0, [r3, #4]
 8014490:	47c0      	blx	r8
 8014492:	2800      	cmp	r0, #0
 8014494:	d032      	beq.n	80144fc <rcutils_string_map_reserve+0xc0>
 8014496:	682d      	ldr	r5, [r5, #0]
 8014498:	68ab      	ldr	r3, [r5, #8]
 801449a:	6068      	str	r0, [r5, #4]
 801449c:	42a3      	cmp	r3, r4
 801449e:	d226      	bcs.n	80144ee <rcutils_string_map_reserve+0xb2>
 80144a0:	682a      	ldr	r2, [r5, #0]
 80144a2:	eb00 0c07 	add.w	ip, r0, r7
 80144a6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80144aa:	45e6      	cmp	lr, ip
 80144ac:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80144b0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80144b4:	d203      	bcs.n	80144be <rcutils_string_map_reserve+0x82>
 80144b6:	eb02 0c07 	add.w	ip, r2, r7
 80144ba:	4566      	cmp	r6, ip
 80144bc:	d322      	bcc.n	8014504 <rcutils_string_map_reserve+0xc8>
 80144be:	1ae3      	subs	r3, r4, r3
 80144c0:	009a      	lsls	r2, r3, #2
 80144c2:	4670      	mov	r0, lr
 80144c4:	2100      	movs	r1, #0
 80144c6:	9201      	str	r2, [sp, #4]
 80144c8:	f003 fe4a 	bl	8018160 <memset>
 80144cc:	9a01      	ldr	r2, [sp, #4]
 80144ce:	2100      	movs	r1, #0
 80144d0:	4630      	mov	r0, r6
 80144d2:	f003 fe45 	bl	8018160 <memset>
 80144d6:	e00a      	b.n	80144ee <rcutils_string_map_reserve+0xb2>
 80144d8:	694f      	ldr	r7, [r1, #20]
 80144da:	6808      	ldr	r0, [r1, #0]
 80144dc:	4631      	mov	r1, r6
 80144de:	47b8      	blx	r7
 80144e0:	682b      	ldr	r3, [r5, #0]
 80144e2:	4631      	mov	r1, r6
 80144e4:	6858      	ldr	r0, [r3, #4]
 80144e6:	601c      	str	r4, [r3, #0]
 80144e8:	47b8      	blx	r7
 80144ea:	682d      	ldr	r5, [r5, #0]
 80144ec:	606c      	str	r4, [r5, #4]
 80144ee:	2000      	movs	r0, #0
 80144f0:	60ac      	str	r4, [r5, #8]
 80144f2:	b002      	add	sp, #8
 80144f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f8:	2000      	movs	r0, #0
 80144fa:	e7af      	b.n	801445c <rcutils_string_map_reserve+0x20>
 80144fc:	200a      	movs	r0, #10
 80144fe:	e7ad      	b.n	801445c <rcutils_string_map_reserve+0x20>
 8014500:	200b      	movs	r0, #11
 8014502:	4770      	bx	lr
 8014504:	1f0b      	subs	r3, r1, #4
 8014506:	4418      	add	r0, r3
 8014508:	4413      	add	r3, r2
 801450a:	3a04      	subs	r2, #4
 801450c:	4417      	add	r7, r2
 801450e:	2200      	movs	r2, #0
 8014510:	f843 2f04 	str.w	r2, [r3, #4]!
 8014514:	42bb      	cmp	r3, r7
 8014516:	f840 2f04 	str.w	r2, [r0, #4]!
 801451a:	d1f9      	bne.n	8014510 <rcutils_string_map_reserve+0xd4>
 801451c:	e7e7      	b.n	80144ee <rcutils_string_map_reserve+0xb2>
 801451e:	bf00      	nop

08014520 <rcutils_string_map_init>:
 8014520:	b082      	sub	sp, #8
 8014522:	b570      	push	{r4, r5, r6, lr}
 8014524:	ac04      	add	r4, sp, #16
 8014526:	e884 000c 	stmia.w	r4, {r2, r3}
 801452a:	b380      	cbz	r0, 801458e <rcutils_string_map_init+0x6e>
 801452c:	6806      	ldr	r6, [r0, #0]
 801452e:	4604      	mov	r4, r0
 8014530:	b12e      	cbz	r6, 801453e <rcutils_string_map_init+0x1e>
 8014532:	251e      	movs	r5, #30
 8014534:	4628      	mov	r0, r5
 8014536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801453a:	b002      	add	sp, #8
 801453c:	4770      	bx	lr
 801453e:	a804      	add	r0, sp, #16
 8014540:	460d      	mov	r5, r1
 8014542:	f7fa fa05 	bl	800e950 <rcutils_allocator_is_valid>
 8014546:	b310      	cbz	r0, 801458e <rcutils_string_map_init+0x6e>
 8014548:	9b04      	ldr	r3, [sp, #16]
 801454a:	9908      	ldr	r1, [sp, #32]
 801454c:	2024      	movs	r0, #36	; 0x24
 801454e:	4798      	blx	r3
 8014550:	6020      	str	r0, [r4, #0]
 8014552:	b310      	cbz	r0, 801459a <rcutils_string_map_init+0x7a>
 8014554:	f10d 0e10 	add.w	lr, sp, #16
 8014558:	e9c0 6600 	strd	r6, r6, [r0]
 801455c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014560:	f100 0c10 	add.w	ip, r0, #16
 8014564:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801456c:	f8de 3000 	ldr.w	r3, [lr]
 8014570:	f8cc 3000 	str.w	r3, [ip]
 8014574:	4629      	mov	r1, r5
 8014576:	4620      	mov	r0, r4
 8014578:	f7ff ff60 	bl	801443c <rcutils_string_map_reserve>
 801457c:	4605      	mov	r5, r0
 801457e:	2800      	cmp	r0, #0
 8014580:	d0d8      	beq.n	8014534 <rcutils_string_map_init+0x14>
 8014582:	9b05      	ldr	r3, [sp, #20]
 8014584:	9908      	ldr	r1, [sp, #32]
 8014586:	6820      	ldr	r0, [r4, #0]
 8014588:	4798      	blx	r3
 801458a:	6026      	str	r6, [r4, #0]
 801458c:	e7d2      	b.n	8014534 <rcutils_string_map_init+0x14>
 801458e:	250b      	movs	r5, #11
 8014590:	4628      	mov	r0, r5
 8014592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014596:	b002      	add	sp, #8
 8014598:	4770      	bx	lr
 801459a:	250a      	movs	r5, #10
 801459c:	e7ca      	b.n	8014534 <rcutils_string_map_init+0x14>
 801459e:	bf00      	nop

080145a0 <rcutils_string_map_fini>:
 80145a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145a4:	b082      	sub	sp, #8
 80145a6:	2800      	cmp	r0, #0
 80145a8:	d03a      	beq.n	8014620 <rcutils_string_map_fini+0x80>
 80145aa:	6804      	ldr	r4, [r0, #0]
 80145ac:	4606      	mov	r6, r0
 80145ae:	2c00      	cmp	r4, #0
 80145b0:	d032      	beq.n	8014618 <rcutils_string_map_fini+0x78>
 80145b2:	68a3      	ldr	r3, [r4, #8]
 80145b4:	b32b      	cbz	r3, 8014602 <rcutils_string_map_fini+0x62>
 80145b6:	2500      	movs	r5, #0
 80145b8:	6822      	ldr	r2, [r4, #0]
 80145ba:	462f      	mov	r7, r5
 80145bc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80145c0:	b1e0      	cbz	r0, 80145fc <rcutils_string_map_fini+0x5c>
 80145c2:	6a21      	ldr	r1, [r4, #32]
 80145c4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80145c8:	9101      	str	r1, [sp, #4]
 80145ca:	47c0      	blx	r8
 80145cc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80145d0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80145d4:	9901      	ldr	r1, [sp, #4]
 80145d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80145da:	47c0      	blx	r8
 80145dc:	68e3      	ldr	r3, [r4, #12]
 80145de:	6862      	ldr	r2, [r4, #4]
 80145e0:	3b01      	subs	r3, #1
 80145e2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80145e6:	60e3      	str	r3, [r4, #12]
 80145e8:	6834      	ldr	r4, [r6, #0]
 80145ea:	68a3      	ldr	r3, [r4, #8]
 80145ec:	3501      	adds	r5, #1
 80145ee:	429d      	cmp	r5, r3
 80145f0:	d207      	bcs.n	8014602 <rcutils_string_map_fini+0x62>
 80145f2:	6822      	ldr	r2, [r4, #0]
 80145f4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d1e2      	bne.n	80145c2 <rcutils_string_map_fini+0x22>
 80145fc:	3501      	adds	r5, #1
 80145fe:	429d      	cmp	r5, r3
 8014600:	d3dc      	bcc.n	80145bc <rcutils_string_map_fini+0x1c>
 8014602:	2100      	movs	r1, #0
 8014604:	4630      	mov	r0, r6
 8014606:	f7ff ff19 	bl	801443c <rcutils_string_map_reserve>
 801460a:	4604      	mov	r4, r0
 801460c:	b920      	cbnz	r0, 8014618 <rcutils_string_map_fini+0x78>
 801460e:	6830      	ldr	r0, [r6, #0]
 8014610:	6943      	ldr	r3, [r0, #20]
 8014612:	6a01      	ldr	r1, [r0, #32]
 8014614:	4798      	blx	r3
 8014616:	6034      	str	r4, [r6, #0]
 8014618:	4620      	mov	r0, r4
 801461a:	b002      	add	sp, #8
 801461c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014620:	240b      	movs	r4, #11
 8014622:	4620      	mov	r0, r4
 8014624:	b002      	add	sp, #8
 8014626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801462a:	bf00      	nop

0801462c <rcutils_string_map_getn>:
 801462c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014630:	b300      	cbz	r0, 8014674 <rcutils_string_map_getn+0x48>
 8014632:	6807      	ldr	r7, [r0, #0]
 8014634:	b1ff      	cbz	r7, 8014676 <rcutils_string_map_getn+0x4a>
 8014636:	4688      	mov	r8, r1
 8014638:	b1e1      	cbz	r1, 8014674 <rcutils_string_map_getn+0x48>
 801463a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801463e:	683e      	ldr	r6, [r7, #0]
 8014640:	f1ba 0f00 	cmp.w	sl, #0
 8014644:	d016      	beq.n	8014674 <rcutils_string_map_getn+0x48>
 8014646:	4691      	mov	r9, r2
 8014648:	3e04      	subs	r6, #4
 801464a:	2400      	movs	r4, #0
 801464c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014654:	4628      	mov	r0, r5
 8014656:	3401      	adds	r4, #1
 8014658:	b155      	cbz	r5, 8014670 <rcutils_string_map_getn+0x44>
 801465a:	f7eb fdc3 	bl	80001e4 <strlen>
 801465e:	4548      	cmp	r0, r9
 8014660:	4602      	mov	r2, r0
 8014662:	4629      	mov	r1, r5
 8014664:	bf38      	it	cc
 8014666:	464a      	movcc	r2, r9
 8014668:	4640      	mov	r0, r8
 801466a:	f003 fd8e 	bl	801818a <strncmp>
 801466e:	b128      	cbz	r0, 801467c <rcutils_string_map_getn+0x50>
 8014670:	45a2      	cmp	sl, r4
 8014672:	d1eb      	bne.n	801464c <rcutils_string_map_getn+0x20>
 8014674:	2700      	movs	r7, #0
 8014676:	4638      	mov	r0, r7
 8014678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f853 700b 	ldr.w	r7, [r3, fp]
 8014682:	4638      	mov	r0, r7
 8014684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014688 <rmw_get_zero_initialized_context>:
 8014688:	b510      	push	{r4, lr}
 801468a:	4604      	mov	r4, r0
 801468c:	3010      	adds	r0, #16
 801468e:	f000 f80b 	bl	80146a8 <rmw_get_zero_initialized_init_options>
 8014692:	2300      	movs	r3, #0
 8014694:	2000      	movs	r0, #0
 8014696:	2100      	movs	r1, #0
 8014698:	e9c4 0100 	strd	r0, r1, [r4]
 801469c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80146a0:	60a3      	str	r3, [r4, #8]
 80146a2:	4620      	mov	r0, r4
 80146a4:	bd10      	pop	{r4, pc}
 80146a6:	bf00      	nop

080146a8 <rmw_get_zero_initialized_init_options>:
 80146a8:	b510      	push	{r4, lr}
 80146aa:	2238      	movs	r2, #56	; 0x38
 80146ac:	4604      	mov	r4, r0
 80146ae:	2100      	movs	r1, #0
 80146b0:	f003 fd56 	bl	8018160 <memset>
 80146b4:	f104 0010 	add.w	r0, r4, #16
 80146b8:	f000 f806 	bl	80146c8 <rmw_get_default_security_options>
 80146bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146c0:	60e3      	str	r3, [r4, #12]
 80146c2:	4620      	mov	r0, r4
 80146c4:	bd10      	pop	{r4, pc}
 80146c6:	bf00      	nop

080146c8 <rmw_get_default_security_options>:
 80146c8:	2200      	movs	r2, #0
 80146ca:	7002      	strb	r2, [r0, #0]
 80146cc:	6042      	str	r2, [r0, #4]
 80146ce:	4770      	bx	lr

080146d0 <rmw_subscription_content_filter_options_fini>:
 80146d0:	b1b0      	cbz	r0, 8014700 <rmw_subscription_content_filter_options_fini+0x30>
 80146d2:	b538      	push	{r3, r4, r5, lr}
 80146d4:	4604      	mov	r4, r0
 80146d6:	4608      	mov	r0, r1
 80146d8:	460d      	mov	r5, r1
 80146da:	f7fa f939 	bl	800e950 <rcutils_allocator_is_valid>
 80146de:	b168      	cbz	r0, 80146fc <rmw_subscription_content_filter_options_fini+0x2c>
 80146e0:	6820      	ldr	r0, [r4, #0]
 80146e2:	b120      	cbz	r0, 80146ee <rmw_subscription_content_filter_options_fini+0x1e>
 80146e4:	686b      	ldr	r3, [r5, #4]
 80146e6:	6929      	ldr	r1, [r5, #16]
 80146e8:	4798      	blx	r3
 80146ea:	2300      	movs	r3, #0
 80146ec:	6023      	str	r3, [r4, #0]
 80146ee:	1d20      	adds	r0, r4, #4
 80146f0:	f003 f830 	bl	8017754 <rcutils_string_array_fini>
 80146f4:	3800      	subs	r0, #0
 80146f6:	bf18      	it	ne
 80146f8:	2001      	movne	r0, #1
 80146fa:	bd38      	pop	{r3, r4, r5, pc}
 80146fc:	200b      	movs	r0, #11
 80146fe:	bd38      	pop	{r3, r4, r5, pc}
 8014700:	200b      	movs	r0, #11
 8014702:	4770      	bx	lr

08014704 <rmw_get_default_subscription_options>:
 8014704:	2200      	movs	r2, #0
 8014706:	e9c0 2200 	strd	r2, r2, [r0]
 801470a:	6082      	str	r2, [r0, #8]
 801470c:	4770      	bx	lr
 801470e:	bf00      	nop

08014710 <rmw_validate_full_topic_name>:
 8014710:	2800      	cmp	r0, #0
 8014712:	d057      	beq.n	80147c4 <rmw_validate_full_topic_name+0xb4>
 8014714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014718:	460d      	mov	r5, r1
 801471a:	2900      	cmp	r1, #0
 801471c:	d054      	beq.n	80147c8 <rmw_validate_full_topic_name+0xb8>
 801471e:	4616      	mov	r6, r2
 8014720:	4604      	mov	r4, r0
 8014722:	f7eb fd5f 	bl	80001e4 <strlen>
 8014726:	b148      	cbz	r0, 801473c <rmw_validate_full_topic_name+0x2c>
 8014728:	7823      	ldrb	r3, [r4, #0]
 801472a:	2b2f      	cmp	r3, #47	; 0x2f
 801472c:	d00d      	beq.n	801474a <rmw_validate_full_topic_name+0x3a>
 801472e:	2302      	movs	r3, #2
 8014730:	602b      	str	r3, [r5, #0]
 8014732:	b13e      	cbz	r6, 8014744 <rmw_validate_full_topic_name+0x34>
 8014734:	2000      	movs	r0, #0
 8014736:	6030      	str	r0, [r6, #0]
 8014738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801473c:	2301      	movs	r3, #1
 801473e:	602b      	str	r3, [r5, #0]
 8014740:	2e00      	cmp	r6, #0
 8014742:	d1f7      	bne.n	8014734 <rmw_validate_full_topic_name+0x24>
 8014744:	2000      	movs	r0, #0
 8014746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801474a:	1e43      	subs	r3, r0, #1
 801474c:	5ce2      	ldrb	r2, [r4, r3]
 801474e:	2a2f      	cmp	r2, #47	; 0x2f
 8014750:	d03c      	beq.n	80147cc <rmw_validate_full_topic_name+0xbc>
 8014752:	1e63      	subs	r3, r4, #1
 8014754:	eb03 0800 	add.w	r8, r3, r0
 8014758:	f1c4 0e01 	rsb	lr, r4, #1
 801475c:	eb0e 0703 	add.w	r7, lr, r3
 8014760:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014764:	f021 0220 	bic.w	r2, r1, #32
 8014768:	3a41      	subs	r2, #65	; 0x41
 801476a:	2a19      	cmp	r2, #25
 801476c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8014770:	d90b      	bls.n	801478a <rmw_validate_full_topic_name+0x7a>
 8014772:	295f      	cmp	r1, #95	; 0x5f
 8014774:	d009      	beq.n	801478a <rmw_validate_full_topic_name+0x7a>
 8014776:	f1bc 0f0a 	cmp.w	ip, #10
 801477a:	d906      	bls.n	801478a <rmw_validate_full_topic_name+0x7a>
 801477c:	2304      	movs	r3, #4
 801477e:	602b      	str	r3, [r5, #0]
 8014780:	2e00      	cmp	r6, #0
 8014782:	d0df      	beq.n	8014744 <rmw_validate_full_topic_name+0x34>
 8014784:	6037      	str	r7, [r6, #0]
 8014786:	2000      	movs	r0, #0
 8014788:	e7d6      	b.n	8014738 <rmw_validate_full_topic_name+0x28>
 801478a:	4543      	cmp	r3, r8
 801478c:	d1e6      	bne.n	801475c <rmw_validate_full_topic_name+0x4c>
 801478e:	4f1a      	ldr	r7, [pc, #104]	; (80147f8 <rmw_validate_full_topic_name+0xe8>)
 8014790:	2301      	movs	r3, #1
 8014792:	e004      	b.n	801479e <rmw_validate_full_topic_name+0x8e>
 8014794:	4298      	cmp	r0, r3
 8014796:	f104 0401 	add.w	r4, r4, #1
 801479a:	d91c      	bls.n	80147d6 <rmw_validate_full_topic_name+0xc6>
 801479c:	4613      	mov	r3, r2
 801479e:	4298      	cmp	r0, r3
 80147a0:	f103 0201 	add.w	r2, r3, #1
 80147a4:	d0f6      	beq.n	8014794 <rmw_validate_full_topic_name+0x84>
 80147a6:	7821      	ldrb	r1, [r4, #0]
 80147a8:	292f      	cmp	r1, #47	; 0x2f
 80147aa:	d1f3      	bne.n	8014794 <rmw_validate_full_topic_name+0x84>
 80147ac:	7861      	ldrb	r1, [r4, #1]
 80147ae:	292f      	cmp	r1, #47	; 0x2f
 80147b0:	d01c      	beq.n	80147ec <rmw_validate_full_topic_name+0xdc>
 80147b2:	5dc9      	ldrb	r1, [r1, r7]
 80147b4:	0749      	lsls	r1, r1, #29
 80147b6:	d5ed      	bpl.n	8014794 <rmw_validate_full_topic_name+0x84>
 80147b8:	2206      	movs	r2, #6
 80147ba:	602a      	str	r2, [r5, #0]
 80147bc:	2e00      	cmp	r6, #0
 80147be:	d0c1      	beq.n	8014744 <rmw_validate_full_topic_name+0x34>
 80147c0:	6033      	str	r3, [r6, #0]
 80147c2:	e7bf      	b.n	8014744 <rmw_validate_full_topic_name+0x34>
 80147c4:	200b      	movs	r0, #11
 80147c6:	4770      	bx	lr
 80147c8:	200b      	movs	r0, #11
 80147ca:	e7b5      	b.n	8014738 <rmw_validate_full_topic_name+0x28>
 80147cc:	2203      	movs	r2, #3
 80147ce:	602a      	str	r2, [r5, #0]
 80147d0:	2e00      	cmp	r6, #0
 80147d2:	d1f5      	bne.n	80147c0 <rmw_validate_full_topic_name+0xb0>
 80147d4:	e7b6      	b.n	8014744 <rmw_validate_full_topic_name+0x34>
 80147d6:	28f7      	cmp	r0, #247	; 0xf7
 80147d8:	d802      	bhi.n	80147e0 <rmw_validate_full_topic_name+0xd0>
 80147da:	2000      	movs	r0, #0
 80147dc:	6028      	str	r0, [r5, #0]
 80147de:	e7ab      	b.n	8014738 <rmw_validate_full_topic_name+0x28>
 80147e0:	2307      	movs	r3, #7
 80147e2:	602b      	str	r3, [r5, #0]
 80147e4:	2e00      	cmp	r6, #0
 80147e6:	d0ad      	beq.n	8014744 <rmw_validate_full_topic_name+0x34>
 80147e8:	23f6      	movs	r3, #246	; 0xf6
 80147ea:	e7e9      	b.n	80147c0 <rmw_validate_full_topic_name+0xb0>
 80147ec:	2205      	movs	r2, #5
 80147ee:	602a      	str	r2, [r5, #0]
 80147f0:	2e00      	cmp	r6, #0
 80147f2:	d1e5      	bne.n	80147c0 <rmw_validate_full_topic_name+0xb0>
 80147f4:	e7a6      	b.n	8014744 <rmw_validate_full_topic_name+0x34>
 80147f6:	bf00      	nop
 80147f8:	08019cd4 	.word	0x08019cd4

080147fc <rmw_validate_namespace_with_size>:
 80147fc:	b340      	cbz	r0, 8014850 <rmw_validate_namespace_with_size+0x54>
 80147fe:	b570      	push	{r4, r5, r6, lr}
 8014800:	4614      	mov	r4, r2
 8014802:	b0c2      	sub	sp, #264	; 0x108
 8014804:	b332      	cbz	r2, 8014854 <rmw_validate_namespace_with_size+0x58>
 8014806:	2901      	cmp	r1, #1
 8014808:	460d      	mov	r5, r1
 801480a:	461e      	mov	r6, r3
 801480c:	d102      	bne.n	8014814 <rmw_validate_namespace_with_size+0x18>
 801480e:	7803      	ldrb	r3, [r0, #0]
 8014810:	2b2f      	cmp	r3, #47	; 0x2f
 8014812:	d012      	beq.n	801483a <rmw_validate_namespace_with_size+0x3e>
 8014814:	aa01      	add	r2, sp, #4
 8014816:	4669      	mov	r1, sp
 8014818:	f7ff ff7a 	bl	8014710 <rmw_validate_full_topic_name>
 801481c:	b978      	cbnz	r0, 801483e <rmw_validate_namespace_with_size+0x42>
 801481e:	9b00      	ldr	r3, [sp, #0]
 8014820:	b14b      	cbz	r3, 8014836 <rmw_validate_namespace_with_size+0x3a>
 8014822:	2b07      	cmp	r3, #7
 8014824:	d007      	beq.n	8014836 <rmw_validate_namespace_with_size+0x3a>
 8014826:	1e5a      	subs	r2, r3, #1
 8014828:	2a05      	cmp	r2, #5
 801482a:	d82b      	bhi.n	8014884 <rmw_validate_namespace_with_size+0x88>
 801482c:	e8df f002 	tbb	[pc, r2]
 8014830:	1e212427 	.word	0x1e212427
 8014834:	141b      	.short	0x141b
 8014836:	2df5      	cmp	r5, #245	; 0xf5
 8014838:	d803      	bhi.n	8014842 <rmw_validate_namespace_with_size+0x46>
 801483a:	2000      	movs	r0, #0
 801483c:	6020      	str	r0, [r4, #0]
 801483e:	b042      	add	sp, #264	; 0x108
 8014840:	bd70      	pop	{r4, r5, r6, pc}
 8014842:	2307      	movs	r3, #7
 8014844:	6023      	str	r3, [r4, #0]
 8014846:	2e00      	cmp	r6, #0
 8014848:	d0f9      	beq.n	801483e <rmw_validate_namespace_with_size+0x42>
 801484a:	23f4      	movs	r3, #244	; 0xf4
 801484c:	6033      	str	r3, [r6, #0]
 801484e:	e7f6      	b.n	801483e <rmw_validate_namespace_with_size+0x42>
 8014850:	200b      	movs	r0, #11
 8014852:	4770      	bx	lr
 8014854:	200b      	movs	r0, #11
 8014856:	e7f2      	b.n	801483e <rmw_validate_namespace_with_size+0x42>
 8014858:	2306      	movs	r3, #6
 801485a:	6023      	str	r3, [r4, #0]
 801485c:	2e00      	cmp	r6, #0
 801485e:	d0ee      	beq.n	801483e <rmw_validate_namespace_with_size+0x42>
 8014860:	9b01      	ldr	r3, [sp, #4]
 8014862:	6033      	str	r3, [r6, #0]
 8014864:	e7eb      	b.n	801483e <rmw_validate_namespace_with_size+0x42>
 8014866:	2305      	movs	r3, #5
 8014868:	6023      	str	r3, [r4, #0]
 801486a:	e7f7      	b.n	801485c <rmw_validate_namespace_with_size+0x60>
 801486c:	2304      	movs	r3, #4
 801486e:	6023      	str	r3, [r4, #0]
 8014870:	e7f4      	b.n	801485c <rmw_validate_namespace_with_size+0x60>
 8014872:	2303      	movs	r3, #3
 8014874:	6023      	str	r3, [r4, #0]
 8014876:	e7f1      	b.n	801485c <rmw_validate_namespace_with_size+0x60>
 8014878:	2302      	movs	r3, #2
 801487a:	6023      	str	r3, [r4, #0]
 801487c:	e7ee      	b.n	801485c <rmw_validate_namespace_with_size+0x60>
 801487e:	2301      	movs	r3, #1
 8014880:	6023      	str	r3, [r4, #0]
 8014882:	e7eb      	b.n	801485c <rmw_validate_namespace_with_size+0x60>
 8014884:	4a03      	ldr	r2, [pc, #12]	; (8014894 <rmw_validate_namespace_with_size+0x98>)
 8014886:	f44f 7180 	mov.w	r1, #256	; 0x100
 801488a:	a802      	add	r0, sp, #8
 801488c:	f7ff fd66 	bl	801435c <rcutils_snprintf>
 8014890:	2001      	movs	r0, #1
 8014892:	e7d4      	b.n	801483e <rmw_validate_namespace_with_size+0x42>
 8014894:	080196dc 	.word	0x080196dc

08014898 <rmw_validate_namespace>:
 8014898:	b168      	cbz	r0, 80148b6 <rmw_validate_namespace+0x1e>
 801489a:	b570      	push	{r4, r5, r6, lr}
 801489c:	460d      	mov	r5, r1
 801489e:	4616      	mov	r6, r2
 80148a0:	4604      	mov	r4, r0
 80148a2:	f7eb fc9f 	bl	80001e4 <strlen>
 80148a6:	4633      	mov	r3, r6
 80148a8:	4601      	mov	r1, r0
 80148aa:	462a      	mov	r2, r5
 80148ac:	4620      	mov	r0, r4
 80148ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148b2:	f7ff bfa3 	b.w	80147fc <rmw_validate_namespace_with_size>
 80148b6:	200b      	movs	r0, #11
 80148b8:	4770      	bx	lr
 80148ba:	bf00      	nop

080148bc <rmw_namespace_validation_result_string>:
 80148bc:	2807      	cmp	r0, #7
 80148be:	bf9a      	itte	ls
 80148c0:	4b02      	ldrls	r3, [pc, #8]	; (80148cc <rmw_namespace_validation_result_string+0x10>)
 80148c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80148c6:	4802      	ldrhi	r0, [pc, #8]	; (80148d0 <rmw_namespace_validation_result_string+0x14>)
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	080198d4 	.word	0x080198d4
 80148d0:	0801972c 	.word	0x0801972c

080148d4 <rmw_validate_node_name>:
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d03b      	beq.n	8014950 <rmw_validate_node_name+0x7c>
 80148d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148dc:	460d      	mov	r5, r1
 80148de:	2900      	cmp	r1, #0
 80148e0:	d038      	beq.n	8014954 <rmw_validate_node_name+0x80>
 80148e2:	4616      	mov	r6, r2
 80148e4:	4604      	mov	r4, r0
 80148e6:	f7eb fc7d 	bl	80001e4 <strlen>
 80148ea:	b1e0      	cbz	r0, 8014926 <rmw_validate_node_name+0x52>
 80148ec:	1e63      	subs	r3, r4, #1
 80148ee:	eb03 0800 	add.w	r8, r3, r0
 80148f2:	f1c4 0101 	rsb	r1, r4, #1
 80148f6:	18cf      	adds	r7, r1, r3
 80148f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80148fc:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8014900:	f02e 0c20 	bic.w	ip, lr, #32
 8014904:	2a09      	cmp	r2, #9
 8014906:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801490a:	d914      	bls.n	8014936 <rmw_validate_node_name+0x62>
 801490c:	f1bc 0f19 	cmp.w	ip, #25
 8014910:	d911      	bls.n	8014936 <rmw_validate_node_name+0x62>
 8014912:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8014916:	d00e      	beq.n	8014936 <rmw_validate_node_name+0x62>
 8014918:	2302      	movs	r3, #2
 801491a:	602b      	str	r3, [r5, #0]
 801491c:	b106      	cbz	r6, 8014920 <rmw_validate_node_name+0x4c>
 801491e:	6037      	str	r7, [r6, #0]
 8014920:	2000      	movs	r0, #0
 8014922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014926:	2301      	movs	r3, #1
 8014928:	602b      	str	r3, [r5, #0]
 801492a:	2e00      	cmp	r6, #0
 801492c:	d0f8      	beq.n	8014920 <rmw_validate_node_name+0x4c>
 801492e:	2000      	movs	r0, #0
 8014930:	6030      	str	r0, [r6, #0]
 8014932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014936:	4543      	cmp	r3, r8
 8014938:	d1dd      	bne.n	80148f6 <rmw_validate_node_name+0x22>
 801493a:	7822      	ldrb	r2, [r4, #0]
 801493c:	4b0d      	ldr	r3, [pc, #52]	; (8014974 <rmw_validate_node_name+0xa0>)
 801493e:	5cd3      	ldrb	r3, [r2, r3]
 8014940:	f013 0304 	ands.w	r3, r3, #4
 8014944:	d110      	bne.n	8014968 <rmw_validate_node_name+0x94>
 8014946:	28ff      	cmp	r0, #255	; 0xff
 8014948:	d806      	bhi.n	8014958 <rmw_validate_node_name+0x84>
 801494a:	602b      	str	r3, [r5, #0]
 801494c:	4618      	mov	r0, r3
 801494e:	e7e8      	b.n	8014922 <rmw_validate_node_name+0x4e>
 8014950:	200b      	movs	r0, #11
 8014952:	4770      	bx	lr
 8014954:	200b      	movs	r0, #11
 8014956:	e7e4      	b.n	8014922 <rmw_validate_node_name+0x4e>
 8014958:	2204      	movs	r2, #4
 801495a:	602a      	str	r2, [r5, #0]
 801495c:	2e00      	cmp	r6, #0
 801495e:	d0df      	beq.n	8014920 <rmw_validate_node_name+0x4c>
 8014960:	22fe      	movs	r2, #254	; 0xfe
 8014962:	6032      	str	r2, [r6, #0]
 8014964:	4618      	mov	r0, r3
 8014966:	e7dc      	b.n	8014922 <rmw_validate_node_name+0x4e>
 8014968:	2303      	movs	r3, #3
 801496a:	602b      	str	r3, [r5, #0]
 801496c:	2e00      	cmp	r6, #0
 801496e:	d1de      	bne.n	801492e <rmw_validate_node_name+0x5a>
 8014970:	e7d6      	b.n	8014920 <rmw_validate_node_name+0x4c>
 8014972:	bf00      	nop
 8014974:	08019cd4 	.word	0x08019cd4

08014978 <rmw_node_name_validation_result_string>:
 8014978:	2804      	cmp	r0, #4
 801497a:	bf9a      	itte	ls
 801497c:	4b02      	ldrls	r3, [pc, #8]	; (8014988 <rmw_node_name_validation_result_string+0x10>)
 801497e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014982:	4802      	ldrhi	r0, [pc, #8]	; (801498c <rmw_node_name_validation_result_string+0x14>)
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	080199e0 	.word	0x080199e0
 801498c:	080198f4 	.word	0x080198f4

08014990 <get_memory>:
 8014990:	4603      	mov	r3, r0
 8014992:	6840      	ldr	r0, [r0, #4]
 8014994:	b158      	cbz	r0, 80149ae <get_memory+0x1e>
 8014996:	6842      	ldr	r2, [r0, #4]
 8014998:	605a      	str	r2, [r3, #4]
 801499a:	b10a      	cbz	r2, 80149a0 <get_memory+0x10>
 801499c:	2100      	movs	r1, #0
 801499e:	6011      	str	r1, [r2, #0]
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	6042      	str	r2, [r0, #4]
 80149a4:	b102      	cbz	r2, 80149a8 <get_memory+0x18>
 80149a6:	6010      	str	r0, [r2, #0]
 80149a8:	2200      	movs	r2, #0
 80149aa:	6002      	str	r2, [r0, #0]
 80149ac:	6018      	str	r0, [r3, #0]
 80149ae:	4770      	bx	lr

080149b0 <put_memory>:
 80149b0:	680b      	ldr	r3, [r1, #0]
 80149b2:	b10b      	cbz	r3, 80149b8 <put_memory+0x8>
 80149b4:	684a      	ldr	r2, [r1, #4]
 80149b6:	605a      	str	r2, [r3, #4]
 80149b8:	684a      	ldr	r2, [r1, #4]
 80149ba:	b102      	cbz	r2, 80149be <put_memory+0xe>
 80149bc:	6013      	str	r3, [r2, #0]
 80149be:	6803      	ldr	r3, [r0, #0]
 80149c0:	428b      	cmp	r3, r1
 80149c2:	6843      	ldr	r3, [r0, #4]
 80149c4:	bf08      	it	eq
 80149c6:	6002      	streq	r2, [r0, #0]
 80149c8:	604b      	str	r3, [r1, #4]
 80149ca:	b103      	cbz	r3, 80149ce <put_memory+0x1e>
 80149cc:	6019      	str	r1, [r3, #0]
 80149ce:	2300      	movs	r3, #0
 80149d0:	600b      	str	r3, [r1, #0]
 80149d2:	6041      	str	r1, [r0, #4]
 80149d4:	4770      	bx	lr
 80149d6:	bf00      	nop

080149d8 <rmw_destroy_client>:
 80149d8:	b570      	push	{r4, r5, r6, lr}
 80149da:	b128      	cbz	r0, 80149e8 <rmw_destroy_client+0x10>
 80149dc:	4604      	mov	r4, r0
 80149de:	6800      	ldr	r0, [r0, #0]
 80149e0:	460d      	mov	r5, r1
 80149e2:	f7fa fcb5 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 80149e6:	b910      	cbnz	r0, 80149ee <rmw_destroy_client+0x16>
 80149e8:	2401      	movs	r4, #1
 80149ea:	4620      	mov	r0, r4
 80149ec:	bd70      	pop	{r4, r5, r6, pc}
 80149ee:	6863      	ldr	r3, [r4, #4]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d0f9      	beq.n	80149e8 <rmw_destroy_client+0x10>
 80149f4:	2d00      	cmp	r5, #0
 80149f6:	d0f7      	beq.n	80149e8 <rmw_destroy_client+0x10>
 80149f8:	6828      	ldr	r0, [r5, #0]
 80149fa:	f7fa fca9 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d0f2      	beq.n	80149e8 <rmw_destroy_client+0x10>
 8014a02:	686e      	ldr	r6, [r5, #4]
 8014a04:	2e00      	cmp	r6, #0
 8014a06:	d0ef      	beq.n	80149e8 <rmw_destroy_client+0x10>
 8014a08:	6864      	ldr	r4, [r4, #4]
 8014a0a:	6932      	ldr	r2, [r6, #16]
 8014a0c:	6920      	ldr	r0, [r4, #16]
 8014a0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014a12:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014a16:	6819      	ldr	r1, [r3, #0]
 8014a18:	f001 fdde 	bl	80165d8 <uxr_buffer_cancel_data>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	6920      	ldr	r0, [r4, #16]
 8014a20:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014a24:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014a28:	f7fa fc12 	bl	800f250 <run_xrce_session>
 8014a2c:	6920      	ldr	r0, [r4, #16]
 8014a2e:	6932      	ldr	r2, [r6, #16]
 8014a30:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014a34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014a38:	6819      	ldr	r1, [r3, #0]
 8014a3a:	f7fb fd45 	bl	80104c8 <uxr_buffer_delete_entity>
 8014a3e:	4602      	mov	r2, r0
 8014a40:	6920      	ldr	r0, [r4, #16]
 8014a42:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014a46:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014a4a:	f7fa fc01 	bl	800f250 <run_xrce_session>
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	4628      	mov	r0, r5
 8014a52:	bf14      	ite	ne
 8014a54:	2400      	movne	r4, #0
 8014a56:	2402      	moveq	r4, #2
 8014a58:	f7fa fb88 	bl	800f16c <rmw_uxrce_fini_client_memory>
 8014a5c:	e7c5      	b.n	80149ea <rmw_destroy_client+0x12>
 8014a5e:	bf00      	nop

08014a60 <rmw_get_implementation_identifier>:
 8014a60:	4b01      	ldr	r3, [pc, #4]	; (8014a68 <rmw_get_implementation_identifier+0x8>)
 8014a62:	6818      	ldr	r0, [r3, #0]
 8014a64:	4770      	bx	lr
 8014a66:	bf00      	nop
 8014a68:	08019a0c 	.word	0x08019a0c

08014a6c <rmw_init_options_init>:
 8014a6c:	b084      	sub	sp, #16
 8014a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a70:	b083      	sub	sp, #12
 8014a72:	ad09      	add	r5, sp, #36	; 0x24
 8014a74:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014a78:	b130      	cbz	r0, 8014a88 <rmw_init_options_init+0x1c>
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f7f9 ff67 	bl	800e950 <rcutils_allocator_is_valid>
 8014a82:	b108      	cbz	r0, 8014a88 <rmw_init_options_init+0x1c>
 8014a84:	68a6      	ldr	r6, [r4, #8]
 8014a86:	b12e      	cbz	r6, 8014a94 <rmw_init_options_init+0x28>
 8014a88:	200b      	movs	r0, #11
 8014a8a:	b003      	add	sp, #12
 8014a8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a90:	b004      	add	sp, #16
 8014a92:	4770      	bx	lr
 8014a94:	2200      	movs	r2, #0
 8014a96:	2300      	movs	r3, #0
 8014a98:	e9c4 2300 	strd	r2, r3, [r4]
 8014a9c:	4b22      	ldr	r3, [pc, #136]	; (8014b28 <rmw_init_options_init+0xbc>)
 8014a9e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8014b38 <rmw_init_options_init+0xcc>
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	60a3      	str	r3, [r4, #8]
 8014aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014aa8:	f104 0c20 	add.w	ip, r4, #32
 8014aac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ab0:	466f      	mov	r7, sp
 8014ab2:	682b      	ldr	r3, [r5, #0]
 8014ab4:	f8cc 3000 	str.w	r3, [ip]
 8014ab8:	4638      	mov	r0, r7
 8014aba:	f8c4 e01c 	str.w	lr, [r4, #28]
 8014abe:	60e6      	str	r6, [r4, #12]
 8014ac0:	f7ff fe02 	bl	80146c8 <rmw_get_default_security_options>
 8014ac4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014ac8:	f104 0310 	add.w	r3, r4, #16
 8014acc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014ad0:	2203      	movs	r2, #3
 8014ad2:	4816      	ldr	r0, [pc, #88]	; (8014b2c <rmw_init_options_init+0xc0>)
 8014ad4:	4916      	ldr	r1, [pc, #88]	; (8014b30 <rmw_init_options_init+0xc4>)
 8014ad6:	7626      	strb	r6, [r4, #24]
 8014ad8:	f7fa fa88 	bl	800efec <rmw_uxrce_init_init_options_impl_memory>
 8014adc:	4813      	ldr	r0, [pc, #76]	; (8014b2c <rmw_init_options_init+0xc0>)
 8014ade:	f7ff ff57 	bl	8014990 <get_memory>
 8014ae2:	b1f0      	cbz	r0, 8014b22 <rmw_init_options_init+0xb6>
 8014ae4:	4a13      	ldr	r2, [pc, #76]	; (8014b34 <rmw_init_options_init+0xc8>)
 8014ae6:	6883      	ldr	r3, [r0, #8]
 8014ae8:	6851      	ldr	r1, [r2, #4]
 8014aea:	7810      	ldrb	r0, [r2, #0]
 8014aec:	6363      	str	r3, [r4, #52]	; 0x34
 8014aee:	7418      	strb	r0, [r3, #16]
 8014af0:	6159      	str	r1, [r3, #20]
 8014af2:	68d1      	ldr	r1, [r2, #12]
 8014af4:	61d9      	str	r1, [r3, #28]
 8014af6:	6911      	ldr	r1, [r2, #16]
 8014af8:	6219      	str	r1, [r3, #32]
 8014afa:	6951      	ldr	r1, [r2, #20]
 8014afc:	6892      	ldr	r2, [r2, #8]
 8014afe:	619a      	str	r2, [r3, #24]
 8014b00:	6259      	str	r1, [r3, #36]	; 0x24
 8014b02:	f7fd f903 	bl	8011d0c <uxr_nanos>
 8014b06:	f003 f87f 	bl	8017c08 <srand>
 8014b0a:	f003 f8ab 	bl	8017c64 <rand>
 8014b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b10:	6298      	str	r0, [r3, #40]	; 0x28
 8014b12:	2800      	cmp	r0, #0
 8014b14:	d0f9      	beq.n	8014b0a <rmw_init_options_init+0x9e>
 8014b16:	2000      	movs	r0, #0
 8014b18:	b003      	add	sp, #12
 8014b1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b1e:	b004      	add	sp, #16
 8014b20:	4770      	bx	lr
 8014b22:	2001      	movs	r0, #1
 8014b24:	e7b1      	b.n	8014a8a <rmw_init_options_init+0x1e>
 8014b26:	bf00      	nop
 8014b28:	08019a0c 	.word	0x08019a0c
 8014b2c:	2000e1ec 	.word	0x2000e1ec
 8014b30:	20009a88 	.word	0x20009a88
 8014b34:	20009914 	.word	0x20009914
 8014b38:	08019524 	.word	0x08019524

08014b3c <rmw_init_options_copy>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	b158      	cbz	r0, 8014b58 <rmw_init_options_copy+0x1c>
 8014b40:	460d      	mov	r5, r1
 8014b42:	b149      	cbz	r1, 8014b58 <rmw_init_options_copy+0x1c>
 8014b44:	4604      	mov	r4, r0
 8014b46:	6880      	ldr	r0, [r0, #8]
 8014b48:	b120      	cbz	r0, 8014b54 <rmw_init_options_copy+0x18>
 8014b4a:	4b1e      	ldr	r3, [pc, #120]	; (8014bc4 <rmw_init_options_copy+0x88>)
 8014b4c:	6819      	ldr	r1, [r3, #0]
 8014b4e:	f7eb fb3f 	bl	80001d0 <strcmp>
 8014b52:	bb90      	cbnz	r0, 8014bba <rmw_init_options_copy+0x7e>
 8014b54:	68ab      	ldr	r3, [r5, #8]
 8014b56:	b113      	cbz	r3, 8014b5e <rmw_init_options_copy+0x22>
 8014b58:	250b      	movs	r5, #11
 8014b5a:	4628      	mov	r0, r5
 8014b5c:	bd70      	pop	{r4, r5, r6, pc}
 8014b5e:	4623      	mov	r3, r4
 8014b60:	462a      	mov	r2, r5
 8014b62:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014b66:	f8d3 c000 	ldr.w	ip, [r3]
 8014b6a:	6858      	ldr	r0, [r3, #4]
 8014b6c:	6899      	ldr	r1, [r3, #8]
 8014b6e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8014b72:	f8c2 e00c 	str.w	lr, [r2, #12]
 8014b76:	3310      	adds	r3, #16
 8014b78:	42b3      	cmp	r3, r6
 8014b7a:	f8c2 c000 	str.w	ip, [r2]
 8014b7e:	6050      	str	r0, [r2, #4]
 8014b80:	6091      	str	r1, [r2, #8]
 8014b82:	f102 0210 	add.w	r2, r2, #16
 8014b86:	d1ee      	bne.n	8014b66 <rmw_init_options_copy+0x2a>
 8014b88:	6819      	ldr	r1, [r3, #0]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	480e      	ldr	r0, [pc, #56]	; (8014bc8 <rmw_init_options_copy+0x8c>)
 8014b8e:	6053      	str	r3, [r2, #4]
 8014b90:	6011      	str	r1, [r2, #0]
 8014b92:	f7ff fefd 	bl	8014990 <get_memory>
 8014b96:	b198      	cbz	r0, 8014bc0 <rmw_init_options_copy+0x84>
 8014b98:	6883      	ldr	r3, [r0, #8]
 8014b9a:	636b      	str	r3, [r5, #52]	; 0x34
 8014b9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014b9e:	f102 0c10 	add.w	ip, r2, #16
 8014ba2:	f103 0410 	add.w	r4, r3, #16
 8014ba6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bac:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014bb0:	2500      	movs	r5, #0
 8014bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	bd70      	pop	{r4, r5, r6, pc}
 8014bba:	250c      	movs	r5, #12
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	bd70      	pop	{r4, r5, r6, pc}
 8014bc0:	2501      	movs	r5, #1
 8014bc2:	e7ca      	b.n	8014b5a <rmw_init_options_copy+0x1e>
 8014bc4:	08019a0c 	.word	0x08019a0c
 8014bc8:	2000e1ec 	.word	0x2000e1ec

08014bcc <rmw_init_options_fini>:
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	d03d      	beq.n	8014c4c <rmw_init_options_fini+0x80>
 8014bd0:	b510      	push	{r4, lr}
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	b08e      	sub	sp, #56	; 0x38
 8014bd6:	3020      	adds	r0, #32
 8014bd8:	f7f9 feba 	bl	800e950 <rcutils_allocator_is_valid>
 8014bdc:	b360      	cbz	r0, 8014c38 <rmw_init_options_fini+0x6c>
 8014bde:	68a0      	ldr	r0, [r4, #8]
 8014be0:	b120      	cbz	r0, 8014bec <rmw_init_options_fini+0x20>
 8014be2:	4b1c      	ldr	r3, [pc, #112]	; (8014c54 <rmw_init_options_fini+0x88>)
 8014be4:	6819      	ldr	r1, [r3, #0]
 8014be6:	f7eb faf3 	bl	80001d0 <strcmp>
 8014bea:	bb68      	cbnz	r0, 8014c48 <rmw_init_options_fini+0x7c>
 8014bec:	4b1a      	ldr	r3, [pc, #104]	; (8014c58 <rmw_init_options_fini+0x8c>)
 8014bee:	6819      	ldr	r1, [r3, #0]
 8014bf0:	b331      	cbz	r1, 8014c40 <rmw_init_options_fini+0x74>
 8014bf2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014bf4:	e001      	b.n	8014bfa <rmw_init_options_fini+0x2e>
 8014bf6:	6849      	ldr	r1, [r1, #4]
 8014bf8:	b311      	cbz	r1, 8014c40 <rmw_init_options_fini+0x74>
 8014bfa:	688b      	ldr	r3, [r1, #8]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d1fa      	bne.n	8014bf6 <rmw_init_options_fini+0x2a>
 8014c00:	4815      	ldr	r0, [pc, #84]	; (8014c58 <rmw_init_options_fini+0x8c>)
 8014c02:	f7ff fed5 	bl	80149b0 <put_memory>
 8014c06:	4668      	mov	r0, sp
 8014c08:	f7ff fd4e 	bl	80146a8 <rmw_get_zero_initialized_init_options>
 8014c0c:	46ee      	mov	lr, sp
 8014c0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c12:	46a4      	mov	ip, r4
 8014c14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014c2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014c30:	2300      	movs	r3, #0
 8014c32:	4618      	mov	r0, r3
 8014c34:	b00e      	add	sp, #56	; 0x38
 8014c36:	bd10      	pop	{r4, pc}
 8014c38:	230b      	movs	r3, #11
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	b00e      	add	sp, #56	; 0x38
 8014c3e:	bd10      	pop	{r4, pc}
 8014c40:	2301      	movs	r3, #1
 8014c42:	4618      	mov	r0, r3
 8014c44:	b00e      	add	sp, #56	; 0x38
 8014c46:	bd10      	pop	{r4, pc}
 8014c48:	230c      	movs	r3, #12
 8014c4a:	e7f2      	b.n	8014c32 <rmw_init_options_fini+0x66>
 8014c4c:	230b      	movs	r3, #11
 8014c4e:	4618      	mov	r0, r3
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	08019a0c 	.word	0x08019a0c
 8014c58:	2000e1ec 	.word	0x2000e1ec

08014c5c <rmw_init>:
 8014c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c60:	b083      	sub	sp, #12
 8014c62:	2800      	cmp	r0, #0
 8014c64:	f000 80d3 	beq.w	8014e0e <rmw_init+0x1b2>
 8014c68:	460e      	mov	r6, r1
 8014c6a:	2900      	cmp	r1, #0
 8014c6c:	f000 80cf 	beq.w	8014e0e <rmw_init+0x1b2>
 8014c70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014c72:	4605      	mov	r5, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	f000 80ca 	beq.w	8014e0e <rmw_init+0x1b2>
 8014c7a:	4b78      	ldr	r3, [pc, #480]	; (8014e5c <rmw_init+0x200>)
 8014c7c:	6880      	ldr	r0, [r0, #8]
 8014c7e:	681f      	ldr	r7, [r3, #0]
 8014c80:	b128      	cbz	r0, 8014c8e <rmw_init+0x32>
 8014c82:	4639      	mov	r1, r7
 8014c84:	f7eb faa4 	bl	80001d0 <strcmp>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	f040 80ca 	bne.w	8014e22 <rmw_init+0x1c6>
 8014c8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014c92:	4c73      	ldr	r4, [pc, #460]	; (8014e60 <rmw_init+0x204>)
 8014c94:	4973      	ldr	r1, [pc, #460]	; (8014e64 <rmw_init+0x208>)
 8014c96:	4874      	ldr	r0, [pc, #464]	; (8014e68 <rmw_init+0x20c>)
 8014c98:	60b7      	str	r7, [r6, #8]
 8014c9a:	e9c6 2300 	strd	r2, r3, [r6]
 8014c9e:	68eb      	ldr	r3, [r5, #12]
 8014ca0:	64b3      	str	r3, [r6, #72]	; 0x48
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	f7fa f942 	bl	800ef2c <rmw_uxrce_init_session_memory>
 8014ca8:	4620      	mov	r0, r4
 8014caa:	4970      	ldr	r1, [pc, #448]	; (8014e6c <rmw_init+0x210>)
 8014cac:	2204      	movs	r2, #4
 8014cae:	f7fa f97d 	bl	800efac <rmw_uxrce_init_static_input_buffer_memory>
 8014cb2:	f04f 0800 	mov.w	r8, #0
 8014cb6:	486c      	ldr	r0, [pc, #432]	; (8014e68 <rmw_init+0x20c>)
 8014cb8:	f884 800d 	strb.w	r8, [r4, #13]
 8014cbc:	f7ff fe68 	bl	8014990 <get_memory>
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	f000 80a9 	beq.w	8014e18 <rmw_init+0x1bc>
 8014cc6:	6884      	ldr	r4, [r0, #8]
 8014cc8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014cca:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8014ccc:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014cd0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014cd4:	9101      	str	r1, [sp, #4]
 8014cd6:	6a00      	ldr	r0, [r0, #32]
 8014cd8:	9000      	str	r0, [sp, #0]
 8014cda:	f104 0910 	add.w	r9, r4, #16
 8014cde:	4661      	mov	r1, ip
 8014ce0:	4648      	mov	r0, r9
 8014ce2:	f000 feb1 	bl	8015a48 <uxr_set_custom_transport_callbacks>
 8014ce6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8014cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014cee:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8014cf2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8014cf6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8014cfa:	495d      	ldr	r1, [pc, #372]	; (8014e70 <rmw_init+0x214>)
 8014cfc:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8014d00:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8014d04:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8014d08:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8014d0c:	4859      	ldr	r0, [pc, #356]	; (8014e74 <rmw_init+0x218>)
 8014d0e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8014d12:	2201      	movs	r2, #1
 8014d14:	64f4      	str	r4, [r6, #76]	; 0x4c
 8014d16:	f7fa f8e9 	bl	800eeec <rmw_uxrce_init_node_memory>
 8014d1a:	4957      	ldr	r1, [pc, #348]	; (8014e78 <rmw_init+0x21c>)
 8014d1c:	4857      	ldr	r0, [pc, #348]	; (8014e7c <rmw_init+0x220>)
 8014d1e:	2205      	movs	r2, #5
 8014d20:	f7fa f8c4 	bl	800eeac <rmw_uxrce_init_subscription_memory>
 8014d24:	4956      	ldr	r1, [pc, #344]	; (8014e80 <rmw_init+0x224>)
 8014d26:	4857      	ldr	r0, [pc, #348]	; (8014e84 <rmw_init+0x228>)
 8014d28:	220a      	movs	r2, #10
 8014d2a:	f7fa f89f 	bl	800ee6c <rmw_uxrce_init_publisher_memory>
 8014d2e:	4956      	ldr	r1, [pc, #344]	; (8014e88 <rmw_init+0x22c>)
 8014d30:	4856      	ldr	r0, [pc, #344]	; (8014e8c <rmw_init+0x230>)
 8014d32:	2201      	movs	r2, #1
 8014d34:	f7fa f85a 	bl	800edec <rmw_uxrce_init_service_memory>
 8014d38:	4955      	ldr	r1, [pc, #340]	; (8014e90 <rmw_init+0x234>)
 8014d3a:	4856      	ldr	r0, [pc, #344]	; (8014e94 <rmw_init+0x238>)
 8014d3c:	2201      	movs	r2, #1
 8014d3e:	f7fa f875 	bl	800ee2c <rmw_uxrce_init_client_memory>
 8014d42:	4955      	ldr	r1, [pc, #340]	; (8014e98 <rmw_init+0x23c>)
 8014d44:	4855      	ldr	r0, [pc, #340]	; (8014e9c <rmw_init+0x240>)
 8014d46:	220f      	movs	r2, #15
 8014d48:	f7fa f910 	bl	800ef6c <rmw_uxrce_init_topic_memory>
 8014d4c:	4954      	ldr	r1, [pc, #336]	; (8014ea0 <rmw_init+0x244>)
 8014d4e:	4855      	ldr	r0, [pc, #340]	; (8014ea4 <rmw_init+0x248>)
 8014d50:	2203      	movs	r2, #3
 8014d52:	f7fa f94b 	bl	800efec <rmw_uxrce_init_init_options_impl_memory>
 8014d56:	4954      	ldr	r1, [pc, #336]	; (8014ea8 <rmw_init+0x24c>)
 8014d58:	4854      	ldr	r0, [pc, #336]	; (8014eac <rmw_init+0x250>)
 8014d5a:	2204      	movs	r2, #4
 8014d5c:	f7fa f966 	bl	800f02c <rmw_uxrce_init_wait_set_memory>
 8014d60:	4953      	ldr	r1, [pc, #332]	; (8014eb0 <rmw_init+0x254>)
 8014d62:	4854      	ldr	r0, [pc, #336]	; (8014eb4 <rmw_init+0x258>)
 8014d64:	2204      	movs	r2, #4
 8014d66:	f7fa f981 	bl	800f06c <rmw_uxrce_init_guard_condition_memory>
 8014d6a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8014d6c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014d6e:	4642      	mov	r2, r8
 8014d70:	f000 fbf8 	bl	8015564 <rmw_uxrce_transport_init>
 8014d74:	4607      	mov	r7, r0
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d158      	bne.n	8014e2c <rmw_init+0x1d0>
 8014d7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8014d7c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8014d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d82:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8014d86:	4628      	mov	r0, r5
 8014d88:	f7fb fe5e 	bl	8010a48 <uxr_init_session>
 8014d8c:	494a      	ldr	r1, [pc, #296]	; (8014eb8 <rmw_init+0x25c>)
 8014d8e:	4622      	mov	r2, r4
 8014d90:	4628      	mov	r0, r5
 8014d92:	f7fb fe7d 	bl	8010a90 <uxr_set_topic_callback>
 8014d96:	4949      	ldr	r1, [pc, #292]	; (8014ebc <rmw_init+0x260>)
 8014d98:	463a      	mov	r2, r7
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	f7fb fe74 	bl	8010a88 <uxr_set_status_callback>
 8014da0:	4947      	ldr	r1, [pc, #284]	; (8014ec0 <rmw_init+0x264>)
 8014da2:	463a      	mov	r2, r7
 8014da4:	4628      	mov	r0, r5
 8014da6:	f7fb fe77 	bl	8010a98 <uxr_set_request_callback>
 8014daa:	4946      	ldr	r1, [pc, #280]	; (8014ec4 <rmw_init+0x268>)
 8014dac:	463a      	mov	r2, r7
 8014dae:	4628      	mov	r0, r5
 8014db0:	f7fb fe76 	bl	8010aa0 <uxr_set_reply_callback>
 8014db4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014db8:	2304      	movs	r3, #4
 8014dba:	0092      	lsls	r2, r2, #2
 8014dbc:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	f7fb feab 	bl	8010b1c <uxr_create_input_reliable_stream>
 8014dc6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014dca:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8014dce:	0092      	lsls	r2, r2, #2
 8014dd0:	2304      	movs	r3, #4
 8014dd2:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8014dd6:	4628      	mov	r0, r5
 8014dd8:	f7fb fe78 	bl	8010acc <uxr_create_output_reliable_stream>
 8014ddc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8014de0:	4628      	mov	r0, r5
 8014de2:	f7fb fe95 	bl	8010b10 <uxr_create_input_best_effort_stream>
 8014de6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8014dea:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8014dee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014df2:	3114      	adds	r1, #20
 8014df4:	4628      	mov	r0, r5
 8014df6:	f7fb fe57 	bl	8010aa8 <uxr_create_output_best_effort_stream>
 8014dfa:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8014dfe:	4628      	mov	r0, r5
 8014e00:	f7fc fba8 	bl	8011554 <uxr_create_session>
 8014e04:	b1f8      	cbz	r0, 8014e46 <rmw_init+0x1ea>
 8014e06:	4638      	mov	r0, r7
 8014e08:	b003      	add	sp, #12
 8014e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e0e:	270b      	movs	r7, #11
 8014e10:	4638      	mov	r0, r7
 8014e12:	b003      	add	sp, #12
 8014e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e18:	2701      	movs	r7, #1
 8014e1a:	4638      	mov	r0, r7
 8014e1c:	b003      	add	sp, #12
 8014e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e22:	270c      	movs	r7, #12
 8014e24:	4638      	mov	r0, r7
 8014e26:	b003      	add	sp, #12
 8014e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e2c:	4648      	mov	r0, r9
 8014e2e:	f000 fe4d 	bl	8015acc <uxr_close_custom_transport>
 8014e32:	480d      	ldr	r0, [pc, #52]	; (8014e68 <rmw_init+0x20c>)
 8014e34:	4621      	mov	r1, r4
 8014e36:	f7ff fdbb 	bl	80149b0 <put_memory>
 8014e3a:	4638      	mov	r0, r7
 8014e3c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8014e40:	b003      	add	sp, #12
 8014e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e46:	4648      	mov	r0, r9
 8014e48:	f000 fe40 	bl	8015acc <uxr_close_custom_transport>
 8014e4c:	4806      	ldr	r0, [pc, #24]	; (8014e68 <rmw_init+0x20c>)
 8014e4e:	4621      	mov	r1, r4
 8014e50:	f7ff fdae 	bl	80149b0 <put_memory>
 8014e54:	64f7      	str	r7, [r6, #76]	; 0x4c
 8014e56:	2701      	movs	r7, #1
 8014e58:	e7d5      	b.n	8014e06 <rmw_init+0x1aa>
 8014e5a:	bf00      	nop
 8014e5c:	08019a0c 	.word	0x08019a0c
 8014e60:	2000e23c 	.word	0x2000e23c
 8014e64:	2000a4e8 	.word	0x2000a4e8
 8014e68:	2000e22c 	.word	0x2000e22c
 8014e6c:	2000ba90 	.word	0x2000ba90
 8014e70:	20009b0c 	.word	0x20009b0c
 8014e74:	2000e1fc 	.word	0x2000e1fc
 8014e78:	2000db90 	.word	0x2000db90
 8014e7c:	2000e24c 	.word	0x2000e24c
 8014e80:	20009bb0 	.word	0x20009bb0
 8014e84:	2000e20c 	.word	0x2000e20c
 8014e88:	2000a420 	.word	0x2000a420
 8014e8c:	2000e21c 	.word	0x2000e21c
 8014e90:	20009940 	.word	0x20009940
 8014e94:	20009930 	.word	0x20009930
 8014e98:	2000dfc8 	.word	0x2000dfc8
 8014e9c:	2000e25c 	.word	0x2000e25c
 8014ea0:	20009a88 	.word	0x20009a88
 8014ea4:	2000e1ec 	.word	0x2000e1ec
 8014ea8:	2000e16c 	.word	0x2000e16c
 8014eac:	2000e26c 	.word	0x2000e26c
 8014eb0:	20009a08 	.word	0x20009a08
 8014eb4:	2000e1dc 	.word	0x2000e1dc
 8014eb8:	080177ad 	.word	0x080177ad
 8014ebc:	080177a5 	.word	0x080177a5
 8014ec0:	08017845 	.word	0x08017845
 8014ec4:	080178e1 	.word	0x080178e1

08014ec8 <rmw_context_fini>:
 8014ec8:	4b17      	ldr	r3, [pc, #92]	; (8014f28 <rmw_context_fini+0x60>)
 8014eca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8014ecc:	b570      	push	{r4, r5, r6, lr}
 8014ece:	681c      	ldr	r4, [r3, #0]
 8014ed0:	4605      	mov	r5, r0
 8014ed2:	b334      	cbz	r4, 8014f22 <rmw_context_fini+0x5a>
 8014ed4:	2600      	movs	r6, #0
 8014ed6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014eda:	6902      	ldr	r2, [r0, #16]
 8014edc:	428a      	cmp	r2, r1
 8014ede:	d018      	beq.n	8014f12 <rmw_context_fini+0x4a>
 8014ee0:	2c00      	cmp	r4, #0
 8014ee2:	d1f8      	bne.n	8014ed6 <rmw_context_fini+0xe>
 8014ee4:	b189      	cbz	r1, 8014f0a <rmw_context_fini+0x42>
 8014ee6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8014eea:	789b      	ldrb	r3, [r3, #2]
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8014ef2:	bf14      	ite	ne
 8014ef4:	210a      	movne	r1, #10
 8014ef6:	2100      	moveq	r1, #0
 8014ef8:	f7fc fb04 	bl	8011504 <uxr_delete_session_retries>
 8014efc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8014efe:	f7fa f8d5 	bl	800f0ac <rmw_uxrce_fini_session_memory>
 8014f02:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8014f04:	3010      	adds	r0, #16
 8014f06:	f000 fde1 	bl	8015acc <uxr_close_custom_transport>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8014f0e:	4630      	mov	r0, r6
 8014f10:	bd70      	pop	{r4, r5, r6, pc}
 8014f12:	3018      	adds	r0, #24
 8014f14:	f000 f90e 	bl	8015134 <rmw_destroy_node>
 8014f18:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8014f1a:	4606      	mov	r6, r0
 8014f1c:	2c00      	cmp	r4, #0
 8014f1e:	d1da      	bne.n	8014ed6 <rmw_context_fini+0xe>
 8014f20:	e7e0      	b.n	8014ee4 <rmw_context_fini+0x1c>
 8014f22:	4626      	mov	r6, r4
 8014f24:	e7de      	b.n	8014ee4 <rmw_context_fini+0x1c>
 8014f26:	bf00      	nop
 8014f28:	2000e1fc 	.word	0x2000e1fc

08014f2c <create_topic>:
 8014f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f30:	4605      	mov	r5, r0
 8014f32:	b084      	sub	sp, #16
 8014f34:	4822      	ldr	r0, [pc, #136]	; (8014fc0 <create_topic+0x94>)
 8014f36:	460f      	mov	r7, r1
 8014f38:	4616      	mov	r6, r2
 8014f3a:	f7ff fd29 	bl	8014990 <get_memory>
 8014f3e:	4604      	mov	r4, r0
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d039      	beq.n	8014fb8 <create_topic+0x8c>
 8014f44:	692b      	ldr	r3, [r5, #16]
 8014f46:	6884      	ldr	r4, [r0, #8]
 8014f48:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8014fc8 <create_topic+0x9c>
 8014f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f50:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014f54:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8014f58:	1c42      	adds	r2, r0, #1
 8014f5a:	2102      	movs	r1, #2
 8014f5c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8014f60:	f7fb fcb4 	bl	80108cc <uxr_object_id>
 8014f64:	223c      	movs	r2, #60	; 0x3c
 8014f66:	6120      	str	r0, [r4, #16]
 8014f68:	4641      	mov	r1, r8
 8014f6a:	4638      	mov	r0, r7
 8014f6c:	f7fa f9d6 	bl	800f31c <generate_topic_name>
 8014f70:	b1f0      	cbz	r0, 8014fb0 <create_topic+0x84>
 8014f72:	4f14      	ldr	r7, [pc, #80]	; (8014fc4 <create_topic+0x98>)
 8014f74:	4630      	mov	r0, r6
 8014f76:	2264      	movs	r2, #100	; 0x64
 8014f78:	4639      	mov	r1, r7
 8014f7a:	f7fa f99f 	bl	800f2bc <generate_type_name>
 8014f7e:	b1b8      	cbz	r0, 8014fb0 <create_topic+0x84>
 8014f80:	6928      	ldr	r0, [r5, #16]
 8014f82:	2306      	movs	r3, #6
 8014f84:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8014f88:	f8cd 8000 	str.w	r8, [sp]
 8014f8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014f90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014f94:	6811      	ldr	r1, [r2, #0]
 8014f96:	696b      	ldr	r3, [r5, #20]
 8014f98:	6922      	ldr	r2, [r4, #16]
 8014f9a:	f7fb fb13 	bl	80105c4 <uxr_buffer_create_topic_bin>
 8014f9e:	4602      	mov	r2, r0
 8014fa0:	6928      	ldr	r0, [r5, #16]
 8014fa2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014fa6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014faa:	f7fa f951 	bl	800f250 <run_xrce_session>
 8014fae:	b918      	cbnz	r0, 8014fb8 <create_topic+0x8c>
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f7fa f8f1 	bl	800f198 <rmw_uxrce_fini_topic_memory>
 8014fb6:	2400      	movs	r4, #0
 8014fb8:	4620      	mov	r0, r4
 8014fba:	b004      	add	sp, #16
 8014fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fc0:	2000e25c 	.word	0x2000e25c
 8014fc4:	2000e348 	.word	0x2000e348
 8014fc8:	2000e30c 	.word	0x2000e30c

08014fcc <destroy_topic>:
 8014fcc:	b538      	push	{r3, r4, r5, lr}
 8014fce:	6985      	ldr	r5, [r0, #24]
 8014fd0:	b1d5      	cbz	r5, 8015008 <destroy_topic+0x3c>
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	6928      	ldr	r0, [r5, #16]
 8014fd6:	6922      	ldr	r2, [r4, #16]
 8014fd8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014fdc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014fe0:	6819      	ldr	r1, [r3, #0]
 8014fe2:	f7fb fa71 	bl	80104c8 <uxr_buffer_delete_entity>
 8014fe6:	4602      	mov	r2, r0
 8014fe8:	6928      	ldr	r0, [r5, #16]
 8014fea:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014fee:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014ff2:	f7fa f92d 	bl	800f250 <run_xrce_session>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	bf14      	ite	ne
 8014ffc:	2400      	movne	r4, #0
 8014ffe:	2402      	moveq	r4, #2
 8015000:	f7fa f8ca 	bl	800f198 <rmw_uxrce_fini_topic_memory>
 8015004:	4620      	mov	r0, r4
 8015006:	bd38      	pop	{r3, r4, r5, pc}
 8015008:	2401      	movs	r4, #1
 801500a:	4620      	mov	r0, r4
 801500c:	bd38      	pop	{r3, r4, r5, pc}
 801500e:	bf00      	nop

08015010 <create_node>:
 8015010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015014:	b083      	sub	sp, #12
 8015016:	2b00      	cmp	r3, #0
 8015018:	d05f      	beq.n	80150da <create_node+0xca>
 801501a:	4606      	mov	r6, r0
 801501c:	4835      	ldr	r0, [pc, #212]	; (80150f4 <create_node+0xe4>)
 801501e:	460f      	mov	r7, r1
 8015020:	4690      	mov	r8, r2
 8015022:	461d      	mov	r5, r3
 8015024:	f7ff fcb4 	bl	8014990 <get_memory>
 8015028:	2800      	cmp	r0, #0
 801502a:	d056      	beq.n	80150da <create_node+0xca>
 801502c:	6884      	ldr	r4, [r0, #8]
 801502e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015030:	6123      	str	r3, [r4, #16]
 8015032:	f7ff fd15 	bl	8014a60 <rmw_get_implementation_identifier>
 8015036:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 801503a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801503e:	f8c4 9020 	str.w	r9, [r4, #32]
 8015042:	4630      	mov	r0, r6
 8015044:	f7eb f8ce 	bl	80001e4 <strlen>
 8015048:	1c42      	adds	r2, r0, #1
 801504a:	2a3c      	cmp	r2, #60	; 0x3c
 801504c:	f104 0518 	add.w	r5, r4, #24
 8015050:	d840      	bhi.n	80150d4 <create_node+0xc4>
 8015052:	4648      	mov	r0, r9
 8015054:	4631      	mov	r1, r6
 8015056:	f104 0968 	add.w	r9, r4, #104	; 0x68
 801505a:	f003 f949 	bl	80182f0 <memcpy>
 801505e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015062:	4638      	mov	r0, r7
 8015064:	f7eb f8be 	bl	80001e4 <strlen>
 8015068:	1c42      	adds	r2, r0, #1
 801506a:	2a3c      	cmp	r2, #60	; 0x3c
 801506c:	d832      	bhi.n	80150d4 <create_node+0xc4>
 801506e:	4639      	mov	r1, r7
 8015070:	4648      	mov	r0, r9
 8015072:	f003 f93d 	bl	80182f0 <memcpy>
 8015076:	6923      	ldr	r3, [r4, #16]
 8015078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801507c:	2101      	movs	r1, #1
 801507e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015082:	1842      	adds	r2, r0, r1
 8015084:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015088:	f7fb fc20 	bl	80108cc <uxr_object_id>
 801508c:	6160      	str	r0, [r4, #20]
 801508e:	783b      	ldrb	r3, [r7, #0]
 8015090:	2b2f      	cmp	r3, #47	; 0x2f
 8015092:	d127      	bne.n	80150e4 <create_node+0xd4>
 8015094:	787b      	ldrb	r3, [r7, #1]
 8015096:	bb2b      	cbnz	r3, 80150e4 <create_node+0xd4>
 8015098:	4a17      	ldr	r2, [pc, #92]	; (80150f8 <create_node+0xe8>)
 801509a:	4818      	ldr	r0, [pc, #96]	; (80150fc <create_node+0xec>)
 801509c:	4633      	mov	r3, r6
 801509e:	213c      	movs	r1, #60	; 0x3c
 80150a0:	f002 ff94 	bl	8017fcc <sniprintf>
 80150a4:	6920      	ldr	r0, [r4, #16]
 80150a6:	4915      	ldr	r1, [pc, #84]	; (80150fc <create_node+0xec>)
 80150a8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80150ac:	9100      	str	r1, [sp, #0]
 80150ae:	2106      	movs	r1, #6
 80150b0:	9101      	str	r1, [sp, #4]
 80150b2:	6811      	ldr	r1, [r2, #0]
 80150b4:	6962      	ldr	r2, [r4, #20]
 80150b6:	fa1f f388 	uxth.w	r3, r8
 80150ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80150be:	f7fb fa4f 	bl	8010560 <uxr_buffer_create_participant_bin>
 80150c2:	4602      	mov	r2, r0
 80150c4:	6920      	ldr	r0, [r4, #16]
 80150c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80150ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80150ce:	f7fa f8bf 	bl	800f250 <run_xrce_session>
 80150d2:	b918      	cbnz	r0, 80150dc <create_node+0xcc>
 80150d4:	4628      	mov	r0, r5
 80150d6:	f7f9 ffef 	bl	800f0b8 <rmw_uxrce_fini_node_memory>
 80150da:	2500      	movs	r5, #0
 80150dc:	4628      	mov	r0, r5
 80150de:	b003      	add	sp, #12
 80150e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150e4:	4a06      	ldr	r2, [pc, #24]	; (8015100 <create_node+0xf0>)
 80150e6:	9600      	str	r6, [sp, #0]
 80150e8:	463b      	mov	r3, r7
 80150ea:	213c      	movs	r1, #60	; 0x3c
 80150ec:	4803      	ldr	r0, [pc, #12]	; (80150fc <create_node+0xec>)
 80150ee:	f002 ff6d 	bl	8017fcc <sniprintf>
 80150f2:	e7d7      	b.n	80150a4 <create_node+0x94>
 80150f4:	2000e1fc 	.word	0x2000e1fc
 80150f8:	0801939c 	.word	0x0801939c
 80150fc:	2000e3ac 	.word	0x2000e3ac
 8015100:	0801952c 	.word	0x0801952c

08015104 <rmw_create_node>:
 8015104:	b199      	cbz	r1, 801512e <rmw_create_node+0x2a>
 8015106:	780b      	ldrb	r3, [r1, #0]
 8015108:	468c      	mov	ip, r1
 801510a:	b183      	cbz	r3, 801512e <rmw_create_node+0x2a>
 801510c:	b410      	push	{r4}
 801510e:	4614      	mov	r4, r2
 8015110:	b14a      	cbz	r2, 8015126 <rmw_create_node+0x22>
 8015112:	7813      	ldrb	r3, [r2, #0]
 8015114:	b13b      	cbz	r3, 8015126 <rmw_create_node+0x22>
 8015116:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015118:	4603      	mov	r3, r0
 801511a:	4621      	mov	r1, r4
 801511c:	4660      	mov	r0, ip
 801511e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015122:	f7ff bf75 	b.w	8015010 <create_node>
 8015126:	2000      	movs	r0, #0
 8015128:	f85d 4b04 	ldr.w	r4, [sp], #4
 801512c:	4770      	bx	lr
 801512e:	2000      	movs	r0, #0
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop

08015134 <rmw_destroy_node>:
 8015134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015136:	b328      	cbz	r0, 8015184 <rmw_destroy_node+0x50>
 8015138:	4607      	mov	r7, r0
 801513a:	6800      	ldr	r0, [r0, #0]
 801513c:	b120      	cbz	r0, 8015148 <rmw_destroy_node+0x14>
 801513e:	4b36      	ldr	r3, [pc, #216]	; (8015218 <rmw_destroy_node+0xe4>)
 8015140:	6819      	ldr	r1, [r3, #0]
 8015142:	f7eb f845 	bl	80001d0 <strcmp>
 8015146:	b9e8      	cbnz	r0, 8015184 <rmw_destroy_node+0x50>
 8015148:	687d      	ldr	r5, [r7, #4]
 801514a:	b1dd      	cbz	r5, 8015184 <rmw_destroy_node+0x50>
 801514c:	4b33      	ldr	r3, [pc, #204]	; (801521c <rmw_destroy_node+0xe8>)
 801514e:	681c      	ldr	r4, [r3, #0]
 8015150:	2c00      	cmp	r4, #0
 8015152:	d05f      	beq.n	8015214 <rmw_destroy_node+0xe0>
 8015154:	2600      	movs	r6, #0
 8015156:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801515a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801515e:	429d      	cmp	r5, r3
 8015160:	d013      	beq.n	801518a <rmw_destroy_node+0x56>
 8015162:	2c00      	cmp	r4, #0
 8015164:	d1f7      	bne.n	8015156 <rmw_destroy_node+0x22>
 8015166:	4b2e      	ldr	r3, [pc, #184]	; (8015220 <rmw_destroy_node+0xec>)
 8015168:	681c      	ldr	r4, [r3, #0]
 801516a:	b1c4      	cbz	r4, 801519e <rmw_destroy_node+0x6a>
 801516c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015170:	6a0b      	ldr	r3, [r1, #32]
 8015172:	429d      	cmp	r5, r3
 8015174:	d1f9      	bne.n	801516a <rmw_destroy_node+0x36>
 8015176:	317c      	adds	r1, #124	; 0x7c
 8015178:	4638      	mov	r0, r7
 801517a:	f000 f993 	bl	80154a4 <rmw_destroy_subscription>
 801517e:	2801      	cmp	r0, #1
 8015180:	4606      	mov	r6, r0
 8015182:	d1f2      	bne.n	801516a <rmw_destroy_node+0x36>
 8015184:	2601      	movs	r6, #1
 8015186:	4630      	mov	r0, r6
 8015188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801518a:	3184      	adds	r1, #132	; 0x84
 801518c:	4638      	mov	r0, r7
 801518e:	f7f9 fddb 	bl	800ed48 <rmw_destroy_publisher>
 8015192:	2801      	cmp	r0, #1
 8015194:	4606      	mov	r6, r0
 8015196:	d0f5      	beq.n	8015184 <rmw_destroy_node+0x50>
 8015198:	2c00      	cmp	r4, #0
 801519a:	d1dc      	bne.n	8015156 <rmw_destroy_node+0x22>
 801519c:	e7e3      	b.n	8015166 <rmw_destroy_node+0x32>
 801519e:	4b21      	ldr	r3, [pc, #132]	; (8015224 <rmw_destroy_node+0xf0>)
 80151a0:	681c      	ldr	r4, [r3, #0]
 80151a2:	b16c      	cbz	r4, 80151c0 <rmw_destroy_node+0x8c>
 80151a4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80151a8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80151aa:	429d      	cmp	r5, r3
 80151ac:	d1f9      	bne.n	80151a2 <rmw_destroy_node+0x6e>
 80151ae:	317c      	adds	r1, #124	; 0x7c
 80151b0:	4638      	mov	r0, r7
 80151b2:	f000 f841 	bl	8015238 <rmw_destroy_service>
 80151b6:	2801      	cmp	r0, #1
 80151b8:	4606      	mov	r6, r0
 80151ba:	d0e3      	beq.n	8015184 <rmw_destroy_node+0x50>
 80151bc:	2c00      	cmp	r4, #0
 80151be:	d1f1      	bne.n	80151a4 <rmw_destroy_node+0x70>
 80151c0:	4b19      	ldr	r3, [pc, #100]	; (8015228 <rmw_destroy_node+0xf4>)
 80151c2:	681c      	ldr	r4, [r3, #0]
 80151c4:	b16c      	cbz	r4, 80151e2 <rmw_destroy_node+0xae>
 80151c6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80151ca:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80151cc:	429d      	cmp	r5, r3
 80151ce:	d1f9      	bne.n	80151c4 <rmw_destroy_node+0x90>
 80151d0:	317c      	adds	r1, #124	; 0x7c
 80151d2:	4638      	mov	r0, r7
 80151d4:	f7ff fc00 	bl	80149d8 <rmw_destroy_client>
 80151d8:	2801      	cmp	r0, #1
 80151da:	4606      	mov	r6, r0
 80151dc:	d0d2      	beq.n	8015184 <rmw_destroy_node+0x50>
 80151de:	2c00      	cmp	r4, #0
 80151e0:	d1f1      	bne.n	80151c6 <rmw_destroy_node+0x92>
 80151e2:	6928      	ldr	r0, [r5, #16]
 80151e4:	696a      	ldr	r2, [r5, #20]
 80151e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80151ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80151ee:	6819      	ldr	r1, [r3, #0]
 80151f0:	f7fb f96a 	bl	80104c8 <uxr_buffer_delete_entity>
 80151f4:	4602      	mov	r2, r0
 80151f6:	6928      	ldr	r0, [r5, #16]
 80151f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80151fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015200:	f7fa f826 	bl	800f250 <run_xrce_session>
 8015204:	2800      	cmp	r0, #0
 8015206:	bf08      	it	eq
 8015208:	2602      	moveq	r6, #2
 801520a:	4638      	mov	r0, r7
 801520c:	f7f9 ff54 	bl	800f0b8 <rmw_uxrce_fini_node_memory>
 8015210:	4630      	mov	r0, r6
 8015212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015214:	4626      	mov	r6, r4
 8015216:	e7a6      	b.n	8015166 <rmw_destroy_node+0x32>
 8015218:	08019a0c 	.word	0x08019a0c
 801521c:	2000e20c 	.word	0x2000e20c
 8015220:	2000e24c 	.word	0x2000e24c
 8015224:	2000e21c 	.word	0x2000e21c
 8015228:	20009930 	.word	0x20009930

0801522c <rmw_node_get_graph_guard_condition>:
 801522c:	6843      	ldr	r3, [r0, #4]
 801522e:	6918      	ldr	r0, [r3, #16]
 8015230:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015234:	4770      	bx	lr
 8015236:	bf00      	nop

08015238 <rmw_destroy_service>:
 8015238:	b570      	push	{r4, r5, r6, lr}
 801523a:	b128      	cbz	r0, 8015248 <rmw_destroy_service+0x10>
 801523c:	4604      	mov	r4, r0
 801523e:	6800      	ldr	r0, [r0, #0]
 8015240:	460d      	mov	r5, r1
 8015242:	f7fa f885 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 8015246:	b910      	cbnz	r0, 801524e <rmw_destroy_service+0x16>
 8015248:	2401      	movs	r4, #1
 801524a:	4620      	mov	r0, r4
 801524c:	bd70      	pop	{r4, r5, r6, pc}
 801524e:	6863      	ldr	r3, [r4, #4]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d0f9      	beq.n	8015248 <rmw_destroy_service+0x10>
 8015254:	2d00      	cmp	r5, #0
 8015256:	d0f7      	beq.n	8015248 <rmw_destroy_service+0x10>
 8015258:	6828      	ldr	r0, [r5, #0]
 801525a:	f7fa f879 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 801525e:	2800      	cmp	r0, #0
 8015260:	d0f2      	beq.n	8015248 <rmw_destroy_service+0x10>
 8015262:	686e      	ldr	r6, [r5, #4]
 8015264:	2e00      	cmp	r6, #0
 8015266:	d0ef      	beq.n	8015248 <rmw_destroy_service+0x10>
 8015268:	6864      	ldr	r4, [r4, #4]
 801526a:	6932      	ldr	r2, [r6, #16]
 801526c:	6920      	ldr	r0, [r4, #16]
 801526e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015272:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015276:	6819      	ldr	r1, [r3, #0]
 8015278:	f001 f9ae 	bl	80165d8 <uxr_buffer_cancel_data>
 801527c:	4602      	mov	r2, r0
 801527e:	6920      	ldr	r0, [r4, #16]
 8015280:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015284:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015288:	f7f9 ffe2 	bl	800f250 <run_xrce_session>
 801528c:	6920      	ldr	r0, [r4, #16]
 801528e:	6932      	ldr	r2, [r6, #16]
 8015290:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015294:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015298:	6819      	ldr	r1, [r3, #0]
 801529a:	f7fb f915 	bl	80104c8 <uxr_buffer_delete_entity>
 801529e:	4602      	mov	r2, r0
 80152a0:	6920      	ldr	r0, [r4, #16]
 80152a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80152a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80152aa:	f7f9 ffd1 	bl	800f250 <run_xrce_session>
 80152ae:	2800      	cmp	r0, #0
 80152b0:	4628      	mov	r0, r5
 80152b2:	bf14      	ite	ne
 80152b4:	2400      	movne	r4, #0
 80152b6:	2402      	moveq	r4, #2
 80152b8:	f7f9 ff42 	bl	800f140 <rmw_uxrce_fini_service_memory>
 80152bc:	e7c5      	b.n	801524a <rmw_destroy_service+0x12>
 80152be:	bf00      	nop

080152c0 <rmw_create_subscription>:
 80152c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152c4:	b08d      	sub	sp, #52	; 0x34
 80152c6:	2800      	cmp	r0, #0
 80152c8:	f000 80d1 	beq.w	801546e <rmw_create_subscription+0x1ae>
 80152cc:	460e      	mov	r6, r1
 80152ce:	2900      	cmp	r1, #0
 80152d0:	f000 80cd 	beq.w	801546e <rmw_create_subscription+0x1ae>
 80152d4:	4604      	mov	r4, r0
 80152d6:	6800      	ldr	r0, [r0, #0]
 80152d8:	4615      	mov	r5, r2
 80152da:	4698      	mov	r8, r3
 80152dc:	f7fa f838 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 80152e0:	2800      	cmp	r0, #0
 80152e2:	f000 80c4 	beq.w	801546e <rmw_create_subscription+0x1ae>
 80152e6:	2d00      	cmp	r5, #0
 80152e8:	f000 80c1 	beq.w	801546e <rmw_create_subscription+0x1ae>
 80152ec:	782b      	ldrb	r3, [r5, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	f000 80bd 	beq.w	801546e <rmw_create_subscription+0x1ae>
 80152f4:	f1b8 0f00 	cmp.w	r8, #0
 80152f8:	f000 80b9 	beq.w	801546e <rmw_create_subscription+0x1ae>
 80152fc:	485e      	ldr	r0, [pc, #376]	; (8015478 <rmw_create_subscription+0x1b8>)
 80152fe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015302:	f7ff fb45 	bl	8014990 <get_memory>
 8015306:	4604      	mov	r4, r0
 8015308:	2800      	cmp	r0, #0
 801530a:	f000 80b1 	beq.w	8015470 <rmw_create_subscription+0x1b0>
 801530e:	6887      	ldr	r7, [r0, #8]
 8015310:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8015314:	f7ff fba4 	bl	8014a60 <rmw_get_implementation_identifier>
 8015318:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 801531c:	67f8      	str	r0, [r7, #124]	; 0x7c
 801531e:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8015322:	4628      	mov	r0, r5
 8015324:	f7ea ff5e 	bl	80001e4 <strlen>
 8015328:	3001      	adds	r0, #1
 801532a:	283c      	cmp	r0, #60	; 0x3c
 801532c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8015330:	f200 8096 	bhi.w	8015460 <rmw_create_subscription+0x1a0>
 8015334:	4a51      	ldr	r2, [pc, #324]	; (801547c <rmw_create_subscription+0x1bc>)
 8015336:	462b      	mov	r3, r5
 8015338:	213c      	movs	r1, #60	; 0x3c
 801533a:	4650      	mov	r0, sl
 801533c:	f002 fe46 	bl	8017fcc <sniprintf>
 8015340:	4641      	mov	r1, r8
 8015342:	f8c7 9020 	str.w	r9, [r7, #32]
 8015346:	2250      	movs	r2, #80	; 0x50
 8015348:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801534c:	f002 ffd0 	bl	80182f0 <memcpy>
 8015350:	494b      	ldr	r1, [pc, #300]	; (8015480 <rmw_create_subscription+0x1c0>)
 8015352:	4630      	mov	r0, r6
 8015354:	f7fa f80a 	bl	800f36c <get_message_typesupport_handle>
 8015358:	2800      	cmp	r0, #0
 801535a:	f000 8081 	beq.w	8015460 <rmw_create_subscription+0x1a0>
 801535e:	6842      	ldr	r2, [r0, #4]
 8015360:	61ba      	str	r2, [r7, #24]
 8015362:	2a00      	cmp	r2, #0
 8015364:	d07c      	beq.n	8015460 <rmw_create_subscription+0x1a0>
 8015366:	4629      	mov	r1, r5
 8015368:	4643      	mov	r3, r8
 801536a:	4648      	mov	r0, r9
 801536c:	f7ff fdde 	bl	8014f2c <create_topic>
 8015370:	61f8      	str	r0, [r7, #28]
 8015372:	2800      	cmp	r0, #0
 8015374:	d078      	beq.n	8015468 <rmw_create_subscription+0x1a8>
 8015376:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801537a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801537e:	2104      	movs	r1, #4
 8015380:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8015384:	1c42      	adds	r2, r0, #1
 8015386:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801538a:	f7fb fa9f 	bl	80108cc <uxr_object_id>
 801538e:	6138      	str	r0, [r7, #16]
 8015390:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015394:	2506      	movs	r5, #6
 8015396:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801539a:	9500      	str	r5, [sp, #0]
 801539c:	6819      	ldr	r1, [r3, #0]
 801539e:	693a      	ldr	r2, [r7, #16]
 80153a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80153a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80153a8:	f7fb f972 	bl	8010690 <uxr_buffer_create_subscriber_bin>
 80153ac:	4602      	mov	r2, r0
 80153ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80153b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80153b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80153ba:	f7f9 ff49 	bl	800f250 <run_xrce_session>
 80153be:	2800      	cmp	r0, #0
 80153c0:	d04e      	beq.n	8015460 <rmw_create_subscription+0x1a0>
 80153c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80153c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153ca:	4629      	mov	r1, r5
 80153cc:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 80153d0:	1c42      	adds	r2, r0, #1
 80153d2:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 80153d6:	f7fb fa79 	bl	80108cc <uxr_object_id>
 80153da:	ae08      	add	r6, sp, #32
 80153dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	6178      	str	r0, [r7, #20]
 80153e4:	4641      	mov	r1, r8
 80153e6:	4630      	mov	r0, r6
 80153e8:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80153ec:	9305      	str	r3, [sp, #20]
 80153ee:	f7f9 ff4b 	bl	800f288 <convert_qos_profile>
 80153f2:	9503      	str	r5, [sp, #12]
 80153f4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80153f8:	9b05      	ldr	r3, [sp, #20]
 80153fa:	9001      	str	r0, [sp, #4]
 80153fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015400:	691b      	ldr	r3, [r3, #16]
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8015408:	f8db 1000 	ldr.w	r1, [fp]
 801540c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8015410:	f7fb f9e4 	bl	80107dc <uxr_buffer_create_datareader_bin>
 8015414:	4602      	mov	r2, r0
 8015416:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801541a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801541e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015422:	f7f9 ff15 	bl	800f250 <run_xrce_session>
 8015426:	b1d8      	cbz	r0, 8015460 <rmw_create_subscription+0x1a0>
 8015428:	f898 3008 	ldrb.w	r3, [r8, #8]
 801542c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015430:	2b02      	cmp	r3, #2
 8015432:	bf0c      	ite	eq
 8015434:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8015438:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 801543c:	9307      	str	r3, [sp, #28]
 801543e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015442:	2200      	movs	r2, #0
 8015444:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8015448:	ab0a      	add	r3, sp, #40	; 0x28
 801544a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801544e:	9300      	str	r3, [sp, #0]
 8015450:	697a      	ldr	r2, [r7, #20]
 8015452:	9b07      	ldr	r3, [sp, #28]
 8015454:	6809      	ldr	r1, [r1, #0]
 8015456:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801545a:	f001 f883 	bl	8016564 <uxr_buffer_request_data>
 801545e:	e007      	b.n	8015470 <rmw_create_subscription+0x1b0>
 8015460:	69f8      	ldr	r0, [r7, #28]
 8015462:	b108      	cbz	r0, 8015468 <rmw_create_subscription+0x1a8>
 8015464:	f7f9 fe98 	bl	800f198 <rmw_uxrce_fini_topic_memory>
 8015468:	4620      	mov	r0, r4
 801546a:	f7f9 fe53 	bl	800f114 <rmw_uxrce_fini_subscription_memory>
 801546e:	2400      	movs	r4, #0
 8015470:	4620      	mov	r0, r4
 8015472:	b00d      	add	sp, #52	; 0x34
 8015474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015478:	2000e24c 	.word	0x2000e24c
 801547c:	0801939c 	.word	0x0801939c
 8015480:	08019368 	.word	0x08019368

08015484 <rmw_subscription_get_actual_qos>:
 8015484:	b150      	cbz	r0, 801549c <rmw_subscription_get_actual_qos+0x18>
 8015486:	b508      	push	{r3, lr}
 8015488:	460b      	mov	r3, r1
 801548a:	b149      	cbz	r1, 80154a0 <rmw_subscription_get_actual_qos+0x1c>
 801548c:	6841      	ldr	r1, [r0, #4]
 801548e:	2250      	movs	r2, #80	; 0x50
 8015490:	3128      	adds	r1, #40	; 0x28
 8015492:	4618      	mov	r0, r3
 8015494:	f002 ff2c 	bl	80182f0 <memcpy>
 8015498:	2000      	movs	r0, #0
 801549a:	bd08      	pop	{r3, pc}
 801549c:	200b      	movs	r0, #11
 801549e:	4770      	bx	lr
 80154a0:	200b      	movs	r0, #11
 80154a2:	bd08      	pop	{r3, pc}

080154a4 <rmw_destroy_subscription>:
 80154a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154a6:	b128      	cbz	r0, 80154b4 <rmw_destroy_subscription+0x10>
 80154a8:	4604      	mov	r4, r0
 80154aa:	6800      	ldr	r0, [r0, #0]
 80154ac:	460d      	mov	r5, r1
 80154ae:	f7f9 ff4f 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 80154b2:	b910      	cbnz	r0, 80154ba <rmw_destroy_subscription+0x16>
 80154b4:	2401      	movs	r4, #1
 80154b6:	4620      	mov	r0, r4
 80154b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154ba:	6863      	ldr	r3, [r4, #4]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d0f9      	beq.n	80154b4 <rmw_destroy_subscription+0x10>
 80154c0:	2d00      	cmp	r5, #0
 80154c2:	d0f7      	beq.n	80154b4 <rmw_destroy_subscription+0x10>
 80154c4:	6828      	ldr	r0, [r5, #0]
 80154c6:	f7f9 ff43 	bl	800f350 <is_uxrce_rmw_identifier_valid>
 80154ca:	2800      	cmp	r0, #0
 80154cc:	d0f2      	beq.n	80154b4 <rmw_destroy_subscription+0x10>
 80154ce:	686c      	ldr	r4, [r5, #4]
 80154d0:	2c00      	cmp	r4, #0
 80154d2:	d0ef      	beq.n	80154b4 <rmw_destroy_subscription+0x10>
 80154d4:	6a26      	ldr	r6, [r4, #32]
 80154d6:	6962      	ldr	r2, [r4, #20]
 80154d8:	6930      	ldr	r0, [r6, #16]
 80154da:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80154de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80154e2:	6819      	ldr	r1, [r3, #0]
 80154e4:	f001 f878 	bl	80165d8 <uxr_buffer_cancel_data>
 80154e8:	4602      	mov	r2, r0
 80154ea:	6930      	ldr	r0, [r6, #16]
 80154ec:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80154f0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80154f4:	f7f9 feac 	bl	800f250 <run_xrce_session>
 80154f8:	69e0      	ldr	r0, [r4, #28]
 80154fa:	f7ff fd67 	bl	8014fcc <destroy_topic>
 80154fe:	6a23      	ldr	r3, [r4, #32]
 8015500:	6962      	ldr	r2, [r4, #20]
 8015502:	6918      	ldr	r0, [r3, #16]
 8015504:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015508:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801550c:	6819      	ldr	r1, [r3, #0]
 801550e:	f7fa ffdb 	bl	80104c8 <uxr_buffer_delete_entity>
 8015512:	6a23      	ldr	r3, [r4, #32]
 8015514:	6922      	ldr	r2, [r4, #16]
 8015516:	691b      	ldr	r3, [r3, #16]
 8015518:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 801551c:	4604      	mov	r4, r0
 801551e:	6809      	ldr	r1, [r1, #0]
 8015520:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015524:	f7fa ffd0 	bl	80104c8 <uxr_buffer_delete_entity>
 8015528:	6937      	ldr	r7, [r6, #16]
 801552a:	4622      	mov	r2, r4
 801552c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8015530:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8015534:	4604      	mov	r4, r0
 8015536:	4638      	mov	r0, r7
 8015538:	f7f9 fe8a 	bl	800f250 <run_xrce_session>
 801553c:	6936      	ldr	r6, [r6, #16]
 801553e:	4622      	mov	r2, r4
 8015540:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8015544:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8015548:	4604      	mov	r4, r0
 801554a:	4630      	mov	r0, r6
 801554c:	f7f9 fe80 	bl	800f250 <run_xrce_session>
 8015550:	b12c      	cbz	r4, 801555e <rmw_destroy_subscription+0xba>
 8015552:	b120      	cbz	r0, 801555e <rmw_destroy_subscription+0xba>
 8015554:	2400      	movs	r4, #0
 8015556:	4628      	mov	r0, r5
 8015558:	f7f9 fddc 	bl	800f114 <rmw_uxrce_fini_subscription_memory>
 801555c:	e7ab      	b.n	80154b6 <rmw_destroy_subscription+0x12>
 801555e:	2402      	movs	r4, #2
 8015560:	e7f9      	b.n	8015556 <rmw_destroy_subscription+0xb2>
 8015562:	bf00      	nop

08015564 <rmw_uxrce_transport_init>:
 8015564:	b508      	push	{r3, lr}
 8015566:	b108      	cbz	r0, 801556c <rmw_uxrce_transport_init+0x8>
 8015568:	f100 0210 	add.w	r2, r0, #16
 801556c:	b139      	cbz	r1, 801557e <rmw_uxrce_transport_init+0x1a>
 801556e:	6949      	ldr	r1, [r1, #20]
 8015570:	4610      	mov	r0, r2
 8015572:	f000 fa77 	bl	8015a64 <uxr_init_custom_transport>
 8015576:	f080 0001 	eor.w	r0, r0, #1
 801557a:	b2c0      	uxtb	r0, r0
 801557c:	bd08      	pop	{r3, pc}
 801557e:	4b04      	ldr	r3, [pc, #16]	; (8015590 <rmw_uxrce_transport_init+0x2c>)
 8015580:	4610      	mov	r0, r2
 8015582:	6859      	ldr	r1, [r3, #4]
 8015584:	f000 fa6e 	bl	8015a64 <uxr_init_custom_transport>
 8015588:	f080 0001 	eor.w	r0, r0, #1
 801558c:	b2c0      	uxtb	r0, r0
 801558e:	bd08      	pop	{r3, pc}
 8015590:	20009914 	.word	0x20009914

08015594 <rmw_uros_epoch_nanos>:
 8015594:	4b05      	ldr	r3, [pc, #20]	; (80155ac <rmw_uros_epoch_nanos+0x18>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	b123      	cbz	r3, 80155a4 <rmw_uros_epoch_nanos+0x10>
 801559a:	6898      	ldr	r0, [r3, #8]
 801559c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80155a0:	f7fb bad8 	b.w	8010b54 <uxr_epoch_nanos>
 80155a4:	2000      	movs	r0, #0
 80155a6:	2100      	movs	r1, #0
 80155a8:	4770      	bx	lr
 80155aa:	bf00      	nop
 80155ac:	2000e22c 	.word	0x2000e22c

080155b0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80155b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155b4:	6805      	ldr	r5, [r0, #0]
 80155b6:	4604      	mov	r4, r0
 80155b8:	4628      	mov	r0, r5
 80155ba:	460e      	mov	r6, r1
 80155bc:	f7ea fe08 	bl	80001d0 <strcmp>
 80155c0:	b1c8      	cbz	r0, 80155f6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80155c2:	4b11      	ldr	r3, [pc, #68]	; (8015608 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	429d      	cmp	r5, r3
 80155c8:	d112      	bne.n	80155f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80155ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80155ce:	f8d8 4000 	ldr.w	r4, [r8]
 80155d2:	b16c      	cbz	r4, 80155f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80155d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80155d8:	2700      	movs	r7, #0
 80155da:	3d04      	subs	r5, #4
 80155dc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80155e0:	4631      	mov	r1, r6
 80155e2:	f7ea fdf5 	bl	80001d0 <strcmp>
 80155e6:	00bb      	lsls	r3, r7, #2
 80155e8:	b140      	cbz	r0, 80155fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80155ea:	3701      	adds	r7, #1
 80155ec:	42bc      	cmp	r4, r7
 80155ee:	d1f5      	bne.n	80155dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80155f0:	2000      	movs	r0, #0
 80155f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155f6:	4620      	mov	r0, r4
 80155f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015604:	58d3      	ldr	r3, [r2, r3]
 8015606:	4718      	bx	r3
 8015608:	200000cc 	.word	0x200000cc

0801560c <std_msgs__msg__Int32__init>:
 801560c:	3800      	subs	r0, #0
 801560e:	bf18      	it	ne
 8015610:	2001      	movne	r0, #1
 8015612:	4770      	bx	lr

08015614 <std_msgs__msg__Int32__fini>:
 8015614:	4770      	bx	lr
 8015616:	bf00      	nop

08015618 <ucdr_serialize_endian_array_char>:
 8015618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801561c:	4619      	mov	r1, r3
 801561e:	461f      	mov	r7, r3
 8015620:	4605      	mov	r5, r0
 8015622:	4690      	mov	r8, r2
 8015624:	f7fa fe8c 	bl	8010340 <ucdr_check_buffer_available_for>
 8015628:	b9e0      	cbnz	r0, 8015664 <ucdr_serialize_endian_array_char+0x4c>
 801562a:	463e      	mov	r6, r7
 801562c:	e009      	b.n	8015642 <ucdr_serialize_endian_array_char+0x2a>
 801562e:	68a8      	ldr	r0, [r5, #8]
 8015630:	f002 fe5e 	bl	80182f0 <memcpy>
 8015634:	68ab      	ldr	r3, [r5, #8]
 8015636:	6928      	ldr	r0, [r5, #16]
 8015638:	4423      	add	r3, r4
 801563a:	4420      	add	r0, r4
 801563c:	1b36      	subs	r6, r6, r4
 801563e:	60ab      	str	r3, [r5, #8]
 8015640:	6128      	str	r0, [r5, #16]
 8015642:	4631      	mov	r1, r6
 8015644:	2201      	movs	r2, #1
 8015646:	4628      	mov	r0, r5
 8015648:	f7fa ff02 	bl	8010450 <ucdr_check_final_buffer_behavior_array>
 801564c:	1bb9      	subs	r1, r7, r6
 801564e:	4441      	add	r1, r8
 8015650:	4604      	mov	r4, r0
 8015652:	4602      	mov	r2, r0
 8015654:	2800      	cmp	r0, #0
 8015656:	d1ea      	bne.n	801562e <ucdr_serialize_endian_array_char+0x16>
 8015658:	2301      	movs	r3, #1
 801565a:	7da8      	ldrb	r0, [r5, #22]
 801565c:	756b      	strb	r3, [r5, #21]
 801565e:	4058      	eors	r0, r3
 8015660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015664:	463a      	mov	r2, r7
 8015666:	68a8      	ldr	r0, [r5, #8]
 8015668:	4641      	mov	r1, r8
 801566a:	f002 fe41 	bl	80182f0 <memcpy>
 801566e:	68aa      	ldr	r2, [r5, #8]
 8015670:	692b      	ldr	r3, [r5, #16]
 8015672:	443a      	add	r2, r7
 8015674:	443b      	add	r3, r7
 8015676:	60aa      	str	r2, [r5, #8]
 8015678:	612b      	str	r3, [r5, #16]
 801567a:	e7ed      	b.n	8015658 <ucdr_serialize_endian_array_char+0x40>

0801567c <ucdr_deserialize_endian_array_char>:
 801567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015680:	4619      	mov	r1, r3
 8015682:	461f      	mov	r7, r3
 8015684:	4605      	mov	r5, r0
 8015686:	4690      	mov	r8, r2
 8015688:	f7fa fe5a 	bl	8010340 <ucdr_check_buffer_available_for>
 801568c:	b9e0      	cbnz	r0, 80156c8 <ucdr_deserialize_endian_array_char+0x4c>
 801568e:	463e      	mov	r6, r7
 8015690:	e009      	b.n	80156a6 <ucdr_deserialize_endian_array_char+0x2a>
 8015692:	68a9      	ldr	r1, [r5, #8]
 8015694:	f002 fe2c 	bl	80182f0 <memcpy>
 8015698:	68ab      	ldr	r3, [r5, #8]
 801569a:	6928      	ldr	r0, [r5, #16]
 801569c:	4423      	add	r3, r4
 801569e:	4420      	add	r0, r4
 80156a0:	1b36      	subs	r6, r6, r4
 80156a2:	60ab      	str	r3, [r5, #8]
 80156a4:	6128      	str	r0, [r5, #16]
 80156a6:	2201      	movs	r2, #1
 80156a8:	4631      	mov	r1, r6
 80156aa:	4628      	mov	r0, r5
 80156ac:	f7fa fed0 	bl	8010450 <ucdr_check_final_buffer_behavior_array>
 80156b0:	4604      	mov	r4, r0
 80156b2:	1bb8      	subs	r0, r7, r6
 80156b4:	4440      	add	r0, r8
 80156b6:	4622      	mov	r2, r4
 80156b8:	2c00      	cmp	r4, #0
 80156ba:	d1ea      	bne.n	8015692 <ucdr_deserialize_endian_array_char+0x16>
 80156bc:	2301      	movs	r3, #1
 80156be:	7da8      	ldrb	r0, [r5, #22]
 80156c0:	756b      	strb	r3, [r5, #21]
 80156c2:	4058      	eors	r0, r3
 80156c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156c8:	463a      	mov	r2, r7
 80156ca:	68a9      	ldr	r1, [r5, #8]
 80156cc:	4640      	mov	r0, r8
 80156ce:	f002 fe0f 	bl	80182f0 <memcpy>
 80156d2:	68aa      	ldr	r2, [r5, #8]
 80156d4:	692b      	ldr	r3, [r5, #16]
 80156d6:	443a      	add	r2, r7
 80156d8:	443b      	add	r3, r7
 80156da:	60aa      	str	r2, [r5, #8]
 80156dc:	612b      	str	r3, [r5, #16]
 80156de:	e7ed      	b.n	80156bc <ucdr_deserialize_endian_array_char+0x40>

080156e0 <ucdr_serialize_array_uint8_t>:
 80156e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e4:	4688      	mov	r8, r1
 80156e6:	4611      	mov	r1, r2
 80156e8:	4617      	mov	r7, r2
 80156ea:	4605      	mov	r5, r0
 80156ec:	f7fa fe28 	bl	8010340 <ucdr_check_buffer_available_for>
 80156f0:	b9e0      	cbnz	r0, 801572c <ucdr_serialize_array_uint8_t+0x4c>
 80156f2:	463e      	mov	r6, r7
 80156f4:	e009      	b.n	801570a <ucdr_serialize_array_uint8_t+0x2a>
 80156f6:	68a8      	ldr	r0, [r5, #8]
 80156f8:	f002 fdfa 	bl	80182f0 <memcpy>
 80156fc:	68aa      	ldr	r2, [r5, #8]
 80156fe:	692b      	ldr	r3, [r5, #16]
 8015700:	4422      	add	r2, r4
 8015702:	4423      	add	r3, r4
 8015704:	1b36      	subs	r6, r6, r4
 8015706:	60aa      	str	r2, [r5, #8]
 8015708:	612b      	str	r3, [r5, #16]
 801570a:	4631      	mov	r1, r6
 801570c:	2201      	movs	r2, #1
 801570e:	4628      	mov	r0, r5
 8015710:	f7fa fe9e 	bl	8010450 <ucdr_check_final_buffer_behavior_array>
 8015714:	1bb9      	subs	r1, r7, r6
 8015716:	4441      	add	r1, r8
 8015718:	4604      	mov	r4, r0
 801571a:	4602      	mov	r2, r0
 801571c:	2800      	cmp	r0, #0
 801571e:	d1ea      	bne.n	80156f6 <ucdr_serialize_array_uint8_t+0x16>
 8015720:	2301      	movs	r3, #1
 8015722:	7da8      	ldrb	r0, [r5, #22]
 8015724:	756b      	strb	r3, [r5, #21]
 8015726:	4058      	eors	r0, r3
 8015728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801572c:	463a      	mov	r2, r7
 801572e:	68a8      	ldr	r0, [r5, #8]
 8015730:	4641      	mov	r1, r8
 8015732:	f002 fddd 	bl	80182f0 <memcpy>
 8015736:	68aa      	ldr	r2, [r5, #8]
 8015738:	692b      	ldr	r3, [r5, #16]
 801573a:	443a      	add	r2, r7
 801573c:	443b      	add	r3, r7
 801573e:	60aa      	str	r2, [r5, #8]
 8015740:	612b      	str	r3, [r5, #16]
 8015742:	e7ed      	b.n	8015720 <ucdr_serialize_array_uint8_t+0x40>

08015744 <ucdr_serialize_endian_array_uint8_t>:
 8015744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015748:	4619      	mov	r1, r3
 801574a:	461f      	mov	r7, r3
 801574c:	4605      	mov	r5, r0
 801574e:	4690      	mov	r8, r2
 8015750:	f7fa fdf6 	bl	8010340 <ucdr_check_buffer_available_for>
 8015754:	b9e0      	cbnz	r0, 8015790 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015756:	463e      	mov	r6, r7
 8015758:	e009      	b.n	801576e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801575a:	68a8      	ldr	r0, [r5, #8]
 801575c:	f002 fdc8 	bl	80182f0 <memcpy>
 8015760:	68ab      	ldr	r3, [r5, #8]
 8015762:	6928      	ldr	r0, [r5, #16]
 8015764:	4423      	add	r3, r4
 8015766:	4420      	add	r0, r4
 8015768:	1b36      	subs	r6, r6, r4
 801576a:	60ab      	str	r3, [r5, #8]
 801576c:	6128      	str	r0, [r5, #16]
 801576e:	4631      	mov	r1, r6
 8015770:	2201      	movs	r2, #1
 8015772:	4628      	mov	r0, r5
 8015774:	f7fa fe6c 	bl	8010450 <ucdr_check_final_buffer_behavior_array>
 8015778:	1bb9      	subs	r1, r7, r6
 801577a:	4441      	add	r1, r8
 801577c:	4604      	mov	r4, r0
 801577e:	4602      	mov	r2, r0
 8015780:	2800      	cmp	r0, #0
 8015782:	d1ea      	bne.n	801575a <ucdr_serialize_endian_array_uint8_t+0x16>
 8015784:	2301      	movs	r3, #1
 8015786:	7da8      	ldrb	r0, [r5, #22]
 8015788:	756b      	strb	r3, [r5, #21]
 801578a:	4058      	eors	r0, r3
 801578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015790:	463a      	mov	r2, r7
 8015792:	68a8      	ldr	r0, [r5, #8]
 8015794:	4641      	mov	r1, r8
 8015796:	f002 fdab 	bl	80182f0 <memcpy>
 801579a:	68aa      	ldr	r2, [r5, #8]
 801579c:	692b      	ldr	r3, [r5, #16]
 801579e:	443a      	add	r2, r7
 80157a0:	443b      	add	r3, r7
 80157a2:	60aa      	str	r2, [r5, #8]
 80157a4:	612b      	str	r3, [r5, #16]
 80157a6:	e7ed      	b.n	8015784 <ucdr_serialize_endian_array_uint8_t+0x40>

080157a8 <ucdr_deserialize_array_uint8_t>:
 80157a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157ac:	4688      	mov	r8, r1
 80157ae:	4611      	mov	r1, r2
 80157b0:	4617      	mov	r7, r2
 80157b2:	4605      	mov	r5, r0
 80157b4:	f7fa fdc4 	bl	8010340 <ucdr_check_buffer_available_for>
 80157b8:	b9e0      	cbnz	r0, 80157f4 <ucdr_deserialize_array_uint8_t+0x4c>
 80157ba:	463e      	mov	r6, r7
 80157bc:	e009      	b.n	80157d2 <ucdr_deserialize_array_uint8_t+0x2a>
 80157be:	68a9      	ldr	r1, [r5, #8]
 80157c0:	f002 fd96 	bl	80182f0 <memcpy>
 80157c4:	68aa      	ldr	r2, [r5, #8]
 80157c6:	692b      	ldr	r3, [r5, #16]
 80157c8:	4422      	add	r2, r4
 80157ca:	4423      	add	r3, r4
 80157cc:	1b36      	subs	r6, r6, r4
 80157ce:	60aa      	str	r2, [r5, #8]
 80157d0:	612b      	str	r3, [r5, #16]
 80157d2:	2201      	movs	r2, #1
 80157d4:	4631      	mov	r1, r6
 80157d6:	4628      	mov	r0, r5
 80157d8:	f7fa fe3a 	bl	8010450 <ucdr_check_final_buffer_behavior_array>
 80157dc:	4604      	mov	r4, r0
 80157de:	1bb8      	subs	r0, r7, r6
 80157e0:	4440      	add	r0, r8
 80157e2:	4622      	mov	r2, r4
 80157e4:	2c00      	cmp	r4, #0
 80157e6:	d1ea      	bne.n	80157be <ucdr_deserialize_array_uint8_t+0x16>
 80157e8:	2301      	movs	r3, #1
 80157ea:	7da8      	ldrb	r0, [r5, #22]
 80157ec:	756b      	strb	r3, [r5, #21]
 80157ee:	4058      	eors	r0, r3
 80157f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f4:	463a      	mov	r2, r7
 80157f6:	68a9      	ldr	r1, [r5, #8]
 80157f8:	4640      	mov	r0, r8
 80157fa:	f002 fd79 	bl	80182f0 <memcpy>
 80157fe:	68aa      	ldr	r2, [r5, #8]
 8015800:	692b      	ldr	r3, [r5, #16]
 8015802:	443a      	add	r2, r7
 8015804:	443b      	add	r3, r7
 8015806:	60aa      	str	r2, [r5, #8]
 8015808:	612b      	str	r3, [r5, #16]
 801580a:	e7ed      	b.n	80157e8 <ucdr_deserialize_array_uint8_t+0x40>

0801580c <ucdr_deserialize_endian_array_uint8_t>:
 801580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015810:	4619      	mov	r1, r3
 8015812:	461f      	mov	r7, r3
 8015814:	4605      	mov	r5, r0
 8015816:	4690      	mov	r8, r2
 8015818:	f7fa fd92 	bl	8010340 <ucdr_check_buffer_available_for>
 801581c:	b9e0      	cbnz	r0, 8015858 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801581e:	463e      	mov	r6, r7
 8015820:	e009      	b.n	8015836 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015822:	68a9      	ldr	r1, [r5, #8]
 8015824:	f002 fd64 	bl	80182f0 <memcpy>
 8015828:	68ab      	ldr	r3, [r5, #8]
 801582a:	6928      	ldr	r0, [r5, #16]
 801582c:	4423      	add	r3, r4
 801582e:	4420      	add	r0, r4
 8015830:	1b36      	subs	r6, r6, r4
 8015832:	60ab      	str	r3, [r5, #8]
 8015834:	6128      	str	r0, [r5, #16]
 8015836:	2201      	movs	r2, #1
 8015838:	4631      	mov	r1, r6
 801583a:	4628      	mov	r0, r5
 801583c:	f7fa fe08 	bl	8010450 <ucdr_check_final_buffer_behavior_array>
 8015840:	4604      	mov	r4, r0
 8015842:	1bb8      	subs	r0, r7, r6
 8015844:	4440      	add	r0, r8
 8015846:	4622      	mov	r2, r4
 8015848:	2c00      	cmp	r4, #0
 801584a:	d1ea      	bne.n	8015822 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801584c:	2301      	movs	r3, #1
 801584e:	7da8      	ldrb	r0, [r5, #22]
 8015850:	756b      	strb	r3, [r5, #21]
 8015852:	4058      	eors	r0, r3
 8015854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015858:	463a      	mov	r2, r7
 801585a:	68a9      	ldr	r1, [r5, #8]
 801585c:	4640      	mov	r0, r8
 801585e:	f002 fd47 	bl	80182f0 <memcpy>
 8015862:	68aa      	ldr	r2, [r5, #8]
 8015864:	692b      	ldr	r3, [r5, #16]
 8015866:	443a      	add	r2, r7
 8015868:	443b      	add	r3, r7
 801586a:	60aa      	str	r2, [r5, #8]
 801586c:	612b      	str	r3, [r5, #16]
 801586e:	e7ed      	b.n	801584c <ucdr_deserialize_endian_array_uint8_t+0x40>

08015870 <ucdr_serialize_sequence_char>:
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	4615      	mov	r5, r2
 8015874:	460e      	mov	r6, r1
 8015876:	7d01      	ldrb	r1, [r0, #20]
 8015878:	4604      	mov	r4, r0
 801587a:	f7fa f8b7 	bl	800f9ec <ucdr_serialize_endian_uint32_t>
 801587e:	b90d      	cbnz	r5, 8015884 <ucdr_serialize_sequence_char+0x14>
 8015880:	2001      	movs	r0, #1
 8015882:	bd70      	pop	{r4, r5, r6, pc}
 8015884:	7d21      	ldrb	r1, [r4, #20]
 8015886:	462b      	mov	r3, r5
 8015888:	4632      	mov	r2, r6
 801588a:	4620      	mov	r0, r4
 801588c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015890:	f7ff bec2 	b.w	8015618 <ucdr_serialize_endian_array_char>

08015894 <ucdr_deserialize_sequence_char>:
 8015894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015898:	461d      	mov	r5, r3
 801589a:	4616      	mov	r6, r2
 801589c:	460f      	mov	r7, r1
 801589e:	461a      	mov	r2, r3
 80158a0:	7d01      	ldrb	r1, [r0, #20]
 80158a2:	4604      	mov	r4, r0
 80158a4:	f7fa f9ca 	bl	800fc3c <ucdr_deserialize_endian_uint32_t>
 80158a8:	682b      	ldr	r3, [r5, #0]
 80158aa:	429e      	cmp	r6, r3
 80158ac:	bf3c      	itt	cc
 80158ae:	2201      	movcc	r2, #1
 80158b0:	75a2      	strbcc	r2, [r4, #22]
 80158b2:	b913      	cbnz	r3, 80158ba <ucdr_deserialize_sequence_char+0x26>
 80158b4:	2001      	movs	r0, #1
 80158b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ba:	7d21      	ldrb	r1, [r4, #20]
 80158bc:	463a      	mov	r2, r7
 80158be:	4620      	mov	r0, r4
 80158c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158c4:	f7ff beda 	b.w	801567c <ucdr_deserialize_endian_array_char>

080158c8 <ucdr_serialize_sequence_uint8_t>:
 80158c8:	b570      	push	{r4, r5, r6, lr}
 80158ca:	4615      	mov	r5, r2
 80158cc:	460e      	mov	r6, r1
 80158ce:	7d01      	ldrb	r1, [r0, #20]
 80158d0:	4604      	mov	r4, r0
 80158d2:	f7fa f88b 	bl	800f9ec <ucdr_serialize_endian_uint32_t>
 80158d6:	b90d      	cbnz	r5, 80158dc <ucdr_serialize_sequence_uint8_t+0x14>
 80158d8:	2001      	movs	r0, #1
 80158da:	bd70      	pop	{r4, r5, r6, pc}
 80158dc:	7d21      	ldrb	r1, [r4, #20]
 80158de:	462b      	mov	r3, r5
 80158e0:	4632      	mov	r2, r6
 80158e2:	4620      	mov	r0, r4
 80158e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158e8:	f7ff bf2c 	b.w	8015744 <ucdr_serialize_endian_array_uint8_t>

080158ec <ucdr_deserialize_sequence_uint8_t>:
 80158ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158f0:	461d      	mov	r5, r3
 80158f2:	4616      	mov	r6, r2
 80158f4:	460f      	mov	r7, r1
 80158f6:	461a      	mov	r2, r3
 80158f8:	7d01      	ldrb	r1, [r0, #20]
 80158fa:	4604      	mov	r4, r0
 80158fc:	f7fa f99e 	bl	800fc3c <ucdr_deserialize_endian_uint32_t>
 8015900:	682b      	ldr	r3, [r5, #0]
 8015902:	429e      	cmp	r6, r3
 8015904:	bf3c      	itt	cc
 8015906:	2201      	movcc	r2, #1
 8015908:	75a2      	strbcc	r2, [r4, #22]
 801590a:	b913      	cbnz	r3, 8015912 <ucdr_deserialize_sequence_uint8_t+0x26>
 801590c:	2001      	movs	r0, #1
 801590e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015912:	7d21      	ldrb	r1, [r4, #20]
 8015914:	463a      	mov	r2, r7
 8015916:	4620      	mov	r0, r4
 8015918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801591c:	f7ff bf76 	b.w	801580c <ucdr_deserialize_endian_array_uint8_t>

08015920 <ucdr_serialize_string>:
 8015920:	b510      	push	{r4, lr}
 8015922:	b082      	sub	sp, #8
 8015924:	4604      	mov	r4, r0
 8015926:	4608      	mov	r0, r1
 8015928:	9101      	str	r1, [sp, #4]
 801592a:	f7ea fc5b 	bl	80001e4 <strlen>
 801592e:	9901      	ldr	r1, [sp, #4]
 8015930:	1c42      	adds	r2, r0, #1
 8015932:	4620      	mov	r0, r4
 8015934:	b002      	add	sp, #8
 8015936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801593a:	f7ff bf99 	b.w	8015870 <ucdr_serialize_sequence_char>
 801593e:	bf00      	nop

08015940 <ucdr_deserialize_string>:
 8015940:	b500      	push	{lr}
 8015942:	b083      	sub	sp, #12
 8015944:	ab01      	add	r3, sp, #4
 8015946:	f7ff ffa5 	bl	8015894 <ucdr_deserialize_sequence_char>
 801594a:	b003      	add	sp, #12
 801594c:	f85d fb04 	ldr.w	pc, [sp], #4

08015950 <get_custom_error>:
 8015950:	4b01      	ldr	r3, [pc, #4]	; (8015958 <get_custom_error+0x8>)
 8015952:	7818      	ldrb	r0, [r3, #0]
 8015954:	4770      	bx	lr
 8015956:	bf00      	nop
 8015958:	2000e3e8 	.word	0x2000e3e8

0801595c <recv_custom_msg>:
 801595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015960:	4693      	mov	fp, r2
 8015962:	b089      	sub	sp, #36	; 0x24
 8015964:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8015968:	9305      	str	r3, [sp, #20]
 801596a:	468a      	mov	sl, r1
 801596c:	2100      	movs	r1, #0
 801596e:	4604      	mov	r4, r0
 8015970:	f88d 101e 	strb.w	r1, [sp, #30]
 8015974:	b322      	cbz	r2, 80159c0 <recv_custom_msg+0x64>
 8015976:	f200 2902 	addw	r9, r0, #514	; 0x202
 801597a:	f10d 081f 	add.w	r8, sp, #31
 801597e:	af05      	add	r7, sp, #20
 8015980:	f10d 061e 	add.w	r6, sp, #30
 8015984:	f44f 7500 	mov.w	r5, #512	; 0x200
 8015988:	e002      	b.n	8015990 <recv_custom_msg+0x34>
 801598a:	9b05      	ldr	r3, [sp, #20]
 801598c:	2b00      	cmp	r3, #0
 801598e:	dd0f      	ble.n	80159b0 <recv_custom_msg+0x54>
 8015990:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8015994:	4623      	mov	r3, r4
 8015996:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801599a:	e9cd 5600 	strd	r5, r6, [sp]
 801599e:	4622      	mov	r2, r4
 80159a0:	4648      	mov	r0, r9
 80159a2:	f001 f92d 	bl	8016c00 <uxr_read_framed_msg>
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d0ef      	beq.n	801598a <recv_custom_msg+0x2e>
 80159aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80159ae:	b1b3      	cbz	r3, 80159de <recv_custom_msg+0x82>
 80159b0:	4b0f      	ldr	r3, [pc, #60]	; (80159f0 <recv_custom_msg+0x94>)
 80159b2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80159b6:	701a      	strb	r2, [r3, #0]
 80159b8:	2000      	movs	r0, #0
 80159ba:	b009      	add	sp, #36	; 0x24
 80159bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c0:	f10d 021f 	add.w	r2, sp, #31
 80159c4:	9200      	str	r2, [sp, #0]
 80159c6:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80159ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80159ce:	4601      	mov	r1, r0
 80159d0:	47a8      	blx	r5
 80159d2:	2800      	cmp	r0, #0
 80159d4:	d0ec      	beq.n	80159b0 <recv_custom_msg+0x54>
 80159d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d1e8      	bne.n	80159b0 <recv_custom_msg+0x54>
 80159de:	f8cb 0000 	str.w	r0, [fp]
 80159e2:	2001      	movs	r0, #1
 80159e4:	f8ca 4000 	str.w	r4, [sl]
 80159e8:	b009      	add	sp, #36	; 0x24
 80159ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ee:	bf00      	nop
 80159f0:	2000e3e8 	.word	0x2000e3e8

080159f4 <send_custom_msg>:
 80159f4:	b530      	push	{r4, r5, lr}
 80159f6:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 80159fa:	b087      	sub	sp, #28
 80159fc:	4615      	mov	r5, r2
 80159fe:	b974      	cbnz	r4, 8015a1e <send_custom_msg+0x2a>
 8015a00:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8015a04:	f10d 0317 	add.w	r3, sp, #23
 8015a08:	47a0      	blx	r4
 8015a0a:	b108      	cbz	r0, 8015a10 <send_custom_msg+0x1c>
 8015a0c:	42a8      	cmp	r0, r5
 8015a0e:	d015      	beq.n	8015a3c <send_custom_msg+0x48>
 8015a10:	4b0c      	ldr	r3, [pc, #48]	; (8015a44 <send_custom_msg+0x50>)
 8015a12:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015a16:	701a      	strb	r2, [r3, #0]
 8015a18:	2000      	movs	r0, #0
 8015a1a:	b007      	add	sp, #28
 8015a1c:	bd30      	pop	{r4, r5, pc}
 8015a1e:	460b      	mov	r3, r1
 8015a20:	2200      	movs	r2, #0
 8015a22:	f10d 0117 	add.w	r1, sp, #23
 8015a26:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015a2a:	4602      	mov	r2, r0
 8015a2c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8015a30:	9500      	str	r5, [sp, #0]
 8015a32:	f200 2002 	addw	r0, r0, #514	; 0x202
 8015a36:	f000 feeb 	bl	8016810 <uxr_write_framed_msg>
 8015a3a:	e7e6      	b.n	8015a0a <send_custom_msg+0x16>
 8015a3c:	2001      	movs	r0, #1
 8015a3e:	b007      	add	sp, #28
 8015a40:	bd30      	pop	{r4, r5, pc}
 8015a42:	bf00      	nop
 8015a44:	2000e3e8 	.word	0x2000e3e8

08015a48 <uxr_set_custom_transport_callbacks>:
 8015a48:	b410      	push	{r4}
 8015a4a:	9c01      	ldr	r4, [sp, #4]
 8015a4c:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8015a50:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8015a54:	9b02      	ldr	r3, [sp, #8]
 8015a56:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8015a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a5e:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8015a62:	4770      	bx	lr

08015a64 <uxr_init_custom_transport>:
 8015a64:	b538      	push	{r3, r4, r5, lr}
 8015a66:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8015a6a:	b303      	cbz	r3, 8015aae <uxr_init_custom_transport+0x4a>
 8015a6c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8015a70:	4604      	mov	r4, r0
 8015a72:	b1e2      	cbz	r2, 8015aae <uxr_init_custom_transport+0x4a>
 8015a74:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8015a78:	b1ca      	cbz	r2, 8015aae <uxr_init_custom_transport+0x4a>
 8015a7a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8015a7e:	b1b2      	cbz	r2, 8015aae <uxr_init_custom_transport+0x4a>
 8015a80:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8015a84:	4798      	blx	r3
 8015a86:	4605      	mov	r5, r0
 8015a88:	b188      	cbz	r0, 8015aae <uxr_init_custom_transport+0x4a>
 8015a8a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8015a8e:	b98b      	cbnz	r3, 8015ab4 <uxr_init_custom_transport+0x50>
 8015a90:	490b      	ldr	r1, [pc, #44]	; (8015ac0 <uxr_init_custom_transport+0x5c>)
 8015a92:	4b0c      	ldr	r3, [pc, #48]	; (8015ac4 <uxr_init_custom_transport+0x60>)
 8015a94:	4a0c      	ldr	r2, [pc, #48]	; (8015ac8 <uxr_init_custom_transport+0x64>)
 8015a96:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8015a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015a9e:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8015aa2:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8015aa6:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8015aaa:	4628      	mov	r0, r5
 8015aac:	bd38      	pop	{r3, r4, r5, pc}
 8015aae:	2500      	movs	r5, #0
 8015ab0:	4628      	mov	r0, r5
 8015ab2:	bd38      	pop	{r3, r4, r5, pc}
 8015ab4:	2100      	movs	r1, #0
 8015ab6:	f204 2002 	addw	r0, r4, #514	; 0x202
 8015aba:	f000 fea3 	bl	8016804 <uxr_init_framing_io>
 8015abe:	e7e7      	b.n	8015a90 <uxr_init_custom_transport+0x2c>
 8015ac0:	080159f5 	.word	0x080159f5
 8015ac4:	0801595d 	.word	0x0801595d
 8015ac8:	08015951 	.word	0x08015951

08015acc <uxr_close_custom_transport>:
 8015acc:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8015ad0:	4718      	bx	r3
 8015ad2:	bf00      	nop

08015ad4 <uxr_init_input_best_effort_stream>:
 8015ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ad8:	8003      	strh	r3, [r0, #0]
 8015ada:	4770      	bx	lr

08015adc <uxr_reset_input_best_effort_stream>:
 8015adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ae0:	8003      	strh	r3, [r0, #0]
 8015ae2:	4770      	bx	lr

08015ae4 <uxr_receive_best_effort_message>:
 8015ae4:	b538      	push	{r3, r4, r5, lr}
 8015ae6:	4604      	mov	r4, r0
 8015ae8:	8800      	ldrh	r0, [r0, #0]
 8015aea:	460d      	mov	r5, r1
 8015aec:	f000 fe72 	bl	80167d4 <uxr_seq_num_cmp>
 8015af0:	4603      	mov	r3, r0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015af8:	bfb8      	it	lt
 8015afa:	8025      	strhlt	r5, [r4, #0]
 8015afc:	bd38      	pop	{r3, r4, r5, pc}
 8015afe:	bf00      	nop

08015b00 <on_full_input_buffer>:
 8015b00:	b570      	push	{r4, r5, r6, lr}
 8015b02:	4605      	mov	r5, r0
 8015b04:	460c      	mov	r4, r1
 8015b06:	682b      	ldr	r3, [r5, #0]
 8015b08:	6809      	ldr	r1, [r1, #0]
 8015b0a:	8920      	ldrh	r0, [r4, #8]
 8015b0c:	6862      	ldr	r2, [r4, #4]
 8015b0e:	fbb2 f2f0 	udiv	r2, r2, r0
 8015b12:	eba3 0c01 	sub.w	ip, r3, r1
 8015b16:	fbbc fcf2 	udiv	ip, ip, r2
 8015b1a:	f10c 0c01 	add.w	ip, ip, #1
 8015b1e:	fa1f f38c 	uxth.w	r3, ip
 8015b22:	fbb3 f6f0 	udiv	r6, r3, r0
 8015b26:	fb00 3316 	mls	r3, r0, r6, r3
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	fb02 f303 	mul.w	r3, r2, r3
 8015b30:	1d18      	adds	r0, r3, #4
 8015b32:	4408      	add	r0, r1
 8015b34:	7d26      	ldrb	r6, [r4, #20]
 8015b36:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015b3a:	b116      	cbz	r6, 8015b42 <on_full_input_buffer+0x42>
 8015b3c:	2600      	movs	r6, #0
 8015b3e:	f840 6c04 	str.w	r6, [r0, #-4]
 8015b42:	2a03      	cmp	r2, #3
 8015b44:	d801      	bhi.n	8015b4a <on_full_input_buffer+0x4a>
 8015b46:	2001      	movs	r0, #1
 8015b48:	bd70      	pop	{r4, r5, r6, pc}
 8015b4a:	3308      	adds	r3, #8
 8015b4c:	4419      	add	r1, r3
 8015b4e:	4628      	mov	r0, r5
 8015b50:	692b      	ldr	r3, [r5, #16]
 8015b52:	3a04      	subs	r2, #4
 8015b54:	f7fa fc40 	bl	80103d8 <ucdr_init_buffer_origin>
 8015b58:	4628      	mov	r0, r5
 8015b5a:	4903      	ldr	r1, [pc, #12]	; (8015b68 <on_full_input_buffer+0x68>)
 8015b5c:	4622      	mov	r2, r4
 8015b5e:	f7fa fc17 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8015b62:	2000      	movs	r0, #0
 8015b64:	bd70      	pop	{r4, r5, r6, pc}
 8015b66:	bf00      	nop
 8015b68:	08015b01 	.word	0x08015b01

08015b6c <uxr_init_input_reliable_stream>:
 8015b6c:	b500      	push	{lr}
 8015b6e:	e9c0 1200 	strd	r1, r2, [r0]
 8015b72:	f04f 0e00 	mov.w	lr, #0
 8015b76:	9a01      	ldr	r2, [sp, #4]
 8015b78:	8103      	strh	r3, [r0, #8]
 8015b7a:	6102      	str	r2, [r0, #16]
 8015b7c:	f880 e014 	strb.w	lr, [r0, #20]
 8015b80:	b1d3      	cbz	r3, 8015bb8 <uxr_init_input_reliable_stream+0x4c>
 8015b82:	f8c1 e000 	str.w	lr, [r1]
 8015b86:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015b8a:	f1bc 0f01 	cmp.w	ip, #1
 8015b8e:	d913      	bls.n	8015bb8 <uxr_init_input_reliable_stream+0x4c>
 8015b90:	2301      	movs	r3, #1
 8015b92:	fbb3 f1fc 	udiv	r1, r3, ip
 8015b96:	fb0c 3111 	mls	r1, ip, r1, r3
 8015b9a:	b289      	uxth	r1, r1
 8015b9c:	6842      	ldr	r2, [r0, #4]
 8015b9e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015ba2:	fb01 f202 	mul.w	r2, r1, r2
 8015ba6:	6801      	ldr	r1, [r0, #0]
 8015ba8:	f841 e002 	str.w	lr, [r1, r2]
 8015bac:	3301      	adds	r3, #1
 8015bae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	459c      	cmp	ip, r3
 8015bb6:	d8ec      	bhi.n	8015b92 <uxr_init_input_reliable_stream+0x26>
 8015bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bbc:	60c3      	str	r3, [r0, #12]
 8015bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bc2:	bf00      	nop

08015bc4 <uxr_reset_input_reliable_stream>:
 8015bc4:	8901      	ldrh	r1, [r0, #8]
 8015bc6:	b1e9      	cbz	r1, 8015c04 <uxr_reset_input_reliable_stream+0x40>
 8015bc8:	f04f 0c00 	mov.w	ip, #0
 8015bcc:	b500      	push	{lr}
 8015bce:	4663      	mov	r3, ip
 8015bd0:	46e6      	mov	lr, ip
 8015bd2:	fbb3 f2f1 	udiv	r2, r3, r1
 8015bd6:	fb01 3312 	mls	r3, r1, r2, r3
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	6842      	ldr	r2, [r0, #4]
 8015bde:	fbb2 f2f1 	udiv	r2, r2, r1
 8015be2:	fb02 f303 	mul.w	r3, r2, r3
 8015be6:	6802      	ldr	r2, [r0, #0]
 8015be8:	f842 e003 	str.w	lr, [r2, r3]
 8015bec:	f10c 0c01 	add.w	ip, ip, #1
 8015bf0:	8901      	ldrh	r1, [r0, #8]
 8015bf2:	fa1f f38c 	uxth.w	r3, ip
 8015bf6:	4299      	cmp	r1, r3
 8015bf8:	d8eb      	bhi.n	8015bd2 <uxr_reset_input_reliable_stream+0xe>
 8015bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bfe:	60c3      	str	r3, [r0, #12]
 8015c00:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c08:	60c3      	str	r3, [r0, #12]
 8015c0a:	4770      	bx	lr

08015c0c <uxr_receive_reliable_message>:
 8015c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c10:	4604      	mov	r4, r0
 8015c12:	460d      	mov	r5, r1
 8015c14:	8901      	ldrh	r1, [r0, #8]
 8015c16:	8980      	ldrh	r0, [r0, #12]
 8015c18:	4690      	mov	r8, r2
 8015c1a:	461f      	mov	r7, r3
 8015c1c:	f000 fdd2 	bl	80167c4 <uxr_seq_num_add>
 8015c20:	4629      	mov	r1, r5
 8015c22:	4606      	mov	r6, r0
 8015c24:	89a0      	ldrh	r0, [r4, #12]
 8015c26:	f000 fdd5 	bl	80167d4 <uxr_seq_num_cmp>
 8015c2a:	2800      	cmp	r0, #0
 8015c2c:	db0a      	blt.n	8015c44 <uxr_receive_reliable_message+0x38>
 8015c2e:	2600      	movs	r6, #0
 8015c30:	89e0      	ldrh	r0, [r4, #14]
 8015c32:	4629      	mov	r1, r5
 8015c34:	f000 fdce 	bl	80167d4 <uxr_seq_num_cmp>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	da00      	bge.n	8015c3e <uxr_receive_reliable_message+0x32>
 8015c3c:	81e5      	strh	r5, [r4, #14]
 8015c3e:	4630      	mov	r0, r6
 8015c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c44:	4630      	mov	r0, r6
 8015c46:	4629      	mov	r1, r5
 8015c48:	f000 fdc4 	bl	80167d4 <uxr_seq_num_cmp>
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	dbee      	blt.n	8015c2e <uxr_receive_reliable_message+0x22>
 8015c50:	6923      	ldr	r3, [r4, #16]
 8015c52:	4640      	mov	r0, r8
 8015c54:	4798      	blx	r3
 8015c56:	2101      	movs	r1, #1
 8015c58:	4681      	mov	r9, r0
 8015c5a:	89a0      	ldrh	r0, [r4, #12]
 8015c5c:	f000 fdb2 	bl	80167c4 <uxr_seq_num_add>
 8015c60:	f1b9 0f00 	cmp.w	r9, #0
 8015c64:	d101      	bne.n	8015c6a <uxr_receive_reliable_message+0x5e>
 8015c66:	4285      	cmp	r5, r0
 8015c68:	d047      	beq.n	8015cfa <uxr_receive_reliable_message+0xee>
 8015c6a:	8922      	ldrh	r2, [r4, #8]
 8015c6c:	fbb5 f0f2 	udiv	r0, r5, r2
 8015c70:	fb02 5010 	mls	r0, r2, r0, r5
 8015c74:	b280      	uxth	r0, r0
 8015c76:	6863      	ldr	r3, [r4, #4]
 8015c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c7c:	fb00 f303 	mul.w	r3, r0, r3
 8015c80:	6820      	ldr	r0, [r4, #0]
 8015c82:	3304      	adds	r3, #4
 8015c84:	4418      	add	r0, r3
 8015c86:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d1cf      	bne.n	8015c2e <uxr_receive_reliable_message+0x22>
 8015c8e:	4641      	mov	r1, r8
 8015c90:	463a      	mov	r2, r7
 8015c92:	f002 fb2d 	bl	80182f0 <memcpy>
 8015c96:	8921      	ldrh	r1, [r4, #8]
 8015c98:	fbb5 f2f1 	udiv	r2, r5, r1
 8015c9c:	fb01 5212 	mls	r2, r1, r2, r5
 8015ca0:	b292      	uxth	r2, r2
 8015ca2:	6863      	ldr	r3, [r4, #4]
 8015ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ca8:	fb02 f303 	mul.w	r3, r2, r3
 8015cac:	6822      	ldr	r2, [r4, #0]
 8015cae:	50d7      	str	r7, [r2, r3]
 8015cb0:	9a08      	ldr	r2, [sp, #32]
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	7013      	strb	r3, [r2, #0]
 8015cb6:	f1b9 0f00 	cmp.w	r9, #0
 8015cba:	d0b8      	beq.n	8015c2e <uxr_receive_reliable_message+0x22>
 8015cbc:	89a6      	ldrh	r6, [r4, #12]
 8015cbe:	4630      	mov	r0, r6
 8015cc0:	2101      	movs	r1, #1
 8015cc2:	f000 fd7f 	bl	80167c4 <uxr_seq_num_add>
 8015cc6:	8922      	ldrh	r2, [r4, #8]
 8015cc8:	6863      	ldr	r3, [r4, #4]
 8015cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8015cce:	4606      	mov	r6, r0
 8015cd0:	fbb0 f0f2 	udiv	r0, r0, r2
 8015cd4:	fb02 6010 	mls	r0, r2, r0, r6
 8015cd8:	b280      	uxth	r0, r0
 8015cda:	fb00 f303 	mul.w	r3, r0, r3
 8015cde:	6820      	ldr	r0, [r4, #0]
 8015ce0:	3304      	adds	r3, #4
 8015ce2:	4418      	add	r0, r3
 8015ce4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d0a0      	beq.n	8015c2e <uxr_receive_reliable_message+0x22>
 8015cec:	6923      	ldr	r3, [r4, #16]
 8015cee:	4798      	blx	r3
 8015cf0:	2802      	cmp	r0, #2
 8015cf2:	d008      	beq.n	8015d06 <uxr_receive_reliable_message+0xfa>
 8015cf4:	2801      	cmp	r0, #1
 8015cf6:	d0e2      	beq.n	8015cbe <uxr_receive_reliable_message+0xb2>
 8015cf8:	e799      	b.n	8015c2e <uxr_receive_reliable_message+0x22>
 8015cfa:	9b08      	ldr	r3, [sp, #32]
 8015cfc:	81a5      	strh	r5, [r4, #12]
 8015cfe:	2601      	movs	r6, #1
 8015d00:	f883 9000 	strb.w	r9, [r3]
 8015d04:	e794      	b.n	8015c30 <uxr_receive_reliable_message+0x24>
 8015d06:	2601      	movs	r6, #1
 8015d08:	e792      	b.n	8015c30 <uxr_receive_reliable_message+0x24>
 8015d0a:	bf00      	nop

08015d0c <uxr_next_input_reliable_buffer_available>:
 8015d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d10:	4604      	mov	r4, r0
 8015d12:	460f      	mov	r7, r1
 8015d14:	8980      	ldrh	r0, [r0, #12]
 8015d16:	2101      	movs	r1, #1
 8015d18:	4690      	mov	r8, r2
 8015d1a:	f000 fd53 	bl	80167c4 <uxr_seq_num_add>
 8015d1e:	8922      	ldrh	r2, [r4, #8]
 8015d20:	fbb0 f6f2 	udiv	r6, r0, r2
 8015d24:	fb02 0616 	mls	r6, r2, r6, r0
 8015d28:	b2b6      	uxth	r6, r6
 8015d2a:	6863      	ldr	r3, [r4, #4]
 8015d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d30:	fb06 f303 	mul.w	r3, r6, r3
 8015d34:	6826      	ldr	r6, [r4, #0]
 8015d36:	3304      	adds	r3, #4
 8015d38:	441e      	add	r6, r3
 8015d3a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015d3e:	f1b9 0f00 	cmp.w	r9, #0
 8015d42:	d023      	beq.n	8015d8c <uxr_next_input_reliable_buffer_available+0x80>
 8015d44:	6923      	ldr	r3, [r4, #16]
 8015d46:	4605      	mov	r5, r0
 8015d48:	4630      	mov	r0, r6
 8015d4a:	4798      	blx	r3
 8015d4c:	4682      	mov	sl, r0
 8015d4e:	b300      	cbz	r0, 8015d92 <uxr_next_input_reliable_buffer_available+0x86>
 8015d50:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015d54:	2101      	movs	r1, #1
 8015d56:	4650      	mov	r0, sl
 8015d58:	f000 fd34 	bl	80167c4 <uxr_seq_num_add>
 8015d5c:	8921      	ldrh	r1, [r4, #8]
 8015d5e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015d62:	4682      	mov	sl, r0
 8015d64:	fb01 0212 	mls	r2, r1, r2, r0
 8015d68:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015d6c:	b292      	uxth	r2, r2
 8015d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d72:	fb02 f303 	mul.w	r3, r2, r3
 8015d76:	3304      	adds	r3, #4
 8015d78:	4418      	add	r0, r3
 8015d7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015d7e:	b12b      	cbz	r3, 8015d8c <uxr_next_input_reliable_buffer_available+0x80>
 8015d80:	6923      	ldr	r3, [r4, #16]
 8015d82:	4798      	blx	r3
 8015d84:	2802      	cmp	r0, #2
 8015d86:	d01b      	beq.n	8015dc0 <uxr_next_input_reliable_buffer_available+0xb4>
 8015d88:	2801      	cmp	r0, #1
 8015d8a:	d0e3      	beq.n	8015d54 <uxr_next_input_reliable_buffer_available+0x48>
 8015d8c:	2000      	movs	r0, #0
 8015d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d92:	464a      	mov	r2, r9
 8015d94:	4631      	mov	r1, r6
 8015d96:	4638      	mov	r0, r7
 8015d98:	f7fa fb26 	bl	80103e8 <ucdr_init_buffer>
 8015d9c:	8921      	ldrh	r1, [r4, #8]
 8015d9e:	fbb5 f2f1 	udiv	r2, r5, r1
 8015da2:	fb01 5212 	mls	r2, r1, r2, r5
 8015da6:	b292      	uxth	r2, r2
 8015da8:	6863      	ldr	r3, [r4, #4]
 8015daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8015dae:	fb02 f303 	mul.w	r3, r2, r3
 8015db2:	6822      	ldr	r2, [r4, #0]
 8015db4:	f842 a003 	str.w	sl, [r2, r3]
 8015db8:	2001      	movs	r0, #1
 8015dba:	81a5      	strh	r5, [r4, #12]
 8015dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dc0:	8920      	ldrh	r0, [r4, #8]
 8015dc2:	fbb5 f3f0 	udiv	r3, r5, r0
 8015dc6:	fb00 5513 	mls	r5, r0, r3, r5
 8015dca:	b2ad      	uxth	r5, r5
 8015dcc:	6863      	ldr	r3, [r4, #4]
 8015dce:	fbb3 f3f0 	udiv	r3, r3, r0
 8015dd2:	fb03 f505 	mul.w	r5, r3, r5
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	2000      	movs	r0, #0
 8015dda:	5158      	str	r0, [r3, r5]
 8015ddc:	eb06 0108 	add.w	r1, r6, r8
 8015de0:	eba9 0208 	sub.w	r2, r9, r8
 8015de4:	4638      	mov	r0, r7
 8015de6:	f7fa faff 	bl	80103e8 <ucdr_init_buffer>
 8015dea:	4638      	mov	r0, r7
 8015dec:	4903      	ldr	r1, [pc, #12]	; (8015dfc <uxr_next_input_reliable_buffer_available+0xf0>)
 8015dee:	4622      	mov	r2, r4
 8015df0:	f7fa face 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8015df4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015df8:	2001      	movs	r0, #1
 8015dfa:	e7c8      	b.n	8015d8e <uxr_next_input_reliable_buffer_available+0x82>
 8015dfc:	08015b01 	.word	0x08015b01

08015e00 <uxr_process_heartbeat>:
 8015e00:	b538      	push	{r3, r4, r5, lr}
 8015e02:	4611      	mov	r1, r2
 8015e04:	4604      	mov	r4, r0
 8015e06:	89c0      	ldrh	r0, [r0, #14]
 8015e08:	4615      	mov	r5, r2
 8015e0a:	f000 fce3 	bl	80167d4 <uxr_seq_num_cmp>
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	bfb8      	it	lt
 8015e12:	81e5      	strhlt	r5, [r4, #14]
 8015e14:	bd38      	pop	{r3, r4, r5, pc}
 8015e16:	bf00      	nop

08015e18 <uxr_compute_acknack>:
 8015e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e1c:	8903      	ldrh	r3, [r0, #8]
 8015e1e:	8985      	ldrh	r5, [r0, #12]
 8015e20:	4604      	mov	r4, r0
 8015e22:	460e      	mov	r6, r1
 8015e24:	b1d3      	cbz	r3, 8015e5c <uxr_compute_acknack+0x44>
 8015e26:	4628      	mov	r0, r5
 8015e28:	2701      	movs	r7, #1
 8015e2a:	e003      	b.n	8015e34 <uxr_compute_acknack+0x1c>
 8015e2c:	4567      	cmp	r7, ip
 8015e2e:	d215      	bcs.n	8015e5c <uxr_compute_acknack+0x44>
 8015e30:	89a0      	ldrh	r0, [r4, #12]
 8015e32:	3701      	adds	r7, #1
 8015e34:	b2b9      	uxth	r1, r7
 8015e36:	f000 fcc5 	bl	80167c4 <uxr_seq_num_add>
 8015e3a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015e3e:	fbb0 f3fc 	udiv	r3, r0, ip
 8015e42:	fb0c 0313 	mls	r3, ip, r3, r0
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015e4c:	fbb3 f3fc 	udiv	r3, r3, ip
 8015e50:	fb02 f303 	mul.w	r3, r2, r3
 8015e54:	58cb      	ldr	r3, [r1, r3]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d1e8      	bne.n	8015e2c <uxr_compute_acknack+0x14>
 8015e5a:	4605      	mov	r5, r0
 8015e5c:	8035      	strh	r5, [r6, #0]
 8015e5e:	2101      	movs	r1, #1
 8015e60:	4628      	mov	r0, r5
 8015e62:	89e7      	ldrh	r7, [r4, #14]
 8015e64:	f000 fcb2 	bl	80167cc <uxr_seq_num_sub>
 8015e68:	4601      	mov	r1, r0
 8015e6a:	4638      	mov	r0, r7
 8015e6c:	f000 fcae 	bl	80167cc <uxr_seq_num_sub>
 8015e70:	4605      	mov	r5, r0
 8015e72:	b318      	cbz	r0, 8015ebc <uxr_compute_acknack+0xa4>
 8015e74:	f04f 0900 	mov.w	r9, #0
 8015e78:	464f      	mov	r7, r9
 8015e7a:	f04f 0801 	mov.w	r8, #1
 8015e7e:	fa1f f189 	uxth.w	r1, r9
 8015e82:	8830      	ldrh	r0, [r6, #0]
 8015e84:	f000 fc9e 	bl	80167c4 <uxr_seq_num_add>
 8015e88:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015e8c:	fbb0 f3fc 	udiv	r3, r0, ip
 8015e90:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015e94:	fb03 001c 	mls	r0, r3, ip, r0
 8015e98:	b283      	uxth	r3, r0
 8015e9a:	fbb2 f2fc 	udiv	r2, r2, ip
 8015e9e:	fb02 f303 	mul.w	r3, r2, r3
 8015ea2:	fa08 f209 	lsl.w	r2, r8, r9
 8015ea6:	58cb      	ldr	r3, [r1, r3]
 8015ea8:	f109 0901 	add.w	r9, r9, #1
 8015eac:	b90b      	cbnz	r3, 8015eb2 <uxr_compute_acknack+0x9a>
 8015eae:	4317      	orrs	r7, r2
 8015eb0:	b2bf      	uxth	r7, r7
 8015eb2:	454d      	cmp	r5, r9
 8015eb4:	d1e3      	bne.n	8015e7e <uxr_compute_acknack+0x66>
 8015eb6:	4638      	mov	r0, r7
 8015eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ebc:	4607      	mov	r7, r0
 8015ebe:	4638      	mov	r0, r7
 8015ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015ec4 <uxr_init_output_best_effort_stream>:
 8015ec4:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8015ec8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015ecc:	6001      	str	r1, [r0, #0]
 8015ece:	7303      	strb	r3, [r0, #12]
 8015ed0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015ed4:	4770      	bx	lr
 8015ed6:	bf00      	nop

08015ed8 <uxr_reset_output_best_effort_stream>:
 8015ed8:	7b02      	ldrb	r2, [r0, #12]
 8015eda:	6042      	str	r2, [r0, #4]
 8015edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ee0:	81c3      	strh	r3, [r0, #14]
 8015ee2:	4770      	bx	lr

08015ee4 <uxr_prepare_best_effort_buffer_to_write>:
 8015ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ee6:	4604      	mov	r4, r0
 8015ee8:	b083      	sub	sp, #12
 8015eea:	6840      	ldr	r0, [r0, #4]
 8015eec:	460d      	mov	r5, r1
 8015eee:	4616      	mov	r6, r2
 8015ef0:	f7fb feec 	bl	8011ccc <uxr_submessage_padding>
 8015ef4:	6863      	ldr	r3, [r4, #4]
 8015ef6:	4418      	add	r0, r3
 8015ef8:	68a3      	ldr	r3, [r4, #8]
 8015efa:	1942      	adds	r2, r0, r5
 8015efc:	4293      	cmp	r3, r2
 8015efe:	bf2c      	ite	cs
 8015f00:	2701      	movcs	r7, #1
 8015f02:	2700      	movcc	r7, #0
 8015f04:	d202      	bcs.n	8015f0c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015f06:	4638      	mov	r0, r7
 8015f08:	b003      	add	sp, #12
 8015f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f0c:	9000      	str	r0, [sp, #0]
 8015f0e:	6821      	ldr	r1, [r4, #0]
 8015f10:	4630      	mov	r0, r6
 8015f12:	2300      	movs	r3, #0
 8015f14:	f7fa fa56 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 8015f18:	6861      	ldr	r1, [r4, #4]
 8015f1a:	4638      	mov	r0, r7
 8015f1c:	4429      	add	r1, r5
 8015f1e:	6061      	str	r1, [r4, #4]
 8015f20:	b003      	add	sp, #12
 8015f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f24 <uxr_prepare_best_effort_buffer_to_send>:
 8015f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f28:	4604      	mov	r4, r0
 8015f2a:	461d      	mov	r5, r3
 8015f2c:	6840      	ldr	r0, [r0, #4]
 8015f2e:	7b23      	ldrb	r3, [r4, #12]
 8015f30:	4298      	cmp	r0, r3
 8015f32:	bf8c      	ite	hi
 8015f34:	2601      	movhi	r6, #1
 8015f36:	2600      	movls	r6, #0
 8015f38:	d802      	bhi.n	8015f40 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015f3a:	4630      	mov	r0, r6
 8015f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f40:	4688      	mov	r8, r1
 8015f42:	89e0      	ldrh	r0, [r4, #14]
 8015f44:	2101      	movs	r1, #1
 8015f46:	4617      	mov	r7, r2
 8015f48:	f000 fc3c 	bl	80167c4 <uxr_seq_num_add>
 8015f4c:	6823      	ldr	r3, [r4, #0]
 8015f4e:	81e0      	strh	r0, [r4, #14]
 8015f50:	8028      	strh	r0, [r5, #0]
 8015f52:	f8c8 3000 	str.w	r3, [r8]
 8015f56:	6863      	ldr	r3, [r4, #4]
 8015f58:	603b      	str	r3, [r7, #0]
 8015f5a:	7b23      	ldrb	r3, [r4, #12]
 8015f5c:	6063      	str	r3, [r4, #4]
 8015f5e:	4630      	mov	r0, r6
 8015f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f64 <on_full_output_buffer>:
 8015f64:	b538      	push	{r3, r4, r5, lr}
 8015f66:	6802      	ldr	r2, [r0, #0]
 8015f68:	460c      	mov	r4, r1
 8015f6a:	6809      	ldr	r1, [r1, #0]
 8015f6c:	8923      	ldrh	r3, [r4, #8]
 8015f6e:	eba2 0c01 	sub.w	ip, r2, r1
 8015f72:	6862      	ldr	r2, [r4, #4]
 8015f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8015f78:	fbbc fcf2 	udiv	ip, ip, r2
 8015f7c:	f10c 0c01 	add.w	ip, ip, #1
 8015f80:	fa1f fc8c 	uxth.w	ip, ip
 8015f84:	fbbc fef3 	udiv	lr, ip, r3
 8015f88:	fb03 c31e 	mls	r3, r3, lr, ip
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	fb02 f303 	mul.w	r3, r2, r3
 8015f92:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015f96:	58ca      	ldr	r2, [r1, r3]
 8015f98:	4463      	add	r3, ip
 8015f9a:	eba2 020c 	sub.w	r2, r2, ip
 8015f9e:	3308      	adds	r3, #8
 8015fa0:	4605      	mov	r5, r0
 8015fa2:	4419      	add	r1, r3
 8015fa4:	3a04      	subs	r2, #4
 8015fa6:	6903      	ldr	r3, [r0, #16]
 8015fa8:	f7fa fa16 	bl	80103d8 <ucdr_init_buffer_origin>
 8015fac:	4628      	mov	r0, r5
 8015fae:	4903      	ldr	r1, [pc, #12]	; (8015fbc <on_full_output_buffer+0x58>)
 8015fb0:	4622      	mov	r2, r4
 8015fb2:	f7fa f9ed 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8015fb6:	2000      	movs	r0, #0
 8015fb8:	bd38      	pop	{r3, r4, r5, pc}
 8015fba:	bf00      	nop
 8015fbc:	08015f65 	.word	0x08015f65

08015fc0 <uxr_init_output_reliable_stream>:
 8015fc0:	b410      	push	{r4}
 8015fc2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015fc6:	8103      	strh	r3, [r0, #8]
 8015fc8:	e9c0 1200 	strd	r1, r2, [r0]
 8015fcc:	f880 c00c 	strb.w	ip, [r0, #12]
 8015fd0:	b1d3      	cbz	r3, 8016008 <uxr_init_output_reliable_stream+0x48>
 8015fd2:	f8c1 c000 	str.w	ip, [r1]
 8015fd6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015fda:	f1bc 0f01 	cmp.w	ip, #1
 8015fde:	d913      	bls.n	8016008 <uxr_init_output_reliable_stream+0x48>
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	fbb3 f1fc 	udiv	r1, r3, ip
 8015fe6:	fb0c 3111 	mls	r1, ip, r1, r3
 8015fea:	b289      	uxth	r1, r1
 8015fec:	6842      	ldr	r2, [r0, #4]
 8015fee:	6804      	ldr	r4, [r0, #0]
 8015ff0:	fbb2 f2fc 	udiv	r2, r2, ip
 8015ff4:	fb01 f202 	mul.w	r2, r1, r2
 8015ff8:	7b01      	ldrb	r1, [r0, #12]
 8015ffa:	50a1      	str	r1, [r4, r2]
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016002:	b29b      	uxth	r3, r3
 8016004:	459c      	cmp	ip, r3
 8016006:	d8ec      	bhi.n	8015fe2 <uxr_init_output_reliable_stream+0x22>
 8016008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801600c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016010:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016014:	4905      	ldr	r1, [pc, #20]	; (801602c <uxr_init_output_reliable_stream+0x6c>)
 8016016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801601a:	f8c0 100e 	str.w	r1, [r0, #14]
 801601e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016022:	2300      	movs	r3, #0
 8016024:	8242      	strh	r2, [r0, #18]
 8016026:	8403      	strh	r3, [r0, #32]
 8016028:	4770      	bx	lr
 801602a:	bf00      	nop
 801602c:	ffff0000 	.word	0xffff0000

08016030 <uxr_reset_output_reliable_stream>:
 8016030:	8901      	ldrh	r1, [r0, #8]
 8016032:	b1b1      	cbz	r1, 8016062 <uxr_reset_output_reliable_stream+0x32>
 8016034:	f04f 0c00 	mov.w	ip, #0
 8016038:	4663      	mov	r3, ip
 801603a:	fbb3 f2f1 	udiv	r2, r3, r1
 801603e:	fb01 3312 	mls	r3, r1, r2, r3
 8016042:	b29b      	uxth	r3, r3
 8016044:	6842      	ldr	r2, [r0, #4]
 8016046:	fbb2 f2f1 	udiv	r2, r2, r1
 801604a:	6801      	ldr	r1, [r0, #0]
 801604c:	fb02 f303 	mul.w	r3, r2, r3
 8016050:	7b02      	ldrb	r2, [r0, #12]
 8016052:	50ca      	str	r2, [r1, r3]
 8016054:	f10c 0c01 	add.w	ip, ip, #1
 8016058:	8901      	ldrh	r1, [r0, #8]
 801605a:	fa1f f38c 	uxth.w	r3, ip
 801605e:	4299      	cmp	r1, r3
 8016060:	d8eb      	bhi.n	801603a <uxr_reset_output_reliable_stream+0xa>
 8016062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016066:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801606a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801606e:	4904      	ldr	r1, [pc, #16]	; (8016080 <uxr_reset_output_reliable_stream+0x50>)
 8016070:	f8c0 100e 	str.w	r1, [r0, #14]
 8016074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016078:	2300      	movs	r3, #0
 801607a:	8242      	strh	r2, [r0, #18]
 801607c:	8403      	strh	r3, [r0, #32]
 801607e:	4770      	bx	lr
 8016080:	ffff0000 	.word	0xffff0000

08016084 <uxr_prepare_reliable_buffer_to_write>:
 8016084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016088:	4604      	mov	r4, r0
 801608a:	b091      	sub	sp, #68	; 0x44
 801608c:	8900      	ldrh	r0, [r0, #8]
 801608e:	89e6      	ldrh	r6, [r4, #14]
 8016090:	6823      	ldr	r3, [r4, #0]
 8016092:	9204      	str	r2, [sp, #16]
 8016094:	fbb6 f2f0 	udiv	r2, r6, r0
 8016098:	fb00 6212 	mls	r2, r0, r2, r6
 801609c:	b292      	uxth	r2, r2
 801609e:	6865      	ldr	r5, [r4, #4]
 80160a0:	fbb5 f5f0 	udiv	r5, r5, r0
 80160a4:	fb05 3202 	mla	r2, r5, r2, r3
 80160a8:	3204      	adds	r2, #4
 80160aa:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80160ae:	f894 900c 	ldrb.w	r9, [r4, #12]
 80160b2:	9203      	str	r2, [sp, #12]
 80160b4:	468b      	mov	fp, r1
 80160b6:	1f2f      	subs	r7, r5, #4
 80160b8:	2800      	cmp	r0, #0
 80160ba:	f000 814c 	beq.w	8016356 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80160be:	f04f 0c00 	mov.w	ip, #0
 80160c2:	46e2      	mov	sl, ip
 80160c4:	4661      	mov	r1, ip
 80160c6:	fbb1 f2f0 	udiv	r2, r1, r0
 80160ca:	fb00 1212 	mls	r2, r0, r2, r1
 80160ce:	b292      	uxth	r2, r2
 80160d0:	fb05 f202 	mul.w	r2, r5, r2
 80160d4:	f10c 0c01 	add.w	ip, ip, #1
 80160d8:	589a      	ldr	r2, [r3, r2]
 80160da:	454a      	cmp	r2, r9
 80160dc:	bf08      	it	eq
 80160de:	f10a 0a01 	addeq.w	sl, sl, #1
 80160e2:	fa1f f18c 	uxth.w	r1, ip
 80160e6:	bf08      	it	eq
 80160e8:	fa1f fa8a 	uxtheq.w	sl, sl
 80160ec:	4281      	cmp	r1, r0
 80160ee:	d3ea      	bcc.n	80160c6 <uxr_prepare_reliable_buffer_to_write+0x42>
 80160f0:	4640      	mov	r0, r8
 80160f2:	2104      	movs	r1, #4
 80160f4:	f8cd a014 	str.w	sl, [sp, #20]
 80160f8:	f7fa f97a 	bl	80103f0 <ucdr_alignment>
 80160fc:	4480      	add	r8, r0
 80160fe:	eb08 020b 	add.w	r2, r8, fp
 8016102:	42ba      	cmp	r2, r7
 8016104:	f240 80cd 	bls.w	80162a2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016108:	7b22      	ldrb	r2, [r4, #12]
 801610a:	445a      	add	r2, fp
 801610c:	42ba      	cmp	r2, r7
 801610e:	f240 80b5 	bls.w	801627c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016112:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8016116:	33fc      	adds	r3, #252	; 0xfc
 8016118:	b2ba      	uxth	r2, r7
 801611a:	4413      	add	r3, r2
 801611c:	b29b      	uxth	r3, r3
 801611e:	fb0a f903 	mul.w	r9, sl, r3
 8016122:	45d9      	cmp	r9, fp
 8016124:	9305      	str	r3, [sp, #20]
 8016126:	9306      	str	r3, [sp, #24]
 8016128:	f0c0 80b7 	bcc.w	801629a <uxr_prepare_reliable_buffer_to_write+0x216>
 801612c:	f108 0304 	add.w	r3, r8, #4
 8016130:	42bb      	cmp	r3, r7
 8016132:	f080 80db 	bcs.w	80162ec <uxr_prepare_reliable_buffer_to_write+0x268>
 8016136:	f1a2 0904 	sub.w	r9, r2, #4
 801613a:	eba9 0908 	sub.w	r9, r9, r8
 801613e:	9b05      	ldr	r3, [sp, #20]
 8016140:	fa1f f989 	uxth.w	r9, r9
 8016144:	ebab 0b09 	sub.w	fp, fp, r9
 8016148:	fbbb f2f3 	udiv	r2, fp, r3
 801614c:	fb03 b312 	mls	r3, r3, r2, fp
 8016150:	2b00      	cmp	r3, #0
 8016152:	f000 80c8 	beq.w	80162e6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016156:	3201      	adds	r2, #1
 8016158:	b292      	uxth	r2, r2
 801615a:	9306      	str	r3, [sp, #24]
 801615c:	4552      	cmp	r2, sl
 801615e:	f200 809c 	bhi.w	801629a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016162:	f10d 0b20 	add.w	fp, sp, #32
 8016166:	2a00      	cmp	r2, #0
 8016168:	d042      	beq.n	80161f0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801616a:	f8cd 801c 	str.w	r8, [sp, #28]
 801616e:	f04f 0a00 	mov.w	sl, #0
 8016172:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016176:	9505      	str	r5, [sp, #20]
 8016178:	f10d 0b20 	add.w	fp, sp, #32
 801617c:	4615      	mov	r5, r2
 801617e:	e000      	b.n	8016182 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016180:	46c1      	mov	r9, r8
 8016182:	8920      	ldrh	r0, [r4, #8]
 8016184:	fbb6 f2f0 	udiv	r2, r6, r0
 8016188:	fb00 6112 	mls	r1, r0, r2, r6
 801618c:	b28a      	uxth	r2, r1
 801618e:	6863      	ldr	r3, [r4, #4]
 8016190:	fbb3 f1f0 	udiv	r1, r3, r0
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	fb02 f101 	mul.w	r1, r2, r1
 801619a:	3104      	adds	r1, #4
 801619c:	4419      	add	r1, r3
 801619e:	4658      	mov	r0, fp
 80161a0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80161a4:	9200      	str	r2, [sp, #0]
 80161a6:	2300      	movs	r3, #0
 80161a8:	463a      	mov	r2, r7
 80161aa:	f7fa f90b 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 80161ae:	464a      	mov	r2, r9
 80161b0:	2300      	movs	r3, #0
 80161b2:	210d      	movs	r1, #13
 80161b4:	4658      	mov	r0, fp
 80161b6:	f7fb fd49 	bl	8011c4c <uxr_buffer_submessage_header>
 80161ba:	8921      	ldrh	r1, [r4, #8]
 80161bc:	fbb6 f2f1 	udiv	r2, r6, r1
 80161c0:	fb01 6212 	mls	r2, r1, r2, r6
 80161c4:	b292      	uxth	r2, r2
 80161c6:	6863      	ldr	r3, [r4, #4]
 80161c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80161cc:	fb02 f303 	mul.w	r3, r2, r3
 80161d0:	6822      	ldr	r2, [r4, #0]
 80161d2:	4630      	mov	r0, r6
 80161d4:	50d7      	str	r7, [r2, r3]
 80161d6:	2101      	movs	r1, #1
 80161d8:	f000 faf4 	bl	80167c4 <uxr_seq_num_add>
 80161dc:	f10a 0a01 	add.w	sl, sl, #1
 80161e0:	fa1f f38a 	uxth.w	r3, sl
 80161e4:	429d      	cmp	r5, r3
 80161e6:	4606      	mov	r6, r0
 80161e8:	d8ca      	bhi.n	8016180 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80161ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80161ee:	9d05      	ldr	r5, [sp, #20]
 80161f0:	8920      	ldrh	r0, [r4, #8]
 80161f2:	fbb6 f3f0 	udiv	r3, r6, r0
 80161f6:	fb00 6313 	mls	r3, r0, r3, r6
 80161fa:	b299      	uxth	r1, r3
 80161fc:	6863      	ldr	r3, [r4, #4]
 80161fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8016202:	fb01 f303 	mul.w	r3, r1, r3
 8016206:	6821      	ldr	r1, [r4, #0]
 8016208:	3304      	adds	r3, #4
 801620a:	4419      	add	r1, r3
 801620c:	463a      	mov	r2, r7
 801620e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016212:	9000      	str	r0, [sp, #0]
 8016214:	2300      	movs	r3, #0
 8016216:	4658      	mov	r0, fp
 8016218:	f7fa f8d4 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 801621c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016220:	4658      	mov	r0, fp
 8016222:	fa1f f289 	uxth.w	r2, r9
 8016226:	2302      	movs	r3, #2
 8016228:	210d      	movs	r1, #13
 801622a:	f7fb fd0f 	bl	8011c4c <uxr_buffer_submessage_header>
 801622e:	9b03      	ldr	r3, [sp, #12]
 8016230:	8927      	ldrh	r7, [r4, #8]
 8016232:	7b20      	ldrb	r0, [r4, #12]
 8016234:	f108 0104 	add.w	r1, r8, #4
 8016238:	440b      	add	r3, r1
 801623a:	4619      	mov	r1, r3
 801623c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016240:	fb07 6313 	mls	r3, r7, r3, r6
 8016244:	f1a5 0208 	sub.w	r2, r5, #8
 8016248:	b29d      	uxth	r5, r3
 801624a:	3004      	adds	r0, #4
 801624c:	6863      	ldr	r3, [r4, #4]
 801624e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016252:	fb05 f303 	mul.w	r3, r5, r3
 8016256:	6825      	ldr	r5, [r4, #0]
 8016258:	4448      	add	r0, r9
 801625a:	50e8      	str	r0, [r5, r3]
 801625c:	9d04      	ldr	r5, [sp, #16]
 801625e:	eba2 0208 	sub.w	r2, r2, r8
 8016262:	4628      	mov	r0, r5
 8016264:	f7fa f8c0 	bl	80103e8 <ucdr_init_buffer>
 8016268:	4628      	mov	r0, r5
 801626a:	493c      	ldr	r1, [pc, #240]	; (801635c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801626c:	4622      	mov	r2, r4
 801626e:	f7fa f88f 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8016272:	2001      	movs	r0, #1
 8016274:	81e6      	strh	r6, [r4, #14]
 8016276:	b011      	add	sp, #68	; 0x44
 8016278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801627c:	2101      	movs	r1, #1
 801627e:	89e0      	ldrh	r0, [r4, #14]
 8016280:	f000 faa0 	bl	80167c4 <uxr_seq_num_add>
 8016284:	8921      	ldrh	r1, [r4, #8]
 8016286:	4605      	mov	r5, r0
 8016288:	8a60      	ldrh	r0, [r4, #18]
 801628a:	f000 fa9b 	bl	80167c4 <uxr_seq_num_add>
 801628e:	4601      	mov	r1, r0
 8016290:	4628      	mov	r0, r5
 8016292:	f000 fa9f 	bl	80167d4 <uxr_seq_num_cmp>
 8016296:	2800      	cmp	r0, #0
 8016298:	dd42      	ble.n	8016320 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801629a:	2000      	movs	r0, #0
 801629c:	b011      	add	sp, #68	; 0x44
 801629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a2:	8921      	ldrh	r1, [r4, #8]
 80162a4:	8a60      	ldrh	r0, [r4, #18]
 80162a6:	9205      	str	r2, [sp, #20]
 80162a8:	f000 fa8c 	bl	80167c4 <uxr_seq_num_add>
 80162ac:	4601      	mov	r1, r0
 80162ae:	4630      	mov	r0, r6
 80162b0:	f000 fa90 	bl	80167d4 <uxr_seq_num_cmp>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	9a05      	ldr	r2, [sp, #20]
 80162b8:	dcef      	bgt.n	801629a <uxr_prepare_reliable_buffer_to_write+0x216>
 80162ba:	8927      	ldrh	r7, [r4, #8]
 80162bc:	fbb6 f3f7 	udiv	r3, r6, r7
 80162c0:	fb07 6313 	mls	r3, r7, r3, r6
 80162c4:	b29d      	uxth	r5, r3
 80162c6:	6863      	ldr	r3, [r4, #4]
 80162c8:	6824      	ldr	r4, [r4, #0]
 80162ca:	fbb3 f3f7 	udiv	r3, r3, r7
 80162ce:	fb05 f303 	mul.w	r3, r5, r3
 80162d2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80162d6:	50e2      	str	r2, [r4, r3]
 80162d8:	2300      	movs	r3, #0
 80162da:	f8cd 8000 	str.w	r8, [sp]
 80162de:	f7fa f871 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 80162e2:	2001      	movs	r0, #1
 80162e4:	e7da      	b.n	801629c <uxr_prepare_reliable_buffer_to_write+0x218>
 80162e6:	b293      	uxth	r3, r2
 80162e8:	461a      	mov	r2, r3
 80162ea:	e737      	b.n	801615c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80162ec:	4630      	mov	r0, r6
 80162ee:	2101      	movs	r1, #1
 80162f0:	9207      	str	r2, [sp, #28]
 80162f2:	f000 fa67 	bl	80167c4 <uxr_seq_num_add>
 80162f6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80162fa:	fbb0 f1fc 	udiv	r1, r0, ip
 80162fe:	fb0c 0111 	mls	r1, ip, r1, r0
 8016302:	4606      	mov	r6, r0
 8016304:	b288      	uxth	r0, r1
 8016306:	6863      	ldr	r3, [r4, #4]
 8016308:	fbb3 f1fc 	udiv	r1, r3, ip
 801630c:	6823      	ldr	r3, [r4, #0]
 801630e:	9a07      	ldr	r2, [sp, #28]
 8016310:	fb00 f101 	mul.w	r1, r0, r1
 8016314:	3104      	adds	r1, #4
 8016316:	440b      	add	r3, r1
 8016318:	9303      	str	r3, [sp, #12]
 801631a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801631e:	e70a      	b.n	8016136 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016320:	8921      	ldrh	r1, [r4, #8]
 8016322:	fbb5 f3f1 	udiv	r3, r5, r1
 8016326:	fb01 5313 	mls	r3, r1, r3, r5
 801632a:	b29a      	uxth	r2, r3
 801632c:	6863      	ldr	r3, [r4, #4]
 801632e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016332:	6821      	ldr	r1, [r4, #0]
 8016334:	9804      	ldr	r0, [sp, #16]
 8016336:	fb02 f303 	mul.w	r3, r2, r3
 801633a:	3304      	adds	r3, #4
 801633c:	7b22      	ldrb	r2, [r4, #12]
 801633e:	4419      	add	r1, r3
 8016340:	445a      	add	r2, fp
 8016342:	f841 2c04 	str.w	r2, [r1, #-4]
 8016346:	7b23      	ldrb	r3, [r4, #12]
 8016348:	9300      	str	r3, [sp, #0]
 801634a:	2300      	movs	r3, #0
 801634c:	f7fa f83a 	bl	80103c4 <ucdr_init_buffer_origin_offset>
 8016350:	81e5      	strh	r5, [r4, #14]
 8016352:	2001      	movs	r0, #1
 8016354:	e7a2      	b.n	801629c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016356:	4682      	mov	sl, r0
 8016358:	e6ca      	b.n	80160f0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801635a:	bf00      	nop
 801635c:	08015f65 	.word	0x08015f65

08016360 <uxr_prepare_next_reliable_buffer_to_send>:
 8016360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016362:	4604      	mov	r4, r0
 8016364:	460f      	mov	r7, r1
 8016366:	8a00      	ldrh	r0, [r0, #16]
 8016368:	2101      	movs	r1, #1
 801636a:	4616      	mov	r6, r2
 801636c:	461d      	mov	r5, r3
 801636e:	f000 fa29 	bl	80167c4 <uxr_seq_num_add>
 8016372:	8028      	strh	r0, [r5, #0]
 8016374:	8922      	ldrh	r2, [r4, #8]
 8016376:	fbb0 f3f2 	udiv	r3, r0, r2
 801637a:	fb02 0c13 	mls	ip, r2, r3, r0
 801637e:	fa1f fc8c 	uxth.w	ip, ip
 8016382:	6863      	ldr	r3, [r4, #4]
 8016384:	fbb3 f3f2 	udiv	r3, r3, r2
 8016388:	fb0c fc03 	mul.w	ip, ip, r3
 801638c:	6823      	ldr	r3, [r4, #0]
 801638e:	89e1      	ldrh	r1, [r4, #14]
 8016390:	f10c 0c04 	add.w	ip, ip, #4
 8016394:	4463      	add	r3, ip
 8016396:	603b      	str	r3, [r7, #0]
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	449c      	add	ip, r3
 801639c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80163a0:	6033      	str	r3, [r6, #0]
 80163a2:	f000 fa17 	bl	80167d4 <uxr_seq_num_cmp>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	dd01      	ble.n	80163ae <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80163aa:	2000      	movs	r0, #0
 80163ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163ae:	7b23      	ldrb	r3, [r4, #12]
 80163b0:	6832      	ldr	r2, [r6, #0]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d9f9      	bls.n	80163aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80163b6:	8a61      	ldrh	r1, [r4, #18]
 80163b8:	8a20      	ldrh	r0, [r4, #16]
 80163ba:	f000 fa07 	bl	80167cc <uxr_seq_num_sub>
 80163be:	8923      	ldrh	r3, [r4, #8]
 80163c0:	4283      	cmp	r3, r0
 80163c2:	d0f2      	beq.n	80163aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80163c4:	8828      	ldrh	r0, [r5, #0]
 80163c6:	89e3      	ldrh	r3, [r4, #14]
 80163c8:	8220      	strh	r0, [r4, #16]
 80163ca:	4298      	cmp	r0, r3
 80163cc:	d001      	beq.n	80163d2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80163ce:	2001      	movs	r0, #1
 80163d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163d2:	2101      	movs	r1, #1
 80163d4:	f000 f9f6 	bl	80167c4 <uxr_seq_num_add>
 80163d8:	81e0      	strh	r0, [r4, #14]
 80163da:	2001      	movs	r0, #1
 80163dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163de:	bf00      	nop

080163e0 <uxr_update_output_stream_heartbeat_timestamp>:
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	8a01      	ldrh	r1, [r0, #16]
 80163e4:	4604      	mov	r4, r0
 80163e6:	8a40      	ldrh	r0, [r0, #18]
 80163e8:	4615      	mov	r5, r2
 80163ea:	461e      	mov	r6, r3
 80163ec:	f000 f9f2 	bl	80167d4 <uxr_seq_num_cmp>
 80163f0:	2800      	cmp	r0, #0
 80163f2:	db07      	blt.n	8016404 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80163f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80163fc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016400:	2000      	movs	r0, #0
 8016402:	bd70      	pop	{r4, r5, r6, pc}
 8016404:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016408:	b940      	cbnz	r0, 801641c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801640a:	2301      	movs	r3, #1
 801640c:	f884 3020 	strb.w	r3, [r4, #32]
 8016410:	3564      	adds	r5, #100	; 0x64
 8016412:	f146 0600 	adc.w	r6, r6, #0
 8016416:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016420:	4295      	cmp	r5, r2
 8016422:	eb76 0303 	sbcs.w	r3, r6, r3
 8016426:	bfa5      	ittet	ge
 8016428:	3001      	addge	r0, #1
 801642a:	f884 0020 	strbge.w	r0, [r4, #32]
 801642e:	2000      	movlt	r0, #0
 8016430:	2001      	movge	r0, #1
 8016432:	e7ed      	b.n	8016410 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016434 <uxr_begin_output_nack_buffer_it>:
 8016434:	8a40      	ldrh	r0, [r0, #18]
 8016436:	4770      	bx	lr

08016438 <uxr_next_reliable_nack_buffer_to_send>:
 8016438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801643c:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8016440:	b082      	sub	sp, #8
 8016442:	f1b8 0f00 	cmp.w	r8, #0
 8016446:	d011      	beq.n	801646c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016448:	4604      	mov	r4, r0
 801644a:	8818      	ldrh	r0, [r3, #0]
 801644c:	460e      	mov	r6, r1
 801644e:	4617      	mov	r7, r2
 8016450:	461d      	mov	r5, r3
 8016452:	2101      	movs	r1, #1
 8016454:	f000 f9b6 	bl	80167c4 <uxr_seq_num_add>
 8016458:	8028      	strh	r0, [r5, #0]
 801645a:	8a21      	ldrh	r1, [r4, #16]
 801645c:	f000 f9ba 	bl	80167d4 <uxr_seq_num_cmp>
 8016460:	2800      	cmp	r0, #0
 8016462:	dd07      	ble.n	8016474 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016464:	f04f 0800 	mov.w	r8, #0
 8016468:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 801646c:	4640      	mov	r0, r8
 801646e:	b002      	add	sp, #8
 8016470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016474:	8921      	ldrh	r1, [r4, #8]
 8016476:	8828      	ldrh	r0, [r5, #0]
 8016478:	6823      	ldr	r3, [r4, #0]
 801647a:	fbb0 f2f1 	udiv	r2, r0, r1
 801647e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016482:	fa1f f28c 	uxth.w	r2, ip
 8016486:	9301      	str	r3, [sp, #4]
 8016488:	6863      	ldr	r3, [r4, #4]
 801648a:	fbb3 fcf1 	udiv	ip, r3, r1
 801648e:	9b01      	ldr	r3, [sp, #4]
 8016490:	fb02 fc0c 	mul.w	ip, r2, ip
 8016494:	f10c 0c04 	add.w	ip, ip, #4
 8016498:	4463      	add	r3, ip
 801649a:	6033      	str	r3, [r6, #0]
 801649c:	6823      	ldr	r3, [r4, #0]
 801649e:	4463      	add	r3, ip
 80164a0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80164a4:	603b      	str	r3, [r7, #0]
 80164a6:	7b22      	ldrb	r2, [r4, #12]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d0d2      	beq.n	8016452 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80164ac:	4640      	mov	r0, r8
 80164ae:	b002      	add	sp, #8
 80164b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080164b4 <uxr_process_acknack>:
 80164b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b6:	4604      	mov	r4, r0
 80164b8:	460e      	mov	r6, r1
 80164ba:	4610      	mov	r0, r2
 80164bc:	2101      	movs	r1, #1
 80164be:	f000 f985 	bl	80167cc <uxr_seq_num_sub>
 80164c2:	8a61      	ldrh	r1, [r4, #18]
 80164c4:	f000 f982 	bl	80167cc <uxr_seq_num_sub>
 80164c8:	b1c0      	cbz	r0, 80164fc <uxr_process_acknack+0x48>
 80164ca:	4605      	mov	r5, r0
 80164cc:	2700      	movs	r7, #0
 80164ce:	2101      	movs	r1, #1
 80164d0:	8a60      	ldrh	r0, [r4, #18]
 80164d2:	f000 f977 	bl	80167c4 <uxr_seq_num_add>
 80164d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80164da:	fbb0 f1fc 	udiv	r1, r0, ip
 80164de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80164e2:	fb0c 0111 	mls	r1, ip, r1, r0
 80164e6:	b289      	uxth	r1, r1
 80164e8:	3701      	adds	r7, #1
 80164ea:	fbb3 f3fc 	udiv	r3, r3, ip
 80164ee:	fb01 f303 	mul.w	r3, r1, r3
 80164f2:	42bd      	cmp	r5, r7
 80164f4:	7b21      	ldrb	r1, [r4, #12]
 80164f6:	8260      	strh	r0, [r4, #18]
 80164f8:	50d1      	str	r1, [r2, r3]
 80164fa:	d1e8      	bne.n	80164ce <uxr_process_acknack+0x1a>
 80164fc:	3e00      	subs	r6, #0
 80164fe:	f04f 0300 	mov.w	r3, #0
 8016502:	bf18      	it	ne
 8016504:	2601      	movne	r6, #1
 8016506:	f884 3020 	strb.w	r3, [r4, #32]
 801650a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016510 <uxr_is_output_up_to_date>:
 8016510:	8a01      	ldrh	r1, [r0, #16]
 8016512:	8a40      	ldrh	r0, [r0, #18]
 8016514:	b508      	push	{r3, lr}
 8016516:	f000 f95d 	bl	80167d4 <uxr_seq_num_cmp>
 801651a:	fab0 f080 	clz	r0, r0
 801651e:	0940      	lsrs	r0, r0, #5
 8016520:	bd08      	pop	{r3, pc}
 8016522:	bf00      	nop

08016524 <get_available_free_slots>:
 8016524:	8902      	ldrh	r2, [r0, #8]
 8016526:	b1da      	cbz	r2, 8016560 <get_available_free_slots+0x3c>
 8016528:	b530      	push	{r4, r5, lr}
 801652a:	2100      	movs	r1, #0
 801652c:	6843      	ldr	r3, [r0, #4]
 801652e:	6805      	ldr	r5, [r0, #0]
 8016530:	7b04      	ldrb	r4, [r0, #12]
 8016532:	fbb3 fef2 	udiv	lr, r3, r2
 8016536:	4608      	mov	r0, r1
 8016538:	460b      	mov	r3, r1
 801653a:	fbb3 fcf2 	udiv	ip, r3, r2
 801653e:	fb02 331c 	mls	r3, r2, ip, r3
 8016542:	b29b      	uxth	r3, r3
 8016544:	fb0e f303 	mul.w	r3, lr, r3
 8016548:	3101      	adds	r1, #1
 801654a:	f855 c003 	ldr.w	ip, [r5, r3]
 801654e:	4564      	cmp	r4, ip
 8016550:	bf08      	it	eq
 8016552:	3001      	addeq	r0, #1
 8016554:	b28b      	uxth	r3, r1
 8016556:	bf08      	it	eq
 8016558:	b280      	uxtheq	r0, r0
 801655a:	4293      	cmp	r3, r2
 801655c:	d3ed      	bcc.n	801653a <get_available_free_slots+0x16>
 801655e:	bd30      	pop	{r4, r5, pc}
 8016560:	4610      	mov	r0, r2
 8016562:	4770      	bx	lr

08016564 <uxr_buffer_request_data>:
 8016564:	b530      	push	{r4, r5, lr}
 8016566:	b095      	sub	sp, #84	; 0x54
 8016568:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801656c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801656e:	9303      	str	r3, [sp, #12]
 8016570:	2200      	movs	r2, #0
 8016572:	2d00      	cmp	r5, #0
 8016574:	bf14      	ite	ne
 8016576:	2101      	movne	r1, #1
 8016578:	4611      	moveq	r1, r2
 801657a:	4604      	mov	r4, r0
 801657c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016580:	f88d 201d 	strb.w	r2, [sp, #29]
 8016584:	f88d 201e 	strb.w	r2, [sp, #30]
 8016588:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801658c:	d021      	beq.n	80165d2 <uxr_buffer_request_data+0x6e>
 801658e:	682a      	ldr	r2, [r5, #0]
 8016590:	686b      	ldr	r3, [r5, #4]
 8016592:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 8016596:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801659a:	2210      	movs	r2, #16
 801659c:	2308      	movs	r3, #8
 801659e:	2100      	movs	r1, #0
 80165a0:	e9cd 3100 	strd	r3, r1, [sp]
 80165a4:	4620      	mov	r0, r4
 80165a6:	9905      	ldr	r1, [sp, #20]
 80165a8:	ab0c      	add	r3, sp, #48	; 0x30
 80165aa:	f7fb f8b1 	bl	8011710 <uxr_prepare_stream_to_write_submessage>
 80165ae:	b918      	cbnz	r0, 80165b8 <uxr_buffer_request_data+0x54>
 80165b0:	4604      	mov	r4, r0
 80165b2:	4620      	mov	r0, r4
 80165b4:	b015      	add	sp, #84	; 0x54
 80165b6:	bd30      	pop	{r4, r5, pc}
 80165b8:	9904      	ldr	r1, [sp, #16]
 80165ba:	aa06      	add	r2, sp, #24
 80165bc:	4620      	mov	r0, r4
 80165be:	f7fb f9dd 	bl	801197c <uxr_init_base_object_request>
 80165c2:	a906      	add	r1, sp, #24
 80165c4:	4604      	mov	r4, r0
 80165c6:	a80c      	add	r0, sp, #48	; 0x30
 80165c8:	f7fc fcd8 	bl	8012f7c <uxr_serialize_READ_DATA_Payload>
 80165cc:	4620      	mov	r0, r4
 80165ce:	b015      	add	sp, #84	; 0x54
 80165d0:	bd30      	pop	{r4, r5, pc}
 80165d2:	2208      	movs	r2, #8
 80165d4:	e7e2      	b.n	801659c <uxr_buffer_request_data+0x38>
 80165d6:	bf00      	nop

080165d8 <uxr_buffer_cancel_data>:
 80165d8:	b510      	push	{r4, lr}
 80165da:	b094      	sub	sp, #80	; 0x50
 80165dc:	2300      	movs	r3, #0
 80165de:	9202      	str	r2, [sp, #8]
 80165e0:	9205      	str	r2, [sp, #20]
 80165e2:	9301      	str	r3, [sp, #4]
 80165e4:	2201      	movs	r2, #1
 80165e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80165ea:	f88d 301e 	strb.w	r3, [sp, #30]
 80165ee:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80165f2:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80165f6:	2308      	movs	r3, #8
 80165f8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80165fc:	9300      	str	r3, [sp, #0]
 80165fe:	2210      	movs	r2, #16
 8016600:	ab0c      	add	r3, sp, #48	; 0x30
 8016602:	4604      	mov	r4, r0
 8016604:	9103      	str	r1, [sp, #12]
 8016606:	f7fb f883 	bl	8011710 <uxr_prepare_stream_to_write_submessage>
 801660a:	b918      	cbnz	r0, 8016614 <uxr_buffer_cancel_data+0x3c>
 801660c:	4604      	mov	r4, r0
 801660e:	4620      	mov	r0, r4
 8016610:	b014      	add	sp, #80	; 0x50
 8016612:	bd10      	pop	{r4, pc}
 8016614:	9905      	ldr	r1, [sp, #20]
 8016616:	aa06      	add	r2, sp, #24
 8016618:	4620      	mov	r0, r4
 801661a:	f7fb f9af 	bl	801197c <uxr_init_base_object_request>
 801661e:	a906      	add	r1, sp, #24
 8016620:	4604      	mov	r4, r0
 8016622:	a80c      	add	r0, sp, #48	; 0x30
 8016624:	f7fc fcaa 	bl	8012f7c <uxr_serialize_READ_DATA_Payload>
 8016628:	4620      	mov	r0, r4
 801662a:	b014      	add	sp, #80	; 0x50
 801662c:	bd10      	pop	{r4, pc}
 801662e:	bf00      	nop

08016630 <read_submessage_format>:
 8016630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016634:	b095      	sub	sp, #84	; 0x54
 8016636:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 801663a:	b113      	cbz	r3, 8016642 <read_submessage_format+0x12>
 801663c:	b015      	add	sp, #84	; 0x54
 801663e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016642:	460c      	mov	r4, r1
 8016644:	4615      	mov	r5, r2
 8016646:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801664a:	4607      	mov	r7, r0
 801664c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801664e:	9004      	str	r0, [sp, #16]
 8016650:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016652:	9005      	str	r0, [sp, #20]
 8016654:	1a52      	subs	r2, r2, r1
 8016656:	a80c      	add	r0, sp, #48	; 0x30
 8016658:	4699      	mov	r9, r3
 801665a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801665e:	f7f9 fec3 	bl	80103e8 <ucdr_init_buffer>
 8016662:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016666:	a80c      	add	r0, sp, #48	; 0x30
 8016668:	f7f9 fe92 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 801666c:	69e2      	ldr	r2, [r4, #28]
 801666e:	b19a      	cbz	r2, 8016698 <read_submessage_format+0x68>
 8016670:	f1b8 0f07 	cmp.w	r8, #7
 8016674:	f882 9014 	strb.w	r9, [r2, #20]
 8016678:	d040      	beq.n	80166fc <read_submessage_format+0xcc>
 801667a:	f1b8 0f08 	cmp.w	r8, #8
 801667e:	d02e      	beq.n	80166de <read_submessage_format+0xae>
 8016680:	f1b8 0f06 	cmp.w	r8, #6
 8016684:	d011      	beq.n	80166aa <read_submessage_format+0x7a>
 8016686:	2301      	movs	r3, #1
 8016688:	7513      	strb	r3, [r2, #20]
 801668a:	4629      	mov	r1, r5
 801668c:	4620      	mov	r0, r4
 801668e:	f7f9 fefb 	bl	8010488 <ucdr_advance_buffer>
 8016692:	b015      	add	sp, #84	; 0x54
 8016694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016698:	f1b8 0f07 	cmp.w	r8, #7
 801669c:	d02e      	beq.n	80166fc <read_submessage_format+0xcc>
 801669e:	f1b8 0f08 	cmp.w	r8, #8
 80166a2:	d01c      	beq.n	80166de <read_submessage_format+0xae>
 80166a4:	f1b8 0f06 	cmp.w	r8, #6
 80166a8:	d1ef      	bne.n	801668a <read_submessage_format+0x5a>
 80166aa:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 80166ae:	f1b8 0f00 	cmp.w	r8, #0
 80166b2:	d011      	beq.n	80166d8 <read_submessage_format+0xa8>
 80166b4:	ab0c      	add	r3, sp, #48	; 0x30
 80166b6:	e9cd 3500 	strd	r3, r5, [sp]
 80166ba:	2306      	movs	r3, #6
 80166bc:	f88d 3016 	strb.w	r3, [sp, #22]
 80166c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80166c4:	9302      	str	r3, [sp, #8]
 80166c6:	4632      	mov	r2, r6
 80166c8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80166cc:	4638      	mov	r0, r7
 80166ce:	47c0      	blx	r8
 80166d0:	2301      	movs	r3, #1
 80166d2:	69e2      	ldr	r2, [r4, #28]
 80166d4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80166d8:	2a00      	cmp	r2, #0
 80166da:	d1d4      	bne.n	8016686 <read_submessage_format+0x56>
 80166dc:	e7d5      	b.n	801668a <read_submessage_format+0x5a>
 80166de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d0f8      	beq.n	80166d8 <read_submessage_format+0xa8>
 80166e6:	a906      	add	r1, sp, #24
 80166e8:	a80c      	add	r0, sp, #48	; 0x30
 80166ea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80166ee:	f7fc fce5 	bl	80130bc <uxr_deserialize_SampleIdentity>
 80166f2:	b9a0      	cbnz	r0, 801671e <read_submessage_format+0xee>
 80166f4:	69e2      	ldr	r2, [r4, #28]
 80166f6:	2a00      	cmp	r2, #0
 80166f8:	d1c5      	bne.n	8016686 <read_submessage_format+0x56>
 80166fa:	e7c6      	b.n	801668a <read_submessage_format+0x5a>
 80166fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016700:	b13b      	cbz	r3, 8016712 <read_submessage_format+0xe2>
 8016702:	a906      	add	r1, sp, #24
 8016704:	a80c      	add	r0, sp, #48	; 0x30
 8016706:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801670a:	f7fc f9d1 	bl	8012ab0 <uxr_deserialize_BaseObjectRequest>
 801670e:	bb60      	cbnz	r0, 801676a <read_submessage_format+0x13a>
 8016710:	69e2      	ldr	r2, [r4, #28]
 8016712:	68a3      	ldr	r3, [r4, #8]
 8016714:	442b      	add	r3, r5
 8016716:	60a3      	str	r3, [r4, #8]
 8016718:	2a00      	cmp	r2, #0
 801671a:	d1b4      	bne.n	8016686 <read_submessage_format+0x56>
 801671c:	e7b5      	b.n	801668a <read_submessage_format+0x5a>
 801671e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8016722:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016724:	1a52      	subs	r2, r2, r1
 8016726:	eba8 0803 	sub.w	r8, r8, r3
 801672a:	a80c      	add	r0, sp, #48	; 0x30
 801672c:	f7f9 fe5c 	bl	80103e8 <ucdr_init_buffer>
 8016730:	44a8      	add	r8, r5
 8016732:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016736:	a80c      	add	r0, sp, #48	; 0x30
 8016738:	f7f9 fe2a 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 801673c:	fa1f f888 	uxth.w	r8, r8
 8016740:	ab0c      	add	r3, sp, #48	; 0x30
 8016742:	9300      	str	r3, [sp, #0]
 8016744:	f8cd 8004 	str.w	r8, [sp, #4]
 8016748:	2108      	movs	r1, #8
 801674a:	f88d 1016 	strb.w	r1, [sp, #22]
 801674e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016752:	9102      	str	r1, [sp, #8]
 8016754:	ab06      	add	r3, sp, #24
 8016756:	4632      	mov	r2, r6
 8016758:	9905      	ldr	r1, [sp, #20]
 801675a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 801675e:	4638      	mov	r0, r7
 8016760:	47b0      	blx	r6
 8016762:	2301      	movs	r3, #1
 8016764:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8016768:	e7c4      	b.n	80166f4 <read_submessage_format+0xc4>
 801676a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801676e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016770:	1a52      	subs	r2, r2, r1
 8016772:	a80c      	add	r0, sp, #48	; 0x30
 8016774:	eba8 0803 	sub.w	r8, r8, r3
 8016778:	f7f9 fe36 	bl	80103e8 <ucdr_init_buffer>
 801677c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016780:	a80c      	add	r0, sp, #48	; 0x30
 8016782:	f7f9 fe05 	bl	8010390 <ucdr_set_on_full_buffer_callback>
 8016786:	ab0c      	add	r3, sp, #48	; 0x30
 8016788:	9300      	str	r3, [sp, #0]
 801678a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801678e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016792:	44a8      	add	r8, r5
 8016794:	fa1f f888 	uxth.w	r8, r8
 8016798:	f8cd 8004 	str.w	r8, [sp, #4]
 801679c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80167a0:	2107      	movs	r1, #7
 80167a2:	f88d 1016 	strb.w	r1, [sp, #22]
 80167a6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80167aa:	9102      	str	r1, [sp, #8]
 80167ac:	4632      	mov	r2, r6
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80167b4:	9905      	ldr	r1, [sp, #20]
 80167b6:	4638      	mov	r0, r7
 80167b8:	47b0      	blx	r6
 80167ba:	2301      	movs	r3, #1
 80167bc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80167c0:	e7a6      	b.n	8016710 <read_submessage_format+0xe0>
 80167c2:	bf00      	nop

080167c4 <uxr_seq_num_add>:
 80167c4:	4408      	add	r0, r1
 80167c6:	b280      	uxth	r0, r0
 80167c8:	4770      	bx	lr
 80167ca:	bf00      	nop

080167cc <uxr_seq_num_sub>:
 80167cc:	1a40      	subs	r0, r0, r1
 80167ce:	b280      	uxth	r0, r0
 80167d0:	4770      	bx	lr
 80167d2:	bf00      	nop

080167d4 <uxr_seq_num_cmp>:
 80167d4:	4288      	cmp	r0, r1
 80167d6:	d011      	beq.n	80167fc <uxr_seq_num_cmp+0x28>
 80167d8:	d309      	bcc.n	80167ee <uxr_seq_num_cmp+0x1a>
 80167da:	4288      	cmp	r0, r1
 80167dc:	d910      	bls.n	8016800 <uxr_seq_num_cmp+0x2c>
 80167de:	1a40      	subs	r0, r0, r1
 80167e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80167e4:	bfd4      	ite	le
 80167e6:	2001      	movle	r0, #1
 80167e8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80167ec:	4770      	bx	lr
 80167ee:	1a0b      	subs	r3, r1, r0
 80167f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80167f4:	daf1      	bge.n	80167da <uxr_seq_num_cmp+0x6>
 80167f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167fa:	4770      	bx	lr
 80167fc:	2000      	movs	r0, #0
 80167fe:	4770      	bx	lr
 8016800:	2001      	movs	r0, #1
 8016802:	4770      	bx	lr

08016804 <uxr_init_framing_io>:
 8016804:	2300      	movs	r3, #0
 8016806:	7041      	strb	r1, [r0, #1]
 8016808:	7003      	strb	r3, [r0, #0]
 801680a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801680c:	4770      	bx	lr
 801680e:	bf00      	nop

08016810 <uxr_write_framed_msg>:
 8016810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016814:	4617      	mov	r7, r2
 8016816:	7842      	ldrb	r2, [r0, #1]
 8016818:	b083      	sub	sp, #12
 801681a:	460e      	mov	r6, r1
 801681c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8016820:	469a      	mov	sl, r3
 8016822:	2901      	cmp	r1, #1
 8016824:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8016828:	4604      	mov	r4, r0
 801682a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801682e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8016832:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8016836:	f240 8137 	bls.w	8016aa8 <uxr_write_framed_msg+0x298>
 801683a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801683e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8016842:	2901      	cmp	r1, #1
 8016844:	f04f 0202 	mov.w	r2, #2
 8016848:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801684c:	f240 808f 	bls.w	801696e <uxr_write_framed_msg+0x15e>
 8016850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016852:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8016856:	b2dd      	uxtb	r5, r3
 8016858:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801685c:	2203      	movs	r2, #3
 801685e:	2901      	cmp	r1, #1
 8016860:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016864:	f240 809a 	bls.w	801699c <uxr_write_framed_msg+0x18c>
 8016868:	18a1      	adds	r1, r4, r2
 801686a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801686c:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8016870:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016874:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8016878:	3201      	adds	r2, #1
 801687a:	2801      	cmp	r0, #1
 801687c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016880:	f240 80a0 	bls.w	80169c4 <uxr_write_framed_msg+0x1b4>
 8016884:	18a0      	adds	r0, r4, r2
 8016886:	3201      	adds	r2, #1
 8016888:	b2d2      	uxtb	r2, r2
 801688a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801688e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016892:	2b00      	cmp	r3, #0
 8016894:	f000 80a9 	beq.w	80169ea <uxr_write_framed_msg+0x1da>
 8016898:	f04f 0900 	mov.w	r9, #0
 801689c:	46c8      	mov	r8, r9
 801689e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80168a2:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80168a6:	2901      	cmp	r1, #1
 80168a8:	f240 80c3 	bls.w	8016a32 <uxr_write_framed_msg+0x222>
 80168ac:	2a29      	cmp	r2, #41	; 0x29
 80168ae:	f200 809f 	bhi.w	80169f0 <uxr_write_framed_msg+0x1e0>
 80168b2:	18a1      	adds	r1, r4, r2
 80168b4:	3201      	adds	r2, #1
 80168b6:	b2d2      	uxtb	r2, r2
 80168b8:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80168bc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80168c0:	ea89 0303 	eor.w	r3, r9, r3
 80168c4:	498c      	ldr	r1, [pc, #560]	; (8016af8 <uxr_write_framed_msg+0x2e8>)
 80168c6:	b2db      	uxtb	r3, r3
 80168c8:	f108 0801 	add.w	r8, r8, #1
 80168cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80168d0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80168d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168d6:	4543      	cmp	r3, r8
 80168d8:	d8e1      	bhi.n	801689e <uxr_write_framed_msg+0x8e>
 80168da:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80168de:	fa5f f889 	uxtb.w	r8, r9
 80168e2:	9301      	str	r3, [sp, #4]
 80168e4:	f04f 0900 	mov.w	r9, #0
 80168e8:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 80168ec:	fa5f f18a 	uxtb.w	r1, sl
 80168f0:	2901      	cmp	r1, #1
 80168f2:	d921      	bls.n	8016938 <uxr_write_framed_msg+0x128>
 80168f4:	2a29      	cmp	r2, #41	; 0x29
 80168f6:	f240 80af 	bls.w	8016a58 <uxr_write_framed_msg+0x248>
 80168fa:	2500      	movs	r5, #0
 80168fc:	e000      	b.n	8016900 <uxr_write_framed_msg+0xf0>
 80168fe:	b160      	cbz	r0, 801691a <uxr_write_framed_msg+0x10a>
 8016900:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016904:	1b52      	subs	r2, r2, r5
 8016906:	465b      	mov	r3, fp
 8016908:	4421      	add	r1, r4
 801690a:	4638      	mov	r0, r7
 801690c:	47b0      	blx	r6
 801690e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016912:	4405      	add	r5, r0
 8016914:	4295      	cmp	r5, r2
 8016916:	d3f2      	bcc.n	80168fe <uxr_write_framed_msg+0xee>
 8016918:	d003      	beq.n	8016922 <uxr_write_framed_msg+0x112>
 801691a:	2000      	movs	r0, #0
 801691c:	b003      	add	sp, #12
 801691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016922:	fa5f f18a 	uxtb.w	r1, sl
 8016926:	f04f 0300 	mov.w	r3, #0
 801692a:	2901      	cmp	r1, #1
 801692c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016930:	f04f 0200 	mov.w	r2, #0
 8016934:	f200 8090 	bhi.w	8016a58 <uxr_write_framed_msg+0x248>
 8016938:	1c51      	adds	r1, r2, #1
 801693a:	b2c9      	uxtb	r1, r1
 801693c:	2929      	cmp	r1, #41	; 0x29
 801693e:	d8dc      	bhi.n	80168fa <uxr_write_framed_msg+0xea>
 8016940:	18a5      	adds	r5, r4, r2
 8016942:	4421      	add	r1, r4
 8016944:	3202      	adds	r2, #2
 8016946:	f088 0820 	eor.w	r8, r8, #32
 801694a:	4648      	mov	r0, r9
 801694c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8016950:	b2d2      	uxtb	r2, r2
 8016952:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8016956:	f04f 0901 	mov.w	r9, #1
 801695a:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 801695e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016962:	2800      	cmp	r0, #0
 8016964:	f040 8085 	bne.w	8016a72 <uxr_write_framed_msg+0x262>
 8016968:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801696c:	e7bc      	b.n	80168e8 <uxr_write_framed_msg+0xd8>
 801696e:	4611      	mov	r1, r2
 8016970:	f04f 0c03 	mov.w	ip, #3
 8016974:	2204      	movs	r2, #4
 8016976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016978:	4421      	add	r1, r4
 801697a:	b2dd      	uxtb	r5, r3
 801697c:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8016980:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8016984:	44a4      	add	ip, r4
 8016986:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801698a:	f080 0020 	eor.w	r0, r0, #32
 801698e:	2901      	cmp	r1, #1
 8016990:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8016994:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016998:	f63f af66 	bhi.w	8016868 <uxr_write_framed_msg+0x58>
 801699c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801699e:	18a0      	adds	r0, r4, r2
 80169a0:	f085 0520 	eor.w	r5, r5, #32
 80169a4:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80169a8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80169ac:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 80169b0:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80169b4:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80169b8:	3202      	adds	r2, #2
 80169ba:	2801      	cmp	r0, #1
 80169bc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80169c0:	f63f af60 	bhi.w	8016884 <uxr_write_framed_msg+0x74>
 80169c4:	1c50      	adds	r0, r2, #1
 80169c6:	18a5      	adds	r5, r4, r2
 80169c8:	fa54 f080 	uxtab	r0, r4, r0
 80169cc:	3202      	adds	r2, #2
 80169ce:	f081 0120 	eor.w	r1, r1, #32
 80169d2:	b2d2      	uxtb	r2, r2
 80169d4:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80169d8:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 80169dc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80169e0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	f47f af57 	bne.w	8016898 <uxr_write_framed_msg+0x88>
 80169ea:	9301      	str	r3, [sp, #4]
 80169ec:	4698      	mov	r8, r3
 80169ee:	e779      	b.n	80168e4 <uxr_write_framed_msg+0xd4>
 80169f0:	2500      	movs	r5, #0
 80169f2:	e001      	b.n	80169f8 <uxr_write_framed_msg+0x1e8>
 80169f4:	2800      	cmp	r0, #0
 80169f6:	d090      	beq.n	801691a <uxr_write_framed_msg+0x10a>
 80169f8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80169fc:	1b52      	subs	r2, r2, r5
 80169fe:	465b      	mov	r3, fp
 8016a00:	4421      	add	r1, r4
 8016a02:	4638      	mov	r0, r7
 8016a04:	47b0      	blx	r6
 8016a06:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016a0a:	4405      	add	r5, r0
 8016a0c:	4295      	cmp	r5, r2
 8016a0e:	d3f1      	bcc.n	80169f4 <uxr_write_framed_msg+0x1e4>
 8016a10:	d183      	bne.n	801691a <uxr_write_framed_msg+0x10a>
 8016a12:	f04f 0300 	mov.w	r3, #0
 8016a16:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a1c:	4543      	cmp	r3, r8
 8016a1e:	d964      	bls.n	8016aea <uxr_write_framed_msg+0x2da>
 8016a20:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016a24:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016a28:	2901      	cmp	r1, #1
 8016a2a:	f04f 0200 	mov.w	r2, #0
 8016a2e:	f63f af3d 	bhi.w	80168ac <uxr_write_framed_msg+0x9c>
 8016a32:	1c51      	adds	r1, r2, #1
 8016a34:	b2c9      	uxtb	r1, r1
 8016a36:	2929      	cmp	r1, #41	; 0x29
 8016a38:	d8da      	bhi.n	80169f0 <uxr_write_framed_msg+0x1e0>
 8016a3a:	18a0      	adds	r0, r4, r2
 8016a3c:	4421      	add	r1, r4
 8016a3e:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8016a42:	3202      	adds	r2, #2
 8016a44:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8016a48:	b2d2      	uxtb	r2, r2
 8016a4a:	f083 0020 	eor.w	r0, r3, #32
 8016a4e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8016a52:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016a56:	e733      	b.n	80168c0 <uxr_write_framed_msg+0xb0>
 8016a58:	18a1      	adds	r1, r4, r2
 8016a5a:	3201      	adds	r2, #1
 8016a5c:	4648      	mov	r0, r9
 8016a5e:	b2d2      	uxtb	r2, r2
 8016a60:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8016a64:	f04f 0901 	mov.w	r9, #1
 8016a68:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	f43f af7b 	beq.w	8016968 <uxr_write_framed_msg+0x158>
 8016a72:	2500      	movs	r5, #0
 8016a74:	e002      	b.n	8016a7c <uxr_write_framed_msg+0x26c>
 8016a76:	2800      	cmp	r0, #0
 8016a78:	f43f af4f 	beq.w	801691a <uxr_write_framed_msg+0x10a>
 8016a7c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016a80:	1b52      	subs	r2, r2, r5
 8016a82:	465b      	mov	r3, fp
 8016a84:	4421      	add	r1, r4
 8016a86:	4638      	mov	r0, r7
 8016a88:	47b0      	blx	r6
 8016a8a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016a8e:	4405      	add	r5, r0
 8016a90:	4295      	cmp	r5, r2
 8016a92:	d3f0      	bcc.n	8016a76 <uxr_write_framed_msg+0x266>
 8016a94:	f47f af41 	bne.w	801691a <uxr_write_framed_msg+0x10a>
 8016a98:	2300      	movs	r3, #0
 8016a9a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016aa0:	b298      	uxth	r0, r3
 8016aa2:	b003      	add	sp, #12
 8016aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aa8:	217d      	movs	r1, #125	; 0x7d
 8016aaa:	f082 0220 	eor.w	r2, r2, #32
 8016aae:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8016ab2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8016ab6:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8016aba:	2901      	cmp	r1, #1
 8016abc:	f04f 0203 	mov.w	r2, #3
 8016ac0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016ac4:	d804      	bhi.n	8016ad0 <uxr_write_framed_msg+0x2c0>
 8016ac6:	4611      	mov	r1, r2
 8016ac8:	f04f 0c04 	mov.w	ip, #4
 8016acc:	2205      	movs	r2, #5
 8016ace:	e752      	b.n	8016976 <uxr_write_framed_msg+0x166>
 8016ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ad2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8016ad6:	b2dd      	uxtb	r5, r3
 8016ad8:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8016adc:	2204      	movs	r2, #4
 8016ade:	2901      	cmp	r1, #1
 8016ae0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016ae4:	f63f aec0 	bhi.w	8016868 <uxr_write_framed_msg+0x58>
 8016ae8:	e758      	b.n	801699c <uxr_write_framed_msg+0x18c>
 8016aea:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016aee:	fa5f f889 	uxtb.w	r8, r9
 8016af2:	9301      	str	r3, [sp, #4]
 8016af4:	2200      	movs	r2, #0
 8016af6:	e6f5      	b.n	80168e4 <uxr_write_framed_msg+0xd4>
 8016af8:	08019a28 	.word	0x08019a28

08016afc <uxr_framing_read_transport>:
 8016afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b00:	4604      	mov	r4, r0
 8016b02:	b083      	sub	sp, #12
 8016b04:	461f      	mov	r7, r3
 8016b06:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8016b0a:	4689      	mov	r9, r1
 8016b0c:	4692      	mov	sl, r2
 8016b0e:	f7fb f8e3 	bl	8011cd8 <uxr_millis>
 8016b12:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016b16:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8016b1a:	42b3      	cmp	r3, r6
 8016b1c:	4680      	mov	r8, r0
 8016b1e:	d061      	beq.n	8016be4 <uxr_framing_read_transport+0xe8>
 8016b20:	d81c      	bhi.n	8016b5c <uxr_framing_read_transport+0x60>
 8016b22:	1e75      	subs	r5, r6, #1
 8016b24:	1aed      	subs	r5, r5, r3
 8016b26:	b2ed      	uxtb	r5, r5
 8016b28:	2600      	movs	r6, #0
 8016b2a:	455d      	cmp	r5, fp
 8016b2c:	d81f      	bhi.n	8016b6e <uxr_framing_read_transport+0x72>
 8016b2e:	19ab      	adds	r3, r5, r6
 8016b30:	455b      	cmp	r3, fp
 8016b32:	bf84      	itt	hi
 8016b34:	ebab 0605 	subhi.w	r6, fp, r5
 8016b38:	b2f6      	uxtbhi	r6, r6
 8016b3a:	b9ed      	cbnz	r5, 8016b78 <uxr_framing_read_transport+0x7c>
 8016b3c:	f04f 0b00 	mov.w	fp, #0
 8016b40:	f7fb f8ca 	bl	8011cd8 <uxr_millis>
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	eba0 0808 	sub.w	r8, r0, r8
 8016b4a:	eba3 0308 	sub.w	r3, r3, r8
 8016b4e:	4658      	mov	r0, fp
 8016b50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b54:	603b      	str	r3, [r7, #0]
 8016b56:	b003      	add	sp, #12
 8016b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b5c:	2e00      	cmp	r6, #0
 8016b5e:	d049      	beq.n	8016bf4 <uxr_framing_read_transport+0xf8>
 8016b60:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8016b64:	b2ed      	uxtb	r5, r5
 8016b66:	3e01      	subs	r6, #1
 8016b68:	455d      	cmp	r5, fp
 8016b6a:	b2f6      	uxtb	r6, r6
 8016b6c:	d9df      	bls.n	8016b2e <uxr_framing_read_transport+0x32>
 8016b6e:	fa5f f58b 	uxtb.w	r5, fp
 8016b72:	2600      	movs	r6, #0
 8016b74:	2d00      	cmp	r5, #0
 8016b76:	d0e1      	beq.n	8016b3c <uxr_framing_read_transport+0x40>
 8016b78:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016b7c:	3102      	adds	r1, #2
 8016b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b80:	9300      	str	r3, [sp, #0]
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	4421      	add	r1, r4
 8016b86:	462a      	mov	r2, r5
 8016b88:	4650      	mov	r0, sl
 8016b8a:	47c8      	blx	r9
 8016b8c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016b90:	4a1a      	ldr	r2, [pc, #104]	; (8016bfc <uxr_framing_read_transport+0x100>)
 8016b92:	4403      	add	r3, r0
 8016b94:	0859      	lsrs	r1, r3, #1
 8016b96:	fba2 2101 	umull	r2, r1, r2, r1
 8016b9a:	0889      	lsrs	r1, r1, #2
 8016b9c:	222a      	movs	r2, #42	; 0x2a
 8016b9e:	fb02 3111 	mls	r1, r2, r1, r3
 8016ba2:	4683      	mov	fp, r0
 8016ba4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	d0c7      	beq.n	8016b3c <uxr_framing_read_transport+0x40>
 8016bac:	42a8      	cmp	r0, r5
 8016bae:	d1c7      	bne.n	8016b40 <uxr_framing_read_transport+0x44>
 8016bb0:	2e00      	cmp	r6, #0
 8016bb2:	d0c5      	beq.n	8016b40 <uxr_framing_read_transport+0x44>
 8016bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bb6:	9300      	str	r3, [sp, #0]
 8016bb8:	3102      	adds	r1, #2
 8016bba:	4632      	mov	r2, r6
 8016bbc:	4421      	add	r1, r4
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	4650      	mov	r0, sl
 8016bc2:	47c8      	blx	r9
 8016bc4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016bc8:	4a0c      	ldr	r2, [pc, #48]	; (8016bfc <uxr_framing_read_transport+0x100>)
 8016bca:	180b      	adds	r3, r1, r0
 8016bcc:	0859      	lsrs	r1, r3, #1
 8016bce:	fba2 1201 	umull	r1, r2, r2, r1
 8016bd2:	0892      	lsrs	r2, r2, #2
 8016bd4:	212a      	movs	r1, #42	; 0x2a
 8016bd6:	fb01 3312 	mls	r3, r1, r2, r3
 8016bda:	eb00 0b05 	add.w	fp, r0, r5
 8016bde:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8016be2:	e7ad      	b.n	8016b40 <uxr_framing_read_transport+0x44>
 8016be4:	2600      	movs	r6, #0
 8016be6:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8016bea:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8016bec:	d9bf      	bls.n	8016b6e <uxr_framing_read_transport+0x72>
 8016bee:	2102      	movs	r1, #2
 8016bf0:	2529      	movs	r5, #41	; 0x29
 8016bf2:	e7c4      	b.n	8016b7e <uxr_framing_read_transport+0x82>
 8016bf4:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8016bf8:	b2ed      	uxtb	r5, r5
 8016bfa:	e796      	b.n	8016b2a <uxr_framing_read_transport+0x2e>
 8016bfc:	30c30c31 	.word	0x30c30c31

08016c00 <uxr_read_framed_msg>:
 8016c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c04:	461e      	mov	r6, r3
 8016c06:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8016c0a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8016c0e:	429d      	cmp	r5, r3
 8016c10:	b083      	sub	sp, #12
 8016c12:	4604      	mov	r4, r0
 8016c14:	4688      	mov	r8, r1
 8016c16:	4691      	mov	r9, r2
 8016c18:	f000 8188 	beq.w	8016f2c <uxr_read_framed_msg+0x32c>
 8016c1c:	7823      	ldrb	r3, [r4, #0]
 8016c1e:	4dc1      	ldr	r5, [pc, #772]	; (8016f24 <uxr_read_framed_msg+0x324>)
 8016c20:	4fc1      	ldr	r7, [pc, #772]	; (8016f28 <uxr_read_framed_msg+0x328>)
 8016c22:	2b07      	cmp	r3, #7
 8016c24:	d8fd      	bhi.n	8016c22 <uxr_read_framed_msg+0x22>
 8016c26:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016c2a:	0115      	.short	0x0115
 8016c2c:	00d600f6 	.word	0x00d600f6
 8016c30:	009000b9 	.word	0x009000b9
 8016c34:	0030004d 	.word	0x0030004d
 8016c38:	0008      	.short	0x0008
 8016c3a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016c3e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016c42:	4299      	cmp	r1, r3
 8016c44:	f000 814a 	beq.w	8016edc <uxr_read_framed_msg+0x2dc>
 8016c48:	18e2      	adds	r2, r4, r3
 8016c4a:	7892      	ldrb	r2, [r2, #2]
 8016c4c:	2a7d      	cmp	r2, #125	; 0x7d
 8016c4e:	f000 8199 	beq.w	8016f84 <uxr_read_framed_msg+0x384>
 8016c52:	3301      	adds	r3, #1
 8016c54:	0858      	lsrs	r0, r3, #1
 8016c56:	fba5 1000 	umull	r1, r0, r5, r0
 8016c5a:	0880      	lsrs	r0, r0, #2
 8016c5c:	212a      	movs	r1, #42	; 0x2a
 8016c5e:	fb01 3310 	mls	r3, r1, r0, r3
 8016c62:	2a7e      	cmp	r2, #126	; 0x7e
 8016c64:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016c68:	f000 8252 	beq.w	8017110 <uxr_read_framed_msg+0x510>
 8016c6c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016c6e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8016c70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	2200      	movs	r2, #0
 8016c78:	4299      	cmp	r1, r3
 8016c7a:	86a3      	strh	r3, [r4, #52]	; 0x34
 8016c7c:	7022      	strb	r2, [r4, #0]
 8016c7e:	f000 8179 	beq.w	8016f74 <uxr_read_framed_msg+0x374>
 8016c82:	2000      	movs	r0, #0
 8016c84:	b003      	add	sp, #12
 8016c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016c8e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016c92:	4299      	cmp	r1, r3
 8016c94:	f000 8131 	beq.w	8016efa <uxr_read_framed_msg+0x2fa>
 8016c98:	18e2      	adds	r2, r4, r3
 8016c9a:	7890      	ldrb	r0, [r2, #2]
 8016c9c:	287d      	cmp	r0, #125	; 0x7d
 8016c9e:	f000 8190 	beq.w	8016fc2 <uxr_read_framed_msg+0x3c2>
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	085a      	lsrs	r2, r3, #1
 8016ca6:	fba5 1202 	umull	r1, r2, r5, r2
 8016caa:	0892      	lsrs	r2, r2, #2
 8016cac:	212a      	movs	r1, #42	; 0x2a
 8016cae:	fb01 3312 	mls	r3, r1, r2, r3
 8016cb2:	287e      	cmp	r0, #126	; 0x7e
 8016cb4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016cb8:	f000 821a 	beq.w	80170f0 <uxr_read_framed_msg+0x4f0>
 8016cbc:	2307      	movs	r3, #7
 8016cbe:	86a0      	strh	r0, [r4, #52]	; 0x34
 8016cc0:	7023      	strb	r3, [r4, #0]
 8016cc2:	e7ae      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016cc4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016cc6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8016cca:	459e      	cmp	lr, r3
 8016ccc:	d938      	bls.n	8016d40 <uxr_read_framed_msg+0x140>
 8016cce:	ee07 8a90 	vmov	s15, r8
 8016cd2:	212a      	movs	r1, #42	; 0x2a
 8016cd4:	e020      	b.n	8016d18 <uxr_read_framed_msg+0x118>
 8016cd6:	f89b c002 	ldrb.w	ip, [fp, #2]
 8016cda:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8016cde:	f000 80d4 	beq.w	8016e8a <uxr_read_framed_msg+0x28a>
 8016ce2:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8016ce6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016cea:	f000 8219 	beq.w	8017120 <uxr_read_framed_msg+0x520>
 8016cee:	f806 c003 	strb.w	ip, [r6, r3]
 8016cf2:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8016cf6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016cf8:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8016cfc:	ea8a 000c 	eor.w	r0, sl, ip
 8016d00:	b2c0      	uxtb	r0, r0
 8016d02:	3301      	adds	r3, #1
 8016d04:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8016d08:	b29b      	uxth	r3, r3
 8016d0a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8016d0e:	4573      	cmp	r3, lr
 8016d10:	8663      	strh	r3, [r4, #50]	; 0x32
 8016d12:	86e2      	strh	r2, [r4, #54]	; 0x36
 8016d14:	f080 8120 	bcs.w	8016f58 <uxr_read_framed_msg+0x358>
 8016d18:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8016d1c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8016d20:	f100 0c01 	add.w	ip, r0, #1
 8016d24:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016d28:	fba5 8202 	umull	r8, r2, r5, r2
 8016d2c:	0892      	lsrs	r2, r2, #2
 8016d2e:	4582      	cmp	sl, r0
 8016d30:	eb04 0b00 	add.w	fp, r4, r0
 8016d34:	fb01 c212 	mls	r2, r1, r2, ip
 8016d38:	d1cd      	bne.n	8016cd6 <uxr_read_framed_msg+0xd6>
 8016d3a:	ee17 8a90 	vmov	r8, s15
 8016d3e:	459e      	cmp	lr, r3
 8016d40:	f040 8111 	bne.w	8016f66 <uxr_read_framed_msg+0x366>
 8016d44:	2306      	movs	r3, #6
 8016d46:	7023      	strb	r3, [r4, #0]
 8016d48:	e76b      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016d4a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016d4e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016d52:	4298      	cmp	r0, r3
 8016d54:	f000 80c2 	beq.w	8016edc <uxr_read_framed_msg+0x2dc>
 8016d58:	18e2      	adds	r2, r4, r3
 8016d5a:	7891      	ldrb	r1, [r2, #2]
 8016d5c:	297d      	cmp	r1, #125	; 0x7d
 8016d5e:	f000 814c 	beq.w	8016ffa <uxr_read_framed_msg+0x3fa>
 8016d62:	3301      	adds	r3, #1
 8016d64:	085a      	lsrs	r2, r3, #1
 8016d66:	fba5 0202 	umull	r0, r2, r5, r2
 8016d6a:	0892      	lsrs	r2, r2, #2
 8016d6c:	202a      	movs	r0, #42	; 0x2a
 8016d6e:	fb00 3312 	mls	r3, r0, r2, r3
 8016d72:	297e      	cmp	r1, #126	; 0x7e
 8016d74:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016d78:	f000 81ca 	beq.w	8017110 <uxr_read_framed_msg+0x510>
 8016d7c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016d7e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016d82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d84:	b29b      	uxth	r3, r3
 8016d86:	2000      	movs	r0, #0
 8016d88:	428b      	cmp	r3, r1
 8016d8a:	8623      	strh	r3, [r4, #48]	; 0x30
 8016d8c:	8660      	strh	r0, [r4, #50]	; 0x32
 8016d8e:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016d90:	f240 80df 	bls.w	8016f52 <uxr_read_framed_msg+0x352>
 8016d94:	7020      	strb	r0, [r4, #0]
 8016d96:	b003      	add	sp, #12
 8016d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d9c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016da0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016da4:	4299      	cmp	r1, r3
 8016da6:	f000 80a8 	beq.w	8016efa <uxr_read_framed_msg+0x2fa>
 8016daa:	18e2      	adds	r2, r4, r3
 8016dac:	7890      	ldrb	r0, [r2, #2]
 8016dae:	287d      	cmp	r0, #125	; 0x7d
 8016db0:	f000 8164 	beq.w	801707c <uxr_read_framed_msg+0x47c>
 8016db4:	3301      	adds	r3, #1
 8016db6:	085a      	lsrs	r2, r3, #1
 8016db8:	fba5 1202 	umull	r1, r2, r5, r2
 8016dbc:	0892      	lsrs	r2, r2, #2
 8016dbe:	212a      	movs	r1, #42	; 0x2a
 8016dc0:	fb01 3312 	mls	r3, r1, r2, r3
 8016dc4:	287e      	cmp	r0, #126	; 0x7e
 8016dc6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016dca:	f000 8191 	beq.w	80170f0 <uxr_read_framed_msg+0x4f0>
 8016dce:	2304      	movs	r3, #4
 8016dd0:	8620      	strh	r0, [r4, #48]	; 0x30
 8016dd2:	7023      	strb	r3, [r4, #0]
 8016dd4:	e725      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016dd6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016dda:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016dde:	4290      	cmp	r0, r2
 8016de0:	f000 80b3 	beq.w	8016f4a <uxr_read_framed_msg+0x34a>
 8016de4:	18a3      	adds	r3, r4, r2
 8016de6:	7899      	ldrb	r1, [r3, #2]
 8016de8:	297d      	cmp	r1, #125	; 0x7d
 8016dea:	f000 8164 	beq.w	80170b6 <uxr_read_framed_msg+0x4b6>
 8016dee:	3201      	adds	r2, #1
 8016df0:	0850      	lsrs	r0, r2, #1
 8016df2:	fba5 3000 	umull	r3, r0, r5, r0
 8016df6:	0880      	lsrs	r0, r0, #2
 8016df8:	232a      	movs	r3, #42	; 0x2a
 8016dfa:	fb03 2210 	mls	r2, r3, r0, r2
 8016dfe:	297e      	cmp	r1, #126	; 0x7e
 8016e00:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016e04:	f000 8188 	beq.w	8017118 <uxr_read_framed_msg+0x518>
 8016e08:	7863      	ldrb	r3, [r4, #1]
 8016e0a:	428b      	cmp	r3, r1
 8016e0c:	bf0c      	ite	eq
 8016e0e:	2303      	moveq	r3, #3
 8016e10:	2300      	movne	r3, #0
 8016e12:	7023      	strb	r3, [r4, #0]
 8016e14:	e705      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016e16:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016e1a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016e1e:	2200      	movs	r2, #0
 8016e20:	4299      	cmp	r1, r3
 8016e22:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8016e26:	d06c      	beq.n	8016f02 <uxr_read_framed_msg+0x302>
 8016e28:	18e2      	adds	r2, r4, r3
 8016e2a:	7890      	ldrb	r0, [r2, #2]
 8016e2c:	287d      	cmp	r0, #125	; 0x7d
 8016e2e:	f000 8101 	beq.w	8017034 <uxr_read_framed_msg+0x434>
 8016e32:	3301      	adds	r3, #1
 8016e34:	085a      	lsrs	r2, r3, #1
 8016e36:	fba5 1202 	umull	r1, r2, r5, r2
 8016e3a:	0892      	lsrs	r2, r2, #2
 8016e3c:	212a      	movs	r1, #42	; 0x2a
 8016e3e:	fb01 3312 	mls	r3, r1, r2, r3
 8016e42:	287e      	cmp	r0, #126	; 0x7e
 8016e44:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8016e48:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016e4c:	d059      	beq.n	8016f02 <uxr_read_framed_msg+0x302>
 8016e4e:	2302      	movs	r3, #2
 8016e50:	7023      	strb	r3, [r4, #0]
 8016e52:	e6e6      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016e54:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8016e58:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016e5c:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8016e60:	1c51      	adds	r1, r2, #1
 8016e62:	084b      	lsrs	r3, r1, #1
 8016e64:	fba5 c303 	umull	ip, r3, r5, r3
 8016e68:	089b      	lsrs	r3, r3, #2
 8016e6a:	fb0e 1313 	mls	r3, lr, r3, r1
 8016e6e:	4592      	cmp	sl, r2
 8016e70:	eb04 0002 	add.w	r0, r4, r2
 8016e74:	b2da      	uxtb	r2, r3
 8016e76:	f43f af04 	beq.w	8016c82 <uxr_read_framed_msg+0x82>
 8016e7a:	7883      	ldrb	r3, [r0, #2]
 8016e7c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016e80:	2b7e      	cmp	r3, #126	; 0x7e
 8016e82:	d1ed      	bne.n	8016e60 <uxr_read_framed_msg+0x260>
 8016e84:	2301      	movs	r3, #1
 8016e86:	7023      	strb	r3, [r4, #0]
 8016e88:	e6cb      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016e8a:	f100 0c01 	add.w	ip, r0, #1
 8016e8e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016e92:	fba5 8202 	umull	r8, r2, r5, r2
 8016e96:	0892      	lsrs	r2, r2, #2
 8016e98:	fb01 c212 	mls	r2, r1, r2, ip
 8016e9c:	eb04 0c02 	add.w	ip, r4, r2
 8016ea0:	b2d2      	uxtb	r2, r2
 8016ea2:	4592      	cmp	sl, r2
 8016ea4:	f100 0002 	add.w	r0, r0, #2
 8016ea8:	f43f af47 	beq.w	8016d3a <uxr_read_framed_msg+0x13a>
 8016eac:	0842      	lsrs	r2, r0, #1
 8016eae:	f89c a002 	ldrb.w	sl, [ip, #2]
 8016eb2:	fba5 8202 	umull	r8, r2, r5, r2
 8016eb6:	0892      	lsrs	r2, r2, #2
 8016eb8:	fb01 0012 	mls	r0, r1, r2, r0
 8016ebc:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8016ec0:	f08a 0c20 	eor.w	ip, sl, #32
 8016ec4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8016ec8:	f47f af11 	bne.w	8016cee <uxr_read_framed_msg+0xee>
 8016ecc:	459e      	cmp	lr, r3
 8016ece:	ee17 8a90 	vmov	r8, s15
 8016ed2:	f43f af37 	beq.w	8016d44 <uxr_read_framed_msg+0x144>
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	7023      	strb	r3, [r4, #0]
 8016eda:	e6a2      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ede:	9300      	str	r3, [sp, #0]
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	9301      	str	r3, [sp, #4]
 8016ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ee6:	464a      	mov	r2, r9
 8016ee8:	4641      	mov	r1, r8
 8016eea:	4620      	mov	r0, r4
 8016eec:	f7ff fe06 	bl	8016afc <uxr_framing_read_transport>
 8016ef0:	2800      	cmp	r0, #0
 8016ef2:	f43f aec6 	beq.w	8016c82 <uxr_read_framed_msg+0x82>
 8016ef6:	7823      	ldrb	r3, [r4, #0]
 8016ef8:	e693      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	2302      	movs	r3, #2
 8016f00:	e7ef      	b.n	8016ee2 <uxr_read_framed_msg+0x2e2>
 8016f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f04:	9300      	str	r3, [sp, #0]
 8016f06:	2304      	movs	r3, #4
 8016f08:	9301      	str	r3, [sp, #4]
 8016f0a:	464a      	mov	r2, r9
 8016f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f0e:	4641      	mov	r1, r8
 8016f10:	4620      	mov	r0, r4
 8016f12:	f7ff fdf3 	bl	8016afc <uxr_framing_read_transport>
 8016f16:	2800      	cmp	r0, #0
 8016f18:	d1ed      	bne.n	8016ef6 <uxr_read_framed_msg+0x2f6>
 8016f1a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8016f1e:	2b7e      	cmp	r3, #126	; 0x7e
 8016f20:	d0e9      	beq.n	8016ef6 <uxr_read_framed_msg+0x2f6>
 8016f22:	e6ae      	b.n	8016c82 <uxr_read_framed_msg+0x82>
 8016f24:	30c30c31 	.word	0x30c30c31
 8016f28:	08019a28 	.word	0x08019a28
 8016f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f2e:	9300      	str	r3, [sp, #0]
 8016f30:	2305      	movs	r3, #5
 8016f32:	9301      	str	r3, [sp, #4]
 8016f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f36:	f7ff fde1 	bl	8016afc <uxr_framing_read_transport>
 8016f3a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016f3e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016f42:	429a      	cmp	r2, r3
 8016f44:	f43f ae9d 	beq.w	8016c82 <uxr_read_framed_msg+0x82>
 8016f48:	e668      	b.n	8016c1c <uxr_read_framed_msg+0x1c>
 8016f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f4c:	9300      	str	r3, [sp, #0]
 8016f4e:	2303      	movs	r3, #3
 8016f50:	e7c7      	b.n	8016ee2 <uxr_read_framed_msg+0x2e2>
 8016f52:	2305      	movs	r3, #5
 8016f54:	7023      	strb	r3, [r4, #0]
 8016f56:	e664      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8016f58:	ee17 8a90 	vmov	r8, s15
 8016f5c:	f43f aef2 	beq.w	8016d44 <uxr_read_framed_msg+0x144>
 8016f60:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8016f64:	d08e      	beq.n	8016e84 <uxr_read_framed_msg+0x284>
 8016f66:	ebae 0303 	sub.w	r3, lr, r3
 8016f6a:	3302      	adds	r3, #2
 8016f6c:	9301      	str	r3, [sp, #4]
 8016f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f70:	9300      	str	r3, [sp, #0]
 8016f72:	e7b7      	b.n	8016ee4 <uxr_read_framed_msg+0x2e4>
 8016f74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f76:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8016f7a:	7013      	strb	r3, [r2, #0]
 8016f7c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8016f7e:	b003      	add	sp, #12
 8016f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f84:	f103 0c01 	add.w	ip, r3, #1
 8016f88:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016f8c:	fba5 0202 	umull	r0, r2, r5, r2
 8016f90:	0892      	lsrs	r2, r2, #2
 8016f92:	202a      	movs	r0, #42	; 0x2a
 8016f94:	fb00 c212 	mls	r2, r0, r2, ip
 8016f98:	fa5f fc82 	uxtb.w	ip, r2
 8016f9c:	4561      	cmp	r1, ip
 8016f9e:	d09d      	beq.n	8016edc <uxr_read_framed_msg+0x2dc>
 8016fa0:	3302      	adds	r3, #2
 8016fa2:	4422      	add	r2, r4
 8016fa4:	0859      	lsrs	r1, r3, #1
 8016fa6:	7892      	ldrb	r2, [r2, #2]
 8016fa8:	fba5 c101 	umull	ip, r1, r5, r1
 8016fac:	0889      	lsrs	r1, r1, #2
 8016fae:	fb00 3311 	mls	r3, r0, r1, r3
 8016fb2:	2a7e      	cmp	r2, #126	; 0x7e
 8016fb4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016fb8:	f000 80aa 	beq.w	8017110 <uxr_read_framed_msg+0x510>
 8016fbc:	f082 0220 	eor.w	r2, r2, #32
 8016fc0:	e654      	b.n	8016c6c <uxr_read_framed_msg+0x6c>
 8016fc2:	1c58      	adds	r0, r3, #1
 8016fc4:	0842      	lsrs	r2, r0, #1
 8016fc6:	fba5 c202 	umull	ip, r2, r5, r2
 8016fca:	0892      	lsrs	r2, r2, #2
 8016fcc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016fd0:	fb0c 0212 	mls	r2, ip, r2, r0
 8016fd4:	b2d0      	uxtb	r0, r2
 8016fd6:	4281      	cmp	r1, r0
 8016fd8:	d08f      	beq.n	8016efa <uxr_read_framed_msg+0x2fa>
 8016fda:	4422      	add	r2, r4
 8016fdc:	3302      	adds	r3, #2
 8016fde:	7890      	ldrb	r0, [r2, #2]
 8016fe0:	085a      	lsrs	r2, r3, #1
 8016fe2:	fba5 1202 	umull	r1, r2, r5, r2
 8016fe6:	0892      	lsrs	r2, r2, #2
 8016fe8:	fb0c 3312 	mls	r3, ip, r2, r3
 8016fec:	287e      	cmp	r0, #126	; 0x7e
 8016fee:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016ff2:	d07d      	beq.n	80170f0 <uxr_read_framed_msg+0x4f0>
 8016ff4:	f080 0020 	eor.w	r0, r0, #32
 8016ff8:	e660      	b.n	8016cbc <uxr_read_framed_msg+0xbc>
 8016ffa:	1c59      	adds	r1, r3, #1
 8016ffc:	084a      	lsrs	r2, r1, #1
 8016ffe:	fba5 c202 	umull	ip, r2, r5, r2
 8017002:	0892      	lsrs	r2, r2, #2
 8017004:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017008:	fb0c 1212 	mls	r2, ip, r2, r1
 801700c:	b2d1      	uxtb	r1, r2
 801700e:	4288      	cmp	r0, r1
 8017010:	f43f af64 	beq.w	8016edc <uxr_read_framed_msg+0x2dc>
 8017014:	4422      	add	r2, r4
 8017016:	3302      	adds	r3, #2
 8017018:	7891      	ldrb	r1, [r2, #2]
 801701a:	085a      	lsrs	r2, r3, #1
 801701c:	fba5 0202 	umull	r0, r2, r5, r2
 8017020:	0892      	lsrs	r2, r2, #2
 8017022:	fb0c 3312 	mls	r3, ip, r2, r3
 8017026:	297e      	cmp	r1, #126	; 0x7e
 8017028:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801702c:	d070      	beq.n	8017110 <uxr_read_framed_msg+0x510>
 801702e:	f081 0120 	eor.w	r1, r1, #32
 8017032:	e6a3      	b.n	8016d7c <uxr_read_framed_msg+0x17c>
 8017034:	f103 0c01 	add.w	ip, r3, #1
 8017038:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801703c:	fba5 0202 	umull	r0, r2, r5, r2
 8017040:	0892      	lsrs	r2, r2, #2
 8017042:	202a      	movs	r0, #42	; 0x2a
 8017044:	fb00 c212 	mls	r2, r0, r2, ip
 8017048:	fa5f fc82 	uxtb.w	ip, r2
 801704c:	4561      	cmp	r1, ip
 801704e:	f43f af58 	beq.w	8016f02 <uxr_read_framed_msg+0x302>
 8017052:	4422      	add	r2, r4
 8017054:	3302      	adds	r3, #2
 8017056:	7891      	ldrb	r1, [r2, #2]
 8017058:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801705c:	085a      	lsrs	r2, r3, #1
 801705e:	fba5 c202 	umull	ip, r2, r5, r2
 8017062:	0892      	lsrs	r2, r2, #2
 8017064:	fb00 3312 	mls	r3, r0, r2, r3
 8017068:	297e      	cmp	r1, #126	; 0x7e
 801706a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801706e:	f43f af48 	beq.w	8016f02 <uxr_read_framed_msg+0x302>
 8017072:	f081 0120 	eor.w	r1, r1, #32
 8017076:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801707a:	e6e8      	b.n	8016e4e <uxr_read_framed_msg+0x24e>
 801707c:	1c58      	adds	r0, r3, #1
 801707e:	0842      	lsrs	r2, r0, #1
 8017080:	fba5 c202 	umull	ip, r2, r5, r2
 8017084:	0892      	lsrs	r2, r2, #2
 8017086:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801708a:	fb0c 0212 	mls	r2, ip, r2, r0
 801708e:	b2d0      	uxtb	r0, r2
 8017090:	4281      	cmp	r1, r0
 8017092:	f43f af32 	beq.w	8016efa <uxr_read_framed_msg+0x2fa>
 8017096:	4422      	add	r2, r4
 8017098:	3302      	adds	r3, #2
 801709a:	7890      	ldrb	r0, [r2, #2]
 801709c:	085a      	lsrs	r2, r3, #1
 801709e:	fba5 1202 	umull	r1, r2, r5, r2
 80170a2:	0892      	lsrs	r2, r2, #2
 80170a4:	fb0c 3312 	mls	r3, ip, r2, r3
 80170a8:	287e      	cmp	r0, #126	; 0x7e
 80170aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80170ae:	d01f      	beq.n	80170f0 <uxr_read_framed_msg+0x4f0>
 80170b0:	f080 0020 	eor.w	r0, r0, #32
 80170b4:	e68b      	b.n	8016dce <uxr_read_framed_msg+0x1ce>
 80170b6:	1c51      	adds	r1, r2, #1
 80170b8:	084b      	lsrs	r3, r1, #1
 80170ba:	fba5 c303 	umull	ip, r3, r5, r3
 80170be:	089b      	lsrs	r3, r3, #2
 80170c0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80170c4:	fb0c 1313 	mls	r3, ip, r3, r1
 80170c8:	b2d9      	uxtb	r1, r3
 80170ca:	4288      	cmp	r0, r1
 80170cc:	f43f af3d 	beq.w	8016f4a <uxr_read_framed_msg+0x34a>
 80170d0:	3202      	adds	r2, #2
 80170d2:	4423      	add	r3, r4
 80170d4:	0850      	lsrs	r0, r2, #1
 80170d6:	789b      	ldrb	r3, [r3, #2]
 80170d8:	fba5 1000 	umull	r1, r0, r5, r0
 80170dc:	0880      	lsrs	r0, r0, #2
 80170de:	fb0c 2210 	mls	r2, ip, r0, r2
 80170e2:	2b7e      	cmp	r3, #126	; 0x7e
 80170e4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80170e8:	d016      	beq.n	8017118 <uxr_read_framed_msg+0x518>
 80170ea:	f083 0120 	eor.w	r1, r3, #32
 80170ee:	e68b      	b.n	8016e08 <uxr_read_framed_msg+0x208>
 80170f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170f2:	9300      	str	r3, [sp, #0]
 80170f4:	2302      	movs	r3, #2
 80170f6:	9301      	str	r3, [sp, #4]
 80170f8:	464a      	mov	r2, r9
 80170fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170fc:	4641      	mov	r1, r8
 80170fe:	4620      	mov	r0, r4
 8017100:	f7ff fcfc 	bl	8016afc <uxr_framing_read_transport>
 8017104:	2800      	cmp	r0, #0
 8017106:	f47f aef6 	bne.w	8016ef6 <uxr_read_framed_msg+0x2f6>
 801710a:	2301      	movs	r3, #1
 801710c:	7023      	strb	r3, [r4, #0]
 801710e:	e588      	b.n	8016c22 <uxr_read_framed_msg+0x22>
 8017110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017112:	9300      	str	r3, [sp, #0]
 8017114:	2301      	movs	r3, #1
 8017116:	e7ee      	b.n	80170f6 <uxr_read_framed_msg+0x4f6>
 8017118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801711a:	9300      	str	r3, [sp, #0]
 801711c:	2303      	movs	r3, #3
 801711e:	e7ea      	b.n	80170f6 <uxr_read_framed_msg+0x4f6>
 8017120:	ee17 8a90 	vmov	r8, s15
 8017124:	e6ae      	b.n	8016e84 <uxr_read_framed_msg+0x284>
 8017126:	bf00      	nop

08017128 <rcl_get_default_domain_id>:
 8017128:	b530      	push	{r4, r5, lr}
 801712a:	b083      	sub	sp, #12
 801712c:	2300      	movs	r3, #0
 801712e:	9300      	str	r3, [sp, #0]
 8017130:	b1d0      	cbz	r0, 8017168 <rcl_get_default_domain_id+0x40>
 8017132:	4604      	mov	r4, r0
 8017134:	4669      	mov	r1, sp
 8017136:	4815      	ldr	r0, [pc, #84]	; (801718c <rcl_get_default_domain_id+0x64>)
 8017138:	f7fc fffa 	bl	8014130 <rcutils_get_env>
 801713c:	4602      	mov	r2, r0
 801713e:	b110      	cbz	r0, 8017146 <rcl_get_default_domain_id+0x1e>
 8017140:	2001      	movs	r0, #1
 8017142:	b003      	add	sp, #12
 8017144:	bd30      	pop	{r4, r5, pc}
 8017146:	9b00      	ldr	r3, [sp, #0]
 8017148:	b18b      	cbz	r3, 801716e <rcl_get_default_domain_id+0x46>
 801714a:	7818      	ldrb	r0, [r3, #0]
 801714c:	2800      	cmp	r0, #0
 801714e:	d0f8      	beq.n	8017142 <rcl_get_default_domain_id+0x1a>
 8017150:	a901      	add	r1, sp, #4
 8017152:	4618      	mov	r0, r3
 8017154:	9201      	str	r2, [sp, #4]
 8017156:	f000 fe6d 	bl	8017e34 <strtoul>
 801715a:	4605      	mov	r5, r0
 801715c:	b150      	cbz	r0, 8017174 <rcl_get_default_domain_id+0x4c>
 801715e:	1c43      	adds	r3, r0, #1
 8017160:	d00d      	beq.n	801717e <rcl_get_default_domain_id+0x56>
 8017162:	6025      	str	r5, [r4, #0]
 8017164:	2000      	movs	r0, #0
 8017166:	e7ec      	b.n	8017142 <rcl_get_default_domain_id+0x1a>
 8017168:	200b      	movs	r0, #11
 801716a:	b003      	add	sp, #12
 801716c:	bd30      	pop	{r4, r5, pc}
 801716e:	4618      	mov	r0, r3
 8017170:	b003      	add	sp, #12
 8017172:	bd30      	pop	{r4, r5, pc}
 8017174:	9b01      	ldr	r3, [sp, #4]
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d0f2      	beq.n	8017162 <rcl_get_default_domain_id+0x3a>
 801717c:	e7e0      	b.n	8017140 <rcl_get_default_domain_id+0x18>
 801717e:	f001 f883 	bl	8018288 <__errno>
 8017182:	6803      	ldr	r3, [r0, #0]
 8017184:	2b22      	cmp	r3, #34	; 0x22
 8017186:	d1ec      	bne.n	8017162 <rcl_get_default_domain_id+0x3a>
 8017188:	e7da      	b.n	8017140 <rcl_get_default_domain_id+0x18>
 801718a:	bf00      	nop
 801718c:	08019c28 	.word	0x08019c28

08017190 <rcl_expand_topic_name>:
 8017190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017194:	b08b      	sub	sp, #44	; 0x2c
 8017196:	9306      	str	r3, [sp, #24]
 8017198:	2800      	cmp	r0, #0
 801719a:	f000 80ad 	beq.w	80172f8 <rcl_expand_topic_name+0x168>
 801719e:	460e      	mov	r6, r1
 80171a0:	2900      	cmp	r1, #0
 80171a2:	f000 80a9 	beq.w	80172f8 <rcl_expand_topic_name+0x168>
 80171a6:	4617      	mov	r7, r2
 80171a8:	2a00      	cmp	r2, #0
 80171aa:	f000 80a5 	beq.w	80172f8 <rcl_expand_topic_name+0x168>
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	f000 80a2 	beq.w	80172f8 <rcl_expand_topic_name+0x168>
 80171b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	f000 809e 	beq.w	80172f8 <rcl_expand_topic_name+0x168>
 80171bc:	2200      	movs	r2, #0
 80171be:	a909      	add	r1, sp, #36	; 0x24
 80171c0:	4680      	mov	r8, r0
 80171c2:	f000 f9f5 	bl	80175b0 <rcl_validate_topic_name>
 80171c6:	4604      	mov	r4, r0
 80171c8:	2800      	cmp	r0, #0
 80171ca:	f040 8096 	bne.w	80172fa <rcl_expand_topic_name+0x16a>
 80171ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	f040 809a 	bne.w	801730a <rcl_expand_topic_name+0x17a>
 80171d6:	4602      	mov	r2, r0
 80171d8:	a909      	add	r1, sp, #36	; 0x24
 80171da:	4630      	mov	r0, r6
 80171dc:	f7fd fb7a 	bl	80148d4 <rmw_validate_node_name>
 80171e0:	2800      	cmp	r0, #0
 80171e2:	f040 808e 	bne.w	8017302 <rcl_expand_topic_name+0x172>
 80171e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171e8:	2a00      	cmp	r2, #0
 80171ea:	f040 8093 	bne.w	8017314 <rcl_expand_topic_name+0x184>
 80171ee:	a909      	add	r1, sp, #36	; 0x24
 80171f0:	4638      	mov	r0, r7
 80171f2:	f7fd fb51 	bl	8014898 <rmw_validate_namespace>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	f040 8083 	bne.w	8017302 <rcl_expand_topic_name+0x172>
 80171fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80171fe:	2c00      	cmp	r4, #0
 8017200:	f040 80ed 	bne.w	80173de <rcl_expand_topic_name+0x24e>
 8017204:	217b      	movs	r1, #123	; 0x7b
 8017206:	4640      	mov	r0, r8
 8017208:	f000 ffb2 	bl	8018170 <strchr>
 801720c:	f898 3000 	ldrb.w	r3, [r8]
 8017210:	2b2f      	cmp	r3, #47	; 0x2f
 8017212:	4605      	mov	r5, r0
 8017214:	f000 809e 	beq.w	8017354 <rcl_expand_topic_name+0x1c4>
 8017218:	2b7e      	cmp	r3, #126	; 0x7e
 801721a:	f040 80a2 	bne.w	8017362 <rcl_expand_topic_name+0x1d2>
 801721e:	4638      	mov	r0, r7
 8017220:	f7e8 ffe0 	bl	80001e4 <strlen>
 8017224:	4a82      	ldr	r2, [pc, #520]	; (8017430 <rcl_expand_topic_name+0x2a0>)
 8017226:	4b83      	ldr	r3, [pc, #524]	; (8017434 <rcl_expand_topic_name+0x2a4>)
 8017228:	2801      	cmp	r0, #1
 801722a:	bf18      	it	ne
 801722c:	4613      	movne	r3, r2
 801722e:	9302      	str	r3, [sp, #8]
 8017230:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017238:	f108 0301 	add.w	r3, r8, #1
 801723c:	9305      	str	r3, [sp, #20]
 801723e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017242:	9301      	str	r3, [sp, #4]
 8017244:	ab14      	add	r3, sp, #80	; 0x50
 8017246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017248:	f7fc ff9a 	bl	8014180 <rcutils_format_string_limit>
 801724c:	4682      	mov	sl, r0
 801724e:	2800      	cmp	r0, #0
 8017250:	f000 80c7 	beq.w	80173e2 <rcl_expand_topic_name+0x252>
 8017254:	2d00      	cmp	r5, #0
 8017256:	f000 80a2 	beq.w	801739e <rcl_expand_topic_name+0x20e>
 801725a:	217b      	movs	r1, #123	; 0x7b
 801725c:	f000 ff88 	bl	8018170 <strchr>
 8017260:	46d1      	mov	r9, sl
 8017262:	4605      	mov	r5, r0
 8017264:	9407      	str	r4, [sp, #28]
 8017266:	46d3      	mov	fp, sl
 8017268:	464c      	mov	r4, r9
 801726a:	2d00      	cmp	r5, #0
 801726c:	f000 80be 	beq.w	80173ec <rcl_expand_topic_name+0x25c>
 8017270:	217d      	movs	r1, #125	; 0x7d
 8017272:	4620      	mov	r0, r4
 8017274:	f000 ff7c 	bl	8018170 <strchr>
 8017278:	eba0 0905 	sub.w	r9, r0, r5
 801727c:	f109 0a01 	add.w	sl, r9, #1
 8017280:	486d      	ldr	r0, [pc, #436]	; (8017438 <rcl_expand_topic_name+0x2a8>)
 8017282:	4652      	mov	r2, sl
 8017284:	4629      	mov	r1, r5
 8017286:	f000 ff80 	bl	801818a <strncmp>
 801728a:	2800      	cmp	r0, #0
 801728c:	d067      	beq.n	801735e <rcl_expand_topic_name+0x1ce>
 801728e:	486b      	ldr	r0, [pc, #428]	; (801743c <rcl_expand_topic_name+0x2ac>)
 8017290:	4652      	mov	r2, sl
 8017292:	4629      	mov	r1, r5
 8017294:	f000 ff79 	bl	801818a <strncmp>
 8017298:	b130      	cbz	r0, 80172a8 <rcl_expand_topic_name+0x118>
 801729a:	4869      	ldr	r0, [pc, #420]	; (8017440 <rcl_expand_topic_name+0x2b0>)
 801729c:	4652      	mov	r2, sl
 801729e:	4629      	mov	r1, r5
 80172a0:	f000 ff73 	bl	801818a <strncmp>
 80172a4:	2800      	cmp	r0, #0
 80172a6:	d137      	bne.n	8017318 <rcl_expand_topic_name+0x188>
 80172a8:	46b9      	mov	r9, r7
 80172aa:	ab16      	add	r3, sp, #88	; 0x58
 80172ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80172b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80172b4:	ab14      	add	r3, sp, #80	; 0x50
 80172b6:	4628      	mov	r0, r5
 80172b8:	cb0c      	ldmia	r3, {r2, r3}
 80172ba:	4651      	mov	r1, sl
 80172bc:	f7fd f89c 	bl	80143f8 <rcutils_strndup>
 80172c0:	4605      	mov	r5, r0
 80172c2:	2800      	cmp	r0, #0
 80172c4:	f000 809c 	beq.w	8017400 <rcl_expand_topic_name+0x270>
 80172c8:	464a      	mov	r2, r9
 80172ca:	4620      	mov	r0, r4
 80172cc:	ab14      	add	r3, sp, #80	; 0x50
 80172ce:	4629      	mov	r1, r5
 80172d0:	f7fc ff90 	bl	80141f4 <rcutils_repl_str>
 80172d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80172d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80172d8:	4604      	mov	r4, r0
 80172da:	4628      	mov	r0, r5
 80172dc:	4798      	blx	r3
 80172de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80172e0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80172e2:	4658      	mov	r0, fp
 80172e4:	4798      	blx	r3
 80172e6:	2c00      	cmp	r4, #0
 80172e8:	d07b      	beq.n	80173e2 <rcl_expand_topic_name+0x252>
 80172ea:	217b      	movs	r1, #123	; 0x7b
 80172ec:	4620      	mov	r0, r4
 80172ee:	f000 ff3f 	bl	8018170 <strchr>
 80172f2:	46a3      	mov	fp, r4
 80172f4:	4605      	mov	r5, r0
 80172f6:	e7b8      	b.n	801726a <rcl_expand_topic_name+0xda>
 80172f8:	240b      	movs	r4, #11
 80172fa:	4620      	mov	r0, r4
 80172fc:	b00b      	add	sp, #44	; 0x2c
 80172fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017302:	f7fb ff05 	bl	8013110 <rcl_convert_rmw_ret_to_rcl_ret>
 8017306:	4604      	mov	r4, r0
 8017308:	e7f7      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 801730a:	2467      	movs	r4, #103	; 0x67
 801730c:	4620      	mov	r0, r4
 801730e:	b00b      	add	sp, #44	; 0x2c
 8017310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017314:	24c9      	movs	r4, #201	; 0xc9
 8017316:	e7f0      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 8017318:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801731c:	9806      	ldr	r0, [sp, #24]
 801731e:	1c69      	adds	r1, r5, #1
 8017320:	f7fd f984 	bl	801462c <rcutils_string_map_getn>
 8017324:	4681      	mov	r9, r0
 8017326:	2800      	cmp	r0, #0
 8017328:	d1bf      	bne.n	80172aa <rcl_expand_topic_name+0x11a>
 801732a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801732c:	aa16      	add	r2, sp, #88	; 0x58
 801732e:	6018      	str	r0, [r3, #0]
 8017330:	ca07      	ldmia	r2, {r0, r1, r2}
 8017332:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017336:	ab14      	add	r3, sp, #80	; 0x50
 8017338:	cb0c      	ldmia	r3, {r2, r3}
 801733a:	4651      	mov	r1, sl
 801733c:	4628      	mov	r0, r5
 801733e:	f7fd f85b 	bl	80143f8 <rcutils_strndup>
 8017342:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017346:	4798      	blx	r3
 8017348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801734a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801734c:	4658      	mov	r0, fp
 801734e:	2469      	movs	r4, #105	; 0x69
 8017350:	4798      	blx	r3
 8017352:	e7d2      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 8017354:	2800      	cmp	r0, #0
 8017356:	d05b      	beq.n	8017410 <rcl_expand_topic_name+0x280>
 8017358:	46c1      	mov	r9, r8
 801735a:	46a2      	mov	sl, r4
 801735c:	e782      	b.n	8017264 <rcl_expand_topic_name+0xd4>
 801735e:	46b1      	mov	r9, r6
 8017360:	e7a3      	b.n	80172aa <rcl_expand_topic_name+0x11a>
 8017362:	2800      	cmp	r0, #0
 8017364:	d1f8      	bne.n	8017358 <rcl_expand_topic_name+0x1c8>
 8017366:	4638      	mov	r0, r7
 8017368:	f7e8 ff3c 	bl	80001e4 <strlen>
 801736c:	4a35      	ldr	r2, [pc, #212]	; (8017444 <rcl_expand_topic_name+0x2b4>)
 801736e:	4b36      	ldr	r3, [pc, #216]	; (8017448 <rcl_expand_topic_name+0x2b8>)
 8017370:	f8cd 8010 	str.w	r8, [sp, #16]
 8017374:	2801      	cmp	r0, #1
 8017376:	bf18      	it	ne
 8017378:	4613      	movne	r3, r2
 801737a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801737e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017382:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017384:	9703      	str	r7, [sp, #12]
 8017386:	9200      	str	r2, [sp, #0]
 8017388:	ab14      	add	r3, sp, #80	; 0x50
 801738a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801738c:	f7fc fef8 	bl	8014180 <rcutils_format_string_limit>
 8017390:	4682      	mov	sl, r0
 8017392:	4653      	mov	r3, sl
 8017394:	b32b      	cbz	r3, 80173e2 <rcl_expand_topic_name+0x252>
 8017396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017398:	f8c3 a000 	str.w	sl, [r3]
 801739c:	e7ad      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 801739e:	f89a 3000 	ldrb.w	r3, [sl]
 80173a2:	2b2f      	cmp	r3, #47	; 0x2f
 80173a4:	d0f7      	beq.n	8017396 <rcl_expand_topic_name+0x206>
 80173a6:	4638      	mov	r0, r7
 80173a8:	f7e8 ff1c 	bl	80001e4 <strlen>
 80173ac:	4a25      	ldr	r2, [pc, #148]	; (8017444 <rcl_expand_topic_name+0x2b4>)
 80173ae:	4b26      	ldr	r3, [pc, #152]	; (8017448 <rcl_expand_topic_name+0x2b8>)
 80173b0:	f8cd a010 	str.w	sl, [sp, #16]
 80173b4:	2801      	cmp	r0, #1
 80173b6:	bf18      	it	ne
 80173b8:	4613      	movne	r3, r2
 80173ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80173be:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80173c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80173c4:	9703      	str	r7, [sp, #12]
 80173c6:	9200      	str	r2, [sp, #0]
 80173c8:	ab14      	add	r3, sp, #80	; 0x50
 80173ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80173cc:	f7fc fed8 	bl	8014180 <rcutils_format_string_limit>
 80173d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80173d4:	4605      	mov	r5, r0
 80173d6:	4650      	mov	r0, sl
 80173d8:	4798      	blx	r3
 80173da:	46aa      	mov	sl, r5
 80173dc:	e7d9      	b.n	8017392 <rcl_expand_topic_name+0x202>
 80173de:	24ca      	movs	r4, #202	; 0xca
 80173e0:	e78b      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 80173e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80173e4:	2300      	movs	r3, #0
 80173e6:	6013      	str	r3, [r2, #0]
 80173e8:	240a      	movs	r4, #10
 80173ea:	e786      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 80173ec:	465b      	mov	r3, fp
 80173ee:	9c07      	ldr	r4, [sp, #28]
 80173f0:	46da      	mov	sl, fp
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d1d3      	bne.n	801739e <rcl_expand_topic_name+0x20e>
 80173f6:	f898 3000 	ldrb.w	r3, [r8]
 80173fa:	2b2f      	cmp	r3, #47	; 0x2f
 80173fc:	d0cb      	beq.n	8017396 <rcl_expand_topic_name+0x206>
 80173fe:	e7b2      	b.n	8017366 <rcl_expand_topic_name+0x1d6>
 8017400:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8017404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017406:	6015      	str	r5, [r2, #0]
 8017408:	4658      	mov	r0, fp
 801740a:	4798      	blx	r3
 801740c:	240a      	movs	r4, #10
 801740e:	e774      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 8017410:	ab17      	add	r3, sp, #92	; 0x5c
 8017412:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017416:	e88d 0003 	stmia.w	sp, {r0, r1}
 801741a:	ab14      	add	r3, sp, #80	; 0x50
 801741c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801741e:	4640      	mov	r0, r8
 8017420:	f7fc ffc8 	bl	80143b4 <rcutils_strdup>
 8017424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017426:	2800      	cmp	r0, #0
 8017428:	6018      	str	r0, [r3, #0]
 801742a:	bf08      	it	eq
 801742c:	240a      	moveq	r4, #10
 801742e:	e764      	b.n	80172fa <rcl_expand_topic_name+0x16a>
 8017430:	08019c38 	.word	0x08019c38
 8017434:	08019398 	.word	0x08019398
 8017438:	08019c40 	.word	0x08019c40
 801743c:	08019c48 	.word	0x08019c48
 8017440:	08019c50 	.word	0x08019c50
 8017444:	0801952c 	.word	0x0801952c
 8017448:	080193a8 	.word	0x080193a8

0801744c <rcl_get_default_topic_name_substitutions>:
 801744c:	2800      	cmp	r0, #0
 801744e:	bf0c      	ite	eq
 8017450:	200b      	moveq	r0, #11
 8017452:	2000      	movne	r0, #0
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop

08017458 <rcl_get_zero_initialized_guard_condition>:
 8017458:	4a03      	ldr	r2, [pc, #12]	; (8017468 <rcl_get_zero_initialized_guard_condition+0x10>)
 801745a:	4603      	mov	r3, r0
 801745c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017460:	e883 0003 	stmia.w	r3, {r0, r1}
 8017464:	4618      	mov	r0, r3
 8017466:	4770      	bx	lr
 8017468:	08019c5c 	.word	0x08019c5c

0801746c <rcl_guard_condition_init_from_rmw>:
 801746c:	b082      	sub	sp, #8
 801746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017472:	b086      	sub	sp, #24
 8017474:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017478:	4604      	mov	r4, r0
 801747a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801747e:	460e      	mov	r6, r1
 8017480:	4617      	mov	r7, r2
 8017482:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017486:	f10d 0e04 	add.w	lr, sp, #4
 801748a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801748e:	f8dc 3000 	ldr.w	r3, [ip]
 8017492:	f8ce 3000 	str.w	r3, [lr]
 8017496:	a801      	add	r0, sp, #4
 8017498:	f7f7 fa5a 	bl	800e950 <rcutils_allocator_is_valid>
 801749c:	b350      	cbz	r0, 80174f4 <rcl_guard_condition_init_from_rmw+0x88>
 801749e:	b34c      	cbz	r4, 80174f4 <rcl_guard_condition_init_from_rmw+0x88>
 80174a0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80174a4:	f1b8 0f00 	cmp.w	r8, #0
 80174a8:	d11e      	bne.n	80174e8 <rcl_guard_condition_init_from_rmw+0x7c>
 80174aa:	b31f      	cbz	r7, 80174f4 <rcl_guard_condition_init_from_rmw+0x88>
 80174ac:	4638      	mov	r0, r7
 80174ae:	f7fb fe4d 	bl	801314c <rcl_context_is_valid>
 80174b2:	b328      	cbz	r0, 8017500 <rcl_guard_condition_init_from_rmw+0x94>
 80174b4:	9b01      	ldr	r3, [sp, #4]
 80174b6:	9905      	ldr	r1, [sp, #20]
 80174b8:	201c      	movs	r0, #28
 80174ba:	4798      	blx	r3
 80174bc:	4605      	mov	r5, r0
 80174be:	6060      	str	r0, [r4, #4]
 80174c0:	b358      	cbz	r0, 801751a <rcl_guard_condition_init_from_rmw+0xae>
 80174c2:	b1fe      	cbz	r6, 8017504 <rcl_guard_condition_init_from_rmw+0x98>
 80174c4:	6006      	str	r6, [r0, #0]
 80174c6:	f880 8004 	strb.w	r8, [r0, #4]
 80174ca:	ac01      	add	r4, sp, #4
 80174cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174ce:	f105 0c08 	add.w	ip, r5, #8
 80174d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174d6:	6823      	ldr	r3, [r4, #0]
 80174d8:	f8cc 3000 	str.w	r3, [ip]
 80174dc:	2000      	movs	r0, #0
 80174de:	b006      	add	sp, #24
 80174e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174e4:	b002      	add	sp, #8
 80174e6:	4770      	bx	lr
 80174e8:	2064      	movs	r0, #100	; 0x64
 80174ea:	b006      	add	sp, #24
 80174ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174f0:	b002      	add	sp, #8
 80174f2:	4770      	bx	lr
 80174f4:	200b      	movs	r0, #11
 80174f6:	b006      	add	sp, #24
 80174f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174fc:	b002      	add	sp, #8
 80174fe:	4770      	bx	lr
 8017500:	2065      	movs	r0, #101	; 0x65
 8017502:	e7f2      	b.n	80174ea <rcl_guard_condition_init_from_rmw+0x7e>
 8017504:	6838      	ldr	r0, [r7, #0]
 8017506:	3028      	adds	r0, #40	; 0x28
 8017508:	f000 fa34 	bl	8017974 <rmw_create_guard_condition>
 801750c:	6028      	str	r0, [r5, #0]
 801750e:	6865      	ldr	r5, [r4, #4]
 8017510:	682e      	ldr	r6, [r5, #0]
 8017512:	b126      	cbz	r6, 801751e <rcl_guard_condition_init_from_rmw+0xb2>
 8017514:	2301      	movs	r3, #1
 8017516:	712b      	strb	r3, [r5, #4]
 8017518:	e7d7      	b.n	80174ca <rcl_guard_condition_init_from_rmw+0x5e>
 801751a:	200a      	movs	r0, #10
 801751c:	e7e5      	b.n	80174ea <rcl_guard_condition_init_from_rmw+0x7e>
 801751e:	4628      	mov	r0, r5
 8017520:	9b02      	ldr	r3, [sp, #8]
 8017522:	9905      	ldr	r1, [sp, #20]
 8017524:	4798      	blx	r3
 8017526:	6066      	str	r6, [r4, #4]
 8017528:	2001      	movs	r0, #1
 801752a:	e7de      	b.n	80174ea <rcl_guard_condition_init_from_rmw+0x7e>

0801752c <rcl_guard_condition_fini>:
 801752c:	b570      	push	{r4, r5, r6, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	b1f0      	cbz	r0, 8017570 <rcl_guard_condition_fini+0x44>
 8017532:	6843      	ldr	r3, [r0, #4]
 8017534:	4604      	mov	r4, r0
 8017536:	b163      	cbz	r3, 8017552 <rcl_guard_condition_fini+0x26>
 8017538:	6818      	ldr	r0, [r3, #0]
 801753a:	68de      	ldr	r6, [r3, #12]
 801753c:	6999      	ldr	r1, [r3, #24]
 801753e:	b160      	cbz	r0, 801755a <rcl_guard_condition_fini+0x2e>
 8017540:	791d      	ldrb	r5, [r3, #4]
 8017542:	b965      	cbnz	r5, 801755e <rcl_guard_condition_fini+0x32>
 8017544:	4618      	mov	r0, r3
 8017546:	47b0      	blx	r6
 8017548:	2300      	movs	r3, #0
 801754a:	4628      	mov	r0, r5
 801754c:	6063      	str	r3, [r4, #4]
 801754e:	b002      	add	sp, #8
 8017550:	bd70      	pop	{r4, r5, r6, pc}
 8017552:	461d      	mov	r5, r3
 8017554:	4628      	mov	r0, r5
 8017556:	b002      	add	sp, #8
 8017558:	bd70      	pop	{r4, r5, r6, pc}
 801755a:	4605      	mov	r5, r0
 801755c:	e7f2      	b.n	8017544 <rcl_guard_condition_fini+0x18>
 801755e:	9101      	str	r1, [sp, #4]
 8017560:	f000 fa1c 	bl	801799c <rmw_destroy_guard_condition>
 8017564:	1e05      	subs	r5, r0, #0
 8017566:	6863      	ldr	r3, [r4, #4]
 8017568:	9901      	ldr	r1, [sp, #4]
 801756a:	bf18      	it	ne
 801756c:	2501      	movne	r5, #1
 801756e:	e7e9      	b.n	8017544 <rcl_guard_condition_fini+0x18>
 8017570:	250b      	movs	r5, #11
 8017572:	4628      	mov	r0, r5
 8017574:	b002      	add	sp, #8
 8017576:	bd70      	pop	{r4, r5, r6, pc}

08017578 <rcl_guard_condition_get_default_options>:
 8017578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801757a:	b087      	sub	sp, #28
 801757c:	4606      	mov	r6, r0
 801757e:	4668      	mov	r0, sp
 8017580:	f7f7 f9d8 	bl	800e934 <rcutils_get_default_allocator>
 8017584:	4b09      	ldr	r3, [pc, #36]	; (80175ac <rcl_guard_condition_get_default_options+0x34>)
 8017586:	46ee      	mov	lr, sp
 8017588:	469c      	mov	ip, r3
 801758a:	461d      	mov	r5, r3
 801758c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017596:	4634      	mov	r4, r6
 8017598:	f8de 7000 	ldr.w	r7, [lr]
 801759c:	f8cc 7000 	str.w	r7, [ip]
 80175a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80175a2:	4630      	mov	r0, r6
 80175a4:	6027      	str	r7, [r4, #0]
 80175a6:	b007      	add	sp, #28
 80175a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175aa:	bf00      	nop
 80175ac:	2000e3ec 	.word	0x2000e3ec

080175b0 <rcl_validate_topic_name>:
 80175b0:	2800      	cmp	r0, #0
 80175b2:	d07a      	beq.n	80176aa <rcl_validate_topic_name+0xfa>
 80175b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175b8:	460e      	mov	r6, r1
 80175ba:	2900      	cmp	r1, #0
 80175bc:	d07c      	beq.n	80176b8 <rcl_validate_topic_name+0x108>
 80175be:	4617      	mov	r7, r2
 80175c0:	4605      	mov	r5, r0
 80175c2:	f7e8 fe0f 	bl	80001e4 <strlen>
 80175c6:	b1b0      	cbz	r0, 80175f6 <rcl_validate_topic_name+0x46>
 80175c8:	f895 9000 	ldrb.w	r9, [r5]
 80175cc:	f8df c180 	ldr.w	ip, [pc, #384]	; 8017750 <rcl_validate_topic_name+0x1a0>
 80175d0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80175d4:	f013 0304 	ands.w	r3, r3, #4
 80175d8:	d169      	bne.n	80176ae <rcl_validate_topic_name+0xfe>
 80175da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80175de:	f815 2008 	ldrb.w	r2, [r5, r8]
 80175e2:	2a2f      	cmp	r2, #47	; 0x2f
 80175e4:	d10e      	bne.n	8017604 <rcl_validate_topic_name+0x54>
 80175e6:	2202      	movs	r2, #2
 80175e8:	6032      	str	r2, [r6, #0]
 80175ea:	b36f      	cbz	r7, 8017648 <rcl_validate_topic_name+0x98>
 80175ec:	f8c7 8000 	str.w	r8, [r7]
 80175f0:	4618      	mov	r0, r3
 80175f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f6:	2301      	movs	r3, #1
 80175f8:	6033      	str	r3, [r6, #0]
 80175fa:	b32f      	cbz	r7, 8017648 <rcl_validate_topic_name+0x98>
 80175fc:	2000      	movs	r0, #0
 80175fe:	6038      	str	r0, [r7, #0]
 8017600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017604:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8017608:	461c      	mov	r4, r3
 801760a:	4619      	mov	r1, r3
 801760c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017610:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017614:	f1be 0f09 	cmp.w	lr, #9
 8017618:	d919      	bls.n	801764e <rcl_validate_topic_name+0x9e>
 801761a:	f022 0e20 	bic.w	lr, r2, #32
 801761e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8017622:	f1be 0f19 	cmp.w	lr, #25
 8017626:	d912      	bls.n	801764e <rcl_validate_topic_name+0x9e>
 8017628:	2a5f      	cmp	r2, #95	; 0x5f
 801762a:	d019      	beq.n	8017660 <rcl_validate_topic_name+0xb0>
 801762c:	2a2f      	cmp	r2, #47	; 0x2f
 801762e:	d051      	beq.n	80176d4 <rcl_validate_topic_name+0x124>
 8017630:	2a7e      	cmp	r2, #126	; 0x7e
 8017632:	d048      	beq.n	80176c6 <rcl_validate_topic_name+0x116>
 8017634:	2a7b      	cmp	r2, #123	; 0x7b
 8017636:	d054      	beq.n	80176e2 <rcl_validate_topic_name+0x132>
 8017638:	2a7d      	cmp	r2, #125	; 0x7d
 801763a:	d161      	bne.n	8017700 <rcl_validate_topic_name+0x150>
 801763c:	2c00      	cmp	r4, #0
 801763e:	d155      	bne.n	80176ec <rcl_validate_topic_name+0x13c>
 8017640:	2305      	movs	r3, #5
 8017642:	6033      	str	r3, [r6, #0]
 8017644:	b107      	cbz	r7, 8017648 <rcl_validate_topic_name+0x98>
 8017646:	6039      	str	r1, [r7, #0]
 8017648:	2000      	movs	r0, #0
 801764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801764e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017652:	0752      	lsls	r2, r2, #29
 8017654:	d504      	bpl.n	8017660 <rcl_validate_topic_name+0xb0>
 8017656:	b11c      	cbz	r4, 8017660 <rcl_validate_topic_name+0xb0>
 8017658:	b111      	cbz	r1, 8017660 <rcl_validate_topic_name+0xb0>
 801765a:	1e4a      	subs	r2, r1, #1
 801765c:	429a      	cmp	r2, r3
 801765e:	d02d      	beq.n	80176bc <rcl_validate_topic_name+0x10c>
 8017660:	3101      	adds	r1, #1
 8017662:	4288      	cmp	r0, r1
 8017664:	d1d2      	bne.n	801760c <rcl_validate_topic_name+0x5c>
 8017666:	2c00      	cmp	r4, #0
 8017668:	d145      	bne.n	80176f6 <rcl_validate_topic_name+0x146>
 801766a:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801766e:	d04f      	beq.n	8017710 <rcl_validate_topic_name+0x160>
 8017670:	4620      	mov	r0, r4
 8017672:	2301      	movs	r3, #1
 8017674:	e006      	b.n	8017684 <rcl_validate_topic_name+0xd4>
 8017676:	428b      	cmp	r3, r1
 8017678:	f105 0501 	add.w	r5, r5, #1
 801767c:	f103 0201 	add.w	r2, r3, #1
 8017680:	d236      	bcs.n	80176f0 <rcl_validate_topic_name+0x140>
 8017682:	4613      	mov	r3, r2
 8017684:	4580      	cmp	r8, r0
 8017686:	f100 0001 	add.w	r0, r0, #1
 801768a:	d0f4      	beq.n	8017676 <rcl_validate_topic_name+0xc6>
 801768c:	782a      	ldrb	r2, [r5, #0]
 801768e:	2a2f      	cmp	r2, #47	; 0x2f
 8017690:	d1f1      	bne.n	8017676 <rcl_validate_topic_name+0xc6>
 8017692:	786a      	ldrb	r2, [r5, #1]
 8017694:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017698:	0754      	lsls	r4, r2, #29
 801769a:	d5ec      	bpl.n	8017676 <rcl_validate_topic_name+0xc6>
 801769c:	2204      	movs	r2, #4
 801769e:	6032      	str	r2, [r6, #0]
 80176a0:	2f00      	cmp	r7, #0
 80176a2:	d0d1      	beq.n	8017648 <rcl_validate_topic_name+0x98>
 80176a4:	603b      	str	r3, [r7, #0]
 80176a6:	2000      	movs	r0, #0
 80176a8:	e7aa      	b.n	8017600 <rcl_validate_topic_name+0x50>
 80176aa:	200b      	movs	r0, #11
 80176ac:	4770      	bx	lr
 80176ae:	2304      	movs	r3, #4
 80176b0:	6033      	str	r3, [r6, #0]
 80176b2:	2f00      	cmp	r7, #0
 80176b4:	d1a2      	bne.n	80175fc <rcl_validate_topic_name+0x4c>
 80176b6:	e7c7      	b.n	8017648 <rcl_validate_topic_name+0x98>
 80176b8:	200b      	movs	r0, #11
 80176ba:	e7a1      	b.n	8017600 <rcl_validate_topic_name+0x50>
 80176bc:	2309      	movs	r3, #9
 80176be:	6033      	str	r3, [r6, #0]
 80176c0:	2f00      	cmp	r7, #0
 80176c2:	d1c0      	bne.n	8017646 <rcl_validate_topic_name+0x96>
 80176c4:	e7c0      	b.n	8017648 <rcl_validate_topic_name+0x98>
 80176c6:	2900      	cmp	r1, #0
 80176c8:	d0ca      	beq.n	8017660 <rcl_validate_topic_name+0xb0>
 80176ca:	2306      	movs	r3, #6
 80176cc:	6033      	str	r3, [r6, #0]
 80176ce:	2f00      	cmp	r7, #0
 80176d0:	d1b9      	bne.n	8017646 <rcl_validate_topic_name+0x96>
 80176d2:	e7b9      	b.n	8017648 <rcl_validate_topic_name+0x98>
 80176d4:	2c00      	cmp	r4, #0
 80176d6:	d0c3      	beq.n	8017660 <rcl_validate_topic_name+0xb0>
 80176d8:	2308      	movs	r3, #8
 80176da:	6033      	str	r3, [r6, #0]
 80176dc:	2f00      	cmp	r7, #0
 80176de:	d1b2      	bne.n	8017646 <rcl_validate_topic_name+0x96>
 80176e0:	e7b2      	b.n	8017648 <rcl_validate_topic_name+0x98>
 80176e2:	2c00      	cmp	r4, #0
 80176e4:	d1f8      	bne.n	80176d8 <rcl_validate_topic_name+0x128>
 80176e6:	460b      	mov	r3, r1
 80176e8:	2401      	movs	r4, #1
 80176ea:	e7b9      	b.n	8017660 <rcl_validate_topic_name+0xb0>
 80176ec:	2400      	movs	r4, #0
 80176ee:	e7b7      	b.n	8017660 <rcl_validate_topic_name+0xb0>
 80176f0:	2000      	movs	r0, #0
 80176f2:	6030      	str	r0, [r6, #0]
 80176f4:	e784      	b.n	8017600 <rcl_validate_topic_name+0x50>
 80176f6:	2205      	movs	r2, #5
 80176f8:	6032      	str	r2, [r6, #0]
 80176fa:	2f00      	cmp	r7, #0
 80176fc:	d1d2      	bne.n	80176a4 <rcl_validate_topic_name+0xf4>
 80176fe:	e7a3      	b.n	8017648 <rcl_validate_topic_name+0x98>
 8017700:	2c00      	cmp	r4, #0
 8017702:	bf14      	ite	ne
 8017704:	2308      	movne	r3, #8
 8017706:	2303      	moveq	r3, #3
 8017708:	6033      	str	r3, [r6, #0]
 801770a:	2f00      	cmp	r7, #0
 801770c:	d19b      	bne.n	8017646 <rcl_validate_topic_name+0x96>
 801770e:	e79b      	b.n	8017648 <rcl_validate_topic_name+0x98>
 8017710:	2301      	movs	r3, #1
 8017712:	e00a      	b.n	801772a <rcl_validate_topic_name+0x17a>
 8017714:	2c01      	cmp	r4, #1
 8017716:	d013      	beq.n	8017740 <rcl_validate_topic_name+0x190>
 8017718:	4299      	cmp	r1, r3
 801771a:	f104 0401 	add.w	r4, r4, #1
 801771e:	f105 0501 	add.w	r5, r5, #1
 8017722:	f103 0201 	add.w	r2, r3, #1
 8017726:	d9e3      	bls.n	80176f0 <rcl_validate_topic_name+0x140>
 8017728:	4613      	mov	r3, r2
 801772a:	45a0      	cmp	r8, r4
 801772c:	d0f4      	beq.n	8017718 <rcl_validate_topic_name+0x168>
 801772e:	782a      	ldrb	r2, [r5, #0]
 8017730:	2a2f      	cmp	r2, #47	; 0x2f
 8017732:	d1ef      	bne.n	8017714 <rcl_validate_topic_name+0x164>
 8017734:	786a      	ldrb	r2, [r5, #1]
 8017736:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801773a:	0752      	lsls	r2, r2, #29
 801773c:	d5ec      	bpl.n	8017718 <rcl_validate_topic_name+0x168>
 801773e:	e7ad      	b.n	801769c <rcl_validate_topic_name+0xec>
 8017740:	2307      	movs	r3, #7
 8017742:	6033      	str	r3, [r6, #0]
 8017744:	2f00      	cmp	r7, #0
 8017746:	f43f af7f 	beq.w	8017648 <rcl_validate_topic_name+0x98>
 801774a:	603c      	str	r4, [r7, #0]
 801774c:	2000      	movs	r0, #0
 801774e:	e757      	b.n	8017600 <rcl_validate_topic_name+0x50>
 8017750:	08019cd4 	.word	0x08019cd4

08017754 <rcutils_string_array_fini>:
 8017754:	b320      	cbz	r0, 80177a0 <rcutils_string_array_fini+0x4c>
 8017756:	b570      	push	{r4, r5, r6, lr}
 8017758:	4604      	mov	r4, r0
 801775a:	6840      	ldr	r0, [r0, #4]
 801775c:	b1d8      	cbz	r0, 8017796 <rcutils_string_array_fini+0x42>
 801775e:	f104 0008 	add.w	r0, r4, #8
 8017762:	f7f7 f8f5 	bl	800e950 <rcutils_allocator_is_valid>
 8017766:	b1b8      	cbz	r0, 8017798 <rcutils_string_array_fini+0x44>
 8017768:	6823      	ldr	r3, [r4, #0]
 801776a:	b1bb      	cbz	r3, 801779c <rcutils_string_array_fini+0x48>
 801776c:	2500      	movs	r5, #0
 801776e:	6860      	ldr	r0, [r4, #4]
 8017770:	462e      	mov	r6, r5
 8017772:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017776:	68e3      	ldr	r3, [r4, #12]
 8017778:	69a1      	ldr	r1, [r4, #24]
 801777a:	4798      	blx	r3
 801777c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8017780:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8017784:	3501      	adds	r5, #1
 8017786:	429d      	cmp	r5, r3
 8017788:	d3f3      	bcc.n	8017772 <rcutils_string_array_fini+0x1e>
 801778a:	68e3      	ldr	r3, [r4, #12]
 801778c:	69a1      	ldr	r1, [r4, #24]
 801778e:	4798      	blx	r3
 8017790:	2000      	movs	r0, #0
 8017792:	e9c4 0000 	strd	r0, r0, [r4]
 8017796:	bd70      	pop	{r4, r5, r6, pc}
 8017798:	200b      	movs	r0, #11
 801779a:	bd70      	pop	{r4, r5, r6, pc}
 801779c:	6860      	ldr	r0, [r4, #4]
 801779e:	e7f4      	b.n	801778a <rcutils_string_array_fini+0x36>
 80177a0:	200b      	movs	r0, #11
 80177a2:	4770      	bx	lr

080177a4 <on_status>:
 80177a4:	b082      	sub	sp, #8
 80177a6:	b002      	add	sp, #8
 80177a8:	4770      	bx	lr
 80177aa:	bf00      	nop

080177ac <on_topic>:
 80177ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177b0:	4a22      	ldr	r2, [pc, #136]	; (801783c <on_topic+0x90>)
 80177b2:	b094      	sub	sp, #80	; 0x50
 80177b4:	6812      	ldr	r2, [r2, #0]
 80177b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80177b8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80177bc:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 80177c0:	b3c2      	cbz	r2, 8017834 <on_topic+0x88>
 80177c2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80177c6:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80177ca:	e001      	b.n	80177d0 <on_topic+0x24>
 80177cc:	6852      	ldr	r2, [r2, #4]
 80177ce:	b38a      	cbz	r2, 8017834 <on_topic+0x88>
 80177d0:	6894      	ldr	r4, [r2, #8]
 80177d2:	8aa3      	ldrh	r3, [r4, #20]
 80177d4:	428b      	cmp	r3, r1
 80177d6:	d1f9      	bne.n	80177cc <on_topic+0x20>
 80177d8:	7da3      	ldrb	r3, [r4, #22]
 80177da:	4283      	cmp	r3, r0
 80177dc:	d1f6      	bne.n	80177cc <on_topic+0x20>
 80177de:	2248      	movs	r2, #72	; 0x48
 80177e0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80177e4:	4668      	mov	r0, sp
 80177e6:	f000 fd83 	bl	80182f0 <memcpy>
 80177ea:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80177ee:	cb0c      	ldmia	r3, {r2, r3}
 80177f0:	4620      	mov	r0, r4
 80177f2:	f7f7 fcdd 	bl	800f1b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80177f6:	4607      	mov	r7, r0
 80177f8:	b1e0      	cbz	r0, 8017834 <on_topic+0x88>
 80177fa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80177fe:	4632      	mov	r2, r6
 8017800:	4628      	mov	r0, r5
 8017802:	f108 0110 	add.w	r1, r8, #16
 8017806:	f7fd ffcf 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 801780a:	b930      	cbnz	r0, 801781a <on_topic+0x6e>
 801780c:	480c      	ldr	r0, [pc, #48]	; (8017840 <on_topic+0x94>)
 801780e:	4639      	mov	r1, r7
 8017810:	b014      	add	sp, #80	; 0x50
 8017812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017816:	f7fd b8cb 	b.w	80149b0 <put_memory>
 801781a:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801781e:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8017822:	f7fd feb7 	bl	8015594 <rmw_uros_epoch_nanos>
 8017826:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801782a:	2305      	movs	r3, #5
 801782c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017830:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017834:	b014      	add	sp, #80	; 0x50
 8017836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801783a:	bf00      	nop
 801783c:	2000e24c 	.word	0x2000e24c
 8017840:	2000e23c 	.word	0x2000e23c

08017844 <on_request>:
 8017844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017848:	4823      	ldr	r0, [pc, #140]	; (80178d8 <on_request+0x94>)
 801784a:	b094      	sub	sp, #80	; 0x50
 801784c:	6800      	ldr	r0, [r0, #0]
 801784e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8017850:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8017854:	9113      	str	r1, [sp, #76]	; 0x4c
 8017856:	2800      	cmp	r0, #0
 8017858:	d03b      	beq.n	80178d2 <on_request+0x8e>
 801785a:	461d      	mov	r5, r3
 801785c:	e001      	b.n	8017862 <on_request+0x1e>
 801785e:	6840      	ldr	r0, [r0, #4]
 8017860:	b3b8      	cbz	r0, 80178d2 <on_request+0x8e>
 8017862:	6884      	ldr	r4, [r0, #8]
 8017864:	8b21      	ldrh	r1, [r4, #24]
 8017866:	4291      	cmp	r1, r2
 8017868:	d1f9      	bne.n	801785e <on_request+0x1a>
 801786a:	2248      	movs	r2, #72	; 0x48
 801786c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017870:	4668      	mov	r0, sp
 8017872:	f000 fd3d 	bl	80182f0 <memcpy>
 8017876:	f104 0320 	add.w	r3, r4, #32
 801787a:	cb0c      	ldmia	r3, {r2, r3}
 801787c:	4620      	mov	r0, r4
 801787e:	f7f7 fc97 	bl	800f1b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017882:	4680      	mov	r8, r0
 8017884:	b328      	cbz	r0, 80178d2 <on_request+0x8e>
 8017886:	4638      	mov	r0, r7
 8017888:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801788c:	4632      	mov	r2, r6
 801788e:	f107 0110 	add.w	r1, r7, #16
 8017892:	f7fd ff89 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8017896:	b930      	cbnz	r0, 80178a6 <on_request+0x62>
 8017898:	4810      	ldr	r0, [pc, #64]	; (80178dc <on_request+0x98>)
 801789a:	4641      	mov	r1, r8
 801789c:	b014      	add	sp, #80	; 0x50
 801789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178a2:	f7fd b885 	b.w	80149b0 <put_memory>
 80178a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178a8:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 80178ac:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80178b0:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80178b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80178bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80178c0:	f7fd fe68 	bl	8015594 <rmw_uros_epoch_nanos>
 80178c4:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80178c8:	2303      	movs	r3, #3
 80178ca:	e942 0102 	strd	r0, r1, [r2, #-8]
 80178ce:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80178d2:	b014      	add	sp, #80	; 0x50
 80178d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178d8:	2000e21c 	.word	0x2000e21c
 80178dc:	2000e23c 	.word	0x2000e23c

080178e0 <on_reply>:
 80178e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178e4:	4821      	ldr	r0, [pc, #132]	; (801796c <on_reply+0x8c>)
 80178e6:	b094      	sub	sp, #80	; 0x50
 80178e8:	6800      	ldr	r0, [r0, #0]
 80178ea:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80178ec:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80178f0:	9113      	str	r1, [sp, #76]	; 0x4c
 80178f2:	b3b8      	cbz	r0, 8017964 <on_reply+0x84>
 80178f4:	461d      	mov	r5, r3
 80178f6:	e001      	b.n	80178fc <on_reply+0x1c>
 80178f8:	6840      	ldr	r0, [r0, #4]
 80178fa:	b398      	cbz	r0, 8017964 <on_reply+0x84>
 80178fc:	6884      	ldr	r4, [r0, #8]
 80178fe:	8b21      	ldrh	r1, [r4, #24]
 8017900:	4291      	cmp	r1, r2
 8017902:	d1f9      	bne.n	80178f8 <on_reply+0x18>
 8017904:	2248      	movs	r2, #72	; 0x48
 8017906:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801790a:	4668      	mov	r0, sp
 801790c:	f000 fcf0 	bl	80182f0 <memcpy>
 8017910:	f104 0320 	add.w	r3, r4, #32
 8017914:	cb0c      	ldmia	r3, {r2, r3}
 8017916:	4620      	mov	r0, r4
 8017918:	f7f7 fc4a 	bl	800f1b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801791c:	4680      	mov	r8, r0
 801791e:	b308      	cbz	r0, 8017964 <on_reply+0x84>
 8017920:	4638      	mov	r0, r7
 8017922:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017926:	4632      	mov	r2, r6
 8017928:	f107 0110 	add.w	r1, r7, #16
 801792c:	f7fd ff3c 	bl	80157a8 <ucdr_deserialize_array_uint8_t>
 8017930:	b930      	cbnz	r0, 8017940 <on_reply+0x60>
 8017932:	480f      	ldr	r0, [pc, #60]	; (8017970 <on_reply+0x90>)
 8017934:	4641      	mov	r1, r8
 8017936:	b014      	add	sp, #80	; 0x50
 8017938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801793c:	f7fd b838 	b.w	80149b0 <put_memory>
 8017940:	2200      	movs	r2, #0
 8017942:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8017946:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801794a:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801794e:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8017952:	f7fd fe1f 	bl	8015594 <rmw_uros_epoch_nanos>
 8017956:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801795a:	2304      	movs	r3, #4
 801795c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017960:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8017964:	b014      	add	sp, #80	; 0x50
 8017966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801796a:	bf00      	nop
 801796c:	20009930 	.word	0x20009930
 8017970:	2000e23c 	.word	0x2000e23c

08017974 <rmw_create_guard_condition>:
 8017974:	b538      	push	{r3, r4, r5, lr}
 8017976:	4605      	mov	r5, r0
 8017978:	4807      	ldr	r0, [pc, #28]	; (8017998 <rmw_create_guard_condition+0x24>)
 801797a:	f7fd f809 	bl	8014990 <get_memory>
 801797e:	b148      	cbz	r0, 8017994 <rmw_create_guard_condition+0x20>
 8017980:	6884      	ldr	r4, [r0, #8]
 8017982:	2300      	movs	r3, #0
 8017984:	7423      	strb	r3, [r4, #16]
 8017986:	61e5      	str	r5, [r4, #28]
 8017988:	f7fd f86a 	bl	8014a60 <rmw_get_implementation_identifier>
 801798c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017990:	f104 0014 	add.w	r0, r4, #20
 8017994:	bd38      	pop	{r3, r4, r5, pc}
 8017996:	bf00      	nop
 8017998:	2000e1dc 	.word	0x2000e1dc

0801799c <rmw_destroy_guard_condition>:
 801799c:	b508      	push	{r3, lr}
 801799e:	4b08      	ldr	r3, [pc, #32]	; (80179c0 <rmw_destroy_guard_condition+0x24>)
 80179a0:	6819      	ldr	r1, [r3, #0]
 80179a2:	b911      	cbnz	r1, 80179aa <rmw_destroy_guard_condition+0xe>
 80179a4:	e00a      	b.n	80179bc <rmw_destroy_guard_condition+0x20>
 80179a6:	6849      	ldr	r1, [r1, #4]
 80179a8:	b141      	cbz	r1, 80179bc <rmw_destroy_guard_condition+0x20>
 80179aa:	688b      	ldr	r3, [r1, #8]
 80179ac:	3314      	adds	r3, #20
 80179ae:	4298      	cmp	r0, r3
 80179b0:	d1f9      	bne.n	80179a6 <rmw_destroy_guard_condition+0xa>
 80179b2:	4803      	ldr	r0, [pc, #12]	; (80179c0 <rmw_destroy_guard_condition+0x24>)
 80179b4:	f7fc fffc 	bl	80149b0 <put_memory>
 80179b8:	2000      	movs	r0, #0
 80179ba:	bd08      	pop	{r3, pc}
 80179bc:	2001      	movs	r0, #1
 80179be:	bd08      	pop	{r3, pc}
 80179c0:	2000e1dc 	.word	0x2000e1dc

080179c4 <calloc>:
 80179c4:	4b02      	ldr	r3, [pc, #8]	; (80179d0 <calloc+0xc>)
 80179c6:	460a      	mov	r2, r1
 80179c8:	4601      	mov	r1, r0
 80179ca:	6818      	ldr	r0, [r3, #0]
 80179cc:	f000 b802 	b.w	80179d4 <_calloc_r>
 80179d0:	2000012c 	.word	0x2000012c

080179d4 <_calloc_r>:
 80179d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179d6:	fba1 2402 	umull	r2, r4, r1, r2
 80179da:	b94c      	cbnz	r4, 80179f0 <_calloc_r+0x1c>
 80179dc:	4611      	mov	r1, r2
 80179de:	9201      	str	r2, [sp, #4]
 80179e0:	f000 f886 	bl	8017af0 <_malloc_r>
 80179e4:	9a01      	ldr	r2, [sp, #4]
 80179e6:	4605      	mov	r5, r0
 80179e8:	b930      	cbnz	r0, 80179f8 <_calloc_r+0x24>
 80179ea:	4628      	mov	r0, r5
 80179ec:	b003      	add	sp, #12
 80179ee:	bd30      	pop	{r4, r5, pc}
 80179f0:	220c      	movs	r2, #12
 80179f2:	6002      	str	r2, [r0, #0]
 80179f4:	2500      	movs	r5, #0
 80179f6:	e7f8      	b.n	80179ea <_calloc_r+0x16>
 80179f8:	4621      	mov	r1, r4
 80179fa:	f000 fbb1 	bl	8018160 <memset>
 80179fe:	e7f4      	b.n	80179ea <_calloc_r+0x16>

08017a00 <getenv>:
 8017a00:	b507      	push	{r0, r1, r2, lr}
 8017a02:	4b04      	ldr	r3, [pc, #16]	; (8017a14 <getenv+0x14>)
 8017a04:	4601      	mov	r1, r0
 8017a06:	aa01      	add	r2, sp, #4
 8017a08:	6818      	ldr	r0, [r3, #0]
 8017a0a:	f000 f805 	bl	8017a18 <_findenv_r>
 8017a0e:	b003      	add	sp, #12
 8017a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a14:	2000012c 	.word	0x2000012c

08017a18 <_findenv_r>:
 8017a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a1c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8017a8c <_findenv_r+0x74>
 8017a20:	4607      	mov	r7, r0
 8017a22:	4689      	mov	r9, r1
 8017a24:	4616      	mov	r6, r2
 8017a26:	f000 fc8f 	bl	8018348 <__env_lock>
 8017a2a:	f8da 4000 	ldr.w	r4, [sl]
 8017a2e:	b134      	cbz	r4, 8017a3e <_findenv_r+0x26>
 8017a30:	464b      	mov	r3, r9
 8017a32:	4698      	mov	r8, r3
 8017a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a38:	b13a      	cbz	r2, 8017a4a <_findenv_r+0x32>
 8017a3a:	2a3d      	cmp	r2, #61	; 0x3d
 8017a3c:	d1f9      	bne.n	8017a32 <_findenv_r+0x1a>
 8017a3e:	4638      	mov	r0, r7
 8017a40:	f000 fc88 	bl	8018354 <__env_unlock>
 8017a44:	2000      	movs	r0, #0
 8017a46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4a:	eba8 0809 	sub.w	r8, r8, r9
 8017a4e:	46a3      	mov	fp, r4
 8017a50:	f854 0b04 	ldr.w	r0, [r4], #4
 8017a54:	2800      	cmp	r0, #0
 8017a56:	d0f2      	beq.n	8017a3e <_findenv_r+0x26>
 8017a58:	4642      	mov	r2, r8
 8017a5a:	4649      	mov	r1, r9
 8017a5c:	f000 fb95 	bl	801818a <strncmp>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	d1f4      	bne.n	8017a4e <_findenv_r+0x36>
 8017a64:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017a68:	eb03 0508 	add.w	r5, r3, r8
 8017a6c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017a70:	2b3d      	cmp	r3, #61	; 0x3d
 8017a72:	d1ec      	bne.n	8017a4e <_findenv_r+0x36>
 8017a74:	f8da 3000 	ldr.w	r3, [sl]
 8017a78:	ebab 0303 	sub.w	r3, fp, r3
 8017a7c:	109b      	asrs	r3, r3, #2
 8017a7e:	4638      	mov	r0, r7
 8017a80:	6033      	str	r3, [r6, #0]
 8017a82:	f000 fc67 	bl	8018354 <__env_unlock>
 8017a86:	1c68      	adds	r0, r5, #1
 8017a88:	e7dd      	b.n	8017a46 <_findenv_r+0x2e>
 8017a8a:	bf00      	nop
 8017a8c:	20000000 	.word	0x20000000

08017a90 <malloc>:
 8017a90:	4b02      	ldr	r3, [pc, #8]	; (8017a9c <malloc+0xc>)
 8017a92:	4601      	mov	r1, r0
 8017a94:	6818      	ldr	r0, [r3, #0]
 8017a96:	f000 b82b 	b.w	8017af0 <_malloc_r>
 8017a9a:	bf00      	nop
 8017a9c:	2000012c 	.word	0x2000012c

08017aa0 <free>:
 8017aa0:	4b02      	ldr	r3, [pc, #8]	; (8017aac <free+0xc>)
 8017aa2:	4601      	mov	r1, r0
 8017aa4:	6818      	ldr	r0, [r3, #0]
 8017aa6:	f000 bc5b 	b.w	8018360 <_free_r>
 8017aaa:	bf00      	nop
 8017aac:	2000012c 	.word	0x2000012c

08017ab0 <sbrk_aligned>:
 8017ab0:	b570      	push	{r4, r5, r6, lr}
 8017ab2:	4e0e      	ldr	r6, [pc, #56]	; (8017aec <sbrk_aligned+0x3c>)
 8017ab4:	460c      	mov	r4, r1
 8017ab6:	6831      	ldr	r1, [r6, #0]
 8017ab8:	4605      	mov	r5, r0
 8017aba:	b911      	cbnz	r1, 8017ac2 <sbrk_aligned+0x12>
 8017abc:	f000 fbc2 	bl	8018244 <_sbrk_r>
 8017ac0:	6030      	str	r0, [r6, #0]
 8017ac2:	4621      	mov	r1, r4
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	f000 fbbd 	bl	8018244 <_sbrk_r>
 8017aca:	1c43      	adds	r3, r0, #1
 8017acc:	d00a      	beq.n	8017ae4 <sbrk_aligned+0x34>
 8017ace:	1cc4      	adds	r4, r0, #3
 8017ad0:	f024 0403 	bic.w	r4, r4, #3
 8017ad4:	42a0      	cmp	r0, r4
 8017ad6:	d007      	beq.n	8017ae8 <sbrk_aligned+0x38>
 8017ad8:	1a21      	subs	r1, r4, r0
 8017ada:	4628      	mov	r0, r5
 8017adc:	f000 fbb2 	bl	8018244 <_sbrk_r>
 8017ae0:	3001      	adds	r0, #1
 8017ae2:	d101      	bne.n	8017ae8 <sbrk_aligned+0x38>
 8017ae4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017ae8:	4620      	mov	r0, r4
 8017aea:	bd70      	pop	{r4, r5, r6, pc}
 8017aec:	2000e404 	.word	0x2000e404

08017af0 <_malloc_r>:
 8017af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017af4:	1ccd      	adds	r5, r1, #3
 8017af6:	f025 0503 	bic.w	r5, r5, #3
 8017afa:	3508      	adds	r5, #8
 8017afc:	2d0c      	cmp	r5, #12
 8017afe:	bf38      	it	cc
 8017b00:	250c      	movcc	r5, #12
 8017b02:	2d00      	cmp	r5, #0
 8017b04:	4607      	mov	r7, r0
 8017b06:	db01      	blt.n	8017b0c <_malloc_r+0x1c>
 8017b08:	42a9      	cmp	r1, r5
 8017b0a:	d905      	bls.n	8017b18 <_malloc_r+0x28>
 8017b0c:	230c      	movs	r3, #12
 8017b0e:	603b      	str	r3, [r7, #0]
 8017b10:	2600      	movs	r6, #0
 8017b12:	4630      	mov	r0, r6
 8017b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017bec <_malloc_r+0xfc>
 8017b1c:	f000 f868 	bl	8017bf0 <__malloc_lock>
 8017b20:	f8d8 3000 	ldr.w	r3, [r8]
 8017b24:	461c      	mov	r4, r3
 8017b26:	bb5c      	cbnz	r4, 8017b80 <_malloc_r+0x90>
 8017b28:	4629      	mov	r1, r5
 8017b2a:	4638      	mov	r0, r7
 8017b2c:	f7ff ffc0 	bl	8017ab0 <sbrk_aligned>
 8017b30:	1c43      	adds	r3, r0, #1
 8017b32:	4604      	mov	r4, r0
 8017b34:	d155      	bne.n	8017be2 <_malloc_r+0xf2>
 8017b36:	f8d8 4000 	ldr.w	r4, [r8]
 8017b3a:	4626      	mov	r6, r4
 8017b3c:	2e00      	cmp	r6, #0
 8017b3e:	d145      	bne.n	8017bcc <_malloc_r+0xdc>
 8017b40:	2c00      	cmp	r4, #0
 8017b42:	d048      	beq.n	8017bd6 <_malloc_r+0xe6>
 8017b44:	6823      	ldr	r3, [r4, #0]
 8017b46:	4631      	mov	r1, r6
 8017b48:	4638      	mov	r0, r7
 8017b4a:	eb04 0903 	add.w	r9, r4, r3
 8017b4e:	f000 fb79 	bl	8018244 <_sbrk_r>
 8017b52:	4581      	cmp	r9, r0
 8017b54:	d13f      	bne.n	8017bd6 <_malloc_r+0xe6>
 8017b56:	6821      	ldr	r1, [r4, #0]
 8017b58:	1a6d      	subs	r5, r5, r1
 8017b5a:	4629      	mov	r1, r5
 8017b5c:	4638      	mov	r0, r7
 8017b5e:	f7ff ffa7 	bl	8017ab0 <sbrk_aligned>
 8017b62:	3001      	adds	r0, #1
 8017b64:	d037      	beq.n	8017bd6 <_malloc_r+0xe6>
 8017b66:	6823      	ldr	r3, [r4, #0]
 8017b68:	442b      	add	r3, r5
 8017b6a:	6023      	str	r3, [r4, #0]
 8017b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d038      	beq.n	8017be6 <_malloc_r+0xf6>
 8017b74:	685a      	ldr	r2, [r3, #4]
 8017b76:	42a2      	cmp	r2, r4
 8017b78:	d12b      	bne.n	8017bd2 <_malloc_r+0xe2>
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	605a      	str	r2, [r3, #4]
 8017b7e:	e00f      	b.n	8017ba0 <_malloc_r+0xb0>
 8017b80:	6822      	ldr	r2, [r4, #0]
 8017b82:	1b52      	subs	r2, r2, r5
 8017b84:	d41f      	bmi.n	8017bc6 <_malloc_r+0xd6>
 8017b86:	2a0b      	cmp	r2, #11
 8017b88:	d917      	bls.n	8017bba <_malloc_r+0xca>
 8017b8a:	1961      	adds	r1, r4, r5
 8017b8c:	42a3      	cmp	r3, r4
 8017b8e:	6025      	str	r5, [r4, #0]
 8017b90:	bf18      	it	ne
 8017b92:	6059      	strne	r1, [r3, #4]
 8017b94:	6863      	ldr	r3, [r4, #4]
 8017b96:	bf08      	it	eq
 8017b98:	f8c8 1000 	streq.w	r1, [r8]
 8017b9c:	5162      	str	r2, [r4, r5]
 8017b9e:	604b      	str	r3, [r1, #4]
 8017ba0:	4638      	mov	r0, r7
 8017ba2:	f104 060b 	add.w	r6, r4, #11
 8017ba6:	f000 f829 	bl	8017bfc <__malloc_unlock>
 8017baa:	f026 0607 	bic.w	r6, r6, #7
 8017bae:	1d23      	adds	r3, r4, #4
 8017bb0:	1af2      	subs	r2, r6, r3
 8017bb2:	d0ae      	beq.n	8017b12 <_malloc_r+0x22>
 8017bb4:	1b9b      	subs	r3, r3, r6
 8017bb6:	50a3      	str	r3, [r4, r2]
 8017bb8:	e7ab      	b.n	8017b12 <_malloc_r+0x22>
 8017bba:	42a3      	cmp	r3, r4
 8017bbc:	6862      	ldr	r2, [r4, #4]
 8017bbe:	d1dd      	bne.n	8017b7c <_malloc_r+0x8c>
 8017bc0:	f8c8 2000 	str.w	r2, [r8]
 8017bc4:	e7ec      	b.n	8017ba0 <_malloc_r+0xb0>
 8017bc6:	4623      	mov	r3, r4
 8017bc8:	6864      	ldr	r4, [r4, #4]
 8017bca:	e7ac      	b.n	8017b26 <_malloc_r+0x36>
 8017bcc:	4634      	mov	r4, r6
 8017bce:	6876      	ldr	r6, [r6, #4]
 8017bd0:	e7b4      	b.n	8017b3c <_malloc_r+0x4c>
 8017bd2:	4613      	mov	r3, r2
 8017bd4:	e7cc      	b.n	8017b70 <_malloc_r+0x80>
 8017bd6:	230c      	movs	r3, #12
 8017bd8:	603b      	str	r3, [r7, #0]
 8017bda:	4638      	mov	r0, r7
 8017bdc:	f000 f80e 	bl	8017bfc <__malloc_unlock>
 8017be0:	e797      	b.n	8017b12 <_malloc_r+0x22>
 8017be2:	6025      	str	r5, [r4, #0]
 8017be4:	e7dc      	b.n	8017ba0 <_malloc_r+0xb0>
 8017be6:	605b      	str	r3, [r3, #4]
 8017be8:	deff      	udf	#255	; 0xff
 8017bea:	bf00      	nop
 8017bec:	2000e400 	.word	0x2000e400

08017bf0 <__malloc_lock>:
 8017bf0:	4801      	ldr	r0, [pc, #4]	; (8017bf8 <__malloc_lock+0x8>)
 8017bf2:	f000 bb73 	b.w	80182dc <__retarget_lock_acquire_recursive>
 8017bf6:	bf00      	nop
 8017bf8:	2000e549 	.word	0x2000e549

08017bfc <__malloc_unlock>:
 8017bfc:	4801      	ldr	r0, [pc, #4]	; (8017c04 <__malloc_unlock+0x8>)
 8017bfe:	f000 bb6e 	b.w	80182de <__retarget_lock_release_recursive>
 8017c02:	bf00      	nop
 8017c04:	2000e549 	.word	0x2000e549

08017c08 <srand>:
 8017c08:	b538      	push	{r3, r4, r5, lr}
 8017c0a:	4b10      	ldr	r3, [pc, #64]	; (8017c4c <srand+0x44>)
 8017c0c:	681d      	ldr	r5, [r3, #0]
 8017c0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c10:	4604      	mov	r4, r0
 8017c12:	b9b3      	cbnz	r3, 8017c42 <srand+0x3a>
 8017c14:	2018      	movs	r0, #24
 8017c16:	f7ff ff3b 	bl	8017a90 <malloc>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	6328      	str	r0, [r5, #48]	; 0x30
 8017c1e:	b920      	cbnz	r0, 8017c2a <srand+0x22>
 8017c20:	4b0b      	ldr	r3, [pc, #44]	; (8017c50 <srand+0x48>)
 8017c22:	480c      	ldr	r0, [pc, #48]	; (8017c54 <srand+0x4c>)
 8017c24:	2146      	movs	r1, #70	; 0x46
 8017c26:	f000 fb71 	bl	801830c <__assert_func>
 8017c2a:	490b      	ldr	r1, [pc, #44]	; (8017c58 <srand+0x50>)
 8017c2c:	4b0b      	ldr	r3, [pc, #44]	; (8017c5c <srand+0x54>)
 8017c2e:	e9c0 1300 	strd	r1, r3, [r0]
 8017c32:	4b0b      	ldr	r3, [pc, #44]	; (8017c60 <srand+0x58>)
 8017c34:	6083      	str	r3, [r0, #8]
 8017c36:	230b      	movs	r3, #11
 8017c38:	8183      	strh	r3, [r0, #12]
 8017c3a:	2100      	movs	r1, #0
 8017c3c:	2001      	movs	r0, #1
 8017c3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017c42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c44:	2200      	movs	r2, #0
 8017c46:	611c      	str	r4, [r3, #16]
 8017c48:	615a      	str	r2, [r3, #20]
 8017c4a:	bd38      	pop	{r3, r4, r5, pc}
 8017c4c:	2000012c 	.word	0x2000012c
 8017c50:	08019c64 	.word	0x08019c64
 8017c54:	08019c7b 	.word	0x08019c7b
 8017c58:	abcd330e 	.word	0xabcd330e
 8017c5c:	e66d1234 	.word	0xe66d1234
 8017c60:	0005deec 	.word	0x0005deec

08017c64 <rand>:
 8017c64:	4b16      	ldr	r3, [pc, #88]	; (8017cc0 <rand+0x5c>)
 8017c66:	b510      	push	{r4, lr}
 8017c68:	681c      	ldr	r4, [r3, #0]
 8017c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c6c:	b9b3      	cbnz	r3, 8017c9c <rand+0x38>
 8017c6e:	2018      	movs	r0, #24
 8017c70:	f7ff ff0e 	bl	8017a90 <malloc>
 8017c74:	4602      	mov	r2, r0
 8017c76:	6320      	str	r0, [r4, #48]	; 0x30
 8017c78:	b920      	cbnz	r0, 8017c84 <rand+0x20>
 8017c7a:	4b12      	ldr	r3, [pc, #72]	; (8017cc4 <rand+0x60>)
 8017c7c:	4812      	ldr	r0, [pc, #72]	; (8017cc8 <rand+0x64>)
 8017c7e:	2152      	movs	r1, #82	; 0x52
 8017c80:	f000 fb44 	bl	801830c <__assert_func>
 8017c84:	4911      	ldr	r1, [pc, #68]	; (8017ccc <rand+0x68>)
 8017c86:	4b12      	ldr	r3, [pc, #72]	; (8017cd0 <rand+0x6c>)
 8017c88:	e9c0 1300 	strd	r1, r3, [r0]
 8017c8c:	4b11      	ldr	r3, [pc, #68]	; (8017cd4 <rand+0x70>)
 8017c8e:	6083      	str	r3, [r0, #8]
 8017c90:	230b      	movs	r3, #11
 8017c92:	8183      	strh	r3, [r0, #12]
 8017c94:	2100      	movs	r1, #0
 8017c96:	2001      	movs	r0, #1
 8017c98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017c9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017c9e:	480e      	ldr	r0, [pc, #56]	; (8017cd8 <rand+0x74>)
 8017ca0:	690b      	ldr	r3, [r1, #16]
 8017ca2:	694c      	ldr	r4, [r1, #20]
 8017ca4:	4a0d      	ldr	r2, [pc, #52]	; (8017cdc <rand+0x78>)
 8017ca6:	4358      	muls	r0, r3
 8017ca8:	fb02 0004 	mla	r0, r2, r4, r0
 8017cac:	fba3 3202 	umull	r3, r2, r3, r2
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	eb40 0002 	adc.w	r0, r0, r2
 8017cb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017cba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017cbe:	bd10      	pop	{r4, pc}
 8017cc0:	2000012c 	.word	0x2000012c
 8017cc4:	08019c64 	.word	0x08019c64
 8017cc8:	08019c7b 	.word	0x08019c7b
 8017ccc:	abcd330e 	.word	0xabcd330e
 8017cd0:	e66d1234 	.word	0xe66d1234
 8017cd4:	0005deec 	.word	0x0005deec
 8017cd8:	5851f42d 	.word	0x5851f42d
 8017cdc:	4c957f2d 	.word	0x4c957f2d

08017ce0 <realloc>:
 8017ce0:	4b02      	ldr	r3, [pc, #8]	; (8017cec <realloc+0xc>)
 8017ce2:	460a      	mov	r2, r1
 8017ce4:	4601      	mov	r1, r0
 8017ce6:	6818      	ldr	r0, [r3, #0]
 8017ce8:	f000 b802 	b.w	8017cf0 <_realloc_r>
 8017cec:	2000012c 	.word	0x2000012c

08017cf0 <_realloc_r>:
 8017cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf4:	4680      	mov	r8, r0
 8017cf6:	4614      	mov	r4, r2
 8017cf8:	460e      	mov	r6, r1
 8017cfa:	b921      	cbnz	r1, 8017d06 <_realloc_r+0x16>
 8017cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d00:	4611      	mov	r1, r2
 8017d02:	f7ff bef5 	b.w	8017af0 <_malloc_r>
 8017d06:	b92a      	cbnz	r2, 8017d14 <_realloc_r+0x24>
 8017d08:	f000 fb2a 	bl	8018360 <_free_r>
 8017d0c:	4625      	mov	r5, r4
 8017d0e:	4628      	mov	r0, r5
 8017d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d14:	f000 fb70 	bl	80183f8 <_malloc_usable_size_r>
 8017d18:	4284      	cmp	r4, r0
 8017d1a:	4607      	mov	r7, r0
 8017d1c:	d802      	bhi.n	8017d24 <_realloc_r+0x34>
 8017d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d22:	d812      	bhi.n	8017d4a <_realloc_r+0x5a>
 8017d24:	4621      	mov	r1, r4
 8017d26:	4640      	mov	r0, r8
 8017d28:	f7ff fee2 	bl	8017af0 <_malloc_r>
 8017d2c:	4605      	mov	r5, r0
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	d0ed      	beq.n	8017d0e <_realloc_r+0x1e>
 8017d32:	42bc      	cmp	r4, r7
 8017d34:	4622      	mov	r2, r4
 8017d36:	4631      	mov	r1, r6
 8017d38:	bf28      	it	cs
 8017d3a:	463a      	movcs	r2, r7
 8017d3c:	f000 fad8 	bl	80182f0 <memcpy>
 8017d40:	4631      	mov	r1, r6
 8017d42:	4640      	mov	r0, r8
 8017d44:	f000 fb0c 	bl	8018360 <_free_r>
 8017d48:	e7e1      	b.n	8017d0e <_realloc_r+0x1e>
 8017d4a:	4635      	mov	r5, r6
 8017d4c:	e7df      	b.n	8017d0e <_realloc_r+0x1e>
	...

08017d50 <_strtoul_l.constprop.0>:
 8017d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d54:	4f36      	ldr	r7, [pc, #216]	; (8017e30 <_strtoul_l.constprop.0+0xe0>)
 8017d56:	4686      	mov	lr, r0
 8017d58:	460d      	mov	r5, r1
 8017d5a:	4628      	mov	r0, r5
 8017d5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d60:	5d3e      	ldrb	r6, [r7, r4]
 8017d62:	f016 0608 	ands.w	r6, r6, #8
 8017d66:	d1f8      	bne.n	8017d5a <_strtoul_l.constprop.0+0xa>
 8017d68:	2c2d      	cmp	r4, #45	; 0x2d
 8017d6a:	d130      	bne.n	8017dce <_strtoul_l.constprop.0+0x7e>
 8017d6c:	782c      	ldrb	r4, [r5, #0]
 8017d6e:	2601      	movs	r6, #1
 8017d70:	1c85      	adds	r5, r0, #2
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d057      	beq.n	8017e26 <_strtoul_l.constprop.0+0xd6>
 8017d76:	2b10      	cmp	r3, #16
 8017d78:	d109      	bne.n	8017d8e <_strtoul_l.constprop.0+0x3e>
 8017d7a:	2c30      	cmp	r4, #48	; 0x30
 8017d7c:	d107      	bne.n	8017d8e <_strtoul_l.constprop.0+0x3e>
 8017d7e:	7828      	ldrb	r0, [r5, #0]
 8017d80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017d84:	2858      	cmp	r0, #88	; 0x58
 8017d86:	d149      	bne.n	8017e1c <_strtoul_l.constprop.0+0xcc>
 8017d88:	786c      	ldrb	r4, [r5, #1]
 8017d8a:	2310      	movs	r3, #16
 8017d8c:	3502      	adds	r5, #2
 8017d8e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017d92:	2700      	movs	r7, #0
 8017d94:	fbb8 f8f3 	udiv	r8, r8, r3
 8017d98:	fb03 f908 	mul.w	r9, r3, r8
 8017d9c:	ea6f 0909 	mvn.w	r9, r9
 8017da0:	4638      	mov	r0, r7
 8017da2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017da6:	f1bc 0f09 	cmp.w	ip, #9
 8017daa:	d815      	bhi.n	8017dd8 <_strtoul_l.constprop.0+0x88>
 8017dac:	4664      	mov	r4, ip
 8017dae:	42a3      	cmp	r3, r4
 8017db0:	dd23      	ble.n	8017dfa <_strtoul_l.constprop.0+0xaa>
 8017db2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017db6:	d007      	beq.n	8017dc8 <_strtoul_l.constprop.0+0x78>
 8017db8:	4580      	cmp	r8, r0
 8017dba:	d31b      	bcc.n	8017df4 <_strtoul_l.constprop.0+0xa4>
 8017dbc:	d101      	bne.n	8017dc2 <_strtoul_l.constprop.0+0x72>
 8017dbe:	45a1      	cmp	r9, r4
 8017dc0:	db18      	blt.n	8017df4 <_strtoul_l.constprop.0+0xa4>
 8017dc2:	fb00 4003 	mla	r0, r0, r3, r4
 8017dc6:	2701      	movs	r7, #1
 8017dc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017dcc:	e7e9      	b.n	8017da2 <_strtoul_l.constprop.0+0x52>
 8017dce:	2c2b      	cmp	r4, #43	; 0x2b
 8017dd0:	bf04      	itt	eq
 8017dd2:	782c      	ldrbeq	r4, [r5, #0]
 8017dd4:	1c85      	addeq	r5, r0, #2
 8017dd6:	e7cc      	b.n	8017d72 <_strtoul_l.constprop.0+0x22>
 8017dd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017ddc:	f1bc 0f19 	cmp.w	ip, #25
 8017de0:	d801      	bhi.n	8017de6 <_strtoul_l.constprop.0+0x96>
 8017de2:	3c37      	subs	r4, #55	; 0x37
 8017de4:	e7e3      	b.n	8017dae <_strtoul_l.constprop.0+0x5e>
 8017de6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017dea:	f1bc 0f19 	cmp.w	ip, #25
 8017dee:	d804      	bhi.n	8017dfa <_strtoul_l.constprop.0+0xaa>
 8017df0:	3c57      	subs	r4, #87	; 0x57
 8017df2:	e7dc      	b.n	8017dae <_strtoul_l.constprop.0+0x5e>
 8017df4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017df8:	e7e6      	b.n	8017dc8 <_strtoul_l.constprop.0+0x78>
 8017dfa:	1c7b      	adds	r3, r7, #1
 8017dfc:	d106      	bne.n	8017e0c <_strtoul_l.constprop.0+0xbc>
 8017dfe:	2322      	movs	r3, #34	; 0x22
 8017e00:	f8ce 3000 	str.w	r3, [lr]
 8017e04:	4638      	mov	r0, r7
 8017e06:	b932      	cbnz	r2, 8017e16 <_strtoul_l.constprop.0+0xc6>
 8017e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e0c:	b106      	cbz	r6, 8017e10 <_strtoul_l.constprop.0+0xc0>
 8017e0e:	4240      	negs	r0, r0
 8017e10:	2a00      	cmp	r2, #0
 8017e12:	d0f9      	beq.n	8017e08 <_strtoul_l.constprop.0+0xb8>
 8017e14:	b107      	cbz	r7, 8017e18 <_strtoul_l.constprop.0+0xc8>
 8017e16:	1e69      	subs	r1, r5, #1
 8017e18:	6011      	str	r1, [r2, #0]
 8017e1a:	e7f5      	b.n	8017e08 <_strtoul_l.constprop.0+0xb8>
 8017e1c:	2430      	movs	r4, #48	; 0x30
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d1b5      	bne.n	8017d8e <_strtoul_l.constprop.0+0x3e>
 8017e22:	2308      	movs	r3, #8
 8017e24:	e7b3      	b.n	8017d8e <_strtoul_l.constprop.0+0x3e>
 8017e26:	2c30      	cmp	r4, #48	; 0x30
 8017e28:	d0a9      	beq.n	8017d7e <_strtoul_l.constprop.0+0x2e>
 8017e2a:	230a      	movs	r3, #10
 8017e2c:	e7af      	b.n	8017d8e <_strtoul_l.constprop.0+0x3e>
 8017e2e:	bf00      	nop
 8017e30:	08019cd4 	.word	0x08019cd4

08017e34 <strtoul>:
 8017e34:	4613      	mov	r3, r2
 8017e36:	460a      	mov	r2, r1
 8017e38:	4601      	mov	r1, r0
 8017e3a:	4802      	ldr	r0, [pc, #8]	; (8017e44 <strtoul+0x10>)
 8017e3c:	6800      	ldr	r0, [r0, #0]
 8017e3e:	f7ff bf87 	b.w	8017d50 <_strtoul_l.constprop.0>
 8017e42:	bf00      	nop
 8017e44:	2000012c 	.word	0x2000012c

08017e48 <std>:
 8017e48:	2300      	movs	r3, #0
 8017e4a:	b510      	push	{r4, lr}
 8017e4c:	4604      	mov	r4, r0
 8017e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8017e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017e56:	6083      	str	r3, [r0, #8]
 8017e58:	8181      	strh	r1, [r0, #12]
 8017e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8017e5c:	81c2      	strh	r2, [r0, #14]
 8017e5e:	6183      	str	r3, [r0, #24]
 8017e60:	4619      	mov	r1, r3
 8017e62:	2208      	movs	r2, #8
 8017e64:	305c      	adds	r0, #92	; 0x5c
 8017e66:	f000 f97b 	bl	8018160 <memset>
 8017e6a:	4b05      	ldr	r3, [pc, #20]	; (8017e80 <std+0x38>)
 8017e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8017e6e:	4b05      	ldr	r3, [pc, #20]	; (8017e84 <std+0x3c>)
 8017e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8017e72:	4b05      	ldr	r3, [pc, #20]	; (8017e88 <std+0x40>)
 8017e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017e76:	4b05      	ldr	r3, [pc, #20]	; (8017e8c <std+0x44>)
 8017e78:	6224      	str	r4, [r4, #32]
 8017e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8017e7c:	bd10      	pop	{r4, pc}
 8017e7e:	bf00      	nop
 8017e80:	08018035 	.word	0x08018035
 8017e84:	08018057 	.word	0x08018057
 8017e88:	0801808f 	.word	0x0801808f
 8017e8c:	080180b3 	.word	0x080180b3

08017e90 <stdio_exit_handler>:
 8017e90:	4a02      	ldr	r2, [pc, #8]	; (8017e9c <stdio_exit_handler+0xc>)
 8017e92:	4903      	ldr	r1, [pc, #12]	; (8017ea0 <stdio_exit_handler+0x10>)
 8017e94:	4803      	ldr	r0, [pc, #12]	; (8017ea4 <stdio_exit_handler+0x14>)
 8017e96:	f000 b869 	b.w	8017f6c <_fwalk_sglue>
 8017e9a:	bf00      	nop
 8017e9c:	200000d4 	.word	0x200000d4
 8017ea0:	08018d6d 	.word	0x08018d6d
 8017ea4:	200000e0 	.word	0x200000e0

08017ea8 <cleanup_stdio>:
 8017ea8:	6841      	ldr	r1, [r0, #4]
 8017eaa:	4b0c      	ldr	r3, [pc, #48]	; (8017edc <cleanup_stdio+0x34>)
 8017eac:	4299      	cmp	r1, r3
 8017eae:	b510      	push	{r4, lr}
 8017eb0:	4604      	mov	r4, r0
 8017eb2:	d001      	beq.n	8017eb8 <cleanup_stdio+0x10>
 8017eb4:	f000 ff5a 	bl	8018d6c <_fflush_r>
 8017eb8:	68a1      	ldr	r1, [r4, #8]
 8017eba:	4b09      	ldr	r3, [pc, #36]	; (8017ee0 <cleanup_stdio+0x38>)
 8017ebc:	4299      	cmp	r1, r3
 8017ebe:	d002      	beq.n	8017ec6 <cleanup_stdio+0x1e>
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f000 ff53 	bl	8018d6c <_fflush_r>
 8017ec6:	68e1      	ldr	r1, [r4, #12]
 8017ec8:	4b06      	ldr	r3, [pc, #24]	; (8017ee4 <cleanup_stdio+0x3c>)
 8017eca:	4299      	cmp	r1, r3
 8017ecc:	d004      	beq.n	8017ed8 <cleanup_stdio+0x30>
 8017ece:	4620      	mov	r0, r4
 8017ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ed4:	f000 bf4a 	b.w	8018d6c <_fflush_r>
 8017ed8:	bd10      	pop	{r4, pc}
 8017eda:	bf00      	nop
 8017edc:	2000e408 	.word	0x2000e408
 8017ee0:	2000e470 	.word	0x2000e470
 8017ee4:	2000e4d8 	.word	0x2000e4d8

08017ee8 <global_stdio_init.part.0>:
 8017ee8:	b510      	push	{r4, lr}
 8017eea:	4b0b      	ldr	r3, [pc, #44]	; (8017f18 <global_stdio_init.part.0+0x30>)
 8017eec:	4c0b      	ldr	r4, [pc, #44]	; (8017f1c <global_stdio_init.part.0+0x34>)
 8017eee:	4a0c      	ldr	r2, [pc, #48]	; (8017f20 <global_stdio_init.part.0+0x38>)
 8017ef0:	601a      	str	r2, [r3, #0]
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	2104      	movs	r1, #4
 8017ef8:	f7ff ffa6 	bl	8017e48 <std>
 8017efc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017f00:	2201      	movs	r2, #1
 8017f02:	2109      	movs	r1, #9
 8017f04:	f7ff ffa0 	bl	8017e48 <std>
 8017f08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017f0c:	2202      	movs	r2, #2
 8017f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f12:	2112      	movs	r1, #18
 8017f14:	f7ff bf98 	b.w	8017e48 <std>
 8017f18:	2000e540 	.word	0x2000e540
 8017f1c:	2000e408 	.word	0x2000e408
 8017f20:	08017e91 	.word	0x08017e91

08017f24 <__sfp_lock_acquire>:
 8017f24:	4801      	ldr	r0, [pc, #4]	; (8017f2c <__sfp_lock_acquire+0x8>)
 8017f26:	f000 b9d9 	b.w	80182dc <__retarget_lock_acquire_recursive>
 8017f2a:	bf00      	nop
 8017f2c:	2000e54a 	.word	0x2000e54a

08017f30 <__sfp_lock_release>:
 8017f30:	4801      	ldr	r0, [pc, #4]	; (8017f38 <__sfp_lock_release+0x8>)
 8017f32:	f000 b9d4 	b.w	80182de <__retarget_lock_release_recursive>
 8017f36:	bf00      	nop
 8017f38:	2000e54a 	.word	0x2000e54a

08017f3c <__sinit>:
 8017f3c:	b510      	push	{r4, lr}
 8017f3e:	4604      	mov	r4, r0
 8017f40:	f7ff fff0 	bl	8017f24 <__sfp_lock_acquire>
 8017f44:	6a23      	ldr	r3, [r4, #32]
 8017f46:	b11b      	cbz	r3, 8017f50 <__sinit+0x14>
 8017f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f4c:	f7ff bff0 	b.w	8017f30 <__sfp_lock_release>
 8017f50:	4b04      	ldr	r3, [pc, #16]	; (8017f64 <__sinit+0x28>)
 8017f52:	6223      	str	r3, [r4, #32]
 8017f54:	4b04      	ldr	r3, [pc, #16]	; (8017f68 <__sinit+0x2c>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d1f5      	bne.n	8017f48 <__sinit+0xc>
 8017f5c:	f7ff ffc4 	bl	8017ee8 <global_stdio_init.part.0>
 8017f60:	e7f2      	b.n	8017f48 <__sinit+0xc>
 8017f62:	bf00      	nop
 8017f64:	08017ea9 	.word	0x08017ea9
 8017f68:	2000e540 	.word	0x2000e540

08017f6c <_fwalk_sglue>:
 8017f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f70:	4607      	mov	r7, r0
 8017f72:	4688      	mov	r8, r1
 8017f74:	4614      	mov	r4, r2
 8017f76:	2600      	movs	r6, #0
 8017f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8017f80:	d505      	bpl.n	8017f8e <_fwalk_sglue+0x22>
 8017f82:	6824      	ldr	r4, [r4, #0]
 8017f84:	2c00      	cmp	r4, #0
 8017f86:	d1f7      	bne.n	8017f78 <_fwalk_sglue+0xc>
 8017f88:	4630      	mov	r0, r6
 8017f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f8e:	89ab      	ldrh	r3, [r5, #12]
 8017f90:	2b01      	cmp	r3, #1
 8017f92:	d907      	bls.n	8017fa4 <_fwalk_sglue+0x38>
 8017f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f98:	3301      	adds	r3, #1
 8017f9a:	d003      	beq.n	8017fa4 <_fwalk_sglue+0x38>
 8017f9c:	4629      	mov	r1, r5
 8017f9e:	4638      	mov	r0, r7
 8017fa0:	47c0      	blx	r8
 8017fa2:	4306      	orrs	r6, r0
 8017fa4:	3568      	adds	r5, #104	; 0x68
 8017fa6:	e7e9      	b.n	8017f7c <_fwalk_sglue+0x10>

08017fa8 <iprintf>:
 8017fa8:	b40f      	push	{r0, r1, r2, r3}
 8017faa:	b507      	push	{r0, r1, r2, lr}
 8017fac:	4906      	ldr	r1, [pc, #24]	; (8017fc8 <iprintf+0x20>)
 8017fae:	ab04      	add	r3, sp, #16
 8017fb0:	6808      	ldr	r0, [r1, #0]
 8017fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fb6:	6881      	ldr	r1, [r0, #8]
 8017fb8:	9301      	str	r3, [sp, #4]
 8017fba:	f000 fba7 	bl	801870c <_vfiprintf_r>
 8017fbe:	b003      	add	sp, #12
 8017fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fc4:	b004      	add	sp, #16
 8017fc6:	4770      	bx	lr
 8017fc8:	2000012c 	.word	0x2000012c

08017fcc <sniprintf>:
 8017fcc:	b40c      	push	{r2, r3}
 8017fce:	b530      	push	{r4, r5, lr}
 8017fd0:	4b17      	ldr	r3, [pc, #92]	; (8018030 <sniprintf+0x64>)
 8017fd2:	1e0c      	subs	r4, r1, #0
 8017fd4:	681d      	ldr	r5, [r3, #0]
 8017fd6:	b09d      	sub	sp, #116	; 0x74
 8017fd8:	da08      	bge.n	8017fec <sniprintf+0x20>
 8017fda:	238b      	movs	r3, #139	; 0x8b
 8017fdc:	602b      	str	r3, [r5, #0]
 8017fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fe2:	b01d      	add	sp, #116	; 0x74
 8017fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fe8:	b002      	add	sp, #8
 8017fea:	4770      	bx	lr
 8017fec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ff4:	bf14      	ite	ne
 8017ff6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017ffa:	4623      	moveq	r3, r4
 8017ffc:	9304      	str	r3, [sp, #16]
 8017ffe:	9307      	str	r3, [sp, #28]
 8018000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018004:	9002      	str	r0, [sp, #8]
 8018006:	9006      	str	r0, [sp, #24]
 8018008:	f8ad 3016 	strh.w	r3, [sp, #22]
 801800c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801800e:	ab21      	add	r3, sp, #132	; 0x84
 8018010:	a902      	add	r1, sp, #8
 8018012:	4628      	mov	r0, r5
 8018014:	9301      	str	r3, [sp, #4]
 8018016:	f000 fa51 	bl	80184bc <_svfiprintf_r>
 801801a:	1c43      	adds	r3, r0, #1
 801801c:	bfbc      	itt	lt
 801801e:	238b      	movlt	r3, #139	; 0x8b
 8018020:	602b      	strlt	r3, [r5, #0]
 8018022:	2c00      	cmp	r4, #0
 8018024:	d0dd      	beq.n	8017fe2 <sniprintf+0x16>
 8018026:	9b02      	ldr	r3, [sp, #8]
 8018028:	2200      	movs	r2, #0
 801802a:	701a      	strb	r2, [r3, #0]
 801802c:	e7d9      	b.n	8017fe2 <sniprintf+0x16>
 801802e:	bf00      	nop
 8018030:	2000012c 	.word	0x2000012c

08018034 <__sread>:
 8018034:	b510      	push	{r4, lr}
 8018036:	460c      	mov	r4, r1
 8018038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801803c:	f000 f8f0 	bl	8018220 <_read_r>
 8018040:	2800      	cmp	r0, #0
 8018042:	bfab      	itete	ge
 8018044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018046:	89a3      	ldrhlt	r3, [r4, #12]
 8018048:	181b      	addge	r3, r3, r0
 801804a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801804e:	bfac      	ite	ge
 8018050:	6563      	strge	r3, [r4, #84]	; 0x54
 8018052:	81a3      	strhlt	r3, [r4, #12]
 8018054:	bd10      	pop	{r4, pc}

08018056 <__swrite>:
 8018056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801805a:	461f      	mov	r7, r3
 801805c:	898b      	ldrh	r3, [r1, #12]
 801805e:	05db      	lsls	r3, r3, #23
 8018060:	4605      	mov	r5, r0
 8018062:	460c      	mov	r4, r1
 8018064:	4616      	mov	r6, r2
 8018066:	d505      	bpl.n	8018074 <__swrite+0x1e>
 8018068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801806c:	2302      	movs	r3, #2
 801806e:	2200      	movs	r2, #0
 8018070:	f000 f8c4 	bl	80181fc <_lseek_r>
 8018074:	89a3      	ldrh	r3, [r4, #12]
 8018076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801807a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801807e:	81a3      	strh	r3, [r4, #12]
 8018080:	4632      	mov	r2, r6
 8018082:	463b      	mov	r3, r7
 8018084:	4628      	mov	r0, r5
 8018086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801808a:	f000 b8eb 	b.w	8018264 <_write_r>

0801808e <__sseek>:
 801808e:	b510      	push	{r4, lr}
 8018090:	460c      	mov	r4, r1
 8018092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018096:	f000 f8b1 	bl	80181fc <_lseek_r>
 801809a:	1c43      	adds	r3, r0, #1
 801809c:	89a3      	ldrh	r3, [r4, #12]
 801809e:	bf15      	itete	ne
 80180a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80180a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80180a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80180aa:	81a3      	strheq	r3, [r4, #12]
 80180ac:	bf18      	it	ne
 80180ae:	81a3      	strhne	r3, [r4, #12]
 80180b0:	bd10      	pop	{r4, pc}

080180b2 <__sclose>:
 80180b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180b6:	f000 b891 	b.w	80181dc <_close_r>

080180ba <_vsniprintf_r>:
 80180ba:	b530      	push	{r4, r5, lr}
 80180bc:	4614      	mov	r4, r2
 80180be:	2c00      	cmp	r4, #0
 80180c0:	b09b      	sub	sp, #108	; 0x6c
 80180c2:	4605      	mov	r5, r0
 80180c4:	461a      	mov	r2, r3
 80180c6:	da05      	bge.n	80180d4 <_vsniprintf_r+0x1a>
 80180c8:	238b      	movs	r3, #139	; 0x8b
 80180ca:	6003      	str	r3, [r0, #0]
 80180cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180d0:	b01b      	add	sp, #108	; 0x6c
 80180d2:	bd30      	pop	{r4, r5, pc}
 80180d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80180d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80180dc:	bf14      	ite	ne
 80180de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80180e2:	4623      	moveq	r3, r4
 80180e4:	9302      	str	r3, [sp, #8]
 80180e6:	9305      	str	r3, [sp, #20]
 80180e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180ec:	9100      	str	r1, [sp, #0]
 80180ee:	9104      	str	r1, [sp, #16]
 80180f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80180f4:	4669      	mov	r1, sp
 80180f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80180f8:	f000 f9e0 	bl	80184bc <_svfiprintf_r>
 80180fc:	1c43      	adds	r3, r0, #1
 80180fe:	bfbc      	itt	lt
 8018100:	238b      	movlt	r3, #139	; 0x8b
 8018102:	602b      	strlt	r3, [r5, #0]
 8018104:	2c00      	cmp	r4, #0
 8018106:	d0e3      	beq.n	80180d0 <_vsniprintf_r+0x16>
 8018108:	9b00      	ldr	r3, [sp, #0]
 801810a:	2200      	movs	r2, #0
 801810c:	701a      	strb	r2, [r3, #0]
 801810e:	e7df      	b.n	80180d0 <_vsniprintf_r+0x16>

08018110 <vsniprintf>:
 8018110:	b507      	push	{r0, r1, r2, lr}
 8018112:	9300      	str	r3, [sp, #0]
 8018114:	4613      	mov	r3, r2
 8018116:	460a      	mov	r2, r1
 8018118:	4601      	mov	r1, r0
 801811a:	4803      	ldr	r0, [pc, #12]	; (8018128 <vsniprintf+0x18>)
 801811c:	6800      	ldr	r0, [r0, #0]
 801811e:	f7ff ffcc 	bl	80180ba <_vsniprintf_r>
 8018122:	b003      	add	sp, #12
 8018124:	f85d fb04 	ldr.w	pc, [sp], #4
 8018128:	2000012c 	.word	0x2000012c

0801812c <memmove>:
 801812c:	4288      	cmp	r0, r1
 801812e:	b510      	push	{r4, lr}
 8018130:	eb01 0402 	add.w	r4, r1, r2
 8018134:	d902      	bls.n	801813c <memmove+0x10>
 8018136:	4284      	cmp	r4, r0
 8018138:	4623      	mov	r3, r4
 801813a:	d807      	bhi.n	801814c <memmove+0x20>
 801813c:	1e43      	subs	r3, r0, #1
 801813e:	42a1      	cmp	r1, r4
 8018140:	d008      	beq.n	8018154 <memmove+0x28>
 8018142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018146:	f803 2f01 	strb.w	r2, [r3, #1]!
 801814a:	e7f8      	b.n	801813e <memmove+0x12>
 801814c:	4402      	add	r2, r0
 801814e:	4601      	mov	r1, r0
 8018150:	428a      	cmp	r2, r1
 8018152:	d100      	bne.n	8018156 <memmove+0x2a>
 8018154:	bd10      	pop	{r4, pc}
 8018156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801815a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801815e:	e7f7      	b.n	8018150 <memmove+0x24>

08018160 <memset>:
 8018160:	4402      	add	r2, r0
 8018162:	4603      	mov	r3, r0
 8018164:	4293      	cmp	r3, r2
 8018166:	d100      	bne.n	801816a <memset+0xa>
 8018168:	4770      	bx	lr
 801816a:	f803 1b01 	strb.w	r1, [r3], #1
 801816e:	e7f9      	b.n	8018164 <memset+0x4>

08018170 <strchr>:
 8018170:	b2c9      	uxtb	r1, r1
 8018172:	4603      	mov	r3, r0
 8018174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018178:	b11a      	cbz	r2, 8018182 <strchr+0x12>
 801817a:	428a      	cmp	r2, r1
 801817c:	d1f9      	bne.n	8018172 <strchr+0x2>
 801817e:	4618      	mov	r0, r3
 8018180:	4770      	bx	lr
 8018182:	2900      	cmp	r1, #0
 8018184:	bf18      	it	ne
 8018186:	2300      	movne	r3, #0
 8018188:	e7f9      	b.n	801817e <strchr+0xe>

0801818a <strncmp>:
 801818a:	b510      	push	{r4, lr}
 801818c:	b16a      	cbz	r2, 80181aa <strncmp+0x20>
 801818e:	3901      	subs	r1, #1
 8018190:	1884      	adds	r4, r0, r2
 8018192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018196:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801819a:	429a      	cmp	r2, r3
 801819c:	d103      	bne.n	80181a6 <strncmp+0x1c>
 801819e:	42a0      	cmp	r0, r4
 80181a0:	d001      	beq.n	80181a6 <strncmp+0x1c>
 80181a2:	2a00      	cmp	r2, #0
 80181a4:	d1f5      	bne.n	8018192 <strncmp+0x8>
 80181a6:	1ad0      	subs	r0, r2, r3
 80181a8:	bd10      	pop	{r4, pc}
 80181aa:	4610      	mov	r0, r2
 80181ac:	e7fc      	b.n	80181a8 <strncmp+0x1e>

080181ae <strstr>:
 80181ae:	780a      	ldrb	r2, [r1, #0]
 80181b0:	b570      	push	{r4, r5, r6, lr}
 80181b2:	b96a      	cbnz	r2, 80181d0 <strstr+0x22>
 80181b4:	bd70      	pop	{r4, r5, r6, pc}
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d109      	bne.n	80181ce <strstr+0x20>
 80181ba:	460c      	mov	r4, r1
 80181bc:	4605      	mov	r5, r0
 80181be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d0f6      	beq.n	80181b4 <strstr+0x6>
 80181c6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80181ca:	429e      	cmp	r6, r3
 80181cc:	d0f7      	beq.n	80181be <strstr+0x10>
 80181ce:	3001      	adds	r0, #1
 80181d0:	7803      	ldrb	r3, [r0, #0]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d1ef      	bne.n	80181b6 <strstr+0x8>
 80181d6:	4618      	mov	r0, r3
 80181d8:	e7ec      	b.n	80181b4 <strstr+0x6>
	...

080181dc <_close_r>:
 80181dc:	b538      	push	{r3, r4, r5, lr}
 80181de:	4d06      	ldr	r5, [pc, #24]	; (80181f8 <_close_r+0x1c>)
 80181e0:	2300      	movs	r3, #0
 80181e2:	4604      	mov	r4, r0
 80181e4:	4608      	mov	r0, r1
 80181e6:	602b      	str	r3, [r5, #0]
 80181e8:	f7e9 fcb9 	bl	8001b5e <_close>
 80181ec:	1c43      	adds	r3, r0, #1
 80181ee:	d102      	bne.n	80181f6 <_close_r+0x1a>
 80181f0:	682b      	ldr	r3, [r5, #0]
 80181f2:	b103      	cbz	r3, 80181f6 <_close_r+0x1a>
 80181f4:	6023      	str	r3, [r4, #0]
 80181f6:	bd38      	pop	{r3, r4, r5, pc}
 80181f8:	2000e544 	.word	0x2000e544

080181fc <_lseek_r>:
 80181fc:	b538      	push	{r3, r4, r5, lr}
 80181fe:	4d07      	ldr	r5, [pc, #28]	; (801821c <_lseek_r+0x20>)
 8018200:	4604      	mov	r4, r0
 8018202:	4608      	mov	r0, r1
 8018204:	4611      	mov	r1, r2
 8018206:	2200      	movs	r2, #0
 8018208:	602a      	str	r2, [r5, #0]
 801820a:	461a      	mov	r2, r3
 801820c:	f7e9 fcce 	bl	8001bac <_lseek>
 8018210:	1c43      	adds	r3, r0, #1
 8018212:	d102      	bne.n	801821a <_lseek_r+0x1e>
 8018214:	682b      	ldr	r3, [r5, #0]
 8018216:	b103      	cbz	r3, 801821a <_lseek_r+0x1e>
 8018218:	6023      	str	r3, [r4, #0]
 801821a:	bd38      	pop	{r3, r4, r5, pc}
 801821c:	2000e544 	.word	0x2000e544

08018220 <_read_r>:
 8018220:	b538      	push	{r3, r4, r5, lr}
 8018222:	4d07      	ldr	r5, [pc, #28]	; (8018240 <_read_r+0x20>)
 8018224:	4604      	mov	r4, r0
 8018226:	4608      	mov	r0, r1
 8018228:	4611      	mov	r1, r2
 801822a:	2200      	movs	r2, #0
 801822c:	602a      	str	r2, [r5, #0]
 801822e:	461a      	mov	r2, r3
 8018230:	f7e9 fc5c 	bl	8001aec <_read>
 8018234:	1c43      	adds	r3, r0, #1
 8018236:	d102      	bne.n	801823e <_read_r+0x1e>
 8018238:	682b      	ldr	r3, [r5, #0]
 801823a:	b103      	cbz	r3, 801823e <_read_r+0x1e>
 801823c:	6023      	str	r3, [r4, #0]
 801823e:	bd38      	pop	{r3, r4, r5, pc}
 8018240:	2000e544 	.word	0x2000e544

08018244 <_sbrk_r>:
 8018244:	b538      	push	{r3, r4, r5, lr}
 8018246:	4d06      	ldr	r5, [pc, #24]	; (8018260 <_sbrk_r+0x1c>)
 8018248:	2300      	movs	r3, #0
 801824a:	4604      	mov	r4, r0
 801824c:	4608      	mov	r0, r1
 801824e:	602b      	str	r3, [r5, #0]
 8018250:	f7e9 fcba 	bl	8001bc8 <_sbrk>
 8018254:	1c43      	adds	r3, r0, #1
 8018256:	d102      	bne.n	801825e <_sbrk_r+0x1a>
 8018258:	682b      	ldr	r3, [r5, #0]
 801825a:	b103      	cbz	r3, 801825e <_sbrk_r+0x1a>
 801825c:	6023      	str	r3, [r4, #0]
 801825e:	bd38      	pop	{r3, r4, r5, pc}
 8018260:	2000e544 	.word	0x2000e544

08018264 <_write_r>:
 8018264:	b538      	push	{r3, r4, r5, lr}
 8018266:	4d07      	ldr	r5, [pc, #28]	; (8018284 <_write_r+0x20>)
 8018268:	4604      	mov	r4, r0
 801826a:	4608      	mov	r0, r1
 801826c:	4611      	mov	r1, r2
 801826e:	2200      	movs	r2, #0
 8018270:	602a      	str	r2, [r5, #0]
 8018272:	461a      	mov	r2, r3
 8018274:	f7e9 fc57 	bl	8001b26 <_write>
 8018278:	1c43      	adds	r3, r0, #1
 801827a:	d102      	bne.n	8018282 <_write_r+0x1e>
 801827c:	682b      	ldr	r3, [r5, #0]
 801827e:	b103      	cbz	r3, 8018282 <_write_r+0x1e>
 8018280:	6023      	str	r3, [r4, #0]
 8018282:	bd38      	pop	{r3, r4, r5, pc}
 8018284:	2000e544 	.word	0x2000e544

08018288 <__errno>:
 8018288:	4b01      	ldr	r3, [pc, #4]	; (8018290 <__errno+0x8>)
 801828a:	6818      	ldr	r0, [r3, #0]
 801828c:	4770      	bx	lr
 801828e:	bf00      	nop
 8018290:	2000012c 	.word	0x2000012c

08018294 <__libc_init_array>:
 8018294:	b570      	push	{r4, r5, r6, lr}
 8018296:	4d0d      	ldr	r5, [pc, #52]	; (80182cc <__libc_init_array+0x38>)
 8018298:	4c0d      	ldr	r4, [pc, #52]	; (80182d0 <__libc_init_array+0x3c>)
 801829a:	1b64      	subs	r4, r4, r5
 801829c:	10a4      	asrs	r4, r4, #2
 801829e:	2600      	movs	r6, #0
 80182a0:	42a6      	cmp	r6, r4
 80182a2:	d109      	bne.n	80182b8 <__libc_init_array+0x24>
 80182a4:	4d0b      	ldr	r5, [pc, #44]	; (80182d4 <__libc_init_array+0x40>)
 80182a6:	4c0c      	ldr	r4, [pc, #48]	; (80182d8 <__libc_init_array+0x44>)
 80182a8:	f000 ff00 	bl	80190ac <_init>
 80182ac:	1b64      	subs	r4, r4, r5
 80182ae:	10a4      	asrs	r4, r4, #2
 80182b0:	2600      	movs	r6, #0
 80182b2:	42a6      	cmp	r6, r4
 80182b4:	d105      	bne.n	80182c2 <__libc_init_array+0x2e>
 80182b6:	bd70      	pop	{r4, r5, r6, pc}
 80182b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80182bc:	4798      	blx	r3
 80182be:	3601      	adds	r6, #1
 80182c0:	e7ee      	b.n	80182a0 <__libc_init_array+0xc>
 80182c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80182c6:	4798      	blx	r3
 80182c8:	3601      	adds	r6, #1
 80182ca:	e7f2      	b.n	80182b2 <__libc_init_array+0x1e>
 80182cc:	08019e4c 	.word	0x08019e4c
 80182d0:	08019e4c 	.word	0x08019e4c
 80182d4:	08019e4c 	.word	0x08019e4c
 80182d8:	08019e54 	.word	0x08019e54

080182dc <__retarget_lock_acquire_recursive>:
 80182dc:	4770      	bx	lr

080182de <__retarget_lock_release_recursive>:
 80182de:	4770      	bx	lr

080182e0 <strcpy>:
 80182e0:	4603      	mov	r3, r0
 80182e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80182e6:	f803 2b01 	strb.w	r2, [r3], #1
 80182ea:	2a00      	cmp	r2, #0
 80182ec:	d1f9      	bne.n	80182e2 <strcpy+0x2>
 80182ee:	4770      	bx	lr

080182f0 <memcpy>:
 80182f0:	440a      	add	r2, r1
 80182f2:	4291      	cmp	r1, r2
 80182f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80182f8:	d100      	bne.n	80182fc <memcpy+0xc>
 80182fa:	4770      	bx	lr
 80182fc:	b510      	push	{r4, lr}
 80182fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018302:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018306:	4291      	cmp	r1, r2
 8018308:	d1f9      	bne.n	80182fe <memcpy+0xe>
 801830a:	bd10      	pop	{r4, pc}

0801830c <__assert_func>:
 801830c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801830e:	4614      	mov	r4, r2
 8018310:	461a      	mov	r2, r3
 8018312:	4b09      	ldr	r3, [pc, #36]	; (8018338 <__assert_func+0x2c>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	4605      	mov	r5, r0
 8018318:	68d8      	ldr	r0, [r3, #12]
 801831a:	b14c      	cbz	r4, 8018330 <__assert_func+0x24>
 801831c:	4b07      	ldr	r3, [pc, #28]	; (801833c <__assert_func+0x30>)
 801831e:	9100      	str	r1, [sp, #0]
 8018320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018324:	4906      	ldr	r1, [pc, #24]	; (8018340 <__assert_func+0x34>)
 8018326:	462b      	mov	r3, r5
 8018328:	f000 fd48 	bl	8018dbc <fiprintf>
 801832c:	f000 fdee 	bl	8018f0c <abort>
 8018330:	4b04      	ldr	r3, [pc, #16]	; (8018344 <__assert_func+0x38>)
 8018332:	461c      	mov	r4, r3
 8018334:	e7f3      	b.n	801831e <__assert_func+0x12>
 8018336:	bf00      	nop
 8018338:	2000012c 	.word	0x2000012c
 801833c:	08019dd4 	.word	0x08019dd4
 8018340:	08019de1 	.word	0x08019de1
 8018344:	08019e0f 	.word	0x08019e0f

08018348 <__env_lock>:
 8018348:	4801      	ldr	r0, [pc, #4]	; (8018350 <__env_lock+0x8>)
 801834a:	f7ff bfc7 	b.w	80182dc <__retarget_lock_acquire_recursive>
 801834e:	bf00      	nop
 8018350:	2000e548 	.word	0x2000e548

08018354 <__env_unlock>:
 8018354:	4801      	ldr	r0, [pc, #4]	; (801835c <__env_unlock+0x8>)
 8018356:	f7ff bfc2 	b.w	80182de <__retarget_lock_release_recursive>
 801835a:	bf00      	nop
 801835c:	2000e548 	.word	0x2000e548

08018360 <_free_r>:
 8018360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018362:	2900      	cmp	r1, #0
 8018364:	d044      	beq.n	80183f0 <_free_r+0x90>
 8018366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801836a:	9001      	str	r0, [sp, #4]
 801836c:	2b00      	cmp	r3, #0
 801836e:	f1a1 0404 	sub.w	r4, r1, #4
 8018372:	bfb8      	it	lt
 8018374:	18e4      	addlt	r4, r4, r3
 8018376:	f7ff fc3b 	bl	8017bf0 <__malloc_lock>
 801837a:	4a1e      	ldr	r2, [pc, #120]	; (80183f4 <_free_r+0x94>)
 801837c:	9801      	ldr	r0, [sp, #4]
 801837e:	6813      	ldr	r3, [r2, #0]
 8018380:	b933      	cbnz	r3, 8018390 <_free_r+0x30>
 8018382:	6063      	str	r3, [r4, #4]
 8018384:	6014      	str	r4, [r2, #0]
 8018386:	b003      	add	sp, #12
 8018388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801838c:	f7ff bc36 	b.w	8017bfc <__malloc_unlock>
 8018390:	42a3      	cmp	r3, r4
 8018392:	d908      	bls.n	80183a6 <_free_r+0x46>
 8018394:	6825      	ldr	r5, [r4, #0]
 8018396:	1961      	adds	r1, r4, r5
 8018398:	428b      	cmp	r3, r1
 801839a:	bf01      	itttt	eq
 801839c:	6819      	ldreq	r1, [r3, #0]
 801839e:	685b      	ldreq	r3, [r3, #4]
 80183a0:	1949      	addeq	r1, r1, r5
 80183a2:	6021      	streq	r1, [r4, #0]
 80183a4:	e7ed      	b.n	8018382 <_free_r+0x22>
 80183a6:	461a      	mov	r2, r3
 80183a8:	685b      	ldr	r3, [r3, #4]
 80183aa:	b10b      	cbz	r3, 80183b0 <_free_r+0x50>
 80183ac:	42a3      	cmp	r3, r4
 80183ae:	d9fa      	bls.n	80183a6 <_free_r+0x46>
 80183b0:	6811      	ldr	r1, [r2, #0]
 80183b2:	1855      	adds	r5, r2, r1
 80183b4:	42a5      	cmp	r5, r4
 80183b6:	d10b      	bne.n	80183d0 <_free_r+0x70>
 80183b8:	6824      	ldr	r4, [r4, #0]
 80183ba:	4421      	add	r1, r4
 80183bc:	1854      	adds	r4, r2, r1
 80183be:	42a3      	cmp	r3, r4
 80183c0:	6011      	str	r1, [r2, #0]
 80183c2:	d1e0      	bne.n	8018386 <_free_r+0x26>
 80183c4:	681c      	ldr	r4, [r3, #0]
 80183c6:	685b      	ldr	r3, [r3, #4]
 80183c8:	6053      	str	r3, [r2, #4]
 80183ca:	440c      	add	r4, r1
 80183cc:	6014      	str	r4, [r2, #0]
 80183ce:	e7da      	b.n	8018386 <_free_r+0x26>
 80183d0:	d902      	bls.n	80183d8 <_free_r+0x78>
 80183d2:	230c      	movs	r3, #12
 80183d4:	6003      	str	r3, [r0, #0]
 80183d6:	e7d6      	b.n	8018386 <_free_r+0x26>
 80183d8:	6825      	ldr	r5, [r4, #0]
 80183da:	1961      	adds	r1, r4, r5
 80183dc:	428b      	cmp	r3, r1
 80183de:	bf04      	itt	eq
 80183e0:	6819      	ldreq	r1, [r3, #0]
 80183e2:	685b      	ldreq	r3, [r3, #4]
 80183e4:	6063      	str	r3, [r4, #4]
 80183e6:	bf04      	itt	eq
 80183e8:	1949      	addeq	r1, r1, r5
 80183ea:	6021      	streq	r1, [r4, #0]
 80183ec:	6054      	str	r4, [r2, #4]
 80183ee:	e7ca      	b.n	8018386 <_free_r+0x26>
 80183f0:	b003      	add	sp, #12
 80183f2:	bd30      	pop	{r4, r5, pc}
 80183f4:	2000e400 	.word	0x2000e400

080183f8 <_malloc_usable_size_r>:
 80183f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183fc:	1f18      	subs	r0, r3, #4
 80183fe:	2b00      	cmp	r3, #0
 8018400:	bfbc      	itt	lt
 8018402:	580b      	ldrlt	r3, [r1, r0]
 8018404:	18c0      	addlt	r0, r0, r3
 8018406:	4770      	bx	lr

08018408 <__ssputs_r>:
 8018408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801840c:	688e      	ldr	r6, [r1, #8]
 801840e:	461f      	mov	r7, r3
 8018410:	42be      	cmp	r6, r7
 8018412:	680b      	ldr	r3, [r1, #0]
 8018414:	4682      	mov	sl, r0
 8018416:	460c      	mov	r4, r1
 8018418:	4690      	mov	r8, r2
 801841a:	d82c      	bhi.n	8018476 <__ssputs_r+0x6e>
 801841c:	898a      	ldrh	r2, [r1, #12]
 801841e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018422:	d026      	beq.n	8018472 <__ssputs_r+0x6a>
 8018424:	6965      	ldr	r5, [r4, #20]
 8018426:	6909      	ldr	r1, [r1, #16]
 8018428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801842c:	eba3 0901 	sub.w	r9, r3, r1
 8018430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018434:	1c7b      	adds	r3, r7, #1
 8018436:	444b      	add	r3, r9
 8018438:	106d      	asrs	r5, r5, #1
 801843a:	429d      	cmp	r5, r3
 801843c:	bf38      	it	cc
 801843e:	461d      	movcc	r5, r3
 8018440:	0553      	lsls	r3, r2, #21
 8018442:	d527      	bpl.n	8018494 <__ssputs_r+0x8c>
 8018444:	4629      	mov	r1, r5
 8018446:	f7ff fb53 	bl	8017af0 <_malloc_r>
 801844a:	4606      	mov	r6, r0
 801844c:	b360      	cbz	r0, 80184a8 <__ssputs_r+0xa0>
 801844e:	6921      	ldr	r1, [r4, #16]
 8018450:	464a      	mov	r2, r9
 8018452:	f7ff ff4d 	bl	80182f0 <memcpy>
 8018456:	89a3      	ldrh	r3, [r4, #12]
 8018458:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801845c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018460:	81a3      	strh	r3, [r4, #12]
 8018462:	6126      	str	r6, [r4, #16]
 8018464:	6165      	str	r5, [r4, #20]
 8018466:	444e      	add	r6, r9
 8018468:	eba5 0509 	sub.w	r5, r5, r9
 801846c:	6026      	str	r6, [r4, #0]
 801846e:	60a5      	str	r5, [r4, #8]
 8018470:	463e      	mov	r6, r7
 8018472:	42be      	cmp	r6, r7
 8018474:	d900      	bls.n	8018478 <__ssputs_r+0x70>
 8018476:	463e      	mov	r6, r7
 8018478:	6820      	ldr	r0, [r4, #0]
 801847a:	4632      	mov	r2, r6
 801847c:	4641      	mov	r1, r8
 801847e:	f7ff fe55 	bl	801812c <memmove>
 8018482:	68a3      	ldr	r3, [r4, #8]
 8018484:	1b9b      	subs	r3, r3, r6
 8018486:	60a3      	str	r3, [r4, #8]
 8018488:	6823      	ldr	r3, [r4, #0]
 801848a:	4433      	add	r3, r6
 801848c:	6023      	str	r3, [r4, #0]
 801848e:	2000      	movs	r0, #0
 8018490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018494:	462a      	mov	r2, r5
 8018496:	f7ff fc2b 	bl	8017cf0 <_realloc_r>
 801849a:	4606      	mov	r6, r0
 801849c:	2800      	cmp	r0, #0
 801849e:	d1e0      	bne.n	8018462 <__ssputs_r+0x5a>
 80184a0:	6921      	ldr	r1, [r4, #16]
 80184a2:	4650      	mov	r0, sl
 80184a4:	f7ff ff5c 	bl	8018360 <_free_r>
 80184a8:	230c      	movs	r3, #12
 80184aa:	f8ca 3000 	str.w	r3, [sl]
 80184ae:	89a3      	ldrh	r3, [r4, #12]
 80184b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184b4:	81a3      	strh	r3, [r4, #12]
 80184b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184ba:	e7e9      	b.n	8018490 <__ssputs_r+0x88>

080184bc <_svfiprintf_r>:
 80184bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c0:	4698      	mov	r8, r3
 80184c2:	898b      	ldrh	r3, [r1, #12]
 80184c4:	061b      	lsls	r3, r3, #24
 80184c6:	b09d      	sub	sp, #116	; 0x74
 80184c8:	4607      	mov	r7, r0
 80184ca:	460d      	mov	r5, r1
 80184cc:	4614      	mov	r4, r2
 80184ce:	d50e      	bpl.n	80184ee <_svfiprintf_r+0x32>
 80184d0:	690b      	ldr	r3, [r1, #16]
 80184d2:	b963      	cbnz	r3, 80184ee <_svfiprintf_r+0x32>
 80184d4:	2140      	movs	r1, #64	; 0x40
 80184d6:	f7ff fb0b 	bl	8017af0 <_malloc_r>
 80184da:	6028      	str	r0, [r5, #0]
 80184dc:	6128      	str	r0, [r5, #16]
 80184de:	b920      	cbnz	r0, 80184ea <_svfiprintf_r+0x2e>
 80184e0:	230c      	movs	r3, #12
 80184e2:	603b      	str	r3, [r7, #0]
 80184e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184e8:	e0d0      	b.n	801868c <_svfiprintf_r+0x1d0>
 80184ea:	2340      	movs	r3, #64	; 0x40
 80184ec:	616b      	str	r3, [r5, #20]
 80184ee:	2300      	movs	r3, #0
 80184f0:	9309      	str	r3, [sp, #36]	; 0x24
 80184f2:	2320      	movs	r3, #32
 80184f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80184f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80184fc:	2330      	movs	r3, #48	; 0x30
 80184fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80186a4 <_svfiprintf_r+0x1e8>
 8018502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018506:	f04f 0901 	mov.w	r9, #1
 801850a:	4623      	mov	r3, r4
 801850c:	469a      	mov	sl, r3
 801850e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018512:	b10a      	cbz	r2, 8018518 <_svfiprintf_r+0x5c>
 8018514:	2a25      	cmp	r2, #37	; 0x25
 8018516:	d1f9      	bne.n	801850c <_svfiprintf_r+0x50>
 8018518:	ebba 0b04 	subs.w	fp, sl, r4
 801851c:	d00b      	beq.n	8018536 <_svfiprintf_r+0x7a>
 801851e:	465b      	mov	r3, fp
 8018520:	4622      	mov	r2, r4
 8018522:	4629      	mov	r1, r5
 8018524:	4638      	mov	r0, r7
 8018526:	f7ff ff6f 	bl	8018408 <__ssputs_r>
 801852a:	3001      	adds	r0, #1
 801852c:	f000 80a9 	beq.w	8018682 <_svfiprintf_r+0x1c6>
 8018530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018532:	445a      	add	r2, fp
 8018534:	9209      	str	r2, [sp, #36]	; 0x24
 8018536:	f89a 3000 	ldrb.w	r3, [sl]
 801853a:	2b00      	cmp	r3, #0
 801853c:	f000 80a1 	beq.w	8018682 <_svfiprintf_r+0x1c6>
 8018540:	2300      	movs	r3, #0
 8018542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801854a:	f10a 0a01 	add.w	sl, sl, #1
 801854e:	9304      	str	r3, [sp, #16]
 8018550:	9307      	str	r3, [sp, #28]
 8018552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018556:	931a      	str	r3, [sp, #104]	; 0x68
 8018558:	4654      	mov	r4, sl
 801855a:	2205      	movs	r2, #5
 801855c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018560:	4850      	ldr	r0, [pc, #320]	; (80186a4 <_svfiprintf_r+0x1e8>)
 8018562:	f7e7 fe4d 	bl	8000200 <memchr>
 8018566:	9a04      	ldr	r2, [sp, #16]
 8018568:	b9d8      	cbnz	r0, 80185a2 <_svfiprintf_r+0xe6>
 801856a:	06d0      	lsls	r0, r2, #27
 801856c:	bf44      	itt	mi
 801856e:	2320      	movmi	r3, #32
 8018570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018574:	0711      	lsls	r1, r2, #28
 8018576:	bf44      	itt	mi
 8018578:	232b      	movmi	r3, #43	; 0x2b
 801857a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801857e:	f89a 3000 	ldrb.w	r3, [sl]
 8018582:	2b2a      	cmp	r3, #42	; 0x2a
 8018584:	d015      	beq.n	80185b2 <_svfiprintf_r+0xf6>
 8018586:	9a07      	ldr	r2, [sp, #28]
 8018588:	4654      	mov	r4, sl
 801858a:	2000      	movs	r0, #0
 801858c:	f04f 0c0a 	mov.w	ip, #10
 8018590:	4621      	mov	r1, r4
 8018592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018596:	3b30      	subs	r3, #48	; 0x30
 8018598:	2b09      	cmp	r3, #9
 801859a:	d94d      	bls.n	8018638 <_svfiprintf_r+0x17c>
 801859c:	b1b0      	cbz	r0, 80185cc <_svfiprintf_r+0x110>
 801859e:	9207      	str	r2, [sp, #28]
 80185a0:	e014      	b.n	80185cc <_svfiprintf_r+0x110>
 80185a2:	eba0 0308 	sub.w	r3, r0, r8
 80185a6:	fa09 f303 	lsl.w	r3, r9, r3
 80185aa:	4313      	orrs	r3, r2
 80185ac:	9304      	str	r3, [sp, #16]
 80185ae:	46a2      	mov	sl, r4
 80185b0:	e7d2      	b.n	8018558 <_svfiprintf_r+0x9c>
 80185b2:	9b03      	ldr	r3, [sp, #12]
 80185b4:	1d19      	adds	r1, r3, #4
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	9103      	str	r1, [sp, #12]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	bfbb      	ittet	lt
 80185be:	425b      	neglt	r3, r3
 80185c0:	f042 0202 	orrlt.w	r2, r2, #2
 80185c4:	9307      	strge	r3, [sp, #28]
 80185c6:	9307      	strlt	r3, [sp, #28]
 80185c8:	bfb8      	it	lt
 80185ca:	9204      	strlt	r2, [sp, #16]
 80185cc:	7823      	ldrb	r3, [r4, #0]
 80185ce:	2b2e      	cmp	r3, #46	; 0x2e
 80185d0:	d10c      	bne.n	80185ec <_svfiprintf_r+0x130>
 80185d2:	7863      	ldrb	r3, [r4, #1]
 80185d4:	2b2a      	cmp	r3, #42	; 0x2a
 80185d6:	d134      	bne.n	8018642 <_svfiprintf_r+0x186>
 80185d8:	9b03      	ldr	r3, [sp, #12]
 80185da:	1d1a      	adds	r2, r3, #4
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	9203      	str	r2, [sp, #12]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	bfb8      	it	lt
 80185e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80185e8:	3402      	adds	r4, #2
 80185ea:	9305      	str	r3, [sp, #20]
 80185ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80186b4 <_svfiprintf_r+0x1f8>
 80185f0:	7821      	ldrb	r1, [r4, #0]
 80185f2:	2203      	movs	r2, #3
 80185f4:	4650      	mov	r0, sl
 80185f6:	f7e7 fe03 	bl	8000200 <memchr>
 80185fa:	b138      	cbz	r0, 801860c <_svfiprintf_r+0x150>
 80185fc:	9b04      	ldr	r3, [sp, #16]
 80185fe:	eba0 000a 	sub.w	r0, r0, sl
 8018602:	2240      	movs	r2, #64	; 0x40
 8018604:	4082      	lsls	r2, r0
 8018606:	4313      	orrs	r3, r2
 8018608:	3401      	adds	r4, #1
 801860a:	9304      	str	r3, [sp, #16]
 801860c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018610:	4825      	ldr	r0, [pc, #148]	; (80186a8 <_svfiprintf_r+0x1ec>)
 8018612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018616:	2206      	movs	r2, #6
 8018618:	f7e7 fdf2 	bl	8000200 <memchr>
 801861c:	2800      	cmp	r0, #0
 801861e:	d038      	beq.n	8018692 <_svfiprintf_r+0x1d6>
 8018620:	4b22      	ldr	r3, [pc, #136]	; (80186ac <_svfiprintf_r+0x1f0>)
 8018622:	bb1b      	cbnz	r3, 801866c <_svfiprintf_r+0x1b0>
 8018624:	9b03      	ldr	r3, [sp, #12]
 8018626:	3307      	adds	r3, #7
 8018628:	f023 0307 	bic.w	r3, r3, #7
 801862c:	3308      	adds	r3, #8
 801862e:	9303      	str	r3, [sp, #12]
 8018630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018632:	4433      	add	r3, r6
 8018634:	9309      	str	r3, [sp, #36]	; 0x24
 8018636:	e768      	b.n	801850a <_svfiprintf_r+0x4e>
 8018638:	fb0c 3202 	mla	r2, ip, r2, r3
 801863c:	460c      	mov	r4, r1
 801863e:	2001      	movs	r0, #1
 8018640:	e7a6      	b.n	8018590 <_svfiprintf_r+0xd4>
 8018642:	2300      	movs	r3, #0
 8018644:	3401      	adds	r4, #1
 8018646:	9305      	str	r3, [sp, #20]
 8018648:	4619      	mov	r1, r3
 801864a:	f04f 0c0a 	mov.w	ip, #10
 801864e:	4620      	mov	r0, r4
 8018650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018654:	3a30      	subs	r2, #48	; 0x30
 8018656:	2a09      	cmp	r2, #9
 8018658:	d903      	bls.n	8018662 <_svfiprintf_r+0x1a6>
 801865a:	2b00      	cmp	r3, #0
 801865c:	d0c6      	beq.n	80185ec <_svfiprintf_r+0x130>
 801865e:	9105      	str	r1, [sp, #20]
 8018660:	e7c4      	b.n	80185ec <_svfiprintf_r+0x130>
 8018662:	fb0c 2101 	mla	r1, ip, r1, r2
 8018666:	4604      	mov	r4, r0
 8018668:	2301      	movs	r3, #1
 801866a:	e7f0      	b.n	801864e <_svfiprintf_r+0x192>
 801866c:	ab03      	add	r3, sp, #12
 801866e:	9300      	str	r3, [sp, #0]
 8018670:	462a      	mov	r2, r5
 8018672:	4b0f      	ldr	r3, [pc, #60]	; (80186b0 <_svfiprintf_r+0x1f4>)
 8018674:	a904      	add	r1, sp, #16
 8018676:	4638      	mov	r0, r7
 8018678:	f3af 8000 	nop.w
 801867c:	1c42      	adds	r2, r0, #1
 801867e:	4606      	mov	r6, r0
 8018680:	d1d6      	bne.n	8018630 <_svfiprintf_r+0x174>
 8018682:	89ab      	ldrh	r3, [r5, #12]
 8018684:	065b      	lsls	r3, r3, #25
 8018686:	f53f af2d 	bmi.w	80184e4 <_svfiprintf_r+0x28>
 801868a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801868c:	b01d      	add	sp, #116	; 0x74
 801868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018692:	ab03      	add	r3, sp, #12
 8018694:	9300      	str	r3, [sp, #0]
 8018696:	462a      	mov	r2, r5
 8018698:	4b05      	ldr	r3, [pc, #20]	; (80186b0 <_svfiprintf_r+0x1f4>)
 801869a:	a904      	add	r1, sp, #16
 801869c:	4638      	mov	r0, r7
 801869e:	f000 f9bd 	bl	8018a1c <_printf_i>
 80186a2:	e7eb      	b.n	801867c <_svfiprintf_r+0x1c0>
 80186a4:	08019e10 	.word	0x08019e10
 80186a8:	08019e1a 	.word	0x08019e1a
 80186ac:	00000000 	.word	0x00000000
 80186b0:	08018409 	.word	0x08018409
 80186b4:	08019e16 	.word	0x08019e16

080186b8 <__sfputc_r>:
 80186b8:	6893      	ldr	r3, [r2, #8]
 80186ba:	3b01      	subs	r3, #1
 80186bc:	2b00      	cmp	r3, #0
 80186be:	b410      	push	{r4}
 80186c0:	6093      	str	r3, [r2, #8]
 80186c2:	da08      	bge.n	80186d6 <__sfputc_r+0x1e>
 80186c4:	6994      	ldr	r4, [r2, #24]
 80186c6:	42a3      	cmp	r3, r4
 80186c8:	db01      	blt.n	80186ce <__sfputc_r+0x16>
 80186ca:	290a      	cmp	r1, #10
 80186cc:	d103      	bne.n	80186d6 <__sfputc_r+0x1e>
 80186ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186d2:	f000 bb85 	b.w	8018de0 <__swbuf_r>
 80186d6:	6813      	ldr	r3, [r2, #0]
 80186d8:	1c58      	adds	r0, r3, #1
 80186da:	6010      	str	r0, [r2, #0]
 80186dc:	7019      	strb	r1, [r3, #0]
 80186de:	4608      	mov	r0, r1
 80186e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186e4:	4770      	bx	lr

080186e6 <__sfputs_r>:
 80186e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186e8:	4606      	mov	r6, r0
 80186ea:	460f      	mov	r7, r1
 80186ec:	4614      	mov	r4, r2
 80186ee:	18d5      	adds	r5, r2, r3
 80186f0:	42ac      	cmp	r4, r5
 80186f2:	d101      	bne.n	80186f8 <__sfputs_r+0x12>
 80186f4:	2000      	movs	r0, #0
 80186f6:	e007      	b.n	8018708 <__sfputs_r+0x22>
 80186f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186fc:	463a      	mov	r2, r7
 80186fe:	4630      	mov	r0, r6
 8018700:	f7ff ffda 	bl	80186b8 <__sfputc_r>
 8018704:	1c43      	adds	r3, r0, #1
 8018706:	d1f3      	bne.n	80186f0 <__sfputs_r+0xa>
 8018708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801870c <_vfiprintf_r>:
 801870c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018710:	460d      	mov	r5, r1
 8018712:	b09d      	sub	sp, #116	; 0x74
 8018714:	4614      	mov	r4, r2
 8018716:	4698      	mov	r8, r3
 8018718:	4606      	mov	r6, r0
 801871a:	b118      	cbz	r0, 8018724 <_vfiprintf_r+0x18>
 801871c:	6a03      	ldr	r3, [r0, #32]
 801871e:	b90b      	cbnz	r3, 8018724 <_vfiprintf_r+0x18>
 8018720:	f7ff fc0c 	bl	8017f3c <__sinit>
 8018724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018726:	07d9      	lsls	r1, r3, #31
 8018728:	d405      	bmi.n	8018736 <_vfiprintf_r+0x2a>
 801872a:	89ab      	ldrh	r3, [r5, #12]
 801872c:	059a      	lsls	r2, r3, #22
 801872e:	d402      	bmi.n	8018736 <_vfiprintf_r+0x2a>
 8018730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018732:	f7ff fdd3 	bl	80182dc <__retarget_lock_acquire_recursive>
 8018736:	89ab      	ldrh	r3, [r5, #12]
 8018738:	071b      	lsls	r3, r3, #28
 801873a:	d501      	bpl.n	8018740 <_vfiprintf_r+0x34>
 801873c:	692b      	ldr	r3, [r5, #16]
 801873e:	b99b      	cbnz	r3, 8018768 <_vfiprintf_r+0x5c>
 8018740:	4629      	mov	r1, r5
 8018742:	4630      	mov	r0, r6
 8018744:	f000 fb8a 	bl	8018e5c <__swsetup_r>
 8018748:	b170      	cbz	r0, 8018768 <_vfiprintf_r+0x5c>
 801874a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801874c:	07dc      	lsls	r4, r3, #31
 801874e:	d504      	bpl.n	801875a <_vfiprintf_r+0x4e>
 8018750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018754:	b01d      	add	sp, #116	; 0x74
 8018756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801875a:	89ab      	ldrh	r3, [r5, #12]
 801875c:	0598      	lsls	r0, r3, #22
 801875e:	d4f7      	bmi.n	8018750 <_vfiprintf_r+0x44>
 8018760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018762:	f7ff fdbc 	bl	80182de <__retarget_lock_release_recursive>
 8018766:	e7f3      	b.n	8018750 <_vfiprintf_r+0x44>
 8018768:	2300      	movs	r3, #0
 801876a:	9309      	str	r3, [sp, #36]	; 0x24
 801876c:	2320      	movs	r3, #32
 801876e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018772:	f8cd 800c 	str.w	r8, [sp, #12]
 8018776:	2330      	movs	r3, #48	; 0x30
 8018778:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801892c <_vfiprintf_r+0x220>
 801877c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018780:	f04f 0901 	mov.w	r9, #1
 8018784:	4623      	mov	r3, r4
 8018786:	469a      	mov	sl, r3
 8018788:	f813 2b01 	ldrb.w	r2, [r3], #1
 801878c:	b10a      	cbz	r2, 8018792 <_vfiprintf_r+0x86>
 801878e:	2a25      	cmp	r2, #37	; 0x25
 8018790:	d1f9      	bne.n	8018786 <_vfiprintf_r+0x7a>
 8018792:	ebba 0b04 	subs.w	fp, sl, r4
 8018796:	d00b      	beq.n	80187b0 <_vfiprintf_r+0xa4>
 8018798:	465b      	mov	r3, fp
 801879a:	4622      	mov	r2, r4
 801879c:	4629      	mov	r1, r5
 801879e:	4630      	mov	r0, r6
 80187a0:	f7ff ffa1 	bl	80186e6 <__sfputs_r>
 80187a4:	3001      	adds	r0, #1
 80187a6:	f000 80a9 	beq.w	80188fc <_vfiprintf_r+0x1f0>
 80187aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187ac:	445a      	add	r2, fp
 80187ae:	9209      	str	r2, [sp, #36]	; 0x24
 80187b0:	f89a 3000 	ldrb.w	r3, [sl]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	f000 80a1 	beq.w	80188fc <_vfiprintf_r+0x1f0>
 80187ba:	2300      	movs	r3, #0
 80187bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80187c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80187c4:	f10a 0a01 	add.w	sl, sl, #1
 80187c8:	9304      	str	r3, [sp, #16]
 80187ca:	9307      	str	r3, [sp, #28]
 80187cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80187d0:	931a      	str	r3, [sp, #104]	; 0x68
 80187d2:	4654      	mov	r4, sl
 80187d4:	2205      	movs	r2, #5
 80187d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187da:	4854      	ldr	r0, [pc, #336]	; (801892c <_vfiprintf_r+0x220>)
 80187dc:	f7e7 fd10 	bl	8000200 <memchr>
 80187e0:	9a04      	ldr	r2, [sp, #16]
 80187e2:	b9d8      	cbnz	r0, 801881c <_vfiprintf_r+0x110>
 80187e4:	06d1      	lsls	r1, r2, #27
 80187e6:	bf44      	itt	mi
 80187e8:	2320      	movmi	r3, #32
 80187ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80187ee:	0713      	lsls	r3, r2, #28
 80187f0:	bf44      	itt	mi
 80187f2:	232b      	movmi	r3, #43	; 0x2b
 80187f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80187f8:	f89a 3000 	ldrb.w	r3, [sl]
 80187fc:	2b2a      	cmp	r3, #42	; 0x2a
 80187fe:	d015      	beq.n	801882c <_vfiprintf_r+0x120>
 8018800:	9a07      	ldr	r2, [sp, #28]
 8018802:	4654      	mov	r4, sl
 8018804:	2000      	movs	r0, #0
 8018806:	f04f 0c0a 	mov.w	ip, #10
 801880a:	4621      	mov	r1, r4
 801880c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018810:	3b30      	subs	r3, #48	; 0x30
 8018812:	2b09      	cmp	r3, #9
 8018814:	d94d      	bls.n	80188b2 <_vfiprintf_r+0x1a6>
 8018816:	b1b0      	cbz	r0, 8018846 <_vfiprintf_r+0x13a>
 8018818:	9207      	str	r2, [sp, #28]
 801881a:	e014      	b.n	8018846 <_vfiprintf_r+0x13a>
 801881c:	eba0 0308 	sub.w	r3, r0, r8
 8018820:	fa09 f303 	lsl.w	r3, r9, r3
 8018824:	4313      	orrs	r3, r2
 8018826:	9304      	str	r3, [sp, #16]
 8018828:	46a2      	mov	sl, r4
 801882a:	e7d2      	b.n	80187d2 <_vfiprintf_r+0xc6>
 801882c:	9b03      	ldr	r3, [sp, #12]
 801882e:	1d19      	adds	r1, r3, #4
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	9103      	str	r1, [sp, #12]
 8018834:	2b00      	cmp	r3, #0
 8018836:	bfbb      	ittet	lt
 8018838:	425b      	neglt	r3, r3
 801883a:	f042 0202 	orrlt.w	r2, r2, #2
 801883e:	9307      	strge	r3, [sp, #28]
 8018840:	9307      	strlt	r3, [sp, #28]
 8018842:	bfb8      	it	lt
 8018844:	9204      	strlt	r2, [sp, #16]
 8018846:	7823      	ldrb	r3, [r4, #0]
 8018848:	2b2e      	cmp	r3, #46	; 0x2e
 801884a:	d10c      	bne.n	8018866 <_vfiprintf_r+0x15a>
 801884c:	7863      	ldrb	r3, [r4, #1]
 801884e:	2b2a      	cmp	r3, #42	; 0x2a
 8018850:	d134      	bne.n	80188bc <_vfiprintf_r+0x1b0>
 8018852:	9b03      	ldr	r3, [sp, #12]
 8018854:	1d1a      	adds	r2, r3, #4
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	9203      	str	r2, [sp, #12]
 801885a:	2b00      	cmp	r3, #0
 801885c:	bfb8      	it	lt
 801885e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018862:	3402      	adds	r4, #2
 8018864:	9305      	str	r3, [sp, #20]
 8018866:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801893c <_vfiprintf_r+0x230>
 801886a:	7821      	ldrb	r1, [r4, #0]
 801886c:	2203      	movs	r2, #3
 801886e:	4650      	mov	r0, sl
 8018870:	f7e7 fcc6 	bl	8000200 <memchr>
 8018874:	b138      	cbz	r0, 8018886 <_vfiprintf_r+0x17a>
 8018876:	9b04      	ldr	r3, [sp, #16]
 8018878:	eba0 000a 	sub.w	r0, r0, sl
 801887c:	2240      	movs	r2, #64	; 0x40
 801887e:	4082      	lsls	r2, r0
 8018880:	4313      	orrs	r3, r2
 8018882:	3401      	adds	r4, #1
 8018884:	9304      	str	r3, [sp, #16]
 8018886:	f814 1b01 	ldrb.w	r1, [r4], #1
 801888a:	4829      	ldr	r0, [pc, #164]	; (8018930 <_vfiprintf_r+0x224>)
 801888c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018890:	2206      	movs	r2, #6
 8018892:	f7e7 fcb5 	bl	8000200 <memchr>
 8018896:	2800      	cmp	r0, #0
 8018898:	d03f      	beq.n	801891a <_vfiprintf_r+0x20e>
 801889a:	4b26      	ldr	r3, [pc, #152]	; (8018934 <_vfiprintf_r+0x228>)
 801889c:	bb1b      	cbnz	r3, 80188e6 <_vfiprintf_r+0x1da>
 801889e:	9b03      	ldr	r3, [sp, #12]
 80188a0:	3307      	adds	r3, #7
 80188a2:	f023 0307 	bic.w	r3, r3, #7
 80188a6:	3308      	adds	r3, #8
 80188a8:	9303      	str	r3, [sp, #12]
 80188aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ac:	443b      	add	r3, r7
 80188ae:	9309      	str	r3, [sp, #36]	; 0x24
 80188b0:	e768      	b.n	8018784 <_vfiprintf_r+0x78>
 80188b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80188b6:	460c      	mov	r4, r1
 80188b8:	2001      	movs	r0, #1
 80188ba:	e7a6      	b.n	801880a <_vfiprintf_r+0xfe>
 80188bc:	2300      	movs	r3, #0
 80188be:	3401      	adds	r4, #1
 80188c0:	9305      	str	r3, [sp, #20]
 80188c2:	4619      	mov	r1, r3
 80188c4:	f04f 0c0a 	mov.w	ip, #10
 80188c8:	4620      	mov	r0, r4
 80188ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188ce:	3a30      	subs	r2, #48	; 0x30
 80188d0:	2a09      	cmp	r2, #9
 80188d2:	d903      	bls.n	80188dc <_vfiprintf_r+0x1d0>
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d0c6      	beq.n	8018866 <_vfiprintf_r+0x15a>
 80188d8:	9105      	str	r1, [sp, #20]
 80188da:	e7c4      	b.n	8018866 <_vfiprintf_r+0x15a>
 80188dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80188e0:	4604      	mov	r4, r0
 80188e2:	2301      	movs	r3, #1
 80188e4:	e7f0      	b.n	80188c8 <_vfiprintf_r+0x1bc>
 80188e6:	ab03      	add	r3, sp, #12
 80188e8:	9300      	str	r3, [sp, #0]
 80188ea:	462a      	mov	r2, r5
 80188ec:	4b12      	ldr	r3, [pc, #72]	; (8018938 <_vfiprintf_r+0x22c>)
 80188ee:	a904      	add	r1, sp, #16
 80188f0:	4630      	mov	r0, r6
 80188f2:	f3af 8000 	nop.w
 80188f6:	4607      	mov	r7, r0
 80188f8:	1c78      	adds	r0, r7, #1
 80188fa:	d1d6      	bne.n	80188aa <_vfiprintf_r+0x19e>
 80188fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80188fe:	07d9      	lsls	r1, r3, #31
 8018900:	d405      	bmi.n	801890e <_vfiprintf_r+0x202>
 8018902:	89ab      	ldrh	r3, [r5, #12]
 8018904:	059a      	lsls	r2, r3, #22
 8018906:	d402      	bmi.n	801890e <_vfiprintf_r+0x202>
 8018908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801890a:	f7ff fce8 	bl	80182de <__retarget_lock_release_recursive>
 801890e:	89ab      	ldrh	r3, [r5, #12]
 8018910:	065b      	lsls	r3, r3, #25
 8018912:	f53f af1d 	bmi.w	8018750 <_vfiprintf_r+0x44>
 8018916:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018918:	e71c      	b.n	8018754 <_vfiprintf_r+0x48>
 801891a:	ab03      	add	r3, sp, #12
 801891c:	9300      	str	r3, [sp, #0]
 801891e:	462a      	mov	r2, r5
 8018920:	4b05      	ldr	r3, [pc, #20]	; (8018938 <_vfiprintf_r+0x22c>)
 8018922:	a904      	add	r1, sp, #16
 8018924:	4630      	mov	r0, r6
 8018926:	f000 f879 	bl	8018a1c <_printf_i>
 801892a:	e7e4      	b.n	80188f6 <_vfiprintf_r+0x1ea>
 801892c:	08019e10 	.word	0x08019e10
 8018930:	08019e1a 	.word	0x08019e1a
 8018934:	00000000 	.word	0x00000000
 8018938:	080186e7 	.word	0x080186e7
 801893c:	08019e16 	.word	0x08019e16

08018940 <_printf_common>:
 8018940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018944:	4616      	mov	r6, r2
 8018946:	4699      	mov	r9, r3
 8018948:	688a      	ldr	r2, [r1, #8]
 801894a:	690b      	ldr	r3, [r1, #16]
 801894c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018950:	4293      	cmp	r3, r2
 8018952:	bfb8      	it	lt
 8018954:	4613      	movlt	r3, r2
 8018956:	6033      	str	r3, [r6, #0]
 8018958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801895c:	4607      	mov	r7, r0
 801895e:	460c      	mov	r4, r1
 8018960:	b10a      	cbz	r2, 8018966 <_printf_common+0x26>
 8018962:	3301      	adds	r3, #1
 8018964:	6033      	str	r3, [r6, #0]
 8018966:	6823      	ldr	r3, [r4, #0]
 8018968:	0699      	lsls	r1, r3, #26
 801896a:	bf42      	ittt	mi
 801896c:	6833      	ldrmi	r3, [r6, #0]
 801896e:	3302      	addmi	r3, #2
 8018970:	6033      	strmi	r3, [r6, #0]
 8018972:	6825      	ldr	r5, [r4, #0]
 8018974:	f015 0506 	ands.w	r5, r5, #6
 8018978:	d106      	bne.n	8018988 <_printf_common+0x48>
 801897a:	f104 0a19 	add.w	sl, r4, #25
 801897e:	68e3      	ldr	r3, [r4, #12]
 8018980:	6832      	ldr	r2, [r6, #0]
 8018982:	1a9b      	subs	r3, r3, r2
 8018984:	42ab      	cmp	r3, r5
 8018986:	dc26      	bgt.n	80189d6 <_printf_common+0x96>
 8018988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801898c:	1e13      	subs	r3, r2, #0
 801898e:	6822      	ldr	r2, [r4, #0]
 8018990:	bf18      	it	ne
 8018992:	2301      	movne	r3, #1
 8018994:	0692      	lsls	r2, r2, #26
 8018996:	d42b      	bmi.n	80189f0 <_printf_common+0xb0>
 8018998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801899c:	4649      	mov	r1, r9
 801899e:	4638      	mov	r0, r7
 80189a0:	47c0      	blx	r8
 80189a2:	3001      	adds	r0, #1
 80189a4:	d01e      	beq.n	80189e4 <_printf_common+0xa4>
 80189a6:	6823      	ldr	r3, [r4, #0]
 80189a8:	6922      	ldr	r2, [r4, #16]
 80189aa:	f003 0306 	and.w	r3, r3, #6
 80189ae:	2b04      	cmp	r3, #4
 80189b0:	bf02      	ittt	eq
 80189b2:	68e5      	ldreq	r5, [r4, #12]
 80189b4:	6833      	ldreq	r3, [r6, #0]
 80189b6:	1aed      	subeq	r5, r5, r3
 80189b8:	68a3      	ldr	r3, [r4, #8]
 80189ba:	bf0c      	ite	eq
 80189bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80189c0:	2500      	movne	r5, #0
 80189c2:	4293      	cmp	r3, r2
 80189c4:	bfc4      	itt	gt
 80189c6:	1a9b      	subgt	r3, r3, r2
 80189c8:	18ed      	addgt	r5, r5, r3
 80189ca:	2600      	movs	r6, #0
 80189cc:	341a      	adds	r4, #26
 80189ce:	42b5      	cmp	r5, r6
 80189d0:	d11a      	bne.n	8018a08 <_printf_common+0xc8>
 80189d2:	2000      	movs	r0, #0
 80189d4:	e008      	b.n	80189e8 <_printf_common+0xa8>
 80189d6:	2301      	movs	r3, #1
 80189d8:	4652      	mov	r2, sl
 80189da:	4649      	mov	r1, r9
 80189dc:	4638      	mov	r0, r7
 80189de:	47c0      	blx	r8
 80189e0:	3001      	adds	r0, #1
 80189e2:	d103      	bne.n	80189ec <_printf_common+0xac>
 80189e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189ec:	3501      	adds	r5, #1
 80189ee:	e7c6      	b.n	801897e <_printf_common+0x3e>
 80189f0:	18e1      	adds	r1, r4, r3
 80189f2:	1c5a      	adds	r2, r3, #1
 80189f4:	2030      	movs	r0, #48	; 0x30
 80189f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80189fa:	4422      	add	r2, r4
 80189fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018a04:	3302      	adds	r3, #2
 8018a06:	e7c7      	b.n	8018998 <_printf_common+0x58>
 8018a08:	2301      	movs	r3, #1
 8018a0a:	4622      	mov	r2, r4
 8018a0c:	4649      	mov	r1, r9
 8018a0e:	4638      	mov	r0, r7
 8018a10:	47c0      	blx	r8
 8018a12:	3001      	adds	r0, #1
 8018a14:	d0e6      	beq.n	80189e4 <_printf_common+0xa4>
 8018a16:	3601      	adds	r6, #1
 8018a18:	e7d9      	b.n	80189ce <_printf_common+0x8e>
	...

08018a1c <_printf_i>:
 8018a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018a20:	7e0f      	ldrb	r7, [r1, #24]
 8018a22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018a24:	2f78      	cmp	r7, #120	; 0x78
 8018a26:	4691      	mov	r9, r2
 8018a28:	4680      	mov	r8, r0
 8018a2a:	460c      	mov	r4, r1
 8018a2c:	469a      	mov	sl, r3
 8018a2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018a32:	d807      	bhi.n	8018a44 <_printf_i+0x28>
 8018a34:	2f62      	cmp	r7, #98	; 0x62
 8018a36:	d80a      	bhi.n	8018a4e <_printf_i+0x32>
 8018a38:	2f00      	cmp	r7, #0
 8018a3a:	f000 80d4 	beq.w	8018be6 <_printf_i+0x1ca>
 8018a3e:	2f58      	cmp	r7, #88	; 0x58
 8018a40:	f000 80c0 	beq.w	8018bc4 <_printf_i+0x1a8>
 8018a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018a4c:	e03a      	b.n	8018ac4 <_printf_i+0xa8>
 8018a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018a52:	2b15      	cmp	r3, #21
 8018a54:	d8f6      	bhi.n	8018a44 <_printf_i+0x28>
 8018a56:	a101      	add	r1, pc, #4	; (adr r1, 8018a5c <_printf_i+0x40>)
 8018a58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018a5c:	08018ab5 	.word	0x08018ab5
 8018a60:	08018ac9 	.word	0x08018ac9
 8018a64:	08018a45 	.word	0x08018a45
 8018a68:	08018a45 	.word	0x08018a45
 8018a6c:	08018a45 	.word	0x08018a45
 8018a70:	08018a45 	.word	0x08018a45
 8018a74:	08018ac9 	.word	0x08018ac9
 8018a78:	08018a45 	.word	0x08018a45
 8018a7c:	08018a45 	.word	0x08018a45
 8018a80:	08018a45 	.word	0x08018a45
 8018a84:	08018a45 	.word	0x08018a45
 8018a88:	08018bcd 	.word	0x08018bcd
 8018a8c:	08018af5 	.word	0x08018af5
 8018a90:	08018b87 	.word	0x08018b87
 8018a94:	08018a45 	.word	0x08018a45
 8018a98:	08018a45 	.word	0x08018a45
 8018a9c:	08018bef 	.word	0x08018bef
 8018aa0:	08018a45 	.word	0x08018a45
 8018aa4:	08018af5 	.word	0x08018af5
 8018aa8:	08018a45 	.word	0x08018a45
 8018aac:	08018a45 	.word	0x08018a45
 8018ab0:	08018b8f 	.word	0x08018b8f
 8018ab4:	682b      	ldr	r3, [r5, #0]
 8018ab6:	1d1a      	adds	r2, r3, #4
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	602a      	str	r2, [r5, #0]
 8018abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	e09f      	b.n	8018c08 <_printf_i+0x1ec>
 8018ac8:	6820      	ldr	r0, [r4, #0]
 8018aca:	682b      	ldr	r3, [r5, #0]
 8018acc:	0607      	lsls	r7, r0, #24
 8018ace:	f103 0104 	add.w	r1, r3, #4
 8018ad2:	6029      	str	r1, [r5, #0]
 8018ad4:	d501      	bpl.n	8018ada <_printf_i+0xbe>
 8018ad6:	681e      	ldr	r6, [r3, #0]
 8018ad8:	e003      	b.n	8018ae2 <_printf_i+0xc6>
 8018ada:	0646      	lsls	r6, r0, #25
 8018adc:	d5fb      	bpl.n	8018ad6 <_printf_i+0xba>
 8018ade:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018ae2:	2e00      	cmp	r6, #0
 8018ae4:	da03      	bge.n	8018aee <_printf_i+0xd2>
 8018ae6:	232d      	movs	r3, #45	; 0x2d
 8018ae8:	4276      	negs	r6, r6
 8018aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018aee:	485a      	ldr	r0, [pc, #360]	; (8018c58 <_printf_i+0x23c>)
 8018af0:	230a      	movs	r3, #10
 8018af2:	e012      	b.n	8018b1a <_printf_i+0xfe>
 8018af4:	682b      	ldr	r3, [r5, #0]
 8018af6:	6820      	ldr	r0, [r4, #0]
 8018af8:	1d19      	adds	r1, r3, #4
 8018afa:	6029      	str	r1, [r5, #0]
 8018afc:	0605      	lsls	r5, r0, #24
 8018afe:	d501      	bpl.n	8018b04 <_printf_i+0xe8>
 8018b00:	681e      	ldr	r6, [r3, #0]
 8018b02:	e002      	b.n	8018b0a <_printf_i+0xee>
 8018b04:	0641      	lsls	r1, r0, #25
 8018b06:	d5fb      	bpl.n	8018b00 <_printf_i+0xe4>
 8018b08:	881e      	ldrh	r6, [r3, #0]
 8018b0a:	4853      	ldr	r0, [pc, #332]	; (8018c58 <_printf_i+0x23c>)
 8018b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8018b0e:	bf0c      	ite	eq
 8018b10:	2308      	moveq	r3, #8
 8018b12:	230a      	movne	r3, #10
 8018b14:	2100      	movs	r1, #0
 8018b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018b1a:	6865      	ldr	r5, [r4, #4]
 8018b1c:	60a5      	str	r5, [r4, #8]
 8018b1e:	2d00      	cmp	r5, #0
 8018b20:	bfa2      	ittt	ge
 8018b22:	6821      	ldrge	r1, [r4, #0]
 8018b24:	f021 0104 	bicge.w	r1, r1, #4
 8018b28:	6021      	strge	r1, [r4, #0]
 8018b2a:	b90e      	cbnz	r6, 8018b30 <_printf_i+0x114>
 8018b2c:	2d00      	cmp	r5, #0
 8018b2e:	d04b      	beq.n	8018bc8 <_printf_i+0x1ac>
 8018b30:	4615      	mov	r5, r2
 8018b32:	fbb6 f1f3 	udiv	r1, r6, r3
 8018b36:	fb03 6711 	mls	r7, r3, r1, r6
 8018b3a:	5dc7      	ldrb	r7, [r0, r7]
 8018b3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018b40:	4637      	mov	r7, r6
 8018b42:	42bb      	cmp	r3, r7
 8018b44:	460e      	mov	r6, r1
 8018b46:	d9f4      	bls.n	8018b32 <_printf_i+0x116>
 8018b48:	2b08      	cmp	r3, #8
 8018b4a:	d10b      	bne.n	8018b64 <_printf_i+0x148>
 8018b4c:	6823      	ldr	r3, [r4, #0]
 8018b4e:	07de      	lsls	r6, r3, #31
 8018b50:	d508      	bpl.n	8018b64 <_printf_i+0x148>
 8018b52:	6923      	ldr	r3, [r4, #16]
 8018b54:	6861      	ldr	r1, [r4, #4]
 8018b56:	4299      	cmp	r1, r3
 8018b58:	bfde      	ittt	le
 8018b5a:	2330      	movle	r3, #48	; 0x30
 8018b5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018b60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018b64:	1b52      	subs	r2, r2, r5
 8018b66:	6122      	str	r2, [r4, #16]
 8018b68:	f8cd a000 	str.w	sl, [sp]
 8018b6c:	464b      	mov	r3, r9
 8018b6e:	aa03      	add	r2, sp, #12
 8018b70:	4621      	mov	r1, r4
 8018b72:	4640      	mov	r0, r8
 8018b74:	f7ff fee4 	bl	8018940 <_printf_common>
 8018b78:	3001      	adds	r0, #1
 8018b7a:	d14a      	bne.n	8018c12 <_printf_i+0x1f6>
 8018b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b80:	b004      	add	sp, #16
 8018b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b86:	6823      	ldr	r3, [r4, #0]
 8018b88:	f043 0320 	orr.w	r3, r3, #32
 8018b8c:	6023      	str	r3, [r4, #0]
 8018b8e:	4833      	ldr	r0, [pc, #204]	; (8018c5c <_printf_i+0x240>)
 8018b90:	2778      	movs	r7, #120	; 0x78
 8018b92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018b96:	6823      	ldr	r3, [r4, #0]
 8018b98:	6829      	ldr	r1, [r5, #0]
 8018b9a:	061f      	lsls	r7, r3, #24
 8018b9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8018ba0:	d402      	bmi.n	8018ba8 <_printf_i+0x18c>
 8018ba2:	065f      	lsls	r7, r3, #25
 8018ba4:	bf48      	it	mi
 8018ba6:	b2b6      	uxthmi	r6, r6
 8018ba8:	07df      	lsls	r7, r3, #31
 8018baa:	bf48      	it	mi
 8018bac:	f043 0320 	orrmi.w	r3, r3, #32
 8018bb0:	6029      	str	r1, [r5, #0]
 8018bb2:	bf48      	it	mi
 8018bb4:	6023      	strmi	r3, [r4, #0]
 8018bb6:	b91e      	cbnz	r6, 8018bc0 <_printf_i+0x1a4>
 8018bb8:	6823      	ldr	r3, [r4, #0]
 8018bba:	f023 0320 	bic.w	r3, r3, #32
 8018bbe:	6023      	str	r3, [r4, #0]
 8018bc0:	2310      	movs	r3, #16
 8018bc2:	e7a7      	b.n	8018b14 <_printf_i+0xf8>
 8018bc4:	4824      	ldr	r0, [pc, #144]	; (8018c58 <_printf_i+0x23c>)
 8018bc6:	e7e4      	b.n	8018b92 <_printf_i+0x176>
 8018bc8:	4615      	mov	r5, r2
 8018bca:	e7bd      	b.n	8018b48 <_printf_i+0x12c>
 8018bcc:	682b      	ldr	r3, [r5, #0]
 8018bce:	6826      	ldr	r6, [r4, #0]
 8018bd0:	6961      	ldr	r1, [r4, #20]
 8018bd2:	1d18      	adds	r0, r3, #4
 8018bd4:	6028      	str	r0, [r5, #0]
 8018bd6:	0635      	lsls	r5, r6, #24
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	d501      	bpl.n	8018be0 <_printf_i+0x1c4>
 8018bdc:	6019      	str	r1, [r3, #0]
 8018bde:	e002      	b.n	8018be6 <_printf_i+0x1ca>
 8018be0:	0670      	lsls	r0, r6, #25
 8018be2:	d5fb      	bpl.n	8018bdc <_printf_i+0x1c0>
 8018be4:	8019      	strh	r1, [r3, #0]
 8018be6:	2300      	movs	r3, #0
 8018be8:	6123      	str	r3, [r4, #16]
 8018bea:	4615      	mov	r5, r2
 8018bec:	e7bc      	b.n	8018b68 <_printf_i+0x14c>
 8018bee:	682b      	ldr	r3, [r5, #0]
 8018bf0:	1d1a      	adds	r2, r3, #4
 8018bf2:	602a      	str	r2, [r5, #0]
 8018bf4:	681d      	ldr	r5, [r3, #0]
 8018bf6:	6862      	ldr	r2, [r4, #4]
 8018bf8:	2100      	movs	r1, #0
 8018bfa:	4628      	mov	r0, r5
 8018bfc:	f7e7 fb00 	bl	8000200 <memchr>
 8018c00:	b108      	cbz	r0, 8018c06 <_printf_i+0x1ea>
 8018c02:	1b40      	subs	r0, r0, r5
 8018c04:	6060      	str	r0, [r4, #4]
 8018c06:	6863      	ldr	r3, [r4, #4]
 8018c08:	6123      	str	r3, [r4, #16]
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c10:	e7aa      	b.n	8018b68 <_printf_i+0x14c>
 8018c12:	6923      	ldr	r3, [r4, #16]
 8018c14:	462a      	mov	r2, r5
 8018c16:	4649      	mov	r1, r9
 8018c18:	4640      	mov	r0, r8
 8018c1a:	47d0      	blx	sl
 8018c1c:	3001      	adds	r0, #1
 8018c1e:	d0ad      	beq.n	8018b7c <_printf_i+0x160>
 8018c20:	6823      	ldr	r3, [r4, #0]
 8018c22:	079b      	lsls	r3, r3, #30
 8018c24:	d413      	bmi.n	8018c4e <_printf_i+0x232>
 8018c26:	68e0      	ldr	r0, [r4, #12]
 8018c28:	9b03      	ldr	r3, [sp, #12]
 8018c2a:	4298      	cmp	r0, r3
 8018c2c:	bfb8      	it	lt
 8018c2e:	4618      	movlt	r0, r3
 8018c30:	e7a6      	b.n	8018b80 <_printf_i+0x164>
 8018c32:	2301      	movs	r3, #1
 8018c34:	4632      	mov	r2, r6
 8018c36:	4649      	mov	r1, r9
 8018c38:	4640      	mov	r0, r8
 8018c3a:	47d0      	blx	sl
 8018c3c:	3001      	adds	r0, #1
 8018c3e:	d09d      	beq.n	8018b7c <_printf_i+0x160>
 8018c40:	3501      	adds	r5, #1
 8018c42:	68e3      	ldr	r3, [r4, #12]
 8018c44:	9903      	ldr	r1, [sp, #12]
 8018c46:	1a5b      	subs	r3, r3, r1
 8018c48:	42ab      	cmp	r3, r5
 8018c4a:	dcf2      	bgt.n	8018c32 <_printf_i+0x216>
 8018c4c:	e7eb      	b.n	8018c26 <_printf_i+0x20a>
 8018c4e:	2500      	movs	r5, #0
 8018c50:	f104 0619 	add.w	r6, r4, #25
 8018c54:	e7f5      	b.n	8018c42 <_printf_i+0x226>
 8018c56:	bf00      	nop
 8018c58:	08019e21 	.word	0x08019e21
 8018c5c:	08019e32 	.word	0x08019e32

08018c60 <__sflush_r>:
 8018c60:	898a      	ldrh	r2, [r1, #12]
 8018c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c66:	4605      	mov	r5, r0
 8018c68:	0710      	lsls	r0, r2, #28
 8018c6a:	460c      	mov	r4, r1
 8018c6c:	d458      	bmi.n	8018d20 <__sflush_r+0xc0>
 8018c6e:	684b      	ldr	r3, [r1, #4]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	dc05      	bgt.n	8018c80 <__sflush_r+0x20>
 8018c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	dc02      	bgt.n	8018c80 <__sflush_r+0x20>
 8018c7a:	2000      	movs	r0, #0
 8018c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c82:	2e00      	cmp	r6, #0
 8018c84:	d0f9      	beq.n	8018c7a <__sflush_r+0x1a>
 8018c86:	2300      	movs	r3, #0
 8018c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018c8c:	682f      	ldr	r7, [r5, #0]
 8018c8e:	6a21      	ldr	r1, [r4, #32]
 8018c90:	602b      	str	r3, [r5, #0]
 8018c92:	d032      	beq.n	8018cfa <__sflush_r+0x9a>
 8018c94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018c96:	89a3      	ldrh	r3, [r4, #12]
 8018c98:	075a      	lsls	r2, r3, #29
 8018c9a:	d505      	bpl.n	8018ca8 <__sflush_r+0x48>
 8018c9c:	6863      	ldr	r3, [r4, #4]
 8018c9e:	1ac0      	subs	r0, r0, r3
 8018ca0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018ca2:	b10b      	cbz	r3, 8018ca8 <__sflush_r+0x48>
 8018ca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018ca6:	1ac0      	subs	r0, r0, r3
 8018ca8:	2300      	movs	r3, #0
 8018caa:	4602      	mov	r2, r0
 8018cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018cae:	6a21      	ldr	r1, [r4, #32]
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	47b0      	blx	r6
 8018cb4:	1c43      	adds	r3, r0, #1
 8018cb6:	89a3      	ldrh	r3, [r4, #12]
 8018cb8:	d106      	bne.n	8018cc8 <__sflush_r+0x68>
 8018cba:	6829      	ldr	r1, [r5, #0]
 8018cbc:	291d      	cmp	r1, #29
 8018cbe:	d82b      	bhi.n	8018d18 <__sflush_r+0xb8>
 8018cc0:	4a29      	ldr	r2, [pc, #164]	; (8018d68 <__sflush_r+0x108>)
 8018cc2:	410a      	asrs	r2, r1
 8018cc4:	07d6      	lsls	r6, r2, #31
 8018cc6:	d427      	bmi.n	8018d18 <__sflush_r+0xb8>
 8018cc8:	2200      	movs	r2, #0
 8018cca:	6062      	str	r2, [r4, #4]
 8018ccc:	04d9      	lsls	r1, r3, #19
 8018cce:	6922      	ldr	r2, [r4, #16]
 8018cd0:	6022      	str	r2, [r4, #0]
 8018cd2:	d504      	bpl.n	8018cde <__sflush_r+0x7e>
 8018cd4:	1c42      	adds	r2, r0, #1
 8018cd6:	d101      	bne.n	8018cdc <__sflush_r+0x7c>
 8018cd8:	682b      	ldr	r3, [r5, #0]
 8018cda:	b903      	cbnz	r3, 8018cde <__sflush_r+0x7e>
 8018cdc:	6560      	str	r0, [r4, #84]	; 0x54
 8018cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ce0:	602f      	str	r7, [r5, #0]
 8018ce2:	2900      	cmp	r1, #0
 8018ce4:	d0c9      	beq.n	8018c7a <__sflush_r+0x1a>
 8018ce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018cea:	4299      	cmp	r1, r3
 8018cec:	d002      	beq.n	8018cf4 <__sflush_r+0x94>
 8018cee:	4628      	mov	r0, r5
 8018cf0:	f7ff fb36 	bl	8018360 <_free_r>
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	6360      	str	r0, [r4, #52]	; 0x34
 8018cf8:	e7c0      	b.n	8018c7c <__sflush_r+0x1c>
 8018cfa:	2301      	movs	r3, #1
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	47b0      	blx	r6
 8018d00:	1c41      	adds	r1, r0, #1
 8018d02:	d1c8      	bne.n	8018c96 <__sflush_r+0x36>
 8018d04:	682b      	ldr	r3, [r5, #0]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d0c5      	beq.n	8018c96 <__sflush_r+0x36>
 8018d0a:	2b1d      	cmp	r3, #29
 8018d0c:	d001      	beq.n	8018d12 <__sflush_r+0xb2>
 8018d0e:	2b16      	cmp	r3, #22
 8018d10:	d101      	bne.n	8018d16 <__sflush_r+0xb6>
 8018d12:	602f      	str	r7, [r5, #0]
 8018d14:	e7b1      	b.n	8018c7a <__sflush_r+0x1a>
 8018d16:	89a3      	ldrh	r3, [r4, #12]
 8018d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d1c:	81a3      	strh	r3, [r4, #12]
 8018d1e:	e7ad      	b.n	8018c7c <__sflush_r+0x1c>
 8018d20:	690f      	ldr	r7, [r1, #16]
 8018d22:	2f00      	cmp	r7, #0
 8018d24:	d0a9      	beq.n	8018c7a <__sflush_r+0x1a>
 8018d26:	0793      	lsls	r3, r2, #30
 8018d28:	680e      	ldr	r6, [r1, #0]
 8018d2a:	bf08      	it	eq
 8018d2c:	694b      	ldreq	r3, [r1, #20]
 8018d2e:	600f      	str	r7, [r1, #0]
 8018d30:	bf18      	it	ne
 8018d32:	2300      	movne	r3, #0
 8018d34:	eba6 0807 	sub.w	r8, r6, r7
 8018d38:	608b      	str	r3, [r1, #8]
 8018d3a:	f1b8 0f00 	cmp.w	r8, #0
 8018d3e:	dd9c      	ble.n	8018c7a <__sflush_r+0x1a>
 8018d40:	6a21      	ldr	r1, [r4, #32]
 8018d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018d44:	4643      	mov	r3, r8
 8018d46:	463a      	mov	r2, r7
 8018d48:	4628      	mov	r0, r5
 8018d4a:	47b0      	blx	r6
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	dc06      	bgt.n	8018d5e <__sflush_r+0xfe>
 8018d50:	89a3      	ldrh	r3, [r4, #12]
 8018d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d56:	81a3      	strh	r3, [r4, #12]
 8018d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d5c:	e78e      	b.n	8018c7c <__sflush_r+0x1c>
 8018d5e:	4407      	add	r7, r0
 8018d60:	eba8 0800 	sub.w	r8, r8, r0
 8018d64:	e7e9      	b.n	8018d3a <__sflush_r+0xda>
 8018d66:	bf00      	nop
 8018d68:	dfbffffe 	.word	0xdfbffffe

08018d6c <_fflush_r>:
 8018d6c:	b538      	push	{r3, r4, r5, lr}
 8018d6e:	690b      	ldr	r3, [r1, #16]
 8018d70:	4605      	mov	r5, r0
 8018d72:	460c      	mov	r4, r1
 8018d74:	b913      	cbnz	r3, 8018d7c <_fflush_r+0x10>
 8018d76:	2500      	movs	r5, #0
 8018d78:	4628      	mov	r0, r5
 8018d7a:	bd38      	pop	{r3, r4, r5, pc}
 8018d7c:	b118      	cbz	r0, 8018d86 <_fflush_r+0x1a>
 8018d7e:	6a03      	ldr	r3, [r0, #32]
 8018d80:	b90b      	cbnz	r3, 8018d86 <_fflush_r+0x1a>
 8018d82:	f7ff f8db 	bl	8017f3c <__sinit>
 8018d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d0f3      	beq.n	8018d76 <_fflush_r+0xa>
 8018d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018d90:	07d0      	lsls	r0, r2, #31
 8018d92:	d404      	bmi.n	8018d9e <_fflush_r+0x32>
 8018d94:	0599      	lsls	r1, r3, #22
 8018d96:	d402      	bmi.n	8018d9e <_fflush_r+0x32>
 8018d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d9a:	f7ff fa9f 	bl	80182dc <__retarget_lock_acquire_recursive>
 8018d9e:	4628      	mov	r0, r5
 8018da0:	4621      	mov	r1, r4
 8018da2:	f7ff ff5d 	bl	8018c60 <__sflush_r>
 8018da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018da8:	07da      	lsls	r2, r3, #31
 8018daa:	4605      	mov	r5, r0
 8018dac:	d4e4      	bmi.n	8018d78 <_fflush_r+0xc>
 8018dae:	89a3      	ldrh	r3, [r4, #12]
 8018db0:	059b      	lsls	r3, r3, #22
 8018db2:	d4e1      	bmi.n	8018d78 <_fflush_r+0xc>
 8018db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018db6:	f7ff fa92 	bl	80182de <__retarget_lock_release_recursive>
 8018dba:	e7dd      	b.n	8018d78 <_fflush_r+0xc>

08018dbc <fiprintf>:
 8018dbc:	b40e      	push	{r1, r2, r3}
 8018dbe:	b503      	push	{r0, r1, lr}
 8018dc0:	4601      	mov	r1, r0
 8018dc2:	ab03      	add	r3, sp, #12
 8018dc4:	4805      	ldr	r0, [pc, #20]	; (8018ddc <fiprintf+0x20>)
 8018dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dca:	6800      	ldr	r0, [r0, #0]
 8018dcc:	9301      	str	r3, [sp, #4]
 8018dce:	f7ff fc9d 	bl	801870c <_vfiprintf_r>
 8018dd2:	b002      	add	sp, #8
 8018dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018dd8:	b003      	add	sp, #12
 8018dda:	4770      	bx	lr
 8018ddc:	2000012c 	.word	0x2000012c

08018de0 <__swbuf_r>:
 8018de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018de2:	460e      	mov	r6, r1
 8018de4:	4614      	mov	r4, r2
 8018de6:	4605      	mov	r5, r0
 8018de8:	b118      	cbz	r0, 8018df2 <__swbuf_r+0x12>
 8018dea:	6a03      	ldr	r3, [r0, #32]
 8018dec:	b90b      	cbnz	r3, 8018df2 <__swbuf_r+0x12>
 8018dee:	f7ff f8a5 	bl	8017f3c <__sinit>
 8018df2:	69a3      	ldr	r3, [r4, #24]
 8018df4:	60a3      	str	r3, [r4, #8]
 8018df6:	89a3      	ldrh	r3, [r4, #12]
 8018df8:	071a      	lsls	r2, r3, #28
 8018dfa:	d525      	bpl.n	8018e48 <__swbuf_r+0x68>
 8018dfc:	6923      	ldr	r3, [r4, #16]
 8018dfe:	b31b      	cbz	r3, 8018e48 <__swbuf_r+0x68>
 8018e00:	6823      	ldr	r3, [r4, #0]
 8018e02:	6922      	ldr	r2, [r4, #16]
 8018e04:	1a98      	subs	r0, r3, r2
 8018e06:	6963      	ldr	r3, [r4, #20]
 8018e08:	b2f6      	uxtb	r6, r6
 8018e0a:	4283      	cmp	r3, r0
 8018e0c:	4637      	mov	r7, r6
 8018e0e:	dc04      	bgt.n	8018e1a <__swbuf_r+0x3a>
 8018e10:	4621      	mov	r1, r4
 8018e12:	4628      	mov	r0, r5
 8018e14:	f7ff ffaa 	bl	8018d6c <_fflush_r>
 8018e18:	b9e0      	cbnz	r0, 8018e54 <__swbuf_r+0x74>
 8018e1a:	68a3      	ldr	r3, [r4, #8]
 8018e1c:	3b01      	subs	r3, #1
 8018e1e:	60a3      	str	r3, [r4, #8]
 8018e20:	6823      	ldr	r3, [r4, #0]
 8018e22:	1c5a      	adds	r2, r3, #1
 8018e24:	6022      	str	r2, [r4, #0]
 8018e26:	701e      	strb	r6, [r3, #0]
 8018e28:	6962      	ldr	r2, [r4, #20]
 8018e2a:	1c43      	adds	r3, r0, #1
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d004      	beq.n	8018e3a <__swbuf_r+0x5a>
 8018e30:	89a3      	ldrh	r3, [r4, #12]
 8018e32:	07db      	lsls	r3, r3, #31
 8018e34:	d506      	bpl.n	8018e44 <__swbuf_r+0x64>
 8018e36:	2e0a      	cmp	r6, #10
 8018e38:	d104      	bne.n	8018e44 <__swbuf_r+0x64>
 8018e3a:	4621      	mov	r1, r4
 8018e3c:	4628      	mov	r0, r5
 8018e3e:	f7ff ff95 	bl	8018d6c <_fflush_r>
 8018e42:	b938      	cbnz	r0, 8018e54 <__swbuf_r+0x74>
 8018e44:	4638      	mov	r0, r7
 8018e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e48:	4621      	mov	r1, r4
 8018e4a:	4628      	mov	r0, r5
 8018e4c:	f000 f806 	bl	8018e5c <__swsetup_r>
 8018e50:	2800      	cmp	r0, #0
 8018e52:	d0d5      	beq.n	8018e00 <__swbuf_r+0x20>
 8018e54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018e58:	e7f4      	b.n	8018e44 <__swbuf_r+0x64>
	...

08018e5c <__swsetup_r>:
 8018e5c:	b538      	push	{r3, r4, r5, lr}
 8018e5e:	4b2a      	ldr	r3, [pc, #168]	; (8018f08 <__swsetup_r+0xac>)
 8018e60:	4605      	mov	r5, r0
 8018e62:	6818      	ldr	r0, [r3, #0]
 8018e64:	460c      	mov	r4, r1
 8018e66:	b118      	cbz	r0, 8018e70 <__swsetup_r+0x14>
 8018e68:	6a03      	ldr	r3, [r0, #32]
 8018e6a:	b90b      	cbnz	r3, 8018e70 <__swsetup_r+0x14>
 8018e6c:	f7ff f866 	bl	8017f3c <__sinit>
 8018e70:	89a3      	ldrh	r3, [r4, #12]
 8018e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e76:	0718      	lsls	r0, r3, #28
 8018e78:	d422      	bmi.n	8018ec0 <__swsetup_r+0x64>
 8018e7a:	06d9      	lsls	r1, r3, #27
 8018e7c:	d407      	bmi.n	8018e8e <__swsetup_r+0x32>
 8018e7e:	2309      	movs	r3, #9
 8018e80:	602b      	str	r3, [r5, #0]
 8018e82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018e86:	81a3      	strh	r3, [r4, #12]
 8018e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e8c:	e034      	b.n	8018ef8 <__swsetup_r+0x9c>
 8018e8e:	0758      	lsls	r0, r3, #29
 8018e90:	d512      	bpl.n	8018eb8 <__swsetup_r+0x5c>
 8018e92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e94:	b141      	cbz	r1, 8018ea8 <__swsetup_r+0x4c>
 8018e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e9a:	4299      	cmp	r1, r3
 8018e9c:	d002      	beq.n	8018ea4 <__swsetup_r+0x48>
 8018e9e:	4628      	mov	r0, r5
 8018ea0:	f7ff fa5e 	bl	8018360 <_free_r>
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	6363      	str	r3, [r4, #52]	; 0x34
 8018ea8:	89a3      	ldrh	r3, [r4, #12]
 8018eaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018eae:	81a3      	strh	r3, [r4, #12]
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	6063      	str	r3, [r4, #4]
 8018eb4:	6923      	ldr	r3, [r4, #16]
 8018eb6:	6023      	str	r3, [r4, #0]
 8018eb8:	89a3      	ldrh	r3, [r4, #12]
 8018eba:	f043 0308 	orr.w	r3, r3, #8
 8018ebe:	81a3      	strh	r3, [r4, #12]
 8018ec0:	6923      	ldr	r3, [r4, #16]
 8018ec2:	b94b      	cbnz	r3, 8018ed8 <__swsetup_r+0x7c>
 8018ec4:	89a3      	ldrh	r3, [r4, #12]
 8018ec6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ece:	d003      	beq.n	8018ed8 <__swsetup_r+0x7c>
 8018ed0:	4621      	mov	r1, r4
 8018ed2:	4628      	mov	r0, r5
 8018ed4:	f000 f847 	bl	8018f66 <__smakebuf_r>
 8018ed8:	89a0      	ldrh	r0, [r4, #12]
 8018eda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018ede:	f010 0301 	ands.w	r3, r0, #1
 8018ee2:	d00a      	beq.n	8018efa <__swsetup_r+0x9e>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	60a3      	str	r3, [r4, #8]
 8018ee8:	6963      	ldr	r3, [r4, #20]
 8018eea:	425b      	negs	r3, r3
 8018eec:	61a3      	str	r3, [r4, #24]
 8018eee:	6923      	ldr	r3, [r4, #16]
 8018ef0:	b943      	cbnz	r3, 8018f04 <__swsetup_r+0xa8>
 8018ef2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018ef6:	d1c4      	bne.n	8018e82 <__swsetup_r+0x26>
 8018ef8:	bd38      	pop	{r3, r4, r5, pc}
 8018efa:	0781      	lsls	r1, r0, #30
 8018efc:	bf58      	it	pl
 8018efe:	6963      	ldrpl	r3, [r4, #20]
 8018f00:	60a3      	str	r3, [r4, #8]
 8018f02:	e7f4      	b.n	8018eee <__swsetup_r+0x92>
 8018f04:	2000      	movs	r0, #0
 8018f06:	e7f7      	b.n	8018ef8 <__swsetup_r+0x9c>
 8018f08:	2000012c 	.word	0x2000012c

08018f0c <abort>:
 8018f0c:	b508      	push	{r3, lr}
 8018f0e:	2006      	movs	r0, #6
 8018f10:	f000 f88e 	bl	8019030 <raise>
 8018f14:	2001      	movs	r0, #1
 8018f16:	f7e8 fddf 	bl	8001ad8 <_exit>

08018f1a <__swhatbuf_r>:
 8018f1a:	b570      	push	{r4, r5, r6, lr}
 8018f1c:	460c      	mov	r4, r1
 8018f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f22:	2900      	cmp	r1, #0
 8018f24:	b096      	sub	sp, #88	; 0x58
 8018f26:	4615      	mov	r5, r2
 8018f28:	461e      	mov	r6, r3
 8018f2a:	da0d      	bge.n	8018f48 <__swhatbuf_r+0x2e>
 8018f2c:	89a3      	ldrh	r3, [r4, #12]
 8018f2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018f32:	f04f 0100 	mov.w	r1, #0
 8018f36:	bf0c      	ite	eq
 8018f38:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018f3c:	2340      	movne	r3, #64	; 0x40
 8018f3e:	2000      	movs	r0, #0
 8018f40:	6031      	str	r1, [r6, #0]
 8018f42:	602b      	str	r3, [r5, #0]
 8018f44:	b016      	add	sp, #88	; 0x58
 8018f46:	bd70      	pop	{r4, r5, r6, pc}
 8018f48:	466a      	mov	r2, sp
 8018f4a:	f000 f879 	bl	8019040 <_fstat_r>
 8018f4e:	2800      	cmp	r0, #0
 8018f50:	dbec      	blt.n	8018f2c <__swhatbuf_r+0x12>
 8018f52:	9901      	ldr	r1, [sp, #4]
 8018f54:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018f58:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018f5c:	4259      	negs	r1, r3
 8018f5e:	4159      	adcs	r1, r3
 8018f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018f64:	e7eb      	b.n	8018f3e <__swhatbuf_r+0x24>

08018f66 <__smakebuf_r>:
 8018f66:	898b      	ldrh	r3, [r1, #12]
 8018f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f6a:	079d      	lsls	r5, r3, #30
 8018f6c:	4606      	mov	r6, r0
 8018f6e:	460c      	mov	r4, r1
 8018f70:	d507      	bpl.n	8018f82 <__smakebuf_r+0x1c>
 8018f72:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f76:	6023      	str	r3, [r4, #0]
 8018f78:	6123      	str	r3, [r4, #16]
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	6163      	str	r3, [r4, #20]
 8018f7e:	b002      	add	sp, #8
 8018f80:	bd70      	pop	{r4, r5, r6, pc}
 8018f82:	ab01      	add	r3, sp, #4
 8018f84:	466a      	mov	r2, sp
 8018f86:	f7ff ffc8 	bl	8018f1a <__swhatbuf_r>
 8018f8a:	9900      	ldr	r1, [sp, #0]
 8018f8c:	4605      	mov	r5, r0
 8018f8e:	4630      	mov	r0, r6
 8018f90:	f7fe fdae 	bl	8017af0 <_malloc_r>
 8018f94:	b948      	cbnz	r0, 8018faa <__smakebuf_r+0x44>
 8018f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f9a:	059a      	lsls	r2, r3, #22
 8018f9c:	d4ef      	bmi.n	8018f7e <__smakebuf_r+0x18>
 8018f9e:	f023 0303 	bic.w	r3, r3, #3
 8018fa2:	f043 0302 	orr.w	r3, r3, #2
 8018fa6:	81a3      	strh	r3, [r4, #12]
 8018fa8:	e7e3      	b.n	8018f72 <__smakebuf_r+0xc>
 8018faa:	89a3      	ldrh	r3, [r4, #12]
 8018fac:	6020      	str	r0, [r4, #0]
 8018fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fb2:	81a3      	strh	r3, [r4, #12]
 8018fb4:	9b00      	ldr	r3, [sp, #0]
 8018fb6:	6163      	str	r3, [r4, #20]
 8018fb8:	9b01      	ldr	r3, [sp, #4]
 8018fba:	6120      	str	r0, [r4, #16]
 8018fbc:	b15b      	cbz	r3, 8018fd6 <__smakebuf_r+0x70>
 8018fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018fc2:	4630      	mov	r0, r6
 8018fc4:	f000 f84e 	bl	8019064 <_isatty_r>
 8018fc8:	b128      	cbz	r0, 8018fd6 <__smakebuf_r+0x70>
 8018fca:	89a3      	ldrh	r3, [r4, #12]
 8018fcc:	f023 0303 	bic.w	r3, r3, #3
 8018fd0:	f043 0301 	orr.w	r3, r3, #1
 8018fd4:	81a3      	strh	r3, [r4, #12]
 8018fd6:	89a3      	ldrh	r3, [r4, #12]
 8018fd8:	431d      	orrs	r5, r3
 8018fda:	81a5      	strh	r5, [r4, #12]
 8018fdc:	e7cf      	b.n	8018f7e <__smakebuf_r+0x18>

08018fde <_raise_r>:
 8018fde:	291f      	cmp	r1, #31
 8018fe0:	b538      	push	{r3, r4, r5, lr}
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	460d      	mov	r5, r1
 8018fe6:	d904      	bls.n	8018ff2 <_raise_r+0x14>
 8018fe8:	2316      	movs	r3, #22
 8018fea:	6003      	str	r3, [r0, #0]
 8018fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ff0:	bd38      	pop	{r3, r4, r5, pc}
 8018ff2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018ff4:	b112      	cbz	r2, 8018ffc <_raise_r+0x1e>
 8018ff6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ffa:	b94b      	cbnz	r3, 8019010 <_raise_r+0x32>
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f000 f853 	bl	80190a8 <_getpid_r>
 8019002:	462a      	mov	r2, r5
 8019004:	4601      	mov	r1, r0
 8019006:	4620      	mov	r0, r4
 8019008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801900c:	f000 b83a 	b.w	8019084 <_kill_r>
 8019010:	2b01      	cmp	r3, #1
 8019012:	d00a      	beq.n	801902a <_raise_r+0x4c>
 8019014:	1c59      	adds	r1, r3, #1
 8019016:	d103      	bne.n	8019020 <_raise_r+0x42>
 8019018:	2316      	movs	r3, #22
 801901a:	6003      	str	r3, [r0, #0]
 801901c:	2001      	movs	r0, #1
 801901e:	e7e7      	b.n	8018ff0 <_raise_r+0x12>
 8019020:	2400      	movs	r4, #0
 8019022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019026:	4628      	mov	r0, r5
 8019028:	4798      	blx	r3
 801902a:	2000      	movs	r0, #0
 801902c:	e7e0      	b.n	8018ff0 <_raise_r+0x12>
	...

08019030 <raise>:
 8019030:	4b02      	ldr	r3, [pc, #8]	; (801903c <raise+0xc>)
 8019032:	4601      	mov	r1, r0
 8019034:	6818      	ldr	r0, [r3, #0]
 8019036:	f7ff bfd2 	b.w	8018fde <_raise_r>
 801903a:	bf00      	nop
 801903c:	2000012c 	.word	0x2000012c

08019040 <_fstat_r>:
 8019040:	b538      	push	{r3, r4, r5, lr}
 8019042:	4d07      	ldr	r5, [pc, #28]	; (8019060 <_fstat_r+0x20>)
 8019044:	2300      	movs	r3, #0
 8019046:	4604      	mov	r4, r0
 8019048:	4608      	mov	r0, r1
 801904a:	4611      	mov	r1, r2
 801904c:	602b      	str	r3, [r5, #0]
 801904e:	f7e8 fd92 	bl	8001b76 <_fstat>
 8019052:	1c43      	adds	r3, r0, #1
 8019054:	d102      	bne.n	801905c <_fstat_r+0x1c>
 8019056:	682b      	ldr	r3, [r5, #0]
 8019058:	b103      	cbz	r3, 801905c <_fstat_r+0x1c>
 801905a:	6023      	str	r3, [r4, #0]
 801905c:	bd38      	pop	{r3, r4, r5, pc}
 801905e:	bf00      	nop
 8019060:	2000e544 	.word	0x2000e544

08019064 <_isatty_r>:
 8019064:	b538      	push	{r3, r4, r5, lr}
 8019066:	4d06      	ldr	r5, [pc, #24]	; (8019080 <_isatty_r+0x1c>)
 8019068:	2300      	movs	r3, #0
 801906a:	4604      	mov	r4, r0
 801906c:	4608      	mov	r0, r1
 801906e:	602b      	str	r3, [r5, #0]
 8019070:	f7e8 fd91 	bl	8001b96 <_isatty>
 8019074:	1c43      	adds	r3, r0, #1
 8019076:	d102      	bne.n	801907e <_isatty_r+0x1a>
 8019078:	682b      	ldr	r3, [r5, #0]
 801907a:	b103      	cbz	r3, 801907e <_isatty_r+0x1a>
 801907c:	6023      	str	r3, [r4, #0]
 801907e:	bd38      	pop	{r3, r4, r5, pc}
 8019080:	2000e544 	.word	0x2000e544

08019084 <_kill_r>:
 8019084:	b538      	push	{r3, r4, r5, lr}
 8019086:	4d07      	ldr	r5, [pc, #28]	; (80190a4 <_kill_r+0x20>)
 8019088:	2300      	movs	r3, #0
 801908a:	4604      	mov	r4, r0
 801908c:	4608      	mov	r0, r1
 801908e:	4611      	mov	r1, r2
 8019090:	602b      	str	r3, [r5, #0]
 8019092:	f7e8 fd11 	bl	8001ab8 <_kill>
 8019096:	1c43      	adds	r3, r0, #1
 8019098:	d102      	bne.n	80190a0 <_kill_r+0x1c>
 801909a:	682b      	ldr	r3, [r5, #0]
 801909c:	b103      	cbz	r3, 80190a0 <_kill_r+0x1c>
 801909e:	6023      	str	r3, [r4, #0]
 80190a0:	bd38      	pop	{r3, r4, r5, pc}
 80190a2:	bf00      	nop
 80190a4:	2000e544 	.word	0x2000e544

080190a8 <_getpid_r>:
 80190a8:	f7e8 bcfe 	b.w	8001aa8 <_getpid>

080190ac <_init>:
 80190ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190ae:	bf00      	nop
 80190b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190b2:	bc08      	pop	{r3}
 80190b4:	469e      	mov	lr, r3
 80190b6:	4770      	bx	lr

080190b8 <_fini>:
 80190b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190ba:	bf00      	nop
 80190bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190be:	bc08      	pop	{r3}
 80190c0:	469e      	mov	lr, r3
 80190c2:	4770      	bx	lr
