
Bts7960_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000865c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008808  08008808  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008810  08008810  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000a34  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab0  20000ab0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b030  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042ce  00000000  00000000  0003b11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001810  00000000  00000000  0003f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000129e  00000000  00000000  00040c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025c40  00000000  00000000  00041e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e943  00000000  00000000  00067ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0278  00000000  00000000  00086421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006988  00000000  00000000  0016669c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0016d024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087cc 	.word	0x080087cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080087cc 	.word	0x080087cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Read_ADC>:

TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */
int16_t Read_ADC()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80004c8:	480a      	ldr	r0, [pc, #40]	; (80004f4 <Read_ADC+0x30>)
 80004ca:	f000 fef3 	bl	80012b4 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000)==HAL_OK)
 80004ce:	490a      	ldr	r1, [pc, #40]	; (80004f8 <Read_ADC+0x34>)
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <Read_ADC+0x30>)
 80004d2:	f000 ffc1 	bl	8001458 <HAL_ADC_PollForConversion>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d106      	bne.n	80004ea <Read_ADC+0x26>
		adc_value = HAL_ADC_GetValue(&hadc1);
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <Read_ADC+0x30>)
 80004de:	f001 f846 	bl	800156e <HAL_ADC_GetValue>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <Read_ADC+0x38>)
 80004e8:	801a      	strh	r2, [r3, #0]
	return adc_value;
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <Read_ADC+0x38>)
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	b21b      	sxth	r3, r3
	HAL_ADC_Stop(&hadc1);
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000009c 	.word	0x2000009c
 80004f8:	000186a0 	.word	0x000186a0
 80004fc:	20000098 	.word	0x20000098

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fdfb 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f839 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fa37 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 8000512:	f000 fa15 	bl	8000940 <MX_DMA_Init>
  MX_I2C1_Init();
 8000516:	f000 f8ef 	bl	80006f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800051a:	f000 f91b 	bl	8000754 <MX_I2S3_Init>
  MX_SPI1_Init();
 800051e:	f000 f949 	bl	80007b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000522:	f007 fd57 	bl	8007fd4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000526:	f000 f895 	bl	8000654 <MX_ADC1_Init>
  MX_TIM1_Init();
 800052a:	f000 f979 	bl	8000820 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800052e:	2100      	movs	r1, #0
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <main+0x7c>)
 8000532:	f005 f867 	bl	8005604 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000536:	2104      	movs	r1, #4
 8000538:	4810      	ldr	r0, [pc, #64]	; (800057c <main+0x7c>)
 800053a:	f005 f863 	bl	8005604 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
    int sensorValue = Read_ADC();
 800053e:	f7ff ffc1 	bl	80004c4 <Read_ADC>
 8000542:	4603      	mov	r3, r0
 8000544:	60fb      	str	r3, [r7, #12]
    if (sensorValue < 2047)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800054c:	4293      	cmp	r3, r2
 800054e:	dc0a      	bgt.n	8000566 <main+0x66>
     {
     // reverse rotation
     int reversePWM = -(sensorValue - 2047) *2;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8000556:	3307      	adds	r3, #7
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
     //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);  //LPWM
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,reversePWM);  //RPWM
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <main+0x7c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	639a      	str	r2, [r3, #56]	; 0x38
 8000564:	e7eb      	b.n	800053e <main+0x3e>

     }
    else
     {
     // forward rotation
     int forwardPWM = (sensorValue - 2046) * 2;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f2a3 73fe 	subw	r3, r3, #2046	; 0x7fe
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,forwardPWM);  //LPWM
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <main+0x7c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68ba      	ldr	r2, [r7, #8]
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000578:	e7e1      	b.n	800053e <main+0x3e>
 800057a:	bf00      	nop
 800057c:	20000238 	.word	0x20000238

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 f88c 	bl	80086ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f960 	bl	80048cc <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 fab3 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2105      	movs	r1, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f004 fbc1 	bl	8004dbc <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 fa9c 	bl	8000b7c <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC1_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC1_Init+0x98>)
 800066e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000672:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_ADC1_Init+0x98>)
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xa0>)
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b6:	f000 fdb9 	bl	800122c <HAL_ADC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c0:	f000 fa5c 	bl	8000b7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_ADC1_Init+0x98>)
 80006d6:	f000 ff57 	bl	8001588 <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 fa4c 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000009c 	.word	0x2000009c
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f003 fae5 	bl	8003d04 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 fa1c 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000144 	.word	0x20000144
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_I2S3_Init+0x54>)
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <MX_I2S3_Init+0x58>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_I2S3_Init+0x54>)
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <MX_I2S3_Init+0x5c>)
 800077e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2S3_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000794:	f003 fbfa 	bl	8003f8c <HAL_I2S_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800079e:	f000 f9ed 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000198 	.word	0x20000198
 80007ac:	40003c00 	.word	0x40003c00
 80007b0:	00017700 	.word	0x00017700

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI1_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI1_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI1_Init+0x64>)
 8000806:	f004 fe25 	bl	8005454 <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f9b4 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200001e0 	.word	0x200001e0
 800081c:	40013000 	.word	0x40013000

08000820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b092      	sub	sp, #72	; 0x48
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000826:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]
 8000842:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2220      	movs	r2, #32
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f007 ff2e 	bl	80086ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000850:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_TIM1_Init+0x118>)
 8000852:	4a3a      	ldr	r2, [pc, #232]	; (800093c <MX_TIM1_Init+0x11c>)
 8000854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 825;
 8000856:	4b38      	ldr	r3, [pc, #224]	; (8000938 <MX_TIM1_Init+0x118>)
 8000858:	f240 3239 	movw	r2, #825	; 0x339
 800085c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_TIM1_Init+0x118>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4064;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_TIM1_Init+0x118>)
 8000866:	f44f 627e 	mov.w	r2, #4064	; 0xfe0
 800086a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b32      	ldr	r3, [pc, #200]	; (8000938 <MX_TIM1_Init+0x118>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_TIM1_Init+0x118>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <MX_TIM1_Init+0x118>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087e:	482e      	ldr	r0, [pc, #184]	; (8000938 <MX_TIM1_Init+0x118>)
 8000880:	f004 fe71 	bl	8005566 <HAL_TIM_PWM_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f977 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089a:	4619      	mov	r1, r3
 800089c:	4826      	ldr	r0, [pc, #152]	; (8000938 <MX_TIM1_Init+0x118>)
 800089e:	f005 fab1 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f968 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	4819      	ldr	r0, [pc, #100]	; (8000938 <MX_TIM1_Init+0x118>)
 80008d2:	f004 ff5f 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f94e 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	2204      	movs	r2, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4813      	ldr	r0, [pc, #76]	; (8000938 <MX_TIM1_Init+0x118>)
 80008ea:	f004 ff53 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80008f4:	f000 f942 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4807      	ldr	r0, [pc, #28]	; (8000938 <MX_TIM1_Init+0x118>)
 800091c:	f005 faee 	bl	8005efc <HAL_TIMEx_ConfigBreakDeadTime>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000926:	f000 f929 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <MX_TIM1_Init+0x118>)
 800092c:	f000 fafe 	bl	8000f2c <HAL_TIM_MspPostInit>

}
 8000930:	bf00      	nop
 8000932:	3748      	adds	r7, #72	; 0x48
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000238 	.word	0x20000238
 800093c:	40010000 	.word	0x40010000

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2038      	movs	r0, #56	; 0x38
 8000968:	f001 f907 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800096c:	2038      	movs	r0, #56	; 0x38
 800096e:	f001 f920 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a71      	ldr	r2, [pc, #452]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b6f      	ldr	r3, [pc, #444]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	4b6b      	ldr	r3, [pc, #428]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a6a      	ldr	r2, [pc, #424]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b64      	ldr	r3, [pc, #400]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a63      	ldr	r2, [pc, #396]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a5c      	ldr	r2, [pc, #368]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b56      	ldr	r3, [pc, #344]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a55      	ldr	r2, [pc, #340]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b4f      	ldr	r3, [pc, #316]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a4e      	ldr	r2, [pc, #312]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	4849      	ldr	r0, [pc, #292]	; (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a44:	f001 fd56 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4847      	ldr	r0, [pc, #284]	; (8000b6c <MX_GPIO_Init+0x1ec>)
 8000a4e:	f001 fd51 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a52:	2200      	movs	r2, #0
 8000a54:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a58:	4845      	ldr	r0, [pc, #276]	; (8000b70 <MX_GPIO_Init+0x1f0>)
 8000a5a:	f001 fd4b 	bl	80024f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a5e:	2308      	movs	r3, #8
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	483c      	ldr	r0, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a76:	f001 fba1 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4836      	ldr	r0, [pc, #216]	; (8000b6c <MX_GPIO_Init+0x1ec>)
 8000a92:	f001 fb93 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a96:	2308      	movs	r3, #8
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	482e      	ldr	r0, [pc, #184]	; (8000b6c <MX_GPIO_Init+0x1ec>)
 8000ab2:	f001 fb83 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482a      	ldr	r0, [pc, #168]	; (8000b74 <MX_GPIO_Init+0x1f4>)
 8000acc:	f001 fb76 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4825      	ldr	r0, [pc, #148]	; (8000b78 <MX_GPIO_Init+0x1f8>)
 8000ae4:	f001 fb6a 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afa:	2305      	movs	r3, #5
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	481c      	ldr	r0, [pc, #112]	; (8000b78 <MX_GPIO_Init+0x1f8>)
 8000b06:	f001 fb59 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b0a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4813      	ldr	r0, [pc, #76]	; (8000b70 <MX_GPIO_Init+0x1f0>)
 8000b24:	f001 fb4a 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_GPIO_Init+0x1f0>)
 8000b3c:	f001 fb3e 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b44:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_GPIO_Init+0x1e8>)
 8000b56:	f001 fb31 	bl	80021bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	; 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 ffcc 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <HAL_ADC_MspInit+0xdc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d157      	bne.n	8000caa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <HAL_ADC_MspInit+0xe0>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <HAL_ADC_MspInit+0xe0>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <HAL_ADC_MspInit+0xe0>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <HAL_ADC_MspInit+0xe0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <HAL_ADC_MspInit+0xe0>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <HAL_ADC_MspInit+0xe0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	481d      	ldr	r0, [pc, #116]	; (8000cbc <HAL_ADC_MspInit+0xe4>)
 8000c46:	f001 fab9 	bl	80021bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <HAL_ADC_MspInit+0xec>)
 8000c4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000c90:	f000 ffaa 	bl	8001be8 <HAL_DMA_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c9a:	f7ff ff6f 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_ADC_MspInit+0xe8>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40012000 	.word	0x40012000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	200000e4 	.word	0x200000e4
 8000cc4:	40026410 	.word	0x40026410

08000cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_I2C_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_I2C_MspInit+0x8c>)
 8000d24:	f001 fa4a 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <HAL_I2S_MspInit+0xf0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d15a      	bne.n	8000e3e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d8c:	23c0      	movs	r3, #192	; 0xc0
 8000d8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fa1b 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000da4:	f7ff feea 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <HAL_I2S_MspInit+0xf8>)
 8000e18:	f001 f9d0 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <HAL_I2S_MspInit+0xfc>)
 8000e3a:	f001 f9bf 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3738      	adds	r7, #56	; 0x38
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40003c00 	.word	0x40003c00
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020800 	.word	0x40020800

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a19      	ldr	r2, [pc, #100]	; (8000edc <HAL_SPI_MspInit+0x84>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d12b      	bne.n	8000ed2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eb2:	23e0      	movs	r3, #224	; 0xe0
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000ece:	f001 f975 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40013000 	.word	0x40013000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10d      	bne.n	8000f16 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_PWM_MspInit+0x40>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <HAL_TIM_PWM_MspInit+0x40>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <HAL_TIM_PWM_MspInit+0x40>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <HAL_TIM_MspPostInit+0x68>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d11e      	bne.n	8000f8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_TIM_MspPostInit+0x6c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_TIM_MspPostInit+0x6c>)
 8000f58:	f043 0310 	orr.w	r3, r3, #16
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_TIM_MspPostInit+0x6c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000f6a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000f6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_TIM_MspPostInit+0x70>)
 8000f88:	f001 f918 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f8da 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DMA2_Stream0_IRQHandler+0x10>)
 8000ffa:	f000 fea3 	bl	8001d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000e4 	.word	0x200000e4

08001008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <OTG_FS_IRQHandler+0x10>)
 800100e:	f001 fcf5 	bl	80029fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000664 	.word	0x20000664

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f007 fb46 	bl	80086dc <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20020000 	.word	0x20020000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000280 	.word	0x20000280
 8001084:	20000ab0 	.word	0x20000ab0

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <SystemInit+0x20>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <SystemInit+0x20>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010b2:	490e      	ldr	r1, [pc, #56]	; (80010ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c8:	4c0b      	ldr	r4, [pc, #44]	; (80010f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d6:	f7ff ffd7 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010da:	f007 fb05 	bl	80086e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fa0f 	bl	8000500 <main>
  bx  lr    
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010f0:	08008818 	.word	0x08008818
  ldr r2, =_sbss
 80010f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010f8:	20000ab0 	.word	0x20000ab0

080010fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <HAL_Init+0x40>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_Init+0x40>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x40>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 fd1b 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fd28 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023c00 	.word	0x40023c00

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fd33 	bl	8001bce <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001180:	f000 fcfb 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000284 	.word	0x20000284

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000284 	.word	0x20000284

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e033      	b.n	80012aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fcc4 	bl	8000bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	d118      	bne.n	800129c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001272:	f023 0302 	bic.w	r3, r3, #2
 8001276:	f043 0202 	orr.w	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 faa4 	bl	80017cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f023 0303 	bic.w	r3, r3, #3
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
 800129a:	e001      	b.n	80012a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Start+0x1a>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e0b2      	b.n	8001434 <HAL_ADC_Start+0x180>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d018      	beq.n	8001316 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f4:	4b52      	ldr	r3, [pc, #328]	; (8001440 <HAL_ADC_Start+0x18c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_ADC_Start+0x190>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0c9a      	lsrs	r2, r3, #18
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001308:	e002      	b.n	8001310 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3b01      	subs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f9      	bne.n	800130a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d17a      	bne.n	800141a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800134e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800135e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001362:	d106      	bne.n	8001372 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f023 0206 	bic.w	r2, r3, #6
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	645a      	str	r2, [r3, #68]	; 0x44
 8001370:	e002      	b.n	8001378 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <HAL_ADC_Start+0x194>)
 8001382:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800138c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2b00      	cmp	r3, #0
 8001398:	d12a      	bne.n	80013f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2b      	ldr	r2, [pc, #172]	; (800144c <HAL_ADC_Start+0x198>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d015      	beq.n	80013d0 <HAL_ADC_Start+0x11c>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <HAL_ADC_Start+0x19c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d105      	bne.n	80013ba <HAL_ADC_Start+0x106>
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_ADC_Start+0x194>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00a      	beq.n	80013d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <HAL_ADC_Start+0x1a0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d136      	bne.n	8001432 <HAL_ADC_Start+0x17e>
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_ADC_Start+0x194>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d130      	bne.n	8001432 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d129      	bne.n	8001432 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e020      	b.n	8001432 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_ADC_Start+0x198>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d11b      	bne.n	8001432 <HAL_ADC_Start+0x17e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d114      	bne.n	8001432 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	e00b      	b.n	8001432 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000000 	.word	0x20000000
 8001444:	431bde83 	.word	0x431bde83
 8001448:	40012300 	.word	0x40012300
 800144c:	40012000 	.word	0x40012000
 8001450:	40012100 	.word	0x40012100
 8001454:	40012200 	.word	0x40012200

08001458 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001474:	d113      	bne.n	800149e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001484:	d10b      	bne.n	800149e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f043 0220 	orr.w	r2, r3, #32
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e063      	b.n	8001566 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800149e:	f7ff fe95 	bl	80011cc <HAL_GetTick>
 80014a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014a4:	e021      	b.n	80014ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ac:	d01d      	beq.n	80014ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_ADC_PollForConversion+0x6c>
 80014b4:	f7ff fe8a 	bl	80011cc <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d212      	bcs.n	80014ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d00b      	beq.n	80014ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f043 0204 	orr.w	r2, r3, #4
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e03d      	b.n	8001566 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d1d6      	bne.n	80014a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f06f 0212 	mvn.w	r2, #18
 8001500:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d123      	bne.n	8001564 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11f      	bne.n	8001564 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800153c:	2b00      	cmp	r3, #0
 800153e:	d111      	bne.n	8001564 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x1c>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e105      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x228>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b09      	cmp	r3, #9
 80015b2:	d925      	bls.n	8001600 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68d9      	ldr	r1, [r3, #12]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	3b1e      	subs	r3, #30
 80015ca:	2207      	movs	r2, #7
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68d9      	ldr	r1, [r3, #12]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4403      	add	r3, r0
 80015f2:	3b1e      	subs	r3, #30
 80015f4:	409a      	lsls	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	e022      	b.n	8001646 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6919      	ldr	r1, [r3, #16]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	2207      	movs	r2, #7
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	4603      	mov	r3, r0
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4403      	add	r3, r0
 800163c:	409a      	lsls	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b06      	cmp	r3, #6
 800164c:	d824      	bhi.n	8001698 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b05      	subs	r3, #5
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b05      	subs	r3, #5
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	; 0x34
 8001696:	e04c      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d824      	bhi.n	80016ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b23      	subs	r3, #35	; 0x23
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43da      	mvns	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	400a      	ands	r2, r1
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b23      	subs	r3, #35	; 0x23
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
 80016e8:	e023      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b41      	subs	r3, #65	; 0x41
 80016fc:	221f      	movs	r2, #31
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	400a      	ands	r2, r1
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3b41      	subs	r3, #65	; 0x41
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_ADC_ConfigChannel+0x234>)
 8001734:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <HAL_ADC_ConfigChannel+0x238>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d109      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1cc>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d105      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_ADC_ConfigChannel+0x238>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d123      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x21e>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d003      	beq.n	800176e <HAL_ADC_ConfigChannel+0x1e6>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b11      	cmp	r3, #17
 800176c:	d11b      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b10      	cmp	r3, #16
 8001780:	d111      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_ADC_ConfigChannel+0x23c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_ADC_ConfigChannel+0x240>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	0c9a      	lsrs	r2, r3, #18
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001798:	e002      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3b01      	subs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f9      	bne.n	800179a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40012300 	.word	0x40012300
 80017c0:	40012000 	.word	0x40012000
 80017c4:	20000000 	.word	0x20000000
 80017c8:	431bde83 	.word	0x431bde83

080017cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d4:	4b79      	ldr	r3, [pc, #484]	; (80019bc <ADC_Init+0x1f0>)
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <ADC_Init+0x1f4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e00f      	b.n	80018ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0202 	bic.w	r2, r2, #2
 80018d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7e1b      	ldrb	r3, [r3, #24]
 80018e4:	005a      	lsls	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001906:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	3b01      	subs	r3, #1
 8001924:	035a      	lsls	r2, r3, #13
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	e007      	b.n	8001940 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	3b01      	subs	r3, #1
 800195c:	051a      	lsls	r2, r3, #20
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001982:	025a      	lsls	r2, r3, #9
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	029a      	lsls	r2, r3, #10
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40012300 	.word	0x40012300
 80019c0:	0f000001 	.word	0x0f000001

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff faea 	bl	80011cc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e099      	b.n	8001d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	e00f      	b.n	8001c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c26:	f7ff fad1 	bl	80011cc <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d908      	bls.n	8001c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e078      	b.n	8001d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e8      	bne.n	8001c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_DMA_Init+0x158>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f023 0307 	bic.w	r3, r3, #7
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d117      	bne.n	8001d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00e      	beq.n	8001d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f9e9 	bl	80020c4 <DMA_CheckFifoParam>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d06:	2301      	movs	r3, #1
 8001d08:	e016      	b.n	8001d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f9a0 	bl	8002058 <DMA_CalcBaseAndBitshift>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	223f      	movs	r2, #63	; 0x3f
 8001d22:	409a      	lsls	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	f010803f 	.word	0xf010803f

08001d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d50:	4b8e      	ldr	r3, [pc, #568]	; (8001f8c <HAL_DMA_IRQHandler+0x248>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a8e      	ldr	r2, [pc, #568]	; (8001f90 <HAL_DMA_IRQHandler+0x24c>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0a9b      	lsrs	r3, r3, #10
 8001d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	2208      	movs	r2, #8
 8001d70:	409a      	lsls	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d01a      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0204 	bic.w	r2, r2, #4
 8001d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2201      	movs	r2, #1
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d012      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f043 0202 	orr.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	2204      	movs	r2, #4
 8001dec:	409a      	lsls	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00b      	beq.n	8001e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2204      	movs	r2, #4
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f043 0204 	orr.w	r2, r3, #4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2210      	movs	r2, #16
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d043      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03c      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2210      	movs	r2, #16
 8001e40:	409a      	lsls	r2, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d018      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d108      	bne.n	8001e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d024      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
 8001e72:	e01f      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
 8001e84:	e016      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0208 	bic.w	r2, r2, #8
 8001ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2220      	movs	r2, #32
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 808f 	beq.w	8001fe4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 8087 	beq.w	8001fe4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	2220      	movs	r2, #32
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d136      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0216 	bic.w	r2, r2, #22
 8001efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x1da>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0208 	bic.w	r2, r2, #8
 8001f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	223f      	movs	r2, #63	; 0x3f
 8001f34:	409a      	lsls	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d07e      	beq.n	8002050 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
        }
        return;
 8001f5a:	e079      	b.n	8002050 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d01d      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10d      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d031      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
 8001f88:	e02c      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x2a0>
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d023      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	e01e      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0210 	bic.w	r2, r2, #16
 8001fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d032      	beq.n	8002052 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d022      	beq.n	800203e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2205      	movs	r2, #5
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	3301      	adds	r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	d307      	bcc.n	800202c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f2      	bne.n	8002010 <HAL_DMA_IRQHandler+0x2cc>
 800202a:	e000      	b.n	800202e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800202c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
 800204e:	e000      	b.n	8002052 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002050:	bf00      	nop
    }
  }
}
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3b10      	subs	r3, #16
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <DMA_CalcBaseAndBitshift+0x64>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d909      	bls.n	800209a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	1d1a      	adds	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	659a      	str	r2, [r3, #88]	; 0x58
 8002098:	e007      	b.n	80020aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	aaaaaaab 	.word	0xaaaaaaab
 80020c0:	08008800 	.word	0x08008800

080020c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d11f      	bne.n	800211e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d856      	bhi.n	8002192 <DMA_CheckFifoParam+0xce>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <DMA_CheckFifoParam+0x28>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	0800210f 	.word	0x0800210f
 80020f4:	080020fd 	.word	0x080020fd
 80020f8:	08002193 	.word	0x08002193
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d046      	beq.n	8002196 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210c:	e043      	b.n	8002196 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002116:	d140      	bne.n	800219a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800211c:	e03d      	b.n	800219a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002126:	d121      	bne.n	800216c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d837      	bhi.n	800219e <DMA_CheckFifoParam+0xda>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <DMA_CheckFifoParam+0x70>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002145 	.word	0x08002145
 8002138:	0800214b 	.word	0x0800214b
 800213c:	08002145 	.word	0x08002145
 8002140:	0800215d 	.word	0x0800215d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e030      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d025      	beq.n	80021a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215a:	e022      	b.n	80021a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002164:	d11f      	bne.n	80021a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800216a:	e01c      	b.n	80021a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d903      	bls.n	800217a <DMA_CheckFifoParam+0xb6>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d003      	beq.n	8002180 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002178:	e018      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
      break;
 800217e:	e015      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00e      	beq.n	80021aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      break;
 8002190:	e00b      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;
 8002192:	bf00      	nop
 8002194:	e00a      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e008      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e006      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e004      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e002      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;   
 80021a6:	bf00      	nop
 80021a8:	e000      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
    }
  } 
  
  return status; 
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e16b      	b.n	80024b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f040 815a 	bne.w	80024aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d005      	beq.n	800220e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	2b02      	cmp	r3, #2
 800220c:	d130      	bne.n	8002270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 0201 	and.w	r2, r3, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b03      	cmp	r3, #3
 800227a:	d017      	beq.n	80022ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d123      	bne.n	8002300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0203 	and.w	r2, r3, #3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80b4 	beq.w	80024aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b60      	ldr	r3, [pc, #384]	; (80024c8 <HAL_GPIO_Init+0x30c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a5f      	ldr	r2, [pc, #380]	; (80024c8 <HAL_GPIO_Init+0x30c>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <HAL_GPIO_Init+0x30c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235e:	4a5b      	ldr	r2, [pc, #364]	; (80024cc <HAL_GPIO_Init+0x310>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_GPIO_Init+0x314>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02b      	beq.n	80023e2 <HAL_GPIO_Init+0x226>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a51      	ldr	r2, [pc, #324]	; (80024d4 <HAL_GPIO_Init+0x318>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d025      	beq.n	80023de <HAL_GPIO_Init+0x222>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a50      	ldr	r2, [pc, #320]	; (80024d8 <HAL_GPIO_Init+0x31c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01f      	beq.n	80023da <HAL_GPIO_Init+0x21e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <HAL_GPIO_Init+0x320>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x21a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <HAL_GPIO_Init+0x324>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x216>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4d      	ldr	r2, [pc, #308]	; (80024e4 <HAL_GPIO_Init+0x328>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x212>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	; (80024e8 <HAL_GPIO_Init+0x32c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x20e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_GPIO_Init+0x330>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x20a>
 80023c2:	2307      	movs	r3, #7
 80023c4:	e00e      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e00c      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023ca:	2306      	movs	r3, #6
 80023cc:	e00a      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e008      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023d6:	2303      	movs	r3, #3
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023e2:	2300      	movs	r3, #0
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f002 0203 	and.w	r2, r2, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	4093      	lsls	r3, r2
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f4:	4935      	ldr	r1, [pc, #212]	; (80024cc <HAL_GPIO_Init+0x310>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002426:	4a32      	ldr	r2, [pc, #200]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_GPIO_Init+0x334>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_GPIO_Init+0x334>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <HAL_GPIO_Init+0x334>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	f67f ae90 	bls.w	80021d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40021400 	.word	0x40021400
 80024e8:	40021800 	.word	0x40021800
 80024ec:	40021c00 	.word	0x40021c00
 80024f0:	40013c00 	.word	0x40013c00

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002510:	e003      	b.n	800251a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	041a      	lsls	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002528:	b08f      	sub	sp, #60	; 0x3c
 800252a:	af0a      	add	r7, sp, #40	; 0x28
 800252c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e054      	b.n	80025e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f005 fd92 	bl	800807c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2203      	movs	r2, #3
 800255c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fd84 	bl	8006084 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	687e      	ldr	r6, [r7, #4]
 8002584:	466d      	mov	r5, sp
 8002586:	f106 0410 	add.w	r4, r6, #16
 800258a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002592:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002596:	e885 0003 	stmia.w	r5, {r0, r1}
 800259a:	1d33      	adds	r3, r6, #4
 800259c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	f003 fcfe 	bl	8005fa0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fd7b 	bl	80060a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	687e      	ldr	r6, [r7, #4]
 80025b8:	466d      	mov	r5, sp
 80025ba:	f106 0410 	add.w	r4, r6, #16
 80025be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ce:	1d33      	adds	r3, r6, #4
 80025d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d2:	6838      	ldr	r0, [r7, #0]
 80025d4:	f003 ff04 	bl	80063e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b089      	sub	sp, #36	; 0x24
 80025ee:	af04      	add	r7, sp, #16
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	4608      	mov	r0, r1
 80025f4:	4611      	mov	r1, r2
 80025f6:	461a      	mov	r2, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	70fb      	strb	r3, [r7, #3]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70bb      	strb	r3, [r7, #2]
 8002600:	4613      	mov	r3, r2
 8002602:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_HCD_HC_Init+0x28>
 800260e:	2302      	movs	r3, #2
 8002610:	e076      	b.n	8002700 <HAL_HCD_HC_Init+0x116>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	333d      	adds	r3, #61	; 0x3d
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3338      	adds	r3, #56	; 0x38
 800263a:	787a      	ldrb	r2, [r7, #1]
 800263c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3340      	adds	r3, #64	; 0x40
 800264c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800264e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3339      	adds	r3, #57	; 0x39
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	333f      	adds	r3, #63	; 0x3f
 8002670:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002674:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	78ba      	ldrb	r2, [r7, #2]
 800267a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800267e:	b2d0      	uxtb	r0, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	333a      	adds	r3, #58	; 0x3a
 800268c:	4602      	mov	r2, r0
 800268e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002690:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002694:	2b00      	cmp	r3, #0
 8002696:	da09      	bge.n	80026ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	333b      	adds	r3, #59	; 0x3b
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e008      	b.n	80026be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	333b      	adds	r3, #59	; 0x3b
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	333c      	adds	r3, #60	; 0x3c
 80026cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	787c      	ldrb	r4, [r7, #1]
 80026d8:	78ba      	ldrb	r2, [r7, #2]
 80026da:	78f9      	ldrb	r1, [r7, #3]
 80026dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026de:	9302      	str	r3, [sp, #8]
 80026e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4623      	mov	r3, r4
 80026ee:	f003 ffd3 	bl	8006698 <USB_HC_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bd90      	pop	{r4, r7, pc}

08002708 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_HCD_HC_Halt+0x1e>
 8002722:	2302      	movs	r3, #2
 8002724:	e00f      	b.n	8002746 <HAL_HCD_HC_Halt+0x3e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fa23 	bl	8006b82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	4608      	mov	r0, r1
 800275a:	4611      	mov	r1, r2
 800275c:	461a      	mov	r2, r3
 800275e:	4603      	mov	r3, r0
 8002760:	70fb      	strb	r3, [r7, #3]
 8002762:	460b      	mov	r3, r1
 8002764:	70bb      	strb	r3, [r7, #2]
 8002766:	4613      	mov	r3, r2
 8002768:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	333b      	adds	r3, #59	; 0x3b
 8002778:	78ba      	ldrb	r2, [r7, #2]
 800277a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	333f      	adds	r3, #63	; 0x3f
 800278a:	787a      	ldrb	r2, [r7, #1]
 800278c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800278e:	7c3b      	ldrb	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d112      	bne.n	80027ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3342      	adds	r3, #66	; 0x42
 80027a2:	2203      	movs	r2, #3
 80027a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333d      	adds	r3, #61	; 0x3d
 80027b4:	7f3a      	ldrb	r2, [r7, #28]
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e008      	b.n	80027cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3342      	adds	r3, #66	; 0x42
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	f200 80c6 	bhi.w	8002960 <HAL_HCD_HC_SubmitRequest+0x210>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	0800294d 	.word	0x0800294d
 80027e4:	08002851 	.word	0x08002851
 80027e8:	080028cf 	.word	0x080028cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027ec:	7c3b      	ldrb	r3, [r7, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f040 80b8 	bne.w	8002964 <HAL_HCD_HC_SubmitRequest+0x214>
 80027f4:	78bb      	ldrb	r3, [r7, #2]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 80b4 	bne.w	8002964 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80027fc:	8b3b      	ldrh	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d108      	bne.n	8002814 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	3355      	adds	r3, #85	; 0x55
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3355      	adds	r3, #85	; 0x55
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3342      	adds	r3, #66	; 0x42
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800283a:	e093      	b.n	8002964 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3342      	adds	r3, #66	; 0x42
 800284a:	2202      	movs	r2, #2
 800284c:	701a      	strb	r2, [r3, #0]
      break;
 800284e:	e089      	b.n	8002964 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002850:	78bb      	ldrb	r3, [r7, #2]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11d      	bne.n	8002892 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3355      	adds	r3, #85	; 0x55
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3342      	adds	r3, #66	; 0x42
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800287c:	e073      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3342      	adds	r3, #66	; 0x42
 800288c:	2202      	movs	r2, #2
 800288e:	701a      	strb	r2, [r3, #0]
      break;
 8002890:	e069      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3354      	adds	r3, #84	; 0x54
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	3342      	adds	r3, #66	; 0x42
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
      break;
 80028b8:	e055      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3342      	adds	r3, #66	; 0x42
 80028c8:	2202      	movs	r2, #2
 80028ca:	701a      	strb	r2, [r3, #0]
      break;
 80028cc:	e04b      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028ce:	78bb      	ldrb	r3, [r7, #2]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11d      	bne.n	8002910 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3355      	adds	r3, #85	; 0x55
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3342      	adds	r3, #66	; 0x42
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028fa:	e034      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3342      	adds	r3, #66	; 0x42
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
      break;
 800290e:	e02a      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3354      	adds	r3, #84	; 0x54
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3342      	adds	r3, #66	; 0x42
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
      break;
 8002936:	e016      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3342      	adds	r3, #66	; 0x42
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
      break;
 800294a:	e00c      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3342      	adds	r3, #66	; 0x42
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e002      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002960:	bf00      	nop
 8002962:	e000      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002964:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3344      	adds	r3, #68	; 0x44
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	8b3a      	ldrh	r2, [r7, #24]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	202c      	movs	r0, #44	; 0x2c
 8002980:	fb00 f303 	mul.w	r3, r0, r3
 8002984:	440b      	add	r3, r1
 8002986:	334c      	adds	r3, #76	; 0x4c
 8002988:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3360      	adds	r3, #96	; 0x60
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3350      	adds	r3, #80	; 0x50
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3339      	adds	r3, #57	; 0x39
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3361      	adds	r3, #97	; 0x61
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	222c      	movs	r2, #44	; 0x2c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	3338      	adds	r3, #56	; 0x38
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	18d1      	adds	r1, r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	f003 ff76 	bl	80068dc <USB_HC_StartXfer>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop

080029fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fca1 	bl	800635a <USB_GetMode>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 80f6 	bne.w	8002c0c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fc85 	bl	8006334 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80ec 	beq.w	8002c0a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fc7c 	bl	8006334 <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a46:	d104      	bne.n	8002a52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fc6c 	bl	8006334 <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a66:	d104      	bne.n	8002a72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fc5c 	bl	8006334 <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a86:	d104      	bne.n	8002a92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fc4c 	bl	8006334 <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d103      	bne.n	8002aae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fc3e 	bl	8006334 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac2:	d11c      	bne.n	8002afe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002acc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ade:	2110      	movs	r1, #16
 8002ae0:	6938      	ldr	r0, [r7, #16]
 8002ae2:	f003 fb2d 	bl	8006140 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ae6:	6938      	ldr	r0, [r7, #16]
 8002ae8:	f003 fb5e 	bl	80061a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fd34 	bl	8006560 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f005 fb3d 	bl	8008178 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 fc16 	bl	8006334 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b12:	d102      	bne.n	8002b1a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f001 f882 	bl	8003c1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 fc08 	bl	8006334 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d106      	bne.n	8002b3c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f005 fb06 	bl	8008140 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 fbf7 	bl	8006334 <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d101      	bne.n	8002b54 <HAL_HCD_IRQHandler+0x158>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_HCD_IRQHandler+0x15a>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0210 	bic.w	r2, r2, #16
 8002b68:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 ff85 	bl	8003a7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0210 	orr.w	r2, r2, #16
 8002b7e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fbd5 	bl	8006334 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b94:	d13a      	bne.n	8002c0c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 ffe0 	bl	8006b60 <USB_HC_ReadInterrupt>
 8002ba0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e025      	b.n	8002bf4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d018      	beq.n	8002bee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd2:	d106      	bne.n	8002be2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f88f 	bl	8002cfe <HCD_HC_IN_IRQHandler>
 8002be0:	e005      	b.n	8002bee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fbdd 	bl	80033a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3d4      	bcc.n	8002ba8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c06:	615a      	str	r2, [r3, #20]
 8002c08:	e000      	b.n	8002c0c <HAL_HCD_IRQHandler+0x210>
      return;
 8002c0a:	bf00      	nop
    }
  }
}
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_HCD_Start+0x16>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e013      	b.n	8002c50 <HAL_HCD_Start+0x3e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fccc 	bl	80065d4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 fa0e 	bl	8006062 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_HCD_Stop+0x16>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e00d      	b.n	8002c8a <HAL_HCD_Stop+0x32>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 f8ba 	bl	8006df4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3360      	adds	r3, #96	; 0x60
 8002cac:	781b      	ldrb	r3, [r3, #0]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3350      	adds	r3, #80	; 0x50
 8002cd4:	681b      	ldr	r3, [r3, #0]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fcc0 	bl	8006674 <USB_GetCurrentFrame>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d11a      	bne.n	8002d64 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3361      	adds	r3, #97	; 0x61
 8002d4e:	2206      	movs	r2, #6
 8002d50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 ff10 	bl	8006b82 <USB_HC_Halt>
 8002d62:	e0af      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d11b      	bne.n	8002db4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3361      	adds	r3, #97	; 0x61
 8002d9e:	2207      	movs	r2, #7
 8002da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fee8 	bl	8006b82 <USB_HC_Halt>
 8002db2:	e087      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d109      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2320      	movs	r3, #32
 8002dda:	6093      	str	r3, [r2, #8]
 8002ddc:	e072      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d11a      	bne.n	8002e2a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	461a      	mov	r2, r3
 8002e02:	2308      	movs	r3, #8
 8002e04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3361      	adds	r3, #97	; 0x61
 8002e14:	2205      	movs	r2, #5
 8002e16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fead 	bl	8006b82 <USB_HC_Halt>
 8002e28:	e04c      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d11b      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3361      	adds	r3, #97	; 0x61
 8002e64:	2208      	movs	r2, #8
 8002e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 fe85 	bl	8006b82 <USB_HC_Halt>
 8002e78:	e024      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d119      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3361      	adds	r3, #97	; 0x61
 8002eb0:	2206      	movs	r2, #6
 8002eb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fe5f 	bl	8006b82 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eda:	d112      	bne.n	8002f02 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fe4b 	bl	8006b82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f00:	e24e      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	f040 80df 	bne.w	80030d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3348      	adds	r3, #72	; 0x48
 8002f30:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0159      	lsls	r1, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f44:	1ad2      	subs	r2, r2, r3
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	202c      	movs	r0, #44	; 0x2c
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	440b      	add	r3, r1
 8002f52:	3350      	adds	r3, #80	; 0x50
 8002f54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3361      	adds	r3, #97	; 0x61
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	333f      	adds	r3, #63	; 0x3f
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	333f      	adds	r3, #63	; 0x3f
 8002fae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d111      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fddf 	bl	8006b82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2310      	movs	r3, #16
 8002fd4:	6093      	str	r3, [r2, #8]
 8002fd6:	e03a      	b.n	800304e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	333f      	adds	r3, #63	; 0x3f
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d009      	beq.n	8003000 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	333f      	adds	r3, #63	; 0x3f
 8002ffa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d126      	bne.n	800304e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800301e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3360      	adds	r3, #96	; 0x60
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	b2d9      	uxtb	r1, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	202c      	movs	r0, #44	; 0x2c
 800303c:	fb00 f303 	mul.w	r3, r0, r3
 8003040:	4413      	add	r3, r2
 8003042:	3360      	adds	r3, #96	; 0x60
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f005 f8a3 	bl	8008194 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d12b      	bne.n	80030ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3348      	adds	r3, #72	; 0x48
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	202c      	movs	r0, #44	; 0x2c
 800306c:	fb00 f202 	mul.w	r2, r0, r2
 8003070:	440a      	add	r2, r1
 8003072:	3240      	adds	r2, #64	; 0x40
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	fbb3 f3f2 	udiv	r3, r3, r2
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 818e 	beq.w	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3354      	adds	r3, #84	; 0x54
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	f083 0301 	eor.w	r3, r3, #1
 8003098:	b2d8      	uxtb	r0, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3354      	adds	r3, #84	; 0x54
 80030a8:	4602      	mov	r2, r0
 80030aa:	701a      	strb	r2, [r3, #0]
}
 80030ac:	e178      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3354      	adds	r3, #84	; 0x54
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	f083 0301 	eor.w	r3, r3, #1
 80030c2:	b2d8      	uxtb	r0, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3354      	adds	r3, #84	; 0x54
 80030d2:	4602      	mov	r2, r0
 80030d4:	701a      	strb	r2, [r3, #0]
}
 80030d6:	e163      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 80f6 	bne.w	80032dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3361      	adds	r3, #97	; 0x61
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d109      	bne.n	8003118 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3360      	adds	r3, #96	; 0x60
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e0c9      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3361      	adds	r3, #97	; 0x61
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d109      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3360      	adds	r3, #96	; 0x60
 800313a:	2205      	movs	r2, #5
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e0b5      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b06      	cmp	r3, #6
 8003152:	d009      	beq.n	8003168 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3361      	adds	r3, #97	; 0x61
 8003162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003164:	2b08      	cmp	r3, #8
 8003166:	d150      	bne.n	800320a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	335c      	adds	r3, #92	; 0x5c
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	202c      	movs	r0, #44	; 0x2c
 8003180:	fb00 f303 	mul.w	r3, r0, r3
 8003184:	440b      	add	r3, r1
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d912      	bls.n	80031c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	335c      	adds	r3, #92	; 0x5c
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3360      	adds	r3, #96	; 0x60
 80031be:	2204      	movs	r2, #4
 80031c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031c2:	e073      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3360      	adds	r3, #96	; 0x60
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003208:	e050      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3361      	adds	r3, #97	; 0x61
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d122      	bne.n	8003264 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	3360      	adds	r3, #96	; 0x60
 800322c:	2202      	movs	r2, #2
 800322e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003246:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800324e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e023      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3361      	adds	r3, #97	; 0x61
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b07      	cmp	r3, #7
 8003276:	d119      	bne.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	335c      	adds	r3, #92	; 0x5c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	202c      	movs	r0, #44	; 0x2c
 8003290:	fb00 f303 	mul.w	r3, r0, r3
 8003294:	440b      	add	r3, r1
 8003296:	335c      	adds	r3, #92	; 0x5c
 8003298:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3360      	adds	r3, #96	; 0x60
 80032a8:	2204      	movs	r2, #4
 80032aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	461a      	mov	r2, r3
 80032ba:	2302      	movs	r3, #2
 80032bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	b2d9      	uxtb	r1, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	202c      	movs	r0, #44	; 0x2c
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f004 ff5d 	bl	8008194 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032da:	e061      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d156      	bne.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	333f      	adds	r3, #63	; 0x3f
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d111      	bne.n	800332a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f003 fc2d 	bl	8006b82 <USB_HC_Halt>
 8003328:	e031      	b.n	800338e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	333f      	adds	r3, #63	; 0x3f
 800334c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800334e:	2b02      	cmp	r3, #2
 8003350:	d11d      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	335c      	adds	r3, #92	; 0x5c
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d110      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3361      	adds	r3, #97	; 0x61
 800337a:	2203      	movs	r2, #3
 800337c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fbfa 	bl	8006b82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	2310      	movs	r3, #16
 800339e:	6093      	str	r3, [r2, #8]
}
 80033a0:	bf00      	nop
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11a      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2304      	movs	r3, #4
 80033e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3361      	adds	r3, #97	; 0x61
 80033f8:	2206      	movs	r2, #6
 80033fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fbbb 	bl	8006b82 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800340c:	e331      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b20      	cmp	r3, #32
 8003422:	d12e      	bne.n	8003482 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	2320      	movs	r3, #32
 8003434:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	333d      	adds	r3, #61	; 0x3d
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b01      	cmp	r3, #1
 8003448:	f040 8313 	bne.w	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	333d      	adds	r3, #61	; 0x3d
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	3360      	adds	r3, #96	; 0x60
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	4611      	mov	r1, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fb81 	bl	8006b82 <USB_HC_Halt>
}
 8003480:	e2f7      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d112      	bne.n	80034c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	461a      	mov	r2, r3
 80034a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 fb62 	bl	8006b82 <USB_HC_Halt>
}
 80034be:	e2d8      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d140      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d111      	bne.n	8003522 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	333d      	adds	r3, #61	; 0x3d
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	461a      	mov	r2, r3
 800351e:	2340      	movs	r3, #64	; 0x40
 8003520:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	2301      	movs	r3, #1
 8003532:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3361      	adds	r3, #97	; 0x61
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f003 fb16 	bl	8006b82 <USB_HC_Halt>
}
 8003556:	e28c      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d12c      	bne.n	80035c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3361      	adds	r3, #97	; 0x61
 800357c:	2204      	movs	r2, #4
 800357e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	333d      	adds	r3, #61	; 0x3d
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	335c      	adds	r3, #92	; 0x5c
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 fae7 	bl	8006b82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	461a      	mov	r2, r3
 80035c2:	2340      	movs	r3, #64	; 0x40
 80035c4:	6093      	str	r3, [r2, #8]
}
 80035c6:	e254      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11a      	bne.n	8003614 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	461a      	mov	r2, r3
 80035ec:	2308      	movs	r3, #8
 80035ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3361      	adds	r3, #97	; 0x61
 80035fe:	2205      	movs	r2, #5
 8003600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fab8 	bl	8006b82 <USB_HC_Halt>
}
 8003612:	e22e      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d140      	bne.n	80036ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	335c      	adds	r3, #92	; 0x5c
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3361      	adds	r3, #97	; 0x61
 800364a:	2203      	movs	r2, #3
 800364c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	333d      	adds	r3, #61	; 0x3d
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d112      	bne.n	8003688 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	333c      	adds	r3, #60	; 0x3c
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	333d      	adds	r3, #61	; 0x3d
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fa75 	bl	8006b82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a4:	461a      	mov	r2, r3
 80036a6:	2310      	movs	r3, #16
 80036a8:	6093      	str	r3, [r2, #8]
}
 80036aa:	e1e2      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d164      	bne.n	800378c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d111      	bne.n	80036ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3361      	adds	r3, #97	; 0x61
 80036d8:	2206      	movs	r2, #6
 80036da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fa4b 	bl	8006b82 <USB_HC_Halt>
 80036ec:	e044      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	335c      	adds	r3, #92	; 0x5c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	202c      	movs	r0, #44	; 0x2c
 8003706:	fb00 f303 	mul.w	r3, r0, r3
 800370a:	440b      	add	r3, r1
 800370c:	335c      	adds	r3, #92	; 0x5c
 800370e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	335c      	adds	r3, #92	; 0x5c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d920      	bls.n	8003766 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	335c      	adds	r3, #92	; 0x5c
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3360      	adds	r3, #96	; 0x60
 8003744:	2204      	movs	r2, #4
 8003746:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	b2d9      	uxtb	r1, r3
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	202c      	movs	r0, #44	; 0x2c
 8003752:	fb00 f303 	mul.w	r3, r0, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	; 0x60
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f004 fd18 	bl	8008194 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003764:	e008      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3360      	adds	r3, #96	; 0x60
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	6093      	str	r3, [r2, #8]
}
 800378a:	e172      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d11b      	bne.n	80037dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3361      	adds	r3, #97	; 0x61
 80037b2:	2208      	movs	r2, #8
 80037b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 f9de 	bl	8006b82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d8:	6093      	str	r3, [r2, #8]
}
 80037da:	e14a      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	f040 813f 	bne.w	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3361      	adds	r3, #97	; 0x61
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d17d      	bne.n	8003904 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3360      	adds	r3, #96	; 0x60
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	333f      	adds	r3, #63	; 0x3f
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d00a      	beq.n	8003844 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	333f      	adds	r3, #63	; 0x3f
 800383c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800383e:	2b03      	cmp	r3, #3
 8003840:	f040 8100 	bne.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d113      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3355      	adds	r3, #85	; 0x55
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	f083 0301 	eor.w	r3, r3, #1
 8003860:	b2d8      	uxtb	r0, r3
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	3355      	adds	r3, #85	; 0x55
 8003870:	4602      	mov	r2, r0
 8003872:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 80e3 	bne.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	334c      	adds	r3, #76	; 0x4c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80d8 	beq.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	334c      	adds	r3, #76	; 0x4c
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	202c      	movs	r0, #44	; 0x2c
 80038aa:	fb00 f202 	mul.w	r2, r0, r2
 80038ae:	440a      	add	r2, r1
 80038b0:	3240      	adds	r2, #64	; 0x40
 80038b2:	8812      	ldrh	r2, [r2, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	3b01      	subs	r3, #1
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	202c      	movs	r0, #44	; 0x2c
 80038be:	fb00 f202 	mul.w	r2, r0, r2
 80038c2:	440a      	add	r2, r1
 80038c4:	3240      	adds	r2, #64	; 0x40
 80038c6:	8812      	ldrh	r2, [r2, #0]
 80038c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80b5 	beq.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3355      	adds	r3, #85	; 0x55
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f083 0301 	eor.w	r3, r3, #1
 80038ee:	b2d8      	uxtb	r0, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3355      	adds	r3, #85	; 0x55
 80038fe:	4602      	mov	r2, r0
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e09f      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3361      	adds	r3, #97	; 0x61
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d109      	bne.n	800392c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3360      	adds	r3, #96	; 0x60
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e08b      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3361      	adds	r3, #97	; 0x61
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d109      	bne.n	8003954 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3360      	adds	r3, #96	; 0x60
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e077      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3361      	adds	r3, #97	; 0x61
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d109      	bne.n	800397c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3360      	adds	r3, #96	; 0x60
 8003976:	2205      	movs	r2, #5
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e063      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	3361      	adds	r3, #97	; 0x61
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b06      	cmp	r3, #6
 800398e:	d009      	beq.n	80039a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3361      	adds	r3, #97	; 0x61
 800399e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d14f      	bne.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	335c      	adds	r3, #92	; 0x5c
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	202c      	movs	r0, #44	; 0x2c
 80039bc:	fb00 f303 	mul.w	r3, r0, r3
 80039c0:	440b      	add	r3, r1
 80039c2:	335c      	adds	r3, #92	; 0x5c
 80039c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	335c      	adds	r3, #92	; 0x5c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d912      	bls.n	8003a00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	335c      	adds	r3, #92	; 0x5c
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3360      	adds	r3, #96	; 0x60
 80039fa:	2204      	movs	r2, #4
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e021      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3360      	adds	r3, #96	; 0x60
 8003a0e:	2202      	movs	r2, #2
 8003a10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3e:	461a      	mov	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	2302      	movs	r3, #2
 8003a54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	b2d9      	uxtb	r1, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	202c      	movs	r0, #44	; 0x2c
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	3360      	adds	r3, #96	; 0x60
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f004 fb91 	bl	8008194 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a72:	bf00      	nop
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08a      	sub	sp, #40	; 0x28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	0c5b      	lsrs	r3, r3, #17
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d004      	beq.n	8003ac0 <HCD_RXQLVL_IRQHandler+0x46>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	f000 80a9 	beq.w	8003c10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003abe:	e0aa      	b.n	8003c16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80a6 	beq.w	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3344      	adds	r3, #68	; 0x44
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 809b 	beq.w	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3350      	adds	r3, #80	; 0x50
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	441a      	add	r2, r3
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	202c      	movs	r0, #44	; 0x2c
 8003af8:	fb00 f303 	mul.w	r3, r0, r3
 8003afc:	440b      	add	r3, r1
 8003afe:	334c      	adds	r3, #76	; 0x4c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d87a      	bhi.n	8003bfc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	3344      	adds	r3, #68	; 0x44
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f002 fbb0 	bl	8006284 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3344      	adds	r3, #68	; 0x44
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	441a      	add	r2, r3
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	202c      	movs	r0, #44	; 0x2c
 8003b3e:	fb00 f303 	mul.w	r3, r0, r3
 8003b42:	440b      	add	r3, r1
 8003b44:	3344      	adds	r3, #68	; 0x44
 8003b46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	3350      	adds	r3, #80	; 0x50
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	202c      	movs	r0, #44	; 0x2c
 8003b62:	fb00 f303 	mul.w	r3, r0, r3
 8003b66:	440b      	add	r3, r1
 8003b68:	3350      	adds	r3, #80	; 0x50
 8003b6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	0cdb      	lsrs	r3, r3, #19
 8003b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3340      	adds	r3, #64	; 0x40
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d13c      	bne.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d039      	beq.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3354      	adds	r3, #84	; 0x54
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2d8      	uxtb	r0, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3354      	adds	r3, #84	; 0x54
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	701a      	strb	r2, [r3, #0]
      break;
 8003bfa:	e00b      	b.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	3360      	adds	r3, #96	; 0x60
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	701a      	strb	r2, [r3, #0]
      break;
 8003c0e:	e001      	b.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c14:	bf00      	nop
  }
}
 8003c16:	bf00      	nop
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d10b      	bne.n	8003c6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d102      	bne.n	8003c66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f004 fa7b 	bl	800815c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d132      	bne.n	8003cde <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d126      	bne.n	8003cd8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d113      	bne.n	8003cba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c9c:	d106      	bne.n	8003cac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fc5b 	bl	8006560 <USB_InitFSLSPClkSel>
 8003caa:	e011      	b.n	8003cd0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 fc54 	bl	8006560 <USB_InitFSLSPClkSel>
 8003cb8:	e00a      	b.n	8003cd0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d106      	bne.n	8003cd0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f004 fa6d 	bl	80081b0 <HAL_HCD_PortEnabled_Callback>
 8003cd6:	e002      	b.n	8003cde <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f004 fa77 	bl	80081cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d103      	bne.n	8003cf0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f043 0320 	orr.w	r3, r3, #32
 8003cee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e12b      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fc ffcc 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	; 0x24
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d68:	f001 fa20 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a81      	ldr	r2, [pc, #516]	; (8003f78 <HAL_I2C_Init+0x274>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d807      	bhi.n	8003d88 <HAL_I2C_Init+0x84>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a80      	ldr	r2, [pc, #512]	; (8003f7c <HAL_I2C_Init+0x278>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bf94      	ite	ls
 8003d80:	2301      	movls	r3, #1
 8003d82:	2300      	movhi	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e006      	b.n	8003d96 <HAL_I2C_Init+0x92>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_I2C_Init+0x27c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf94      	ite	ls
 8003d90:	2301      	movls	r3, #1
 8003d92:	2300      	movhi	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0e7      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a78      	ldr	r2, [pc, #480]	; (8003f84 <HAL_I2C_Init+0x280>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9b      	lsrs	r3, r3, #18
 8003da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_I2C_Init+0x274>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_I2C_Init+0xd4>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e009      	b.n	8003dec <HAL_I2C_Init+0xe8>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	4a69      	ldr	r2, [pc, #420]	; (8003f88 <HAL_I2C_Init+0x284>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	3301      	adds	r3, #1
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	495c      	ldr	r1, [pc, #368]	; (8003f78 <HAL_I2C_Init+0x274>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d819      	bhi.n	8003e40 <HAL_I2C_Init+0x13c>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e59      	subs	r1, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e20:	400b      	ands	r3, r1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_I2C_Init+0x138>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e59      	subs	r1, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	e051      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	e04f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <HAL_I2C_Init+0x168>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	440b      	add	r3, r1
 8003e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e012      	b.n	8003e92 <HAL_I2C_Init+0x18e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	0099      	lsls	r1, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x196>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e022      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_I2C_Init+0x1bc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e58      	subs	r0, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	440b      	add	r3, r1
 8003eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ebe:	e00f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	0099      	lsls	r1, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	6809      	ldr	r1, [r1, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6911      	ldr	r1, [r2, #16]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68d2      	ldr	r2, [r2, #12]
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	000186a0 	.word	0x000186a0
 8003f7c:	001e847f 	.word	0x001e847f
 8003f80:	003d08ff 	.word	0x003d08ff
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	10624dd3 	.word	0x10624dd3

08003f8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e128      	b.n	80041f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a90      	ldr	r2, [pc, #576]	; (80041f8 <HAL_I2S_Init+0x26c>)
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fc fecd 	bl	8000d58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fd4:	f023 030f 	bic.w	r3, r3, #15
 8003fd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d060      	beq.n	80040ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e001      	b.n	8003ffc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b20      	cmp	r3, #32
 8004002:	d802      	bhi.n	800400a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800400a:	2001      	movs	r0, #1
 800400c:	f001 f9c4 	bl	8005398 <HAL_RCCEx_GetPeriphCLKFreq>
 8004010:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401a:	d125      	bne.n	8004068 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	fbb2 f2f3 	udiv	r2, r2, r3
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	461a      	mov	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	3305      	adds	r3, #5
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	e01f      	b.n	8004086 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	3305      	adds	r3, #5
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	e00e      	b.n	8004086 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	3305      	adds	r3, #5
 8004084:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4a5c      	ldr	r2, [pc, #368]	; (80041fc <HAL_I2S_Init+0x270>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e003      	b.n	80040b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80040ac:	2302      	movs	r3, #2
 80040ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d902      	bls.n	80040c0 <HAL_I2S_Init+0x134>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2bff      	cmp	r3, #255	; 0xff
 80040be:	d907      	bls.n	80040d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	f043 0210 	orr.w	r2, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e08f      	b.n	80041f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	ea42 0103 	orr.w	r1, r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040ee:	f023 030f 	bic.w	r3, r3, #15
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6851      	ldr	r1, [r2, #4]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6892      	ldr	r2, [r2, #8]
 80040fa:	4311      	orrs	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68d2      	ldr	r2, [r2, #12]
 8004100:	4311      	orrs	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6992      	ldr	r2, [r2, #24]
 8004106:	430a      	orrs	r2, r1
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004112:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d161      	bne.n	80041e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a38      	ldr	r2, [pc, #224]	; (8004200 <HAL_I2S_Init+0x274>)
 8004120:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a37      	ldr	r2, [pc, #220]	; (8004204 <HAL_I2S_Init+0x278>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_I2S_Init+0x1a4>
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_I2S_Init+0x27c>)
 800412e:	e001      	b.n	8004134 <HAL_I2S_Init+0x1a8>
 8004130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	4932      	ldr	r1, [pc, #200]	; (8004204 <HAL_I2S_Init+0x278>)
 800413c:	428a      	cmp	r2, r1
 800413e:	d101      	bne.n	8004144 <HAL_I2S_Init+0x1b8>
 8004140:	4a31      	ldr	r2, [pc, #196]	; (8004208 <HAL_I2S_Init+0x27c>)
 8004142:	e001      	b.n	8004148 <HAL_I2S_Init+0x1bc>
 8004144:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004148:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800414c:	f023 030f 	bic.w	r3, r3, #15
 8004150:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <HAL_I2S_Init+0x278>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_I2S_Init+0x1d4>
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_I2S_Init+0x27c>)
 800415e:	e001      	b.n	8004164 <HAL_I2S_Init+0x1d8>
 8004160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004164:	2202      	movs	r2, #2
 8004166:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a25      	ldr	r2, [pc, #148]	; (8004204 <HAL_I2S_Init+0x278>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <HAL_I2S_Init+0x1ea>
 8004172:	4b25      	ldr	r3, [pc, #148]	; (8004208 <HAL_I2S_Init+0x27c>)
 8004174:	e001      	b.n	800417a <HAL_I2S_Init+0x1ee>
 8004176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004186:	d003      	beq.n	8004190 <HAL_I2S_Init+0x204>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	e001      	b.n	800419c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041a6:	4313      	orrs	r3, r2
 80041a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041ba:	4313      	orrs	r3, r2
 80041bc:	b29a      	uxth	r2, r3
 80041be:	897b      	ldrh	r3, [r7, #10]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <HAL_I2S_Init+0x278>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <HAL_I2S_Init+0x24c>
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_I2S_Init+0x27c>)
 80041d6:	e001      	b.n	80041dc <HAL_I2S_Init+0x250>
 80041d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041dc:	897a      	ldrh	r2, [r7, #10]
 80041de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	08004303 	.word	0x08004303
 80041fc:	cccccccd 	.word	0xcccccccd
 8004200:	08004419 	.word	0x08004419
 8004204:	40003800 	.word	0x40003800
 8004208:	40003400 	.word	0x40003400

0800420c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	881a      	ldrh	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10e      	bne.n	800429c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800428c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ffb8 	bl	800420c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	b292      	uxth	r2, r2
 80042b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10e      	bne.n	80042fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff93 	bl	8004220 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b04      	cmp	r3, #4
 800431c:	d13a      	bne.n	8004394 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d109      	bne.n	800433c <I2S_IRQHandler+0x3a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d102      	bne.n	800433c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff ffb4 	bl	80042a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d126      	bne.n	8004394 <I2S_IRQHandler+0x92>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b20      	cmp	r3, #32
 8004352:	d11f      	bne.n	8004394 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004362:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff50 	bl	8004234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b03      	cmp	r3, #3
 800439e:	d136      	bne.n	800440e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d109      	bne.n	80043be <I2S_IRQHandler+0xbc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d102      	bne.n	80043be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff45 	bl	8004248 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d122      	bne.n	800440e <I2S_IRQHandler+0x10c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d11b      	bne.n	800440e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff13 	bl	8004234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a92      	ldr	r2, [pc, #584]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004432:	4b92      	ldr	r3, [pc, #584]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004434:	e001      	b.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a8b      	ldr	r2, [pc, #556]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004450:	4b8a      	ldr	r3, [pc, #552]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004452:	e001      	b.n	8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004464:	d004      	beq.n	8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8099 	bne.w	80045a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d107      	bne.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f925 	bl	80046d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9c8 	bl	8004834 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d13a      	bne.n	8004524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d035      	beq.n	8004524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6e      	ldr	r2, [pc, #440]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80044c2:	4b6e      	ldr	r3, [pc, #440]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044c4:	e001      	b.n	80044ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80044c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4969      	ldr	r1, [pc, #420]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044d2:	428b      	cmp	r3, r1
 80044d4:	d101      	bne.n	80044da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80044d6:	4b69      	ldr	r3, [pc, #420]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044d8:	e001      	b.n	80044de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80044da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fe88 	bl	8004234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	f040 80c3 	bne.w	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80bd 	beq.w	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800454a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a49      	ldr	r2, [pc, #292]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004556:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004558:	e001      	b.n	800455e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800455a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4944      	ldr	r1, [pc, #272]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004566:	428b      	cmp	r3, r1
 8004568:	d101      	bne.n	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800456a:	4b44      	ldr	r3, [pc, #272]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800456c:	e001      	b.n	8004572 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800456e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004576:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004578:	2300      	movs	r3, #0
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fe4a 	bl	8004234 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045a0:	e089      	b.n	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d107      	bne.n	80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f8be 	bl	8004738 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8fd 	bl	80047d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d12f      	bne.n	8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02a      	beq.n	8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d101      	bne.n	8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004604:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004606:	e001      	b.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004608:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4919      	ldr	r1, [pc, #100]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004614:	428b      	cmp	r3, r1
 8004616:	d101      	bne.n	800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004618:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800461a:	e001      	b.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800461c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004620:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004624:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f043 0202 	orr.w	r2, r3, #2
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fdfa 	bl	8004234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b08      	cmp	r3, #8
 8004648:	d136      	bne.n	80046b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d031      	beq.n	80046b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004660:	e001      	b.n	8004666 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4902      	ldr	r1, [pc, #8]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800466e:	428b      	cmp	r3, r1
 8004670:	d106      	bne.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004672:	4b02      	ldr	r3, [pc, #8]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004674:	e006      	b.n	8004684 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004676:	bf00      	nop
 8004678:	40003800 	.word	0x40003800
 800467c:	40003400 	.word	0x40003400
 8004680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004688:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004698:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f043 0204 	orr.w	r2, r3, #4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fdc0 	bl	8004234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046b4:	e000      	b.n	80046b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046b6:	bf00      	nop
}
 80046b8:	bf00      	nop
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c99      	adds	r1, r3, #2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6251      	str	r1, [r2, #36]	; 0x24
 80046e6:	881a      	ldrh	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d113      	bne.n	800472e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ffc9 	bl	80046c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	1c99      	adds	r1, r3, #2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6251      	str	r1, [r2, #36]	; 0x24
 800474a:	8819      	ldrh	r1, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <I2SEx_TxISR_I2SExt+0x22>
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <I2SEx_TxISR_I2SExt+0x94>)
 8004758:	e001      	b.n	800475e <I2SEx_TxISR_I2SExt+0x26>
 800475a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800475e:	460a      	mov	r2, r1
 8004760:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d121      	bne.n	80047be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <I2SEx_TxISR_I2SExt+0x50>
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <I2SEx_TxISR_I2SExt+0x94>)
 8004786:	e001      	b.n	800478c <I2SEx_TxISR_I2SExt+0x54>
 8004788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	490d      	ldr	r1, [pc, #52]	; (80047c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004794:	428b      	cmp	r3, r1
 8004796:	d101      	bne.n	800479c <I2SEx_TxISR_I2SExt+0x64>
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <I2SEx_TxISR_I2SExt+0x94>)
 800479a:	e001      	b.n	80047a0 <I2SEx_TxISR_I2SExt+0x68>
 800479c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff81 	bl	80046c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40003800 	.word	0x40003800
 80047cc:	40003400 	.word	0x40003400

080047d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68d8      	ldr	r0, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	1c99      	adds	r1, r3, #2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047e8:	b282      	uxth	r2, r0
 80047ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d113      	bne.n	800482c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004812:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff4a 	bl	80046c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <I2SEx_RxISR_I2SExt+0x16>
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004848:	e001      	b.n	800484e <I2SEx_RxISR_I2SExt+0x1a>
 800484a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800484e:	68d8      	ldr	r0, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	1c99      	adds	r1, r3, #2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	62d1      	str	r1, [r2, #44]	; 0x2c
 800485a:	b282      	uxth	r2, r0
 800485c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d121      	bne.n	80048ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <I2SEx_RxISR_I2SExt+0x90>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <I2SEx_RxISR_I2SExt+0x50>
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004882:	e001      	b.n	8004888 <I2SEx_RxISR_I2SExt+0x54>
 8004884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	490d      	ldr	r1, [pc, #52]	; (80048c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004890:	428b      	cmp	r3, r1
 8004892:	d101      	bne.n	8004898 <I2SEx_RxISR_I2SExt+0x64>
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004896:	e001      	b.n	800489c <I2SEx_RxISR_I2SExt+0x68>
 8004898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800489c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff03 	bl	80046c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40003800 	.word	0x40003800
 80048c8:	40003400 	.word	0x40003400

080048cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e267      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d075      	beq.n	80049d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ea:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d00c      	beq.n	8004910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b85      	ldr	r3, [pc, #532]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d112      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004902:	4b82      	ldr	r3, [pc, #520]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490e:	d10b      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	4b7e      	ldr	r3, [pc, #504]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x108>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d157      	bne.n	80049d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e242      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x74>
 8004932:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e01d      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x98>
 800494a:	4b70      	ldr	r3, [pc, #448]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6f      	ldr	r2, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b6d      	ldr	r3, [pc, #436]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6c      	ldr	r2, [pc, #432]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004964:	4b69      	ldr	r3, [pc, #420]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a68      	ldr	r2, [pc, #416]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 800496a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b66      	ldr	r3, [pc, #408]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a65      	ldr	r2, [pc, #404]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800497a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fc fc22 	bl	80011cc <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498c:	f7fc fc1e 	bl	80011cc <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e207      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b5b      	ldr	r3, [pc, #364]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0xc0>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fc fc0e 	bl	80011cc <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fc fc0a 	bl	80011cc <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e1f3      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c6:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0xe8>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d063      	beq.n	8004aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049e2:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d11c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fa:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e1c7      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4937      	ldr	r1, [pc, #220]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a32:	e03a      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_OscConfig+0x244>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fc fbc3 	bl	80011cc <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4a:	f7fc fbbf 	bl	80011cc <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e1a8      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4925      	ldr	r1, [pc, #148]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
 8004a7c:	e015      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_RCC_OscConfig+0x244>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fc fba2 	bl	80011cc <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fc fb9e 	bl	80011cc <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e187      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d036      	beq.n	8004b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004abe:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <HAL_RCC_OscConfig+0x248>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fc fb82 	bl	80011cc <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fc fb7e 	bl	80011cc <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e167      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x200>
 8004aea:	e01b      	b.n	8004b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_OscConfig+0x248>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af2:	f7fc fb6b 	bl	80011cc <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	e00e      	b.n	8004b18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afa:	f7fc fb67 	bl	80011cc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d907      	bls.n	8004b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e150      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	42470000 	.word	0x42470000
 8004b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ea      	bne.n	8004afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8097 	beq.w	8004c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b81      	ldr	r3, [pc, #516]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	4b7d      	ldr	r3, [pc, #500]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	4a7c      	ldr	r2, [pc, #496]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6413      	str	r3, [r2, #64]	; 0x40
 8004b52:	4b7a      	ldr	r3, [pc, #488]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	4b77      	ldr	r3, [pc, #476]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d118      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6e:	4b74      	ldr	r3, [pc, #464]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a73      	ldr	r2, [pc, #460]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7a:	f7fc fb27 	bl	80011cc <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fc fb23 	bl	80011cc <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e10c      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b94:	4b6a      	ldr	r3, [pc, #424]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x2ea>
 8004ba8:	4b64      	ldr	r3, [pc, #400]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a63      	ldr	r2, [pc, #396]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	e01c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x324>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x30c>
 8004bbe:	4b5f      	ldr	r3, [pc, #380]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a5e      	ldr	r2, [pc, #376]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bca:	4b5c      	ldr	r3, [pc, #368]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a5b      	ldr	r2, [pc, #364]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x324>
 8004bd8:	4b58      	ldr	r3, [pc, #352]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a57      	ldr	r2, [pc, #348]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	4b55      	ldr	r3, [pc, #340]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a54      	ldr	r2, [pc, #336]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bea:	f023 0304 	bic.w	r3, r3, #4
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc fae8 	bl	80011cc <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fc fae4 	bl	80011cc <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0cb      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c16:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ee      	beq.n	8004c00 <HAL_RCC_OscConfig+0x334>
 8004c22:	e014      	b.n	8004c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c24:	f7fc fad2 	bl	80011cc <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fc face 	bl	80011cc <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0b5      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c42:	4b3e      	ldr	r3, [pc, #248]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ee      	bne.n	8004c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c54:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	4a38      	ldr	r2, [pc, #224]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a1 	beq.w	8004dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c6a:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d05c      	beq.n	8004d30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d141      	bne.n	8004d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fc faa2 	bl	80011cc <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fc fa9e 	bl	80011cc <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e087      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	491b      	ldr	r1, [pc, #108]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fc fa77 	bl	80011cc <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fc fa73 	bl	80011cc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e05c      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x416>
 8004d00:	e054      	b.n	8004dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fc fa60 	bl	80011cc <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fc fa5c 	bl	80011cc <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e045      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x444>
 8004d2e:	e03d      	b.n	8004dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e038      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40007000 	.word	0x40007000
 8004d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x4ec>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d028      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d121      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d11a      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d111      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	3b01      	subs	r3, #1
 8004d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800

08004dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0cc      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d90c      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b63      	ldr	r3, [pc, #396]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b8      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e28:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a52      	ldr	r2, [pc, #328]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	494d      	ldr	r1, [pc, #308]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d044      	beq.n	8004edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d119      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7a:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e06f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e067      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 0203 	bic.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4934      	ldr	r1, [pc, #208]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eac:	f7fc f98e 	bl	80011cc <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fc f98a 	bl	80011cc <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e04f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 020c 	and.w	r2, r3, #12
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1eb      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d20c      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e032      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4916      	ldr	r1, [pc, #88]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f42:	f000 f821 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	490a      	ldr	r1, [pc, #40]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1c8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc f8ee 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023c00 	.word	0x40023c00
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	080087e8 	.word	0x080087e8
 8004f80:	20000000 	.word	0x20000000
 8004f84:	20000004 	.word	0x20000004

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f8c:	b094      	sub	sp, #80	; 0x50
 8004f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	647b      	str	r3, [r7, #68]	; 0x44
 8004f94:	2300      	movs	r3, #0
 8004f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f98:	2300      	movs	r3, #0
 8004f9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa0:	4b79      	ldr	r3, [pc, #484]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 030c 	and.w	r3, r3, #12
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d00d      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	f200 80e1 	bhi.w	8005174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x34>
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fba:	e0db      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b73      	ldr	r3, [pc, #460]	; (800518c <HAL_RCC_GetSysClockFreq+0x204>)
 8004fbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fc0:	e0db      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc2:	4b73      	ldr	r3, [pc, #460]	; (8005190 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc6:	e0d8      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc8:	4b6f      	ldr	r3, [pc, #444]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd2:	4b6d      	ldr	r3, [pc, #436]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d063      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fde:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500c:	0150      	lsls	r0, r2, #5
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4621      	mov	r1, r4
 8005014:	1a51      	subs	r1, r2, r1
 8005016:	6139      	str	r1, [r7, #16]
 8005018:	4629      	mov	r1, r5
 800501a:	eb63 0301 	sbc.w	r3, r3, r1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800502c:	4659      	mov	r1, fp
 800502e:	018b      	lsls	r3, r1, #6
 8005030:	4651      	mov	r1, sl
 8005032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005036:	4651      	mov	r1, sl
 8005038:	018a      	lsls	r2, r1, #6
 800503a:	4651      	mov	r1, sl
 800503c:	ebb2 0801 	subs.w	r8, r2, r1
 8005040:	4659      	mov	r1, fp
 8005042:	eb63 0901 	sbc.w	r9, r3, r1
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800505a:	4690      	mov	r8, r2
 800505c:	4699      	mov	r9, r3
 800505e:	4623      	mov	r3, r4
 8005060:	eb18 0303 	adds.w	r3, r8, r3
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	462b      	mov	r3, r5
 8005068:	eb49 0303 	adc.w	r3, r9, r3
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800507a:	4629      	mov	r1, r5
 800507c:	024b      	lsls	r3, r1, #9
 800507e:	4621      	mov	r1, r4
 8005080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005084:	4621      	mov	r1, r4
 8005086:	024a      	lsls	r2, r1, #9
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	2200      	movs	r2, #0
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
 8005092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005098:	f7fb f896 	bl	80001c8 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4613      	mov	r3, r2
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a4:	e058      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	2200      	movs	r2, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	4611      	mov	r1, r2
 80050b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
 80050bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	f04f 0000 	mov.w	r0, #0
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	0159      	lsls	r1, r3, #5
 80050ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d2:	0150      	lsls	r0, r2, #5
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4641      	mov	r1, r8
 80050da:	ebb2 0a01 	subs.w	sl, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050f8:	ebb2 040a 	subs.w	r4, r2, sl
 80050fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	00eb      	lsls	r3, r5, #3
 800510a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800510e:	00e2      	lsls	r2, r4, #3
 8005110:	4614      	mov	r4, r2
 8005112:	461d      	mov	r5, r3
 8005114:	4643      	mov	r3, r8
 8005116:	18e3      	adds	r3, r4, r3
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	464b      	mov	r3, r9
 800511c:	eb45 0303 	adc.w	r3, r5, r3
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800512e:	4629      	mov	r1, r5
 8005130:	028b      	lsls	r3, r1, #10
 8005132:	4621      	mov	r1, r4
 8005134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005138:	4621      	mov	r1, r4
 800513a:	028a      	lsls	r2, r1, #10
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005142:	2200      	movs	r2, #0
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	f7fb f83c 	bl	80001c8 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4613      	mov	r3, r2
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	3301      	adds	r3, #1
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800516a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005172:	e002      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetSysClockFreq+0x204>)
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800517c:	4618      	mov	r0, r3
 800517e:	3750      	adds	r7, #80	; 0x50
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800
 800518c:	00f42400 	.word	0x00f42400
 8005190:	007a1200 	.word	0x007a1200

08005194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000000 	.word	0x20000000

080051ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b0:	f7ff fff0 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0a9b      	lsrs	r3, r3, #10
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4903      	ldr	r1, [pc, #12]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	080087f8 	.word	0x080087f8

080051d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d035      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051fc:	4b62      	ldr	r3, [pc, #392]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005202:	f7fb ffe3 	bl	80011cc <HAL_GetTick>
 8005206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005208:	e008      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800520a:	f7fb ffdf 	bl	80011cc <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e0b0      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800521c:	4b5b      	ldr	r3, [pc, #364]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	019a      	lsls	r2, r3, #6
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	071b      	lsls	r3, r3, #28
 8005234:	4955      	ldr	r1, [pc, #340]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800523c:	4b52      	ldr	r3, [pc, #328]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005242:	f7fb ffc3 	bl	80011cc <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800524a:	f7fb ffbf 	bl	80011cc <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e090      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800525c:	4b4b      	ldr	r3, [pc, #300]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8083 	beq.w	800537c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	4b44      	ldr	r3, [pc, #272]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a43      	ldr	r2, [pc, #268]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b41      	ldr	r3, [pc, #260]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005292:	4b3f      	ldr	r3, [pc, #252]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a3e      	ldr	r2, [pc, #248]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800529e:	f7fb ff95 	bl	80011cc <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7fb ff91 	bl	80011cc <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e062      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b8:	4b35      	ldr	r3, [pc, #212]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052c4:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02f      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d028      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ec:	4b29      	ldr	r3, [pc, #164]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052f2:	4b28      	ldr	r3, [pc, #160]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052f8:	4a24      	ldr	r2, [pc, #144]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b01      	cmp	r3, #1
 8005308:	d114      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800530a:	f7fb ff5f 	bl	80011cc <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fb ff5b 	bl	80011cc <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e02a      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0ee      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005340:	d10d      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005356:	490d      	ldr	r1, [pc, #52]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]
 800535c:	e005      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800535e:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	4a0a      	ldr	r2, [pc, #40]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005364:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005368:	6093      	str	r3, [r2, #8]
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800536c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005376:	4905      	ldr	r1, [pc, #20]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	42470068 	.word	0x42470068
 800538c:	40023800 	.word	0x40023800
 8005390:	40007000 	.word	0x40007000
 8005394:	42470e40 	.word	0x42470e40

08005398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d13e      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053b6:	4b23      	ldr	r3, [pc, #140]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d12f      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053cc:	4b1e      	ldr	r3, [pc, #120]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053ce:	617b      	str	r3, [r7, #20]
          break;
 80053d0:	e02f      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053de:	d108      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053e0:	4b18      	ldr	r3, [pc, #96]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	e007      	b.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053f2:	4b14      	ldr	r3, [pc, #80]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fa:	4a15      	ldr	r2, [pc, #84]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541c:	0f1b      	lsrs	r3, r3, #28
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]
          break;
 800542a:	e002      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
          break;
 8005430:	bf00      	nop
        }
      }
      break;
 8005432:	bf00      	nop
    }
  }
  return frequency;
 8005434:	697b      	ldr	r3, [r7, #20]
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800
 8005448:	00bb8000 	.word	0x00bb8000
 800544c:	007a1200 	.word	0x007a1200
 8005450:	00f42400 	.word	0x00f42400

08005454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e07b      	b.n	800555e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	d108      	bne.n	8005480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005476:	d009      	beq.n	800548c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	61da      	str	r2, [r3, #28]
 800547e:	e005      	b.n	800548c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fb fcd6 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	ea42 0103 	orr.w	r1, r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	f003 0104 	and.w	r1, r3, #4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	f003 0210 	and.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800554c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e041      	b.n	80055fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fb fcab 	bl	8000ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 f9b7 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_TIM_PWM_Start+0x24>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e022      	b.n	800566e <HAL_TIM_PWM_Start+0x6a>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b04      	cmp	r3, #4
 800562c:	d109      	bne.n	8005642 <HAL_TIM_PWM_Start+0x3e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	e015      	b.n	800566e <HAL_TIM_PWM_Start+0x6a>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b08      	cmp	r3, #8
 8005646:	d109      	bne.n	800565c <HAL_TIM_PWM_Start+0x58>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e008      	b.n	800566e <HAL_TIM_PWM_Start+0x6a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e07c      	b.n	8005770 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0x82>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005684:	e013      	b.n	80056ae <HAL_TIM_PWM_Start+0xaa>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b04      	cmp	r3, #4
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0x92>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005694:	e00b      	b.n	80056ae <HAL_TIM_PWM_Start+0xaa>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b08      	cmp	r3, #8
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_PWM_Start+0xa2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	e003      	b.n	80056ae <HAL_TIM_PWM_Start+0xaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fb7e 	bl	8005db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2d      	ldr	r2, [pc, #180]	; (8005778 <HAL_TIM_PWM_Start+0x174>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIM_PWM_Start+0xcc>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2c      	ldr	r2, [pc, #176]	; (800577c <HAL_TIM_PWM_Start+0x178>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d101      	bne.n	80056d4 <HAL_TIM_PWM_Start+0xd0>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_TIM_PWM_Start+0xd2>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a22      	ldr	r2, [pc, #136]	; (8005778 <HAL_TIM_PWM_Start+0x174>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d022      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d01d      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <HAL_TIM_PWM_Start+0x17c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d018      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <HAL_TIM_PWM_Start+0x180>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <HAL_TIM_PWM_Start+0x184>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00e      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a16      	ldr	r2, [pc, #88]	; (800577c <HAL_TIM_PWM_Start+0x178>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d009      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIM_PWM_Start+0x188>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d004      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a16      	ldr	r2, [pc, #88]	; (8005790 <HAL_TIM_PWM_Start+0x18c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d111      	bne.n	800575e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b06      	cmp	r3, #6
 800574a:	d010      	beq.n	800576e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575c:	e007      	b.n	800576e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40000c00 	.word	0x40000c00
 800578c:	40014000 	.word	0x40014000
 8005790:	40001800 	.word	0x40001800

08005794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0ae      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b0c      	cmp	r3, #12
 80057be:	f200 809f 	bhi.w	8005900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057fd 	.word	0x080057fd
 80057cc:	08005901 	.word	0x08005901
 80057d0:	08005901 	.word	0x08005901
 80057d4:	08005901 	.word	0x08005901
 80057d8:	0800583d 	.word	0x0800583d
 80057dc:	08005901 	.word	0x08005901
 80057e0:	08005901 	.word	0x08005901
 80057e4:	08005901 	.word	0x08005901
 80057e8:	0800587f 	.word	0x0800587f
 80057ec:	08005901 	.word	0x08005901
 80057f0:	08005901 	.word	0x08005901
 80057f4:	08005901 	.word	0x08005901
 80057f8:	080058bf 	.word	0x080058bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f928 	bl	8005a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0208 	orr.w	r2, r2, #8
 8005816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6999      	ldr	r1, [r3, #24]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	619a      	str	r2, [r3, #24]
      break;
 800583a:	e064      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f978 	bl	8005b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6999      	ldr	r1, [r3, #24]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	619a      	str	r2, [r3, #24]
      break;
 800587c:	e043      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f9cd 	bl	8005c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0208 	orr.w	r2, r2, #8
 8005898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0204 	bic.w	r2, r2, #4
 80058a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69d9      	ldr	r1, [r3, #28]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	61da      	str	r2, [r3, #28]
      break;
 80058bc:	e023      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fa21 	bl	8005d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69d9      	ldr	r1, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	021a      	lsls	r2, r3, #8
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	61da      	str	r2, [r3, #28]
      break;
 80058fe:	e002      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
      break;
 8005904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a40      	ldr	r2, [pc, #256]	; (8005a2c <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d00f      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3d      	ldr	r2, [pc, #244]	; (8005a30 <TIM_Base_SetConfig+0x118>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3c      	ldr	r2, [pc, #240]	; (8005a34 <TIM_Base_SetConfig+0x11c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3b      	ldr	r2, [pc, #236]	; (8005a38 <TIM_Base_SetConfig+0x120>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3a      	ldr	r2, [pc, #232]	; (8005a3c <TIM_Base_SetConfig+0x124>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d108      	bne.n	800596a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <TIM_Base_SetConfig+0x114>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d02b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d027      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2c      	ldr	r2, [pc, #176]	; (8005a30 <TIM_Base_SetConfig+0x118>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d023      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2b      	ldr	r2, [pc, #172]	; (8005a34 <TIM_Base_SetConfig+0x11c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01f      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <TIM_Base_SetConfig+0x120>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <TIM_Base_SetConfig+0x124>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d017      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <TIM_Base_SetConfig+0x128>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a27      	ldr	r2, [pc, #156]	; (8005a44 <TIM_Base_SetConfig+0x12c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a26      	ldr	r2, [pc, #152]	; (8005a48 <TIM_Base_SetConfig+0x130>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a25      	ldr	r2, [pc, #148]	; (8005a4c <TIM_Base_SetConfig+0x134>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a24      	ldr	r2, [pc, #144]	; (8005a50 <TIM_Base_SetConfig+0x138>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <TIM_Base_SetConfig+0x13c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0xf8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0c      	ldr	r2, [pc, #48]	; (8005a3c <TIM_Base_SetConfig+0x124>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d103      	bne.n	8005a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	615a      	str	r2, [r3, #20]
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800
 8005a4c:	40001800 	.word	0x40001800
 8005a50:	40001c00 	.word	0x40001c00
 8005a54:	40002000 	.word	0x40002000

08005a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0302 	bic.w	r3, r3, #2
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <TIM_OC1_SetConfig+0xd8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC1_SetConfig+0x64>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <TIM_OC1_SetConfig+0xdc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10c      	bne.n	8005ad6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0308 	bic.w	r3, r3, #8
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <TIM_OC1_SetConfig+0xd8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC1_SetConfig+0x8e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <TIM_OC1_SetConfig+0xdc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d111      	bne.n	8005b0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40010400 	.word	0x40010400

08005b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0210 	bic.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0320 	bic.w	r3, r3, #32
 8005b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a22      	ldr	r2, [pc, #136]	; (8005c1c <TIM_OC2_SetConfig+0xe4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC2_SetConfig+0x68>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <TIM_OC2_SetConfig+0xe8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10d      	bne.n	8005bbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <TIM_OC2_SetConfig+0xe4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC2_SetConfig+0x94>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <TIM_OC2_SetConfig+0xe8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d113      	bne.n	8005bf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40010400 	.word	0x40010400

08005c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <TIM_OC3_SetConfig+0xe0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_OC3_SetConfig+0x66>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a20      	ldr	r2, [pc, #128]	; (8005d08 <TIM_OC3_SetConfig+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d10d      	bne.n	8005ca6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <TIM_OC3_SetConfig+0xe0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC3_SetConfig+0x92>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <TIM_OC3_SetConfig+0xe4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d113      	bne.n	8005cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	621a      	str	r2, [r3, #32]
}
 8005cf8:	bf00      	nop
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40010000 	.word	0x40010000
 8005d08:	40010400 	.word	0x40010400

08005d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	031b      	lsls	r3, r3, #12
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a12      	ldr	r2, [pc, #72]	; (8005db0 <TIM_OC4_SetConfig+0xa4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC4_SetConfig+0x68>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <TIM_OC4_SetConfig+0xa8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d109      	bne.n	8005d88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40010400 	.word	0x40010400

08005db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2201      	movs	r2, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	fa01 f303 	lsl.w	r3, r1, r3
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e05a      	b.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d022      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e68:	d01d      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d018      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40001800 	.word	0x40001800

08005efc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e03d      	b.n	8005f94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	f107 001c 	add.w	r0, r7, #28
 8005fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d122      	bne.n	8005ffe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d105      	bne.n	8005ff2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9c0 	bl	8006378 <USB_CoreReset>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
 8005ffc:	e01a      	b.n	8006034 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9b4 	bl	8006378 <USB_CoreReset>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
 8006026:	e005      	b.n	8006034 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	2b01      	cmp	r3, #1
 8006038:	d10b      	bne.n	8006052 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f043 0206 	orr.w	r2, r3, #6
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800605e:	b004      	add	sp, #16
 8006060:	4770      	bx	lr

08006062 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 0201 	bic.w	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d115      	bne.n	80060f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060d4:	2001      	movs	r0, #1
 80060d6:	f7fb f885 	bl	80011e4 <HAL_Delay>
      ms++;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3301      	adds	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f93a 	bl	800635a <USB_GetMode>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d01e      	beq.n	800612a <USB_SetCurrentMode+0x84>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b31      	cmp	r3, #49	; 0x31
 80060f0:	d9f0      	bls.n	80060d4 <USB_SetCurrentMode+0x2e>
 80060f2:	e01a      	b.n	800612a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d115      	bne.n	8006126 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006106:	2001      	movs	r0, #1
 8006108:	f7fb f86c 	bl	80011e4 <HAL_Delay>
      ms++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f921 	bl	800635a <USB_GetMode>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <USB_SetCurrentMode+0x84>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b31      	cmp	r3, #49	; 0x31
 8006122:	d9f0      	bls.n	8006106 <USB_SetCurrentMode+0x60>
 8006124:	e001      	b.n	800612a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e005      	b.n	8006136 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b32      	cmp	r3, #50	; 0x32
 800612e:	d101      	bne.n	8006134 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <USB_FlushTxFifo+0x64>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e01b      	b.n	8006198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	daf2      	bge.n	800614e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	019b      	lsls	r3, r3, #6
 8006170:	f043 0220 	orr.w	r2, r3, #32
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <USB_FlushTxFifo+0x64>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e006      	b.n	8006198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b20      	cmp	r3, #32
 8006194:	d0f0      	beq.n	8006178 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	00030d40 	.word	0x00030d40

080061a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3301      	adds	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a11      	ldr	r2, [pc, #68]	; (8006204 <USB_FlushRxFifo+0x5c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e018      	b.n	80061f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	daf2      	bge.n	80061b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2210      	movs	r2, #16
 80061d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a08      	ldr	r2, [pc, #32]	; (8006204 <USB_FlushRxFifo+0x5c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e006      	b.n	80061f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d0f0      	beq.n	80061d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	00030d40 	.word	0x00030d40

08006208 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006208:	b480      	push	{r7}
 800620a:	b089      	sub	sp, #36	; 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	460b      	mov	r3, r1
 8006218:	71fb      	strb	r3, [r7, #7]
 800621a:	4613      	mov	r3, r2
 800621c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d123      	bne.n	8006276 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800622e:	88bb      	ldrh	r3, [r7, #4]
 8006230:	3303      	adds	r3, #3
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e018      	b.n	800626e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	031a      	lsls	r2, r3, #12
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006248:	461a      	mov	r2, r3
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	3301      	adds	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	3301      	adds	r3, #1
 8006260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	3301      	adds	r3, #1
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	429a      	cmp	r2, r3
 8006274:	d3e2      	bcc.n	800623c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3724      	adds	r7, #36	; 0x24
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006284:	b480      	push	{r7}
 8006286:	b08b      	sub	sp, #44	; 0x2c
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062aa:	2300      	movs	r3, #0
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	e014      	b.n	80062da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	3301      	adds	r3, #1
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	3301      	adds	r3, #1
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	3301      	adds	r3, #1
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	3301      	adds	r3, #1
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	3301      	adds	r3, #1
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	6a3a      	ldr	r2, [r7, #32]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3e6      	bcc.n	80062b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062e2:	8bfb      	ldrh	r3, [r7, #30]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01e      	beq.n	8006326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f2:	461a      	mov	r2, r3
 80062f4:	f107 0310 	add.w	r3, r7, #16
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	b2da      	uxtb	r2, r3
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	701a      	strb	r2, [r3, #0]
      i++;
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	3301      	adds	r3, #1
 8006312:	623b      	str	r3, [r7, #32]
      pDest++;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	3301      	adds	r3, #1
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800631a:	8bfb      	ldrh	r3, [r7, #30]
 800631c:	3b01      	subs	r3, #1
 800631e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006320:	8bfb      	ldrh	r3, [r7, #30]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ea      	bne.n	80062fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006328:	4618      	mov	r0, r3
 800632a:	372c      	adds	r7, #44	; 0x2c
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4013      	ands	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800634c:	68fb      	ldr	r3, [r7, #12]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f003 0301 	and.w	r3, r3, #1
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a13      	ldr	r2, [pc, #76]	; (80063dc <USB_CoreReset+0x64>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e01b      	b.n	80063ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	daf2      	bge.n	8006384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f043 0201 	orr.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <USB_CoreReset+0x64>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d901      	bls.n	80063c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e006      	b.n	80063ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d0f0      	beq.n	80063ae <USB_CoreReset+0x36>

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	00030d40 	.word	0x00030d40

080063e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063e0:	b084      	sub	sp, #16
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006400:	461a      	mov	r2, r3
 8006402:	2300      	movs	r3, #0
 8006404:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10a      	bne.n	8006452 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800644a:	f043 0304 	orr.w	r3, r3, #4
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e014      	b.n	800647c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006460:	f023 0304 	bic.w	r3, r3, #4
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	e009      	b.n	800647c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006476:	f023 0304 	bic.w	r3, r3, #4
 800647a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800647c:	2110      	movs	r1, #16
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff fe5e 	bl	8006140 <USB_FlushTxFifo>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fe8a 	bl	80061a8 <USB_FlushRxFifo>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	e015      	b.n	80064d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b0:	461a      	mov	r2, r3
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c4:	461a      	mov	r2, r3
 80064c6:	2300      	movs	r3, #0
 80064c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3301      	adds	r3, #1
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d3e5      	bcc.n	80064a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a13      	ldr	r2, [pc, #76]	; (800654c <USB_HostInit+0x16c>)
 80064fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a13      	ldr	r2, [pc, #76]	; (8006550 <USB_HostInit+0x170>)
 8006504:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006508:	e009      	b.n	800651e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a10      	ldr	r2, [pc, #64]	; (8006554 <USB_HostInit+0x174>)
 8006514:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a0f      	ldr	r2, [pc, #60]	; (8006558 <USB_HostInit+0x178>)
 800651a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f043 0210 	orr.w	r2, r3, #16
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699a      	ldr	r2, [r3, #24]
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <USB_HostInit+0x17c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr
 800654c:	01000200 	.word	0x01000200
 8006550:	00e00300 	.word	0x00e00300
 8006554:	00600080 	.word	0x00600080
 8006558:	004000e0 	.word	0x004000e0
 800655c:	a3200008 	.word	0xa3200008

08006560 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006598:	4313      	orrs	r3, r2
 800659a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d107      	bne.n	80065b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a8:	461a      	mov	r2, r3
 80065aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065ae:	6053      	str	r3, [r2, #4]
 80065b0:	e009      	b.n	80065c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d106      	bne.n	80065c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065be:	461a      	mov	r2, r3
 80065c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80065c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d109      	bne.n	8006618 <USB_DriveVbus+0x44>
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d106      	bne.n	8006618 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006612:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006616:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006622:	d109      	bne.n	8006638 <USB_DriveVbus+0x64>
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006636:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	0c5b      	lsrs	r3, r3, #17
 8006664:	f003 0303 	and.w	r3, r3, #3
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	b29b      	uxth	r3, r3
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	4608      	mov	r0, r1
 80066a2:	4611      	mov	r1, r2
 80066a4:	461a      	mov	r2, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	70fb      	strb	r3, [r7, #3]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70bb      	strb	r3, [r7, #2]
 80066ae:	4613      	mov	r3, r2
 80066b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	461a      	mov	r2, r3
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80066ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d87e      	bhi.n	80067d4 <USB_HC_Init+0x13c>
 80066d6:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <USB_HC_Init+0x44>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	080066ed 	.word	0x080066ed
 80066e0:	08006797 	.word	0x08006797
 80066e4:	080066ed 	.word	0x080066ed
 80066e8:	08006759 	.word	0x08006759
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	461a      	mov	r2, r3
 80066fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80066fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006700:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006704:	2b00      	cmp	r3, #0
 8006706:	da10      	bge.n	800672a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	440a      	add	r2, r1
 800671e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006726:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006728:	e057      	b.n	80067da <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d051      	beq.n	80067da <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	78fa      	ldrb	r2, [r7, #3]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	440a      	add	r2, r1
 800674c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006750:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006754:	60d3      	str	r3, [r2, #12]
      break;
 8006756:	e040      	b.n	80067da <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006764:	461a      	mov	r2, r3
 8006766:	f240 639d 	movw	r3, #1693	; 0x69d
 800676a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800676c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006770:	2b00      	cmp	r3, #0
 8006772:	da34      	bge.n	80067de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	440a      	add	r2, r1
 800678a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006792:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006794:	e023      	b.n	80067de <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a2:	461a      	mov	r2, r3
 80067a4:	f240 2325 	movw	r3, #549	; 0x225
 80067a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da17      	bge.n	80067e2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	78fa      	ldrb	r2, [r7, #3]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80067d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80067d2:	e006      	b.n	80067e2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	77fb      	strb	r3, [r7, #31]
      break;
 80067d8:	e004      	b.n	80067e4 <USB_HC_Init+0x14c>
      break;
 80067da:	bf00      	nop
 80067dc:	e002      	b.n	80067e4 <USB_HC_Init+0x14c>
      break;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <USB_HC_Init+0x14c>
      break;
 80067e2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	78fa      	ldrb	r2, [r7, #3]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fe:	f043 0302 	orr.w	r3, r3, #2
 8006802:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800680a:	699a      	ldr	r2, [r3, #24]
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	2101      	movs	r1, #1
 8006814:	fa01 f303 	lsl.w	r3, r1, r3
 8006818:	6939      	ldr	r1, [r7, #16]
 800681a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800681e:	4313      	orrs	r3, r2
 8006820:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800682e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006832:	2b00      	cmp	r3, #0
 8006834:	da03      	bge.n	800683e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	e001      	b.n	8006842 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff feff 	bl	8006646 <USB_GetHostSpeed>
 8006848:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800684a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800684e:	2b02      	cmp	r3, #2
 8006850:	d106      	bne.n	8006860 <USB_HC_Init+0x1c8>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d003      	beq.n	8006860 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	e001      	b.n	8006864 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006864:	787b      	ldrb	r3, [r7, #1]
 8006866:	059b      	lsls	r3, r3, #22
 8006868:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800686c:	78bb      	ldrb	r3, [r7, #2]
 800686e:	02db      	lsls	r3, r3, #11
 8006870:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006874:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006876:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800687a:	049b      	lsls	r3, r3, #18
 800687c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006880:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006882:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006884:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006888:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	0159      	lsls	r1, r3, #5
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	440b      	add	r3, r1
 8006896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068a0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80068a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d003      	beq.n	80068b2 <USB_HC_Init+0x21a>
 80068aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d10f      	bne.n	80068d2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80068d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08c      	sub	sp, #48	; 0x30
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80068f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068f8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d02d      	beq.n	8006962 <USB_HC_StartXfer+0x86>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	791b      	ldrb	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d129      	bne.n	8006962 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d117      	bne.n	8006944 <USB_HC_StartXfer+0x68>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	79db      	ldrb	r3, [r3, #7]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <USB_HC_StartXfer+0x48>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	79db      	ldrb	r3, [r3, #7]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d10f      	bne.n	8006944 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	440a      	add	r2, r1
 800693a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <USB_HC_StartXfer+0x86>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	795b      	ldrb	r3, [r3, #5]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d107      	bne.n	8006962 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	785b      	ldrb	r3, [r3, #1]
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa0f 	bl	8006d7c <USB_DoPing>
      return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e0f8      	b.n	8006b54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d018      	beq.n	800699c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	8912      	ldrh	r2, [r2, #8]
 8006972:	4413      	add	r3, r2
 8006974:	3b01      	subs	r3, #1
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	8912      	ldrh	r2, [r2, #8]
 800697a:	fbb3 f3f2 	udiv	r3, r3, r2
 800697e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006980:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006982:	8b7b      	ldrh	r3, [r7, #26]
 8006984:	429a      	cmp	r2, r3
 8006986:	d90b      	bls.n	80069a0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006988:	8b7b      	ldrh	r3, [r7, #26]
 800698a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800698c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	8912      	ldrh	r2, [r2, #8]
 8006992:	fb03 f202 	mul.w	r2, r3, r2
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	611a      	str	r2, [r3, #16]
 800699a:	e001      	b.n	80069a0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800699c:	2301      	movs	r3, #1
 800699e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	78db      	ldrb	r3, [r3, #3]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	8912      	ldrh	r2, [r2, #8]
 80069ae:	fb03 f202 	mul.w	r2, r3, r2
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	611a      	str	r2, [r3, #16]
 80069b6:	e003      	b.n	80069c0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069ca:	04d9      	lsls	r1, r3, #19
 80069cc:	4b63      	ldr	r3, [pc, #396]	; (8006b5c <USB_HC_StartXfer+0x280>)
 80069ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	7a9b      	ldrb	r3, [r3, #10]
 80069d6:	075b      	lsls	r3, r3, #29
 80069d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	0148      	lsls	r0, r1, #5
 80069e0:	6a39      	ldr	r1, [r7, #32]
 80069e2:	4401      	add	r1, r0
 80069e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	68d9      	ldr	r1, [r3, #12]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a02:	460a      	mov	r2, r1
 8006a04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bf0c      	ite	eq
 8006a16:	2301      	moveq	r3, #1
 8006a18:	2300      	movne	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	6a3a      	ldr	r2, [r7, #32]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	7e7b      	ldrb	r3, [r7, #25]
 8006a4e:	075b      	lsls	r3, r3, #29
 8006a50:	69f9      	ldr	r1, [r7, #28]
 8006a52:	0148      	lsls	r0, r1, #5
 8006a54:	6a39      	ldr	r1, [r7, #32]
 8006a56:	4401      	add	r1, r0
 8006a58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	78db      	ldrb	r3, [r3, #3]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	e003      	b.n	8006a92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e04e      	b.n	8006b54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	78db      	ldrb	r3, [r3, #3]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d149      	bne.n	8006b52 <USB_HC_StartXfer+0x276>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d045      	beq.n	8006b52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	79db      	ldrb	r3, [r3, #7]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d830      	bhi.n	8006b30 <USB_HC_StartXfer+0x254>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <USB_HC_StartXfer+0x1f8>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006b09 	.word	0x08006b09
 8006adc:	08006ae5 	.word	0x08006ae5
 8006ae0:	08006b09 	.word	0x08006b09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	3303      	adds	r3, #3
 8006aea:	089b      	lsrs	r3, r3, #2
 8006aec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006aee:	8afa      	ldrh	r2, [r7, #22]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d91c      	bls.n	8006b34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b06:	e015      	b.n	8006b34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	3303      	adds	r3, #3
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b12:	8afa      	ldrh	r2, [r7, #22]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d90a      	bls.n	8006b38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b2e:	e003      	b.n	8006b38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006b30:	bf00      	nop
 8006b32:	e002      	b.n	8006b3a <USB_HC_StartXfer+0x25e>
        break;
 8006b34:	bf00      	nop
 8006b36:	e000      	b.n	8006b3a <USB_HC_StartXfer+0x25e>
        break;
 8006b38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	68d9      	ldr	r1, [r3, #12]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	785a      	ldrb	r2, [r3, #1]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2000      	movs	r0, #0
 8006b4a:	9000      	str	r0, [sp, #0]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff fb5b 	bl	8006208 <USB_WritePacket>
  }

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3728      	adds	r7, #40	; 0x28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	1ff80000 	.word	0x1ff80000

08006b60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	b29b      	uxth	r3, r3
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b089      	sub	sp, #36	; 0x24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	0c9b      	lsrs	r3, r3, #18
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	0fdb      	lsrs	r3, r3, #31
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d104      	bne.n	8006bdc <USB_HC_Halt+0x5a>
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e0c8      	b.n	8006d6e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <USB_HC_Halt+0x66>
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d163      	bne.n	8006cb0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 80ab 	bne.w	8006d6c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d133      	bne.n	8006c8a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c60:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c6e:	d81d      	bhi.n	8006cac <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c86:	d0ec      	beq.n	8006c62 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c88:	e070      	b.n	8006d6c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006caa:	e05f      	b.n	8006d6c <USB_HC_Halt+0x1ea>
            break;
 8006cac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cae:	e05d      	b.n	8006d6c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d133      	bne.n	8006d48 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d2c:	d81d      	bhi.n	8006d6a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d44:	d0ec      	beq.n	8006d20 <USB_HC_Halt+0x19e>
 8006d46:	e011      	b.n	8006d6c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	e000      	b.n	8006d6c <USB_HC_Halt+0x1ea>
          break;
 8006d6a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3724      	adds	r7, #36	; 0x24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006d90:	2301      	movs	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	04da      	lsls	r2, r3, #19
 8006d98:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <USB_DoPing+0x74>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dcc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	1ff80000 	.word	0x1ff80000

08006df4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff f93b 	bl	8006084 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e0e:	2110      	movs	r1, #16
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff f995 	bl	8006140 <USB_FlushTxFifo>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff f9c1 	bl	80061a8 <USB_FlushRxFifo>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e01f      	b.n	8006e76 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	3301      	adds	r3, #1
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b0f      	cmp	r3, #15
 8006e7a:	d9dc      	bls.n	8006e36 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	e034      	b.n	8006eec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ea0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ea8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ec8:	d80c      	bhi.n	8006ee4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee0:	d0ec      	beq.n	8006ebc <USB_StopHost+0xc8>
 8006ee2:	e000      	b.n	8006ee6 <USB_StopHost+0xf2>
        break;
 8006ee4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	d9c7      	bls.n	8006e82 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006efe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff f8aa 	bl	8006062 <USB_EnableGlobalInt>

  return ret;
 8006f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b089      	sub	sp, #36	; 0x24
 8006f1c:	af04      	add	r7, sp, #16
 8006f1e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006f20:	2301      	movs	r3, #1
 8006f22:	2202      	movs	r2, #2
 8006f24:	2102      	movs	r1, #2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fc66 	bl	80077f8 <USBH_FindInterface>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2bff      	cmp	r3, #255	; 0xff
 8006f34:	d002      	beq.n	8006f3c <USBH_CDC_InterfaceInit+0x24>
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d901      	bls.n	8006f40 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e13d      	b.n	80071bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fc3b 	bl	80077c0 <USBH_SelectInterface>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e131      	b.n	80071bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f5e:	2050      	movs	r0, #80	; 0x50
 8006f60:	f001 fae8 	bl	8008534 <malloc>
 8006f64:	4603      	mov	r3, r0
 8006f66:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e11f      	b.n	80071bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f7c:	2250      	movs	r2, #80	; 0x50
 8006f7e:	2100      	movs	r1, #0
 8006f80:	68b8      	ldr	r0, [r7, #8]
 8006f82:	f001 fb93 	bl	80086ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	211a      	movs	r1, #26
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	4413      	add	r3, r2
 8006f92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da15      	bge.n	8006fca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	211a      	movs	r1, #26
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	4413      	add	r3, r2
 8006faa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	211a      	movs	r1, #26
 8006fba:	fb01 f303 	mul.w	r3, r1, r3
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fc4:	881a      	ldrh	r2, [r3, #0]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 ff9c 	bl	8007f0e <USBH_AllocPipe>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	7819      	ldrb	r1, [r3, #0]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	7858      	ldrb	r0, [r3, #1]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	8952      	ldrh	r2, [r2, #10]
 8006ff6:	9202      	str	r2, [sp, #8]
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	9201      	str	r2, [sp, #4]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4623      	mov	r3, r4
 8007000:	4602      	mov	r2, r0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 ff54 	bl	8007eb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 fa17 	bl	8008444 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007016:	2300      	movs	r3, #0
 8007018:	2200      	movs	r2, #0
 800701a:	210a      	movs	r1, #10
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fbeb 	bl	80077f8 <USBH_FindInterface>
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2bff      	cmp	r3, #255	; 0xff
 800702a:	d002      	beq.n	8007032 <USBH_CDC_InterfaceInit+0x11a>
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d901      	bls.n	8007036 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	e0c2      	b.n	80071bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	211a      	movs	r1, #26
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	b25b      	sxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	da16      	bge.n	800707c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	211a      	movs	r1, #26
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	4413      	add	r3, r2
 800705a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	211a      	movs	r1, #26
 800706a:	fb01 f303 	mul.w	r3, r1, r3
 800706e:	4413      	add	r3, r2
 8007070:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007074:	881a      	ldrh	r2, [r3, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	835a      	strh	r2, [r3, #26]
 800707a:	e015      	b.n	80070a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	211a      	movs	r1, #26
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	4413      	add	r3, r2
 8007088:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800708c:	781a      	ldrb	r2, [r3, #0]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	211a      	movs	r1, #26
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	4413      	add	r3, r2
 800709e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070a2:	881a      	ldrh	r2, [r3, #0]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	211a      	movs	r1, #26
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da16      	bge.n	80070ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	211a      	movs	r1, #26
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	4413      	add	r3, r2
 80070cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	211a      	movs	r1, #26
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070e6:	881a      	ldrh	r2, [r3, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	835a      	strh	r2, [r3, #26]
 80070ec:	e015      	b.n	800711a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	211a      	movs	r1, #26
 80070f4:	fb01 f303 	mul.w	r3, r1, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	211a      	movs	r1, #26
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	4413      	add	r3, r2
 8007110:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007114:	881a      	ldrh	r2, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	7b9b      	ldrb	r3, [r3, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fef4 	bl	8007f0e <USBH_AllocPipe>
 8007126:	4603      	mov	r3, r0
 8007128:	461a      	mov	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	7bdb      	ldrb	r3, [r3, #15]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 feea 	bl	8007f0e <USBH_AllocPipe>
 800713a:	4603      	mov	r3, r0
 800713c:	461a      	mov	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	7b59      	ldrb	r1, [r3, #13]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	7b98      	ldrb	r0, [r3, #14]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	8b12      	ldrh	r2, [r2, #24]
 800715a:	9202      	str	r2, [sp, #8]
 800715c:	2202      	movs	r2, #2
 800715e:	9201      	str	r2, [sp, #4]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	4623      	mov	r3, r4
 8007164:	4602      	mov	r2, r0
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fea2 	bl	8007eb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	7b19      	ldrb	r1, [r3, #12]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	7bd8      	ldrb	r0, [r3, #15]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	8b52      	ldrh	r2, [r2, #26]
 8007184:	9202      	str	r2, [sp, #8]
 8007186:	2202      	movs	r2, #2
 8007188:	9201      	str	r2, [sp, #4]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	4623      	mov	r3, r4
 800718e:	4602      	mov	r2, r0
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fe8d 	bl	8007eb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	7b5b      	ldrb	r3, [r3, #13]
 80071a2:	2200      	movs	r2, #0
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 f94c 	bl	8008444 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	7b1b      	ldrb	r3, [r3, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f945 	bl	8008444 <USBH_LL_SetToggle>

  return USBH_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd90      	pop	{r4, r7, pc}

080071c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fe82 	bl	8007eee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fead 	bl	8007f50 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	7b1b      	ldrb	r3, [r3, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00e      	beq.n	8007222 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	7b1b      	ldrb	r3, [r3, #12]
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fe6f 	bl	8007eee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	7b1b      	ldrb	r3, [r3, #12]
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fe9a 	bl	8007f50 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	7b5b      	ldrb	r3, [r3, #13]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00e      	beq.n	8007248 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	7b5b      	ldrb	r3, [r3, #13]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fe5c 	bl	8007eee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	7b5b      	ldrb	r3, [r3, #13]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fe87 	bl	8007f50 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	4618      	mov	r0, r3
 800725e:	f001 f971 	bl	8008544 <free>
    phost->pActiveClass->pData = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007268:	2200      	movs	r2, #0
 800726a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3340      	adds	r3, #64	; 0x40
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8b1 	bl	80073f6 <GetLineCoding>
 8007294:	4603      	mov	r3, r0
 8007296:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007298:	7afb      	ldrb	r3, [r7, #11]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d105      	bne.n	80072aa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a4:	2102      	movs	r1, #2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80072aa:	7afb      	ldrb	r3, [r7, #11]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d877      	bhi.n	80073c8 <USBH_CDC_Process+0x114>
 80072d8:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <USBH_CDC_Process+0x2c>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	080072f5 	.word	0x080072f5
 80072e4:	080072fb 	.word	0x080072fb
 80072e8:	0800732b 	.word	0x0800732b
 80072ec:	0800739f 	.word	0x0800739f
 80072f0:	080073ad 	.word	0x080073ad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
      break;
 80072f8:	e06d      	b.n	80073d6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f897 	bl	8007434 <SetLineCoding>
 8007306:	4603      	mov	r3, r0
 8007308:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007318:	e058      	b.n	80073cc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d055      	beq.n	80073cc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2204      	movs	r2, #4
 8007324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007328:	e050      	b.n	80073cc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	3340      	adds	r3, #64	; 0x40
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f860 	bl	80073f6 <GetLineCoding>
 8007336:	4603      	mov	r3, r0
 8007338:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d126      	bne.n	800738e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007352:	791b      	ldrb	r3, [r3, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d13b      	bne.n	80073d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007362:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007364:	429a      	cmp	r2, r3
 8007366:	d133      	bne.n	80073d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007372:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007374:	429a      	cmp	r2, r3
 8007376:	d12b      	bne.n	80073d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007380:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007382:	429a      	cmp	r2, r3
 8007384:	d124      	bne.n	80073d0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f958 	bl	800763c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800738c:	e020      	b.n	80073d0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d01d      	beq.n	80073d0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2204      	movs	r2, #4
 8007398:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800739c:	e018      	b.n	80073d0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f867 	bl	8007472 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8da 	bl	800755e <CDC_ProcessReception>
      break;
 80073aa:	e014      	b.n	80073d6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80073ac:	2100      	movs	r1, #0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fb08 	bl	80079c4 <USBH_ClrFeature>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80073c6:	e005      	b.n	80073d4 <USBH_CDC_Process+0x120>

    default:
      break;
 80073c8:	bf00      	nop
 80073ca:	e004      	b.n	80073d6 <USBH_CDC_Process+0x122>
      break;
 80073cc:	bf00      	nop
 80073ce:	e002      	b.n	80073d6 <USBH_CDC_Process+0x122>
      break;
 80073d0:	bf00      	nop
 80073d2:	e000      	b.n	80073d6 <USBH_CDC_Process+0x122>
      break;
 80073d4:	bf00      	nop

  }

  return status;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	22a1      	movs	r2, #161	; 0xa1
 8007404:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2221      	movs	r2, #33	; 0x21
 800740a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2207      	movs	r2, #7
 800741c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2207      	movs	r2, #7
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 faf1 	bl	8007a0c <USBH_CtlReq>
 800742a:	4603      	mov	r3, r0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2221      	movs	r2, #33	; 0x21
 8007442:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2207      	movs	r2, #7
 800745a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2207      	movs	r2, #7
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fad2 	bl	8007a0c <USBH_CtlReq>
 8007468:	4603      	mov	r3, r0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af02      	add	r7, sp, #8
 8007478:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007484:	2300      	movs	r3, #0
 8007486:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800748e:	2b01      	cmp	r3, #1
 8007490:	d002      	beq.n	8007498 <CDC_ProcessTransmission+0x26>
 8007492:	2b02      	cmp	r3, #2
 8007494:	d023      	beq.n	80074de <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007496:	e05e      	b.n	8007556 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	8b12      	ldrh	r2, [r2, #24]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d90b      	bls.n	80074bc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	69d9      	ldr	r1, [r3, #28]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8b1a      	ldrh	r2, [r3, #24]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	7b5b      	ldrb	r3, [r3, #13]
 80074b0:	2001      	movs	r0, #1
 80074b2:	9000      	str	r0, [sp, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fcb8 	bl	8007e2a <USBH_BulkSendData>
 80074ba:	e00b      	b.n	80074d4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	7b5b      	ldrb	r3, [r3, #13]
 80074ca:	2001      	movs	r0, #1
 80074cc:	9000      	str	r0, [sp, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fcab 	bl	8007e2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074dc:	e03b      	b.n	8007556 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	7b5b      	ldrb	r3, [r3, #13]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 ff83 	bl	80083f0 <USBH_LL_GetURBState>
 80074ea:	4603      	mov	r3, r0
 80074ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d128      	bne.n	8007546 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	8b12      	ldrh	r2, [r2, #24]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d90e      	bls.n	800751e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	8b12      	ldrh	r2, [r2, #24]
 8007508:	1a9a      	subs	r2, r3, r2
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	8b12      	ldrh	r2, [r2, #24]
 8007516:	441a      	add	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	61da      	str	r2, [r3, #28]
 800751c:	e002      	b.n	8007524 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007534:	e00e      	b.n	8007554 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f868 	bl	8007614 <USBH_CDC_TransmitCallback>
      break;
 8007544:	e006      	b.n	8007554 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007546:	7afb      	ldrb	r3, [r7, #11]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d103      	bne.n	8007554 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007554:	bf00      	nop
  }
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b086      	sub	sp, #24
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007570:	2300      	movs	r3, #0
 8007572:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800757a:	2b03      	cmp	r3, #3
 800757c:	d002      	beq.n	8007584 <CDC_ProcessReception+0x26>
 800757e:	2b04      	cmp	r3, #4
 8007580:	d00e      	beq.n	80075a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007582:	e043      	b.n	800760c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	6a19      	ldr	r1, [r3, #32]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	8b5a      	ldrh	r2, [r3, #26]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	7b1b      	ldrb	r3, [r3, #12]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fc6f 	bl	8007e74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2204      	movs	r2, #4
 800759a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800759e:	e035      	b.n	800760c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	7b1b      	ldrb	r3, [r3, #12]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 ff22 	bl	80083f0 <USBH_LL_GetURBState>
 80075ac:	4603      	mov	r3, r0
 80075ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80075b0:	7cfb      	ldrb	r3, [r7, #19]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d129      	bne.n	800760a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	7b1b      	ldrb	r3, [r3, #12]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fe85 	bl	80082cc <USBH_LL_GetLastXferSize>
 80075c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d016      	beq.n	80075fc <CDC_ProcessReception+0x9e>
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	8b5b      	ldrh	r3, [r3, #26]
 80075d2:	461a      	mov	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d910      	bls.n	80075fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad2      	subs	r2, r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	441a      	add	r2, r3
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2203      	movs	r2, #3
 80075f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80075fa:	e006      	b.n	800760a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f80f 	bl	8007628 <USBH_CDC_ReceiveCallback>
      break;
 800760a:	bf00      	nop
  }
}
 800760c:	bf00      	nop
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007664:	2302      	movs	r3, #2
 8007666:	e029      	b.n	80076bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	79fa      	ldrb	r2, [r7, #7]
 800766c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f81f 	bl	80076c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fd97 	bl	80081e8 <USBH_LL_Init>

  return USBH_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e009      	b.n	80076ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	33e0      	adds	r3, #224	; 0xe0
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	2200      	movs	r2, #0
 80076e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	3301      	adds	r3, #1
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b0f      	cmp	r3, #15
 80076ee:	d9f2      	bls.n	80076d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e009      	b.n	800770a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007710:	d3f1      	bcc.n	80076f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2240      	movs	r2, #64	; 0x40
 8007736:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d016      	beq.n	80077ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10e      	bne.n	80077a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007790:	1c59      	adds	r1, r3, #1
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	33de      	adds	r3, #222	; 0xde
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
 80077a6:	e004      	b.n	80077b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80077a8:	2302      	movs	r3, #2
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	e001      	b.n	80077b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80077ae:	2302      	movs	r3, #2
 80077b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d204      	bcs.n	80077e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80077e4:	e001      	b.n	80077ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80077e6:	2302      	movs	r3, #2
 80077e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	70fb      	strb	r3, [r7, #3]
 800780a:	460b      	mov	r3, r1
 800780c:	70bb      	strb	r3, [r7, #2]
 800780e:	4613      	mov	r3, r2
 8007810:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007820:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007822:	e025      	b.n	8007870 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	221a      	movs	r2, #26
 8007828:	fb02 f303 	mul.w	r3, r2, r3
 800782c:	3308      	adds	r3, #8
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4413      	add	r3, r2
 8007832:	3302      	adds	r3, #2
 8007834:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	795b      	ldrb	r3, [r3, #5]
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	429a      	cmp	r2, r3
 800783e:	d002      	beq.n	8007846 <USBH_FindInterface+0x4e>
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	2bff      	cmp	r3, #255	; 0xff
 8007844:	d111      	bne.n	800786a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800784a:	78ba      	ldrb	r2, [r7, #2]
 800784c:	429a      	cmp	r2, r3
 800784e:	d002      	beq.n	8007856 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007850:	78bb      	ldrb	r3, [r7, #2]
 8007852:	2bff      	cmp	r3, #255	; 0xff
 8007854:	d109      	bne.n	800786a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800785a:	787a      	ldrb	r2, [r7, #1]
 800785c:	429a      	cmp	r2, r3
 800785e:	d002      	beq.n	8007866 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007860:	787b      	ldrb	r3, [r7, #1]
 8007862:	2bff      	cmp	r3, #255	; 0xff
 8007864:	d101      	bne.n	800786a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	e006      	b.n	8007878 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	3301      	adds	r3, #1
 800786e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d9d6      	bls.n	8007824 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007876:	23ff      	movs	r3, #255	; 0xff
}
 8007878:	4618      	mov	r0, r3
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fce7 	bl	8008260 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007892:	2101      	movs	r1, #1
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fdbe 	bl	8008416 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f804 	bl	80078e6 <USBH_HandleSof>
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b0b      	cmp	r3, #11
 80078f6:	d10a      	bne.n	800790e <USBH_HandleSof+0x28>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
  }
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007926:	bf00      	nop
}
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007942:	bf00      	nop
}
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc7a 	bl	8008296 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fad1 	bl	8007f50 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	795b      	ldrb	r3, [r3, #5]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 facb 	bl	8007f50 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	789b      	ldrb	r3, [r3, #2]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d10f      	bne.n	80079f8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80079f8:	2200      	movs	r2, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f805 	bl	8007a0c <USBH_CtlReq>
 8007a02:	4603      	mov	r3, r0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	789b      	ldrb	r3, [r3, #2]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d002      	beq.n	8007a2c <USBH_CtlReq+0x20>
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d00f      	beq.n	8007a4a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007a2a:	e027      	b.n	8007a7c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	88fa      	ldrh	r2, [r7, #6]
 8007a36:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2202      	movs	r2, #2
 8007a42:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007a44:	2301      	movs	r3, #1
 8007a46:	75fb      	strb	r3, [r7, #23]
      break;
 8007a48:	e018      	b.n	8007a7c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f81c 	bl	8007a88 <USBH_HandleControl>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <USBH_CtlReq+0x54>
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d106      	bne.n	8007a6e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2201      	movs	r2, #1
 8007a64:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	761a      	strb	r2, [r3, #24]
      break;
 8007a6c:	e005      	b.n	8007a7a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d102      	bne.n	8007a7a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	709a      	strb	r2, [r3, #2]
      break;
 8007a7a:	bf00      	nop
  }
  return status;
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7e1b      	ldrb	r3, [r3, #24]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	2b0a      	cmp	r3, #10
 8007aa0:	f200 8156 	bhi.w	8007d50 <USBH_HandleControl+0x2c8>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <USBH_HandleControl+0x24>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007af3 	.word	0x08007af3
 8007ab4:	08007b5d 	.word	0x08007b5d
 8007ab8:	08007b83 	.word	0x08007b83
 8007abc:	08007bbb 	.word	0x08007bbb
 8007ac0:	08007be5 	.word	0x08007be5
 8007ac4:	08007c37 	.word	0x08007c37
 8007ac8:	08007c59 	.word	0x08007c59
 8007acc:	08007c95 	.word	0x08007c95
 8007ad0:	08007cbb 	.word	0x08007cbb
 8007ad4:	08007cf9 	.word	0x08007cf9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f103 0110 	add.w	r1, r3, #16
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	795b      	ldrb	r3, [r3, #5]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f943 	bl	8007d70 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	761a      	strb	r2, [r3, #24]
      break;
 8007af0:	e139      	b.n	8007d66 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	795b      	ldrb	r3, [r3, #5]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc79 	bl	80083f0 <USBH_LL_GetURBState>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d11e      	bne.n	8007b46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7c1b      	ldrb	r3, [r3, #16]
 8007b0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8adb      	ldrh	r3, [r3, #22]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007b1a:	7b7b      	ldrb	r3, [r7, #13]
 8007b1c:	2b80      	cmp	r3, #128	; 0x80
 8007b1e:	d103      	bne.n	8007b28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2203      	movs	r2, #3
 8007b24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b26:	e115      	b.n	8007d54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	761a      	strb	r2, [r3, #24]
      break;
 8007b2e:	e111      	b.n	8007d54 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007b30:	7b7b      	ldrb	r3, [r7, #13]
 8007b32:	2b80      	cmp	r3, #128	; 0x80
 8007b34:	d103      	bne.n	8007b3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2209      	movs	r2, #9
 8007b3a:	761a      	strb	r2, [r3, #24]
      break;
 8007b3c:	e10a      	b.n	8007d54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2207      	movs	r2, #7
 8007b42:	761a      	strb	r2, [r3, #24]
      break;
 8007b44:	e106      	b.n	8007d54 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d003      	beq.n	8007b54 <USBH_HandleControl+0xcc>
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	f040 8100 	bne.w	8007d54 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	220b      	movs	r2, #11
 8007b58:	761a      	strb	r2, [r3, #24]
      break;
 8007b5a:	e0fb      	b.n	8007d54 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6899      	ldr	r1, [r3, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	899a      	ldrh	r2, [r3, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f93a 	bl	8007dee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	761a      	strb	r2, [r3, #24]
      break;
 8007b80:	e0f1      	b.n	8007d66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	791b      	ldrb	r3, [r3, #4]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fc31 	bl	80083f0 <USBH_LL_GetURBState>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d102      	bne.n	8007b9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2209      	movs	r2, #9
 8007b9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b05      	cmp	r3, #5
 8007ba2:	d102      	bne.n	8007baa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ba8:	e0d6      	b.n	8007d58 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	f040 80d3 	bne.w	8007d58 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	220b      	movs	r2, #11
 8007bb6:	761a      	strb	r2, [r3, #24]
      break;
 8007bb8:	e0ce      	b.n	8007d58 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6899      	ldr	r1, [r3, #8]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	899a      	ldrh	r2, [r3, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	795b      	ldrb	r3, [r3, #5]
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	9000      	str	r0, [sp, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8ea 	bl	8007da4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2206      	movs	r2, #6
 8007be0:	761a      	strb	r2, [r3, #24]
      break;
 8007be2:	e0c0      	b.n	8007d66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	795b      	ldrb	r3, [r3, #5]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fc00 	bl	80083f0 <USBH_LL_GetURBState>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d103      	bne.n	8007c02 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c00:	e0ac      	b.n	8007d5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d105      	bne.n	8007c14 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	220c      	movs	r2, #12
 8007c0c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	73fb      	strb	r3, [r7, #15]
      break;
 8007c12:	e0a3      	b.n	8007d5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d103      	bne.n	8007c22 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	761a      	strb	r2, [r3, #24]
      break;
 8007c20:	e09c      	b.n	8007d5c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	f040 8099 	bne.w	8007d5c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	220b      	movs	r2, #11
 8007c2e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73fb      	strb	r3, [r7, #15]
      break;
 8007c34:	e092      	b.n	8007d5c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	791b      	ldrb	r3, [r3, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f8d5 	bl	8007dee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2208      	movs	r2, #8
 8007c54:	761a      	strb	r2, [r3, #24]

      break;
 8007c56:	e086      	b.n	8007d66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	791b      	ldrb	r3, [r3, #4]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fbc6 	bl	80083f0 <USBH_LL_GetURBState>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d105      	bne.n	8007c7a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	220d      	movs	r2, #13
 8007c72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c78:	e072      	b.n	8007d60 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d103      	bne.n	8007c88 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	220b      	movs	r2, #11
 8007c84:	761a      	strb	r2, [r3, #24]
      break;
 8007c86:	e06b      	b.n	8007d60 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d168      	bne.n	8007d60 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	73fb      	strb	r3, [r7, #15]
      break;
 8007c92:	e065      	b.n	8007d60 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	795b      	ldrb	r3, [r3, #5]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	9200      	str	r2, [sp, #0]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f87f 	bl	8007da4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	220a      	movs	r2, #10
 8007cb6:	761a      	strb	r2, [r3, #24]
      break;
 8007cb8:	e055      	b.n	8007d66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	795b      	ldrb	r3, [r3, #5]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fb95 	bl	80083f0 <USBH_LL_GetURBState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d105      	bne.n	8007cdc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	220d      	movs	r2, #13
 8007cd8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cda:	e043      	b.n	8007d64 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2209      	movs	r2, #9
 8007ce6:	761a      	strb	r2, [r3, #24]
      break;
 8007ce8:	e03c      	b.n	8007d64 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d139      	bne.n	8007d64 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	220b      	movs	r2, #11
 8007cf4:	761a      	strb	r2, [r3, #24]
      break;
 8007cf6:	e035      	b.n	8007d64 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	7e5b      	ldrb	r3, [r3, #25]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	765a      	strb	r2, [r3, #25]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	7e5b      	ldrb	r3, [r3, #25]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d806      	bhi.n	8007d1a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d18:	e025      	b.n	8007d66 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d20:	2106      	movs	r1, #6
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	795b      	ldrb	r3, [r3, #5]
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f90c 	bl	8007f50 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	791b      	ldrb	r3, [r3, #4]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f906 	bl	8007f50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4e:	e00a      	b.n	8007d66 <USBH_HandleControl+0x2de>

    default:
      break;
 8007d50:	bf00      	nop
 8007d52:	e008      	b.n	8007d66 <USBH_HandleControl+0x2de>
      break;
 8007d54:	bf00      	nop
 8007d56:	e006      	b.n	8007d66 <USBH_HandleControl+0x2de>
      break;
 8007d58:	bf00      	nop
 8007d5a:	e004      	b.n	8007d66 <USBH_HandleControl+0x2de>
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e002      	b.n	8007d66 <USBH_HandleControl+0x2de>
      break;
 8007d60:	bf00      	nop
 8007d62:	e000      	b.n	8007d66 <USBH_HandleControl+0x2de>
      break;
 8007d64:	bf00      	nop
  }

  return status;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af04      	add	r7, sp, #16
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d7e:	79f9      	ldrb	r1, [r7, #7]
 8007d80:	2300      	movs	r3, #0
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	2308      	movs	r3, #8
 8007d86:	9302      	str	r3, [sp, #8]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	2300      	movs	r3, #0
 8007d92:	2200      	movs	r2, #0
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 fafa 	bl	800838e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af04      	add	r7, sp, #16
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4611      	mov	r1, r2
 8007db0:	461a      	mov	r2, r3
 8007db2:	460b      	mov	r3, r1
 8007db4:	80fb      	strh	r3, [r7, #6]
 8007db6:	4613      	mov	r3, r2
 8007db8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007dc8:	7979      	ldrb	r1, [r7, #5]
 8007dca:	7e3b      	ldrb	r3, [r7, #24]
 8007dcc:	9303      	str	r3, [sp, #12]
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	9302      	str	r3, [sp, #8]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2200      	movs	r2, #0
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fad5 	bl	800838e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b088      	sub	sp, #32
 8007df2:	af04      	add	r7, sp, #16
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	80fb      	strh	r3, [r7, #6]
 8007e00:	4613      	mov	r3, r2
 8007e02:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e04:	7979      	ldrb	r1, [r7, #5]
 8007e06:	2300      	movs	r3, #0
 8007e08:	9303      	str	r3, [sp, #12]
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	9302      	str	r3, [sp, #8]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	2301      	movs	r3, #1
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	2300      	movs	r3, #0
 8007e18:	2201      	movs	r2, #1
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fab7 	bl	800838e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e20:	2300      	movs	r3, #0

}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b088      	sub	sp, #32
 8007e2e:	af04      	add	r7, sp, #16
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	4611      	mov	r1, r2
 8007e36:	461a      	mov	r2, r3
 8007e38:	460b      	mov	r3, r1
 8007e3a:	80fb      	strh	r3, [r7, #6]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e4e:	7979      	ldrb	r1, [r7, #5]
 8007e50:	7e3b      	ldrb	r3, [r7, #24]
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2302      	movs	r3, #2
 8007e62:	2200      	movs	r2, #0
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fa92 	bl	800838e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af04      	add	r7, sp, #16
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	460b      	mov	r3, r1
 8007e84:	80fb      	strh	r3, [r7, #6]
 8007e86:	4613      	mov	r3, r2
 8007e88:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e8a:	7979      	ldrb	r1, [r7, #5]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	88fb      	ldrh	r3, [r7, #6]
 8007e92:	9302      	str	r3, [sp, #8]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	2301      	movs	r3, #1
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fa74 	bl	800838e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af04      	add	r7, sp, #16
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	4608      	mov	r0, r1
 8007eba:	4611      	mov	r1, r2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	70fb      	strb	r3, [r7, #3]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70bb      	strb	r3, [r7, #2]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007eca:	7878      	ldrb	r0, [r7, #1]
 8007ecc:	78ba      	ldrb	r2, [r7, #2]
 8007ece:	78f9      	ldrb	r1, [r7, #3]
 8007ed0:	8b3b      	ldrh	r3, [r7, #24]
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	7d3b      	ldrb	r3, [r7, #20]
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	7c3b      	ldrb	r3, [r7, #16]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4603      	mov	r3, r0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa07 	bl	80082f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa26 	bl	8008350 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f836 	bl	8007f8c <USBH_GetFreePipe>
 8007f20:	4603      	mov	r3, r0
 8007f22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00a      	beq.n	8007f44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007f2e:	78fa      	ldrb	r2, [r7, #3]
 8007f30:	89fb      	ldrh	r3, [r7, #14]
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	33e0      	adds	r3, #224	; 0xe0
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007f44:	89fb      	ldrh	r3, [r7, #14]
 8007f46:	b2db      	uxtb	r3, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d80d      	bhi.n	8007f7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	33e0      	adds	r3, #224	; 0xe0
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	33e0      	adds	r3, #224	; 0xe0
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	e00f      	b.n	8007fbe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	33e0      	adds	r3, #224	; 0xe0
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	e007      	b.n	8007fc8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b0f      	cmp	r3, #15
 8007fc2:	d9ec      	bls.n	8007f9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	490e      	ldr	r1, [pc, #56]	; (8008014 <MX_USB_HOST_Init+0x40>)
 8007fdc:	480e      	ldr	r0, [pc, #56]	; (8008018 <MX_USB_HOST_Init+0x44>)
 8007fde:	f7ff fb37 	bl	8007650 <USBH_Init>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007fe8:	f7f8 fdc8 	bl	8000b7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007fec:	490b      	ldr	r1, [pc, #44]	; (800801c <MX_USB_HOST_Init+0x48>)
 8007fee:	480a      	ldr	r0, [pc, #40]	; (8008018 <MX_USB_HOST_Init+0x44>)
 8007ff0:	f7ff fbbc 	bl	800776c <USBH_RegisterClass>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ffa:	f7f8 fdbf 	bl	8000b7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007ffe:	4806      	ldr	r0, [pc, #24]	; (8008018 <MX_USB_HOST_Init+0x44>)
 8008000:	f7ff fc40 	bl	8007884 <USBH_Start>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800800a:	f7f8 fdb7 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800800e:	bf00      	nop
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	08008021 	.word	0x08008021
 8008018:	20000288 	.word	0x20000288
 800801c:	2000000c 	.word	0x2000000c

08008020 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	3b01      	subs	r3, #1
 8008030:	2b04      	cmp	r3, #4
 8008032:	d819      	bhi.n	8008068 <USBH_UserProcess+0x48>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <USBH_UserProcess+0x1c>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008069 	.word	0x08008069
 8008040:	08008059 	.word	0x08008059
 8008044:	08008069 	.word	0x08008069
 8008048:	08008061 	.word	0x08008061
 800804c:	08008051 	.word	0x08008051
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008050:	4b09      	ldr	r3, [pc, #36]	; (8008078 <USBH_UserProcess+0x58>)
 8008052:	2203      	movs	r2, #3
 8008054:	701a      	strb	r2, [r3, #0]
  break;
 8008056:	e008      	b.n	800806a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008058:	4b07      	ldr	r3, [pc, #28]	; (8008078 <USBH_UserProcess+0x58>)
 800805a:	2202      	movs	r2, #2
 800805c:	701a      	strb	r2, [r3, #0]
  break;
 800805e:	e004      	b.n	800806a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <USBH_UserProcess+0x58>)
 8008062:	2201      	movs	r2, #1
 8008064:	701a      	strb	r2, [r3, #0]
  break;
 8008066:	e000      	b.n	800806a <USBH_UserProcess+0x4a>

  default:
  break;
 8008068:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000660 	.word	0x20000660

0800807c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008084:	f107 0314 	add.w	r3, r7, #20
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800809c:	d147      	bne.n	800812e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800809e:	2300      	movs	r3, #0
 80080a0:	613b      	str	r3, [r7, #16]
 80080a2:	4b25      	ldr	r3, [pc, #148]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 80080a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a6:	4a24      	ldr	r2, [pc, #144]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6313      	str	r3, [r2, #48]	; 0x30
 80080ae:	4b22      	ldr	r3, [pc, #136]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 80080b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80080ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80080c8:	f107 0314 	add.w	r3, r7, #20
 80080cc:	4619      	mov	r1, r3
 80080ce:	481b      	ldr	r0, [pc, #108]	; (800813c <HAL_HCD_MspInit+0xc0>)
 80080d0:	f7fa f874 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80080d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80080d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080da:	2302      	movs	r3, #2
 80080dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080e2:	2300      	movs	r3, #0
 80080e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080e6:	230a      	movs	r3, #10
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080ea:	f107 0314 	add.w	r3, r7, #20
 80080ee:	4619      	mov	r1, r3
 80080f0:	4812      	ldr	r0, [pc, #72]	; (800813c <HAL_HCD_MspInit+0xc0>)
 80080f2:	f7fa f863 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 80080f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fa:	4a0f      	ldr	r2, [pc, #60]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 80080fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008100:	6353      	str	r3, [r2, #52]	; 0x34
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 8008108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810a:	4a0b      	ldr	r2, [pc, #44]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 800810c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008110:	6453      	str	r3, [r2, #68]	; 0x44
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <HAL_HCD_MspInit+0xbc>)
 8008114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800811e:	2200      	movs	r2, #0
 8008120:	2100      	movs	r1, #0
 8008122:	2043      	movs	r0, #67	; 0x43
 8008124:	f7f9 fd29 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008128:	2043      	movs	r0, #67	; 0x43
 800812a:	f7f9 fd42 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800812e:	bf00      	nop
 8008130:	3728      	adds	r7, #40	; 0x28
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	40023800 	.word	0x40023800
 800813c:	40020000 	.word	0x40020000

08008140 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff fbb7 	bl	80078c2 <USBH_LL_IncTimer>
}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fbef 	bl	800794e <USBH_LL_Connect>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fbf8 	bl	800797c <USBH_LL_Disconnect>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
 80081a0:	4613      	mov	r3, r2
 80081a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fba9 	bl	8007916 <USBH_LL_PortEnabled>
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff fba9 	bl	8007932 <USBH_LL_PortDisabled>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d12a      	bne.n	8008250 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80081fa:	4a18      	ldr	r2, [pc, #96]	; (800825c <USBH_LL_Init+0x74>)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a15      	ldr	r2, [pc, #84]	; (800825c <USBH_LL_Init+0x74>)
 8008206:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800820a:	4b14      	ldr	r3, [pc, #80]	; (800825c <USBH_LL_Init+0x74>)
 800820c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008210:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <USBH_LL_Init+0x74>)
 8008214:	2208      	movs	r2, #8
 8008216:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008218:	4b10      	ldr	r3, [pc, #64]	; (800825c <USBH_LL_Init+0x74>)
 800821a:	2201      	movs	r2, #1
 800821c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <USBH_LL_Init+0x74>)
 8008220:	2200      	movs	r2, #0
 8008222:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008224:	4b0d      	ldr	r3, [pc, #52]	; (800825c <USBH_LL_Init+0x74>)
 8008226:	2202      	movs	r2, #2
 8008228:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <USBH_LL_Init+0x74>)
 800822c:	2200      	movs	r2, #0
 800822e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008230:	480a      	ldr	r0, [pc, #40]	; (800825c <USBH_LL_Init+0x74>)
 8008232:	f7fa f978 	bl	8002526 <HAL_HCD_Init>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800823c:	f7f8 fc9e 	bl	8000b7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008240:	4806      	ldr	r0, [pc, #24]	; (800825c <USBH_LL_Init+0x74>)
 8008242:	f7fa fd4e 	bl	8002ce2 <HAL_HCD_GetCurrentFrame>
 8008246:	4603      	mov	r3, r0
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fb2a 	bl	80078a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000664 	.word	0x20000664

08008260 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008276:	4618      	mov	r0, r3
 8008278:	f7fa fccb 	bl	8002c12 <HAL_HCD_Start>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f90e 	bl	80084a4 <USBH_Get_USB_Status>
 8008288:	4603      	mov	r3, r0
 800828a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800828c:	7bbb      	ldrb	r3, [r7, #14]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fa fcd3 	bl	8002c58 <HAL_HCD_Stop>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f8f3 	bl	80084a4 <USBH_Get_USB_Status>
 80082be:	4603      	mov	r3, r0
 80082c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fa fce9 	bl	8002cba <HAL_HCD_HC_GetXferCount>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082f2:	b590      	push	{r4, r7, lr}
 80082f4:	b089      	sub	sp, #36	; 0x24
 80082f6:	af04      	add	r7, sp, #16
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	4608      	mov	r0, r1
 80082fc:	4611      	mov	r1, r2
 80082fe:	461a      	mov	r2, r3
 8008300:	4603      	mov	r3, r0
 8008302:	70fb      	strb	r3, [r7, #3]
 8008304:	460b      	mov	r3, r1
 8008306:	70bb      	strb	r3, [r7, #2]
 8008308:	4613      	mov	r3, r2
 800830a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800831a:	787c      	ldrb	r4, [r7, #1]
 800831c:	78ba      	ldrb	r2, [r7, #2]
 800831e:	78f9      	ldrb	r1, [r7, #3]
 8008320:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008322:	9302      	str	r3, [sp, #8]
 8008324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4623      	mov	r3, r4
 8008332:	f7fa f95a 	bl	80025ea <HAL_HCD_HC_Init>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	4618      	mov	r0, r3
 800833e:	f000 f8b1 	bl	80084a4 <USBH_Get_USB_Status>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008346:	7bbb      	ldrb	r3, [r7, #14]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}

08008350 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800836a:	78fa      	ldrb	r2, [r7, #3]
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f7fa f9ca 	bl	8002708 <HAL_HCD_HC_Halt>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f892 	bl	80084a4 <USBH_Get_USB_Status>
 8008380:	4603      	mov	r3, r0
 8008382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008384:	7bbb      	ldrb	r3, [r7, #14]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800838e:	b590      	push	{r4, r7, lr}
 8008390:	b089      	sub	sp, #36	; 0x24
 8008392:	af04      	add	r7, sp, #16
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	461a      	mov	r2, r3
 800839c:	4603      	mov	r3, r0
 800839e:	70fb      	strb	r3, [r7, #3]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70bb      	strb	r3, [r7, #2]
 80083a4:	4613      	mov	r3, r2
 80083a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80083b6:	787c      	ldrb	r4, [r7, #1]
 80083b8:	78ba      	ldrb	r2, [r7, #2]
 80083ba:	78f9      	ldrb	r1, [r7, #3]
 80083bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083c0:	9303      	str	r3, [sp, #12]
 80083c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083c4:	9302      	str	r3, [sp, #8]
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	4623      	mov	r3, r4
 80083d2:	f7fa f9bd 	bl	8002750 <HAL_HCD_HC_SubmitRequest>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f861 	bl	80084a4 <USBH_Get_USB_Status>
 80083e2:	4603      	mov	r3, r0
 80083e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd90      	pop	{r4, r7, pc}

080083f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008402:	78fa      	ldrb	r2, [r7, #3]
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7fa fc43 	bl	8002c92 <HAL_HCD_HC_GetURBState>
 800840c:	4603      	mov	r3, r0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008428:	2b01      	cmp	r3, #1
 800842a:	d103      	bne.n	8008434 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f864 	bl	80084fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008434:	20c8      	movs	r0, #200	; 0xc8
 8008436:	f7f8 fed5 	bl	80011e4 <HAL_Delay>
  return USBH_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
 8008450:	4613      	mov	r3, r2
 8008452:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800845a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	212c      	movs	r1, #44	; 0x2c
 8008462:	fb01 f303 	mul.w	r3, r1, r3
 8008466:	4413      	add	r3, r2
 8008468:	333b      	adds	r3, #59	; 0x3b
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	212c      	movs	r1, #44	; 0x2c
 8008476:	fb01 f303 	mul.w	r3, r1, r3
 800847a:	4413      	add	r3, r2
 800847c:	3354      	adds	r3, #84	; 0x54
 800847e:	78ba      	ldrb	r2, [r7, #2]
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	e008      	b.n	8008496 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	212c      	movs	r1, #44	; 0x2c
 800848a:	fb01 f303 	mul.w	r3, r1, r3
 800848e:	4413      	add	r3, r2
 8008490:	3355      	adds	r3, #85	; 0x55
 8008492:	78ba      	ldrb	r2, [r7, #2]
 8008494:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d817      	bhi.n	80084e8 <USBH_Get_USB_Status+0x44>
 80084b8:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <USBH_Get_USB_Status+0x1c>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084d7 	.word	0x080084d7
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	080084e3 	.word	0x080084e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
    break;
 80084d4:	e00b      	b.n	80084ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80084d6:	2302      	movs	r3, #2
 80084d8:	73fb      	strb	r3, [r7, #15]
    break;
 80084da:	e008      	b.n	80084ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
    break;
 80084e0:	e005      	b.n	80084ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80084e2:	2302      	movs	r3, #2
 80084e4:	73fb      	strb	r3, [r7, #15]
    break;
 80084e6:	e002      	b.n	80084ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80084e8:	2302      	movs	r3, #2
 80084ea:	73fb      	strb	r3, [r7, #15]
    break;
 80084ec:	bf00      	nop
  }
  return usb_status;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
 8008514:	e001      	b.n	800851a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008516:	2301      	movs	r3, #1
 8008518:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	461a      	mov	r2, r3
 800851e:	2101      	movs	r1, #1
 8008520:	4803      	ldr	r0, [pc, #12]	; (8008530 <MX_DriverVbusFS+0x34>)
 8008522:	f7f9 ffe7 	bl	80024f4 <HAL_GPIO_WritePin>
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40020800 	.word	0x40020800

08008534 <malloc>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <malloc+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f000 b82b 	b.w	8008594 <_malloc_r>
 800853e:	bf00      	nop
 8008540:	20000078 	.word	0x20000078

08008544 <free>:
 8008544:	4b02      	ldr	r3, [pc, #8]	; (8008550 <free+0xc>)
 8008546:	4601      	mov	r1, r0
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f000 b8f3 	b.w	8008734 <_free_r>
 800854e:	bf00      	nop
 8008550:	20000078 	.word	0x20000078

08008554 <sbrk_aligned>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4e0e      	ldr	r6, [pc, #56]	; (8008590 <sbrk_aligned+0x3c>)
 8008558:	460c      	mov	r4, r1
 800855a:	6831      	ldr	r1, [r6, #0]
 800855c:	4605      	mov	r5, r0
 800855e:	b911      	cbnz	r1, 8008566 <sbrk_aligned+0x12>
 8008560:	f000 f8ac 	bl	80086bc <_sbrk_r>
 8008564:	6030      	str	r0, [r6, #0]
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f000 f8a7 	bl	80086bc <_sbrk_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d00a      	beq.n	8008588 <sbrk_aligned+0x34>
 8008572:	1cc4      	adds	r4, r0, #3
 8008574:	f024 0403 	bic.w	r4, r4, #3
 8008578:	42a0      	cmp	r0, r4
 800857a:	d007      	beq.n	800858c <sbrk_aligned+0x38>
 800857c:	1a21      	subs	r1, r4, r0
 800857e:	4628      	mov	r0, r5
 8008580:	f000 f89c 	bl	80086bc <_sbrk_r>
 8008584:	3001      	adds	r0, #1
 8008586:	d101      	bne.n	800858c <sbrk_aligned+0x38>
 8008588:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800858c:	4620      	mov	r0, r4
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	2000096c 	.word	0x2000096c

08008594 <_malloc_r>:
 8008594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008598:	1ccd      	adds	r5, r1, #3
 800859a:	f025 0503 	bic.w	r5, r5, #3
 800859e:	3508      	adds	r5, #8
 80085a0:	2d0c      	cmp	r5, #12
 80085a2:	bf38      	it	cc
 80085a4:	250c      	movcc	r5, #12
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	4607      	mov	r7, r0
 80085aa:	db01      	blt.n	80085b0 <_malloc_r+0x1c>
 80085ac:	42a9      	cmp	r1, r5
 80085ae:	d905      	bls.n	80085bc <_malloc_r+0x28>
 80085b0:	230c      	movs	r3, #12
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	2600      	movs	r6, #0
 80085b6:	4630      	mov	r0, r6
 80085b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008690 <_malloc_r+0xfc>
 80085c0:	f000 f868 	bl	8008694 <__malloc_lock>
 80085c4:	f8d8 3000 	ldr.w	r3, [r8]
 80085c8:	461c      	mov	r4, r3
 80085ca:	bb5c      	cbnz	r4, 8008624 <_malloc_r+0x90>
 80085cc:	4629      	mov	r1, r5
 80085ce:	4638      	mov	r0, r7
 80085d0:	f7ff ffc0 	bl	8008554 <sbrk_aligned>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	4604      	mov	r4, r0
 80085d8:	d155      	bne.n	8008686 <_malloc_r+0xf2>
 80085da:	f8d8 4000 	ldr.w	r4, [r8]
 80085de:	4626      	mov	r6, r4
 80085e0:	2e00      	cmp	r6, #0
 80085e2:	d145      	bne.n	8008670 <_malloc_r+0xdc>
 80085e4:	2c00      	cmp	r4, #0
 80085e6:	d048      	beq.n	800867a <_malloc_r+0xe6>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	4631      	mov	r1, r6
 80085ec:	4638      	mov	r0, r7
 80085ee:	eb04 0903 	add.w	r9, r4, r3
 80085f2:	f000 f863 	bl	80086bc <_sbrk_r>
 80085f6:	4581      	cmp	r9, r0
 80085f8:	d13f      	bne.n	800867a <_malloc_r+0xe6>
 80085fa:	6821      	ldr	r1, [r4, #0]
 80085fc:	1a6d      	subs	r5, r5, r1
 80085fe:	4629      	mov	r1, r5
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ffa7 	bl	8008554 <sbrk_aligned>
 8008606:	3001      	adds	r0, #1
 8008608:	d037      	beq.n	800867a <_malloc_r+0xe6>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	442b      	add	r3, r5
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	f8d8 3000 	ldr.w	r3, [r8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d038      	beq.n	800868a <_malloc_r+0xf6>
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	42a2      	cmp	r2, r4
 800861c:	d12b      	bne.n	8008676 <_malloc_r+0xe2>
 800861e:	2200      	movs	r2, #0
 8008620:	605a      	str	r2, [r3, #4]
 8008622:	e00f      	b.n	8008644 <_malloc_r+0xb0>
 8008624:	6822      	ldr	r2, [r4, #0]
 8008626:	1b52      	subs	r2, r2, r5
 8008628:	d41f      	bmi.n	800866a <_malloc_r+0xd6>
 800862a:	2a0b      	cmp	r2, #11
 800862c:	d917      	bls.n	800865e <_malloc_r+0xca>
 800862e:	1961      	adds	r1, r4, r5
 8008630:	42a3      	cmp	r3, r4
 8008632:	6025      	str	r5, [r4, #0]
 8008634:	bf18      	it	ne
 8008636:	6059      	strne	r1, [r3, #4]
 8008638:	6863      	ldr	r3, [r4, #4]
 800863a:	bf08      	it	eq
 800863c:	f8c8 1000 	streq.w	r1, [r8]
 8008640:	5162      	str	r2, [r4, r5]
 8008642:	604b      	str	r3, [r1, #4]
 8008644:	4638      	mov	r0, r7
 8008646:	f104 060b 	add.w	r6, r4, #11
 800864a:	f000 f829 	bl	80086a0 <__malloc_unlock>
 800864e:	f026 0607 	bic.w	r6, r6, #7
 8008652:	1d23      	adds	r3, r4, #4
 8008654:	1af2      	subs	r2, r6, r3
 8008656:	d0ae      	beq.n	80085b6 <_malloc_r+0x22>
 8008658:	1b9b      	subs	r3, r3, r6
 800865a:	50a3      	str	r3, [r4, r2]
 800865c:	e7ab      	b.n	80085b6 <_malloc_r+0x22>
 800865e:	42a3      	cmp	r3, r4
 8008660:	6862      	ldr	r2, [r4, #4]
 8008662:	d1dd      	bne.n	8008620 <_malloc_r+0x8c>
 8008664:	f8c8 2000 	str.w	r2, [r8]
 8008668:	e7ec      	b.n	8008644 <_malloc_r+0xb0>
 800866a:	4623      	mov	r3, r4
 800866c:	6864      	ldr	r4, [r4, #4]
 800866e:	e7ac      	b.n	80085ca <_malloc_r+0x36>
 8008670:	4634      	mov	r4, r6
 8008672:	6876      	ldr	r6, [r6, #4]
 8008674:	e7b4      	b.n	80085e0 <_malloc_r+0x4c>
 8008676:	4613      	mov	r3, r2
 8008678:	e7cc      	b.n	8008614 <_malloc_r+0x80>
 800867a:	230c      	movs	r3, #12
 800867c:	603b      	str	r3, [r7, #0]
 800867e:	4638      	mov	r0, r7
 8008680:	f000 f80e 	bl	80086a0 <__malloc_unlock>
 8008684:	e797      	b.n	80085b6 <_malloc_r+0x22>
 8008686:	6025      	str	r5, [r4, #0]
 8008688:	e7dc      	b.n	8008644 <_malloc_r+0xb0>
 800868a:	605b      	str	r3, [r3, #4]
 800868c:	deff      	udf	#255	; 0xff
 800868e:	bf00      	nop
 8008690:	20000968 	.word	0x20000968

08008694 <__malloc_lock>:
 8008694:	4801      	ldr	r0, [pc, #4]	; (800869c <__malloc_lock+0x8>)
 8008696:	f000 b84b 	b.w	8008730 <__retarget_lock_acquire_recursive>
 800869a:	bf00      	nop
 800869c:	20000aac 	.word	0x20000aac

080086a0 <__malloc_unlock>:
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <__malloc_unlock+0x8>)
 80086a2:	f000 b846 	b.w	8008732 <__retarget_lock_release_recursive>
 80086a6:	bf00      	nop
 80086a8:	20000aac 	.word	0x20000aac

080086ac <memset>:
 80086ac:	4402      	add	r2, r0
 80086ae:	4603      	mov	r3, r0
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d100      	bne.n	80086b6 <memset+0xa>
 80086b4:	4770      	bx	lr
 80086b6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ba:	e7f9      	b.n	80086b0 <memset+0x4>

080086bc <_sbrk_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_sbrk_r+0x1c>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7f8 fca8 	bl	800101c <_sbrk>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_sbrk_r+0x1a>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_sbrk_r+0x1a>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	20000aa8 	.word	0x20000aa8

080086dc <__errno>:
 80086dc:	4b01      	ldr	r3, [pc, #4]	; (80086e4 <__errno+0x8>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	20000078 	.word	0x20000078

080086e8 <__libc_init_array>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	4d0d      	ldr	r5, [pc, #52]	; (8008720 <__libc_init_array+0x38>)
 80086ec:	4c0d      	ldr	r4, [pc, #52]	; (8008724 <__libc_init_array+0x3c>)
 80086ee:	1b64      	subs	r4, r4, r5
 80086f0:	10a4      	asrs	r4, r4, #2
 80086f2:	2600      	movs	r6, #0
 80086f4:	42a6      	cmp	r6, r4
 80086f6:	d109      	bne.n	800870c <__libc_init_array+0x24>
 80086f8:	4d0b      	ldr	r5, [pc, #44]	; (8008728 <__libc_init_array+0x40>)
 80086fa:	4c0c      	ldr	r4, [pc, #48]	; (800872c <__libc_init_array+0x44>)
 80086fc:	f000 f866 	bl	80087cc <_init>
 8008700:	1b64      	subs	r4, r4, r5
 8008702:	10a4      	asrs	r4, r4, #2
 8008704:	2600      	movs	r6, #0
 8008706:	42a6      	cmp	r6, r4
 8008708:	d105      	bne.n	8008716 <__libc_init_array+0x2e>
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008710:	4798      	blx	r3
 8008712:	3601      	adds	r6, #1
 8008714:	e7ee      	b.n	80086f4 <__libc_init_array+0xc>
 8008716:	f855 3b04 	ldr.w	r3, [r5], #4
 800871a:	4798      	blx	r3
 800871c:	3601      	adds	r6, #1
 800871e:	e7f2      	b.n	8008706 <__libc_init_array+0x1e>
 8008720:	08008810 	.word	0x08008810
 8008724:	08008810 	.word	0x08008810
 8008728:	08008810 	.word	0x08008810
 800872c:	08008814 	.word	0x08008814

08008730 <__retarget_lock_acquire_recursive>:
 8008730:	4770      	bx	lr

08008732 <__retarget_lock_release_recursive>:
 8008732:	4770      	bx	lr

08008734 <_free_r>:
 8008734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008736:	2900      	cmp	r1, #0
 8008738:	d044      	beq.n	80087c4 <_free_r+0x90>
 800873a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873e:	9001      	str	r0, [sp, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f1a1 0404 	sub.w	r4, r1, #4
 8008746:	bfb8      	it	lt
 8008748:	18e4      	addlt	r4, r4, r3
 800874a:	f7ff ffa3 	bl	8008694 <__malloc_lock>
 800874e:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <_free_r+0x94>)
 8008750:	9801      	ldr	r0, [sp, #4]
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	b933      	cbnz	r3, 8008764 <_free_r+0x30>
 8008756:	6063      	str	r3, [r4, #4]
 8008758:	6014      	str	r4, [r2, #0]
 800875a:	b003      	add	sp, #12
 800875c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008760:	f7ff bf9e 	b.w	80086a0 <__malloc_unlock>
 8008764:	42a3      	cmp	r3, r4
 8008766:	d908      	bls.n	800877a <_free_r+0x46>
 8008768:	6825      	ldr	r5, [r4, #0]
 800876a:	1961      	adds	r1, r4, r5
 800876c:	428b      	cmp	r3, r1
 800876e:	bf01      	itttt	eq
 8008770:	6819      	ldreq	r1, [r3, #0]
 8008772:	685b      	ldreq	r3, [r3, #4]
 8008774:	1949      	addeq	r1, r1, r5
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	e7ed      	b.n	8008756 <_free_r+0x22>
 800877a:	461a      	mov	r2, r3
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	b10b      	cbz	r3, 8008784 <_free_r+0x50>
 8008780:	42a3      	cmp	r3, r4
 8008782:	d9fa      	bls.n	800877a <_free_r+0x46>
 8008784:	6811      	ldr	r1, [r2, #0]
 8008786:	1855      	adds	r5, r2, r1
 8008788:	42a5      	cmp	r5, r4
 800878a:	d10b      	bne.n	80087a4 <_free_r+0x70>
 800878c:	6824      	ldr	r4, [r4, #0]
 800878e:	4421      	add	r1, r4
 8008790:	1854      	adds	r4, r2, r1
 8008792:	42a3      	cmp	r3, r4
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	d1e0      	bne.n	800875a <_free_r+0x26>
 8008798:	681c      	ldr	r4, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	6053      	str	r3, [r2, #4]
 800879e:	440c      	add	r4, r1
 80087a0:	6014      	str	r4, [r2, #0]
 80087a2:	e7da      	b.n	800875a <_free_r+0x26>
 80087a4:	d902      	bls.n	80087ac <_free_r+0x78>
 80087a6:	230c      	movs	r3, #12
 80087a8:	6003      	str	r3, [r0, #0]
 80087aa:	e7d6      	b.n	800875a <_free_r+0x26>
 80087ac:	6825      	ldr	r5, [r4, #0]
 80087ae:	1961      	adds	r1, r4, r5
 80087b0:	428b      	cmp	r3, r1
 80087b2:	bf04      	itt	eq
 80087b4:	6819      	ldreq	r1, [r3, #0]
 80087b6:	685b      	ldreq	r3, [r3, #4]
 80087b8:	6063      	str	r3, [r4, #4]
 80087ba:	bf04      	itt	eq
 80087bc:	1949      	addeq	r1, r1, r5
 80087be:	6021      	streq	r1, [r4, #0]
 80087c0:	6054      	str	r4, [r2, #4]
 80087c2:	e7ca      	b.n	800875a <_free_r+0x26>
 80087c4:	b003      	add	sp, #12
 80087c6:	bd30      	pop	{r4, r5, pc}
 80087c8:	20000968 	.word	0x20000968

080087cc <_init>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr

080087d8 <_fini>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr
