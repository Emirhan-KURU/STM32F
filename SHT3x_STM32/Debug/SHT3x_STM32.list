
SHT3x_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a17c  0800a17c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a17c  0800a17c  0001a17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a184  0800a184  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000094c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009dc  200009dc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015ab0  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c58  00000000  00000000  00035bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001208  00000000  00000000  00039810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dac  00000000  00000000  0003aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024b51  00000000  00000000  0003b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000179c9  00000000  00000000  00060315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cce82  00000000  00000000  00077cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005360  00000000  00000000  00144b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00149ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a078 	.word	0x0800a078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a078 	.word	0x0800a078

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fe0e 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f82e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f952 	bl	8000820 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f928 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000580:	f000 f892 	bl	80006a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000584:	f000 f8be 	bl	8000704 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000588:	f000 f8ec 	bl	8000764 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800058c:	f008 face 	bl	8008b2c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  if (!sht3x_init(&handle)) {
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <main+0x5c>)
 8000592:	f000 fab9 	bl	8000b08 <sht3x_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000596:	f008 faef 	bl	8008b78 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // Read temperature and humidity.

    sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity);
 800059a:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <main+0x60>)
 800059c:	490c      	ldr	r1, [pc, #48]	; (80005d0 <main+0x64>)
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <main+0x5c>)
 80005a0:	f000 faf2 	bl	8000b88 <sht3x_read_temperature_and_humidity>
    //printf("Initial temperature: %.2fC, humidity: %.2f%%RH\n\r", temperature, humidity);

    // Enable heater for two seconds.
    sht3x_set_header_enable(&handle, true);
 80005a4:	2101      	movs	r1, #1
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <main+0x5c>)
 80005a8:	f000 fb6a 	bl	8000c80 <sht3x_set_header_enable>
    HAL_Delay(2000);
 80005ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b0:	f000 fe60 	bl	8001274 <HAL_Delay>
    sht3x_set_header_enable(&handle, false);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <main+0x5c>)
 80005b8:	f000 fb62 	bl	8000c80 <sht3x_set_header_enable>

    // Read temperature and humidity again.
    sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity);
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <main+0x60>)
 80005be:	4904      	ldr	r1, [pc, #16]	; (80005d0 <main+0x64>)
 80005c0:	4801      	ldr	r0, [pc, #4]	; (80005c8 <main+0x5c>)
 80005c2:	f000 fae1 	bl	8000b88 <sht3x_read_temperature_and_humidity>
    MX_USB_HOST_Process();
 80005c6:	e7e6      	b.n	8000596 <main+0x2a>
 80005c8:	20000000 	.word	0x20000000
 80005cc:	200001a4 	.word	0x200001a4
 80005d0:	200001a0 	.word	0x200001a0

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f008 ff89 	bl	80094fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000648:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000652:	2307      	movs	r3, #7
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fc44 	bl	8004ee8 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000666:	f000 f9d9 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fea5 	bl	80053d8 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000694:	f000 f9c2 	bl	8000a1c <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_I2C1_Init+0x54>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_I2C1_Init+0x58>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e6:	f002 fcbb 	bl	8003060 <HAL_I2C_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 f994 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000ac 	.word	0x200000ac
 80006fc:	40005400 	.word	0x40005400
 8000700:	00061a80 	.word	0x00061a80

08000704 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_I2S3_Init+0x54>)
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <MX_I2S3_Init+0x58>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_I2S3_Init+0x54>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_I2S3_Init+0x54>)
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <MX_I2S3_Init+0x5c>)
 800072e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_I2S3_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2S3_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_I2S3_Init+0x54>)
 8000744:	f003 ff30 	bl	80045a8 <HAL_I2S_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800074e:	f000 f965 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000100 	.word	0x20000100
 800075c:	40003c00 	.word	0x40003c00
 8000760:	00017700 	.word	0x00017700

08000764 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_SPI1_Init+0x64>)
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_SPI1_Init+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000774:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007b0:	220a      	movs	r2, #10
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007b6:	f005 f95b 	bl	8005a70 <HAL_SPI_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c0:	f000 f92c 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000148 	.word	0x20000148
 80007cc:	40013000 	.word	0x40013000

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_DMA_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <MX_DMA_Init+0x4c>)
 80007e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_DMA_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	200b      	movs	r0, #11
 80007f8:	f000 fe3b 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007fc:	200b      	movs	r0, #11
 80007fe:	f000 fe54 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2011      	movs	r0, #17
 8000808:	f000 fe33 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800080c:	2011      	movs	r0, #17
 800080e:	f000 fe4c 	bl	80014aa <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b72      	ldr	r3, [pc, #456]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a71      	ldr	r2, [pc, #452]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b6f      	ldr	r3, [pc, #444]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b6b      	ldr	r3, [pc, #428]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a6a      	ldr	r2, [pc, #424]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b68      	ldr	r3, [pc, #416]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a63      	ldr	r2, [pc, #396]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b61      	ldr	r3, [pc, #388]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a5c      	ldr	r2, [pc, #368]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b5a      	ldr	r3, [pc, #360]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a55      	ldr	r2, [pc, #340]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a4e      	ldr	r2, [pc, #312]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4849      	ldr	r0, [pc, #292]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 80008e4:	f000 ff98 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	4847      	ldr	r0, [pc, #284]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80008ee:	f000 ff93 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f2:	2200      	movs	r2, #0
 80008f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f8:	4845      	ldr	r0, [pc, #276]	; (8000a10 <MX_GPIO_Init+0x1f0>)
 80008fa:	f000 ff8d 	bl	8001818 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 8000916:	f000 fde3 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4836      	ldr	r0, [pc, #216]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 8000932:	f000 fdd5 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000936:	2308      	movs	r3, #8
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	482e      	ldr	r0, [pc, #184]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 8000952:	f000 fdc5 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	482a      	ldr	r0, [pc, #168]	; (8000a14 <MX_GPIO_Init+0x1f4>)
 800096c:	f000 fdb8 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000970:	2304      	movs	r3, #4
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4825      	ldr	r0, [pc, #148]	; (8000a18 <MX_GPIO_Init+0x1f8>)
 8000984:	f000 fdac 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099a:	2305      	movs	r3, #5
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	481c      	ldr	r0, [pc, #112]	; (8000a18 <MX_GPIO_Init+0x1f8>)
 80009a6:	f000 fd9b 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009aa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_GPIO_Init+0x1f0>)
 80009c4:	f000 fd8c 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c8:	2320      	movs	r3, #32
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_GPIO_Init+0x1f0>)
 80009dc:	f000 fd80 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 80009f6:	f000 fd73 	bl	80014e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>

08000a26 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000a30:	23ff      	movs	r3, #255	; 0xff
 8000a32:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	e020      	b.n	8000a7c <calculate_crc+0x56>
		crc ^= data[i];
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	4053      	eors	r3, r2
 8000a46:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e010      	b.n	8000a70 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	da06      	bge.n	8000a64 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	e002      	b.n	8000a6a <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b07      	cmp	r3, #7
 8000a74:	d9eb      	bls.n	8000a4e <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3da      	bcc.n	8000a3a <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af02      	add	r7, sp, #8
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	733b      	strb	r3, [r7, #12]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	889b      	ldrh	r3, [r3, #4]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	b299      	uxth	r1, r3
 8000aba:	f107 020c 	add.w	r2, r7, #12
 8000abe:	231e      	movs	r3, #30
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f002 fc10 	bl	80032e8 <HAL_I2C_Master_Transmit>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <sht3x_send_command+0x42>
	}

	return true;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b29b      	uxth	r3, r3
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af04      	add	r7, sp, #16
 8000b0e:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d005      	beq.n	8000b26 <sht3x_init+0x1e>
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <sht3x_init+0x74>)
 8000b1c:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <sht3x_init+0x78>)
 8000b1e:	2138      	movs	r1, #56	; 0x38
 8000b20:	4818      	ldr	r0, [pc, #96]	; (8000b84 <sht3x_init+0x7c>)
 8000b22:	f008 fb0b 	bl	800913c <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	889b      	ldrh	r3, [r3, #4]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b299      	uxth	r1, r3
 8000b32:	231e      	movs	r3, #30
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	2303      	movs	r3, #3
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2302      	movs	r3, #2
 8000b42:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8000b46:	f002 fef3 	bl	8003930 <HAL_I2C_Mem_Read>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000b50:	2300      	movs	r3, #0
 8000b52:	e00e      	b.n	8000b72 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff63 	bl	8000a26 <calculate_crc>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d001      	beq.n	8000b70 <sht3x_init+0x68>
		return false;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e000      	b.n	8000b72 <sht3x_init+0x6a>
	}

	return true;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	0800a090 	.word	0x0800a090
 8000b80:	0800a0e8 	.word	0x0800a0e8
 8000b84:	0800a0d0 	.word	0x0800a0d0

08000b88 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000b94:	f642 4106 	movw	r1, #11270	; 0x2c06
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff ff7a 	bl	8000a92 <sht3x_send_command>

	HAL_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fb68 	bl	8001274 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	889b      	ldrh	r3, [r3, #4]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	b299      	uxth	r1, r3
 8000bb0:	f107 0214 	add.w	r2, r7, #20
 8000bb4:	231e      	movs	r3, #30
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2306      	movs	r3, #6
 8000bba:	f002 fc93 	bl	80034e4 <HAL_I2C_Master_Receive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e04f      	b.n	8000c68 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff29 	bl	8000a26 <calculate_crc>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	3303      	adds	r3, #3
 8000bde:	2102      	movs	r1, #2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff20 	bl	8000a26 <calculate_crc>
 8000be6:	4603      	mov	r3, r0
 8000be8:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8000bea:	7dbb      	ldrb	r3, [r7, #22]
 8000bec:	7ffa      	ldrb	r2, [r7, #31]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d103      	bne.n	8000bfa <sht3x_read_temperature_and_humidity+0x72>
 8000bf2:	7e7b      	ldrb	r3, [r7, #25]
 8000bf4:	7fba      	ldrb	r2, [r7, #30]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d001      	beq.n	8000bfe <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e034      	b.n	8000c68 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8000bfe:	7d3b      	ldrb	r3, [r7, #20]
 8000c00:	7d7a      	ldrb	r2, [r7, #21]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff69 	bl	8000adc <uint8_to_uint16>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	7e3a      	ldrb	r2, [r7, #24]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff61 	bl	8000adc <uint8_to_uint16>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8000c1e:	8bbb      	ldrh	r3, [r7, #28]
 8000c20:	ee07 3a90 	vmov	s15, r3
 8000c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c28:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000c70 <sht3x_read_temperature_and_humidity+0xe8>
 8000c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c30:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000c74 <sht3x_read_temperature_and_humidity+0xec>
 8000c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c38:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000c78 <sht3x_read_temperature_and_humidity+0xf0>
 8000c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8000c46:	8b7b      	ldrh	r3, [r7, #26]
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c50:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000c7c <sht3x_read_temperature_and_humidity+0xf4>
 8000c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c58:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000c74 <sht3x_read_temperature_and_humidity+0xec>
 8000c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	432f0000 	.word	0x432f0000
 8000c74:	477fff00 	.word	0x477fff00
 8000c78:	42340000 	.word	0x42340000
 8000c7c:	42c80000 	.word	0x42c80000

08000c80 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
	if (enable) {
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <sht3x_set_header_enable+0x20>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 8000c92:	f243 016d 	movw	r1, #12397	; 0x306d
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fefb 	bl	8000a92 <sht3x_send_command>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	e005      	b.n	8000cac <sht3x_set_header_enable+0x2c>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 8000ca0:	f243 0166 	movw	r1, #12390	; 0x3066
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fef4 	bl	8000a92 <sht3x_send_command>
 8000caa:	4603      	mov	r3, r0
	}
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cf2:	2007      	movs	r0, #7
 8000cf4:	f000 fbb2 	bl	800145c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_I2C_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12c      	bne.n	8000d80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d48:	2312      	movs	r3, #18
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d54:	2304      	movs	r3, #4
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <HAL_I2C_MspInit+0x8c>)
 8000d60:	f000 fbbe 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400

08000d94 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <HAL_I2S_MspInit+0xf0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d15a      	bne.n	8000e7a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000dc8:	23c0      	movs	r3, #192	; 0xc0
 8000dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fd0b 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000de0:	f7ff fe1c 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_I2S_MspInit+0xf4>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	480e      	ldr	r0, [pc, #56]	; (8000e8c <HAL_I2S_MspInit+0xf8>)
 8000e54:	f000 fb44 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <HAL_I2S_MspInit+0xfc>)
 8000e76:	f000 fb33 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3738      	adds	r7, #56	; 0x38
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40003c00 	.word	0x40003c00
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020800 	.word	0x40020800

08000e94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_SPI_MspInit+0x84>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12b      	bne.n	8000f0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_SPI_MspInit+0x88>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <HAL_SPI_MspInit+0x88>)
 8000ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_SPI_MspInit+0x88>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_SPI_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_SPI_MspInit+0x88>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_SPI_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eee:	23e0      	movs	r3, #224	; 0xe0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efe:	2305      	movs	r3, #5
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	f000 fae9 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40013000 	.word	0x40013000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f960 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <OTG_FS_IRQHandler+0x10>)
 8000f7e:	f000 fecf 	bl	8001d20 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000058c 	.word	0x2000058c

08000f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return 1;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_kill>:

int _kill(int pid, int sig)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fa6:	f008 fb07 	bl	80095b8 <__errno>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2216      	movs	r2, #22
 8000fae:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_exit>:

void _exit (int status)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffe7 	bl	8000f9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fce:	e7fe      	b.n	8000fce <_exit+0x12>

08000fd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00a      	b.n	8000ff8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe2:	f3af 8000 	nop.w
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf0      	blt.n	8000fe2 <_read+0x12>
  }

  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e009      	b.n	8001030 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf1      	blt.n	800101c <_write+0x12>
  }
  return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_close>:

int _close(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106a:	605a      	str	r2, [r3, #4]
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_isatty>:

int _isatty(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f008 fa6c 	bl	80095b8 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20020000 	.word	0x20020000
 800110c:	00000400 	.word	0x00000400
 8001110:	200001a8 	.word	0x200001a8
 8001114:	200009e0 	.word	0x200009e0

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	; (8001188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001166:	f7ff ffd7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f008 fa2b 	bl	80095c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff f9fd 	bl	800056c <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001180:	0800a18c 	.word	0x0800a18c
  ldr r2, =_sbss
 8001184:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001188:	200009dc 	.word	0x200009dc

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f94f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fd76 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f967 	bl	80014c6 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001210:	f000 f92f 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000008 	.word	0x20000008
 800122c:	20000010 	.word	0x20000010
 8001230:	2000000c 	.word	0x2000000c

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000010 	.word	0x20000010
 8001258:	200001ac 	.word	0x200001ac

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200001ac 	.word	0x200001ac

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000010 	.word	0x20000010

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff3e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e16b      	b.n	80017d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 815a 	bne.w	80017ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	2b02      	cmp	r3, #2
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80b4 	beq.w	80017ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_GPIO_Init+0x30c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a5f      	ldr	r2, [pc, #380]	; (80017ec <HAL_GPIO_Init+0x30c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <HAL_GPIO_Init+0x310>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_GPIO_Init+0x314>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02b      	beq.n	8001706 <HAL_GPIO_Init+0x226>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a51      	ldr	r2, [pc, #324]	; (80017f8 <HAL_GPIO_Init+0x318>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x222>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a50      	ldr	r2, [pc, #320]	; (80017fc <HAL_GPIO_Init+0x31c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x21e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4f      	ldr	r2, [pc, #316]	; (8001800 <HAL_GPIO_Init+0x320>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x21a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <HAL_GPIO_Init+0x324>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x216>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x328>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x212>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_GPIO_Init+0x32c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <HAL_GPIO_Init+0x330>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x20a>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e00e      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ea:	2308      	movs	r3, #8
 80016ec:	e00c      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ee:	2306      	movs	r3, #6
 80016f0:	e00a      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f2:	2305      	movs	r3, #5
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001706:	2300      	movs	r3, #0
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f002 0203 	and.w	r2, r2, #3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_GPIO_Init+0x310>)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_GPIO_Init+0x334>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <HAL_GPIO_Init+0x334>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_GPIO_Init+0x334>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001774:	4a27      	ldr	r2, [pc, #156]	; (8001814 <HAL_GPIO_Init+0x334>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_GPIO_Init+0x334>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179e:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_GPIO_Init+0x334>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_GPIO_Init+0x334>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_GPIO_Init+0x334>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f67f ae90 	bls.w	80014fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40021400 	.word	0x40021400
 800180c:	40021800 	.word	0x40021800
 8001810:	40021c00 	.word	0x40021c00
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800184a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184c:	b08f      	sub	sp, #60	; 0x3c
 800184e:	af0a      	add	r7, sp, #40	; 0x28
 8001850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e054      	b.n	8001906 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f007 f9b6 	bl	8008be8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f004 f9e3 	bl	8005c66 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	687e      	ldr	r6, [r7, #4]
 80018a8:	466d      	mov	r5, sp
 80018aa:	f106 0410 	add.w	r4, r6, #16
 80018ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80018be:	1d33      	adds	r3, r6, #4
 80018c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f004 f95d 	bl	8005b82 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 f9da 	bl	8005c88 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	687e      	ldr	r6, [r7, #4]
 80018dc:	466d      	mov	r5, sp
 80018de:	f106 0410 	add.w	r4, r6, #16
 80018e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80018f2:	1d33      	adds	r3, r6, #4
 80018f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f6:	6838      	ldr	r0, [r7, #0]
 80018f8:	f004 fb62 	bl	8005fc0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800190e:	b590      	push	{r4, r7, lr}
 8001910:	b089      	sub	sp, #36	; 0x24
 8001912:	af04      	add	r7, sp, #16
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	4608      	mov	r0, r1
 8001918:	4611      	mov	r1, r2
 800191a:	461a      	mov	r2, r3
 800191c:	4603      	mov	r3, r0
 800191e:	70fb      	strb	r3, [r7, #3]
 8001920:	460b      	mov	r3, r1
 8001922:	70bb      	strb	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_HCD_HC_Init+0x28>
 8001932:	2302      	movs	r3, #2
 8001934:	e076      	b.n	8001a24 <HAL_HCD_HC_Init+0x116>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	333d      	adds	r3, #61	; 0x3d
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3338      	adds	r3, #56	; 0x38
 800195e:	787a      	ldrb	r2, [r7, #1]
 8001960:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3340      	adds	r3, #64	; 0x40
 8001970:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001972:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3339      	adds	r3, #57	; 0x39
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	333f      	adds	r3, #63	; 0x3f
 8001994:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001998:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	78ba      	ldrb	r2, [r7, #2]
 800199e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019a2:	b2d0      	uxtb	r0, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	333a      	adds	r3, #58	; 0x3a
 80019b0:	4602      	mov	r2, r0
 80019b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da09      	bge.n	80019d0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	333b      	adds	r3, #59	; 0x3b
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e008      	b.n	80019e2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	333b      	adds	r3, #59	; 0x3b
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	333c      	adds	r3, #60	; 0x3c
 80019f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	787c      	ldrb	r4, [r7, #1]
 80019fc:	78ba      	ldrb	r2, [r7, #2]
 80019fe:	78f9      	ldrb	r1, [r7, #3]
 8001a00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4623      	mov	r3, r4
 8001a12:	f004 fc5b 	bl	80062cc <USB_HC_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_HCD_HC_Halt+0x1e>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e00f      	b.n	8001a6a <HAL_HCD_HC_Halt+0x3e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 feab 	bl	80067b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	70fb      	strb	r3, [r7, #3]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70bb      	strb	r3, [r7, #2]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	333b      	adds	r3, #59	; 0x3b
 8001a9c:	78ba      	ldrb	r2, [r7, #2]
 8001a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	333f      	adds	r3, #63	; 0x3f
 8001aae:	787a      	ldrb	r2, [r7, #1]
 8001ab0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ab2:	7c3b      	ldrb	r3, [r7, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d112      	bne.n	8001ade <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3342      	adds	r3, #66	; 0x42
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	333d      	adds	r3, #61	; 0x3d
 8001ad8:	7f3a      	ldrb	r2, [r7, #28]
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e008      	b.n	8001af0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3342      	adds	r3, #66	; 0x42
 8001aec:	2202      	movs	r2, #2
 8001aee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001af0:	787b      	ldrb	r3, [r7, #1]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	f200 80c6 	bhi.w	8001c84 <HAL_HCD_HC_SubmitRequest+0x210>
 8001af8:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001c71 	.word	0x08001c71
 8001b08:	08001b75 	.word	0x08001b75
 8001b0c:	08001bf3 	.word	0x08001bf3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b10:	7c3b      	ldrb	r3, [r7, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	f040 80b8 	bne.w	8001c88 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b18:	78bb      	ldrb	r3, [r7, #2]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80b4 	bne.w	8001c88 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b20:	8b3b      	ldrh	r3, [r7, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d108      	bne.n	8001b38 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3355      	adds	r3, #85	; 0x55
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3355      	adds	r3, #85	; 0x55
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3342      	adds	r3, #66	; 0x42
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b5e:	e093      	b.n	8001c88 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3342      	adds	r3, #66	; 0x42
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
      break;
 8001b72:	e089      	b.n	8001c88 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b74:	78bb      	ldrb	r3, [r7, #2]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11d      	bne.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3355      	adds	r3, #85	; 0x55
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3342      	adds	r3, #66	; 0x42
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ba0:	e073      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3342      	adds	r3, #66	; 0x42
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	701a      	strb	r2, [r3, #0]
      break;
 8001bb4:	e069      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3354      	adds	r3, #84	; 0x54
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	212c      	movs	r1, #44	; 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3342      	adds	r3, #66	; 0x42
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
      break;
 8001bdc:	e055      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	212c      	movs	r1, #44	; 0x2c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	3342      	adds	r3, #66	; 0x42
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]
      break;
 8001bf0:	e04b      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bf2:	78bb      	ldrb	r3, [r7, #2]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11d      	bne.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3355      	adds	r3, #85	; 0x55
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	3342      	adds	r3, #66	; 0x42
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c1e:	e034      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3342      	adds	r3, #66	; 0x42
 8001c2e:	2202      	movs	r2, #2
 8001c30:	701a      	strb	r2, [r3, #0]
      break;
 8001c32:	e02a      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	212c      	movs	r1, #44	; 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3354      	adds	r3, #84	; 0x54
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3342      	adds	r3, #66	; 0x42
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
      break;
 8001c5a:	e016      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	212c      	movs	r1, #44	; 0x2c
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	3342      	adds	r3, #66	; 0x42
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
      break;
 8001c6e:	e00c      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3342      	adds	r3, #66	; 0x42
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c84:	bf00      	nop
 8001c86:	e000      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c88:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3344      	adds	r3, #68	; 0x44
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	8b3a      	ldrh	r2, [r7, #24]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	202c      	movs	r0, #44	; 0x2c
 8001ca4:	fb00 f303 	mul.w	r3, r0, r3
 8001ca8:	440b      	add	r3, r1
 8001caa:	334c      	adds	r3, #76	; 0x4c
 8001cac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3360      	adds	r3, #96	; 0x60
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	3350      	adds	r3, #80	; 0x50
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3339      	adds	r3, #57	; 0x39
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3361      	adds	r3, #97	; 0x61
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	222c      	movs	r2, #44	; 0x2c
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	18d1      	adds	r1, r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f004 fbfe 	bl	8006510 <USB_HC_StartXfer>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop

08001d20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 f8ff 	bl	8005f3a <USB_GetMode>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	f040 80f6 	bne.w	8001f30 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 f8e3 	bl	8005f14 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80ec 	beq.w	8001f2e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 f8da 	bl	8005f14 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d6a:	d104      	bne.n	8001d76 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 f8ca 	bl	8005f14 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d8a:	d104      	bne.n	8001d96 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f8ba 	bl	8005f14 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001daa:	d104      	bne.n	8001db6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001db4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f8aa 	bl	8005f14 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d103      	bne.n	8001dd2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 f89c 	bl	8005f14 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de6:	d11c      	bne.n	8001e22 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001df0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e02:	2110      	movs	r1, #16
 8001e04:	6938      	ldr	r0, [r7, #16]
 8001e06:	f003 ff8b 	bl	8005d20 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e0a:	6938      	ldr	r0, [r7, #16]
 8001e0c:	f003 ffbc 	bl	8005d88 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 f992 	bl	8006140 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f006 ff61 	bl	8008ce4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 f874 	bl	8005f14 <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e36:	d102      	bne.n	8001e3e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f001 f89e 	bl	8002f7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 f866 	bl	8005f14 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d106      	bne.n	8001e60 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f006 ff2a 	bl	8008cac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 f855 	bl	8005f14 <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d101      	bne.n	8001e78 <HAL_HCD_IRQHandler+0x158>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_HCD_IRQHandler+0x15a>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0210 	bic.w	r2, r2, #16
 8001e8c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 ffa1 	bl	8002dd6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0210 	orr.w	r2, r2, #16
 8001ea2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 f833 	bl	8005f14 <USB_ReadInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eb8:	d13a      	bne.n	8001f30 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 fc68 	bl	8006794 <USB_HC_ReadInterrupt>
 8001ec4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e025      	b.n	8001f18 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d018      	beq.n	8001f12 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef6:	d106      	bne.n	8001f06 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8ab 	bl	800205a <HCD_HC_IN_IRQHandler>
 8001f04:	e005      	b.n	8001f12 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fbf9 	bl	8002704 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3d4      	bcc.n	8001ecc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2a:	615a      	str	r2, [r3, #20]
 8001f2c:	e000      	b.n	8001f30 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f2e:	bf00      	nop
    }
  }
}
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_HCD_Start+0x16>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e013      	b.n	8001f74 <HAL_HCD_Start+0x3e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 f954 	bl	8006208 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fe6d 	bl	8005c44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_HCD_Stop+0x16>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e00d      	b.n	8001fae <HAL_HCD_Stop+0x32>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fd42 	bl	8006a28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 f8f6 	bl	80061b4 <USB_ResetPort>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3360      	adds	r3, #96	; 0x60
 8001fec:	781b      	ldrb	r3, [r3, #0]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3350      	adds	r3, #80	; 0x50
 8002014:	681b      	ldr	r3, [r3, #0]
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f004 f93a 	bl	80062a8 <USB_GetCurrentFrame>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f004 f915 	bl	800627a <USB_GetHostSpeed>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d11a      	bne.n	80020c0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	461a      	mov	r2, r3
 8002098:	2304      	movs	r3, #4
 800209a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3361      	adds	r3, #97	; 0x61
 80020aa:	2206      	movs	r2, #6
 80020ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fb7c 	bl	80067b6 <USB_HC_Halt>
 80020be:	e0af      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d6:	d11b      	bne.n	8002110 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3361      	adds	r3, #97	; 0x61
 80020fa:	2207      	movs	r2, #7
 80020fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fb54 	bl	80067b6 <USB_HC_Halt>
 800210e:	e087      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b20      	cmp	r3, #32
 8002124:	d109      	bne.n	800213a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	2320      	movs	r3, #32
 8002136:	6093      	str	r3, [r2, #8]
 8002138:	e072      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b08      	cmp	r3, #8
 800214e:	d11a      	bne.n	8002186 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	2308      	movs	r3, #8
 8002160:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3361      	adds	r3, #97	; 0x61
 8002170:	2205      	movs	r2, #5
 8002172:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fb19 	bl	80067b6 <USB_HC_Halt>
 8002184:	e04c      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219c:	d11b      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3361      	adds	r3, #97	; 0x61
 80021c0:	2208      	movs	r2, #8
 80021c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 faf1 	bl	80067b6 <USB_HC_Halt>
 80021d4:	e024      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d119      	bne.n	8002220 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3361      	adds	r3, #97	; 0x61
 800220c:	2206      	movs	r2, #6
 800220e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f004 facb 	bl	80067b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002236:	d112      	bne.n	800225e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f004 fab7 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800225a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800225c:	e24e      	b.n	80026fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	f040 80df 	bne.w	8002434 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	3348      	adds	r3, #72	; 0x48
 800228c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	0159      	lsls	r1, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	440b      	add	r3, r1
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	202c      	movs	r0, #44	; 0x2c
 80022a8:	fb00 f303 	mul.w	r3, r0, r3
 80022ac:	440b      	add	r3, r1
 80022ae:	3350      	adds	r3, #80	; 0x50
 80022b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3361      	adds	r3, #97	; 0x61
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	335c      	adds	r3, #92	; 0x5c
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	461a      	mov	r2, r3
 80022e4:	2301      	movs	r3, #1
 80022e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	333f      	adds	r3, #63	; 0x3f
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	333f      	adds	r3, #63	; 0x3f
 800230a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800230c:	2b02      	cmp	r3, #2
 800230e:	d111      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fa4b 	bl	80067b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	461a      	mov	r2, r3
 800232e:	2310      	movs	r3, #16
 8002330:	6093      	str	r3, [r2, #8]
 8002332:	e03a      	b.n	80023aa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	333f      	adds	r3, #63	; 0x3f
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d009      	beq.n	800235c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	333f      	adds	r3, #63	; 0x3f
 8002356:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002358:	2b01      	cmp	r3, #1
 800235a:	d126      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	0151      	lsls	r1, r2, #5
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	440a      	add	r2, r1
 8002372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002376:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800237a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3360      	adds	r3, #96	; 0x60
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	b2d9      	uxtb	r1, r3
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	202c      	movs	r0, #44	; 0x2c
 8002398:	fb00 f303 	mul.w	r3, r0, r3
 800239c:	4413      	add	r3, r2
 800239e:	3360      	adds	r3, #96	; 0x60
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f006 fcab 	bl	8008d00 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d12b      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3348      	adds	r3, #72	; 0x48
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	202c      	movs	r0, #44	; 0x2c
 80023c8:	fb00 f202 	mul.w	r2, r0, r2
 80023cc:	440a      	add	r2, r1
 80023ce:	3240      	adds	r2, #64	; 0x40
 80023d0:	8812      	ldrh	r2, [r2, #0]
 80023d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 818e 	beq.w	80026fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3354      	adds	r3, #84	; 0x54
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2d8      	uxtb	r0, r3
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3354      	adds	r3, #84	; 0x54
 8002404:	4602      	mov	r2, r0
 8002406:	701a      	strb	r2, [r3, #0]
}
 8002408:	e178      	b.n	80026fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3354      	adds	r3, #84	; 0x54
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3354      	adds	r3, #84	; 0x54
 800242e:	4602      	mov	r2, r0
 8002430:	701a      	strb	r2, [r3, #0]
}
 8002432:	e163      	b.n	80026fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	f040 80f6 	bne.w	8002638 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3361      	adds	r3, #97	; 0x61
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d109      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3360      	adds	r3, #96	; 0x60
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e0c9      	b.n	8002608 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b05      	cmp	r3, #5
 8002486:	d109      	bne.n	800249c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3360      	adds	r3, #96	; 0x60
 8002496:	2205      	movs	r2, #5
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e0b5      	b.n	8002608 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3361      	adds	r3, #97	; 0x61
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d009      	beq.n	80024c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3361      	adds	r3, #97	; 0x61
 80024be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d150      	bne.n	8002566 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	335c      	adds	r3, #92	; 0x5c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	202c      	movs	r0, #44	; 0x2c
 80024dc:	fb00 f303 	mul.w	r3, r0, r3
 80024e0:	440b      	add	r3, r1
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	335c      	adds	r3, #92	; 0x5c
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d912      	bls.n	8002520 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	335c      	adds	r3, #92	; 0x5c
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3360      	adds	r3, #96	; 0x60
 800251a:	2204      	movs	r2, #4
 800251c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800251e:	e073      	b.n	8002608 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3360      	adds	r3, #96	; 0x60
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002548:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002550:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002564:	e050      	b.n	8002608 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3361      	adds	r3, #97	; 0x61
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d122      	bne.n	80025c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3360      	adds	r3, #96	; 0x60
 8002588:	2202      	movs	r2, #2
 800258a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e023      	b.n	8002608 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3361      	adds	r3, #97	; 0x61
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b07      	cmp	r3, #7
 80025d2:	d119      	bne.n	8002608 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	335c      	adds	r3, #92	; 0x5c
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	202c      	movs	r0, #44	; 0x2c
 80025ec:	fb00 f303 	mul.w	r3, r0, r3
 80025f0:	440b      	add	r3, r1
 80025f2:	335c      	adds	r3, #92	; 0x5c
 80025f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3360      	adds	r3, #96	; 0x60
 8002604:	2204      	movs	r2, #4
 8002606:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	2302      	movs	r3, #2
 8002618:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	b2d9      	uxtb	r1, r3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	202c      	movs	r0, #44	; 0x2c
 8002624:	fb00 f303 	mul.w	r3, r0, r3
 8002628:	4413      	add	r3, r2
 800262a:	3360      	adds	r3, #96	; 0x60
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f006 fb65 	bl	8008d00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002636:	e061      	b.n	80026fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b10      	cmp	r3, #16
 800264c:	d156      	bne.n	80026fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	333f      	adds	r3, #63	; 0x3f
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d111      	bne.n	8002686 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	335c      	adds	r3, #92	; 0x5c
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f004 f899 	bl	80067b6 <USB_HC_Halt>
 8002684:	e031      	b.n	80026ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	333f      	adds	r3, #63	; 0x3f
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	333f      	adds	r3, #63	; 0x3f
 80026a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d11d      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	335c      	adds	r3, #92	; 0x5c
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d110      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f866 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	2310      	movs	r3, #16
 80026fa:	6093      	str	r3, [r2, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d11a      	bne.n	800276a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	2304      	movs	r3, #4
 8002744:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3361      	adds	r3, #97	; 0x61
 8002754:	2206      	movs	r2, #6
 8002756:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f004 f827 	bl	80067b6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002768:	e331      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d12e      	bne.n	80027de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2320      	movs	r3, #32
 8002790:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333d      	adds	r3, #61	; 0x3d
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f040 8313 	bne.w	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	333d      	adds	r3, #61	; 0x3d
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3360      	adds	r3, #96	; 0x60
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 ffed 	bl	80067b6 <USB_HC_Halt>
}
 80027dc:	e2f7      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f4:	d112      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	461a      	mov	r2, r3
 8002804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002808:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f003 ffce 	bl	80067b6 <USB_HC_Halt>
}
 800281a:	e2d8      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d140      	bne.n	80028b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	335c      	adds	r3, #92	; 0x5c
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d111      	bne.n	800287e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	333d      	adds	r3, #61	; 0x3d
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	2340      	movs	r3, #64	; 0x40
 800287c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	461a      	mov	r2, r3
 800288c:	2301      	movs	r3, #1
 800288e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3361      	adds	r3, #97	; 0x61
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 ff82 	bl	80067b6 <USB_HC_Halt>
}
 80028b2:	e28c      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d12c      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3361      	adds	r3, #97	; 0x61
 80028d8:	2204      	movs	r2, #4
 80028da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	333d      	adds	r3, #61	; 0x3d
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f003 ff53 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	6093      	str	r3, [r2, #8]
}
 8002922:	e254      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11a      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2308      	movs	r3, #8
 800294a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	2205      	movs	r2, #5
 800295c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f003 ff24 	bl	80067b6 <USB_HC_Halt>
}
 800296e:	e22e      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b10      	cmp	r3, #16
 8002984:	d140      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3361      	adds	r3, #97	; 0x61
 80029a6:	2203      	movs	r2, #3
 80029a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	333d      	adds	r3, #61	; 0x3d
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d112      	bne.n	80029e4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	333c      	adds	r3, #60	; 0x3c
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	333d      	adds	r3, #61	; 0x3d
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fee1 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	461a      	mov	r2, r3
 8002a02:	2310      	movs	r3, #16
 8002a04:	6093      	str	r3, [r2, #8]
}
 8002a06:	e1e2      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b80      	cmp	r3, #128	; 0x80
 8002a1c:	d164      	bne.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d111      	bne.n	8002a4a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3361      	adds	r3, #97	; 0x61
 8002a34:	2206      	movs	r2, #6
 8002a36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 feb7 	bl	80067b6 <USB_HC_Halt>
 8002a48:	e044      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	335c      	adds	r3, #92	; 0x5c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	202c      	movs	r0, #44	; 0x2c
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	440b      	add	r3, r1
 8002a68:	335c      	adds	r3, #92	; 0x5c
 8002a6a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	335c      	adds	r3, #92	; 0x5c
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d920      	bls.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	; 0x60
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	b2d9      	uxtb	r1, r3
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	202c      	movs	r0, #44	; 0x2c
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3360      	adds	r3, #96	; 0x60
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f006 f920 	bl	8008d00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ac0:	e008      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3360      	adds	r3, #96	; 0x60
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	6093      	str	r3, [r2, #8]
}
 8002ae6:	e172      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afe:	d11b      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3361      	adds	r3, #97	; 0x61
 8002b0e:	2208      	movs	r2, #8
 8002b10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 fe4a 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b34:	6093      	str	r3, [r2, #8]
}
 8002b36:	e14a      	b.n	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f040 813f 	bne.w	8002dce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3361      	adds	r3, #97	; 0x61
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d17d      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	333f      	adds	r3, #63	; 0x3f
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d00a      	beq.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	333f      	adds	r3, #63	; 0x3f
 8002b98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	f040 8100 	bne.w	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d113      	bne.n	8002bd0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3355      	adds	r3, #85	; 0x55
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2d8      	uxtb	r0, r3
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3355      	adds	r3, #85	; 0x55
 8002bcc:	4602      	mov	r2, r0
 8002bce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	f040 80e3 	bne.w	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	334c      	adds	r3, #76	; 0x4c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80d8 	beq.w	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	334c      	adds	r3, #76	; 0x4c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	202c      	movs	r0, #44	; 0x2c
 8002c06:	fb00 f202 	mul.w	r2, r0, r2
 8002c0a:	440a      	add	r2, r1
 8002c0c:	3240      	adds	r2, #64	; 0x40
 8002c0e:	8812      	ldrh	r2, [r2, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	202c      	movs	r0, #44	; 0x2c
 8002c1a:	fb00 f202 	mul.w	r2, r0, r2
 8002c1e:	440a      	add	r2, r1
 8002c20:	3240      	adds	r2, #64	; 0x40
 8002c22:	8812      	ldrh	r2, [r2, #0]
 8002c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80b5 	beq.w	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3355      	adds	r3, #85	; 0x55
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2d8      	uxtb	r0, r3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3355      	adds	r3, #85	; 0x55
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e09f      	b.n	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3361      	adds	r3, #97	; 0x61
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d109      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3360      	adds	r3, #96	; 0x60
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e08b      	b.n	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3361      	adds	r3, #97	; 0x61
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d109      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	2202      	movs	r2, #2
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e077      	b.n	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3361      	adds	r3, #97	; 0x61
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d109      	bne.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	2205      	movs	r2, #5
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	e063      	b.n	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3361      	adds	r3, #97	; 0x61
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d009      	beq.n	8002d00 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3361      	adds	r3, #97	; 0x61
 8002cfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d14f      	bne.n	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	335c      	adds	r3, #92	; 0x5c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	202c      	movs	r0, #44	; 0x2c
 8002d18:	fb00 f303 	mul.w	r3, r0, r3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	335c      	adds	r3, #92	; 0x5c
 8002d20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d912      	bls.n	8002d5c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	335c      	adds	r3, #92	; 0x5c
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3360      	adds	r3, #96	; 0x60
 8002d56:	2204      	movs	r2, #4
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e021      	b.n	8002da0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	3360      	adds	r3, #96	; 0x60
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d84:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d8c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	2302      	movs	r3, #2
 8002db0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	b2d9      	uxtb	r1, r3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	202c      	movs	r0, #44	; 0x2c
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3360      	adds	r3, #96	; 0x60
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f005 ff99 	bl	8008d00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dce:	bf00      	nop
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b08a      	sub	sp, #40	; 0x28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	0c5b      	lsrs	r3, r3, #17
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d004      	beq.n	8002e1c <HCD_RXQLVL_IRQHandler+0x46>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	f000 80a9 	beq.w	8002f6c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e1a:	e0aa      	b.n	8002f72 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a6 	beq.w	8002f70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3344      	adds	r3, #68	; 0x44
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 809b 	beq.w	8002f70 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3350      	adds	r3, #80	; 0x50
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	441a      	add	r2, r3
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	202c      	movs	r0, #44	; 0x2c
 8002e54:	fb00 f303 	mul.w	r3, r0, r3
 8002e58:	440b      	add	r3, r1
 8002e5a:	334c      	adds	r3, #76	; 0x4c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d87a      	bhi.n	8002f58 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3344      	adds	r3, #68	; 0x44
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f002 fff2 	bl	8005e64 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3344      	adds	r3, #68	; 0x44
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	441a      	add	r2, r3
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	202c      	movs	r0, #44	; 0x2c
 8002e9a:	fb00 f303 	mul.w	r3, r0, r3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3344      	adds	r3, #68	; 0x44
 8002ea2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3350      	adds	r3, #80	; 0x50
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	202c      	movs	r0, #44	; 0x2c
 8002ebe:	fb00 f303 	mul.w	r3, r0, r3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3350      	adds	r3, #80	; 0x50
 8002ec6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	0cdb      	lsrs	r3, r3, #19
 8002ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002edc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3340      	adds	r3, #64	; 0x40
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d13c      	bne.n	8002f70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d039      	beq.n	8002f70 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3354      	adds	r3, #84	; 0x54
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2d8      	uxtb	r0, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3354      	adds	r3, #84	; 0x54
 8002f52:	4602      	mov	r2, r0
 8002f54:	701a      	strb	r2, [r3, #0]
      break;
 8002f56:	e00b      	b.n	8002f70 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3360      	adds	r3, #96	; 0x60
 8002f66:	2204      	movs	r2, #4
 8002f68:	701a      	strb	r2, [r3, #0]
      break;
 8002f6a:	e001      	b.n	8002f70 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f70:	bf00      	nop
  }
}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fa6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d10b      	bne.n	8002fca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d102      	bne.n	8002fc2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f005 fe83 	bl	8008cc8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d132      	bne.n	800303a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f043 0308 	orr.w	r3, r3, #8
 8002fda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d126      	bne.n	8003034 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d113      	bne.n	8003016 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff8:	d106      	bne.n	8003008 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f003 f89d 	bl	8006140 <USB_InitFSLSPClkSel>
 8003006:	e011      	b.n	800302c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f003 f896 	bl	8006140 <USB_InitFSLSPClkSel>
 8003014:	e00a      	b.n	800302c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d106      	bne.n	800302c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003024:	461a      	mov	r2, r3
 8003026:	f64e 2360 	movw	r3, #60000	; 0xea60
 800302a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f005 fe75 	bl	8008d1c <HAL_HCD_PortEnabled_Callback>
 8003032:	e002      	b.n	800303a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f005 fe7f 	bl	8008d38 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d103      	bne.n	800304c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f043 0320 	orr.w	r3, r3, #32
 800304a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e12b      	b.n	80032ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fe3c 	bl	8000d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c4:	f002 fb80 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 80030c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a81      	ldr	r2, [pc, #516]	; (80032d4 <HAL_I2C_Init+0x274>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d807      	bhi.n	80030e4 <HAL_I2C_Init+0x84>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a80      	ldr	r2, [pc, #512]	; (80032d8 <HAL_I2C_Init+0x278>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf94      	ite	ls
 80030dc:	2301      	movls	r3, #1
 80030de:	2300      	movhi	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e006      	b.n	80030f2 <HAL_I2C_Init+0x92>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a7d      	ldr	r2, [pc, #500]	; (80032dc <HAL_I2C_Init+0x27c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	bf94      	ite	ls
 80030ec:	2301      	movls	r3, #1
 80030ee:	2300      	movhi	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0e7      	b.n	80032ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a78      	ldr	r2, [pc, #480]	; (80032e0 <HAL_I2C_Init+0x280>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a6a      	ldr	r2, [pc, #424]	; (80032d4 <HAL_I2C_Init+0x274>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d802      	bhi.n	8003134 <HAL_I2C_Init+0xd4>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	3301      	adds	r3, #1
 8003132:	e009      	b.n	8003148 <HAL_I2C_Init+0xe8>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a69      	ldr	r2, [pc, #420]	; (80032e4 <HAL_I2C_Init+0x284>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	3301      	adds	r3, #1
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	430b      	orrs	r3, r1
 800314e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800315a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	495c      	ldr	r1, [pc, #368]	; (80032d4 <HAL_I2C_Init+0x274>)
 8003164:	428b      	cmp	r3, r1
 8003166:	d819      	bhi.n	800319c <HAL_I2C_Init+0x13c>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e59      	subs	r1, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fbb1 f3f3 	udiv	r3, r1, r3
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	f640 73fc 	movw	r3, #4092	; 0xffc
 800317c:	400b      	ands	r3, r1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_I2C_Init+0x138>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003196:	e051      	b.n	800323c <HAL_I2C_Init+0x1dc>
 8003198:	2304      	movs	r3, #4
 800319a:	e04f      	b.n	800323c <HAL_I2C_Init+0x1dc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <HAL_I2C_Init+0x168>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e012      	b.n	80031ee <HAL_I2C_Init+0x18e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	0099      	lsls	r1, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Init+0x196>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e022      	b.n	800323c <HAL_I2C_Init+0x1dc>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10e      	bne.n	800321c <HAL_I2C_Init+0x1bc>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1e58      	subs	r0, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	440b      	add	r3, r1
 800320c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321a:	e00f      	b.n	800323c <HAL_I2C_Init+0x1dc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	0099      	lsls	r1, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6809      	ldr	r1, [r1, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800326a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6911      	ldr	r1, [r2, #16]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	000186a0 	.word	0x000186a0
 80032d8:	001e847f 	.word	0x001e847f
 80032dc:	003d08ff 	.word	0x003d08ff
 80032e0:	431bde83 	.word	0x431bde83
 80032e4:	10624dd3 	.word	0x10624dd3

080032e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	461a      	mov	r2, r3
 80032f4:	460b      	mov	r3, r1
 80032f6:	817b      	strh	r3, [r7, #10]
 80032f8:	4613      	mov	r3, r2
 80032fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7fd ffae 	bl	800125c <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b20      	cmp	r3, #32
 800330c:	f040 80e0 	bne.w	80034d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2319      	movs	r3, #25
 8003316:	2201      	movs	r2, #1
 8003318:	4970      	ldr	r1, [pc, #448]	; (80034dc <HAL_I2C_Master_Transmit+0x1f4>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 ff66 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	e0d3      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x50>
 8003334:	2302      	movs	r3, #2
 8003336:	e0cc      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d007      	beq.n	800335e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2221      	movs	r2, #33	; 0x21
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2210      	movs	r2, #16
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	893a      	ldrh	r2, [r7, #8]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fce8 	bl	8003d7c <I2C_MasterRequestWrite>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e08d      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033cc:	e066      	b.n	800349c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 ffe0 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06b      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11b      	bne.n	8003470 <HAL_I2C_Master_Transmit+0x188>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d017      	beq.n	8003470 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	6a39      	ldr	r1, [r7, #32]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 ffd0 	bl	800441a <I2C_WaitOnBTFFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2b04      	cmp	r3, #4
 8003486:	d107      	bne.n	8003498 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01a      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d194      	bne.n	80033ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	461a      	mov	r2, r3
 80034f0:	460b      	mov	r3, r1
 80034f2:	817b      	strh	r3, [r7, #10]
 80034f4:	4613      	mov	r3, r2
 80034f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034f8:	f7fd feb0 	bl	800125c <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	f040 820b 	bne.w	8003922 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2319      	movs	r3, #25
 8003512:	2201      	movs	r2, #1
 8003514:	497c      	ldr	r1, [pc, #496]	; (8003708 <HAL_I2C_Master_Receive+0x224>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fe68 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	e1fe      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_I2C_Master_Receive+0x50>
 8003530:	2302      	movs	r3, #2
 8003532:	e1f7      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d007      	beq.n	800355a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2222      	movs	r2, #34	; 0x22
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2210      	movs	r2, #16
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a5c      	ldr	r2, [pc, #368]	; (800370c <HAL_I2C_Master_Receive+0x228>)
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fc6c 	bl	8003e80 <I2C_MasterRequestRead>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1b8      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d113      	bne.n	80035e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e18c      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d11b      	bne.n	8003622 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e16c      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b02      	cmp	r3, #2
 8003628:	d11b      	bne.n	8003662 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003648:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	e14c      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003688:	e138      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	2b03      	cmp	r3, #3
 8003690:	f200 80f1 	bhi.w	8003876 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	2b01      	cmp	r3, #1
 800369a:	d123      	bne.n	80036e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fefb 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e139      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e2:	e10b      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d14e      	bne.n	800378a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	2200      	movs	r2, #0
 80036f4:	4906      	ldr	r1, [pc, #24]	; (8003710 <HAL_I2C_Master_Receive+0x22c>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fd78 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e10e      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000
 8003710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003788:	e0b8      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	2200      	movs	r2, #0
 8003792:	4966      	ldr	r1, [pc, #408]	; (800392c <HAL_I2C_Master_Receive+0x448>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fd29 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0bf      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	2200      	movs	r2, #0
 80037ee:	494f      	ldr	r1, [pc, #316]	; (800392c <HAL_I2C_Master_Receive+0x448>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fcfb 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e091      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003874:	e042      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fe0e 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e04c      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d118      	bne.n	80038fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f aec2 	bne.w	800368a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	00010004 	.word	0x00010004

08003930 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	; 0x30
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394a:	f7fd fc87 	bl	800125c <HAL_GetTick>
 800394e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 8208 	bne.w	8003d6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2319      	movs	r3, #25
 8003964:	2201      	movs	r2, #1
 8003966:	497b      	ldr	r1, [pc, #492]	; (8003b54 <HAL_I2C_Mem_Read+0x224>)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fc3f 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
 8003976:	e1fb      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Mem_Read+0x56>
 8003982:	2302      	movs	r3, #2
 8003984:	e1f4      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d007      	beq.n	80039ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2222      	movs	r2, #34	; 0x22
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2240      	movs	r2, #64	; 0x40
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a5b      	ldr	r2, [pc, #364]	; (8003b58 <HAL_I2C_Mem_Read+0x228>)
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ee:	88f8      	ldrh	r0, [r7, #6]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fb0c 	bl	800401c <I2C_RequestMemoryRead>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1b0      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d113      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	623b      	str	r3, [r7, #32]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e184      	b.n	8003d48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d11b      	bne.n	8003a7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e164      	b.n	8003d48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d11b      	bne.n	8003abe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	e144      	b.n	8003d48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ad4:	e138      	b.n	8003d48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	f200 80f1 	bhi.w	8003cc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d123      	bne.n	8003b30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fcd5 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e139      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b2e:	e10b      	b.n	8003d48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d14e      	bne.n	8003bd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	2200      	movs	r2, #0
 8003b40:	4906      	ldr	r1, [pc, #24]	; (8003b5c <HAL_I2C_Mem_Read+0x22c>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fb52 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e10e      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
 8003b52:	bf00      	nop
 8003b54:	00100002 	.word	0x00100002
 8003b58:	ffff0000 	.word	0xffff0000
 8003b5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bd4:	e0b8      	b.n	8003d48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4966      	ldr	r1, [pc, #408]	; (8003d78 <HAL_I2C_Mem_Read+0x448>)
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fb03 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0bf      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	2200      	movs	r2, #0
 8003c3a:	494f      	ldr	r1, [pc, #316]	; (8003d78 <HAL_I2C_Mem_Read+0x448>)
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fad5 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e091      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cc0:	e042      	b.n	8003d48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fbe8 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e04c      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d118      	bne.n	8003d48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f47f aec2 	bne.w	8003ad6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3728      	adds	r7, #40	; 0x28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	00010004 	.word	0x00010004

08003d7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d006      	beq.n	8003da6 <I2C_MasterRequestWrite+0x2a>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d003      	beq.n	8003da6 <I2C_MasterRequestWrite+0x2a>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003da4:	d108      	bne.n	8003db8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e00b      	b.n	8003dd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d107      	bne.n	8003dd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fa05 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00d      	beq.n	8003e04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d103      	bne.n	8003e00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e035      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0c:	d108      	bne.n	8003e20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	e01b      	b.n	8003e58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e20:	897b      	ldrh	r3, [r7, #10]
 8003e22:	11db      	asrs	r3, r3, #7
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 0306 	and.w	r3, r3, #6
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f063 030f 	orn	r3, r3, #15
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	490e      	ldr	r1, [pc, #56]	; (8003e78 <I2C_MasterRequestWrite+0xfc>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fa2b 	bl	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e010      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4907      	ldr	r1, [pc, #28]	; (8003e7c <I2C_MasterRequestWrite+0x100>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fa1b 	bl	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	00010008 	.word	0x00010008
 8003e7c:	00010002 	.word	0x00010002

08003e80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d006      	beq.n	8003eba <I2C_MasterRequestRead+0x3a>
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d003      	beq.n	8003eba <I2C_MasterRequestRead+0x3a>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb8:	d108      	bne.n	8003ecc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e00b      	b.n	8003ee4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	2b11      	cmp	r3, #17
 8003ed2:	d107      	bne.n	8003ee4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f97b 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00d      	beq.n	8003f18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	d103      	bne.n	8003f14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e079      	b.n	800400c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f20:	d108      	bne.n	8003f34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f22:	897b      	ldrh	r3, [r7, #10]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	611a      	str	r2, [r3, #16]
 8003f32:	e05f      	b.n	8003ff4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f34:	897b      	ldrh	r3, [r7, #10]
 8003f36:	11db      	asrs	r3, r3, #7
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 0306 	and.w	r3, r3, #6
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f063 030f 	orn	r3, r3, #15
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4930      	ldr	r1, [pc, #192]	; (8004014 <I2C_MasterRequestRead+0x194>)
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f9a1 	bl	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e054      	b.n	800400c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4929      	ldr	r1, [pc, #164]	; (8004018 <I2C_MasterRequestRead+0x198>)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f991 	bl	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e044      	b.n	800400c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f919 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fce:	d103      	bne.n	8003fd8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e017      	b.n	800400c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fdc:	897b      	ldrh	r3, [r7, #10]
 8003fde:	11db      	asrs	r3, r3, #7
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 0306 	and.w	r3, r3, #6
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f063 030e 	orn	r3, r3, #14
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4907      	ldr	r1, [pc, #28]	; (8004018 <I2C_MasterRequestRead+0x198>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f94d 	bl	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	00010008 	.word	0x00010008
 8004018:	00010002 	.word	0x00010002

0800401c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4603      	mov	r3, r0
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	460b      	mov	r3, r1
 8004030:	813b      	strh	r3, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004044:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2200      	movs	r2, #0
 800405e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8c2 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d103      	bne.n	8004086 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e0aa      	b.n	80041e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	4952      	ldr	r1, [pc, #328]	; (80041e8 <I2C_RequestMemoryRead+0x1cc>)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8fa 	bl	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e097      	b.n	80041e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f964 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e076      	b.n	80041e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d105      	bne.n	8004104 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f8:	893b      	ldrh	r3, [r7, #8]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]
 8004102:	e021      	b.n	8004148 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004104:	893b      	ldrh	r3, [r7, #8]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	b29b      	uxth	r3, r3
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f93e 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e050      	b.n	80041e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800413e:	893b      	ldrh	r3, [r7, #8]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	6a39      	ldr	r1, [r7, #32]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f923 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	2b04      	cmp	r3, #4
 800415e:	d107      	bne.n	8004170 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e035      	b.n	80041e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004182:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	2200      	movs	r2, #0
 800418c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f82b 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d103      	bne.n	80041b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e013      	b.n	80041e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041b8:	897b      	ldrh	r3, [r7, #10]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	6a3a      	ldr	r2, [r7, #32]
 80041cc:	4906      	ldr	r1, [pc, #24]	; (80041e8 <I2C_RequestMemoryRead+0x1cc>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f863 	bl	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	00010002 	.word	0x00010002

080041ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041fc:	e025      	b.n	800424a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004204:	d021      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fd f829 	bl	800125c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d116      	bne.n	800424a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e023      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10d      	bne.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4013      	ands	r3, r2
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	e00c      	b.n	800428a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	429a      	cmp	r2, r3
 800428e:	d0b6      	beq.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a8:	e051      	b.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b8:	d123      	bne.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e046      	b.n	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004308:	d021      	beq.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fc ffa7 	bl	800125c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d116      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e020      	b.n	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d10c      	bne.n	8004372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e00b      	b.n	800438a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	43da      	mvns	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d18d      	bne.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a4:	e02d      	b.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f8ce 	bl	8004548 <I2C_IsAcknowledgeFailed>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e02d      	b.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043bc:	d021      	beq.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fc ff4d 	bl	800125c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d116      	bne.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e007      	b.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d1ca      	bne.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004426:	e02d      	b.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f88d 	bl	8004548 <I2C_IsAcknowledgeFailed>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e02d      	b.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443e:	d021      	beq.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fc ff0c 	bl	800125c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b04      	cmp	r3, #4
 8004490:	d1ca      	bne.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a8:	e042      	b.n	8004530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d119      	bne.n	80044ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0210 	mvn.w	r2, #16
 80044c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e029      	b.n	8004540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ec:	f7fc feb6 	bl	800125c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d302      	bcc.n	8004502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d116      	bne.n	8004530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e007      	b.n	8004540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d1b5      	bne.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455e:	d11b      	bne.n	8004598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e128      	b.n	800480c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a90      	ldr	r2, [pc, #576]	; (8004814 <HAL_I2S_Init+0x26c>)
 80045d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fc fbdd 	bl	8000d94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045f0:	f023 030f 	bic.w	r3, r3, #15
 80045f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2202      	movs	r2, #2
 80045fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d060      	beq.n	80046c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800460e:	2310      	movs	r3, #16
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e001      	b.n	8004618 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004614:	2320      	movs	r3, #32
 8004616:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b20      	cmp	r3, #32
 800461e:	d802      	bhi.n	8004626 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004626:	2001      	movs	r0, #1
 8004628:	f001 f9c4 	bl	80059b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800462c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004636:	d125      	bne.n	8004684 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	fbb2 f2f3 	udiv	r2, r2, r3
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	3305      	adds	r3, #5
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e01f      	b.n	80046a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	fbb2 f2f3 	udiv	r2, r2, r3
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	3305      	adds	r3, #5
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e00e      	b.n	80046a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	fbb2 f2f3 	udiv	r2, r2, r3
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	461a      	mov	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	3305      	adds	r3, #5
 80046a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4a5c      	ldr	r2, [pc, #368]	; (8004818 <HAL_I2S_Init+0x270>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e003      	b.n	80046d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80046c8:	2302      	movs	r3, #2
 80046ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d902      	bls.n	80046dc <HAL_I2S_Init+0x134>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2bff      	cmp	r3, #255	; 0xff
 80046da:	d907      	bls.n	80046ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	f043 0210 	orr.w	r2, r3, #16
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e08f      	b.n	800480c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	ea42 0103 	orr.w	r1, r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800470a:	f023 030f 	bic.w	r3, r3, #15
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6851      	ldr	r1, [r2, #4]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6892      	ldr	r2, [r2, #8]
 8004716:	4311      	orrs	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68d2      	ldr	r2, [r2, #12]
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6992      	ldr	r2, [r2, #24]
 8004722:	430a      	orrs	r2, r1
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d161      	bne.n	80047fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a38      	ldr	r2, [pc, #224]	; (800481c <HAL_I2S_Init+0x274>)
 800473c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a37      	ldr	r2, [pc, #220]	; (8004820 <HAL_I2S_Init+0x278>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d101      	bne.n	800474c <HAL_I2S_Init+0x1a4>
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_I2S_Init+0x27c>)
 800474a:	e001      	b.n	8004750 <HAL_I2S_Init+0x1a8>
 800474c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	4932      	ldr	r1, [pc, #200]	; (8004820 <HAL_I2S_Init+0x278>)
 8004758:	428a      	cmp	r2, r1
 800475a:	d101      	bne.n	8004760 <HAL_I2S_Init+0x1b8>
 800475c:	4a31      	ldr	r2, [pc, #196]	; (8004824 <HAL_I2S_Init+0x27c>)
 800475e:	e001      	b.n	8004764 <HAL_I2S_Init+0x1bc>
 8004760:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004764:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004768:	f023 030f 	bic.w	r3, r3, #15
 800476c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <HAL_I2S_Init+0x278>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_I2S_Init+0x1d4>
 8004778:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <HAL_I2S_Init+0x27c>)
 800477a:	e001      	b.n	8004780 <HAL_I2S_Init+0x1d8>
 800477c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004780:	2202      	movs	r2, #2
 8004782:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_I2S_Init+0x278>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_I2S_Init+0x1ea>
 800478e:	4b25      	ldr	r3, [pc, #148]	; (8004824 <HAL_I2S_Init+0x27c>)
 8004790:	e001      	b.n	8004796 <HAL_I2S_Init+0x1ee>
 8004792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a2:	d003      	beq.n	80047ac <HAL_I2S_Init+0x204>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d103      	bne.n	80047b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e001      	b.n	80047b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047c2:	4313      	orrs	r3, r2
 80047c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047cc:	4313      	orrs	r3, r2
 80047ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047d6:	4313      	orrs	r3, r2
 80047d8:	b29a      	uxth	r2, r3
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	4313      	orrs	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a0d      	ldr	r2, [pc, #52]	; (8004820 <HAL_I2S_Init+0x278>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d101      	bne.n	80047f4 <HAL_I2S_Init+0x24c>
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_I2S_Init+0x27c>)
 80047f2:	e001      	b.n	80047f8 <HAL_I2S_Init+0x250>
 80047f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f8:	897a      	ldrh	r2, [r7, #10]
 80047fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	0800491f 	.word	0x0800491f
 8004818:	cccccccd 	.word	0xcccccccd
 800481c:	08004a35 	.word	0x08004a35
 8004820:	40003800 	.word	0x40003800
 8004824:	40003400 	.word	0x40003400

08004828 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	881a      	ldrh	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	1c9a      	adds	r2, r3, #2
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10e      	bne.n	80048b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ffb8 	bl	8004828 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	b292      	uxth	r2, r2
 80048d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	1c9a      	adds	r2, r3, #2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10e      	bne.n	8004916 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004906:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff93 	bl	800483c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b086      	sub	sp, #24
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b04      	cmp	r3, #4
 8004938:	d13a      	bne.n	80049b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d109      	bne.n	8004958 <I2S_IRQHandler+0x3a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d102      	bne.n	8004958 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ffb4 	bl	80048c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d126      	bne.n	80049b0 <I2S_IRQHandler+0x92>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d11f      	bne.n	80049b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800497e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ff50 	bl	8004850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d136      	bne.n	8004a2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d109      	bne.n	80049da <I2S_IRQHandler+0xbc>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d102      	bne.n	80049da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff45 	bl	8004864 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d122      	bne.n	8004a2a <I2S_IRQHandler+0x10c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d11b      	bne.n	8004a2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	f043 0204 	orr.w	r2, r3, #4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff ff13 	bl	8004850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a92      	ldr	r2, [pc, #584]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a4e:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a50:	e001      	b.n	8004a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a8b      	ldr	r2, [pc, #556]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a6c:	4b8a      	ldr	r3, [pc, #552]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a6e:	e001      	b.n	8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a80:	d004      	beq.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 8099 	bne.w	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d107      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f925 	bl	8004cf0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9c8 	bl	8004e50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	d13a      	bne.n	8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d035      	beq.n	8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004ade:	4b6e      	ldr	r3, [pc, #440]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ae0:	e001      	b.n	8004ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4969      	ldr	r1, [pc, #420]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aee:	428b      	cmp	r3, r1
 8004af0:	d101      	bne.n	8004af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004af2:	4b69      	ldr	r3, [pc, #420]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004af4:	e001      	b.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004afe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f043 0202 	orr.w	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fe88 	bl	8004850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	f040 80c3 	bne.w	8004cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80bd 	beq.w	8004cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a49      	ldr	r2, [pc, #292]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b72:	4b49      	ldr	r3, [pc, #292]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b74:	e001      	b.n	8004b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4944      	ldr	r1, [pc, #272]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b82:	428b      	cmp	r3, r1
 8004b84:	d101      	bne.n	8004b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b86:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b88:	e001      	b.n	8004b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fe4a 	bl	8004850 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bbc:	e089      	b.n	8004cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d107      	bne.n	8004bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8be 	bl	8004d54 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d107      	bne.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f8fd 	bl	8004dec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d12f      	bne.n	8004c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02a      	beq.n	8004c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c22:	e001      	b.n	8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4919      	ldr	r1, [pc, #100]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c30:	428b      	cmp	r3, r1
 8004c32:	d101      	bne.n	8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c36:	e001      	b.n	8004c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	f043 0202 	orr.w	r2, r3, #2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fdfa 	bl	8004850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d136      	bne.n	8004cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d031      	beq.n	8004cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d101      	bne.n	8004c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c7c:	e001      	b.n	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4902      	ldr	r1, [pc, #8]	; (8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c8a:	428b      	cmp	r3, r1
 8004c8c:	d106      	bne.n	8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004c8e:	4b02      	ldr	r3, [pc, #8]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c90:	e006      	b.n	8004ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004c92:	bf00      	nop
 8004c94:	40003800 	.word	0x40003800
 8004c98:	40003400 	.word	0x40003400
 8004c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ca4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cb4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f043 0204 	orr.w	r2, r3, #4
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fdc0 	bl	8004850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cd0:	e000      	b.n	8004cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cd2:	bf00      	nop
}
 8004cd4:	bf00      	nop
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	1c99      	adds	r1, r3, #2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6251      	str	r1, [r2, #36]	; 0x24
 8004d02:	881a      	ldrh	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d113      	bne.n	8004d4a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ffc9 	bl	8004cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	1c99      	adds	r1, r3, #2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6251      	str	r1, [r2, #36]	; 0x24
 8004d66:	8819      	ldrh	r1, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <I2SEx_TxISR_I2SExt+0x90>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <I2SEx_TxISR_I2SExt+0x22>
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <I2SEx_TxISR_I2SExt+0x94>)
 8004d74:	e001      	b.n	8004d7a <I2SEx_TxISR_I2SExt+0x26>
 8004d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d121      	bne.n	8004dda <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <I2SEx_TxISR_I2SExt+0x90>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <I2SEx_TxISR_I2SExt+0x50>
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <I2SEx_TxISR_I2SExt+0x94>)
 8004da2:	e001      	b.n	8004da8 <I2SEx_TxISR_I2SExt+0x54>
 8004da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	490d      	ldr	r1, [pc, #52]	; (8004de4 <I2SEx_TxISR_I2SExt+0x90>)
 8004db0:	428b      	cmp	r3, r1
 8004db2:	d101      	bne.n	8004db8 <I2SEx_TxISR_I2SExt+0x64>
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <I2SEx_TxISR_I2SExt+0x94>)
 8004db6:	e001      	b.n	8004dbc <I2SEx_TxISR_I2SExt+0x68>
 8004db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ff81 	bl	8004cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40003800 	.word	0x40003800
 8004de8:	40003400 	.word	0x40003400

08004dec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68d8      	ldr	r0, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	1c99      	adds	r1, r3, #2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e04:	b282      	uxth	r2, r0
 8004e06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff ff4a 	bl	8004cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d101      	bne.n	8004e66 <I2SEx_RxISR_I2SExt+0x16>
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8004e64:	e001      	b.n	8004e6a <I2SEx_RxISR_I2SExt+0x1a>
 8004e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e6a:	68d8      	ldr	r0, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	1c99      	adds	r1, r3, #2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e76:	b282      	uxth	r2, r0
 8004e78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d121      	bne.n	8004ed6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d101      	bne.n	8004ea0 <I2SEx_RxISR_I2SExt+0x50>
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8004e9e:	e001      	b.n	8004ea4 <I2SEx_RxISR_I2SExt+0x54>
 8004ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	490d      	ldr	r1, [pc, #52]	; (8004ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8004eac:	428b      	cmp	r3, r1
 8004eae:	d101      	bne.n	8004eb4 <I2SEx_RxISR_I2SExt+0x64>
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8004eb2:	e001      	b.n	8004eb8 <I2SEx_RxISR_I2SExt+0x68>
 8004eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ebc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ff03 	bl	8004cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40003800 	.word	0x40003800
 8004ee4:	40003400 	.word	0x40003400

08004ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e267      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d075      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f06:	4b88      	ldr	r3, [pc, #544]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d00c      	beq.n	8004f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f12:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d112      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f1e:	4b82      	ldr	r3, [pc, #520]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f2a:	d10b      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2c:	4b7e      	ldr	r3, [pc, #504]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d05b      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x108>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d157      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e242      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4c:	d106      	bne.n	8004f5c <HAL_RCC_OscConfig+0x74>
 8004f4e:	4b76      	ldr	r3, [pc, #472]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a75      	ldr	r2, [pc, #468]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e01d      	b.n	8004f98 <HAL_RCC_OscConfig+0xb0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCC_OscConfig+0x98>
 8004f66:	4b70      	ldr	r3, [pc, #448]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6f      	ldr	r2, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b6d      	ldr	r3, [pc, #436]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6c      	ldr	r2, [pc, #432]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e00b      	b.n	8004f98 <HAL_RCC_OscConfig+0xb0>
 8004f80:	4b69      	ldr	r3, [pc, #420]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a68      	ldr	r2, [pc, #416]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4b66      	ldr	r3, [pc, #408]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a65      	ldr	r2, [pc, #404]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d013      	beq.n	8004fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fc f95c 	bl	800125c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa8:	f7fc f958 	bl	800125c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	; 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e207      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0xc0>
 8004fc6:	e014      	b.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fc f948 	bl	800125c <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fc f944 	bl	800125c <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	; 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1f3      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe2:	4b51      	ldr	r3, [pc, #324]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xe8>
 8004fee:	e000      	b.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d063      	beq.n	80050c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500a:	4b47      	ldr	r3, [pc, #284]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005012:	2b08      	cmp	r3, #8
 8005014:	d11c      	bne.n	8005050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005016:	4b44      	ldr	r3, [pc, #272]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d116      	bne.n	8005050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_RCC_OscConfig+0x152>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d001      	beq.n	800503a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e1c7      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4937      	ldr	r1, [pc, #220]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504e:	e03a      	b.n	80050c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d020      	beq.n	800509a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005058:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_RCC_OscConfig+0x244>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fc f8fd 	bl	800125c <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005066:	f7fc f8f9 	bl	800125c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e1a8      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005084:	4b28      	ldr	r3, [pc, #160]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4925      	ldr	r1, [pc, #148]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]
 8005098:	e015      	b.n	80050c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <HAL_RCC_OscConfig+0x244>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fc f8dc 	bl	800125c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a8:	f7fc f8d8 	bl	800125c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e187      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d036      	beq.n	8005140 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_RCC_OscConfig+0x248>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fc f8bc 	bl	800125c <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e8:	f7fc f8b8 	bl	800125c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e167      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 80050fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x200>
 8005106:	e01b      	b.n	8005140 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_OscConfig+0x248>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510e:	f7fc f8a5 	bl	800125c <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005114:	e00e      	b.n	8005134 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005116:	f7fc f8a1 	bl	800125c <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d907      	bls.n	8005134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e150      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
 8005128:	40023800 	.word	0x40023800
 800512c:	42470000 	.word	0x42470000
 8005130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005134:	4b88      	ldr	r3, [pc, #544]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ea      	bne.n	8005116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8097 	beq.w	800527c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005152:	4b81      	ldr	r3, [pc, #516]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	4b7d      	ldr	r3, [pc, #500]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	4a7c      	ldr	r2, [pc, #496]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516c:	6413      	str	r3, [r2, #64]	; 0x40
 800516e:	4b7a      	ldr	r3, [pc, #488]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517e:	4b77      	ldr	r3, [pc, #476]	; (800535c <HAL_RCC_OscConfig+0x474>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d118      	bne.n	80051bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <HAL_RCC_OscConfig+0x474>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a73      	ldr	r2, [pc, #460]	; (800535c <HAL_RCC_OscConfig+0x474>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005196:	f7fc f861 	bl	800125c <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519e:	f7fc f85d 	bl	800125c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e10c      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b0:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_RCC_OscConfig+0x474>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d106      	bne.n	80051d2 <HAL_RCC_OscConfig+0x2ea>
 80051c4:	4b64      	ldr	r3, [pc, #400]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	4a63      	ldr	r2, [pc, #396]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	6713      	str	r3, [r2, #112]	; 0x70
 80051d0:	e01c      	b.n	800520c <HAL_RCC_OscConfig+0x324>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x30c>
 80051da:	4b5f      	ldr	r3, [pc, #380]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a5e      	ldr	r2, [pc, #376]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051e0:	f043 0304 	orr.w	r3, r3, #4
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
 80051e6:	4b5c      	ldr	r3, [pc, #368]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	4a5b      	ldr	r2, [pc, #364]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	6713      	str	r3, [r2, #112]	; 0x70
 80051f2:	e00b      	b.n	800520c <HAL_RCC_OscConfig+0x324>
 80051f4:	4b58      	ldr	r3, [pc, #352]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4a57      	ldr	r2, [pc, #348]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005200:	4b55      	ldr	r3, [pc, #340]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	4a54      	ldr	r2, [pc, #336]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005206:	f023 0304 	bic.w	r3, r3, #4
 800520a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d015      	beq.n	8005240 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fc f822 	bl	800125c <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521a:	e00a      	b.n	8005232 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521c:	f7fc f81e 	bl	800125c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f241 3288 	movw	r2, #5000	; 0x1388
 800522a:	4293      	cmp	r3, r2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e0cb      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005232:	4b49      	ldr	r3, [pc, #292]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0ee      	beq.n	800521c <HAL_RCC_OscConfig+0x334>
 800523e:	e014      	b.n	800526a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005240:	f7fc f80c 	bl	800125c <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005246:	e00a      	b.n	800525e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005248:	f7fc f808 	bl	800125c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	; 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e0b5      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525e:	4b3e      	ldr	r3, [pc, #248]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1ee      	bne.n	8005248 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d105      	bne.n	800527c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005270:	4b39      	ldr	r3, [pc, #228]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	4a38      	ldr	r2, [pc, #224]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80a1 	beq.w	80053c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d05c      	beq.n	800534c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d141      	bne.n	800531e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <HAL_RCC_OscConfig+0x478>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fb ffdc 	bl	800125c <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a8:	f7fb ffd8 	bl	800125c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e087      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	4b27      	ldr	r3, [pc, #156]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	019b      	lsls	r3, r3, #6
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	3b01      	subs	r3, #1
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	491b      	ldr	r1, [pc, #108]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_RCC_OscConfig+0x478>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f6:	f7fb ffb1 	bl	800125c <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fb ffad 	bl	800125c <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e05c      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x416>
 800531c:	e054      	b.n	80053c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_RCC_OscConfig+0x478>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fb ff9a 	bl	800125c <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532c:	f7fb ff96 	bl	800125c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e045      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x444>
 800534a:	e03d      	b.n	80053c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e038      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
 8005358:	40023800 	.word	0x40023800
 800535c:	40007000 	.word	0x40007000
 8005360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_RCC_OscConfig+0x4ec>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d028      	beq.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d121      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d11a      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005394:	4013      	ands	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800539a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800539c:	4293      	cmp	r3, r2
 800539e:	d111      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	3b01      	subs	r3, #1
 80053ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d107      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800

080053d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0cc      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ec:	4b68      	ldr	r3, [pc, #416]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d90c      	bls.n	8005414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4b65      	ldr	r3, [pc, #404]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b63      	ldr	r3, [pc, #396]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0b8      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d020      	beq.n	8005462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800542c:	4b59      	ldr	r3, [pc, #356]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a58      	ldr	r2, [pc, #352]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005444:	4b53      	ldr	r3, [pc, #332]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a52      	ldr	r2, [pc, #328]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800544e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005450:	4b50      	ldr	r3, [pc, #320]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	494d      	ldr	r1, [pc, #308]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d044      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d107      	bne.n	8005486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d119      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e07f      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d003      	beq.n	8005496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005492:	2b03      	cmp	r3, #3
 8005494:	d107      	bne.n	80054a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005496:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e06f      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a6:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e067      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054b6:	4b37      	ldr	r3, [pc, #220]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f023 0203 	bic.w	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4934      	ldr	r1, [pc, #208]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054c8:	f7fb fec8 	bl	800125c <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d0:	f7fb fec4 	bl	800125c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e04f      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e6:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 020c 	and.w	r2, r3, #12
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d1eb      	bne.n	80054d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054f8:	4b25      	ldr	r3, [pc, #148]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d20c      	bcs.n	8005520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d001      	beq.n	8005520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e032      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800552c:	4b19      	ldr	r3, [pc, #100]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4916      	ldr	r1, [pc, #88]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	490e      	ldr	r1, [pc, #56]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800555e:	f000 f821 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 8005562:	4602      	mov	r2, r0
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	490a      	ldr	r1, [pc, #40]	; (8005598 <HAL_RCC_ClockConfig+0x1c0>)
 8005570:	5ccb      	ldrb	r3, [r1, r3]
 8005572:	fa22 f303 	lsr.w	r3, r2, r3
 8005576:	4a09      	ldr	r2, [pc, #36]	; (800559c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <HAL_RCC_ClockConfig+0x1c8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fb fe28 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023c00 	.word	0x40023c00
 8005594:	40023800 	.word	0x40023800
 8005598:	0800a0f4 	.word	0x0800a0f4
 800559c:	20000008 	.word	0x20000008
 80055a0:	2000000c 	.word	0x2000000c

080055a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a8:	b094      	sub	sp, #80	; 0x50
 80055aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	647b      	str	r3, [r7, #68]	; 0x44
 80055b0:	2300      	movs	r3, #0
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	2300      	movs	r3, #0
 80055b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055bc:	4b79      	ldr	r3, [pc, #484]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 030c 	and.w	r3, r3, #12
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d00d      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0x40>
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	f200 80e1 	bhi.w	8005790 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x34>
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d003      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0x3a>
 80055d6:	e0db      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055d8:	4b73      	ldr	r3, [pc, #460]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80055dc:	e0db      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055de:	4b73      	ldr	r3, [pc, #460]	; (80057ac <HAL_RCC_GetSysClockFreq+0x208>)
 80055e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055e2:	e0d8      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055e4:	4b6f      	ldr	r3, [pc, #444]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ee:	4b6d      	ldr	r3, [pc, #436]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d063      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055fa:	4b6a      	ldr	r3, [pc, #424]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	099b      	lsrs	r3, r3, #6
 8005600:	2200      	movs	r2, #0
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38
 8005604:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560c:	633b      	str	r3, [r7, #48]	; 0x30
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
 8005612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005616:	4622      	mov	r2, r4
 8005618:	462b      	mov	r3, r5
 800561a:	f04f 0000 	mov.w	r0, #0
 800561e:	f04f 0100 	mov.w	r1, #0
 8005622:	0159      	lsls	r1, r3, #5
 8005624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005628:	0150      	lsls	r0, r2, #5
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4621      	mov	r1, r4
 8005630:	1a51      	subs	r1, r2, r1
 8005632:	6139      	str	r1, [r7, #16]
 8005634:	4629      	mov	r1, r5
 8005636:	eb63 0301 	sbc.w	r3, r3, r1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005648:	4659      	mov	r1, fp
 800564a:	018b      	lsls	r3, r1, #6
 800564c:	4651      	mov	r1, sl
 800564e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005652:	4651      	mov	r1, sl
 8005654:	018a      	lsls	r2, r1, #6
 8005656:	4651      	mov	r1, sl
 8005658:	ebb2 0801 	subs.w	r8, r2, r1
 800565c:	4659      	mov	r1, fp
 800565e:	eb63 0901 	sbc.w	r9, r3, r1
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800566e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005676:	4690      	mov	r8, r2
 8005678:	4699      	mov	r9, r3
 800567a:	4623      	mov	r3, r4
 800567c:	eb18 0303 	adds.w	r3, r8, r3
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	462b      	mov	r3, r5
 8005684:	eb49 0303 	adc.w	r3, r9, r3
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005696:	4629      	mov	r1, r5
 8005698:	024b      	lsls	r3, r1, #9
 800569a:	4621      	mov	r1, r4
 800569c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056a0:	4621      	mov	r1, r4
 80056a2:	024a      	lsls	r2, r1, #9
 80056a4:	4610      	mov	r0, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056aa:	2200      	movs	r2, #0
 80056ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056b4:	f7fa fddc 	bl	8000270 <__aeabi_uldivmod>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4613      	mov	r3, r2
 80056be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c0:	e058      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c2:	4b38      	ldr	r3, [pc, #224]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	099b      	lsrs	r3, r3, #6
 80056c8:	2200      	movs	r2, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	4611      	mov	r1, r2
 80056ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	2300      	movs	r3, #0
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
 80056d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056dc:	4642      	mov	r2, r8
 80056de:	464b      	mov	r3, r9
 80056e0:	f04f 0000 	mov.w	r0, #0
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	0159      	lsls	r1, r3, #5
 80056ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ee:	0150      	lsls	r0, r2, #5
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4641      	mov	r1, r8
 80056f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80056fa:	4649      	mov	r1, r9
 80056fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800570c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005714:	ebb2 040a 	subs.w	r4, r2, sl
 8005718:	eb63 050b 	sbc.w	r5, r3, fp
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	00eb      	lsls	r3, r5, #3
 8005726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800572a:	00e2      	lsls	r2, r4, #3
 800572c:	4614      	mov	r4, r2
 800572e:	461d      	mov	r5, r3
 8005730:	4643      	mov	r3, r8
 8005732:	18e3      	adds	r3, r4, r3
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	464b      	mov	r3, r9
 8005738:	eb45 0303 	adc.w	r3, r5, r3
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800574a:	4629      	mov	r1, r5
 800574c:	028b      	lsls	r3, r1, #10
 800574e:	4621      	mov	r1, r4
 8005750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005754:	4621      	mov	r1, r4
 8005756:	028a      	lsls	r2, r1, #10
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575e:	2200      	movs	r2, #0
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	61fa      	str	r2, [r7, #28]
 8005764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005768:	f7fa fd82 	bl	8000270 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4613      	mov	r3, r2
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	3301      	adds	r3, #1
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800578e:	e002      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005792:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005798:	4618      	mov	r0, r3
 800579a:	3750      	adds	r7, #80	; 0x50
 800579c:	46bd      	mov	sp, r7
 800579e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	007a1200 	.word	0x007a1200

080057b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000008 	.word	0x20000008

080057c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057cc:	f7ff fff0 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	0a9b      	lsrs	r3, r3, #10
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	4903      	ldr	r1, [pc, #12]	; (80057ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80057de:	5ccb      	ldrb	r3, [r1, r3]
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	0800a104 	.word	0x0800a104

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d035      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005818:	4b62      	ldr	r3, [pc, #392]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800581e:	f7fb fd1d 	bl	800125c <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005826:	f7fb fd19 	bl	800125c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e0b0      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005838:	4b5b      	ldr	r3, [pc, #364]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	019a      	lsls	r2, r3, #6
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	071b      	lsls	r3, r3, #28
 8005850:	4955      	ldr	r1, [pc, #340]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005858:	4b52      	ldr	r3, [pc, #328]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800585e:	f7fb fcfd 	bl	800125c <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005866:	f7fb fcf9 	bl	800125c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e090      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005878:	4b4b      	ldr	r3, [pc, #300]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8083 	beq.w	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a43      	ldr	r2, [pc, #268]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a3e      	ldr	r2, [pc, #248]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ba:	f7fb fccf 	bl	800125c <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058c2:	f7fb fccb 	bl	800125c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e062      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d4:	4b35      	ldr	r3, [pc, #212]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058e0:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02f      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d028      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fe:	4b2a      	ldr	r3, [pc, #168]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005906:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005908:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590e:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005914:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d114      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005926:	f7fb fc99 	bl	800125c <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	e00a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fb fc95 	bl	800125c <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e02a      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ee      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595c:	d10d      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	490d      	ldr	r1, [pc, #52]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]
 8005978:	e005      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005980:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	4905      	ldr	r1, [pc, #20]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	42470068 	.word	0x42470068
 80059a8:	40023800 	.word	0x40023800
 80059ac:	40007000 	.word	0x40007000
 80059b0:	42470e40 	.word	0x42470e40

080059b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d13e      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d12f      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059e8:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059ea:	617b      	str	r3, [r7, #20]
          break;
 80059ec:	e02f      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059ee:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fa:	d108      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059fc:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a04:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	e007      	b.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a0e:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a24:	099b      	lsrs	r3, r3, #6
 8005a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a38:	0f1b      	lsrs	r3, r3, #28
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	617b      	str	r3, [r7, #20]
          break;
 8005a46:	e002      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
          break;
 8005a4c:	bf00      	nop
        }
      }
      break;
 8005a4e:	bf00      	nop
    }
  }
  return frequency;
 8005a50:	697b      	ldr	r3, [r7, #20]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40023800 	.word	0x40023800
 8005a64:	00bb8000 	.word	0x00bb8000
 8005a68:	007a1200 	.word	0x007a1200
 8005a6c:	00f42400 	.word	0x00f42400

08005a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e07b      	b.n	8005b7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a92:	d009      	beq.n	8005aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	61da      	str	r2, [r3, #28]
 8005a9a:	e005      	b.n	8005aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb f9e6 	bl	8000e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ade:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	ea42 0103 	orr.w	r1, r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	f003 0104 	and.w	r1, r3, #4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f003 0210 	and.w	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b82:	b084      	sub	sp, #16
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	f107 001c 	add.w	r0, r7, #28
 8005b90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d122      	bne.n	8005be0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d105      	bne.n	8005bd4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f9bf 	bl	8005f58 <USB_CoreReset>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73fb      	strb	r3, [r7, #15]
 8005bde:	e01a      	b.n	8005c16 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f9b3 	bl	8005f58 <USB_CoreReset>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
 8005c08:	e005      	b.n	8005c16 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10b      	bne.n	8005c34 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f043 0206 	orr.w	r2, r3, #6
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c40:	b004      	add	sp, #16
 8005c42:	4770      	bx	lr

08005c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f043 0201 	orr.w	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f023 0201 	bic.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d115      	bne.n	8005cd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	f7fb fadc 	bl	8001274 <HAL_Delay>
      ms++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f939 	bl	8005f3a <USB_GetMode>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d01e      	beq.n	8005d0c <USB_SetCurrentMode+0x84>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b31      	cmp	r3, #49	; 0x31
 8005cd2:	d9f0      	bls.n	8005cb6 <USB_SetCurrentMode+0x2e>
 8005cd4:	e01a      	b.n	8005d0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d115      	bne.n	8005d08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f7fb fac3 	bl	8001274 <HAL_Delay>
      ms++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f920 	bl	8005f3a <USB_GetMode>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <USB_SetCurrentMode+0x84>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b31      	cmp	r3, #49	; 0x31
 8005d04:	d9f0      	bls.n	8005ce8 <USB_SetCurrentMode+0x60>
 8005d06:	e001      	b.n	8005d0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e005      	b.n	8005d18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b32      	cmp	r3, #50	; 0x32
 8005d10:	d101      	bne.n	8005d16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <USB_FlushTxFifo+0x64>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d901      	bls.n	8005d40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e01b      	b.n	8005d78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	daf2      	bge.n	8005d2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	019b      	lsls	r3, r3, #6
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <USB_FlushTxFifo+0x64>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e006      	b.n	8005d78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d0f0      	beq.n	8005d58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	00030d40 	.word	0x00030d40

08005d88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a11      	ldr	r2, [pc, #68]	; (8005de4 <USB_FlushRxFifo+0x5c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e018      	b.n	8005dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	daf2      	bge.n	8005d94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2210      	movs	r2, #16
 8005db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <USB_FlushRxFifo+0x5c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e006      	b.n	8005dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d0f0      	beq.n	8005db8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	00030d40 	.word	0x00030d40

08005de8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4611      	mov	r1, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	460b      	mov	r3, r1
 8005df8:	71fb      	strb	r3, [r7, #7]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d123      	bne.n	8005e56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e0e:	88bb      	ldrh	r3, [r7, #4]
 8005e10:	3303      	adds	r3, #3
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e018      	b.n	8005e4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	031a      	lsls	r2, r3, #12
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e28:	461a      	mov	r2, r3
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d3e2      	bcc.n	8005e1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3724      	adds	r7, #36	; 0x24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b08b      	sub	sp, #44	; 0x2c
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	e014      	b.n	8005eba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	3301      	adds	r3, #1
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d3e6      	bcc.n	8005e90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ec2:	8bfb      	ldrh	r3, [r7, #30]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01e      	beq.n	8005f06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	701a      	strb	r2, [r3, #0]
      i++;
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005efa:	8bfb      	ldrh	r3, [r7, #30]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1ea      	bne.n	8005edc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	372c      	adds	r7, #44	; 0x2c
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0301 	and.w	r3, r3, #1
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <USB_CoreReset+0x64>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e01b      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf2      	bge.n	8005f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <USB_CoreReset+0x64>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d0f0      	beq.n	8005f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	00030d40 	.word	0x00030d40

08005fc0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d018      	beq.n	8006048 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10a      	bne.n	8006032 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800602a:	f043 0304 	orr.w	r3, r3, #4
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e014      	b.n	800605c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e009      	b.n	800605c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006056:	f023 0304 	bic.w	r3, r3, #4
 800605a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800605c:	2110      	movs	r1, #16
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff fe5e 	bl	8005d20 <USB_FlushTxFifo>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fe8a 	bl	8005d88 <USB_FlushRxFifo>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	e015      	b.n	80060b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	461a      	mov	r2, r3
 8006092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006096:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d3e5      	bcc.n	8006084 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <USB_HostInit+0x16c>)
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a13      	ldr	r2, [pc, #76]	; (8006130 <USB_HostInit+0x170>)
 80060e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80060e8:	e009      	b.n	80060fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a10      	ldr	r2, [pc, #64]	; (8006134 <USB_HostInit+0x174>)
 80060f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a0f      	ldr	r2, [pc, #60]	; (8006138 <USB_HostInit+0x178>)
 80060fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f043 0210 	orr.w	r2, r3, #16
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	4b09      	ldr	r3, [pc, #36]	; (800613c <USB_HostInit+0x17c>)
 8006116:	4313      	orrs	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006128:	b004      	add	sp, #16
 800612a:	4770      	bx	lr
 800612c:	01000200 	.word	0x01000200
 8006130:	00e00300 	.word	0x00e00300
 8006134:	00600080 	.word	0x00600080
 8006138:	004000e0 	.word	0x004000e0
 800613c:	a3200008 	.word	0xa3200008

08006140 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d107      	bne.n	8006192 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006188:	461a      	mov	r2, r3
 800618a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800618e:	6053      	str	r3, [r2, #4]
 8006190:	e009      	b.n	80061a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d106      	bne.n	80061a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619e:	461a      	mov	r2, r3
 80061a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80061a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80061e4:	2064      	movs	r0, #100	; 0x64
 80061e6:	f7fb f845 	bl	8001274 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80061f8:	200a      	movs	r0, #10
 80061fa:	f7fb f83b 	bl	8001274 <HAL_Delay>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800622c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <USB_DriveVbus+0x44>
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d106      	bne.n	800624c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800624a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d109      	bne.n	800626c <USB_DriveVbus+0x64>
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800626a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	0c5b      	lsrs	r3, r3, #17
 8006298:	f003 0303 	and.w	r3, r3, #3
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	b29b      	uxth	r3, r3
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	461a      	mov	r2, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	70fb      	strb	r3, [r7, #3]
 80062de:	460b      	mov	r3, r1
 80062e0:	70bb      	strb	r3, [r7, #2]
 80062e2:	4613      	mov	r3, r2
 80062e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	461a      	mov	r2, r3
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006300:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006302:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006306:	2b03      	cmp	r3, #3
 8006308:	d87e      	bhi.n	8006408 <USB_HC_Init+0x13c>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <USB_HC_Init+0x44>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006321 	.word	0x08006321
 8006314:	080063cb 	.word	0x080063cb
 8006318:	08006321 	.word	0x08006321
 800631c:	0800638d 	.word	0x0800638d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	461a      	mov	r2, r3
 800632e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006332:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006334:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006338:	2b00      	cmp	r3, #0
 800633a:	da10      	bge.n	800635e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800635c:	e057      	b.n	800640e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d051      	beq.n	800640e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	440a      	add	r2, r1
 8006380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006384:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006388:	60d3      	str	r3, [r2, #12]
      break;
 800638a:	e040      	b.n	800640e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006398:	461a      	mov	r2, r3
 800639a:	f240 639d 	movw	r3, #1693	; 0x69d
 800639e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da34      	bge.n	8006412 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	78fa      	ldrb	r2, [r7, #3]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80063c8:	e023      	b.n	8006412 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	461a      	mov	r2, r3
 80063d8:	f240 2325 	movw	r3, #549	; 0x225
 80063dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da17      	bge.n	8006416 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006400:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006404:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006406:	e006      	b.n	8006416 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	77fb      	strb	r3, [r7, #31]
      break;
 800640c:	e004      	b.n	8006418 <USB_HC_Init+0x14c>
      break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <USB_HC_Init+0x14c>
      break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <USB_HC_Init+0x14c>
      break;
 8006416:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	78fa      	ldrb	r2, [r7, #3]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f043 0302 	orr.w	r3, r3, #2
 8006436:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f303 	lsl.w	r3, r1, r3
 800644c:	6939      	ldr	r1, [r7, #16]
 800644e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006452:	4313      	orrs	r3, r2
 8006454:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006462:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da03      	bge.n	8006472 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800646a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e001      	b.n	8006476 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff feff 	bl	800627a <USB_GetHostSpeed>
 800647c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800647e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006482:	2b02      	cmp	r3, #2
 8006484:	d106      	bne.n	8006494 <USB_HC_Init+0x1c8>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d003      	beq.n	8006494 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800648c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e001      	b.n	8006498 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006498:	787b      	ldrb	r3, [r7, #1]
 800649a:	059b      	lsls	r3, r3, #22
 800649c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064a0:	78bb      	ldrb	r3, [r7, #2]
 80064a2:	02db      	lsls	r3, r3, #11
 80064a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064ae:	049b      	lsls	r3, r3, #18
 80064b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80064b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	0159      	lsls	r1, r3, #5
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	440b      	add	r3, r1
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064d4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80064d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d003      	beq.n	80064e6 <USB_HC_Init+0x21a>
 80064de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10f      	bne.n	8006506 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006504:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006506:	7ffb      	ldrb	r3, [r7, #31]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08c      	sub	sp, #48	; 0x30
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800652c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d02d      	beq.n	8006596 <USB_HC_StartXfer+0x86>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	791b      	ldrb	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d129      	bne.n	8006596 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d117      	bne.n	8006578 <USB_HC_StartXfer+0x68>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	79db      	ldrb	r3, [r3, #7]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <USB_HC_StartXfer+0x48>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	79db      	ldrb	r3, [r3, #7]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d10f      	bne.n	8006578 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <USB_HC_StartXfer+0x86>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	795b      	ldrb	r3, [r3, #5]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	4619      	mov	r1, r3
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fa0f 	bl	80069b0 <USB_DoPing>
      return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e0f8      	b.n	8006788 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	8912      	ldrh	r2, [r2, #8]
 80065a6:	4413      	add	r3, r2
 80065a8:	3b01      	subs	r3, #1
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	8912      	ldrh	r2, [r2, #8]
 80065ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80065b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065b6:	8b7b      	ldrh	r3, [r7, #26]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d90b      	bls.n	80065d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80065bc:	8b7b      	ldrh	r3, [r7, #26]
 80065be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	8912      	ldrh	r2, [r2, #8]
 80065c6:	fb03 f202 	mul.w	r2, r3, r2
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	611a      	str	r2, [r3, #16]
 80065ce:	e001      	b.n	80065d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80065d0:	2301      	movs	r3, #1
 80065d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	8912      	ldrh	r2, [r2, #8]
 80065e2:	fb03 f202 	mul.w	r2, r3, r2
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	611a      	str	r2, [r3, #16]
 80065ea:	e003      	b.n	80065f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065fe:	04d9      	lsls	r1, r3, #19
 8006600:	4b63      	ldr	r3, [pc, #396]	; (8006790 <USB_HC_StartXfer+0x280>)
 8006602:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006604:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	7a9b      	ldrb	r3, [r3, #10]
 800660a:	075b      	lsls	r3, r3, #29
 800660c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	0148      	lsls	r0, r1, #5
 8006614:	6a39      	ldr	r1, [r7, #32]
 8006616:	4401      	add	r1, r0
 8006618:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800661c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800661e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	68d9      	ldr	r1, [r3, #12]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006636:	460a      	mov	r2, r1
 8006638:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	bf0c      	ite	eq
 800664a:	2301      	moveq	r3, #1
 800664c:	2300      	movne	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	440a      	add	r2, r1
 8006668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006670:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	7e7b      	ldrb	r3, [r7, #25]
 8006682:	075b      	lsls	r3, r3, #29
 8006684:	69f9      	ldr	r1, [r7, #28]
 8006686:	0148      	lsls	r0, r1, #5
 8006688:	6a39      	ldr	r1, [r7, #32]
 800668a:	4401      	add	r1, r0
 800668c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006690:	4313      	orrs	r3, r2
 8006692:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	e003      	b.n	80066c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e04e      	b.n	8006788 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	78db      	ldrb	r3, [r3, #3]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d149      	bne.n	8006786 <USB_HC_StartXfer+0x276>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d045      	beq.n	8006786 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	79db      	ldrb	r3, [r3, #7]
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d830      	bhi.n	8006764 <USB_HC_StartXfer+0x254>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <USB_HC_StartXfer+0x1f8>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	08006719 	.word	0x08006719
 800670c:	0800673d 	.word	0x0800673d
 8006710:	08006719 	.word	0x08006719
 8006714:	0800673d 	.word	0x0800673d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	3303      	adds	r3, #3
 800671e:	089b      	lsrs	r3, r3, #2
 8006720:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006722:	8afa      	ldrh	r2, [r7, #22]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	b29b      	uxth	r3, r3
 800672a:	429a      	cmp	r2, r3
 800672c:	d91c      	bls.n	8006768 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	619a      	str	r2, [r3, #24]
        }
        break;
 800673a:	e015      	b.n	8006768 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	3303      	adds	r3, #3
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006746:	8afa      	ldrh	r2, [r7, #22]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	b29b      	uxth	r3, r3
 8006752:	429a      	cmp	r2, r3
 8006754:	d90a      	bls.n	800676c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	619a      	str	r2, [r3, #24]
        }
        break;
 8006762:	e003      	b.n	800676c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <USB_HC_StartXfer+0x25e>
        break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <USB_HC_StartXfer+0x25e>
        break;
 800676c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	68d9      	ldr	r1, [r3, #12]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	785a      	ldrb	r2, [r3, #1]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	b29b      	uxth	r3, r3
 800677c:	2000      	movs	r0, #0
 800677e:	9000      	str	r0, [sp, #0]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff fb31 	bl	8005de8 <USB_WritePacket>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3728      	adds	r7, #40	; 0x28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	1ff80000 	.word	0x1ff80000

08006794 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	b29b      	uxth	r3, r3
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b089      	sub	sp, #36	; 0x24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	0c9b      	lsrs	r3, r3, #18
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	0fdb      	lsrs	r3, r3, #31
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b20      	cmp	r3, #32
 8006804:	d104      	bne.n	8006810 <USB_HC_Halt+0x5a>
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e0c8      	b.n	80069a2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <USB_HC_Halt+0x66>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d163      	bne.n	80068e4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800683a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 80ab 	bne.w	80069a0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d133      	bne.n	80068be <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	440a      	add	r2, r1
 800686c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006874:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	440a      	add	r2, r1
 800688c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006894:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068a2:	d81d      	bhi.n	80068e0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ba:	d0ec      	beq.n	8006896 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068bc:	e070      	b.n	80069a0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068de:	e05f      	b.n	80069a0 <USB_HC_Halt+0x1ea>
            break;
 80068e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068e2:	e05d      	b.n	80069a0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006902:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d133      	bne.n	800697c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	440a      	add	r2, r1
 800692a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006932:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	440a      	add	r2, r1
 800694a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006952:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3301      	adds	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006960:	d81d      	bhi.n	800699e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006978:	d0ec      	beq.n	8006954 <USB_HC_Halt+0x19e>
 800697a:	e011      	b.n	80069a0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	440a      	add	r2, r1
 8006992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e000      	b.n	80069a0 <USB_HC_Halt+0x1ea>
          break;
 800699e:	bf00      	nop
    }
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3724      	adds	r7, #36	; 0x24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80069c4:	2301      	movs	r3, #1
 80069c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	04da      	lsls	r2, r3, #19
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <USB_DoPing+0x74>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	1ff80000 	.word	0x1ff80000

08006a28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff f912 	bl	8005c66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a42:	2110      	movs	r1, #16
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff f96b 	bl	8005d20 <USB_FlushTxFifo>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff f997 	bl	8005d88 <USB_FlushRxFifo>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e01f      	b.n	8006aaa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b0f      	cmp	r3, #15
 8006aae:	d9dc      	bls.n	8006a6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e034      	b.n	8006b20 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006adc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	461a      	mov	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afc:	d80c      	bhi.n	8006b18 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b14:	d0ec      	beq.n	8006af0 <USB_StopHost+0xc8>
 8006b16:	e000      	b.n	8006b1a <USB_StopHost+0xf2>
        break;
 8006b18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b0f      	cmp	r3, #15
 8006b24:	d9c7      	bls.n	8006ab6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff f881 	bl	8005c44 <USB_EnableGlobalInt>

  return ret;
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b4c:	b590      	push	{r4, r7, lr}
 8006b4e:	b089      	sub	sp, #36	; 0x24
 8006b50:	af04      	add	r7, sp, #16
 8006b52:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b54:	2301      	movs	r3, #1
 8006b56:	2202      	movs	r2, #2
 8006b58:	2102      	movs	r1, #2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fc66 	bl	800742c <USBH_FindInterface>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2bff      	cmp	r3, #255	; 0xff
 8006b68:	d002      	beq.n	8006b70 <USBH_CDC_InterfaceInit+0x24>
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d901      	bls.n	8006b74 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b70:	2302      	movs	r3, #2
 8006b72:	e13d      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fc3b 	bl	80073f4 <USBH_SelectInterface>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e131      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b92:	2050      	movs	r0, #80	; 0x50
 8006b94:	f002 faf0 	bl	8009178 <malloc>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006bac:	2302      	movs	r3, #2
 8006bae:	e11f      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006bb0:	2250      	movs	r2, #80	; 0x50
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	68b8      	ldr	r0, [r7, #8]
 8006bb6:	f002 fca0 	bl	80094fa <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	211a      	movs	r1, #26
 8006bc0:	fb01 f303 	mul.w	r3, r1, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da15      	bge.n	8006bfe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	211a      	movs	r1, #26
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	211a      	movs	r1, #26
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bf8:	881a      	ldrh	r2, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 ff2e 	bl	8008a66 <USBH_AllocPipe>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	7819      	ldrb	r1, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	7858      	ldrb	r0, [r3, #1]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	8952      	ldrh	r2, [r2, #10]
 8006c2a:	9202      	str	r2, [sp, #8]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	9201      	str	r2, [sp, #4]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4623      	mov	r3, r4
 8006c34:	4602      	mov	r2, r0
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fee6 	bl	8008a08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 f9f5 	bl	8009034 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	210a      	movs	r1, #10
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fbeb 	bl	800742c <USBH_FindInterface>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2bff      	cmp	r3, #255	; 0xff
 8006c5e:	d002      	beq.n	8006c66 <USBH_CDC_InterfaceInit+0x11a>
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d901      	bls.n	8006c6a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	e0c2      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	211a      	movs	r1, #26
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da16      	bge.n	8006cb0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	211a      	movs	r1, #26
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	211a      	movs	r1, #26
 8006c9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ca8:	881a      	ldrh	r2, [r3, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	835a      	strh	r2, [r3, #26]
 8006cae:	e015      	b.n	8006cdc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	211a      	movs	r1, #26
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	211a      	movs	r1, #26
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006cd6:	881a      	ldrh	r2, [r3, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	211a      	movs	r1, #26
 8006ce2:	fb01 f303 	mul.w	r3, r1, r3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da16      	bge.n	8006d22 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	211a      	movs	r1, #26
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	4413      	add	r3, r2
 8006d00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	211a      	movs	r1, #26
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d1a:	881a      	ldrh	r2, [r3, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	835a      	strh	r2, [r3, #26]
 8006d20:	e015      	b.n	8006d4e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	211a      	movs	r1, #26
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	211a      	movs	r1, #26
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d48:	881a      	ldrh	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	7b9b      	ldrb	r3, [r3, #14]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 fe86 	bl	8008a66 <USBH_AllocPipe>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	7bdb      	ldrb	r3, [r3, #15]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fe7c 	bl	8008a66 <USBH_AllocPipe>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	7b59      	ldrb	r1, [r3, #13]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	7b98      	ldrb	r0, [r3, #14]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	8b12      	ldrh	r2, [r2, #24]
 8006d8e:	9202      	str	r2, [sp, #8]
 8006d90:	2202      	movs	r2, #2
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4623      	mov	r3, r4
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fe34 	bl	8008a08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	7b19      	ldrb	r1, [r3, #12]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	7bd8      	ldrb	r0, [r3, #15]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	8b52      	ldrh	r2, [r2, #26]
 8006db8:	9202      	str	r2, [sp, #8]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	9201      	str	r2, [sp, #4]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fe1f 	bl	8008a08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	7b5b      	ldrb	r3, [r3, #13]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 f92a 	bl	8009034 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	7b1b      	ldrb	r3, [r3, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f002 f923 	bl	8009034 <USBH_LL_SetToggle>

  return USBH_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd90      	pop	{r4, r7, pc}

08006df8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fe14 	bl	8008a46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fe3f 	bl	8008aa8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	7b1b      	ldrb	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	7b1b      	ldrb	r3, [r3, #12]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fe01 	bl	8008a46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	7b1b      	ldrb	r3, [r3, #12]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fe2c 	bl	8008aa8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	7b5b      	ldrb	r3, [r3, #13]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00e      	beq.n	8006e7c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	7b5b      	ldrb	r3, [r3, #13]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fdee 	bl	8008a46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	7b5b      	ldrb	r3, [r3, #13]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fe19 	bl	8008aa8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f002 f979 	bl	8009188 <free>
    phost->pActiveClass->pData = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3340      	adds	r3, #64	; 0x40
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8b1 	bl	800702a <GetLineCoding>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d105      	bne.n	8006ede <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ed8:	2102      	movs	r1, #2
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ede:	7afb      	ldrb	r3, [r7, #11]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d877      	bhi.n	8006ffc <USBH_CDC_Process+0x114>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBH_CDC_Process+0x2c>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f2f 	.word	0x08006f2f
 8006f1c:	08006f5f 	.word	0x08006f5f
 8006f20:	08006fd3 	.word	0x08006fd3
 8006f24:	08006fe1 	.word	0x08006fe1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2c:	e06d      	b.n	800700a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f897 	bl	8007068 <SetLineCoding>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d104      	bne.n	8006f4e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f4c:	e058      	b.n	8007000 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d055      	beq.n	8007000 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2204      	movs	r2, #4
 8006f58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f5c:	e050      	b.n	8007000 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3340      	adds	r3, #64	; 0x40
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f860 	bl	800702a <GetLineCoding>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d126      	bne.n	8006fc2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	791b      	ldrb	r3, [r3, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d13b      	bne.n	8007004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d133      	bne.n	8007004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d12b      	bne.n	8007004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d124      	bne.n	8007004 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f958 	bl	8007270 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fc0:	e020      	b.n	8007004 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d01d      	beq.n	8007004 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006fd0:	e018      	b.n	8007004 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f867 	bl	80070a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8da 	bl	8007192 <CDC_ProcessReception>
      break;
 8006fde:	e014      	b.n	800700a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 ffef 	bl	8007fc6 <USBH_ClrFeature>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ffa:	e005      	b.n	8007008 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ffc:	bf00      	nop
 8006ffe:	e004      	b.n	800700a <USBH_CDC_Process+0x122>
      break;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <USBH_CDC_Process+0x122>
      break;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <USBH_CDC_Process+0x122>
      break;
 8007008:	bf00      	nop

  }

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	22a1      	movs	r2, #161	; 0xa1
 8007038:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2221      	movs	r2, #33	; 0x21
 800703e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2207      	movs	r2, #7
 8007050:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2207      	movs	r2, #7
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fa83 	bl	8008564 <USBH_CtlReq>
 800705e:	4603      	mov	r3, r0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2221      	movs	r2, #33	; 0x21
 8007076:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2207      	movs	r2, #7
 800708e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2207      	movs	r2, #7
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fa64 	bl	8008564 <USBH_CtlReq>
 800709c:	4603      	mov	r3, r0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af02      	add	r7, sp, #8
 80070ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d002      	beq.n	80070cc <CDC_ProcessTransmission+0x26>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d023      	beq.n	8007112 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80070ca:	e05e      	b.n	800718a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	8b12      	ldrh	r2, [r2, #24]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d90b      	bls.n	80070f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	69d9      	ldr	r1, [r3, #28]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8b1a      	ldrh	r2, [r3, #24]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	7b5b      	ldrb	r3, [r3, #13]
 80070e4:	2001      	movs	r0, #1
 80070e6:	9000      	str	r0, [sp, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fc4a 	bl	8008982 <USBH_BulkSendData>
 80070ee:	e00b      	b.n	8007108 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	7b5b      	ldrb	r3, [r3, #13]
 80070fe:	2001      	movs	r0, #1
 8007100:	9000      	str	r0, [sp, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fc3d 	bl	8008982 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007110:	e03b      	b.n	800718a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	7b5b      	ldrb	r3, [r3, #13]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 ff61 	bl	8008fe0 <USBH_LL_GetURBState>
 800711e:	4603      	mov	r3, r0
 8007120:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d128      	bne.n	800717a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	8b12      	ldrh	r2, [r2, #24]
 8007130:	4293      	cmp	r3, r2
 8007132:	d90e      	bls.n	8007152 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	8b12      	ldrh	r2, [r2, #24]
 800713c:	1a9a      	subs	r2, r3, r2
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	8b12      	ldrh	r2, [r2, #24]
 800714a:	441a      	add	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	61da      	str	r2, [r3, #28]
 8007150:	e002      	b.n	8007158 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007168:	e00e      	b.n	8007188 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f868 	bl	8007248 <USBH_CDC_TransmitCallback>
      break;
 8007178:	e006      	b.n	8007188 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	2b02      	cmp	r3, #2
 800717e:	d103      	bne.n	8007188 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007188:	bf00      	nop
  }
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d002      	beq.n	80071b8 <CDC_ProcessReception+0x26>
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d00e      	beq.n	80071d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80071b6:	e043      	b.n	8007240 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	6a19      	ldr	r1, [r3, #32]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	8b5a      	ldrh	r2, [r3, #26]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	7b1b      	ldrb	r3, [r3, #12]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fc01 	bl	80089cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2204      	movs	r2, #4
 80071ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071d2:	e035      	b.n	8007240 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	7b1b      	ldrb	r3, [r3, #12]
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 ff00 	bl	8008fe0 <USBH_LL_GetURBState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80071e4:	7cfb      	ldrb	r3, [r7, #19]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d129      	bne.n	800723e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	7b1b      	ldrb	r3, [r3, #12]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fe63 	bl	8008ebc <USBH_LL_GetLastXferSize>
 80071f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d016      	beq.n	8007230 <CDC_ProcessReception+0x9e>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	8b5b      	ldrh	r3, [r3, #26]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4293      	cmp	r3, r2
 800720c:	d910      	bls.n	8007230 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	441a      	add	r2, r3
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2203      	movs	r2, #3
 800722a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800722e:	e006      	b.n	800723e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f80f 	bl	800725c <USBH_CDC_ReceiveCallback>
      break;
 800723e:	bf00      	nop
  }
}
 8007240:	bf00      	nop
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007298:	2302      	movs	r3, #2
 800729a:	e029      	b.n	80072f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	79fa      	ldrb	r2, [r7, #7]
 80072a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f81f 	bl	80072f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f001 fd33 	bl	8008d54 <USBH_LL_Init>

  return USBH_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e009      	b.n	800731e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	33e0      	adds	r3, #224	; 0xe0
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	2200      	movs	r2, #0
 8007316:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b0f      	cmp	r3, #15
 8007322:	d9f2      	bls.n	800730a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e009      	b.n	800733e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007344:	d3f1      	bcc.n	800732a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2240      	movs	r2, #64	; 0x40
 800736a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d016      	beq.n	80073e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10e      	bne.n	80073dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073c4:	1c59      	adds	r1, r3, #1
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	33de      	adds	r3, #222	; 0xde
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
 80073da:	e004      	b.n	80073e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073dc:	2302      	movs	r3, #2
 80073de:	73fb      	strb	r3, [r7, #15]
 80073e0:	e001      	b.n	80073e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073e2:	2302      	movs	r3, #2
 80073e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	429a      	cmp	r2, r3
 800740e:	d204      	bcs.n	800741a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	78fa      	ldrb	r2, [r7, #3]
 8007414:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007418:	e001      	b.n	800741e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800741a:	2302      	movs	r3, #2
 800741c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	4608      	mov	r0, r1
 8007436:	4611      	mov	r1, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4603      	mov	r3, r0
 800743c:	70fb      	strb	r3, [r7, #3]
 800743e:	460b      	mov	r3, r1
 8007440:	70bb      	strb	r3, [r7, #2]
 8007442:	4613      	mov	r3, r2
 8007444:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007454:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007456:	e025      	b.n	80074a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	221a      	movs	r2, #26
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	3308      	adds	r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	3302      	adds	r3, #2
 8007468:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	795b      	ldrb	r3, [r3, #5]
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	429a      	cmp	r2, r3
 8007472:	d002      	beq.n	800747a <USBH_FindInterface+0x4e>
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	2bff      	cmp	r3, #255	; 0xff
 8007478:	d111      	bne.n	800749e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800747e:	78ba      	ldrb	r2, [r7, #2]
 8007480:	429a      	cmp	r2, r3
 8007482:	d002      	beq.n	800748a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007484:	78bb      	ldrb	r3, [r7, #2]
 8007486:	2bff      	cmp	r3, #255	; 0xff
 8007488:	d109      	bne.n	800749e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800748e:	787a      	ldrb	r2, [r7, #1]
 8007490:	429a      	cmp	r2, r3
 8007492:	d002      	beq.n	800749a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007494:	787b      	ldrb	r3, [r7, #1]
 8007496:	2bff      	cmp	r3, #255	; 0xff
 8007498:	d101      	bne.n	800749e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	e006      	b.n	80074ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	3301      	adds	r3, #1
 80074a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d9d6      	bls.n	8007458 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074aa:	23ff      	movs	r3, #255	; 0xff
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fc83 	bl	8008dcc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074c6:	2101      	movs	r1, #1
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fd9c 	bl	8009006 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af04      	add	r7, sp, #16
 80074de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074e0:	2302      	movs	r3, #2
 80074e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d102      	bne.n	80074fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2203      	movs	r2, #3
 80074f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b0b      	cmp	r3, #11
 8007502:	f200 81be 	bhi.w	8007882 <USBH_Process+0x3aa>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <USBH_Process+0x34>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	0800753d 	.word	0x0800753d
 8007510:	0800756f 	.word	0x0800756f
 8007514:	080075d7 	.word	0x080075d7
 8007518:	0800781d 	.word	0x0800781d
 800751c:	08007883 	.word	0x08007883
 8007520:	0800767b 	.word	0x0800767b
 8007524:	080077c3 	.word	0x080077c3
 8007528:	080076b1 	.word	0x080076b1
 800752c:	080076d1 	.word	0x080076d1
 8007530:	080076f1 	.word	0x080076f1
 8007534:	08007735 	.word	0x08007735
 8007538:	08007805 	.word	0x08007805
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 819e 	beq.w	8007886 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007550:	20c8      	movs	r0, #200	; 0xc8
 8007552:	f001 fd9f 	bl	8009094 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fc95 	bl	8008e86 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800756c:	e18b      	b.n	8007886 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007574:	2b01      	cmp	r3, #1
 8007576:	d107      	bne.n	8007588 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007586:	e18d      	b.n	80078a4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800758e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007592:	d914      	bls.n	80075be <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800759a:	3301      	adds	r3, #1
 800759c:	b2da      	uxtb	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d903      	bls.n	80075b6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	220d      	movs	r2, #13
 80075b2:	701a      	strb	r2, [r3, #0]
      break;
 80075b4:	e176      	b.n	80078a4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
      break;
 80075bc:	e172      	b.n	80078a4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075c4:	f103 020a 	add.w	r2, r3, #10
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80075ce:	200a      	movs	r0, #10
 80075d0:	f001 fd60 	bl	8009094 <USBH_Delay>
      break;
 80075d4:	e166      	b.n	80078a4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075e6:	2104      	movs	r1, #4
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075ec:	2064      	movs	r0, #100	; 0x64
 80075ee:	f001 fd51 	bl	8009094 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 fc20 	bl	8008e38 <USBH_LL_GetSpeed>
 80075f8:	4603      	mov	r3, r0
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2205      	movs	r2, #5
 8007606:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 fa2b 	bl	8008a66 <USBH_AllocPipe>
 8007610:	4603      	mov	r3, r0
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fa23 	bl	8008a66 <USBH_AllocPipe>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7919      	ldrb	r1, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800763c:	b292      	uxth	r2, r2
 800763e:	9202      	str	r2, [sp, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	9201      	str	r2, [sp, #4]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4603      	mov	r3, r0
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f9dc 	bl	8008a08 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7959      	ldrb	r1, [r3, #5]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007664:	b292      	uxth	r2, r2
 8007666:	9202      	str	r2, [sp, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	9201      	str	r2, [sp, #4]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	4603      	mov	r3, r0
 8007670:	2200      	movs	r2, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 f9c8 	bl	8008a08 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007678:	e114      	b.n	80078a4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f918 	bl	80078b0 <USBH_HandleEnum>
 8007680:	4603      	mov	r3, r0
 8007682:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	f040 80fe 	bne.w	800788a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800769c:	2b01      	cmp	r3, #1
 800769e:	d103      	bne.n	80076a8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2208      	movs	r2, #8
 80076a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076a6:	e0f0      	b.n	800788a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2207      	movs	r2, #7
 80076ac:	701a      	strb	r2, [r3, #0]
      break;
 80076ae:	e0ec      	b.n	800788a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80e9 	beq.w	800788e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076c2:	2101      	movs	r1, #1
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2208      	movs	r2, #8
 80076cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80076ce:	e0de      	b.n	800788e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc2c 	bl	8007f38 <USBH_SetCfg>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 80d5 	bne.w	8007892 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2209      	movs	r2, #9
 80076ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076ee:	e0d0      	b.n	8007892 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076fe:	2101      	movs	r1, #1
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc3c 	bl	8007f7e <USBH_SetFeature>
 8007706:	4603      	mov	r3, r0
 8007708:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	220a      	movs	r2, #10
 8007716:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007718:	e0bd      	b.n	8007896 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b03      	cmp	r3, #3
 8007720:	f040 80b9 	bne.w	8007896 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	220a      	movs	r2, #10
 8007728:	701a      	strb	r2, [r3, #0]
      break;
 800772a:	e0b4      	b.n	8007896 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	220a      	movs	r2, #10
 8007730:	701a      	strb	r2, [r3, #0]
      break;
 8007732:	e0b0      	b.n	8007896 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80ad 	beq.w	800789a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e016      	b.n	800777c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800774e:	7bfa      	ldrb	r2, [r7, #15]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	32de      	adds	r2, #222	; 0xde
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	791a      	ldrb	r2, [r3, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007760:	429a      	cmp	r2, r3
 8007762:	d108      	bne.n	8007776 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007764:	7bfa      	ldrb	r2, [r7, #15]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32de      	adds	r2, #222	; 0xde
 800776a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007774:	e005      	b.n	8007782 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	3301      	adds	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0e5      	beq.n	800774e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d016      	beq.n	80077ba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2206      	movs	r2, #6
 80077a2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077aa:	2103      	movs	r1, #3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077b0:	e073      	b.n	800789a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	220d      	movs	r2, #13
 80077b6:	701a      	strb	r2, [r3, #0]
      break;
 80077b8:	e06f      	b.n	800789a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	220d      	movs	r2, #13
 80077be:	701a      	strb	r2, [r3, #0]
      break;
 80077c0:	e06b      	b.n	800789a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d017      	beq.n	80077fc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	4603      	mov	r3, r0
 80077da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220b      	movs	r2, #11
 80077e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077ea:	e058      	b.n	800789e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d154      	bne.n	800789e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	220d      	movs	r2, #13
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e050      	b.n	800789e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220d      	movs	r2, #13
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e04c      	b.n	800789e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d049      	beq.n	80078a2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
      }
      break;
 800781a:	e042      	b.n	80078a2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fd67 	bl	80072f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007858:	2105      	movs	r1, #5
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	d107      	bne.n	800787a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fe20 	bl	80074b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007878:	e014      	b.n	80078a4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 faa6 	bl	8008dcc <USBH_LL_Start>
      break;
 8007880:	e010      	b.n	80078a4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007882:	bf00      	nop
 8007884:	e00e      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 8007886:	bf00      	nop
 8007888:	e00c      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 800788a:	bf00      	nop
 800788c:	e00a      	b.n	80078a4 <USBH_Process+0x3cc>
    break;
 800788e:	bf00      	nop
 8007890:	e008      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 8007892:	bf00      	nop
 8007894:	e006      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 80078a2:	bf00      	nop
  }
  return USBH_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop

080078b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af04      	add	r7, sp, #16
 80078b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078bc:	2301      	movs	r3, #1
 80078be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b07      	cmp	r3, #7
 80078c6:	f200 81c1 	bhi.w	8007c4c <USBH_HandleEnum+0x39c>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USBH_HandleEnum+0x20>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078f1 	.word	0x080078f1
 80078d4:	080079af 	.word	0x080079af
 80078d8:	08007a19 	.word	0x08007a19
 80078dc:	08007aa7 	.word	0x08007aa7
 80078e0:	08007b11 	.word	0x08007b11
 80078e4:	08007b81 	.word	0x08007b81
 80078e8:	08007bc7 	.word	0x08007bc7
 80078ec:	08007c0d 	.word	0x08007c0d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078f0:	2108      	movs	r1, #8
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa50 	bl	8007d98 <USBH_Get_DevDesc>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d130      	bne.n	8007964 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7919      	ldrb	r1, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007926:	b292      	uxth	r2, r2
 8007928:	9202      	str	r2, [sp, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	9201      	str	r2, [sp, #4]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	4603      	mov	r3, r0
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f867 	bl	8008a08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	7959      	ldrb	r1, [r3, #5]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800794e:	b292      	uxth	r2, r2
 8007950:	9202      	str	r2, [sp, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	9201      	str	r2, [sp, #4]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4603      	mov	r3, r0
 800795a:	2200      	movs	r2, #0
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f853 	bl	8008a08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007962:	e175      	b.n	8007c50 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b03      	cmp	r3, #3
 8007968:	f040 8172 	bne.w	8007c50 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007972:	3301      	adds	r3, #1
 8007974:	b2da      	uxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007982:	2b03      	cmp	r3, #3
 8007984:	d903      	bls.n	800798e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	220d      	movs	r2, #13
 800798a:	701a      	strb	r2, [r3, #0]
      break;
 800798c:	e160      	b.n	8007c50 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	795b      	ldrb	r3, [r3, #5]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 f887 	bl	8008aa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	791b      	ldrb	r3, [r3, #4]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f881 	bl	8008aa8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
      break;
 80079ac:	e150      	b.n	8007c50 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079ae:	2112      	movs	r1, #18
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f9f1 	bl	8007d98 <USBH_Get_DevDesc>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079c6:	e145      	b.n	8007c54 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	f040 8142 	bne.w	8007c54 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079d6:	3301      	adds	r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d903      	bls.n	80079f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	220d      	movs	r2, #13
 80079ee:	701a      	strb	r2, [r3, #0]
      break;
 80079f0:	e130      	b.n	8007c54 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	795b      	ldrb	r3, [r3, #5]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f855 	bl	8008aa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	791b      	ldrb	r3, [r3, #4]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f84f 	bl	8008aa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
      break;
 8007a16:	e11d      	b.n	8007c54 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa68 	bl	8007ef0 <USBH_SetAddress>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d132      	bne.n	8007a90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007a2a:	2002      	movs	r0, #2
 8007a2c:	f001 fb32 	bl	8009094 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2203      	movs	r2, #3
 8007a3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7919      	ldrb	r1, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a52:	b292      	uxth	r2, r2
 8007a54:	9202      	str	r2, [sp, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	9201      	str	r2, [sp, #4]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 ffd1 	bl	8008a08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	7959      	ldrb	r1, [r3, #5]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	9202      	str	r2, [sp, #8]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	9201      	str	r2, [sp, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4603      	mov	r3, r0
 8007a86:	2200      	movs	r2, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 ffbd 	bl	8008a08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a8e:	e0e3      	b.n	8007c58 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f040 80e0 	bne.w	8007c58 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	220d      	movs	r2, #13
 8007a9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	705a      	strb	r2, [r3, #1]
      break;
 8007aa4:	e0d8      	b.n	8007c58 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007aa6:	2109      	movs	r1, #9
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f99d 	bl	8007de8 <USBH_Get_CfgDesc>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2204      	movs	r2, #4
 8007abc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007abe:	e0cd      	b.n	8007c5c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	f040 80ca 	bne.w	8007c5c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ace:	3301      	adds	r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d903      	bls.n	8007aea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	220d      	movs	r2, #13
 8007ae6:	701a      	strb	r2, [r3, #0]
      break;
 8007ae8:	e0b8      	b.n	8007c5c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	795b      	ldrb	r3, [r3, #5]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 ffd9 	bl	8008aa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 ffd3 	bl	8008aa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e0a5      	b.n	8007c5c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f965 	bl	8007de8 <USBH_Get_CfgDesc>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b2e:	e097      	b.n	8007c60 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	f040 8094 	bne.w	8007c60 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d903      	bls.n	8007b5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	220d      	movs	r2, #13
 8007b56:	701a      	strb	r2, [r3, #0]
      break;
 8007b58:	e082      	b.n	8007c60 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	795b      	ldrb	r3, [r3, #5]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 ffa1 	bl	8008aa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	791b      	ldrb	r3, [r3, #4]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 ff9b 	bl	8008aa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e06f      	b.n	8007c60 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d019      	beq.n	8007bbe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b96:	23ff      	movs	r3, #255	; 0xff
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f949 	bl	8007e30 <USBH_Get_StringDesc>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2206      	movs	r2, #6
 8007bac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bae:	e059      	b.n	8007c64 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d156      	bne.n	8007c64 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2206      	movs	r2, #6
 8007bba:	705a      	strb	r2, [r3, #1]
      break;
 8007bbc:	e052      	b.n	8007c64 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2206      	movs	r2, #6
 8007bc2:	705a      	strb	r2, [r3, #1]
      break;
 8007bc4:	e04e      	b.n	8007c64 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d019      	beq.n	8007c04 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bdc:	23ff      	movs	r3, #255	; 0xff
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f926 	bl	8007e30 <USBH_Get_StringDesc>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2207      	movs	r2, #7
 8007bf2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bf4:	e038      	b.n	8007c68 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d135      	bne.n	8007c68 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2207      	movs	r2, #7
 8007c00:	705a      	strb	r2, [r3, #1]
      break;
 8007c02:	e031      	b.n	8007c68 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2207      	movs	r2, #7
 8007c08:	705a      	strb	r2, [r3, #1]
      break;
 8007c0a:	e02d      	b.n	8007c68 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d017      	beq.n	8007c46 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c22:	23ff      	movs	r3, #255	; 0xff
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f903 	bl	8007e30 <USBH_Get_StringDesc>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c38:	e018      	b.n	8007c6c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d115      	bne.n	8007c6c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
      break;
 8007c44:	e012      	b.n	8007c6c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4a:	e00f      	b.n	8007c6c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e00e      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c50:	bf00      	nop
 8007c52:	e00c      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c54:	bf00      	nop
 8007c56:	e00a      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c58:	bf00      	nop
 8007c5a:	e008      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e006      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c60:	bf00      	nop
 8007c62:	e004      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c64:	bf00      	nop
 8007c66:	e002      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c68:	bf00      	nop
 8007c6a:	e000      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c6c:	bf00      	nop
  }
  return Status;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f804 	bl	8007cba <USBH_HandleSof>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b0b      	cmp	r3, #11
 8007cca:	d10a      	bne.n	8007ce2 <USBH_HandleSof+0x28>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007cfa:	bf00      	nop
}
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007d16:	bf00      	nop
}
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f846 	bl	8008e02 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	791b      	ldrb	r3, [r3, #4]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fe93 	bl	8008aa8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	795b      	ldrb	r3, [r3, #5]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fe8d 	bl	8008aa8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007db6:	2100      	movs	r1, #0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f864 	bl	8007e86 <USBH_GetDescriptor>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f000 f919 	bl	8008010 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	331c      	adds	r3, #28
 8007df8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007dfa:	887b      	ldrh	r3, [r7, #2]
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f83d 	bl	8007e86 <USBH_GetDescriptor>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007e16:	887b      	ldrh	r3, [r7, #2]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f989 	bl	8008134 <USBH_ParseCfgDesc>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	72fb      	strb	r3, [r7, #11]
 8007e40:	4613      	mov	r3, r2
 8007e42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e4c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007e54:	893b      	ldrh	r3, [r7, #8]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f812 	bl	8007e86 <USBH_GetDescriptor>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e72:	893a      	ldrh	r2, [r7, #8]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fb26 	bl	80084c8 <USBH_ParseStringDesc>
  }

  return status;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	607b      	str	r3, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	72fb      	strb	r3, [r7, #11]
 8007e94:	4613      	mov	r3, r2
 8007e96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	789b      	ldrb	r3, [r3, #2]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d11c      	bne.n	8007eda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2206      	movs	r2, #6
 8007eb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	893a      	ldrh	r2, [r7, #8]
 8007eb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007eb8:	893b      	ldrh	r3, [r7, #8]
 8007eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec2:	d104      	bne.n	8007ece <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f240 4209 	movw	r2, #1033	; 0x409
 8007eca:	829a      	strh	r2, [r3, #20]
 8007ecc:	e002      	b.n	8007ed4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8b3a      	ldrh	r2, [r7, #24]
 8007ed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007eda:	8b3b      	ldrh	r3, [r7, #24]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 fb3f 	bl	8008564 <USBH_CtlReq>
 8007ee6:	4603      	mov	r3, r0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	789b      	ldrb	r3, [r3, #2]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10f      	bne.n	8007f24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2205      	movs	r2, #5
 8007f0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb1b 	bl	8008564 <USBH_CtlReq>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	789b      	ldrb	r3, [r3, #2]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d10e      	bne.n	8007f6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2209      	movs	r2, #9
 8007f56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	887a      	ldrh	r2, [r7, #2]
 8007f5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 faf8 	bl	8008564 <USBH_CtlReq>
 8007f74:	4603      	mov	r3, r0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	789b      	ldrb	r3, [r3, #2]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d10f      	bne.n	8007fb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fad4 	bl	8008564 <USBH_CtlReq>
 8007fbc:	4603      	mov	r3, r0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	789b      	ldrb	r3, [r3, #2]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d10f      	bne.n	8007ffa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fab0 	bl	8008564 <USBH_CtlReq>
 8008004:	4603      	mov	r3, r0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	781a      	ldrb	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	785a      	ldrb	r2, [r3, #1]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3302      	adds	r3, #2
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	b29a      	uxth	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3303      	adds	r3, #3
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	b29b      	uxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	791a      	ldrb	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	795a      	ldrb	r2, [r3, #5]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	799a      	ldrb	r2, [r3, #6]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	79da      	ldrb	r2, [r3, #7]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	79db      	ldrb	r3, [r3, #7]
 800806e:	2b20      	cmp	r3, #32
 8008070:	dc0f      	bgt.n	8008092 <USBH_ParseDevDesc+0x82>
 8008072:	2b08      	cmp	r3, #8
 8008074:	db14      	blt.n	80080a0 <USBH_ParseDevDesc+0x90>
 8008076:	3b08      	subs	r3, #8
 8008078:	4a2d      	ldr	r2, [pc, #180]	; (8008130 <USBH_ParseDevDesc+0x120>)
 800807a:	fa22 f303 	lsr.w	r3, r2, r3
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	bf14      	ite	ne
 8008086:	2301      	movne	r3, #1
 8008088:	2300      	moveq	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <USBH_ParseDevDesc+0x86>
 8008090:	e006      	b.n	80080a0 <USBH_ParseDevDesc+0x90>
 8008092:	2b40      	cmp	r3, #64	; 0x40
 8008094:	d104      	bne.n	80080a0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	79da      	ldrb	r2, [r3, #7]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	71da      	strb	r2, [r3, #7]
      break;
 800809e:	e003      	b.n	80080a8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2240      	movs	r2, #64	; 0x40
 80080a4:	71da      	strb	r2, [r3, #7]
      break;
 80080a6:	bf00      	nop
  }

  if (length > 8U)
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d939      	bls.n	8008122 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	3308      	adds	r3, #8
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	3309      	adds	r3, #9
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	4313      	orrs	r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	330a      	adds	r3, #10
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	330b      	adds	r3, #11
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	021b      	lsls	r3, r3, #8
 80080dc:	b29b      	uxth	r3, r3
 80080de:	4313      	orrs	r3, r2
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	330c      	adds	r3, #12
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	330d      	adds	r3, #13
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	4313      	orrs	r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	7b9a      	ldrb	r2, [r3, #14]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	7bda      	ldrb	r2, [r3, #15]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	7c1a      	ldrb	r2, [r3, #16]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	7c5a      	ldrb	r2, [r3, #17]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	745a      	strb	r2, [r3, #17]
  }
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	01000101 	.word	0x01000101

08008134 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08c      	sub	sp, #48	; 0x30
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008148:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	785a      	ldrb	r2, [r3, #1]
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	3302      	adds	r3, #2
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	b29a      	uxth	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3303      	adds	r3, #3
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	b29b      	uxth	r3, r3
 8008188:	4313      	orrs	r3, r2
 800818a:	b29b      	uxth	r3, r3
 800818c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008190:	bf28      	it	cs
 8008192:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008196:	b29a      	uxth	r2, r3
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	791a      	ldrb	r2, [r3, #4]
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	795a      	ldrb	r2, [r3, #5]
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	799a      	ldrb	r2, [r3, #6]
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	79da      	ldrb	r2, [r3, #7]
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	7a1a      	ldrb	r2, [r3, #8]
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b09      	cmp	r3, #9
 80081ca:	d002      	beq.n	80081d2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	2209      	movs	r2, #9
 80081d0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	f240 809d 	bls.w	8008314 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80081da:	2309      	movs	r3, #9
 80081dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081e2:	e081      	b.n	80082e8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081e4:	f107 0316 	add.w	r3, r7, #22
 80081e8:	4619      	mov	r1, r3
 80081ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ec:	f000 f99f 	bl	800852e <USBH_GetNextDesc>
 80081f0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d176      	bne.n	80082e8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	2b09      	cmp	r3, #9
 8008200:	d002      	beq.n	8008208 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	2209      	movs	r2, #9
 8008206:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800820c:	221a      	movs	r2, #26
 800820e:	fb02 f303 	mul.w	r3, r2, r3
 8008212:	3308      	adds	r3, #8
 8008214:	6a3a      	ldr	r2, [r7, #32]
 8008216:	4413      	add	r3, r2
 8008218:	3302      	adds	r3, #2
 800821a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800821c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800821e:	69f8      	ldr	r0, [r7, #28]
 8008220:	f000 f87e 	bl	8008320 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800822e:	e043      	b.n	80082b8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008230:	f107 0316 	add.w	r3, r7, #22
 8008234:	4619      	mov	r1, r3
 8008236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008238:	f000 f979 	bl	800852e <USBH_GetNextDesc>
 800823c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b05      	cmp	r3, #5
 8008244:	d138      	bne.n	80082b8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	795b      	ldrb	r3, [r3, #5]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d10f      	bne.n	800826e <USBH_ParseCfgDesc+0x13a>
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	799b      	ldrb	r3, [r3, #6]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d10b      	bne.n	800826e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	79db      	ldrb	r3, [r3, #7]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10f      	bne.n	800827e <USBH_ParseCfgDesc+0x14a>
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b09      	cmp	r3, #9
 8008264:	d00b      	beq.n	800827e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	2209      	movs	r2, #9
 800826a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800826c:	e007      	b.n	800827e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b07      	cmp	r3, #7
 8008274:	d004      	beq.n	8008280 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	2207      	movs	r2, #7
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e000      	b.n	8008280 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800827e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008284:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008288:	3201      	adds	r2, #1
 800828a:	00d2      	lsls	r2, r2, #3
 800828c:	211a      	movs	r1, #26
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	4413      	add	r3, r2
 8008294:	3308      	adds	r3, #8
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	4413      	add	r3, r2
 800829a:	3304      	adds	r3, #4
 800829c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800829e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a0:	69b9      	ldr	r1, [r7, #24]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f86b 	bl	800837e <USBH_ParseEPDesc>
 80082a8:	4603      	mov	r3, r0
 80082aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80082ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082b2:	3301      	adds	r3, #1
 80082b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	791b      	ldrb	r3, [r3, #4]
 80082bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d204      	bcs.n	80082ce <USBH_ParseCfgDesc+0x19a>
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	885a      	ldrh	r2, [r3, #2]
 80082c8:	8afb      	ldrh	r3, [r7, #22]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d8b0      	bhi.n	8008230 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	791b      	ldrb	r3, [r3, #4]
 80082d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d201      	bcs.n	80082de <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80082da:	2303      	movs	r3, #3
 80082dc:	e01c      	b.n	8008318 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80082de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e2:	3301      	adds	r3, #1
 80082e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d805      	bhi.n	80082fc <USBH_ParseCfgDesc+0x1c8>
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	885a      	ldrh	r2, [r3, #2]
 80082f4:	8afb      	ldrh	r3, [r7, #22]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	f63f af74 	bhi.w	80081e4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	791b      	ldrb	r3, [r3, #4]
 8008300:	2b02      	cmp	r3, #2
 8008302:	bf28      	it	cs
 8008304:	2302      	movcs	r3, #2
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800830c:	429a      	cmp	r2, r3
 800830e:	d201      	bcs.n	8008314 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008310:	2303      	movs	r3, #3
 8008312:	e001      	b.n	8008318 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008318:	4618      	mov	r0, r3
 800831a:	3730      	adds	r7, #48	; 0x30
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781a      	ldrb	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	785a      	ldrb	r2, [r3, #1]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	789a      	ldrb	r2, [r3, #2]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	78da      	ldrb	r2, [r3, #3]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	791a      	ldrb	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	795a      	ldrb	r2, [r3, #5]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	799a      	ldrb	r2, [r3, #6]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	79da      	ldrb	r2, [r3, #7]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	7a1a      	ldrb	r2, [r3, #8]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	721a      	strb	r2, [r3, #8]
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800837e:	b480      	push	{r7}
 8008380:	b087      	sub	sp, #28
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	785a      	ldrb	r2, [r3, #1]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	789a      	ldrb	r2, [r3, #2]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	78da      	ldrb	r2, [r3, #3]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3304      	adds	r3, #4
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3305      	adds	r3, #5
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	799a      	ldrb	r2, [r3, #6]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	889b      	ldrh	r3, [r3, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80083da:	2303      	movs	r3, #3
 80083dc:	75fb      	strb	r3, [r7, #23]
 80083de:	e033      	b.n	8008448 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	889b      	ldrh	r3, [r3, #4]
 80083e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80083e8:	f023 0307 	bic.w	r3, r3, #7
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	889b      	ldrh	r3, [r3, #4]
 80083f6:	b21a      	sxth	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	b299      	uxth	r1, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3305      	adds	r3, #5
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	b29b      	uxth	r3, r3
 800840c:	430b      	orrs	r3, r1
 800840e:	b29b      	uxth	r3, r3
 8008410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008414:	2b00      	cmp	r3, #0
 8008416:	d110      	bne.n	800843a <USBH_ParseEPDesc+0xbc>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3304      	adds	r3, #4
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b299      	uxth	r1, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3305      	adds	r3, #5
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	021b      	lsls	r3, r3, #8
 800842a:	b29b      	uxth	r3, r3
 800842c:	430b      	orrs	r3, r1
 800842e:	b29b      	uxth	r3, r3
 8008430:	b21b      	sxth	r3, r3
 8008432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008436:	b21b      	sxth	r3, r3
 8008438:	e001      	b.n	800843e <USBH_ParseEPDesc+0xc0>
 800843a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800843e:	4313      	orrs	r3, r2
 8008440:	b21b      	sxth	r3, r3
 8008442:	b29a      	uxth	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800844e:	2b00      	cmp	r3, #0
 8008450:	d116      	bne.n	8008480 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	78db      	ldrb	r3, [r3, #3]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	2b01      	cmp	r3, #1
 800845c:	d005      	beq.n	800846a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	78db      	ldrb	r3, [r3, #3]
 8008462:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008466:	2b03      	cmp	r3, #3
 8008468:	d127      	bne.n	80084ba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	799b      	ldrb	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <USBH_ParseEPDesc+0xfc>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	799b      	ldrb	r3, [r3, #6]
 8008476:	2b10      	cmp	r3, #16
 8008478:	d91f      	bls.n	80084ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800847a:	2303      	movs	r3, #3
 800847c:	75fb      	strb	r3, [r7, #23]
 800847e:	e01c      	b.n	80084ba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	78db      	ldrb	r3, [r3, #3]
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	2b01      	cmp	r3, #1
 800848a:	d10a      	bne.n	80084a2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	799b      	ldrb	r3, [r3, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <USBH_ParseEPDesc+0x11e>
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	799b      	ldrb	r3, [r3, #6]
 8008498:	2b10      	cmp	r3, #16
 800849a:	d90e      	bls.n	80084ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800849c:	2303      	movs	r3, #3
 800849e:	75fb      	strb	r3, [r7, #23]
 80084a0:	e00b      	b.n	80084ba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	78db      	ldrb	r3, [r3, #3]
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d105      	bne.n	80084ba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	799b      	ldrb	r3, [r3, #6]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80084b6:	2303      	movs	r3, #3
 80084b8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4613      	mov	r3, r2
 80084d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d120      	bne.n	8008522 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	1e9a      	subs	r2, r3, #2
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	4293      	cmp	r3, r2
 80084ea:	bf28      	it	cs
 80084ec:	4613      	movcs	r3, r2
 80084ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3302      	adds	r3, #2
 80084f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084f6:	2300      	movs	r3, #0
 80084f8:	82fb      	strh	r3, [r7, #22]
 80084fa:	e00b      	b.n	8008514 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084fc:	8afb      	ldrh	r3, [r7, #22]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	781a      	ldrb	r2, [r3, #0]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	3301      	adds	r3, #1
 800850c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800850e:	8afb      	ldrh	r3, [r7, #22]
 8008510:	3302      	adds	r3, #2
 8008512:	82fb      	strh	r3, [r7, #22]
 8008514:	8afa      	ldrh	r2, [r7, #22]
 8008516:	8abb      	ldrh	r3, [r7, #20]
 8008518:	429a      	cmp	r2, r3
 800851a:	d3ef      	bcc.n	80084fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	701a      	strb	r2, [r3, #0]
  }
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	881a      	ldrh	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	4413      	add	r3, r2
 8008544:	b29a      	uxth	r2, r3
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008556:	68fb      	ldr	r3, [r7, #12]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008572:	2301      	movs	r3, #1
 8008574:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	789b      	ldrb	r3, [r3, #2]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d002      	beq.n	8008584 <USBH_CtlReq+0x20>
 800857e:	2b02      	cmp	r3, #2
 8008580:	d00f      	beq.n	80085a2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008582:	e027      	b.n	80085d4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	88fa      	ldrh	r2, [r7, #6]
 800858e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2202      	movs	r2, #2
 800859a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800859c:	2301      	movs	r3, #1
 800859e:	75fb      	strb	r3, [r7, #23]
      break;
 80085a0:	e018      	b.n	80085d4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 f81c 	bl	80085e0 <USBH_HandleControl>
 80085a8:	4603      	mov	r3, r0
 80085aa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <USBH_CtlReq+0x54>
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d106      	bne.n	80085c6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	761a      	strb	r2, [r3, #24]
      break;
 80085c4:	e005      	b.n	80085d2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d102      	bne.n	80085d2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	709a      	strb	r2, [r3, #2]
      break;
 80085d2:	bf00      	nop
  }
  return status;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7e1b      	ldrb	r3, [r3, #24]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	2b0a      	cmp	r3, #10
 80085f8:	f200 8156 	bhi.w	80088a8 <USBH_HandleControl+0x2c8>
 80085fc:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USBH_HandleControl+0x24>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	08008631 	.word	0x08008631
 8008608:	0800864b 	.word	0x0800864b
 800860c:	080086b5 	.word	0x080086b5
 8008610:	080086db 	.word	0x080086db
 8008614:	08008713 	.word	0x08008713
 8008618:	0800873d 	.word	0x0800873d
 800861c:	0800878f 	.word	0x0800878f
 8008620:	080087b1 	.word	0x080087b1
 8008624:	080087ed 	.word	0x080087ed
 8008628:	08008813 	.word	0x08008813
 800862c:	08008851 	.word	0x08008851
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f103 0110 	add.w	r1, r3, #16
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	795b      	ldrb	r3, [r3, #5]
 800863a:	461a      	mov	r2, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f943 	bl	80088c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	761a      	strb	r2, [r3, #24]
      break;
 8008648:	e139      	b.n	80088be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	795b      	ldrb	r3, [r3, #5]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fcc5 	bl	8008fe0 <USBH_LL_GetURBState>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d11e      	bne.n	800869e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7c1b      	ldrb	r3, [r3, #16]
 8008664:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008668:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	8adb      	ldrh	r3, [r3, #22]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008672:	7b7b      	ldrb	r3, [r7, #13]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d103      	bne.n	8008680 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2203      	movs	r2, #3
 800867c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800867e:	e115      	b.n	80088ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2205      	movs	r2, #5
 8008684:	761a      	strb	r2, [r3, #24]
      break;
 8008686:	e111      	b.n	80088ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008688:	7b7b      	ldrb	r3, [r7, #13]
 800868a:	2b80      	cmp	r3, #128	; 0x80
 800868c:	d103      	bne.n	8008696 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2209      	movs	r2, #9
 8008692:	761a      	strb	r2, [r3, #24]
      break;
 8008694:	e10a      	b.n	80088ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2207      	movs	r2, #7
 800869a:	761a      	strb	r2, [r3, #24]
      break;
 800869c:	e106      	b.n	80088ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d003      	beq.n	80086ac <USBH_HandleControl+0xcc>
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	f040 8100 	bne.w	80088ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	220b      	movs	r2, #11
 80086b0:	761a      	strb	r2, [r3, #24]
      break;
 80086b2:	e0fb      	b.n	80088ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6899      	ldr	r1, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	899a      	ldrh	r2, [r3, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	791b      	ldrb	r3, [r3, #4]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f93a 	bl	8008946 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2204      	movs	r2, #4
 80086d6:	761a      	strb	r2, [r3, #24]
      break;
 80086d8:	e0f1      	b.n	80088be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	791b      	ldrb	r3, [r3, #4]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc7d 	bl	8008fe0 <USBH_LL_GetURBState>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d102      	bne.n	80086f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2209      	movs	r2, #9
 80086f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b05      	cmp	r3, #5
 80086fa:	d102      	bne.n	8008702 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086fc:	2303      	movs	r3, #3
 80086fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008700:	e0d6      	b.n	80088b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b04      	cmp	r3, #4
 8008706:	f040 80d3 	bne.w	80088b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	220b      	movs	r2, #11
 800870e:	761a      	strb	r2, [r3, #24]
      break;
 8008710:	e0ce      	b.n	80088b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6899      	ldr	r1, [r3, #8]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	899a      	ldrh	r2, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	795b      	ldrb	r3, [r3, #5]
 800871e:	2001      	movs	r0, #1
 8008720:	9000      	str	r0, [sp, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f8ea 	bl	80088fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800872e:	b29a      	uxth	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2206      	movs	r2, #6
 8008738:	761a      	strb	r2, [r3, #24]
      break;
 800873a:	e0c0      	b.n	80088be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	795b      	ldrb	r3, [r3, #5]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fc4c 	bl	8008fe0 <USBH_LL_GetURBState>
 8008748:	4603      	mov	r3, r0
 800874a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d103      	bne.n	800875a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2207      	movs	r2, #7
 8008756:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008758:	e0ac      	b.n	80088b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b05      	cmp	r3, #5
 800875e:	d105      	bne.n	800876c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220c      	movs	r2, #12
 8008764:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008766:	2303      	movs	r3, #3
 8008768:	73fb      	strb	r3, [r7, #15]
      break;
 800876a:	e0a3      	b.n	80088b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d103      	bne.n	800877a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2205      	movs	r2, #5
 8008776:	761a      	strb	r2, [r3, #24]
      break;
 8008778:	e09c      	b.n	80088b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	2b04      	cmp	r3, #4
 800877e:	f040 8099 	bne.w	80088b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	220b      	movs	r2, #11
 8008786:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008788:	2302      	movs	r3, #2
 800878a:	73fb      	strb	r3, [r7, #15]
      break;
 800878c:	e092      	b.n	80088b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	791b      	ldrb	r3, [r3, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	2100      	movs	r1, #0
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8d5 	bl	8008946 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2208      	movs	r2, #8
 80087ac:	761a      	strb	r2, [r3, #24]

      break;
 80087ae:	e086      	b.n	80088be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	791b      	ldrb	r3, [r3, #4]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc12 	bl	8008fe0 <USBH_LL_GetURBState>
 80087bc:	4603      	mov	r3, r0
 80087be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d105      	bne.n	80087d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	220d      	movs	r2, #13
 80087ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087d0:	e072      	b.n	80088b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d103      	bne.n	80087e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	220b      	movs	r2, #11
 80087dc:	761a      	strb	r2, [r3, #24]
      break;
 80087de:	e06b      	b.n	80088b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	2b05      	cmp	r3, #5
 80087e4:	d168      	bne.n	80088b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087e6:	2303      	movs	r3, #3
 80087e8:	73fb      	strb	r3, [r7, #15]
      break;
 80087ea:	e065      	b.n	80088b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	795b      	ldrb	r3, [r3, #5]
 80087f0:	2201      	movs	r2, #1
 80087f2:	9200      	str	r2, [sp, #0]
 80087f4:	2200      	movs	r2, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f87f 	bl	80088fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	220a      	movs	r2, #10
 800880e:	761a      	strb	r2, [r3, #24]
      break;
 8008810:	e055      	b.n	80088be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	795b      	ldrb	r3, [r3, #5]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fbe1 	bl	8008fe0 <USBH_LL_GetURBState>
 800881e:	4603      	mov	r3, r0
 8008820:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d105      	bne.n	8008834 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	220d      	movs	r2, #13
 8008830:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008832:	e043      	b.n	80088bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d103      	bne.n	8008842 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2209      	movs	r2, #9
 800883e:	761a      	strb	r2, [r3, #24]
      break;
 8008840:	e03c      	b.n	80088bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b04      	cmp	r3, #4
 8008846:	d139      	bne.n	80088bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	220b      	movs	r2, #11
 800884c:	761a      	strb	r2, [r3, #24]
      break;
 800884e:	e035      	b.n	80088bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	7e5b      	ldrb	r3, [r3, #25]
 8008854:	3301      	adds	r3, #1
 8008856:	b2da      	uxtb	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	765a      	strb	r2, [r3, #25]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	7e5b      	ldrb	r3, [r3, #25]
 8008860:	2b02      	cmp	r3, #2
 8008862:	d806      	bhi.n	8008872 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008870:	e025      	b.n	80088be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008878:	2106      	movs	r1, #6
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	795b      	ldrb	r3, [r3, #5]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f90c 	bl	8008aa8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	791b      	ldrb	r3, [r3, #4]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f906 	bl	8008aa8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	73fb      	strb	r3, [r7, #15]
      break;
 80088a6:	e00a      	b.n	80088be <USBH_HandleControl+0x2de>

    default:
      break;
 80088a8:	bf00      	nop
 80088aa:	e008      	b.n	80088be <USBH_HandleControl+0x2de>
      break;
 80088ac:	bf00      	nop
 80088ae:	e006      	b.n	80088be <USBH_HandleControl+0x2de>
      break;
 80088b0:	bf00      	nop
 80088b2:	e004      	b.n	80088be <USBH_HandleControl+0x2de>
      break;
 80088b4:	bf00      	nop
 80088b6:	e002      	b.n	80088be <USBH_HandleControl+0x2de>
      break;
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <USBH_HandleControl+0x2de>
      break;
 80088bc:	bf00      	nop
  }

  return status;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af04      	add	r7, sp, #16
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	4613      	mov	r3, r2
 80088d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088d6:	79f9      	ldrb	r1, [r7, #7]
 80088d8:	2300      	movs	r3, #0
 80088da:	9303      	str	r3, [sp, #12]
 80088dc:	2308      	movs	r3, #8
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	2300      	movs	r3, #0
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	2200      	movs	r2, #0
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fb46 	bl	8008f7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af04      	add	r7, sp, #16
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4611      	mov	r1, r2
 8008908:	461a      	mov	r2, r3
 800890a:	460b      	mov	r3, r1
 800890c:	80fb      	strh	r3, [r7, #6]
 800890e:	4613      	mov	r3, r2
 8008910:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008920:	7979      	ldrb	r1, [r7, #5]
 8008922:	7e3b      	ldrb	r3, [r7, #24]
 8008924:	9303      	str	r3, [sp, #12]
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	9302      	str	r3, [sp, #8]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	2301      	movs	r3, #1
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	2300      	movs	r3, #0
 8008934:	2200      	movs	r2, #0
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fb21 	bl	8008f7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b088      	sub	sp, #32
 800894a:	af04      	add	r7, sp, #16
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	4611      	mov	r1, r2
 8008952:	461a      	mov	r2, r3
 8008954:	460b      	mov	r3, r1
 8008956:	80fb      	strh	r3, [r7, #6]
 8008958:	4613      	mov	r3, r2
 800895a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800895c:	7979      	ldrb	r1, [r7, #5]
 800895e:	2300      	movs	r3, #0
 8008960:	9303      	str	r3, [sp, #12]
 8008962:	88fb      	ldrh	r3, [r7, #6]
 8008964:	9302      	str	r3, [sp, #8]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	2301      	movs	r3, #1
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	2300      	movs	r3, #0
 8008970:	2201      	movs	r2, #1
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fb03 	bl	8008f7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008978:	2300      	movs	r3, #0

}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b088      	sub	sp, #32
 8008986:	af04      	add	r7, sp, #16
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	4611      	mov	r1, r2
 800898e:	461a      	mov	r2, r3
 8008990:	460b      	mov	r3, r1
 8008992:	80fb      	strh	r3, [r7, #6]
 8008994:	4613      	mov	r3, r2
 8008996:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089a6:	7979      	ldrb	r1, [r7, #5]
 80089a8:	7e3b      	ldrb	r3, [r7, #24]
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	9302      	str	r3, [sp, #8]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	2301      	movs	r3, #1
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	2302      	movs	r3, #2
 80089ba:	2200      	movs	r2, #0
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fade 	bl	8008f7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af04      	add	r7, sp, #16
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4611      	mov	r1, r2
 80089d8:	461a      	mov	r2, r3
 80089da:	460b      	mov	r3, r1
 80089dc:	80fb      	strh	r3, [r7, #6]
 80089de:	4613      	mov	r3, r2
 80089e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089e2:	7979      	ldrb	r1, [r7, #5]
 80089e4:	2300      	movs	r3, #0
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	9302      	str	r3, [sp, #8]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	2301      	movs	r3, #1
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	2302      	movs	r3, #2
 80089f6:	2201      	movs	r2, #1
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fac0 	bl	8008f7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af04      	add	r7, sp, #16
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	70fb      	strb	r3, [r7, #3]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70bb      	strb	r3, [r7, #2]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a22:	7878      	ldrb	r0, [r7, #1]
 8008a24:	78ba      	ldrb	r2, [r7, #2]
 8008a26:	78f9      	ldrb	r1, [r7, #3]
 8008a28:	8b3b      	ldrh	r3, [r7, #24]
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	7d3b      	ldrb	r3, [r7, #20]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	7c3b      	ldrb	r3, [r7, #16]
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4603      	mov	r3, r0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fa53 	bl	8008ee2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa72 	bl	8008f40 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f836 	bl	8008ae4 <USBH_GetFreePipe>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a7c:	89fb      	ldrh	r3, [r7, #14]
 8008a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00a      	beq.n	8008a9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a86:	78fa      	ldrb	r2, [r7, #3]
 8008a88:	89fb      	ldrh	r3, [r7, #14]
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	33e0      	adds	r3, #224	; 0xe0
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	440b      	add	r3, r1
 8008a9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a9c:	89fb      	ldrh	r3, [r7, #14]
 8008a9e:	b2db      	uxtb	r3, r3
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	2b0f      	cmp	r3, #15
 8008ab8:	d80d      	bhi.n	8008ad6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	33e0      	adds	r3, #224	; 0xe0
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	33e0      	adds	r3, #224	; 0xe0
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
 8008af4:	e00f      	b.n	8008b16 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	33e0      	adds	r3, #224	; 0xe0
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	e007      	b.n	8008b20 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	3301      	adds	r3, #1
 8008b14:	73fb      	strb	r3, [r7, #15]
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b0f      	cmp	r3, #15
 8008b1a:	d9ec      	bls.n	8008af6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b30:	2201      	movs	r2, #1
 8008b32:	490e      	ldr	r1, [pc, #56]	; (8008b6c <MX_USB_HOST_Init+0x40>)
 8008b34:	480e      	ldr	r0, [pc, #56]	; (8008b70 <MX_USB_HOST_Init+0x44>)
 8008b36:	f7fe fba5 	bl	8007284 <USBH_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b40:	f7f7 ff6c 	bl	8000a1c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b44:	490b      	ldr	r1, [pc, #44]	; (8008b74 <MX_USB_HOST_Init+0x48>)
 8008b46:	480a      	ldr	r0, [pc, #40]	; (8008b70 <MX_USB_HOST_Init+0x44>)
 8008b48:	f7fe fc2a 	bl	80073a0 <USBH_RegisterClass>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b52:	f7f7 ff63 	bl	8000a1c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b56:	4806      	ldr	r0, [pc, #24]	; (8008b70 <MX_USB_HOST_Init+0x44>)
 8008b58:	f7fe fcae 	bl	80074b8 <USBH_Start>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b62:	f7f7 ff5b 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b66:	bf00      	nop
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	08008b8d 	.word	0x08008b8d
 8008b70:	200001b0 	.word	0x200001b0
 8008b74:	20000014 	.word	0x20000014

08008b78 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b7c:	4802      	ldr	r0, [pc, #8]	; (8008b88 <MX_USB_HOST_Process+0x10>)
 8008b7e:	f7fe fcab 	bl	80074d8 <USBH_Process>
}
 8008b82:	bf00      	nop
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200001b0 	.word	0x200001b0

08008b8c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d819      	bhi.n	8008bd4 <USBH_UserProcess+0x48>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USBH_UserProcess+0x1c>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	08008bc5 	.word	0x08008bc5
 8008bb0:	08008bd5 	.word	0x08008bd5
 8008bb4:	08008bcd 	.word	0x08008bcd
 8008bb8:	08008bbd 	.word	0x08008bbd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008bbc:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <USBH_UserProcess+0x58>)
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	701a      	strb	r2, [r3, #0]
  break;
 8008bc2:	e008      	b.n	8008bd6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008bc4:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <USBH_UserProcess+0x58>)
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	701a      	strb	r2, [r3, #0]
  break;
 8008bca:	e004      	b.n	8008bd6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <USBH_UserProcess+0x58>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	701a      	strb	r2, [r3, #0]
  break;
 8008bd2:	e000      	b.n	8008bd6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008bd4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20000588 	.word	0x20000588

08008be8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08a      	sub	sp, #40	; 0x28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf0:	f107 0314 	add.w	r3, r7, #20
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	609a      	str	r2, [r3, #8]
 8008bfc:	60da      	str	r2, [r3, #12]
 8008bfe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c08:	d147      	bne.n	8008c9a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	4b25      	ldr	r3, [pc, #148]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	4a24      	ldr	r2, [pc, #144]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c14:	f043 0301 	orr.w	r3, r3, #1
 8008c18:	6313      	str	r3, [r2, #48]	; 0x30
 8008c1a:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c34:	f107 0314 	add.w	r3, r7, #20
 8008c38:	4619      	mov	r1, r3
 8008c3a:	481b      	ldr	r0, [pc, #108]	; (8008ca8 <HAL_HCD_MspInit+0xc0>)
 8008c3c:	f7f8 fc50 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c46:	2302      	movs	r3, #2
 8008c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c52:	230a      	movs	r3, #10
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c56:	f107 0314 	add.w	r3, r7, #20
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4812      	ldr	r0, [pc, #72]	; (8008ca8 <HAL_HCD_MspInit+0xc0>)
 8008c5e:	f7f8 fc3f 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c62:	4b10      	ldr	r3, [pc, #64]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	4a0f      	ldr	r2, [pc, #60]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6c:	6353      	str	r3, [r2, #52]	; 0x34
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c76:	4a0b      	ldr	r2, [pc, #44]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <HAL_HCD_MspInit+0xbc>)
 8008c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	2043      	movs	r0, #67	; 0x43
 8008c90:	f7f8 fbef 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c94:	2043      	movs	r0, #67	; 0x43
 8008c96:	f7f8 fc08 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c9a:	bf00      	nop
 8008c9c:	3728      	adds	r7, #40	; 0x28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40023800 	.word	0x40023800
 8008ca8:	40020000 	.word	0x40020000

08008cac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe ffeb 	bl	8007c96 <USBH_LL_IncTimer>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff f823 	bl	8007d22 <USBH_LL_Connect>
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff f82c 	bl	8007d50 <USBH_LL_Disconnect>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe ffdd 	bl	8007cea <USBH_LL_PortEnabled>
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe ffdd 	bl	8007d06 <USBH_LL_PortDisabled>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d12a      	bne.n	8008dbc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d66:	4a18      	ldr	r2, [pc, #96]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a15      	ldr	r2, [pc, #84]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d72:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d7c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d7e:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d80:	2208      	movs	r2, #8
 8008d82:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d84:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d8a:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d90:	4b0d      	ldr	r3, [pc, #52]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d92:	2202      	movs	r2, #2
 8008d94:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d9c:	480a      	ldr	r0, [pc, #40]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008d9e:	f7f8 fd54 	bl	800184a <HAL_HCD_Init>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008da8:	f7f7 fe38 	bl	8000a1c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008dac:	4806      	ldr	r0, [pc, #24]	; (8008dc8 <USBH_LL_Init+0x74>)
 8008dae:	f7f9 f938 	bl	8002022 <HAL_HCD_GetCurrentFrame>
 8008db2:	4603      	mov	r3, r0
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fe ff5e 	bl	8007c78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2000058c 	.word	0x2000058c

08008dcc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7f9 f8a7 	bl	8001f36 <HAL_HCD_Start>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 f95c 	bl	80090ac <USBH_Get_USB_Status>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7f9 f8af 	bl	8001f7c <HAL_HCD_Stop>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f941 	bl	80090ac <USBH_Get_USB_Status>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7f9 f8f7 	bl	800203e <HAL_HCD_GetCurrentSpeed>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d00c      	beq.n	8008e70 <USBH_LL_GetSpeed+0x38>
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d80d      	bhi.n	8008e76 <USBH_LL_GetSpeed+0x3e>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <USBH_LL_GetSpeed+0x2c>
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d003      	beq.n	8008e6a <USBH_LL_GetSpeed+0x32>
 8008e62:	e008      	b.n	8008e76 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	e008      	b.n	8008e7c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6e:	e005      	b.n	8008e7c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e70:	2302      	movs	r3, #2
 8008e72:	73fb      	strb	r3, [r7, #15]
    break;
 8008e74:	e002      	b.n	8008e7c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e76:	2301      	movs	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7a:	bf00      	nop
  }
  return  speed;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7f9 f88a 	bl	8001fb6 <HAL_HCD_ResetPort>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 f8ff 	bl	80090ac <USBH_Get_USB_Status>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f9 f891 	bl	8001ffa <HAL_HCD_HC_GetXferCount>
 8008ed8:	4603      	mov	r3, r0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ee2:	b590      	push	{r4, r7, lr}
 8008ee4:	b089      	sub	sp, #36	; 0x24
 8008ee6:	af04      	add	r7, sp, #16
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	4608      	mov	r0, r1
 8008eec:	4611      	mov	r1, r2
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	70fb      	strb	r3, [r7, #3]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70bb      	strb	r3, [r7, #2]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f0a:	787c      	ldrb	r4, [r7, #1]
 8008f0c:	78ba      	ldrb	r2, [r7, #2]
 8008f0e:	78f9      	ldrb	r1, [r7, #3]
 8008f10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f12:	9302      	str	r3, [sp, #8]
 8008f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	4623      	mov	r3, r4
 8008f22:	f7f8 fcf4 	bl	800190e <HAL_HCD_HC_Init>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f8bd 	bl	80090ac <USBH_Get_USB_Status>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd90      	pop	{r4, r7, pc}

08008f40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f8 fd64 	bl	8001a2c <HAL_HCD_HC_Halt>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f89e 	bl	80090ac <USBH_Get_USB_Status>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f7e:	b590      	push	{r4, r7, lr}
 8008f80:	b089      	sub	sp, #36	; 0x24
 8008f82:	af04      	add	r7, sp, #16
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	4608      	mov	r0, r1
 8008f88:	4611      	mov	r1, r2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	70fb      	strb	r3, [r7, #3]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70bb      	strb	r3, [r7, #2]
 8008f94:	4613      	mov	r3, r2
 8008f96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008fa6:	787c      	ldrb	r4, [r7, #1]
 8008fa8:	78ba      	ldrb	r2, [r7, #2]
 8008faa:	78f9      	ldrb	r1, [r7, #3]
 8008fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fb4:	9302      	str	r3, [sp, #8]
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	f7f8 fd57 	bl	8001a74 <HAL_HCD_HC_SubmitRequest>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f86d 	bl	80090ac <USBH_Get_USB_Status>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd90      	pop	{r4, r7, pc}

08008fe0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f8 ffeb 	bl	8001fd2 <HAL_HCD_HC_GetURBState>
 8008ffc:	4603      	mov	r3, r0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009018:	2b01      	cmp	r3, #1
 800901a:	d103      	bne.n	8009024 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f870 	bl	8009104 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009024:	20c8      	movs	r0, #200	; 0xc8
 8009026:	f7f8 f925 	bl	8001274 <HAL_Delay>
  return USBH_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
 8009040:	4613      	mov	r3, r2
 8009042:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800904a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	212c      	movs	r1, #44	; 0x2c
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	333b      	adds	r3, #59	; 0x3b
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	212c      	movs	r1, #44	; 0x2c
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	3354      	adds	r3, #84	; 0x54
 800906e:	78ba      	ldrb	r2, [r7, #2]
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	e008      	b.n	8009086 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	212c      	movs	r1, #44	; 0x2c
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	3355      	adds	r3, #85	; 0x55
 8009082:	78ba      	ldrb	r2, [r7, #2]
 8009084:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7f8 f8e9 	bl	8001274 <HAL_Delay>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d817      	bhi.n	80090f0 <USBH_Get_USB_Status+0x44>
 80090c0:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <USBH_Get_USB_Status+0x1c>)
 80090c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c6:	bf00      	nop
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	080090df 	.word	0x080090df
 80090d0:	080090e5 	.word	0x080090e5
 80090d4:	080090eb 	.word	0x080090eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
    break;
 80090dc:	e00b      	b.n	80090f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090de:	2302      	movs	r3, #2
 80090e0:	73fb      	strb	r3, [r7, #15]
    break;
 80090e2:	e008      	b.n	80090f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090e4:	2301      	movs	r3, #1
 80090e6:	73fb      	strb	r3, [r7, #15]
    break;
 80090e8:	e005      	b.n	80090f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090ea:	2302      	movs	r3, #2
 80090ec:	73fb      	strb	r3, [r7, #15]
    break;
 80090ee:	e002      	b.n	80090f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090f0:	2302      	movs	r3, #2
 80090f2:	73fb      	strb	r3, [r7, #15]
    break;
 80090f4:	bf00      	nop
  }
  return usb_status;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]
 800911c:	e001      	b.n	8009122 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800911e:	2301      	movs	r3, #1
 8009120:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	461a      	mov	r2, r3
 8009126:	2101      	movs	r1, #1
 8009128:	4803      	ldr	r0, [pc, #12]	; (8009138 <MX_DriverVbusFS+0x34>)
 800912a:	f7f8 fb75 	bl	8001818 <HAL_GPIO_WritePin>
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	40020800 	.word	0x40020800

0800913c <__assert_func>:
 800913c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800913e:	4614      	mov	r4, r2
 8009140:	461a      	mov	r2, r3
 8009142:	4b09      	ldr	r3, [pc, #36]	; (8009168 <__assert_func+0x2c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4605      	mov	r5, r0
 8009148:	68d8      	ldr	r0, [r3, #12]
 800914a:	b14c      	cbz	r4, 8009160 <__assert_func+0x24>
 800914c:	4b07      	ldr	r3, [pc, #28]	; (800916c <__assert_func+0x30>)
 800914e:	9100      	str	r1, [sp, #0]
 8009150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009154:	4906      	ldr	r1, [pc, #24]	; (8009170 <__assert_func+0x34>)
 8009156:	462b      	mov	r3, r5
 8009158:	f000 f95c 	bl	8009414 <fiprintf>
 800915c:	f000 fa58 	bl	8009610 <abort>
 8009160:	4b04      	ldr	r3, [pc, #16]	; (8009174 <__assert_func+0x38>)
 8009162:	461c      	mov	r4, r3
 8009164:	e7f3      	b.n	800914e <__assert_func+0x12>
 8009166:	bf00      	nop
 8009168:	2000008c 	.word	0x2000008c
 800916c:	0800a10c 	.word	0x0800a10c
 8009170:	0800a119 	.word	0x0800a119
 8009174:	0800a147 	.word	0x0800a147

08009178 <malloc>:
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <malloc+0xc>)
 800917a:	4601      	mov	r1, r0
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	f000 b82b 	b.w	80091d8 <_malloc_r>
 8009182:	bf00      	nop
 8009184:	2000008c 	.word	0x2000008c

08009188 <free>:
 8009188:	4b02      	ldr	r3, [pc, #8]	; (8009194 <free+0xc>)
 800918a:	4601      	mov	r1, r0
 800918c:	6818      	ldr	r0, [r3, #0]
 800918e:	f000 ba47 	b.w	8009620 <_free_r>
 8009192:	bf00      	nop
 8009194:	2000008c 	.word	0x2000008c

08009198 <sbrk_aligned>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	4e0e      	ldr	r6, [pc, #56]	; (80091d4 <sbrk_aligned+0x3c>)
 800919c:	460c      	mov	r4, r1
 800919e:	6831      	ldr	r1, [r6, #0]
 80091a0:	4605      	mov	r5, r0
 80091a2:	b911      	cbnz	r1, 80091aa <sbrk_aligned+0x12>
 80091a4:	f000 f9e6 	bl	8009574 <_sbrk_r>
 80091a8:	6030      	str	r0, [r6, #0]
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f000 f9e1 	bl	8009574 <_sbrk_r>
 80091b2:	1c43      	adds	r3, r0, #1
 80091b4:	d00a      	beq.n	80091cc <sbrk_aligned+0x34>
 80091b6:	1cc4      	adds	r4, r0, #3
 80091b8:	f024 0403 	bic.w	r4, r4, #3
 80091bc:	42a0      	cmp	r0, r4
 80091be:	d007      	beq.n	80091d0 <sbrk_aligned+0x38>
 80091c0:	1a21      	subs	r1, r4, r0
 80091c2:	4628      	mov	r0, r5
 80091c4:	f000 f9d6 	bl	8009574 <_sbrk_r>
 80091c8:	3001      	adds	r0, #1
 80091ca:	d101      	bne.n	80091d0 <sbrk_aligned+0x38>
 80091cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091d0:	4620      	mov	r0, r4
 80091d2:	bd70      	pop	{r4, r5, r6, pc}
 80091d4:	20000894 	.word	0x20000894

080091d8 <_malloc_r>:
 80091d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091dc:	1ccd      	adds	r5, r1, #3
 80091de:	f025 0503 	bic.w	r5, r5, #3
 80091e2:	3508      	adds	r5, #8
 80091e4:	2d0c      	cmp	r5, #12
 80091e6:	bf38      	it	cc
 80091e8:	250c      	movcc	r5, #12
 80091ea:	2d00      	cmp	r5, #0
 80091ec:	4607      	mov	r7, r0
 80091ee:	db01      	blt.n	80091f4 <_malloc_r+0x1c>
 80091f0:	42a9      	cmp	r1, r5
 80091f2:	d905      	bls.n	8009200 <_malloc_r+0x28>
 80091f4:	230c      	movs	r3, #12
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	2600      	movs	r6, #0
 80091fa:	4630      	mov	r0, r6
 80091fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009200:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092d4 <_malloc_r+0xfc>
 8009204:	f000 f868 	bl	80092d8 <__malloc_lock>
 8009208:	f8d8 3000 	ldr.w	r3, [r8]
 800920c:	461c      	mov	r4, r3
 800920e:	bb5c      	cbnz	r4, 8009268 <_malloc_r+0x90>
 8009210:	4629      	mov	r1, r5
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ffc0 	bl	8009198 <sbrk_aligned>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	4604      	mov	r4, r0
 800921c:	d155      	bne.n	80092ca <_malloc_r+0xf2>
 800921e:	f8d8 4000 	ldr.w	r4, [r8]
 8009222:	4626      	mov	r6, r4
 8009224:	2e00      	cmp	r6, #0
 8009226:	d145      	bne.n	80092b4 <_malloc_r+0xdc>
 8009228:	2c00      	cmp	r4, #0
 800922a:	d048      	beq.n	80092be <_malloc_r+0xe6>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	4631      	mov	r1, r6
 8009230:	4638      	mov	r0, r7
 8009232:	eb04 0903 	add.w	r9, r4, r3
 8009236:	f000 f99d 	bl	8009574 <_sbrk_r>
 800923a:	4581      	cmp	r9, r0
 800923c:	d13f      	bne.n	80092be <_malloc_r+0xe6>
 800923e:	6821      	ldr	r1, [r4, #0]
 8009240:	1a6d      	subs	r5, r5, r1
 8009242:	4629      	mov	r1, r5
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ffa7 	bl	8009198 <sbrk_aligned>
 800924a:	3001      	adds	r0, #1
 800924c:	d037      	beq.n	80092be <_malloc_r+0xe6>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	442b      	add	r3, r5
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	f8d8 3000 	ldr.w	r3, [r8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d038      	beq.n	80092ce <_malloc_r+0xf6>
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	42a2      	cmp	r2, r4
 8009260:	d12b      	bne.n	80092ba <_malloc_r+0xe2>
 8009262:	2200      	movs	r2, #0
 8009264:	605a      	str	r2, [r3, #4]
 8009266:	e00f      	b.n	8009288 <_malloc_r+0xb0>
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	1b52      	subs	r2, r2, r5
 800926c:	d41f      	bmi.n	80092ae <_malloc_r+0xd6>
 800926e:	2a0b      	cmp	r2, #11
 8009270:	d917      	bls.n	80092a2 <_malloc_r+0xca>
 8009272:	1961      	adds	r1, r4, r5
 8009274:	42a3      	cmp	r3, r4
 8009276:	6025      	str	r5, [r4, #0]
 8009278:	bf18      	it	ne
 800927a:	6059      	strne	r1, [r3, #4]
 800927c:	6863      	ldr	r3, [r4, #4]
 800927e:	bf08      	it	eq
 8009280:	f8c8 1000 	streq.w	r1, [r8]
 8009284:	5162      	str	r2, [r4, r5]
 8009286:	604b      	str	r3, [r1, #4]
 8009288:	4638      	mov	r0, r7
 800928a:	f104 060b 	add.w	r6, r4, #11
 800928e:	f000 f829 	bl	80092e4 <__malloc_unlock>
 8009292:	f026 0607 	bic.w	r6, r6, #7
 8009296:	1d23      	adds	r3, r4, #4
 8009298:	1af2      	subs	r2, r6, r3
 800929a:	d0ae      	beq.n	80091fa <_malloc_r+0x22>
 800929c:	1b9b      	subs	r3, r3, r6
 800929e:	50a3      	str	r3, [r4, r2]
 80092a0:	e7ab      	b.n	80091fa <_malloc_r+0x22>
 80092a2:	42a3      	cmp	r3, r4
 80092a4:	6862      	ldr	r2, [r4, #4]
 80092a6:	d1dd      	bne.n	8009264 <_malloc_r+0x8c>
 80092a8:	f8c8 2000 	str.w	r2, [r8]
 80092ac:	e7ec      	b.n	8009288 <_malloc_r+0xb0>
 80092ae:	4623      	mov	r3, r4
 80092b0:	6864      	ldr	r4, [r4, #4]
 80092b2:	e7ac      	b.n	800920e <_malloc_r+0x36>
 80092b4:	4634      	mov	r4, r6
 80092b6:	6876      	ldr	r6, [r6, #4]
 80092b8:	e7b4      	b.n	8009224 <_malloc_r+0x4c>
 80092ba:	4613      	mov	r3, r2
 80092bc:	e7cc      	b.n	8009258 <_malloc_r+0x80>
 80092be:	230c      	movs	r3, #12
 80092c0:	603b      	str	r3, [r7, #0]
 80092c2:	4638      	mov	r0, r7
 80092c4:	f000 f80e 	bl	80092e4 <__malloc_unlock>
 80092c8:	e797      	b.n	80091fa <_malloc_r+0x22>
 80092ca:	6025      	str	r5, [r4, #0]
 80092cc:	e7dc      	b.n	8009288 <_malloc_r+0xb0>
 80092ce:	605b      	str	r3, [r3, #4]
 80092d0:	deff      	udf	#255	; 0xff
 80092d2:	bf00      	nop
 80092d4:	20000890 	.word	0x20000890

080092d8 <__malloc_lock>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__malloc_lock+0x8>)
 80092da:	f000 b997 	b.w	800960c <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	200009d8 	.word	0x200009d8

080092e4 <__malloc_unlock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__malloc_unlock+0x8>)
 80092e6:	f000 b992 	b.w	800960e <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	200009d8 	.word	0x200009d8

080092f0 <std>:
 80092f0:	2300      	movs	r3, #0
 80092f2:	b510      	push	{r4, lr}
 80092f4:	4604      	mov	r4, r0
 80092f6:	e9c0 3300 	strd	r3, r3, [r0]
 80092fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092fe:	6083      	str	r3, [r0, #8]
 8009300:	8181      	strh	r1, [r0, #12]
 8009302:	6643      	str	r3, [r0, #100]	; 0x64
 8009304:	81c2      	strh	r2, [r0, #14]
 8009306:	6183      	str	r3, [r0, #24]
 8009308:	4619      	mov	r1, r3
 800930a:	2208      	movs	r2, #8
 800930c:	305c      	adds	r0, #92	; 0x5c
 800930e:	f000 f8f4 	bl	80094fa <memset>
 8009312:	4b05      	ldr	r3, [pc, #20]	; (8009328 <std+0x38>)
 8009314:	6263      	str	r3, [r4, #36]	; 0x24
 8009316:	4b05      	ldr	r3, [pc, #20]	; (800932c <std+0x3c>)
 8009318:	62a3      	str	r3, [r4, #40]	; 0x28
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <std+0x40>)
 800931c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <std+0x44>)
 8009320:	6224      	str	r4, [r4, #32]
 8009322:	6323      	str	r3, [r4, #48]	; 0x30
 8009324:	bd10      	pop	{r4, pc}
 8009326:	bf00      	nop
 8009328:	08009475 	.word	0x08009475
 800932c:	08009497 	.word	0x08009497
 8009330:	080094cf 	.word	0x080094cf
 8009334:	080094f3 	.word	0x080094f3

08009338 <stdio_exit_handler>:
 8009338:	4a02      	ldr	r2, [pc, #8]	; (8009344 <stdio_exit_handler+0xc>)
 800933a:	4903      	ldr	r1, [pc, #12]	; (8009348 <stdio_exit_handler+0x10>)
 800933c:	4803      	ldr	r0, [pc, #12]	; (800934c <stdio_exit_handler+0x14>)
 800933e:	f000 b87b 	b.w	8009438 <_fwalk_sglue>
 8009342:	bf00      	nop
 8009344:	20000034 	.word	0x20000034
 8009348:	08009d6d 	.word	0x08009d6d
 800934c:	20000040 	.word	0x20000040

08009350 <cleanup_stdio>:
 8009350:	6841      	ldr	r1, [r0, #4]
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <cleanup_stdio+0x34>)
 8009354:	4299      	cmp	r1, r3
 8009356:	b510      	push	{r4, lr}
 8009358:	4604      	mov	r4, r0
 800935a:	d001      	beq.n	8009360 <cleanup_stdio+0x10>
 800935c:	f000 fd06 	bl	8009d6c <_fflush_r>
 8009360:	68a1      	ldr	r1, [r4, #8]
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <cleanup_stdio+0x38>)
 8009364:	4299      	cmp	r1, r3
 8009366:	d002      	beq.n	800936e <cleanup_stdio+0x1e>
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fcff 	bl	8009d6c <_fflush_r>
 800936e:	68e1      	ldr	r1, [r4, #12]
 8009370:	4b06      	ldr	r3, [pc, #24]	; (800938c <cleanup_stdio+0x3c>)
 8009372:	4299      	cmp	r1, r3
 8009374:	d004      	beq.n	8009380 <cleanup_stdio+0x30>
 8009376:	4620      	mov	r0, r4
 8009378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800937c:	f000 bcf6 	b.w	8009d6c <_fflush_r>
 8009380:	bd10      	pop	{r4, pc}
 8009382:	bf00      	nop
 8009384:	20000898 	.word	0x20000898
 8009388:	20000900 	.word	0x20000900
 800938c:	20000968 	.word	0x20000968

08009390 <global_stdio_init.part.0>:
 8009390:	b510      	push	{r4, lr}
 8009392:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <global_stdio_init.part.0+0x30>)
 8009394:	4c0b      	ldr	r4, [pc, #44]	; (80093c4 <global_stdio_init.part.0+0x34>)
 8009396:	4a0c      	ldr	r2, [pc, #48]	; (80093c8 <global_stdio_init.part.0+0x38>)
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	4620      	mov	r0, r4
 800939c:	2200      	movs	r2, #0
 800939e:	2104      	movs	r1, #4
 80093a0:	f7ff ffa6 	bl	80092f0 <std>
 80093a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80093a8:	2201      	movs	r2, #1
 80093aa:	2109      	movs	r1, #9
 80093ac:	f7ff ffa0 	bl	80092f0 <std>
 80093b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093b4:	2202      	movs	r2, #2
 80093b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ba:	2112      	movs	r1, #18
 80093bc:	f7ff bf98 	b.w	80092f0 <std>
 80093c0:	200009d0 	.word	0x200009d0
 80093c4:	20000898 	.word	0x20000898
 80093c8:	08009339 	.word	0x08009339

080093cc <__sfp_lock_acquire>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__sfp_lock_acquire+0x8>)
 80093ce:	f000 b91d 	b.w	800960c <__retarget_lock_acquire_recursive>
 80093d2:	bf00      	nop
 80093d4:	200009d9 	.word	0x200009d9

080093d8 <__sfp_lock_release>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__sfp_lock_release+0x8>)
 80093da:	f000 b918 	b.w	800960e <__retarget_lock_release_recursive>
 80093de:	bf00      	nop
 80093e0:	200009d9 	.word	0x200009d9

080093e4 <__sinit>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	4604      	mov	r4, r0
 80093e8:	f7ff fff0 	bl	80093cc <__sfp_lock_acquire>
 80093ec:	6a23      	ldr	r3, [r4, #32]
 80093ee:	b11b      	cbz	r3, 80093f8 <__sinit+0x14>
 80093f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f4:	f7ff bff0 	b.w	80093d8 <__sfp_lock_release>
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <__sinit+0x28>)
 80093fa:	6223      	str	r3, [r4, #32]
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <__sinit+0x2c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1f5      	bne.n	80093f0 <__sinit+0xc>
 8009404:	f7ff ffc4 	bl	8009390 <global_stdio_init.part.0>
 8009408:	e7f2      	b.n	80093f0 <__sinit+0xc>
 800940a:	bf00      	nop
 800940c:	08009351 	.word	0x08009351
 8009410:	200009d0 	.word	0x200009d0

08009414 <fiprintf>:
 8009414:	b40e      	push	{r1, r2, r3}
 8009416:	b503      	push	{r0, r1, lr}
 8009418:	4601      	mov	r1, r0
 800941a:	ab03      	add	r3, sp, #12
 800941c:	4805      	ldr	r0, [pc, #20]	; (8009434 <fiprintf+0x20>)
 800941e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009422:	6800      	ldr	r0, [r0, #0]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	f000 f971 	bl	800970c <_vfiprintf_r>
 800942a:	b002      	add	sp, #8
 800942c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009430:	b003      	add	sp, #12
 8009432:	4770      	bx	lr
 8009434:	2000008c 	.word	0x2000008c

08009438 <_fwalk_sglue>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	4607      	mov	r7, r0
 800943e:	4688      	mov	r8, r1
 8009440:	4614      	mov	r4, r2
 8009442:	2600      	movs	r6, #0
 8009444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009448:	f1b9 0901 	subs.w	r9, r9, #1
 800944c:	d505      	bpl.n	800945a <_fwalk_sglue+0x22>
 800944e:	6824      	ldr	r4, [r4, #0]
 8009450:	2c00      	cmp	r4, #0
 8009452:	d1f7      	bne.n	8009444 <_fwalk_sglue+0xc>
 8009454:	4630      	mov	r0, r6
 8009456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d907      	bls.n	8009470 <_fwalk_sglue+0x38>
 8009460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009464:	3301      	adds	r3, #1
 8009466:	d003      	beq.n	8009470 <_fwalk_sglue+0x38>
 8009468:	4629      	mov	r1, r5
 800946a:	4638      	mov	r0, r7
 800946c:	47c0      	blx	r8
 800946e:	4306      	orrs	r6, r0
 8009470:	3568      	adds	r5, #104	; 0x68
 8009472:	e7e9      	b.n	8009448 <_fwalk_sglue+0x10>

08009474 <__sread>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	f000 f868 	bl	8009550 <_read_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	bfab      	itete	ge
 8009484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009486:	89a3      	ldrhlt	r3, [r4, #12]
 8009488:	181b      	addge	r3, r3, r0
 800948a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800948e:	bfac      	ite	ge
 8009490:	6563      	strge	r3, [r4, #84]	; 0x54
 8009492:	81a3      	strhlt	r3, [r4, #12]
 8009494:	bd10      	pop	{r4, pc}

08009496 <__swrite>:
 8009496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	461f      	mov	r7, r3
 800949c:	898b      	ldrh	r3, [r1, #12]
 800949e:	05db      	lsls	r3, r3, #23
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	4616      	mov	r6, r2
 80094a6:	d505      	bpl.n	80094b4 <__swrite+0x1e>
 80094a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ac:	2302      	movs	r3, #2
 80094ae:	2200      	movs	r2, #0
 80094b0:	f000 f83c 	bl	800952c <_lseek_r>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	4632      	mov	r2, r6
 80094c2:	463b      	mov	r3, r7
 80094c4:	4628      	mov	r0, r5
 80094c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ca:	f000 b863 	b.w	8009594 <_write_r>

080094ce <__sseek>:
 80094ce:	b510      	push	{r4, lr}
 80094d0:	460c      	mov	r4, r1
 80094d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d6:	f000 f829 	bl	800952c <_lseek_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	bf15      	itete	ne
 80094e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ea:	81a3      	strheq	r3, [r4, #12]
 80094ec:	bf18      	it	ne
 80094ee:	81a3      	strhne	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__sclose>:
 80094f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f6:	f000 b809 	b.w	800950c <_close_r>

080094fa <memset>:
 80094fa:	4402      	add	r2, r0
 80094fc:	4603      	mov	r3, r0
 80094fe:	4293      	cmp	r3, r2
 8009500:	d100      	bne.n	8009504 <memset+0xa>
 8009502:	4770      	bx	lr
 8009504:	f803 1b01 	strb.w	r1, [r3], #1
 8009508:	e7f9      	b.n	80094fe <memset+0x4>
	...

0800950c <_close_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d06      	ldr	r5, [pc, #24]	; (8009528 <_close_r+0x1c>)
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7f7 fd93 	bl	8001042 <_close>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_close_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_close_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	200009d4 	.word	0x200009d4

0800952c <_lseek_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	; (800954c <_lseek_r+0x20>)
 8009530:	4604      	mov	r4, r0
 8009532:	4608      	mov	r0, r1
 8009534:	4611      	mov	r1, r2
 8009536:	2200      	movs	r2, #0
 8009538:	602a      	str	r2, [r5, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	f7f7 fda8 	bl	8001090 <_lseek>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_lseek_r+0x1e>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_lseek_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	200009d4 	.word	0x200009d4

08009550 <_read_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d07      	ldr	r5, [pc, #28]	; (8009570 <_read_r+0x20>)
 8009554:	4604      	mov	r4, r0
 8009556:	4608      	mov	r0, r1
 8009558:	4611      	mov	r1, r2
 800955a:	2200      	movs	r2, #0
 800955c:	602a      	str	r2, [r5, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	f7f7 fd36 	bl	8000fd0 <_read>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_read_r+0x1e>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_read_r+0x1e>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	200009d4 	.word	0x200009d4

08009574 <_sbrk_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d06      	ldr	r5, [pc, #24]	; (8009590 <_sbrk_r+0x1c>)
 8009578:	2300      	movs	r3, #0
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	f7f7 fd94 	bl	80010ac <_sbrk>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_sbrk_r+0x1a>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_sbrk_r+0x1a>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	200009d4 	.word	0x200009d4

08009594 <_write_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d07      	ldr	r5, [pc, #28]	; (80095b4 <_write_r+0x20>)
 8009598:	4604      	mov	r4, r0
 800959a:	4608      	mov	r0, r1
 800959c:	4611      	mov	r1, r2
 800959e:	2200      	movs	r2, #0
 80095a0:	602a      	str	r2, [r5, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f7f7 fd31 	bl	800100a <_write>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_write_r+0x1e>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_write_r+0x1e>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	200009d4 	.word	0x200009d4

080095b8 <__errno>:
 80095b8:	4b01      	ldr	r3, [pc, #4]	; (80095c0 <__errno+0x8>)
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	2000008c 	.word	0x2000008c

080095c4 <__libc_init_array>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4d0d      	ldr	r5, [pc, #52]	; (80095fc <__libc_init_array+0x38>)
 80095c8:	4c0d      	ldr	r4, [pc, #52]	; (8009600 <__libc_init_array+0x3c>)
 80095ca:	1b64      	subs	r4, r4, r5
 80095cc:	10a4      	asrs	r4, r4, #2
 80095ce:	2600      	movs	r6, #0
 80095d0:	42a6      	cmp	r6, r4
 80095d2:	d109      	bne.n	80095e8 <__libc_init_array+0x24>
 80095d4:	4d0b      	ldr	r5, [pc, #44]	; (8009604 <__libc_init_array+0x40>)
 80095d6:	4c0c      	ldr	r4, [pc, #48]	; (8009608 <__libc_init_array+0x44>)
 80095d8:	f000 fd4e 	bl	800a078 <_init>
 80095dc:	1b64      	subs	r4, r4, r5
 80095de:	10a4      	asrs	r4, r4, #2
 80095e0:	2600      	movs	r6, #0
 80095e2:	42a6      	cmp	r6, r4
 80095e4:	d105      	bne.n	80095f2 <__libc_init_array+0x2e>
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ec:	4798      	blx	r3
 80095ee:	3601      	adds	r6, #1
 80095f0:	e7ee      	b.n	80095d0 <__libc_init_array+0xc>
 80095f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f6:	4798      	blx	r3
 80095f8:	3601      	adds	r6, #1
 80095fa:	e7f2      	b.n	80095e2 <__libc_init_array+0x1e>
 80095fc:	0800a184 	.word	0x0800a184
 8009600:	0800a184 	.word	0x0800a184
 8009604:	0800a184 	.word	0x0800a184
 8009608:	0800a188 	.word	0x0800a188

0800960c <__retarget_lock_acquire_recursive>:
 800960c:	4770      	bx	lr

0800960e <__retarget_lock_release_recursive>:
 800960e:	4770      	bx	lr

08009610 <abort>:
 8009610:	b508      	push	{r3, lr}
 8009612:	2006      	movs	r0, #6
 8009614:	f000 fc90 	bl	8009f38 <raise>
 8009618:	2001      	movs	r0, #1
 800961a:	f7f7 fccf 	bl	8000fbc <_exit>
	...

08009620 <_free_r>:
 8009620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009622:	2900      	cmp	r1, #0
 8009624:	d044      	beq.n	80096b0 <_free_r+0x90>
 8009626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962a:	9001      	str	r0, [sp, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f1a1 0404 	sub.w	r4, r1, #4
 8009632:	bfb8      	it	lt
 8009634:	18e4      	addlt	r4, r4, r3
 8009636:	f7ff fe4f 	bl	80092d8 <__malloc_lock>
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <_free_r+0x94>)
 800963c:	9801      	ldr	r0, [sp, #4]
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	b933      	cbnz	r3, 8009650 <_free_r+0x30>
 8009642:	6063      	str	r3, [r4, #4]
 8009644:	6014      	str	r4, [r2, #0]
 8009646:	b003      	add	sp, #12
 8009648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800964c:	f7ff be4a 	b.w	80092e4 <__malloc_unlock>
 8009650:	42a3      	cmp	r3, r4
 8009652:	d908      	bls.n	8009666 <_free_r+0x46>
 8009654:	6825      	ldr	r5, [r4, #0]
 8009656:	1961      	adds	r1, r4, r5
 8009658:	428b      	cmp	r3, r1
 800965a:	bf01      	itttt	eq
 800965c:	6819      	ldreq	r1, [r3, #0]
 800965e:	685b      	ldreq	r3, [r3, #4]
 8009660:	1949      	addeq	r1, r1, r5
 8009662:	6021      	streq	r1, [r4, #0]
 8009664:	e7ed      	b.n	8009642 <_free_r+0x22>
 8009666:	461a      	mov	r2, r3
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	b10b      	cbz	r3, 8009670 <_free_r+0x50>
 800966c:	42a3      	cmp	r3, r4
 800966e:	d9fa      	bls.n	8009666 <_free_r+0x46>
 8009670:	6811      	ldr	r1, [r2, #0]
 8009672:	1855      	adds	r5, r2, r1
 8009674:	42a5      	cmp	r5, r4
 8009676:	d10b      	bne.n	8009690 <_free_r+0x70>
 8009678:	6824      	ldr	r4, [r4, #0]
 800967a:	4421      	add	r1, r4
 800967c:	1854      	adds	r4, r2, r1
 800967e:	42a3      	cmp	r3, r4
 8009680:	6011      	str	r1, [r2, #0]
 8009682:	d1e0      	bne.n	8009646 <_free_r+0x26>
 8009684:	681c      	ldr	r4, [r3, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	6053      	str	r3, [r2, #4]
 800968a:	440c      	add	r4, r1
 800968c:	6014      	str	r4, [r2, #0]
 800968e:	e7da      	b.n	8009646 <_free_r+0x26>
 8009690:	d902      	bls.n	8009698 <_free_r+0x78>
 8009692:	230c      	movs	r3, #12
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	e7d6      	b.n	8009646 <_free_r+0x26>
 8009698:	6825      	ldr	r5, [r4, #0]
 800969a:	1961      	adds	r1, r4, r5
 800969c:	428b      	cmp	r3, r1
 800969e:	bf04      	itt	eq
 80096a0:	6819      	ldreq	r1, [r3, #0]
 80096a2:	685b      	ldreq	r3, [r3, #4]
 80096a4:	6063      	str	r3, [r4, #4]
 80096a6:	bf04      	itt	eq
 80096a8:	1949      	addeq	r1, r1, r5
 80096aa:	6021      	streq	r1, [r4, #0]
 80096ac:	6054      	str	r4, [r2, #4]
 80096ae:	e7ca      	b.n	8009646 <_free_r+0x26>
 80096b0:	b003      	add	sp, #12
 80096b2:	bd30      	pop	{r4, r5, pc}
 80096b4:	20000890 	.word	0x20000890

080096b8 <__sfputc_r>:
 80096b8:	6893      	ldr	r3, [r2, #8]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	b410      	push	{r4}
 80096c0:	6093      	str	r3, [r2, #8]
 80096c2:	da08      	bge.n	80096d6 <__sfputc_r+0x1e>
 80096c4:	6994      	ldr	r4, [r2, #24]
 80096c6:	42a3      	cmp	r3, r4
 80096c8:	db01      	blt.n	80096ce <__sfputc_r+0x16>
 80096ca:	290a      	cmp	r1, #10
 80096cc:	d103      	bne.n	80096d6 <__sfputc_r+0x1e>
 80096ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096d2:	f000 bb73 	b.w	8009dbc <__swbuf_r>
 80096d6:	6813      	ldr	r3, [r2, #0]
 80096d8:	1c58      	adds	r0, r3, #1
 80096da:	6010      	str	r0, [r2, #0]
 80096dc:	7019      	strb	r1, [r3, #0]
 80096de:	4608      	mov	r0, r1
 80096e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <__sfputs_r>:
 80096e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e8:	4606      	mov	r6, r0
 80096ea:	460f      	mov	r7, r1
 80096ec:	4614      	mov	r4, r2
 80096ee:	18d5      	adds	r5, r2, r3
 80096f0:	42ac      	cmp	r4, r5
 80096f2:	d101      	bne.n	80096f8 <__sfputs_r+0x12>
 80096f4:	2000      	movs	r0, #0
 80096f6:	e007      	b.n	8009708 <__sfputs_r+0x22>
 80096f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fc:	463a      	mov	r2, r7
 80096fe:	4630      	mov	r0, r6
 8009700:	f7ff ffda 	bl	80096b8 <__sfputc_r>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d1f3      	bne.n	80096f0 <__sfputs_r+0xa>
 8009708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800970c <_vfiprintf_r>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	460d      	mov	r5, r1
 8009712:	b09d      	sub	sp, #116	; 0x74
 8009714:	4614      	mov	r4, r2
 8009716:	4698      	mov	r8, r3
 8009718:	4606      	mov	r6, r0
 800971a:	b118      	cbz	r0, 8009724 <_vfiprintf_r+0x18>
 800971c:	6a03      	ldr	r3, [r0, #32]
 800971e:	b90b      	cbnz	r3, 8009724 <_vfiprintf_r+0x18>
 8009720:	f7ff fe60 	bl	80093e4 <__sinit>
 8009724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009726:	07d9      	lsls	r1, r3, #31
 8009728:	d405      	bmi.n	8009736 <_vfiprintf_r+0x2a>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	059a      	lsls	r2, r3, #22
 800972e:	d402      	bmi.n	8009736 <_vfiprintf_r+0x2a>
 8009730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009732:	f7ff ff6b 	bl	800960c <__retarget_lock_acquire_recursive>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	071b      	lsls	r3, r3, #28
 800973a:	d501      	bpl.n	8009740 <_vfiprintf_r+0x34>
 800973c:	692b      	ldr	r3, [r5, #16]
 800973e:	b99b      	cbnz	r3, 8009768 <_vfiprintf_r+0x5c>
 8009740:	4629      	mov	r1, r5
 8009742:	4630      	mov	r0, r6
 8009744:	f000 fb78 	bl	8009e38 <__swsetup_r>
 8009748:	b170      	cbz	r0, 8009768 <_vfiprintf_r+0x5c>
 800974a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800974c:	07dc      	lsls	r4, r3, #31
 800974e:	d504      	bpl.n	800975a <_vfiprintf_r+0x4e>
 8009750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009754:	b01d      	add	sp, #116	; 0x74
 8009756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	0598      	lsls	r0, r3, #22
 800975e:	d4f7      	bmi.n	8009750 <_vfiprintf_r+0x44>
 8009760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009762:	f7ff ff54 	bl	800960e <__retarget_lock_release_recursive>
 8009766:	e7f3      	b.n	8009750 <_vfiprintf_r+0x44>
 8009768:	2300      	movs	r3, #0
 800976a:	9309      	str	r3, [sp, #36]	; 0x24
 800976c:	2320      	movs	r3, #32
 800976e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009772:	f8cd 800c 	str.w	r8, [sp, #12]
 8009776:	2330      	movs	r3, #48	; 0x30
 8009778:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800992c <_vfiprintf_r+0x220>
 800977c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009780:	f04f 0901 	mov.w	r9, #1
 8009784:	4623      	mov	r3, r4
 8009786:	469a      	mov	sl, r3
 8009788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800978c:	b10a      	cbz	r2, 8009792 <_vfiprintf_r+0x86>
 800978e:	2a25      	cmp	r2, #37	; 0x25
 8009790:	d1f9      	bne.n	8009786 <_vfiprintf_r+0x7a>
 8009792:	ebba 0b04 	subs.w	fp, sl, r4
 8009796:	d00b      	beq.n	80097b0 <_vfiprintf_r+0xa4>
 8009798:	465b      	mov	r3, fp
 800979a:	4622      	mov	r2, r4
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ffa1 	bl	80096e6 <__sfputs_r>
 80097a4:	3001      	adds	r0, #1
 80097a6:	f000 80a9 	beq.w	80098fc <_vfiprintf_r+0x1f0>
 80097aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ac:	445a      	add	r2, fp
 80097ae:	9209      	str	r2, [sp, #36]	; 0x24
 80097b0:	f89a 3000 	ldrb.w	r3, [sl]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 80a1 	beq.w	80098fc <_vfiprintf_r+0x1f0>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c4:	f10a 0a01 	add.w	sl, sl, #1
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097d0:	931a      	str	r3, [sp, #104]	; 0x68
 80097d2:	4654      	mov	r4, sl
 80097d4:	2205      	movs	r2, #5
 80097d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097da:	4854      	ldr	r0, [pc, #336]	; (800992c <_vfiprintf_r+0x220>)
 80097dc:	f7f6 fcf8 	bl	80001d0 <memchr>
 80097e0:	9a04      	ldr	r2, [sp, #16]
 80097e2:	b9d8      	cbnz	r0, 800981c <_vfiprintf_r+0x110>
 80097e4:	06d1      	lsls	r1, r2, #27
 80097e6:	bf44      	itt	mi
 80097e8:	2320      	movmi	r3, #32
 80097ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ee:	0713      	lsls	r3, r2, #28
 80097f0:	bf44      	itt	mi
 80097f2:	232b      	movmi	r3, #43	; 0x2b
 80097f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f8:	f89a 3000 	ldrb.w	r3, [sl]
 80097fc:	2b2a      	cmp	r3, #42	; 0x2a
 80097fe:	d015      	beq.n	800982c <_vfiprintf_r+0x120>
 8009800:	9a07      	ldr	r2, [sp, #28]
 8009802:	4654      	mov	r4, sl
 8009804:	2000      	movs	r0, #0
 8009806:	f04f 0c0a 	mov.w	ip, #10
 800980a:	4621      	mov	r1, r4
 800980c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009810:	3b30      	subs	r3, #48	; 0x30
 8009812:	2b09      	cmp	r3, #9
 8009814:	d94d      	bls.n	80098b2 <_vfiprintf_r+0x1a6>
 8009816:	b1b0      	cbz	r0, 8009846 <_vfiprintf_r+0x13a>
 8009818:	9207      	str	r2, [sp, #28]
 800981a:	e014      	b.n	8009846 <_vfiprintf_r+0x13a>
 800981c:	eba0 0308 	sub.w	r3, r0, r8
 8009820:	fa09 f303 	lsl.w	r3, r9, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	46a2      	mov	sl, r4
 800982a:	e7d2      	b.n	80097d2 <_vfiprintf_r+0xc6>
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	1d19      	adds	r1, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	9103      	str	r1, [sp, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	bfbb      	ittet	lt
 8009838:	425b      	neglt	r3, r3
 800983a:	f042 0202 	orrlt.w	r2, r2, #2
 800983e:	9307      	strge	r3, [sp, #28]
 8009840:	9307      	strlt	r3, [sp, #28]
 8009842:	bfb8      	it	lt
 8009844:	9204      	strlt	r2, [sp, #16]
 8009846:	7823      	ldrb	r3, [r4, #0]
 8009848:	2b2e      	cmp	r3, #46	; 0x2e
 800984a:	d10c      	bne.n	8009866 <_vfiprintf_r+0x15a>
 800984c:	7863      	ldrb	r3, [r4, #1]
 800984e:	2b2a      	cmp	r3, #42	; 0x2a
 8009850:	d134      	bne.n	80098bc <_vfiprintf_r+0x1b0>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	1d1a      	adds	r2, r3, #4
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	9203      	str	r2, [sp, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	bfb8      	it	lt
 800985e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009862:	3402      	adds	r4, #2
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800993c <_vfiprintf_r+0x230>
 800986a:	7821      	ldrb	r1, [r4, #0]
 800986c:	2203      	movs	r2, #3
 800986e:	4650      	mov	r0, sl
 8009870:	f7f6 fcae 	bl	80001d0 <memchr>
 8009874:	b138      	cbz	r0, 8009886 <_vfiprintf_r+0x17a>
 8009876:	9b04      	ldr	r3, [sp, #16]
 8009878:	eba0 000a 	sub.w	r0, r0, sl
 800987c:	2240      	movs	r2, #64	; 0x40
 800987e:	4082      	lsls	r2, r0
 8009880:	4313      	orrs	r3, r2
 8009882:	3401      	adds	r4, #1
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988a:	4829      	ldr	r0, [pc, #164]	; (8009930 <_vfiprintf_r+0x224>)
 800988c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009890:	2206      	movs	r2, #6
 8009892:	f7f6 fc9d 	bl	80001d0 <memchr>
 8009896:	2800      	cmp	r0, #0
 8009898:	d03f      	beq.n	800991a <_vfiprintf_r+0x20e>
 800989a:	4b26      	ldr	r3, [pc, #152]	; (8009934 <_vfiprintf_r+0x228>)
 800989c:	bb1b      	cbnz	r3, 80098e6 <_vfiprintf_r+0x1da>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	3307      	adds	r3, #7
 80098a2:	f023 0307 	bic.w	r3, r3, #7
 80098a6:	3308      	adds	r3, #8
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ac:	443b      	add	r3, r7
 80098ae:	9309      	str	r3, [sp, #36]	; 0x24
 80098b0:	e768      	b.n	8009784 <_vfiprintf_r+0x78>
 80098b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80098b6:	460c      	mov	r4, r1
 80098b8:	2001      	movs	r0, #1
 80098ba:	e7a6      	b.n	800980a <_vfiprintf_r+0xfe>
 80098bc:	2300      	movs	r3, #0
 80098be:	3401      	adds	r4, #1
 80098c0:	9305      	str	r3, [sp, #20]
 80098c2:	4619      	mov	r1, r3
 80098c4:	f04f 0c0a 	mov.w	ip, #10
 80098c8:	4620      	mov	r0, r4
 80098ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ce:	3a30      	subs	r2, #48	; 0x30
 80098d0:	2a09      	cmp	r2, #9
 80098d2:	d903      	bls.n	80098dc <_vfiprintf_r+0x1d0>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0c6      	beq.n	8009866 <_vfiprintf_r+0x15a>
 80098d8:	9105      	str	r1, [sp, #20]
 80098da:	e7c4      	b.n	8009866 <_vfiprintf_r+0x15a>
 80098dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80098e0:	4604      	mov	r4, r0
 80098e2:	2301      	movs	r3, #1
 80098e4:	e7f0      	b.n	80098c8 <_vfiprintf_r+0x1bc>
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462a      	mov	r2, r5
 80098ec:	4b12      	ldr	r3, [pc, #72]	; (8009938 <_vfiprintf_r+0x22c>)
 80098ee:	a904      	add	r1, sp, #16
 80098f0:	4630      	mov	r0, r6
 80098f2:	f3af 8000 	nop.w
 80098f6:	4607      	mov	r7, r0
 80098f8:	1c78      	adds	r0, r7, #1
 80098fa:	d1d6      	bne.n	80098aa <_vfiprintf_r+0x19e>
 80098fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098fe:	07d9      	lsls	r1, r3, #31
 8009900:	d405      	bmi.n	800990e <_vfiprintf_r+0x202>
 8009902:	89ab      	ldrh	r3, [r5, #12]
 8009904:	059a      	lsls	r2, r3, #22
 8009906:	d402      	bmi.n	800990e <_vfiprintf_r+0x202>
 8009908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990a:	f7ff fe80 	bl	800960e <__retarget_lock_release_recursive>
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	065b      	lsls	r3, r3, #25
 8009912:	f53f af1d 	bmi.w	8009750 <_vfiprintf_r+0x44>
 8009916:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009918:	e71c      	b.n	8009754 <_vfiprintf_r+0x48>
 800991a:	ab03      	add	r3, sp, #12
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	462a      	mov	r2, r5
 8009920:	4b05      	ldr	r3, [pc, #20]	; (8009938 <_vfiprintf_r+0x22c>)
 8009922:	a904      	add	r1, sp, #16
 8009924:	4630      	mov	r0, r6
 8009926:	f000 f879 	bl	8009a1c <_printf_i>
 800992a:	e7e4      	b.n	80098f6 <_vfiprintf_r+0x1ea>
 800992c:	0800a148 	.word	0x0800a148
 8009930:	0800a152 	.word	0x0800a152
 8009934:	00000000 	.word	0x00000000
 8009938:	080096e7 	.word	0x080096e7
 800993c:	0800a14e 	.word	0x0800a14e

08009940 <_printf_common>:
 8009940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009944:	4616      	mov	r6, r2
 8009946:	4699      	mov	r9, r3
 8009948:	688a      	ldr	r2, [r1, #8]
 800994a:	690b      	ldr	r3, [r1, #16]
 800994c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009950:	4293      	cmp	r3, r2
 8009952:	bfb8      	it	lt
 8009954:	4613      	movlt	r3, r2
 8009956:	6033      	str	r3, [r6, #0]
 8009958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800995c:	4607      	mov	r7, r0
 800995e:	460c      	mov	r4, r1
 8009960:	b10a      	cbz	r2, 8009966 <_printf_common+0x26>
 8009962:	3301      	adds	r3, #1
 8009964:	6033      	str	r3, [r6, #0]
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	0699      	lsls	r1, r3, #26
 800996a:	bf42      	ittt	mi
 800996c:	6833      	ldrmi	r3, [r6, #0]
 800996e:	3302      	addmi	r3, #2
 8009970:	6033      	strmi	r3, [r6, #0]
 8009972:	6825      	ldr	r5, [r4, #0]
 8009974:	f015 0506 	ands.w	r5, r5, #6
 8009978:	d106      	bne.n	8009988 <_printf_common+0x48>
 800997a:	f104 0a19 	add.w	sl, r4, #25
 800997e:	68e3      	ldr	r3, [r4, #12]
 8009980:	6832      	ldr	r2, [r6, #0]
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	42ab      	cmp	r3, r5
 8009986:	dc26      	bgt.n	80099d6 <_printf_common+0x96>
 8009988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800998c:	1e13      	subs	r3, r2, #0
 800998e:	6822      	ldr	r2, [r4, #0]
 8009990:	bf18      	it	ne
 8009992:	2301      	movne	r3, #1
 8009994:	0692      	lsls	r2, r2, #26
 8009996:	d42b      	bmi.n	80099f0 <_printf_common+0xb0>
 8009998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800999c:	4649      	mov	r1, r9
 800999e:	4638      	mov	r0, r7
 80099a0:	47c0      	blx	r8
 80099a2:	3001      	adds	r0, #1
 80099a4:	d01e      	beq.n	80099e4 <_printf_common+0xa4>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	6922      	ldr	r2, [r4, #16]
 80099aa:	f003 0306 	and.w	r3, r3, #6
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	bf02      	ittt	eq
 80099b2:	68e5      	ldreq	r5, [r4, #12]
 80099b4:	6833      	ldreq	r3, [r6, #0]
 80099b6:	1aed      	subeq	r5, r5, r3
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	bf0c      	ite	eq
 80099bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099c0:	2500      	movne	r5, #0
 80099c2:	4293      	cmp	r3, r2
 80099c4:	bfc4      	itt	gt
 80099c6:	1a9b      	subgt	r3, r3, r2
 80099c8:	18ed      	addgt	r5, r5, r3
 80099ca:	2600      	movs	r6, #0
 80099cc:	341a      	adds	r4, #26
 80099ce:	42b5      	cmp	r5, r6
 80099d0:	d11a      	bne.n	8009a08 <_printf_common+0xc8>
 80099d2:	2000      	movs	r0, #0
 80099d4:	e008      	b.n	80099e8 <_printf_common+0xa8>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4652      	mov	r2, sl
 80099da:	4649      	mov	r1, r9
 80099dc:	4638      	mov	r0, r7
 80099de:	47c0      	blx	r8
 80099e0:	3001      	adds	r0, #1
 80099e2:	d103      	bne.n	80099ec <_printf_common+0xac>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	3501      	adds	r5, #1
 80099ee:	e7c6      	b.n	800997e <_printf_common+0x3e>
 80099f0:	18e1      	adds	r1, r4, r3
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	2030      	movs	r0, #48	; 0x30
 80099f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099fa:	4422      	add	r2, r4
 80099fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a04:	3302      	adds	r3, #2
 8009a06:	e7c7      	b.n	8009998 <_printf_common+0x58>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	4638      	mov	r0, r7
 8009a10:	47c0      	blx	r8
 8009a12:	3001      	adds	r0, #1
 8009a14:	d0e6      	beq.n	80099e4 <_printf_common+0xa4>
 8009a16:	3601      	adds	r6, #1
 8009a18:	e7d9      	b.n	80099ce <_printf_common+0x8e>
	...

08009a1c <_printf_i>:
 8009a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a20:	7e0f      	ldrb	r7, [r1, #24]
 8009a22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a24:	2f78      	cmp	r7, #120	; 0x78
 8009a26:	4691      	mov	r9, r2
 8009a28:	4680      	mov	r8, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	469a      	mov	sl, r3
 8009a2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a32:	d807      	bhi.n	8009a44 <_printf_i+0x28>
 8009a34:	2f62      	cmp	r7, #98	; 0x62
 8009a36:	d80a      	bhi.n	8009a4e <_printf_i+0x32>
 8009a38:	2f00      	cmp	r7, #0
 8009a3a:	f000 80d4 	beq.w	8009be6 <_printf_i+0x1ca>
 8009a3e:	2f58      	cmp	r7, #88	; 0x58
 8009a40:	f000 80c0 	beq.w	8009bc4 <_printf_i+0x1a8>
 8009a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a4c:	e03a      	b.n	8009ac4 <_printf_i+0xa8>
 8009a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a52:	2b15      	cmp	r3, #21
 8009a54:	d8f6      	bhi.n	8009a44 <_printf_i+0x28>
 8009a56:	a101      	add	r1, pc, #4	; (adr r1, 8009a5c <_printf_i+0x40>)
 8009a58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a5c:	08009ab5 	.word	0x08009ab5
 8009a60:	08009ac9 	.word	0x08009ac9
 8009a64:	08009a45 	.word	0x08009a45
 8009a68:	08009a45 	.word	0x08009a45
 8009a6c:	08009a45 	.word	0x08009a45
 8009a70:	08009a45 	.word	0x08009a45
 8009a74:	08009ac9 	.word	0x08009ac9
 8009a78:	08009a45 	.word	0x08009a45
 8009a7c:	08009a45 	.word	0x08009a45
 8009a80:	08009a45 	.word	0x08009a45
 8009a84:	08009a45 	.word	0x08009a45
 8009a88:	08009bcd 	.word	0x08009bcd
 8009a8c:	08009af5 	.word	0x08009af5
 8009a90:	08009b87 	.word	0x08009b87
 8009a94:	08009a45 	.word	0x08009a45
 8009a98:	08009a45 	.word	0x08009a45
 8009a9c:	08009bef 	.word	0x08009bef
 8009aa0:	08009a45 	.word	0x08009a45
 8009aa4:	08009af5 	.word	0x08009af5
 8009aa8:	08009a45 	.word	0x08009a45
 8009aac:	08009a45 	.word	0x08009a45
 8009ab0:	08009b8f 	.word	0x08009b8f
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	1d1a      	adds	r2, r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	602a      	str	r2, [r5, #0]
 8009abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e09f      	b.n	8009c08 <_printf_i+0x1ec>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	0607      	lsls	r7, r0, #24
 8009ace:	f103 0104 	add.w	r1, r3, #4
 8009ad2:	6029      	str	r1, [r5, #0]
 8009ad4:	d501      	bpl.n	8009ada <_printf_i+0xbe>
 8009ad6:	681e      	ldr	r6, [r3, #0]
 8009ad8:	e003      	b.n	8009ae2 <_printf_i+0xc6>
 8009ada:	0646      	lsls	r6, r0, #25
 8009adc:	d5fb      	bpl.n	8009ad6 <_printf_i+0xba>
 8009ade:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ae2:	2e00      	cmp	r6, #0
 8009ae4:	da03      	bge.n	8009aee <_printf_i+0xd2>
 8009ae6:	232d      	movs	r3, #45	; 0x2d
 8009ae8:	4276      	negs	r6, r6
 8009aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aee:	485a      	ldr	r0, [pc, #360]	; (8009c58 <_printf_i+0x23c>)
 8009af0:	230a      	movs	r3, #10
 8009af2:	e012      	b.n	8009b1a <_printf_i+0xfe>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	6820      	ldr	r0, [r4, #0]
 8009af8:	1d19      	adds	r1, r3, #4
 8009afa:	6029      	str	r1, [r5, #0]
 8009afc:	0605      	lsls	r5, r0, #24
 8009afe:	d501      	bpl.n	8009b04 <_printf_i+0xe8>
 8009b00:	681e      	ldr	r6, [r3, #0]
 8009b02:	e002      	b.n	8009b0a <_printf_i+0xee>
 8009b04:	0641      	lsls	r1, r0, #25
 8009b06:	d5fb      	bpl.n	8009b00 <_printf_i+0xe4>
 8009b08:	881e      	ldrh	r6, [r3, #0]
 8009b0a:	4853      	ldr	r0, [pc, #332]	; (8009c58 <_printf_i+0x23c>)
 8009b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b0e:	bf0c      	ite	eq
 8009b10:	2308      	moveq	r3, #8
 8009b12:	230a      	movne	r3, #10
 8009b14:	2100      	movs	r1, #0
 8009b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b1a:	6865      	ldr	r5, [r4, #4]
 8009b1c:	60a5      	str	r5, [r4, #8]
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	bfa2      	ittt	ge
 8009b22:	6821      	ldrge	r1, [r4, #0]
 8009b24:	f021 0104 	bicge.w	r1, r1, #4
 8009b28:	6021      	strge	r1, [r4, #0]
 8009b2a:	b90e      	cbnz	r6, 8009b30 <_printf_i+0x114>
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	d04b      	beq.n	8009bc8 <_printf_i+0x1ac>
 8009b30:	4615      	mov	r5, r2
 8009b32:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b36:	fb03 6711 	mls	r7, r3, r1, r6
 8009b3a:	5dc7      	ldrb	r7, [r0, r7]
 8009b3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b40:	4637      	mov	r7, r6
 8009b42:	42bb      	cmp	r3, r7
 8009b44:	460e      	mov	r6, r1
 8009b46:	d9f4      	bls.n	8009b32 <_printf_i+0x116>
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d10b      	bne.n	8009b64 <_printf_i+0x148>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	07de      	lsls	r6, r3, #31
 8009b50:	d508      	bpl.n	8009b64 <_printf_i+0x148>
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	6861      	ldr	r1, [r4, #4]
 8009b56:	4299      	cmp	r1, r3
 8009b58:	bfde      	ittt	le
 8009b5a:	2330      	movle	r3, #48	; 0x30
 8009b5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b64:	1b52      	subs	r2, r2, r5
 8009b66:	6122      	str	r2, [r4, #16]
 8009b68:	f8cd a000 	str.w	sl, [sp]
 8009b6c:	464b      	mov	r3, r9
 8009b6e:	aa03      	add	r2, sp, #12
 8009b70:	4621      	mov	r1, r4
 8009b72:	4640      	mov	r0, r8
 8009b74:	f7ff fee4 	bl	8009940 <_printf_common>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d14a      	bne.n	8009c12 <_printf_i+0x1f6>
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b80:	b004      	add	sp, #16
 8009b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	f043 0320 	orr.w	r3, r3, #32
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	4833      	ldr	r0, [pc, #204]	; (8009c5c <_printf_i+0x240>)
 8009b90:	2778      	movs	r7, #120	; 0x78
 8009b92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	6829      	ldr	r1, [r5, #0]
 8009b9a:	061f      	lsls	r7, r3, #24
 8009b9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ba0:	d402      	bmi.n	8009ba8 <_printf_i+0x18c>
 8009ba2:	065f      	lsls	r7, r3, #25
 8009ba4:	bf48      	it	mi
 8009ba6:	b2b6      	uxthmi	r6, r6
 8009ba8:	07df      	lsls	r7, r3, #31
 8009baa:	bf48      	it	mi
 8009bac:	f043 0320 	orrmi.w	r3, r3, #32
 8009bb0:	6029      	str	r1, [r5, #0]
 8009bb2:	bf48      	it	mi
 8009bb4:	6023      	strmi	r3, [r4, #0]
 8009bb6:	b91e      	cbnz	r6, 8009bc0 <_printf_i+0x1a4>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	f023 0320 	bic.w	r3, r3, #32
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	e7a7      	b.n	8009b14 <_printf_i+0xf8>
 8009bc4:	4824      	ldr	r0, [pc, #144]	; (8009c58 <_printf_i+0x23c>)
 8009bc6:	e7e4      	b.n	8009b92 <_printf_i+0x176>
 8009bc8:	4615      	mov	r5, r2
 8009bca:	e7bd      	b.n	8009b48 <_printf_i+0x12c>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	6826      	ldr	r6, [r4, #0]
 8009bd0:	6961      	ldr	r1, [r4, #20]
 8009bd2:	1d18      	adds	r0, r3, #4
 8009bd4:	6028      	str	r0, [r5, #0]
 8009bd6:	0635      	lsls	r5, r6, #24
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	d501      	bpl.n	8009be0 <_printf_i+0x1c4>
 8009bdc:	6019      	str	r1, [r3, #0]
 8009bde:	e002      	b.n	8009be6 <_printf_i+0x1ca>
 8009be0:	0670      	lsls	r0, r6, #25
 8009be2:	d5fb      	bpl.n	8009bdc <_printf_i+0x1c0>
 8009be4:	8019      	strh	r1, [r3, #0]
 8009be6:	2300      	movs	r3, #0
 8009be8:	6123      	str	r3, [r4, #16]
 8009bea:	4615      	mov	r5, r2
 8009bec:	e7bc      	b.n	8009b68 <_printf_i+0x14c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	1d1a      	adds	r2, r3, #4
 8009bf2:	602a      	str	r2, [r5, #0]
 8009bf4:	681d      	ldr	r5, [r3, #0]
 8009bf6:	6862      	ldr	r2, [r4, #4]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f7f6 fae8 	bl	80001d0 <memchr>
 8009c00:	b108      	cbz	r0, 8009c06 <_printf_i+0x1ea>
 8009c02:	1b40      	subs	r0, r0, r5
 8009c04:	6060      	str	r0, [r4, #4]
 8009c06:	6863      	ldr	r3, [r4, #4]
 8009c08:	6123      	str	r3, [r4, #16]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c10:	e7aa      	b.n	8009b68 <_printf_i+0x14c>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	462a      	mov	r2, r5
 8009c16:	4649      	mov	r1, r9
 8009c18:	4640      	mov	r0, r8
 8009c1a:	47d0      	blx	sl
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d0ad      	beq.n	8009b7c <_printf_i+0x160>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	079b      	lsls	r3, r3, #30
 8009c24:	d413      	bmi.n	8009c4e <_printf_i+0x232>
 8009c26:	68e0      	ldr	r0, [r4, #12]
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	4298      	cmp	r0, r3
 8009c2c:	bfb8      	it	lt
 8009c2e:	4618      	movlt	r0, r3
 8009c30:	e7a6      	b.n	8009b80 <_printf_i+0x164>
 8009c32:	2301      	movs	r3, #1
 8009c34:	4632      	mov	r2, r6
 8009c36:	4649      	mov	r1, r9
 8009c38:	4640      	mov	r0, r8
 8009c3a:	47d0      	blx	sl
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d09d      	beq.n	8009b7c <_printf_i+0x160>
 8009c40:	3501      	adds	r5, #1
 8009c42:	68e3      	ldr	r3, [r4, #12]
 8009c44:	9903      	ldr	r1, [sp, #12]
 8009c46:	1a5b      	subs	r3, r3, r1
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	dcf2      	bgt.n	8009c32 <_printf_i+0x216>
 8009c4c:	e7eb      	b.n	8009c26 <_printf_i+0x20a>
 8009c4e:	2500      	movs	r5, #0
 8009c50:	f104 0619 	add.w	r6, r4, #25
 8009c54:	e7f5      	b.n	8009c42 <_printf_i+0x226>
 8009c56:	bf00      	nop
 8009c58:	0800a159 	.word	0x0800a159
 8009c5c:	0800a16a 	.word	0x0800a16a

08009c60 <__sflush_r>:
 8009c60:	898a      	ldrh	r2, [r1, #12]
 8009c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c66:	4605      	mov	r5, r0
 8009c68:	0710      	lsls	r0, r2, #28
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	d458      	bmi.n	8009d20 <__sflush_r+0xc0>
 8009c6e:	684b      	ldr	r3, [r1, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dc05      	bgt.n	8009c80 <__sflush_r+0x20>
 8009c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	dc02      	bgt.n	8009c80 <__sflush_r+0x20>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c82:	2e00      	cmp	r6, #0
 8009c84:	d0f9      	beq.n	8009c7a <__sflush_r+0x1a>
 8009c86:	2300      	movs	r3, #0
 8009c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c8c:	682f      	ldr	r7, [r5, #0]
 8009c8e:	6a21      	ldr	r1, [r4, #32]
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	d032      	beq.n	8009cfa <__sflush_r+0x9a>
 8009c94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	075a      	lsls	r2, r3, #29
 8009c9a:	d505      	bpl.n	8009ca8 <__sflush_r+0x48>
 8009c9c:	6863      	ldr	r3, [r4, #4]
 8009c9e:	1ac0      	subs	r0, r0, r3
 8009ca0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca2:	b10b      	cbz	r3, 8009ca8 <__sflush_r+0x48>
 8009ca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ca6:	1ac0      	subs	r0, r0, r3
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4602      	mov	r2, r0
 8009cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cae:	6a21      	ldr	r1, [r4, #32]
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	47b0      	blx	r6
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	d106      	bne.n	8009cc8 <__sflush_r+0x68>
 8009cba:	6829      	ldr	r1, [r5, #0]
 8009cbc:	291d      	cmp	r1, #29
 8009cbe:	d82b      	bhi.n	8009d18 <__sflush_r+0xb8>
 8009cc0:	4a29      	ldr	r2, [pc, #164]	; (8009d68 <__sflush_r+0x108>)
 8009cc2:	410a      	asrs	r2, r1
 8009cc4:	07d6      	lsls	r6, r2, #31
 8009cc6:	d427      	bmi.n	8009d18 <__sflush_r+0xb8>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	6062      	str	r2, [r4, #4]
 8009ccc:	04d9      	lsls	r1, r3, #19
 8009cce:	6922      	ldr	r2, [r4, #16]
 8009cd0:	6022      	str	r2, [r4, #0]
 8009cd2:	d504      	bpl.n	8009cde <__sflush_r+0x7e>
 8009cd4:	1c42      	adds	r2, r0, #1
 8009cd6:	d101      	bne.n	8009cdc <__sflush_r+0x7c>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b903      	cbnz	r3, 8009cde <__sflush_r+0x7e>
 8009cdc:	6560      	str	r0, [r4, #84]	; 0x54
 8009cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce0:	602f      	str	r7, [r5, #0]
 8009ce2:	2900      	cmp	r1, #0
 8009ce4:	d0c9      	beq.n	8009c7a <__sflush_r+0x1a>
 8009ce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cea:	4299      	cmp	r1, r3
 8009cec:	d002      	beq.n	8009cf4 <__sflush_r+0x94>
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f7ff fc96 	bl	8009620 <_free_r>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	6360      	str	r0, [r4, #52]	; 0x34
 8009cf8:	e7c0      	b.n	8009c7c <__sflush_r+0x1c>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b0      	blx	r6
 8009d00:	1c41      	adds	r1, r0, #1
 8009d02:	d1c8      	bne.n	8009c96 <__sflush_r+0x36>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0c5      	beq.n	8009c96 <__sflush_r+0x36>
 8009d0a:	2b1d      	cmp	r3, #29
 8009d0c:	d001      	beq.n	8009d12 <__sflush_r+0xb2>
 8009d0e:	2b16      	cmp	r3, #22
 8009d10:	d101      	bne.n	8009d16 <__sflush_r+0xb6>
 8009d12:	602f      	str	r7, [r5, #0]
 8009d14:	e7b1      	b.n	8009c7a <__sflush_r+0x1a>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	e7ad      	b.n	8009c7c <__sflush_r+0x1c>
 8009d20:	690f      	ldr	r7, [r1, #16]
 8009d22:	2f00      	cmp	r7, #0
 8009d24:	d0a9      	beq.n	8009c7a <__sflush_r+0x1a>
 8009d26:	0793      	lsls	r3, r2, #30
 8009d28:	680e      	ldr	r6, [r1, #0]
 8009d2a:	bf08      	it	eq
 8009d2c:	694b      	ldreq	r3, [r1, #20]
 8009d2e:	600f      	str	r7, [r1, #0]
 8009d30:	bf18      	it	ne
 8009d32:	2300      	movne	r3, #0
 8009d34:	eba6 0807 	sub.w	r8, r6, r7
 8009d38:	608b      	str	r3, [r1, #8]
 8009d3a:	f1b8 0f00 	cmp.w	r8, #0
 8009d3e:	dd9c      	ble.n	8009c7a <__sflush_r+0x1a>
 8009d40:	6a21      	ldr	r1, [r4, #32]
 8009d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d44:	4643      	mov	r3, r8
 8009d46:	463a      	mov	r2, r7
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b0      	blx	r6
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	dc06      	bgt.n	8009d5e <__sflush_r+0xfe>
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d5c:	e78e      	b.n	8009c7c <__sflush_r+0x1c>
 8009d5e:	4407      	add	r7, r0
 8009d60:	eba8 0800 	sub.w	r8, r8, r0
 8009d64:	e7e9      	b.n	8009d3a <__sflush_r+0xda>
 8009d66:	bf00      	nop
 8009d68:	dfbffffe 	.word	0xdfbffffe

08009d6c <_fflush_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	690b      	ldr	r3, [r1, #16]
 8009d70:	4605      	mov	r5, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b913      	cbnz	r3, 8009d7c <_fflush_r+0x10>
 8009d76:	2500      	movs	r5, #0
 8009d78:	4628      	mov	r0, r5
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	b118      	cbz	r0, 8009d86 <_fflush_r+0x1a>
 8009d7e:	6a03      	ldr	r3, [r0, #32]
 8009d80:	b90b      	cbnz	r3, 8009d86 <_fflush_r+0x1a>
 8009d82:	f7ff fb2f 	bl	80093e4 <__sinit>
 8009d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0f3      	beq.n	8009d76 <_fflush_r+0xa>
 8009d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d90:	07d0      	lsls	r0, r2, #31
 8009d92:	d404      	bmi.n	8009d9e <_fflush_r+0x32>
 8009d94:	0599      	lsls	r1, r3, #22
 8009d96:	d402      	bmi.n	8009d9e <_fflush_r+0x32>
 8009d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d9a:	f7ff fc37 	bl	800960c <__retarget_lock_acquire_recursive>
 8009d9e:	4628      	mov	r0, r5
 8009da0:	4621      	mov	r1, r4
 8009da2:	f7ff ff5d 	bl	8009c60 <__sflush_r>
 8009da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009da8:	07da      	lsls	r2, r3, #31
 8009daa:	4605      	mov	r5, r0
 8009dac:	d4e4      	bmi.n	8009d78 <_fflush_r+0xc>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	059b      	lsls	r3, r3, #22
 8009db2:	d4e1      	bmi.n	8009d78 <_fflush_r+0xc>
 8009db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009db6:	f7ff fc2a 	bl	800960e <__retarget_lock_release_recursive>
 8009dba:	e7dd      	b.n	8009d78 <_fflush_r+0xc>

08009dbc <__swbuf_r>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	b118      	cbz	r0, 8009dce <__swbuf_r+0x12>
 8009dc6:	6a03      	ldr	r3, [r0, #32]
 8009dc8:	b90b      	cbnz	r3, 8009dce <__swbuf_r+0x12>
 8009dca:	f7ff fb0b 	bl	80093e4 <__sinit>
 8009dce:	69a3      	ldr	r3, [r4, #24]
 8009dd0:	60a3      	str	r3, [r4, #8]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	071a      	lsls	r2, r3, #28
 8009dd6:	d525      	bpl.n	8009e24 <__swbuf_r+0x68>
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	b31b      	cbz	r3, 8009e24 <__swbuf_r+0x68>
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	6922      	ldr	r2, [r4, #16]
 8009de0:	1a98      	subs	r0, r3, r2
 8009de2:	6963      	ldr	r3, [r4, #20]
 8009de4:	b2f6      	uxtb	r6, r6
 8009de6:	4283      	cmp	r3, r0
 8009de8:	4637      	mov	r7, r6
 8009dea:	dc04      	bgt.n	8009df6 <__swbuf_r+0x3a>
 8009dec:	4621      	mov	r1, r4
 8009dee:	4628      	mov	r0, r5
 8009df0:	f7ff ffbc 	bl	8009d6c <_fflush_r>
 8009df4:	b9e0      	cbnz	r0, 8009e30 <__swbuf_r+0x74>
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	60a3      	str	r3, [r4, #8]
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	6022      	str	r2, [r4, #0]
 8009e02:	701e      	strb	r6, [r3, #0]
 8009e04:	6962      	ldr	r2, [r4, #20]
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d004      	beq.n	8009e16 <__swbuf_r+0x5a>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	07db      	lsls	r3, r3, #31
 8009e10:	d506      	bpl.n	8009e20 <__swbuf_r+0x64>
 8009e12:	2e0a      	cmp	r6, #10
 8009e14:	d104      	bne.n	8009e20 <__swbuf_r+0x64>
 8009e16:	4621      	mov	r1, r4
 8009e18:	4628      	mov	r0, r5
 8009e1a:	f7ff ffa7 	bl	8009d6c <_fflush_r>
 8009e1e:	b938      	cbnz	r0, 8009e30 <__swbuf_r+0x74>
 8009e20:	4638      	mov	r0, r7
 8009e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e24:	4621      	mov	r1, r4
 8009e26:	4628      	mov	r0, r5
 8009e28:	f000 f806 	bl	8009e38 <__swsetup_r>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d0d5      	beq.n	8009ddc <__swbuf_r+0x20>
 8009e30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009e34:	e7f4      	b.n	8009e20 <__swbuf_r+0x64>
	...

08009e38 <__swsetup_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4b2a      	ldr	r3, [pc, #168]	; (8009ee4 <__swsetup_r+0xac>)
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	460c      	mov	r4, r1
 8009e42:	b118      	cbz	r0, 8009e4c <__swsetup_r+0x14>
 8009e44:	6a03      	ldr	r3, [r0, #32]
 8009e46:	b90b      	cbnz	r3, 8009e4c <__swsetup_r+0x14>
 8009e48:	f7ff facc 	bl	80093e4 <__sinit>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e52:	0718      	lsls	r0, r3, #28
 8009e54:	d422      	bmi.n	8009e9c <__swsetup_r+0x64>
 8009e56:	06d9      	lsls	r1, r3, #27
 8009e58:	d407      	bmi.n	8009e6a <__swsetup_r+0x32>
 8009e5a:	2309      	movs	r3, #9
 8009e5c:	602b      	str	r3, [r5, #0]
 8009e5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e68:	e034      	b.n	8009ed4 <__swsetup_r+0x9c>
 8009e6a:	0758      	lsls	r0, r3, #29
 8009e6c:	d512      	bpl.n	8009e94 <__swsetup_r+0x5c>
 8009e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e70:	b141      	cbz	r1, 8009e84 <__swsetup_r+0x4c>
 8009e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e76:	4299      	cmp	r1, r3
 8009e78:	d002      	beq.n	8009e80 <__swsetup_r+0x48>
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f7ff fbd0 	bl	8009620 <_free_r>
 8009e80:	2300      	movs	r3, #0
 8009e82:	6363      	str	r3, [r4, #52]	; 0x34
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e8a:	81a3      	strh	r3, [r4, #12]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6063      	str	r3, [r4, #4]
 8009e90:	6923      	ldr	r3, [r4, #16]
 8009e92:	6023      	str	r3, [r4, #0]
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f043 0308 	orr.w	r3, r3, #8
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	b94b      	cbnz	r3, 8009eb4 <__swsetup_r+0x7c>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eaa:	d003      	beq.n	8009eb4 <__swsetup_r+0x7c>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f000 f884 	bl	8009fbc <__smakebuf_r>
 8009eb4:	89a0      	ldrh	r0, [r4, #12]
 8009eb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eba:	f010 0301 	ands.w	r3, r0, #1
 8009ebe:	d00a      	beq.n	8009ed6 <__swsetup_r+0x9e>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60a3      	str	r3, [r4, #8]
 8009ec4:	6963      	ldr	r3, [r4, #20]
 8009ec6:	425b      	negs	r3, r3
 8009ec8:	61a3      	str	r3, [r4, #24]
 8009eca:	6923      	ldr	r3, [r4, #16]
 8009ecc:	b943      	cbnz	r3, 8009ee0 <__swsetup_r+0xa8>
 8009ece:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ed2:	d1c4      	bne.n	8009e5e <__swsetup_r+0x26>
 8009ed4:	bd38      	pop	{r3, r4, r5, pc}
 8009ed6:	0781      	lsls	r1, r0, #30
 8009ed8:	bf58      	it	pl
 8009eda:	6963      	ldrpl	r3, [r4, #20]
 8009edc:	60a3      	str	r3, [r4, #8]
 8009ede:	e7f4      	b.n	8009eca <__swsetup_r+0x92>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e7f7      	b.n	8009ed4 <__swsetup_r+0x9c>
 8009ee4:	2000008c 	.word	0x2000008c

08009ee8 <_raise_r>:
 8009ee8:	291f      	cmp	r1, #31
 8009eea:	b538      	push	{r3, r4, r5, lr}
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	d904      	bls.n	8009efc <_raise_r+0x14>
 8009ef2:	2316      	movs	r3, #22
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009efe:	b112      	cbz	r2, 8009f06 <_raise_r+0x1e>
 8009f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f04:	b94b      	cbnz	r3, 8009f1a <_raise_r+0x32>
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f830 	bl	8009f6c <_getpid_r>
 8009f0c:	462a      	mov	r2, r5
 8009f0e:	4601      	mov	r1, r0
 8009f10:	4620      	mov	r0, r4
 8009f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f16:	f000 b817 	b.w	8009f48 <_kill_r>
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d00a      	beq.n	8009f34 <_raise_r+0x4c>
 8009f1e:	1c59      	adds	r1, r3, #1
 8009f20:	d103      	bne.n	8009f2a <_raise_r+0x42>
 8009f22:	2316      	movs	r3, #22
 8009f24:	6003      	str	r3, [r0, #0]
 8009f26:	2001      	movs	r0, #1
 8009f28:	e7e7      	b.n	8009efa <_raise_r+0x12>
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f30:	4628      	mov	r0, r5
 8009f32:	4798      	blx	r3
 8009f34:	2000      	movs	r0, #0
 8009f36:	e7e0      	b.n	8009efa <_raise_r+0x12>

08009f38 <raise>:
 8009f38:	4b02      	ldr	r3, [pc, #8]	; (8009f44 <raise+0xc>)
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	f7ff bfd3 	b.w	8009ee8 <_raise_r>
 8009f42:	bf00      	nop
 8009f44:	2000008c 	.word	0x2000008c

08009f48 <_kill_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_kill_r+0x20>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	f7f7 f821 	bl	8000f9c <_kill>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d102      	bne.n	8009f64 <_kill_r+0x1c>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b103      	cbz	r3, 8009f64 <_kill_r+0x1c>
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	bd38      	pop	{r3, r4, r5, pc}
 8009f66:	bf00      	nop
 8009f68:	200009d4 	.word	0x200009d4

08009f6c <_getpid_r>:
 8009f6c:	f7f7 b80e 	b.w	8000f8c <_getpid>

08009f70 <__swhatbuf_r>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	460c      	mov	r4, r1
 8009f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	b096      	sub	sp, #88	; 0x58
 8009f7c:	4615      	mov	r5, r2
 8009f7e:	461e      	mov	r6, r3
 8009f80:	da0d      	bge.n	8009f9e <__swhatbuf_r+0x2e>
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f88:	f04f 0100 	mov.w	r1, #0
 8009f8c:	bf0c      	ite	eq
 8009f8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f92:	2340      	movne	r3, #64	; 0x40
 8009f94:	2000      	movs	r0, #0
 8009f96:	6031      	str	r1, [r6, #0]
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	b016      	add	sp, #88	; 0x58
 8009f9c:	bd70      	pop	{r4, r5, r6, pc}
 8009f9e:	466a      	mov	r2, sp
 8009fa0:	f000 f848 	bl	800a034 <_fstat_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	dbec      	blt.n	8009f82 <__swhatbuf_r+0x12>
 8009fa8:	9901      	ldr	r1, [sp, #4]
 8009faa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009fae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009fb2:	4259      	negs	r1, r3
 8009fb4:	4159      	adcs	r1, r3
 8009fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fba:	e7eb      	b.n	8009f94 <__swhatbuf_r+0x24>

08009fbc <__smakebuf_r>:
 8009fbc:	898b      	ldrh	r3, [r1, #12]
 8009fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fc0:	079d      	lsls	r5, r3, #30
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	d507      	bpl.n	8009fd8 <__smakebuf_r+0x1c>
 8009fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	6123      	str	r3, [r4, #16]
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	6163      	str	r3, [r4, #20]
 8009fd4:	b002      	add	sp, #8
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	ab01      	add	r3, sp, #4
 8009fda:	466a      	mov	r2, sp
 8009fdc:	f7ff ffc8 	bl	8009f70 <__swhatbuf_r>
 8009fe0:	9900      	ldr	r1, [sp, #0]
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7ff f8f7 	bl	80091d8 <_malloc_r>
 8009fea:	b948      	cbnz	r0, 800a000 <__smakebuf_r+0x44>
 8009fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff0:	059a      	lsls	r2, r3, #22
 8009ff2:	d4ef      	bmi.n	8009fd4 <__smakebuf_r+0x18>
 8009ff4:	f023 0303 	bic.w	r3, r3, #3
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	e7e3      	b.n	8009fc8 <__smakebuf_r+0xc>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	6020      	str	r0, [r4, #0]
 800a004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a008:	81a3      	strh	r3, [r4, #12]
 800a00a:	9b00      	ldr	r3, [sp, #0]
 800a00c:	6163      	str	r3, [r4, #20]
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	6120      	str	r0, [r4, #16]
 800a012:	b15b      	cbz	r3, 800a02c <__smakebuf_r+0x70>
 800a014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a018:	4630      	mov	r0, r6
 800a01a:	f000 f81d 	bl	800a058 <_isatty_r>
 800a01e:	b128      	cbz	r0, 800a02c <__smakebuf_r+0x70>
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f023 0303 	bic.w	r3, r3, #3
 800a026:	f043 0301 	orr.w	r3, r3, #1
 800a02a:	81a3      	strh	r3, [r4, #12]
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	431d      	orrs	r5, r3
 800a030:	81a5      	strh	r5, [r4, #12]
 800a032:	e7cf      	b.n	8009fd4 <__smakebuf_r+0x18>

0800a034 <_fstat_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	; (800a054 <_fstat_r+0x20>)
 800a038:	2300      	movs	r3, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	4611      	mov	r1, r2
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	f7f7 f80a 	bl	800105a <_fstat>
 800a046:	1c43      	adds	r3, r0, #1
 800a048:	d102      	bne.n	800a050 <_fstat_r+0x1c>
 800a04a:	682b      	ldr	r3, [r5, #0]
 800a04c:	b103      	cbz	r3, 800a050 <_fstat_r+0x1c>
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	bd38      	pop	{r3, r4, r5, pc}
 800a052:	bf00      	nop
 800a054:	200009d4 	.word	0x200009d4

0800a058 <_isatty_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4d06      	ldr	r5, [pc, #24]	; (800a074 <_isatty_r+0x1c>)
 800a05c:	2300      	movs	r3, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	4608      	mov	r0, r1
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	f7f7 f809 	bl	800107a <_isatty>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_isatty_r+0x1a>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_isatty_r+0x1a>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	200009d4 	.word	0x200009d4

0800a078 <_init>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	bf00      	nop
 800a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07e:	bc08      	pop	{r3}
 800a080:	469e      	mov	lr, r3
 800a082:	4770      	bx	lr

0800a084 <_fini>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	bf00      	nop
 800a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08a:	bc08      	pop	{r3}
 800a08c:	469e      	mov	lr, r3
 800a08e:	4770      	bx	lr
